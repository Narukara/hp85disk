
gpib.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000164e  00800100  0001d94a  0001d9de  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0001d94a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000008e2  0080174e  0080174e  0001f02c  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  0001f02c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0001f040  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00001740  00000000  00000000  0001f080  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00029655  00000000  00000000  000207c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000062ae  00000000  00000000  00049e15  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0001266f  00000000  00000000  000500c3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00005214  00000000  00000000  00062734  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00004b26  00000000  00000000  00067948  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00024ad1  00000000  00000000  0006c46e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00001770  00000000  00000000  00090f3f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 63 26 	jmp	0x4cc6	; 0x4cc6 <__ctors_end>
       4:	0c 94 82 26 	jmp	0x4d04	; 0x4d04 <__bad_interrupt>
       8:	0c 94 82 26 	jmp	0x4d04	; 0x4d04 <__bad_interrupt>
       c:	0c 94 82 26 	jmp	0x4d04	; 0x4d04 <__bad_interrupt>
      10:	0c 94 82 26 	jmp	0x4d04	; 0x4d04 <__bad_interrupt>
      14:	0c 94 82 26 	jmp	0x4d04	; 0x4d04 <__bad_interrupt>
      18:	0c 94 82 26 	jmp	0x4d04	; 0x4d04 <__bad_interrupt>
      1c:	0c 94 82 26 	jmp	0x4d04	; 0x4d04 <__bad_interrupt>
      20:	0c 94 82 26 	jmp	0x4d04	; 0x4d04 <__bad_interrupt>
      24:	0c 94 82 26 	jmp	0x4d04	; 0x4d04 <__bad_interrupt>
      28:	0c 94 82 26 	jmp	0x4d04	; 0x4d04 <__bad_interrupt>
      2c:	0c 94 82 26 	jmp	0x4d04	; 0x4d04 <__bad_interrupt>
      30:	0c 94 82 26 	jmp	0x4d04	; 0x4d04 <__bad_interrupt>
      34:	0c 94 93 34 	jmp	0x6926	; 0x6926 <__vector_13>
      38:	0c 94 82 26 	jmp	0x4d04	; 0x4d04 <__bad_interrupt>
      3c:	0c 94 82 26 	jmp	0x4d04	; 0x4d04 <__bad_interrupt>
      40:	0c 94 82 26 	jmp	0x4d04	; 0x4d04 <__bad_interrupt>
      44:	0c 94 82 26 	jmp	0x4d04	; 0x4d04 <__bad_interrupt>
      48:	0c 94 82 26 	jmp	0x4d04	; 0x4d04 <__bad_interrupt>
      4c:	0c 94 82 26 	jmp	0x4d04	; 0x4d04 <__bad_interrupt>
      50:	0c 94 30 2a 	jmp	0x5460	; 0x5460 <__vector_20>
      54:	0c 94 82 26 	jmp	0x4d04	; 0x4d04 <__bad_interrupt>
      58:	0c 94 82 26 	jmp	0x4d04	; 0x4d04 <__bad_interrupt>
      5c:	0c 94 82 26 	jmp	0x4d04	; 0x4d04 <__bad_interrupt>
      60:	0c 94 82 26 	jmp	0x4d04	; 0x4d04 <__bad_interrupt>
      64:	0c 94 82 26 	jmp	0x4d04	; 0x4d04 <__bad_interrupt>
      68:	0c 94 6a 2e 	jmp	0x5cd4	; 0x5cd4 <__vector_26>
      6c:	0c 94 82 26 	jmp	0x4d04	; 0x4d04 <__bad_interrupt>
      70:	0c 94 82 26 	jmp	0x4d04	; 0x4d04 <__bad_interrupt>
      74:	0c 94 82 26 	jmp	0x4d04	; 0x4d04 <__bad_interrupt>
      78:	0c 94 82 26 	jmp	0x4d04	; 0x4d04 <__bad_interrupt>
      7c:	0c 94 82 26 	jmp	0x4d04	; 0x4d04 <__bad_interrupt>
      80:	0c 94 82 26 	jmp	0x4d04	; 0x4d04 <__bad_interrupt>
      84:	0c 94 82 26 	jmp	0x4d04	; 0x4d04 <__bad_interrupt>
      88:	0c 94 82 26 	jmp	0x4d04	; 0x4d04 <__bad_interrupt>
      8c:	c3 44       	sbci	r28, 0x43	; 67
      8e:	13 46       	sbci	r17, 0x63	; 99
      90:	fb 44       	sbci	r31, 0x4B	; 75
      92:	e6 45       	sbci	r30, 0x56	; 86
      94:	e6 45       	sbci	r30, 0x56	; 86
      96:	13 46       	sbci	r17, 0x63	; 99
      98:	13 46       	sbci	r17, 0x63	; 99
      9a:	13 46       	sbci	r17, 0x63	; 99
      9c:	13 46       	sbci	r17, 0x63	; 99
      9e:	13 46       	sbci	r17, 0x63	; 99
      a0:	13 46       	sbci	r17, 0x63	; 99
      a2:	13 46       	sbci	r17, 0x63	; 99
      a4:	13 46       	sbci	r17, 0x63	; 99
      a6:	c3 44       	sbci	r28, 0x43	; 67
      a8:	c0 44       	sbci	r28, 0x40	; 64
      aa:	13 46       	sbci	r17, 0x63	; 99
      ac:	13 46       	sbci	r17, 0x63	; 99
      ae:	09 46       	sbci	r16, 0x69	; 105
      b0:	13 46       	sbci	r17, 0x63	; 99
      b2:	f5 44       	sbci	r31, 0x45	; 69
      b4:	13 46       	sbci	r17, 0x63	; 99
      b6:	13 46       	sbci	r17, 0x63	; 99
      b8:	c3 44       	sbci	r28, 0x43	; 67
      ba:	13 46       	sbci	r17, 0x63	; 99
      bc:	13 46       	sbci	r17, 0x63	; 99
      be:	13 46       	sbci	r17, 0x63	; 99
      c0:	13 46       	sbci	r17, 0x63	; 99
      c2:	13 46       	sbci	r17, 0x63	; 99
      c4:	13 46       	sbci	r17, 0x63	; 99
      c6:	13 46       	sbci	r17, 0x63	; 99
      c8:	13 46       	sbci	r17, 0x63	; 99
      ca:	13 46       	sbci	r17, 0x63	; 99
      cc:	c3 44       	sbci	r28, 0x43	; 67
      ce:	0e 46       	sbci	r16, 0x6E	; 110
      d0:	fb 44       	sbci	r31, 0x4B	; 75
      d2:	e6 45       	sbci	r30, 0x56	; 86
      d4:	e6 45       	sbci	r30, 0x56	; 86
      d6:	13 46       	sbci	r17, 0x63	; 99
      d8:	13 46       	sbci	r17, 0x63	; 99
      da:	13 46       	sbci	r17, 0x63	; 99
      dc:	13 46       	sbci	r17, 0x63	; 99
      de:	13 46       	sbci	r17, 0x63	; 99
      e0:	13 46       	sbci	r17, 0x63	; 99
      e2:	13 46       	sbci	r17, 0x63	; 99
      e4:	13 46       	sbci	r17, 0x63	; 99
      e6:	c3 44       	sbci	r28, 0x43	; 67
      e8:	c0 44       	sbci	r28, 0x40	; 64
      ea:	13 46       	sbci	r17, 0x63	; 99
      ec:	13 46       	sbci	r17, 0x63	; 99
      ee:	04 46       	sbci	r16, 0x64	; 100
      f0:	13 46       	sbci	r17, 0x63	; 99
      f2:	f5 44       	sbci	r31, 0x45	; 69
      f4:	13 46       	sbci	r17, 0x63	; 99
      f6:	13 46       	sbci	r17, 0x63	; 99
      f8:	c3 44       	sbci	r28, 0x43	; 67
      fa:	38 46       	sbci	r19, 0x68	; 104
      fc:	79 47       	sbci	r23, 0x79	; 121
      fe:	2b 46       	sbci	r18, 0x6B	; 107
     100:	93 46       	sbci	r25, 0x63	; 99
     102:	77 46       	sbci	r23, 0x67	; 103
     104:	79 47       	sbci	r23, 0x79	; 121
     106:	79 47       	sbci	r23, 0x79	; 121
     108:	79 47       	sbci	r23, 0x79	; 121
     10a:	79 47       	sbci	r23, 0x79	; 121
     10c:	79 47       	sbci	r23, 0x79	; 121
     10e:	79 47       	sbci	r23, 0x79	; 121
     110:	79 47       	sbci	r23, 0x79	; 121
     112:	79 47       	sbci	r23, 0x79	; 121
     114:	45 46       	sbci	r20, 0x65	; 101
     116:	59 46       	sbci	r21, 0x69	; 105
     118:	79 47       	sbci	r23, 0x79	; 121
     11a:	79 47       	sbci	r23, 0x79	; 121
     11c:	1f 47       	sbci	r17, 0x7F	; 127
     11e:	79 47       	sbci	r23, 0x79	; 121
     120:	27 46       	sbci	r18, 0x67	; 103
     122:	79 47       	sbci	r23, 0x79	; 121
     124:	79 47       	sbci	r23, 0x79	; 121
     126:	59 46       	sbci	r21, 0x69	; 105
     128:	79 47       	sbci	r23, 0x79	; 121
     12a:	79 47       	sbci	r23, 0x79	; 121
     12c:	79 47       	sbci	r23, 0x79	; 121
     12e:	79 47       	sbci	r23, 0x79	; 121
     130:	79 47       	sbci	r23, 0x79	; 121
     132:	79 47       	sbci	r23, 0x79	; 121
     134:	79 47       	sbci	r23, 0x79	; 121
     136:	79 47       	sbci	r23, 0x79	; 121
     138:	79 47       	sbci	r23, 0x79	; 121
     13a:	38 46       	sbci	r19, 0x68	; 104
     13c:	c7 46       	sbci	r28, 0x67	; 103
     13e:	2b 46       	sbci	r18, 0x6B	; 107
     140:	93 46       	sbci	r25, 0x63	; 99
     142:	77 46       	sbci	r23, 0x67	; 103
     144:	79 47       	sbci	r23, 0x79	; 121
     146:	79 47       	sbci	r23, 0x79	; 121
     148:	79 47       	sbci	r23, 0x79	; 121
     14a:	79 47       	sbci	r23, 0x79	; 121
     14c:	79 47       	sbci	r23, 0x79	; 121
     14e:	79 47       	sbci	r23, 0x79	; 121
     150:	79 47       	sbci	r23, 0x79	; 121
     152:	79 47       	sbci	r23, 0x79	; 121
     154:	45 46       	sbci	r20, 0x65	; 101
     156:	59 46       	sbci	r21, 0x69	; 105
     158:	79 47       	sbci	r23, 0x79	; 121
     15a:	79 47       	sbci	r23, 0x79	; 121
     15c:	c7 46       	sbci	r28, 0x67	; 103
     15e:	79 47       	sbci	r23, 0x79	; 121
     160:	27 46       	sbci	r18, 0x67	; 103
     162:	79 47       	sbci	r23, 0x79	; 121
     164:	79 47       	sbci	r23, 0x79	; 121
     166:	59 46       	sbci	r21, 0x69	; 105
     168:	58 6a       	ori	r21, 0xA8	; 168
     16a:	62 6a       	ori	r22, 0xA2	; 162
     16c:	6a 6a       	ori	r22, 0xAA	; 170
     16e:	6d 6a       	ori	r22, 0xAD	; 173
     170:	70 6a       	ori	r23, 0xA0	; 160
     172:	73 6a       	ori	r23, 0xA3	; 163
     174:	76 6a       	ori	r23, 0xA6	; 166
     176:	79 6a       	ori	r23, 0xA9	; 169
     178:	7c 6a       	ori	r23, 0xAC	; 172
     17a:	6e 88       	ldd	r6, Y+22	; 0x16
     17c:	76 88       	ldd	r7, Z+22	; 0x16
     17e:	a7 88       	ldd	r10, Z+23	; 0x17
     180:	c0 88       	ldd	r12, Z+16	; 0x10
     182:	dc 88       	ldd	r13, Y+20	; 0x14
     184:	e9 88       	ldd	r14, Y+17	; 0x11
     186:	05 89       	ldd	r16, Z+21	; 0x15
     188:	2f 89       	ldd	r18, Y+23	; 0x17
     18a:	12 89       	ldd	r17, Z+18	; 0x12
     18c:	cb 9f       	mul	r28, r27
     18e:	9b a0       	ldd	r9, Y+35	; 0x23
     190:	d7 a0       	ldd	r13, Z+39	; 0x27
     192:	0a a1       	ldd	r16, Y+34	; 0x22
     194:	1a a1       	ldd	r17, Y+34	; 0x22
     196:	37 a1       	ldd	r19, Z+39	; 0x27
     198:	97 a1       	ldd	r25, Z+39	; 0x27
     19a:	82 a2       	std	Z+34, r8	; 0x22
     19c:	82 a2       	std	Z+34, r8	; 0x22
     19e:	82 a2       	std	Z+34, r8	; 0x22
     1a0:	cb a1       	ldd	r28, Y+35	; 0x23
     1a2:	f7 a1       	ldd	r31, Z+39	; 0x27
     1a4:	3a a2       	std	Y+34, r3	; 0x22
     1a6:	51 a2       	std	Z+33, r5	; 0x21
     1a8:	64 a0       	ldd	r6, Z+36	; 0x24
     1aa:	77 a0       	ldd	r7, Z+39	; 0x27
     1ac:	89 be       	out	0x39, r8	; 57
     1ae:	48 be       	out	0x38, r4	; 56
     1b0:	48 be       	out	0x38, r4	; 56
     1b2:	48 be       	out	0x38, r4	; 56
     1b4:	48 be       	out	0x38, r4	; 56
     1b6:	0c be       	out	0x3c, r0	; 60
     1b8:	13 be       	out	0x33, r1	; 51
     1ba:	1a be       	out	0x3a, r1	; 58
     1bc:	2a be       	out	0x3a, r2	; 58
     1be:	38 be       	out	0x38, r3	; 56
     1c0:	31 be       	out	0x31, r3	; 49

000001c2 <__trampolines_end>:
     1c2:	63 73       	andi	r22, 0x33	; 51
     1c4:	5f 64       	ori	r21, 0x4F	; 79
     1c6:	69 73       	andi	r22, 0x39	; 57
     1c8:	61 62       	ori	r22, 0x21	; 33
     1ca:	6c 65       	ori	r22, 0x5C	; 92
     1cc:	20 77       	andi	r18, 0x70	; 112
     1ce:	61 73       	andi	r22, 0x31	; 49
     1d0:	3a 20       	and	r3, r10
     1d2:	25 64       	ori	r18, 0x45	; 69
     1d4:	2c 20       	and	r2, r12
     1d6:	77 61       	ori	r23, 0x17	; 23
     1d8:	6e 74       	andi	r22, 0x4E	; 78
     1da:	3a 20       	and	r3, r10
     1dc:	25 64       	ori	r18, 0x45	; 69
     1de:	0a 00       	.word	0x000a	; ????

000001e0 <__c.3621>:
     1e0:	63 73 5f 65 6e 61 62 6c 65 20 77 61 73 3a 20 25     cs_enable was: %
     1f0:	64 2c 20 77 61 6e 74 3a 20 25 64 0a 00              d, want: %d..

000001fd <__c.3628>:
     1fd:	73 61 66 65 66 72 65 65 3a 20 46 52 45 45 20 45     safefree: FREE E
     20d:	52 52 4f 52 20 73 74 61 72 74 28 25 6c 75 29 2c     RROR start(%lu),
     21d:	20 65 6e 64 28 25 6c 75 29 0a 00                     end(%lu)..

00000228 <__c.3622>:
     228:	73 61 66 65 6d 61 6c 6c 6f 63 28 25 64 29 20 66     safemalloc(%d) f
     238:	61 69 6c 65 64 21 0a 00                             ailed!..

00000240 <__c.3616>:
     240:	73 61 66 65 63 61 6c 6c 6f 63 28 25 64 2c 25 64     safecalloc(%d,%d
     250:	29 20 66 61 69 6c 65 64 21 0a 00                    ) failed!..

0000025b <__c.3609>:
     25b:	20 20 44 61 74 61 20 20 53 74 61 72 74 3a 20 20       Data  Start:  
     26b:	20 25 35 75 2c 20 45 6e 64 3a 20 25 35 75 0a 00      %5u, End: %5u..

0000027b <__c.3607>:
     27b:	20 20 42 53 53 20 20 20 53 74 61 72 74 3a 20 20       BSS   Start:  
     28b:	20 25 35 75 2c 20 45 6e 64 3a 20 25 35 75 0a 00      %5u, End: %5u..

0000029b <__c.3605>:
     29b:	20 20 48 65 61 70 20 20 53 74 61 72 74 3a 20 20       Heap  Start:  
     2ab:	20 25 35 75 2c 20 45 6e 64 3a 20 25 35 75 0a 00      %5u, End: %5u..

000002bb <__c.3603>:
     2bb:	20 20 53 74 61 63 6b 20 55 73 65 64 3a 20 20 20       Stack Used:   
     2cb:	20 25 35 75 0a 00                                    %5u..

000002d1 <__c.3601>:
     2d1:	20 20 53 74 61 63 6b 20 54 6f 70 3a 20 20 20 20       Stack Top:    
     2e1:	20 25 35 75 2c 20 45 6e 64 3a 20 25 35 75 0a 00      %5u, End: %5u..

000002f1 <__c.3599>:
     2f1:	46 72 65 65 20 52 61 6d 3a 20 20 20 20 20 20 20     Free Ram:       
     301:	20 25 35 75 0a 00                                    %5u..

00000307 <__c.3608>:
     307:	53 50 49 30 5f 4d 6f 64 65 3a 20 49 6e 76 61 6c     SPI0_Mode: Inval
     317:	69 64 20 6d 6f 64 65 28 25 64 29 0a 00              id mode(%d)..

00000324 <__c.3593>:
     324:	73 70 69 20 72 61 74 65 3a 20 25 6c 64 0a 00        spi rate: %ld..

00000333 <__c.3725>:
     333:	0a 00                                               ..

00000335 <__c.3723>:
     335:	74 61 73 6b 3a 20 25 64 0a 00                       task: %d..

0000033f <__c.3721>:
     33f:	69 32 63 5f 74 61 73 6b 2e 65 72 72 6f 72 3a 20     i2c_task.error: 
     34f:	25 64 0a 00                                         %d..

00000353 <__c.3719>:
     353:	69 32 63 5f 74 61 73 6b 2e 64 6f 6e 65 3a 20 25     i2c_task.done: %
     363:	64 0a 00                                            d..

00000366 <__c.3714>:
     366:	0a 00                                               ..

00000368 <__c.3712>:
     368:	20 20 54 57 5f 4d 54 5f 44 41 54 41 5f 4e 41 43       TW_MT_DATA_NAC
     378:	4b 0a 00                                            K..

0000037b <__c.3710>:
     37b:	20 20 54 57 5f 4d 54 5f 53 4c 41 5f 4e 41 43 4b       TW_MT_SLA_NACK
     38b:	0a 00                                               ..

0000038d <__c.3708>:
     38d:	20 20 54 57 5f 4d 52 5f 53 4c 41 5f 4e 41 43 4b       TW_MR_SLA_NACK
     39d:	0a 00                                               ..

0000039f <__c.3706>:
     39f:	20 20 4f 50 5f 45 52 52 4f 52 0a 00                   OP_ERROR..

000003ab <__c.3704>:
     3ab:	20 20 4f 50 5f 4c 45 4e 0a 00                         OP_LEN..

000003b5 <__c.3702>:
     3b5:	20 20 4f 50 5f 54 49 4d 45 4f 55 54 0a 00             OP_TIMEOUT..

000003c3 <__c.3700>:
     3c3:	20 20 25 73 0a 00                                     %s..

000003c9 <__c.3650>:
     3c9:	69 32 63 5f 74 69 6d 65 72 20 69 6e 69 74 20 66     i2c_timer init f
     3d9:	61 69 6c 65 64 0a 00                                ailed..

000003e0 <__c.3644>:
     3e0:	69 32 63 5f 69 6e 69 74 20 70 72 65 73 63 61 6c     i2c_init prescal
     3f0:	65 20 6f 76 65 72 66 6c 6f 77 0a 00                 e overflow..

000003fc <__c.3601>:
     3fc:	49 32 43 20 6f 70 5b 25 64 5d 2d 3e 6c 65 6e 20     I2C op[%d]->len 
     40c:	3d 3d 20 30 0a 00                                   == 0..

00000412 <__c.3599>:
     412:	49 32 43 20 6f 70 5b 25 64 5d 2d 3e 62 75 66 20     I2C op[%d]->buf 
     422:	3d 3d 20 4e 55 4c 4c 0a 00                          == NULL..

0000042b <__c.3597>:
     42b:	49 32 43 20 6f 70 5b 49 4e 44 45 58 20 25 64 20     I2C op[INDEX %d 
     43b:	3e 3d 20 25 64 5d 0a 00                             >= %d]..

00000443 <__c.3657>:
     443:	72 74 63 5f 69 6e 69 74 20 20 77 72 69 74 65 20     rtc_init  write 
     453:	65 70 6f 63 68 20 66 61 69 6c 65 64 0a 00           epoch failed..

00000461 <__c.3647>:
     461:	72 74 63 5f 72 75 6e 20 77 72 69 74 65 20 65 72     rtc_run write er
     471:	72 6f 72 0a 00                                      ror..

00000476 <__c.3645>:
     476:	72 74 63 5f 72 75 6e 20 72 65 61 64 20 65 72 72     rtc_run read err
     486:	6f 72 0a 00                                         or..

0000048a <__c.3639>:
     48a:	72 74 63 5f 72 65 61 64 20 65 72 72 6f 72 0a 00     rtc_read error..

0000049a <__c.3633>:
     49a:	72 74 63 5f 77 72 69 74 65 20 65 72 72 6f 72 0a     rtc_write error.
	...

000004ab <__c.3625>:
     4ab:	69 32 63 5f 72 74 63 5f 72 65 61 64 20 64 61 74     i2c_rtc_read dat
     4bb:	61 20 65 72 72 6f 72 0a 00                          a error..

000004c4 <__c.3621>:
     4c4:	69 32 63 5f 72 74 63 5f 72 65 61 64 20 61 64 64     i2c_rtc_read add
     4d4:	72 65 73 73 20 65 72 72 6f 72 0a 00                 ress error..

000004e0 <__c.3608>:
     4e0:	69 32 63 5f 72 74 63 5f 77 72 69 74 65 20 64 61     i2c_rtc_write da
     4f0:	74 61 20 65 72 72 6f 72 0a 00                       ta error..

000004fa <__c.3633>:
     4fa:	25 73 20 65 78 70 65 63 74 65 64 20 25 64 20 61     %s expected %d a
     50a:	72 67 75 6d 65 6e 74 73 20 6f 6e 6c 79 20 67 6f     rguments only go
     51a:	74 20 25 64 0a 00                                   t %d..

00000520 <__c.3590>:
     520:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d     ================
     530:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 0a 00     ==============..

00000540 <__c.3669>:
     540:	54 69 6d 65 72 73 20 65 6e 61 62 6c 65 64 0a 00     Timers enabled..

00000550 <__c.3667>:
     550:	43 6c 6f 63 6b 20 49 6e 73 74 61 6c 6c 65 64 0a     Clock Installed.
	...

00000561 <__c.3665>:
     561:	43 6c 6f 63 6b 20 74 61 73 6b 20 69 6e 69 74 20     Clock task init 
     571:	66 61 69 6c 65 64 0a 00                             failed..

00000579 <__c.3663>:
     579:	43 6c 6f 63 6b 20 49 6e 69 74 0a 00                 Clock Init..

00000585 <__c.3661>:
     585:	54 69 6d 65 72 73 20 63 6f 6e 66 69 67 75 72 65     Timers configure
     595:	64 0a 00                                            d..

00000598 <__c.3659>:
     598:	54 69 6d 65 72 73 20 69 6e 69 74 20 63 61 6c 6c     Timers init call
     5a8:	65 64 0a 00                                         ed..

000005ac <__c.3639>:
     5ac:	5b 54 69 6d 65 3a 25 73 5d 0a 00                    [Time:%s]..

000005b7 <__c.3637>:
     5b7:	5b 25 73 20 54 69 6d 65 3a 25 73 5d 0a 00           [%s Time:%s]..

000005c5 <__c.3623>:
     5c5:	25 6c 64 2e 25 30 39 6c 64 00                       %ld.%09ld.

000005cf <__c.3603>:
     5cf:	73 65 74 5f 74 69 6d 65 72 73 3a 20 4e 6f 20 6d     set_timers: No m
     5df:	6f 72 65 20 74 69 6d 65 72 73 21 0a 00              ore timers!..

000005ec <__c.3878>:
     5ec:	63 6c 6b 20 74 69 6d 65 3a 20 20 20 20 25 73 0a     clk time:    %s.
	...

000005fd <__c.3876>:
     5fd:	63 6c 6b 20 73 65 63 6f 6e 64 73 3a 20 25 6c 75     clk seconds: %lu
     60d:	0a 00                                               ..

0000060f <__c.3874>:
     60f:	52 54 43 20 72 65 61 64 20 66 61 69 6c 65 64 0a     RTC read failed.
	...

00000620 <__c.3872>:
     620:	72 74 63 20 74 69 6d 65 3a 20 20 20 20 25 73 0a     rtc time:    %s.
	...

00000631 <__c.3870>:
     631:	72 74 63 20 73 65 63 6f 6e 64 73 3a 20 25 6c 75     rtc seconds: %lu
     641:	0a 00                                               ..

00000643 <__c.3863>:
     643:	75 73 65 20 73 65 74 64 61 74 65 20 63 6f 6d 6d     use setdate comm
     653:	61 6e 64 20 74 6f 20 63 68 61 6e 67 65 20 74 69     and to change ti
     663:	6d 65 0a 00                                         me..

00000667 <__c.3861>:
     667:	72 74 63 20 72 65 61 64 20 65 72 72 6f 72 61 66     rtc read erroraf
     677:	74 65 72 20 69 6e 69 74 0a 00                       ter init..

00000681 <__c.3859>:
     681:	72 74 63 20 66 6f 72 63 65 20 69 6e 69 74 20 66     rtc force init f
     691:	61 69 6c 65 64 0a 00                                ailed..

00000698 <__c.3857>:
     698:	61 74 74 65 6d 70 74 69 6e 67 20 72 74 63 20 69     attempting rtc i
     6a8:	6e 69 74 0a 00                                      nit..

000006ad <__c.3855>:
     6ad:	72 74 63 20 75 6e 69 6e 69 74 69 6c 69 7a 65 64     rtc uninitilized
     6bd:	0a 00                                               ..

000006bf <__c.3809>:
     6bf:	72 74 63 20 66 6f 72 63 65 20 69 6e 69 74 20 66     rtc force init f
     6cf:	61 69 6c 65 64 0a 00                                ailed..

000006d6 <__c.3807>:
     6d6:	69 6e 76 61 6c 69 64 20 6d 69 6e 3a 20 25 64 0a     invalid min: %d.
	...

000006e7 <__c.3805>:
     6e7:	69 6e 76 61 6c 69 64 20 68 6f 75 72 3a 20 25 64     invalid hour: %d
     6f7:	0a 00                                               ..

000006f9 <__c.3803>:
     6f9:	69 6e 76 61 6c 69 64 20 64 61 79 3a 20 25 64 0a     invalid day: %d.
	...

0000070a <__c.3801>:
     70a:	69 6e 76 61 6c 69 64 20 6d 6f 6e 3a 20 25 64 0a     invalid mon: %d.
	...

0000071b <__c.3799>:
     71b:	69 6e 76 61 6c 69 64 20 79 65 61 72 3a 20 25 64     invalid year: %d
     72b:	0a 00                                               ..

0000072d <__c.3778>:
     72d:	45 6e 74 65 72 20 64 61 74 65 20 59 59 59 59 20     Enter date YYYY 
     73d:	4d 4d 20 44 44 20 48 48 3a 4d 4d 3a 53 53 20 3e     MM DD HH:MM:SS >
	...

0000074e <__c.3653>:
     74e:	25 73 20 25 73 20 25 32 64 20 25 30 32 64 3a 25     %s %s %2d %02d:%
     75e:	30 32 64 3a 25 30 32 64 20 25 34 64 00              02d:%02d %4d.

0000076b <__c.3621>:
     76b:	73 65 6c 65 63 74 20 66 61 69 6c 65 64 21 0a 00     select failed!..

0000077b <__c.3655>:
     77b:	45 4e 44 20 4d 4d 43 20 49 4e 49 54 0a 00           END MMC INIT..

00000789 <__c.3653>:
     789:	4d 4d 43 20 42 6c 6f 63 6b 20 53 69 7a 65 3a 20     MMC Block Size: 
     799:	25 6c 64 0a 00                                      %ld..

0000079e <__c.3651>:
     79e:	4d 4d 43 20 42 6c 6f 63 6b 20 53 69 7a 65 20 2d     MMC Block Size -
     7ae:	20 72 65 61 64 20 66 61 69 6c 65 64 0a 00            read failed..

000007bc <__c.3648>:
     7bc:	2c 20 43 6f 64 65 20 70 61 67 65 3a 20 25 75 0a     , Code page: %u.
	...

000007cd <__c.3646>:
     7cd:	4c 46 4e 20 45 6e 61 62 6c 65 64 00                 LFN Enabled.

000007d9 <__c.3644>:
     7d9:	4d 4d 43 20 43 61 72 64 20 49 6e 73 65 72 74 65     MMC Card Inserte
     7e9:	64 0a 00                                            d..

000007ec <__c.3642>:
     7ec:	2a 2a 2a 20 4d 4d 43 20 43 61 72 64 20 4e 4f 54     *** MMC Card NOT
     7fc:	20 49 6e 73 65 72 74 65 64 21 20 2a 2a 2a 0a 00      Inserted! ***..

0000080c <__c.3640>:
     80c:	53 54 41 52 54 20 4d 4d 43 20 49 4e 49 54 0a 00     START MMC INIT..

0000081c <__c.3626>:
     81c:	4d 4d 43 20 54 49 4d 45 4f 55 54 0a 00              MMC TIMEOUT..

00000829 <__c.3598>:
     829:	4d 4d 43 20 43 6c 6f 63 6b 20 74 61 73 6b 20 69     MMC Clock task i
     839:	6e 69 74 20 66 61 69 6c 65 64 0a 00                 nit failed..

00000845 <__c.3681>:
     845:	0a 00                                               ..

00000847 <__c.3679>:
     847:	25 73 20 25 75 2f 25 30 32 75 2f 25 30 32 75 20     %s %u/%02u/%02u 
     857:	25 30 32 75 3a 25 30 32 75 20 25 39 6c 75 20 25     %02u:%02u %9lu %
     867:	73 00                                               s.

00000869 <__c.3677>:
     869:	66 61 74 66 73 5f 66 69 6c 69 6e 66 6f 5f 6c 69     fatfs_filinfo_li
     879:	73 74 3a 20 65 6d 70 74 79 0a 00                    st: empty..

00000884 <__c.3671>:
     884:	25 75 20 66 69 6c 65 73 2c 20 25 6c 75 20 62 79     %u files, %lu by
     894:	74 65 73 2e 0a 25 75 20 66 6f 6c 64 65 72 73 2e     tes..%u folders.
     8a4:	0a 25 6c 75 20 4b 42 20 74 6f 74 61 6c 20 64 69     .%lu KB total di
     8b4:	73 6b 20 73 70 61 63 65 2e 0a 25 6c 75 20 4b 42     sk space..%lu KB
     8c4:	20 61 76 61 69 6c 61 62 6c 65 2e 0a 00               available...

000008d1 <__c.3669>:
     8d1:	66 61 74 66 73 5f 73 74 61 74 75 73 20 66 61 74     fatfs_status fat
     8e1:	66 73 5f 73 63 61 6e 5f 66 69 6c 65 73 20 66 61     fs_scan_files fa
     8f1:	69 6c 65 64 0a 00                                   iled..

000008f7 <__c.3667>:
     8f7:	56 6f 6c 75 6d 65 20 53 2f 4e 20 20 20 20 20 20     Volume S/N      
     907:	20 20 20 20 20 20 20 20 3d 20 25 30 34 58 2d 25             = %04X-%
     917:	30 34 58 0a 00                                      04X..

0000091c <__c.3665>:
     91c:	56 6f 6c 75 6d 65 20 6e 61 6d 65 20 20 20 20 20     Volume name     
     92c:	20 20 20 20 20 20 20 20 3d 20 25 73 0a 00                   = %s..

0000093a <__c.3663>:
     93a:	66 61 74 66 73 5f 73 74 61 74 75 73 20 66 5f 67     fatfs_status f_g
     94a:	65 74 6c 61 62 65 6c 20 66 61 69 6c 65 64 0a 00     etlabel failed..

0000095a <__c.3661>:
     95a:	44 61 74 61 20 73 74 61 72 74 20 28 6c 62 61 29     Data start (lba)
     96a:	20 20 20 20 20 20 20 20 3d 20 25 6c 75 0a 00                = %lu..

00000979 <__c.3659>:
     979:	44 49 52 20 73 74 61 72 74 20 28 6c 62 61 2c 63     DIR start (lba,c
     989:	6c 75 73 74 6f 72 29 20 3d 20 25 6c 75 0a 00        lustor) = %lu..

00000998 <__c.3657>:
     998:	46 41 54 20 73 74 61 72 74 20 28 6c 62 61 29 20     FAT start (lba) 
     9a8:	20 20 20 20 20 20 20 20 3d 20 25 6c 75 0a 00                = %lu..

000009b7 <__c.3655>:
     9b7:	4e 75 6d 62 65 72 20 6f 66 20 63 6c 75 73 74 65     Number of cluste
     9c7:	72 73 20 20 20 20 20 20 3d 20 25 6c 75 0a 00        rs      = %lu..

000009d6 <__c.3653>:
     9d6:	53 65 63 74 6f 72 73 2f 46 41 54 20 20 20 20 20     Sectors/FAT     
     9e6:	20 20 20 20 20 20 20 20 3d 20 25 6c 75 0a 00                = %lu..

000009f5 <__c.3651>:
     9f5:	52 6f 6f 74 20 44 49 52 20 65 6e 74 72 69 65 73     Root DIR entries
     a05:	20 20 20 20 20 20 20 20 3d 20 25 75 0a 00                   = %u..

00000a13 <__c.3649>:
     a13:	4e 75 6d 62 65 72 20 6f 66 20 46 41 54 73 20 20     Number of FATs  
     a23:	20 20 20 20 20 20 20 20 3d 20 25 75 0a 00                   = %u..

00000a31 <__c.3647>:
     a31:	42 79 74 65 73 2f 43 6c 75 73 74 65 72 20 20 20     Bytes/Cluster   
     a41:	20 20 20 20 20 20 20 20 3d 20 25 6c 75 0a 00                = %lu..

00000a50 <__c.3645>:
     a50:	46 41 54 20 74 79 70 65 20 20 20 20 20 20 20 20     FAT type        
     a60:	20 20 20 20 20 20 20 20 3d 20 25 73 0a 00                   = %s..

00000a6e <__c.3643>:
     a6e:	66 61 74 66 73 5f 73 74 61 74 75 73 20 66 5f 67     fatfs_status f_g
     a7e:	65 74 66 72 65 65 20 66 61 69 6c 65 64 0a 00        etfree failed..

00000a8d <__c.3641>:
     a8d:	66 61 74 66 73 20 73 74 61 74 75 73 3a 25 73 0a     fatfs status:%s.
	...

00000a9e <__c.3639>:
     a9e:	4d 4d 43 20 46 41 53 54 20 63 6c 6f 63 6b 3d 25     MMC FAST clock=%
     aae:	38 6c 64 0a 00                                      8ld..

00000ab3 <__c.3637>:
     ab3:	4d 4d 43 20 53 4c 4f 57 20 63 6c 6f 63 6b 3d 25     MMC SLOW clock=%
     ac3:	38 6c 64 0a 00                                      8ld..

00000ac8 <__c.3600>:
     ac8:	72 63 3d 25 75 0a 00                                rc=%u..

00000acf <__c.3623>:
     acf:	2c 20 25 31 30 6c 75 4b 20 62 79 74 65 73 20 66     , %10luK bytes f
     adf:	72 65 65 0a 00                                      ree..

00000ae4 <__c.3621>:
     ae4:	25 34 75 20 46 69 6c 65 28 73 29 2c 25 31 30 6c     %4u File(s),%10l
     af4:	75 20 62 79 74 65 73 20 74 6f 74 61 6c 0a 25 34     u bytes total.%4
     b04:	75 20 44 69 72 28 73 29 00                          u Dir(s).

00000b0d <__c.3617>:
     b0d:	4c 69 73 74 69 6e 67 3a 5b 25 73 5d 0a 00           Listing:[%s]..

00000b1b <__c.3593>:
     b1b:	66 61 74 66 73 20 20 20 20 20 68 65 6c 70 0a 00     fatfs     help..

00000b2b <__c.3591>:
     b2b:	4e 6f 74 65 3a 20 66 61 74 66 73 20 74 65 73 74     Note: fatfs test
     b3b:	73 20 4d 55 53 54 20 73 74 61 72 74 20 77 69 74     s MUST start wit
     b4b:	68 20 22 66 61 74 66 73 22 20 6b 65 79 77 6f 72     h "fatfs" keywor
     b5b:	64 0a 66 61 74 66 73 20 68 65 6c 70 0a 66 61 74     d.fatfs help.fat
     b6b:	66 73 20 6c 73 20 64 69 72 65 63 74 6f 72 79 0a     fs ls directory.
     b7b:	66 61 74 66 73 20 73 74 61 74 75 73 0a 0a 00        fatfs status...

00000b8a <__c.3923>:
     b8a:	25 73 0a 00                                         %s..

00000b8e <__c.3921>:
     b8e:	25 73 3a 20 25 73 0a 00                             %s: %s..

00000b96 <__c.3676>:
     b96:	53 65 65 6b 20 66 61 69 6c 65 64 00                 Seek failed.

00000ba2 <__c.3605>:
     ba2:	66 70 75 74 63 20 73 74 72 65 61 6d 2d 3e 70 75     fputc stream->pu
     bb2:	74 20 4e 55 4c 4c 0a 00                             t NULL..

00000bba <__c.3598>:
     bba:	66 67 65 74 63 20 73 74 72 65 61 6d 2d 3e 67 65     fgetc stream->ge
     bca:	74 20 4e 55 4c 4c 0a 00                             t NULL..

00000bd2 <__c.3768>:
     bd2:	46 69 6c 65 73 3a 20 25 64 0a 00                    Files: %d..

00000bdd <__c.3764>:
     bdd:	6e 61 6d 65 3a 5b 25 73 5d 20 74 6f 6f 20 6c 6f     name:[%s] too lo
     bed:	6e 67 20 77 69 74 68 20 66 75 6c 6c 20 70 61 74     ng with full pat
     bfd:	68 0a 00                                            h..

00000c00 <__c.3761>:
     c00:	6f 70 65 6e 64 69 72 20 66 61 69 6c 65 64 0a 00     opendir failed..

00000c10 <__c.3756>:
     c10:	4c 69 73 74 69 6e 67 3a 5b 25 73 5d 0a 00           Listing:[%s]..

00000c1e <__c.3754>:
     c1e:	6c 73 3a 20 63 61 6e 6e 6f 74 20 73 74 61 74 20     ls: cannot stat 
     c2e:	5b 25 73 5d 0a 00                                   [%s]..

00000c34 <__c.3752>:
     c34:	6c 73 3a 20 43 61 6e 27 74 20 67 65 74 20 63 75     ls: Can't get cu
     c44:	72 72 65 6e 74 20 64 69 72 65 63 74 6f 72 79 0a     rrent directory.
	...

00000c55 <__c.3739>:
     c55:	25 73 20 6e 6f 6e 65 20 6e 6f 6e 65 20 25 31 32     %s none none %12
     c65:	6c 64 20 25 73 20 25 73 0a 00                       ld %s %s..

00000c6f <__c.3734>:
     c6f:	25 73 0a 00                                         %s..

00000c73 <__c.3732>:
     c73:	63 61 6e 20 6e 6f 74 20 73 74 61 74 3a 20 25 73     can not stat: %s
     c83:	0a 00                                               ..

00000c85 <__c.3720>:
     c85:	0d 00                                               ..

00000c87 <__c.3718>:
     c87:	4d 6f 72 65 2e 2e 00                                More...

00000c8e <__c.3708>:
     c8e:	25 6c 75 20 62 79 74 65 73 20 63 6f 70 69 65 64     %lu bytes copied
     c9e:	2e 0a 00                                            ...

00000ca1 <__c.3704>:
     ca1:	43 6f 70 69 65 64 3a 20 25 30 38 6c 64 0d 00        Copied: %08ld..

00000cb0 <__c.3701>:
     cb0:	57 72 69 74 65 20 65 72 72 6f 72 0a 00              Write error..

00000cbd <__c.3699>:
     cbd:	0a 43 6f 70 79 69 6e 67 2e 2e 2e 0a 00              .Copying.....

00000cca <__c.3697>:
     cca:	43 61 6e 27 74 20 6f 70 65 6e 3a 20 25 73 0a 00     Can't open: %s..

00000cda <__c.3695>:
     cda:	43 72 65 61 74 69 6e 67 20 25 73 0a 00              Creating %s..

00000ce7 <__c.3693>:
     ce7:	43 61 6e 27 74 20 6f 70 65 6e 3a 20 25 73 0a 00     Can't open: %s..

00000cf7 <__c.3691>:
     cf7:	4f 70 65 6e 69 6e 67 20 25 73 0a 00                 Opening %s..

00000d03 <__c.3680>:
     d03:	25 6c 64 20 62 79 74 65 73 0a 00                    %ld bytes..

00000d0e <__c.3678>:
     d0e:	0a 00                                               ..

00000d10 <__c.3673>:
     d10:	43 61 6e 27 74 20 6f 70 65 6e 3a 20 25 73 0a 00     Can't open: %s..

00000d20 <__c.3663>:
     d20:	72 6d 64 69 72 20 25 73 20 66 61 69 6c 65 64 0a     rmdir %s failed.
	...

00000d31 <__c.3661>:
     d31:	72 6d 20 25 73 20 66 61 69 6c 65 64 0a 00           rm %s failed..

00000d3f <__c.3659>:
     d3f:	72 65 6e 61 6d 65 20 25 73 20 74 6f 20 25 73 0a     rename %s to %s.
	...

00000d50 <__c.3657>:
     d50:	25 73 0a 00                                         %s..

00000d54 <__c.3655>:
     d54:	70 77 64 20 46 41 49 4c 45 44 0a 00                 pwd FAILED..

00000d60 <__c.3651>:
     d60:	6d 6b 64 69 72 20 25 73 20 66 61 69 6c 65 64 0a     mkdir %s failed.
	...

00000d71 <__c.3644>:
     d71:	6c 73 3a 20 6e 75 6c 6c 20 61 72 67 75 6d 65 6e     ls: null argumen
     d81:	74 20 23 20 25 64 0a 00                             t # %d..

00000d89 <__c.3640>:
     d89:	63 68 64 69 72 20 25 73 20 66 61 69 6c 65 64 0a     chdir %s failed.
	...

00000d9a <__c.3624>:
     d9a:	4e 6f 74 65 3a 20 70 6f 73 69 78 20 70 72 65 66     Note: posix pref
     daa:	69 78 20 69 73 20 6f 70 74 69 6f 6e 61 6c 0a 70     ix is optional.p
     dba:	6f 73 69 78 20 63 61 74 20 66 69 6c 65 20 5b 2d     osix cat file [-
     dca:	70 5d 0a 70 6f 73 69 78 20 63 64 20 64 69 72 0a     p].posix cd dir.
     dda:	70 6f 73 69 78 20 63 6f 70 79 20 66 69 6c 65 31     posix copy file1
     dea:	20 66 69 6c 65 32 0a 70 6f 73 69 78 20 6c 73 20      file2.posix ls 
     dfa:	64 69 72 20 5b 2d 6c 5d 0a 70 6f 73 69 78 20 6d     dir [-l].posix m
     e0a:	6b 64 69 72 20 64 69 72 0a 70 6f 73 69 78 20 70     kdir dir.posix p
     e1a:	61 67 65 20 4e 4e 20 2d 20 75 73 65 64 20 66 6f     age NN - used fo
     e2a:	72 20 63 61 74 20 2d 70 0a 70 6f 73 69 78 20 70     r cat -p.posix p
     e3a:	77 64 0a 70 6f 73 69 78 20 72 6d 20 66 69 6c 65     wd.posix rm file
     e4a:	0a 70 6f 73 69 78 20 72 6d 64 69 72 20 64 69 72     .posix rmdir dir
     e5a:	0a 70 6f 73 69 78 20 72 65 6e 61 6d 65 20 6f 6c     .posix rename ol
     e6a:	64 20 6e 65 77 0a 0a 00                             d new...

00000e72 <__c.3622>:
     e72:	70 6f 73 69 78 20 20 20 20 20 68 65 6c 70 0a 00     posix     help..

00000e82 <__c.3811>:
     e82:	43 6c 6f 73 65 20 65 72 72 6f 72 3a 20 00           Close error: .

00000e90 <__c.3805>:
     e90:	53 65 65 6b 20 65 72 72 6f 72 3a 20 00              Seek error: .

00000e9d <__c.3798>:
     e9d:	57 72 69 74 65 20 65 72 72 6f 72 3a 20 00           Write error: .

00000eab <__c.3789>:
     eab:	52 65 61 64 20 65 72 72 6f 72 3a 20 00              Read error: .

00000eb8 <__c.3780>:
     eb8:	4f 70 65 6e 20 65 72 72 6f 72 3a 5b 25 73 5d 20     Open error:[%s] 
	...

00000ec9 <__c.3766>:
     ec9:	5b 50 50 52 20 44 49 53 41 42 4c 45 20 41 4c 4c     [PPR DISABLE ALL
     ed9:	5d 0a 00                                            ]..

00000edc <__c.3748>:
     edc:	47 50 49 42 20 43 6c 6f 63 6b 20 74 61 73 6b 20     GPIB Clock task 
     eec:	69 6e 69 74 20 66 61 69 6c 65 64 0a 00              init failed..

00000ef9 <__c.4427>:
     ef9:	5b 67 70 69 62 5f 77 72 69 74 65 5f 73 74 72 20     [gpib_write_str 
     f09:	73 65 6e 74 28 25 64 29 20 65 78 70 65 63 74 65     sent(%d) expecte
     f19:	64 28 25 64 29 5d 0a 00                             d(%d)]..

00000f21 <__c.4419>:
     f21:	3c 42 55 53 20 77 61 69 74 69 6e 67 20 66 6f 72     <BUS waiting for
     f31:	20 44 41 56 3d 3d 31 3e 0a 00                        DAV==1>..

00000f3b <__c.4414>:
     f3b:	3c 67 70 69 62 5f 77 72 69 74 65 5f 73 74 72 20     <gpib_write_str 
     f4b:	74 69 6d 65 6f 75 74 20 77 61 69 74 69 6e 67 20     timeout waiting 
     f5b:	66 6f 72 20 41 54 4e 20 3d 20 31 3e 0a 00           for ATN = 1>..

00000f69 <__c.4412>:
     f69:	67 70 69 62 5f 77 72 69 74 65 5f 73 74 72 3a 20     gpib_write_str: 
     f79:	73 69 7a 65 20 3d 20 30 0a 00                       size = 0..

00000f83 <__c.4402>:
     f83:	5b 67 70 69 62 5f 72 65 61 64 5f 73 74 72 20 72     [gpib_read_str r
     f93:	65 61 64 28 25 64 29 20 65 78 70 65 63 74 65 64     ead(%d) expected
     fa3:	28 25 64 29 5d 0a 00                                (%d)]..

00000faa <__c.4398>:
     faa:	67 70 69 62 5f 72 65 61 64 5f 73 74 72 28 69 6e     gpib_read_str(in
     fba:	64 3a 25 64 29 3a 20 41 54 4e 20 25 30 32 58 48     d:%d): ATN %02XH
     fca:	20 75 6e 65 78 70 65 63 74 65 64 0a 00               unexpected..

00000fd7 <__c.4395>:
     fd7:	67 70 69 62 5f 72 65 61 64 5f 73 74 72 3a 20 73     gpib_read_str: s
     fe7:	69 7a 65 20 3d 20 30 0a 00                          ize = 0..

00000ff0 <__c.4379>:
     ff0:	20 4d 53 41 20 25 30 32 58 68 00                     MSA %02Xh.

00000ffb <__c.4377>:
     ffb:	20 4d 54 41 20 25 30 32 58 68 00                     MTA %02Xh.

00001006 <__c.4375>:
    1006:	20 4d 4c 41 20 25 30 32 58 68 00                     MLA %02Xh.

00001011 <__c.4371>:
    1011:	20 20 20 20 20 00                                        .

00001017 <__c.4369>:
    1017:	25 30 32 58 20 25 63 20 00                          %02X %c .

00001020 <__c.4343>:
    1020:	67 70 69 62 5f 72 65 61 64 5f 62 79 74 65 3a 20     gpib_read_byte: 
    1030:	49 46 43 20 73 74 61 74 65 3d 25 64 0a 00           IFC state=%d..

0000103e <__c.4327>:
    103e:	3c 47 50 49 42 20 54 58 20 54 49 4d 45 4f 55 54     <GPIB TX TIMEOUT
    104e:	3e 0a 00                                            >..

00001051 <__c.4322>:
    1051:	3c 67 70 69 62 5f 77 72 69 74 65 5f 62 79 74 65     <gpib_write_byte
    1061:	20 74 69 6d 65 6f 75 74 20 77 61 69 74 69 6e 67      timeout waiting
    1071:	20 66 6f 72 20 4e 44 41 43 3d 3d 31 3e 0a 00         for NDAC==1>..

00001080 <__c.4318>:
    1080:	3c 67 70 69 62 5f 77 72 69 74 65 5f 62 79 74 65     <gpib_write_byte
    1090:	20 74 69 6d 65 6f 75 74 20 77 61 69 74 69 6e 67      timeout waiting
    10a0:	20 66 6f 72 20 4e 52 46 44 3d 3d 31 20 26 26 20      for NRFD==1 && 
    10b0:	4e 44 41 43 20 3d 3d 20 30 3e 0a 00                 NDAC == 0>..

000010bc <__c.4314>:
    10bc:	3c 67 70 69 62 5f 77 72 69 74 65 5f 62 79 74 65     <gpib_write_byte
    10cc:	20 74 69 6d 65 6f 75 74 20 77 61 69 74 69 6e 67      timeout waiting
    10dc:	20 66 6f 72 20 4e 52 46 44 3d 3d 31 20 26 26 20      for NRFD==1 && 
    10ec:	4e 44 41 43 20 3d 3d 20 30 3e 0a 00                 NDAC == 0>..

000010f8 <__c.4312>:
    10f8:	67 70 69 62 5f 77 72 69 74 65 5f 62 79 74 65 3a     gpib_write_byte:
    1108:	20 41 54 4e 20 3d 20 30 20 77 68 69 6c 65 20 77      ATN = 0 while w
    1118:	61 69 74 69 6e 67 20 66 6f 72 20 4e 52 46 44 20     aiting for NRFD 
    1128:	4c 4f 57 20 73 74 61 74 65 20 3d 25 64 0a 00        LOW state =%d..

00001137 <__c.4307>:
    1137:	67 70 69 62 5f 77 72 69 74 65 5f 62 79 74 65 3a     gpib_write_byte:
    1147:	20 49 46 43 20 73 74 61 74 65 3d 25 64 0a 00         IFC state=%d..

00001156 <__c.4291>:
    1156:	67 70 69 62 5f 75 6e 72 65 61 64 3a 20 65 72 72     gpib_unread: err
    1166:	6f 72 2c 20 63 61 6e 20 6f 6e 6c 79 20 62 65 20     or, can only be 
    1176:	63 61 6c 6c 65 64 20 6f 6e 63 65 21 0a 00           called once!..

00001184 <__c.4275>:
    1184:	5b 44 50 50 52 20 62 69 74 3a 25 64 2c 20 6d 61     [DPPR bit:%d, ma
    1194:	73 6b 3a 25 30 32 58 48 5d 0a 00                    sk:%02XH]..

0000119f <__c.4273>:
    119f:	67 70 69 62 5f 64 69 73 61 62 6c 65 5f 50 50 52     gpib_disable_PPR
    11af:	3a 20 62 69 74 20 25 64 20 6f 75 74 20 6f 66 20     : bit %d out of 
    11bf:	72 61 6e 67 65 0a 00                                range..

000011c6 <__c.4268>:
    11c6:	5b 45 50 50 52 20 62 69 74 3a 25 64 2c 20 6d 61     [EPPR bit:%d, ma
    11d6:	73 6b 3a 25 30 32 58 48 5d 0a 00                    sk:%02XH]..

000011e1 <__c.4266>:
    11e1:	67 70 69 62 5f 65 6e 61 62 6c 65 5f 50 50 52 3a     gpib_enable_PPR:
    11f1:	20 62 69 74 20 25 64 20 6f 75 74 20 6f 66 20 72      bit %d out of r
    1201:	61 6e 67 65 0a 00                                   ange..

00001207 <__c.4261>:
    1207:	5b 47 50 49 42 20 53 54 41 54 45 20 49 4e 49 54     [GPIB STATE INIT
    1217:	5d 0a 00                                            ]..

0000121a <__c.4249>:
    121a:	5b 47 50 49 42 20 42 55 53 5f 49 4e 49 54 5d 0a     [GPIB BUS_INIT].
	...

0000122b <__c.4426>:
    122b:	5b 50 52 49 4e 54 45 52 20 63 6c 6f 73 65 5d 0a     [PRINTER close].
	...

0000123c <__c.4421>:
    123c:	5b 53 41 20 25 30 32 58 48 2c 20 6c 69 73 74 65     [SA %02XH, liste
    124c:	6e 3a 25 30 32 58 48 2c 20 74 61 6c 6b 3a 25 30     n:%02XH, talk:%0
    125c:	32 58 48 5d 0a 00                                   2XH]..

00001262 <__c.4419>:
    1262:	5b 53 41 20 25 30 32 58 48 20 41 4d 49 47 4f 5d     [SA %02XH AMIGO]
    1272:	0a 00                                               ..

00001274 <__c.4417>:
    1274:	5b 53 41 20 25 30 32 58 48 20 53 53 38 30 5d 0a     [SA %02XH SS80].
	...

00001285 <__c.4412>:
    1285:	5b 54 41 20 25 30 32 58 48 5d 0a 00                 [TA %02XH]..

00001291 <__c.4410>:
    1291:	5b 50 52 49 4e 54 45 52 20 4f 50 45 4e 5d 0a 00     [PRINTER OPEN]..

000012a1 <__c.4408>:
    12a1:	5b 54 41 20 25 30 32 58 48 20 50 52 49 4e 54 45     [TA %02XH PRINTE
    12b1:	52 5d 0a 00                                         R]..

000012b5 <__c.4406>:
    12b5:	5b 54 41 20 25 30 32 58 48 20 41 4d 49 47 4f 5d     [TA %02XH AMIGO]
    12c5:	0a 00                                               ..

000012c7 <__c.4404>:
    12c7:	5b 54 41 20 25 30 32 58 48 20 53 53 38 30 5d 0a     [TA %02XH SS80].
	...

000012d8 <__c.4402>:
    12d8:	5b 55 4e 54 5d 0a 00                                [UNT]..

000012df <__c.4397>:
    12df:	5b 4c 41 20 25 30 32 58 48 5d 0a 00                 [LA %02XH]..

000012eb <__c.4395>:
    12eb:	5b 4c 41 20 25 30 32 58 48 20 50 52 49 4e 54 45     [LA %02XH PRINTE
    12fb:	52 5d 0a 00                                         R]..

000012ff <__c.4393>:
    12ff:	5b 4c 41 20 25 30 32 58 48 20 53 53 38 30 5d 0a     [LA %02XH SS80].
	...

00001310 <__c.4391>:
    1310:	5b 4c 41 20 25 30 32 58 48 20 41 4d 49 47 4f 5d     [LA %02XH AMIGO]
    1320:	0a 00                                               ..

00001322 <__c.4389>:
    1322:	0a 00                                               ..

00001324 <__c.4387>:
    1324:	5b 55 4e 4c 5d 0a 00                                [UNL]..

0000132b <__c.4382>:
    132b:	5b 47 50 49 42 20 28 25 30 32 58 48 29 20 6e 6f     [GPIB (%02XH) no
    133b:	74 20 64 65 66 69 6e 65 64 20 54 4f 44 4f 5d 0a     t defined TODO].
	...

0000134c <__c.4380>:
    134c:	5b 44 43 4c 5d 0a 00                                [DCL]..

00001353 <__c.4378>:
    1353:	5b 53 44 43 20 41 4d 49 47 4f 5d 0a 00              [SDC AMIGO]..

00001360 <__c.4376>:
    1360:	5b 53 44 43 20 53 53 38 30 5d 0a 00                 [SDC SS80]..

0000136c <__c.4374>:
    136c:	5b 53 44 43 5d 0a 00                                [SDC]..

00001373 <__c.4372>:
    1373:	5b 53 50 44 5d 0a 00                                [SPD]..

0000137a <__c.4370>:
    137a:	5b 53 50 45 5d 0a 00                                [SPE]..

00001381 <__c.4368>:
    1381:	5b 50 50 55 20 75 6e 73 75 70 70 6f 72 74 65 64     [PPU unsupported
    1391:	20 54 4f 44 4f 5d 0a 00                              TODO]..

00001399 <__c.4366>:
    1399:	5b 50 50 43 20 75 6e 73 75 70 70 6f 72 74 65 64     [PPC unsupported
    13a9:	20 54 4f 44 4f 5d 0a 00                              TODO]..

000013b1 <__c.4361>:
    13b1:	5b 49 44 45 4e 54 20 55 6e 69 74 3a 25 30 32 58     [IDENT Unit:%02X
    13c1:	48 3d 25 30 34 58 48 5d 0a 00                       H=%04XH]..

000013cb <__c.4359>:
    13cb:	5b 49 44 45 4e 54 20 55 6e 69 74 3a 25 30 32 58     [IDENT Unit:%02X
    13db:	48 3d 25 30 34 58 48 20 46 41 49 4c 45 44 5d 0a     H=%04XH FAILED].
	...

000013ec <__c.4332>:
    13ec:	3c 4d 45 44 49 41 20 4d 49 53 53 49 4e 47 3e 0a     <MEDIA MISSING>.
	...

000013fd <__c.4330>:
    13fd:	3c 49 4e 54 45 52 52 55 50 54 3e 0a 00              <INTERRUPT>..

0000140a <__c.4328>:
    140a:	3c 42 55 53 3e 0a 00                                <BUS>..

00001411 <__c.4326>:
    1411:	3c 54 49 4d 45 4f 55 54 3e 0a 00                    <TIMEOUT>..

0000141c <__c.4324>:
    141c:	3c 49 46 43 3e 0a 00                                <IFC>..

00001423 <__c.4319>:
    1423:	43 61 70 74 75 72 69 6e 67 20 43 6c 6f 73 65 64     Capturing Closed
    1433:	0a 00                                               ..

00001435 <__c.4317>:
    1435:	44 6f 6e 65 0a 00                                   Done..

0000143b <__c.4313>:
    143b:	65 78 69 74 69 6e 67 2e 2e 2e 0a 00                 exiting.....

00001447 <__c.4311>:
    1447:	50 72 65 73 73 20 41 4e 59 20 6b 65 79 20 74 6f     Press ANY key to
    1457:	20 65 78 69 74 0a 00                                 exit..

0000145e <__c.4309>:
    145e:	46 55 4c 4c 20 47 50 49 42 20 42 55 53 20 68 61     FULL GPIB BUS ha
    146e:	6e 64 73 68 61 6b 65 20 6c 6f 67 67 69 6e 67 20     ndshake logging 
    147e:	72 65 71 75 65 73 74 65 64 0a 00                    requested..

00001489 <__c.4307>:
    1489:	43 61 70 74 75 72 69 6e 67 20 47 50 49 42 20 42     Capturing GPIB B
    1499:	55 53 20 74 6f 3a 25 73 0a 00                       US to:%s..

000014a3 <__c.4261>:
    14a3:	43 61 72 64 20 69 73 20 77 72 69 74 65 20 70 72     Card is write pr
    14b3:	6f 74 65 63 74 65 64 0a 00                          otected..

000014bc <__c.4259>:
    14bc:	25 73 20 6f 70 65 6e 20 66 61 69 6c 75 72 65 0a     %s open failure.
	...

000014cd <__c.4257>:
    14cd:	25 73 20 68 61 64 20 25 64 20 65 72 72 6f 72 73     %s had %d errors
    14dd:	0a 00                                               ..

000014df <__c.4455>:
    14df:	64 65 62 75 67 3d 25 30 34 58 48 0a 00              debug=%04XH..

000014ec <__c.4447>:
    14ec:	4e 6f 74 65 3a 20 67 70 69 62 20 70 72 65 66 69     Note: gpib prefi
    14fc:	78 20 69 73 20 6f 70 74 69 6f 6e 61 6c 0a 67 70     x is optional.gp
    150c:	69 62 20 64 65 62 75 67 20 4e 0a 20 20 20 64 65     ib debug N.   de
    151c:	62 75 67 20 6d 65 73 73 61 67 65 20 72 65 70 6f     bug message repo
    152c:	72 74 69 6e 67 20 73 65 65 20 68 70 64 69 73 6b     rting see hpdisk
    153c:	2e 63 66 67 20 66 6f 72 20 64 65 74 61 69 6c 73     .cfg for details
    154c:	0a 67 70 69 62 20 65 6c 61 70 73 65 64 0a 67 70     .gpib elapsed.gp
    155c:	69 62 20 65 6c 61 70 73 65 64 5f 72 65 73 65 74     ib elapsed_reset
    156c:	0a 67 70 69 62 20 69 66 63 0a 67 70 69 62 20 74     .gpib ifc.gpib t
    157c:	61 73 6b 0a 67 70 69 62 20 74 72 61 63 65 20 66     ask.gpib trace f
    158c:	69 6c 65 6e 61 6d 65 2e 74 78 74 20 5b 42 55 53     ilename.txt [BUS
    159c:	5d 0a 20 20 20 44 69 73 70 6c 61 79 20 61 63 74     ].   Display act
    15ac:	69 76 69 74 79 20 6f 66 20 47 50 49 42 20 62 75     ivity of GPIB bu
    15bc:	73 20 61 6e 64 20 6c 6f 67 20 69 74 0a 20 20 20     s and log it.   
    15cc:	42 55 53 20 2d 20 69 6e 63 6c 75 64 65 20 68 61     BUS - include ha
    15dc:	6e 64 73 68 61 6b 65 20 73 74 61 74 65 73 0a 0a     ndshake states..
	...

000015ed <__c.4445>:
    15ed:	67 70 69 62 20 20 20 20 20 20 68 65 6c 70 0a 00     gpib      help..

000015fd <__c.4976>:
    15fd:	0a 00                                               ..

000015ff <__c.4971>:
    15ff:	4d 6f 75 6e 74 65 64 20 64 72 69 76 65 73 0a 00     Mounted drives..

0000160f <__c.4966>:
    160f:	50 52 49 4e 54 45 52 20 25 2d 38 73 20 25 32 64     PRINTER %-8s %2d
    161f:	0a 00                                               ..

00001621 <__c.4964>:
    1621:	41 4d 49 47 4f 20 20 20 25 2d 38 73 20 25 32 64     AMIGO   %-8s %2d
    1631:	20 25 73 0a 00                                       %s..

00001636 <__c.4962>:
    1636:	53 53 38 30 20 20 20 20 25 2d 38 73 20 25 32 64     SS80    %-8s %2d
    1646:	20 25 73 0a 00                                       %s..

0000164b <__c.4954>:
    164b:	45 78 70 65 63 74 65 64 20 41 4d 49 47 4f 20 6f     Expected AMIGO o
    165b:	72 20 53 53 38 30 20 6f 72 20 43 53 38 30 20 66     r SS80 or CS80 f
    166b:	6f 72 20 5b 25 73 5d 0a 00                          or [%s]..

00001674 <__c.4952>:
    1674:	43 6f 75 6c 64 20 6e 6f 74 20 61 6c 6c 6f 63 61     Could not alloca
    1684:	74 65 20 41 4d 49 47 4f 20 73 74 72 75 63 74 75     te AMIGO structu
    1694:	72 65 20 66 6f 72 20 25 73 0a 00                    re for %s..

0000169f <__c.4948>:
    169f:	43 6f 75 6c 64 20 6e 6f 74 20 61 6c 6c 6f 63 61     Could not alloca
    16af:	74 65 20 53 53 38 30 20 73 74 72 75 63 74 75 72     te SS80 structur
    16bf:	65 20 66 6f 72 20 25 73 0a 00                       e for %s..

000016c9 <__c.4944>:
    16c9:	57 41 52 4e 49 4e 47 3a 20 6d 6f 64 65 6c 20 4e     WARNING: model N
    16d9:	4f 54 20 66 6f 75 6e 64 20 69 6e 20 68 70 64 69     OT found in hpdi
    16e9:	72 2e 69 6e 69 21 0a 00                             r.ini!..

000016f1 <__c.4942>:
    16f1:	43 6f 75 6c 64 20 6e 6f 74 20 61 6c 6c 6f 63 61     Could not alloca
    1701:	74 65 20 50 52 49 4e 54 45 52 20 73 74 72 75 63     te PRINTER struc
    1711:	74 75 72 65 0a 00                                   ture..

00001717 <__c.4931>:
    1717:	75 6d 6f 75 6e 74 20 61 64 64 72 65 73 73 3a 5b     umount address:[
    1727:	25 64 5d 20 4e 4f 54 20 66 6f 75 6e 64 0a 00        %d] NOT found..

00001736 <__c.4929>:
    1736:	20 20 2d 20 61 64 64 72 65 73 73 20 69 73 20 74       - address is t
    1746:	68 65 20 64 65 76 69 63 65 20 61 64 64 72 65 73     he device addres
    1756:	73 0a 00                                            s..

00001759 <__c.4927>:
    1759:	20 20 75 6d 6f 75 6e 74 20 61 64 64 72 65 73 73       umount address
    1769:	0a 00                                               ..

0000176b <__c.4925>:
    176b:	55 73 61 67 65 3a 0a 00                             Usage:..

00001773 <__c.4879>:
    1773:	55 73 61 67 65 3a 20 0a 00                          Usage: ..

0000177c <__c.4875>:
    177c:	6d 6f 75 6e 74 0a 20 20 20 20 20 64 69 73 70 6c     mount.     displ
    178c:	61 79 73 20 61 20 6c 69 73 74 20 6f 66 20 6d 6f     ays a list of mo
    179c:	75 6e 74 65 64 20 64 72 69 76 65 73 20 6f 6e 65     unted drives one
    17ac:	20 70 65 72 20 6c 69 6e 65 0a 6d 6f 75 6e 74 20      per line.mount 
    17bc:	41 4d 49 47 4f 7c 53 53 38 30 20 6d 6f 64 65 6c     AMIGO|SS80 model
    17cc:	20 61 64 64 72 65 73 73 20 66 69 6c 65 0a 20 20      address file.  
    17dc:	20 20 20 45 78 61 6d 70 6c 65 3a 20 6d 6f 75 6e        Example: moun
    17ec:	74 20 39 31 32 31 20 20 36 20 2f 61 6d 69 67 6f     t 9121  6 /amigo
    17fc:	36 2e 6c 69 66 0a 20 20 20 20 20 45 78 61 6d 70     6.lif.     Examp
    180c:	6c 65 3a 20 6d 6f 75 6e 74 20 39 31 33 34 44 20     le: mount 9134D 
    181c:	32 20 2f 61 6d 69 67 6f 32 2e 6c 69 66 0a 20 20     2 /amigo2.lif.  
    182c:	20 20 20 4e 6f 74 65 3a 20 64 72 69 76 65 20 6d        Note: drive m
    183c:	6f 64 65 6c 20 6d 75 73 74 20 65 78 69 73 74 20     odel must exist 
    184c:	69 6e 20 68 70 64 69 72 2e 69 6e 69 20 5b 64 72     in hpdir.ini [dr
    185c:	69 76 65 69 6e 66 6f 5d 20 73 65 63 74 69 6f 6e     iveinfo] section
    186c:	0a 6d 6f 75 6e 74 20 50 52 49 4e 54 45 52 20 61     .mount PRINTER a
    187c:	64 64 72 65 73 73 0a 20 20 20 20 20 45 78 61 6d     ddress.     Exam
    188c:	70 6c 65 3a 20 6d 6f 75 6e 74 20 50 52 49 4e 54     ple: mount PRINT
    189c:	45 52 20 35 0a 75 6d 6f 75 6e 74 20 61 64 64 72     ER 5.umount addr
    18ac:	65 73 73 0a 20 20 20 20 20 45 78 61 6d 70 6c 65     ess.     Example
    18bc:	3a 20 75 6d 6f 75 6e 74 20 36 0a 0a 61 64 64 72     : umount 6..addr
    18cc:	65 73 73 65 73 0a 20 20 20 44 69 73 70 6c 61 79     esses.   Display
    18dc:	20 61 6c 6c 20 64 65 76 69 63 65 20 47 50 49 42      all device GPIB
    18ec:	20 62 75 73 20 61 64 64 72 65 73 73 65 73 20 61      bus addresses a
    18fc:	6e 64 20 50 50 52 20 76 61 6c 75 65 73 0a 63 6f     nd PPR values.co
    190c:	6e 66 69 67 20 5b 2d 76 5d 0a 20 20 20 44 69 73     nfig [-v].   Dis
    191c:	70 6c 61 79 20 63 75 72 72 65 6e 74 20 64 72 69     play current dri
    192c:	76 65 73 20 63 6f 6e 66 69 67 75 72 61 74 69 6f     ves configuratio
    193c:	6e 0a 20 20 20 2d 76 20 56 65 72 62 6f 73 65 20     n.   -v Verbose 
    194c:	2d 20 73 68 6f 77 20 66 75 6c 6c 20 64 65 74 61     - show full deta
    195c:	69 6c 0a 0a 00                                      il...

00001961 <__c.4873>:
    1961:	64 72 69 76 65 73 20 20 20 20 68 65 6c 70 0a 00     drives    help..

00001971 <__c.4865>:
    1971:	41 4d 49 47 4f 25 64 00                             AMIGO%d.

00001979 <__c.4863>:
    1979:	66 6f 72 6d 61 74 69 6e 67 20 25 73 20 25 6c 64     formating %s %ld
    1989:	20 73 65 63 74 6f 72 73 0a 00                        sectors..

00001993 <__c.4861>:
    1993:	43 61 6e 20 6e 6f 74 20 75 73 65 20 6e 6f 6e 20     Can not use non 
    19a3:	32 35 36 20 62 79 74 65 20 73 65 63 74 6f 72 73     256 byte sectors
    19b3:	0a 00                                               ..

000019b5 <__c.4859>:
    19b5:	53 53 38 30 2d 25 64 00                             SS80-%d.

000019bd <__c.4857>:
    19bd:	66 6f 72 6d 61 74 69 6e 67 20 25 73 20 25 6c 64     formating %s %ld
    19cd:	20 73 65 63 74 6f 72 73 0a 00                        sectors..

000019d7 <__c.4855>:
    19d7:	43 61 6e 20 6e 6f 74 20 75 73 65 20 6e 6f 6e 20     Can not use non 
    19e7:	32 35 36 20 62 79 74 65 20 73 65 63 74 6f 72 73     256 byte sectors
    19f7:	0a 00                                               ..

000019f9 <__c.4835>:
    19f9:	44 65 76 69 63 65 20 65 72 72 6f 72 73 20 2d 20     Device errors - 
    1a09:	72 65 6d 6f 76 69 6e 67 3a 20 00                    removing: .

00001a14 <__c.4833>:
    1a14:	57 61 72 6e 69 6e 67 3a 20 25 73 20 42 59 54 45     Warning: %s BYTE
    1a24:	53 5f 50 45 52 5f 53 45 43 54 4f 52 20 21 3d 20     S_PER_SECTOR != 
    1a34:	32 35 36 2c 20 41 64 6a 75 73 74 69 6e 67 20 74     256, Adjusting t
    1a44:	6f 20 32 35 36 0a 00                                o 256..

00001a4b <__c.4831>:
    1a4b:	57 61 72 6e 69 6e 67 3a 20 25 73 20 42 59 54 45     Warning: %s BYTE
    1a5b:	53 5f 50 45 52 5f 42 4c 4f 43 4b 20 21 3d 20 32     S_PER_BLOCK != 2
    1a6b:	35 36 2c 20 41 64 6a 75 73 74 69 6e 67 20 74 6f     56, Adjusting to
    1a7b:	20 32 35 36 0a 00                                    256..

00001a81 <__c.4825>:
    1a81:	41 64 64 72 65 73 73 20 28 25 64 29 20 6f 75 74     Address (%d) out
    1a91:	20 6f 66 20 72 61 6e 67 65 0a 00                     of range..

00001a9c <__c.4809>:
    1a9c:	57 41 52 4e 49 4e 47 3a 20 6d 6f 64 65 6c 20 4e     WARNING: model N
    1aac:	4f 54 20 66 6f 75 6e 64 20 69 6e 20 68 70 64 69     OT found in hpdi
    1abc:	72 2e 69 6e 69 21 0a 00                             r.ini!..

00001ac4 <__c.4803>:
    1ac4:	68 70 64 69 72 20 69 6e 76 61 6c 69 64 20 74 79     hpdir invalid ty
    1ad4:	70 65 20 2d 20 4e 4f 54 20 41 4d 49 47 4f 20 6f     pe - NOT AMIGO o
    1ae4:	66 20 53 53 38 30 0a 00                             f SS80..

00001aec <__c.4767>:
    1aec:	61 6c 6c 6f 63 5f 64 65 76 69 63 65 3a 20 69 6e     alloc_device: in
    1afc:	76 61 6c 69 64 20 74 79 70 65 3a 25 64 3a 25 73     valid type:%d:%s
    1b0c:	0a 00                                               ..

00001b0e <__c.4759>:
    1b0e:	61 6c 6c 6f 63 5f 64 65 76 69 63 65 3a 20 44 65     alloc_device: De
    1b1e:	76 69 63 65 20 74 61 62 6c 65 20 69 73 20 66 75     vice table is fu
    1b2e:	6c 6c 0a 00                                         ll..

00001b32 <__c.4738>:
    1b32:	73 65 74 5f 61 63 74 69 76 65 5f 64 65 76 69 63     set_active_devic
    1b42:	65 3a 28 25 64 29 20 69 6e 76 61 6c 69 64 20 74     e:(%d) invalid t
    1b52:	79 70 65 3a 25 64 3a 25 73 0a 00                    ype:%d:%s..

00001b5d <__c.4736>:
    1b5d:	73 65 74 5f 61 63 74 69 76 65 5f 64 65 76 69 63     set_active_devic
    1b6d:	65 3a 20 69 6e 64 65 78 3a 20 25 64 20 74 79 70     e: index: %d typ
    1b7d:	65 3a 25 64 3a 25 73 2c 20 73 74 61 74 65 20 3d     e:%d:%s, state =
    1b8d:	3d 20 4e 55 4c 4c 0a 00                             = NULL..

00001b95 <__c.4734>:
    1b95:	73 65 74 5f 61 63 74 69 76 65 5f 64 65 76 69 63     set_active_devic
    1ba5:	65 3a 20 69 6e 64 65 78 20 25 64 20 75 6e 69 6e     e: index %d unin
    1bb5:	69 74 61 6c 69 7a 65 64 20 74 79 70 65 3a 25 64     italized type:%d
    1bc5:	3a 25 73 0a 00                                      :%s..

00001bca <__c.4732>:
    1bca:	73 65 74 5f 61 63 74 69 76 65 5f 64 65 76 69 63     set_active_devic
    1bda:	65 3a 20 69 6e 64 65 78 3a 25 64 20 74 79 70 65     e: index:%d type
    1bea:	3a 25 64 3a 25 73 2c 20 64 65 76 20 3d 3d 20 4e     :%d:%s, dev == N
    1bfa:	55 4c 4c 0a 00                                      ULL..

00001bff <__c.4730>:
    1bff:	73 65 74 5f 61 63 74 69 76 65 5f 64 65 76 69 63     set_active_devic
    1c0f:	65 3a 20 69 6e 64 65 78 3a 25 64 20 61 64 64 72     e: index:%d addr
    1c1f:	65 73 73 3a 20 25 30 32 58 48 20 6f 75 74 20 6f     ess: %02XH out o
    1c2f:	66 20 72 61 6e 67 65 0a 00                          f range..

00001c38 <__c.4728>:
    1c38:	73 65 74 5f 61 63 74 69 76 65 5f 64 65 76 69 63     set_active_devic
    1c48:	65 3a 28 25 64 29 20 6f 75 74 20 6f 66 20 72 61     e:(%d) out of ra
    1c58:	6e 67 65 0a 00                                      nge..

00001c5d <__c.4689>:
    1c5d:	0a 00                                               ..

00001c5f <__c.4684>:
    1c5f:	0a 00                                               ..

00001c61 <__c.4682>:
    1c61:	20 20 20 20 23 20 42 4c 4f 43 4b 53 20 3d 20 25         # BLOCKS = %
    1c71:	6c 64 0a 00                                         ld..

00001c75 <__c.4680>:
    1c75:	20 20 23 20 48 50 38 35 20 42 41 53 49 43 20 41       # HP85 BASIC A
    1c85:	44 44 52 45 53 53 20 3a 44 37 25 64 30 0a 00        DDRESS :D7%d0..

00001c94 <__c.4678>:
    1c94:	41 4d 49 47 4f 20 25 73 0a 00                       AMIGO %s..

00001c9e <__c.4676>:
    1c9e:	20 20 20 20 23 20 42 4c 4f 43 4b 53 20 3d 20 25         # BLOCKS = %
    1cae:	6c 64 0a 00                                         ld..

00001cb2 <__c.4674>:
    1cb2:	20 20 23 20 48 50 38 35 20 42 41 53 49 43 20 41       # HP85 BASIC A
    1cc2:	44 44 52 45 53 53 20 3a 44 37 25 64 30 0a 00        DDRESS :D7%d0..

00001cd1 <__c.4672>:
    1cd1:	53 53 38 30 20 25 73 0a 00                          SS80 %s..

00001cda <__c.4669>:
    1cda:	43 75 72 72 65 6e 74 20 43 6f 6e 66 69 67 75 72     Current Configur
    1cea:	61 74 69 6f 6e 20 53 65 74 74 69 6e 67 73 0a 00     ation Settings..

00001cfa <__c.4660>:
    1cfa:	0a 00                                               ..

00001cfc <__c.4655>:
    1cfc:	0a 00                                               ..

00001cfe <__c.4653>:
    1cfe:	50 52 49 4e 54 45 52 0a 00                          PRINTER..

00001d07 <__c.4651>:
    1d07:	41 4d 49 47 4f 20 25 73 0a 00                       AMIGO %s..

00001d11 <__c.4649>:
    1d11:	53 53 38 30 20 25 73 0a 00                          SS80 %s..

00001d1a <__c.4646>:
    1d1a:	44 65 76 69 63 65 20 41 64 64 72 65 73 73 65 73     Device Addresses
    1d2a:	0a 00                                               ..

00001d2c <__c.4640>:
    1d2c:	52 65 61 64 5f 43 6f 6e 66 69 67 3a 20 2a 2a 2a     Read_Config: ***
    1d3c:	2a 2a 2a 20 65 72 72 6f 72 73 28 25 64 29 20 2a     *** errors(%d) *
    1d4c:	2a 2a 2a 2a 2a 0a 00                                *****..

00001d53 <__c.4638>:
    1d53:	52 65 61 64 5f 43 6f 6e 66 69 67 3a 20 72 65 61     Read_Config: rea
    1d63:	64 28 25 64 29 20 6c 69 6e 65 73 0a 00              d(%d) lines..

00001d70 <__c.4636>:
    1d70:	4d 69 73 73 69 6e 67 20 45 4e 44 20 73 74 61 74     Missing END stat
    1d80:	65 6d 65 6e 74 20 61 74 20 6c 69 6e 65 3a 25 64     ement at line:%d
    1d90:	0a 00                                               ..

00001d92 <__c.4632>:
    1d92:	55 6e 65 78 70 65 63 74 65 64 20 53 54 41 54 45     Unexpected STATE
    1da2:	3a 20 25 73 2c 20 61 74 20 6c 69 6e 65 3a 25 64     : %s, at line:%d
    1db2:	0a 00                                               ..

00001db4 <__c.4629>:
    1db4:	55 6e 65 78 70 65 63 74 65 64 20 41 4d 49 47 4f     Unexpected AMIGO
    1dc4:	20 47 45 4d 45 54 52 59 20 74 6f 6b 65 6e 3a 20      GEMETRY token: 
    1dd4:	25 73 2c 20 61 74 20 6c 69 6e 65 3a 25 64 0a 00     %s, at line:%d..

00001de4 <__c.4620>:
    1de4:	55 6e 65 78 70 65 63 74 65 64 20 41 4d 49 47 4f     Unexpected AMIGO
    1df4:	20 43 4f 4e 46 49 47 20 74 6f 6b 65 6e 3a 20 25      CONFIG token: %
    1e04:	73 2c 20 61 74 20 6c 69 6e 65 3a 25 64 0a 00        s, at line:%d..

00001e13 <__c.4617>:
    1e13:	55 6e 65 78 70 65 63 74 65 64 20 48 45 41 44 45     Unexpected HEADE
    1e23:	52 20 43 4f 4e 46 49 47 20 74 6f 6b 65 6e 3a 20     R CONFIG token: 
    1e33:	25 73 2c 20 61 74 20 6c 69 6e 65 3a 25 64 0a 00     %s, at line:%d..

00001e43 <__c.4608>:
    1e43:	55 6e 65 78 70 65 63 74 65 64 20 41 4d 49 47 4f     Unexpected AMIGO
    1e53:	20 53 54 41 52 54 20 74 6f 6b 65 6e 3a 20 25 73      START token: %s
    1e63:	2c 20 61 74 20 6c 69 6e 65 3a 25 64 0a 00           , at line:%d..

00001e71 <__c.4600>:
    1e71:	55 6e 65 78 70 65 63 74 65 64 20 53 53 38 30 20     Unexpected SS80 
    1e81:	56 4f 4c 55 4d 45 20 74 6f 6b 65 6e 3a 20 25 73     VOLUME token: %s
    1e91:	2c 20 61 74 20 6c 69 6e 65 3a 25 64 0a 00           , at line:%d..

00001e9f <__c.4590>:
    1e9f:	55 6e 65 78 70 65 63 74 65 64 20 53 53 38 30 20     Unexpected SS80 
    1eaf:	55 4e 49 54 20 74 6f 6b 65 6e 3a 20 25 73 2c 20     UNIT token: %s, 
    1ebf:	61 74 20 6c 69 6e 65 3a 25 64 0a 00                 at line:%d..

00001ecb <__c.4573>:
    1ecb:	55 6e 65 78 70 65 63 74 65 64 20 53 53 38 30 20     Unexpected SS80 
    1edb:	43 4f 4e 54 52 4f 4c 4c 45 52 20 74 6f 6b 65 6e     CONTROLLER token
    1eeb:	3a 20 25 73 2c 20 61 74 20 6c 69 6e 65 3a 25 64     : %s, at line:%d
    1efb:	0a 00                                               ..

00001efd <__c.4565>:
    1efd:	55 6e 65 78 70 65 63 74 65 64 20 53 53 38 30 20     Unexpected SS80 
    1f0d:	43 4f 4e 46 49 47 20 74 6f 6b 65 6e 3a 20 25 73     CONFIG token: %s
    1f1d:	2c 20 61 74 20 6c 69 6e 65 3a 25 64 0a 00           , at line:%d..

00001f2b <__c.4562>:
    1f2b:	55 6e 65 78 70 65 63 74 65 64 20 53 53 38 30 20     Unexpected SS80 
    1f3b:	43 4f 4e 46 49 47 20 74 6f 6b 65 6e 3a 20 25 73     CONFIG token: %s
    1f4b:	2c 20 61 74 20 6c 69 6e 65 3a 25 64 0a 00           , at line:%d..

00001f59 <__c.4554>:
    1f59:	55 6e 65 78 70 65 63 74 65 64 20 53 53 38 30 20     Unexpected SS80 
    1f69:	53 54 41 52 54 20 74 6f 6b 65 6e 3a 20 25 73 2c     START token: %s,
    1f79:	20 61 74 20 6c 69 6e 65 3a 25 64 0a 00               at line:%d..

00001f86 <__c.4544>:
    1f86:	55 6e 65 78 70 65 63 74 65 64 20 50 52 49 4e 54     Unexpected PRINT
    1f96:	45 52 20 43 4f 4e 46 49 47 20 74 6f 6b 65 6e 3a     ER CONFIG token:
    1fa6:	20 25 73 2c 20 61 74 20 6c 69 6e 65 3a 25 64 0a      %s, at line:%d.
	...

00001fb7 <__c.4541>:
    1fb7:	55 6e 65 78 70 65 63 74 65 64 20 50 52 49 4e 54     Unexpected PRINT
    1fc7:	45 52 20 74 6f 6b 65 6e 3a 20 25 73 2c 20 61 74     ER token: %s, at
    1fd7:	20 6c 69 6e 65 3a 25 64 0a 00                        line:%d..

00001fe1 <__c.4537>:
    1fe1:	55 6e 65 78 70 65 63 74 65 64 20 74 6f 6b 65 6e     Unexpected token
    1ff1:	3a 20 25 73 2c 20 61 74 20 6c 69 6e 65 3a 25 64     : %s, at line:%d
    2001:	0a 00                                               ..

00002003 <__c.4526>:
    2003:	55 6e 65 78 70 65 63 74 65 64 20 74 6f 6b 65 6e     Unexpected token
    2013:	3a 20 25 73 2c 20 61 74 20 6c 69 6e 65 3a 25 64     : %s, at line:%d
    2023:	0a 00                                               ..

00002025 <__c.4523>:
    2025:	52 65 61 64 5f 43 6f 6e 66 69 67 3a 20 6f 70 65     Read_Config: ope
    2035:	6e 28 25 73 29 20 66 61 69 6c 65 64 0a 00           n(%s) failed..

00002043 <__c.4521>:
    2043:	52 65 61 64 69 6e 67 3a 20 25 73 0a 00              Reading: %s..

00002050 <__c.4500>:
    2050:	25 73 0a 00                                         %s..

00002054 <__c.4490>:
    2054:	25 2d 32 35 73 20 3d 20 25 73 0a 00                 %-25s = %s..

00002060 <__c.4479>:
    2060:	25 2d 32 35 73 20 3d 20 25 38 6c 78 48 20 28 25     %-25s = %8lxH (%
    2070:	6c 64 29 0a 00                                      ld)..

00002075 <__c.3652>:
    2075:	4d 6f 64 65 6c 3a 20 25 73 20 4e 4f 54 20 66 6f     Model: %s NOT fo
    2085:	75 6e 64 20 69 6e 20 68 70 64 69 72 2e 69 6e 69     und in hpdir.ini
    2095:	0a 00                                               ..

00002097 <__c.3647>:
    2097:	4d 6f 64 65 6c 3a 20 25 73 20 66 6f 75 6e 64 20     Model: %s found 
    20a7:	69 6e 20 68 70 64 69 72 2e 69 6e 69 0a 00           in hpdir.ini..

000020b5 <__c.3645>:
    20b5:	25 73 20 25 73 0a 00                                %s %s..

000020bc <__c.3641>:
    20bc:	45 72 72 6f 72 3a 20 68 70 64 69 72 2e 69 6e 69     Error: hpdir.ini
    20cc:	20 6e 6f 74 20 66 6f 75 6e 64 21 0a 00               not found!..

000020d9 <__c.4569>:
    20d9:	5b 53 53 38 30 20 55 6e 6b 6e 6f 77 6e 20 53 43     [SS80 Unknown SC
    20e9:	3a 20 25 30 32 58 48 2c 20 6c 69 73 74 65 6e 3a     : %02XH, listen:
    20f9:	25 30 32 58 48 2c 20 74 61 6c 6b 3a 25 30 32 58     %02XH, talk:%02X
    2109:	48 5d 0a 00                                         H]..

0000210d <__c.4567>:
    210d:	5b 53 53 38 30 20 53 43 20 55 6e 6b 6e 6f 77 6e     [SS80 SC Unknown
    211d:	3a 20 25 30 32 58 48 2c 20 6c 69 73 74 65 6e 3a     : %02XH, listen:
    212d:	25 30 32 58 48 2c 20 74 61 6c 6b 3a 25 30 32 58     %02XH, talk:%02X
    213d:	48 5d 0a 00                                         H]..

00002141 <__c.4565>:
    2141:	5b 53 53 38 30 20 54 72 61 6e 73 70 61 72 65 6e     [SS80 Transparen
    2151:	74 5d 0a 00                                         t]..

00002155 <__c.4563>:
    2155:	5b 41 6d 69 67 6f 20 43 6c 65 61 72 5d 0a 00        [Amigo Clear]..

00002164 <__c.4561>:
    2164:	5b 53 53 38 30 20 52 65 70 6f 72 74 20 53 74 61     [SS80 Report Sta
    2174:	74 65 5d 0a 00                                      te]..

00002179 <__c.4559>:
    2179:	5b 53 53 30 30 20 45 78 65 63 75 74 65 20 53 74     [SS00 Execute St
    2189:	61 74 65 5d 0a 00                                   ate]..

0000218f <__c.4557>:
    218f:	5b 53 53 38 30 20 43 6f 6d 6d 61 6e 64 20 53 74     [SS80 Command St
    219f:	61 74 65 5d 0a 00                                   ate]..

000021a5 <__c.4552>:
    21a5:	5b 47 50 49 42 20 45 72 72 6f 72 20 52 65 74 75     [GPIB Error Retu
    21b5:	72 6e 20 2d 20 57 72 69 74 65 20 45 52 52 4f 52     rn - Write ERROR
    21c5:	5d 0a 00                                            ]..

000021c8 <__c.4538>:
    21c8:	5b 41 6d 69 67 6f 20 43 6c 65 61 72 5d 0a 00        [Amigo Clear]..

000021d7 <__c.4536>:
    21d7:	5b 47 50 49 42 20 52 65 61 64 20 45 72 72 6f 72     [GPIB Read Error
    21e7:	5d 0a 00                                            ]..

000021ea <__c.4529>:
    21ea:	5b 53 53 38 30 20 53 44 43 5d 0a 00                 [SS80 SDC]..

000021f6 <__c.4515>:
    21f6:	5b 53 53 38 30 20 71 73 74 61 74 20 25 30 32 58     [SS80 qstat %02X
    2206:	5d 0a 00                                            ]..

00002209 <__c.4513>:
    2209:	5b 53 53 38 30 20 71 73 74 61 74 20 73 65 6e 64     [SS80 qstat send
    2219:	20 46 41 49 4c 45 44 5d 0a 00                        FAILED]..

00002223 <__c.4506>:
    2223:	5b 53 53 38 30 20 53 65 65 6b 3a 25 30 38 6c 58     [SS80 Seek:%08lX
    2233:	48 5d 0a 00                                         H]..

00002237 <__c.4504>:
    2237:	5b 53 53 38 30 20 53 65 65 6b 20 4f 56 45 52 46     [SS80 Seek OVERF
    2247:	4c 4f 57 20 61 74 20 25 30 38 6c 58 48 5d 0a 00     LOW at %08lXH]..

00002257 <__c.4499>:
    2257:	5b 53 53 38 30 20 54 72 61 6e 73 70 61 72 65 6e     [SS80 Transparen
    2267:	74 20 43 6f 6d 6d 61 6e 64 2c 20 45 72 72 6f 72     t Command, Error
    2277:	20 61 74 20 28 25 64 29 20 6f 66 20 28 25 64 29      at (%d) of (%d)
    2287:	20 4f 50 20 43 6f 64 65 73 5d 0a 00                  OP Codes]..

00002293 <__c.4496>:
    2293:	5b 53 53 38 30 20 49 6e 76 61 6c 69 64 20 4f 50     [SS80 Invalid OP
    22a3:	20 43 6f 64 65 20 28 25 30 32 58 48 29 5d 0a 00      Code (%02XH)]..

000022b3 <__c.4494>:
    22b3:	5b 53 53 38 30 20 43 61 6e 63 65 6c 20 28 25 64     [SS80 Cancel (%d
    22c3:	29 5d 0a 00                                         )]..

000022c7 <__c.4492>:
    22c7:	5b 53 53 38 30 20 43 68 61 6e 6e 65 6c 20 49 6e     [SS80 Channel In
    22d7:	64 65 70 65 6e 64 65 6e 74 20 43 6c 65 61 72 20     dependent Clear 
    22e7:	28 25 64 29 5d 0a 00                                (%d)]..

000022ee <__c.4490>:
    22ee:	5b 53 53 38 30 20 57 72 69 74 65 20 4c 6f 6f 70     [SS80 Write Loop
    22fe:	62 61 63 6b 20 2d 20 54 4f 44 4f 5d 0a 00           back - TODO]..

0000230c <__c.4488>:
    230c:	5b 53 53 38 30 20 52 65 61 64 20 4c 6f 6f 70 62     [SS80 Read Loopb
    231c:	61 63 6b 20 2d 20 54 4f 44 4f 5d 0a 00              ack - TODO]..

00002329 <__c.4485>:
    2329:	5b 53 53 38 30 20 48 50 2d 49 42 20 50 61 72 69     [SS80 HP-IB Pari
    2339:	74 79 20 43 68 65 63 6b 69 6e 67 20 2d 20 54 4f     ty Checking - TO
    2349:	44 4f 5d 0a 00                                      DO]..

0000234e <__c.4482>:
    234e:	5b 47 50 49 42 20 62 75 66 66 65 72 20 4f 56 45     [GPIB buffer OVE
    235e:	52 46 4c 4f 57 21 5d 0a 00                          RFLOW!]..

00002367 <__c.4480>:
    2367:	5b 47 50 49 42 20 52 65 61 64 20 45 52 52 4f 52     [GPIB Read ERROR
    2377:	5d 0a 00                                            ]..

0000237a <__c.4471>:
    237a:	5b 53 53 38 30 20 45 78 65 63 75 74 65 20 43 6f     [SS80 Execute Co
    238a:	6d 6d 61 6e 64 2c 20 45 72 72 6f 72 20 61 74 20     mmand, Error at 
    239a:	28 25 64 29 20 6f 66 20 28 25 64 29 20 4f 50 20     (%d) of (%d) OP 
    23aa:	43 6f 64 65 73 5d 0a 00                             Codes]..

000023b2 <__c.4468>:
    23b2:	5b 53 53 38 30 20 49 6e 76 61 6c 69 64 20 4f 50     [SS80 Invalid OP
    23c2:	20 43 6f 64 65 20 28 25 30 32 58 48 29 5d 0a 00      Code (%02XH)]..

000023d2 <__c.4466>:
    23d2:	5b 53 53 38 30 20 49 6e 69 74 69 61 74 65 20 44     [SS80 Initiate D
    23e2:	69 61 67 6e 6f 73 74 69 63 20 2d 20 54 4f 44 4f     iagnostic - TODO
    23f2:	5d 0a 00                                            ]..

000023f5 <__c.4464>:
    23f5:	5b 53 53 38 30 20 52 65 71 75 65 73 74 20 53 74     [SS80 Request St
    2405:	61 74 75 73 5d 0a 00                                atus]..

0000240c <__c.4462>:
    240c:	5b 53 53 38 30 20 44 6f 6f 72 20 4c 6f 63 6b 20     [SS80 Door Lock 
    241c:	2d 20 54 4f 44 4f 5d 0a 00                          - TODO]..

00002425 <__c.4460>:
    2425:	5b 53 53 38 30 20 44 6f 6f 72 20 55 6e 4c 6f 63     [SS80 Door UnLoc
    2435:	6b 20 2d 20 54 4f 44 4f 5d 0a 00                    k - TODO]..

00002440 <__c.4458>:
    2440:	5b 53 53 38 30 20 53 65 74 20 53 74 61 74 75 73     [SS80 Set Status
    2450:	20 4d 61 73 6b 20 2d 20 54 4f 44 4f 5d 0a 00         Mask - TODO]..

0000245f <__c.4456>:
    245f:	5b 53 53 38 30 20 49 6e 69 74 69 61 6c 69 7a 65     [SS80 Initialize
    246f:	20 4d 65 64 69 61 20 54 4f 44 4f 5d 0a 00            Media TODO]..

0000247d <__c.4454>:
    247d:	5b 53 53 38 30 20 44 65 73 63 72 69 62 65 5d 0a     [SS80 Describe].
	...

0000248e <__c.4452>:
    248e:	5b 53 53 38 30 20 56 61 6c 69 64 61 74 65 20 4b     [SS80 Validate K
    249e:	65 79 20 2d 20 54 4f 44 4f 5d 0a 00                 ey - TODO]..

000024aa <__c.4450>:
    24aa:	5b 53 53 38 30 20 52 65 6c 65 61 73 65 20 44 65     [SS80 Release De
    24ba:	6e 69 65 64 20 4e 4f 2d 4f 50 5d 0a 00              nied NO-OP]..

000024c7 <__c.4448>:
    24c7:	5b 53 53 38 30 20 52 65 6c 65 61 73 65 20 4e 4f     [SS80 Release NO
    24d7:	2d 4f 50 5d 0a 00                                   -OP]..

000024dd <__c.4446>:
    24dd:	5b 53 53 38 30 20 4c 6f 63 61 74 65 20 61 6e 64     [SS80 Locate and
    24ed:	20 56 65 72 69 66 79 20 2d 20 54 4f 44 4f 5d 0a      Verify - TODO].
	...

000024fe <__c.4444>:
    24fe:	5b 53 53 38 30 20 53 65 74 20 52 65 74 75 72 6e     [SS80 Set Return
    250e:	20 41 64 64 72 65 73 73 69 6e 67 20 2d 20 54 4f      Addressing - TO
    251e:	44 4f 5d 0a 00                                      DO]..

00002523 <__c.4442>:
    2523:	5b 53 53 38 30 20 53 65 74 20 52 65 6c 65 61 73     [SS80 Set Releas
    2533:	65 20 4e 4f 2d 4f 50 5d 0a 00                       e NO-OP]..

0000253d <__c.4440>:
    253d:	5b 53 53 38 30 20 53 65 74 20 52 50 53 20 4e 4f     [SS80 Set RPS NO
    254d:	2d 4f 50 5d 0a 00                                   -OP]..

00002553 <__c.4438>:
    2553:	5b 53 53 38 30 20 4e 4f 2d 4f 50 5d 0a 00           [SS80 NO-OP]..

00002561 <__c.4436>:
    2561:	5b 53 53 38 30 20 53 65 74 20 4c 65 6e 67 74 68     [SS80 Set Length
    2571:	3a 28 25 30 38 6c 58 48 29 5d 0a 00                 :(%08lXH)]..

0000257d <__c.4434>:
    257d:	5b 53 53 38 30 20 53 65 74 20 41 64 64 72 65 73     [SS80 Set Addres
    258d:	73 3a 28 25 30 38 6c 58 48 29 5d 0a 00              s:(%08lXH)]..

0000259a <__c.4432>:
    259a:	5b 53 53 38 30 20 4c 6f 63 61 74 65 20 61 6e 64     [SS80 Locate and
    25aa:	20 57 72 69 74 65 5d 0a 00                           Write]..

000025b3 <__c.4429>:
    25b3:	5b 53 53 38 30 20 4c 6f 63 61 74 65 20 61 6e 64     [SS80 Locate and
    25c3:	20 52 65 61 64 5d 0a 00                              Read]..

000025cb <__c.4427>:
    25cb:	5b 53 53 38 30 20 53 65 74 20 56 6f 6c 75 6d 65     [SS80 Set Volume
    25db:	3a 20 28 25 64 29 5d 0a 00                          : (%d)]..

000025e4 <__c.4424>:
    25e4:	5b 53 53 38 30 20 53 65 74 20 55 6e 69 74 3a 28     [SS80 Set Unit:(
    25f4:	25 64 29 5d 0a 00                                   %d)]..

000025fa <__c.4422>:
    25fa:	5b 47 50 49 42 20 62 75 66 66 65 72 20 4f 56 45     [GPIB buffer OVE
    260a:	52 46 4c 4f 57 21 5d 0a 00                          RFLOW!]..

00002613 <__c.4420>:
    2613:	5b 53 53 38 30 20 43 6f 6d 6d 61 6e 64 20 53 74     [SS80 Command St
    2623:	61 74 65 20 47 50 49 42 20 52 65 61 64 20 45 52     ate GPIB Read ER
    2633:	52 4f 52 5d 0a 00                                   ROR]..

00002639 <__c.4411>:
    2639:	5b 53 53 38 30 20 56 6f 6c 75 6d 65 3a 25 64 20     [SS80 Volume:%d 
    2649:	69 6e 76 61 6c 69 64 5d 0a 00                       invalid]..

00002653 <__c.4406>:
    2653:	5b 53 53 38 30 20 55 4e 49 54 3a 25 64 20 69 6e     [SS80 UNIT:%d in
    2663:	76 61 6c 69 64 5d 0a 00                             valid]..

0000266b <__c.4401>:
    266b:	5b 53 53 38 30 20 44 65 73 63 72 69 62 65 20 56     [SS80 Describe V
    267b:	6f 6c 75 6d 65 20 46 41 49 4c 45 44 5d 0a 00        olume FAILED]..

0000268a <__c.4399>:
    268a:	5b 53 53 38 30 20 44 65 73 63 72 69 62 65 20 55     [SS80 Describe U
    269a:	6e 69 74 20 46 41 49 4c 45 44 5d 0a 00              nit FAILED]..

000026a7 <__c.4397>:
    26a7:	5b 53 53 38 30 20 44 65 73 63 72 69 62 65 20 43     [SS80 Describe C
    26b7:	6f 6e 74 72 6f 6c 6c 65 72 20 46 41 49 4c 45 44     ontroller FAILED
    26c7:	5d 0a 00                                            ]..

000026ca <__c.4395>:
    26ca:	5b 53 53 38 30 20 44 65 73 63 72 69 62 65 5d 0a     [SS80 Describe].
	...

000026db <__c.4387>:
    26db:	5b 53 53 38 30 20 53 65 6e 64 20 53 74 61 74 75     [SS80 Send Statu
    26eb:	73 20 46 41 49 4c 45 44 5d 0a 00                    s FAILED]..

000026f6 <__c.4385>:
    26f6:	5b 53 53 38 30 20 53 65 6e 64 20 53 74 61 74 75     [SS80 Send Statu
    2706:	73 5d 0a 00                                         s]..

0000270a <__c.4375>:
    270a:	20 20 20 20 25 64 3a 25 73 0a 00                        %d:%s..

00002715 <__c.4373>:
    2715:	25 73 3a 0a 00                                      %s:..

0000271a <__c.4348>:
    271a:	5b 53 53 38 30 20 4c 6f 63 61 74 65 20 61 6e 64     [SS80 Locate and
    272a:	20 57 72 69 74 65 20 57 72 6f 74 65 20 54 6f 74      Write Wrote Tot
    273a:	61 6c 28 25 6c 78 48 29 5d 0a 00                    al(%lxH)]..

00002745 <__c.4346>:
    2745:	5b 53 53 38 30 20 4c 6f 63 61 74 65 20 61 6e 64     [SS80 Locate and
    2755:	20 57 72 69 74 65 20 44 49 44 20 4e 4f 54 20 46      Write DID NOT F
    2765:	49 4e 49 53 48 5d 0a 00                             INISH]..

0000276d <__c.4342>:
    276d:	5b 53 53 38 30 20 4c 6f 63 61 74 65 20 61 6e 64     [SS80 Locate and
    277d:	20 57 72 69 74 65 20 77 72 6f 74 65 28 25 30 32      Write wrote(%02
    278d:	58 48 29 5d 0a 00                                   XH)]..

00002793 <__c.4340>:
    2793:	5b 44 69 73 6b 20 57 72 69 74 65 20 45 72 72 6f     [Disk Write Erro
    27a3:	72 5d 0a 00                                         r]..

000027a7 <__c.4336>:
    27a7:	5b 47 50 49 42 20 52 65 61 64 20 45 72 72 6f 72     [GPIB Read Error
    27b7:	5d 0a 00                                            ]..

000027ba <__c.4334>:
    27ba:	5b 53 53 38 30 20 4c 6f 63 61 74 65 20 61 6e 64     [SS80 Locate and
    27ca:	20 57 72 69 74 65 20 61 74 20 25 30 38 6c 58 48      Write at %08lXH
    27da:	28 25 6c 58 48 29 5d 0a 00                          (%lXH)]..

000027e3 <__c.4322>:
    27e3:	5b 53 53 38 30 20 42 75 66 66 65 72 65 64 20 52     [SS80 Buffered R
    27f3:	65 61 64 20 54 6f 74 61 6c 28 25 6c 58 48 29 20     ead Total(%lXH) 
    2803:	62 79 74 65 73 5d 0a 00                             bytes]..

0000280b <__c.4320>:
    280b:	5b 53 53 38 30 20 42 75 66 66 65 72 65 64 20 52     [SS80 Buffered R
    281b:	65 61 64 20 44 49 44 20 4e 4f 54 20 46 49 4e 49     ead DID NOT FINI
    282b:	53 48 5d 0a 00                                      SH]..

00002830 <__c.4315>:
    2830:	5b 53 53 38 30 20 47 50 49 42 20 57 72 69 74 65     [SS80 GPIB Write
    2840:	20 45 72 72 6f 72 5d 0a 00                           Error]..

00002849 <__c.4313>:
    2849:	5b 53 53 38 30 20 44 69 73 6b 20 52 65 61 64 20     [SS80 Disk Read 
    2859:	45 72 72 6f 72 5d 0a 00                             Error]..

00002861 <__c.4311>:
    2861:	5b 53 53 38 30 20 44 69 73 6b 20 52 65 61 64 20     [SS80 Disk Read 
    2871:	25 30 32 58 48 20 62 79 74 65 73 5d 0a 00           %02XH bytes]..

0000287f <__c.4309>:
    287f:	5b 53 53 38 30 20 4c 6f 63 61 74 65 20 61 6e 64     [SS80 Locate and
    288f:	20 52 65 61 64 20 61 74 20 25 30 38 6c 58 48 28      Read at %08lXH(
    289f:	25 6c 58 48 29 5d 0a 00                             %lXH)]..

000028a7 <__c.4292>:
    28a7:	5b 53 53 38 30 20 45 58 45 43 20 73 74 61 74 65     [SS80 EXEC state
    28b7:	3a 25 64 20 65 72 72 6f 72 5d 0a 00                 :%d error]..

000028c3 <__c.4276>:
    28c3:	5b 53 53 38 30 20 25 30 32 58 48 20 49 4e 49 54     [SS80 %02XH INIT
    28d3:	5d 0a 00                                            ]..

000028d6 <__c.4392>:
    28d6:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 20 52     [AMIGO Execute R
    28e6:	65 71 75 65 73 74 20 4c 6f 67 69 63 61 6c 20 41     equest Logical A
    28f6:	64 64 72 65 73 73 5d 0a 00                          ddress]..

000028ff <__c.4389>:
    28ff:	5b 41 4d 49 47 4f 20 45 78 69 63 75 74 65 20 52     [AMIGO Exicute R
    290f:	65 71 75 65 73 74 20 53 74 61 74 75 73 20 55 6e     equest Status Un
    291f:	62 75 66 66 65 72 65 64 5d 0a 00                    buffered]..

0000292a <__c.4386>:
    292a:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 20 52     [AMIGO Execute R
    293a:	65 71 75 65 73 74 20 53 74 61 74 75 73 20 42 75     equest Status Bu
    294a:	66 66 65 72 65 64 5d 0a 00                          ffered]..

00002953 <__c.4381>:
    2953:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 20 57     [AMIGO Execute W
    2963:	72 69 74 65 20 42 75 66 66 65 72 65 64 5d 0a 00     rite Buffered]..

00002973 <__c.4378>:
    2973:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 20 49     [AMIGO Execute I
    2983:	6e 69 74 69 61 6c 69 7a 65 5d 0a 00                 nitialize]..

0000298f <__c.4375>:
    298f:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 20 57     [AMIGO Execute W
    299f:	72 69 74 65 20 55 6e 62 75 66 66 65 72 65 64 5d     rite Unbuffered]
    29af:	0a 00                                               ..

000029b1 <__c.4372>:
    29b1:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 20 52     [AMIGO Execute R
    29c1:	65 61 64 20 42 75 66 66 65 72 65 64 5d 0a 00        ead Buffered]..

000029d0 <__c.4369>:
    29d0:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 20 52     [AMIGO Execute R
    29e0:	65 61 64 20 55 6e 62 75 66 66 65 72 65 64 5d 0a     ead Unbuffered].
	...

000029f1 <__c.4366>:
    29f1:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 20 43     [AMIGO Execute C
    2a01:	6f 6c 64 20 4c 6f 61 64 20 52 65 61 64 5d 0a 00     old Load Read]..

00002a11 <__c.4362>:
    2a11:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 28 25     [AMIGO Execute(%
    2a21:	30 32 58 48 29 3a 20 6c 69 73 74 65 6e 3a 25 30     02XH): listen:%0
    2a31:	32 58 48 2c 20 74 61 6c 6b 3a 25 30 32 58 48 5d     2XH, talk:%02XH]
    2a41:	0a 00                                               ..

00002a43 <__c.4357>:
    2a43:	5b 41 4d 49 47 4f 20 46 6f 72 6d 61 74 5d 0a 00     [AMIGO Format]..

00002a53 <__c.4354>:
    2a53:	5b 41 4d 49 47 4f 20 52 65 61 64 20 42 75 66 66     [AMIGO Read Buff
    2a63:	65 72 65 64 20 43 6f 6d 6d 61 6e 64 5d 0a 00        ered Command]..

00002a72 <__c.4352>:
    2a72:	5b 41 4d 49 47 4f 20 52 65 71 75 65 73 74 20 53     [AMIGO Request S
    2a82:	74 61 74 75 73 20 55 6e 62 75 66 66 65 72 65 64     tatus Unbuffered
    2a92:	20 43 6f 6d 6d 61 6e 64 5d 0a 00                     Command]..

00002a9d <__c.4350>:
    2a9d:	5b 41 4d 49 47 4f 20 57 72 69 74 65 20 42 75 66     [AMIGO Write Buf
    2aad:	66 65 72 65 64 20 43 6f 6d 6d 61 6e 64 5d 0a 00     fered Command]..

00002abd <__c.4348>:
    2abd:	5b 41 4d 49 47 4f 20 52 65 71 75 65 73 74 20 4c     [AMIGO Request L
    2acd:	6f 67 69 63 61 6c 20 41 64 64 72 65 73 73 20 43     ogical Address C
    2add:	6f 6d 6d 61 6e 64 5d 0a 00                          ommand]..

00002ae6 <__c.4346>:
    2ae6:	5b 41 4d 49 47 4f 20 49 6e 69 74 69 61 6c 69 7a     [AMIGO Initializ
    2af6:	65 20 43 6f 6d 6d 61 6e 64 5d 0a 00                 e Command]..

00002b02 <__c.4344>:
    2b02:	5b 41 4d 49 47 4f 20 57 72 69 74 65 20 55 6e 62     [AMIGO Write Unb
    2b12:	75 66 66 65 72 65 64 20 43 6f 6d 6d 61 6e 64 5d     uffered Command]
    2b22:	0a 00                                               ..

00002b24 <__c.4342>:
    2b24:	5b 41 4d 49 47 4f 20 56 65 72 69 66 79 5d 0a 00     [AMIGO Verify]..

00002b34 <__c.4339>:
    2b34:	5b 41 4d 49 47 4f 20 52 65 61 64 20 55 6e 62 75     [AMIGO Read Unbu
    2b44:	66 66 65 72 65 64 20 43 6f 6d 6d 61 6e 64 5d 0a     ffered Command].
	...

00002b55 <__c.4337>:
    2b55:	5b 41 4d 49 47 4f 20 52 65 71 75 65 73 74 20 53     [AMIGO Request S
    2b65:	74 61 74 75 73 20 42 75 66 66 65 72 65 64 20 43     tatus Buffered C
    2b75:	6f 6d 6d 61 6e 64 5d 0a 00                          ommand]..

00002b7e <__c.4335>:
    2b7e:	5b 41 4d 49 47 4f 20 53 65 65 6b 20 6c 65 6e 3d     [AMIGO Seek len=
    2b8e:	36 5d 0a 00                                         6]..

00002b92 <__c.4332>:
    2b92:	5b 41 4d 49 47 4f 20 53 65 65 6b 20 6c 65 6e 3d     [AMIGO Seek len=
    2ba2:	35 5d 0a 00                                         5]..

00002ba6 <__c.4329>:
    2ba6:	5b 41 4d 49 47 4f 20 43 6f 6c 64 20 4c 6f 61 64     [AMIGO Cold Load
    2bb6:	20 52 65 61 64 20 43 6f 6d 6d 61 6e 64 5d 0a 00      Read Command]..

00002bc6 <__c.4326>:
    2bc6:	5b 41 4d 49 47 4f 20 43 6f 6d 6d 61 6e 64 28 25     [AMIGO Command(%
    2bd6:	30 32 58 48 29 3a 20 47 50 49 42 20 72 65 61 64     02XH): GPIB read
    2be6:	20 62 79 74 65 73 3a 25 30 32 58 48 5d 0a 00         bytes:%02XH]..

00002bf5 <__c.4324>:
    2bf5:	5b 41 4d 49 47 4f 20 43 6f 6d 6d 61 6e 64 3a 47     [AMIGO Command:G
    2c05:	50 49 42 20 72 65 61 64 20 65 72 72 6f 72 5d 0a     PIB read error].
	...

00002c16 <__c.4322>:
    2c16:	5b 41 4d 49 47 4f 20 43 6f 6d 6d 61 6e 64 3a 47     [AMIGO Command:G
    2c26:	50 49 42 20 72 65 61 64 20 65 72 72 6f 72 5d 0a     PIB read error].
	...

00002c37 <__c.4320>:
    2c37:	5b 41 4d 49 47 4f 5f 43 6f 6d 6d 61 6e 64 3a 47     [AMIGO_Command:G
    2c47:	50 49 42 20 77 72 69 74 65 20 65 72 72 6f 72 5d     PIB write error]
    2c57:	0a 00                                               ..

00002c59 <__c.4318>:
    2c59:	5b 41 4d 49 47 4f 20 43 6f 6d 6d 61 6e 64 28 25     [AMIGO Command(%
    2c69:	30 32 58 48 29 3a 20 6c 69 73 74 65 6e 3a 25 30     02XH): listen:%0
    2c79:	32 58 48 2c 20 74 61 6c 6b 3a 25 30 32 58 48 5d     2XH, talk:%02XH]
    2c89:	0a 00                                               ..

00002c8b <__c.4306>:
    2c8b:	5b 45 20 20 20 41 6d 69 67 6f 20 45 52 52 4f 52     [E   Amigo ERROR
    2c9b:	20 73 65 63 6f 6e 64 61 72 79 3a 20 25 30 32 58      secondary: %02X
    2cab:	48 2c 20 73 74 61 74 65 3a 25 30 32 58 48 2c 20     H, state:%02XH, 
    2cbb:	6c 69 73 74 65 6e 69 6e 67 3a 25 30 32 58 48 2c     listening:%02XH,
    2ccb:	20 74 61 6c 6b 69 6e 67 3a 25 30 32 58 48 5d 0a      talking:%02XH].
	...

00002cdc <__c.4304>:
    2cdc:	5b 55 4e 54 20 41 6d 69 67 6f 20 54 4f 44 4f 20     [UNT Amigo TODO 
    2cec:	73 65 63 6f 6e 64 61 72 79 3a 20 25 30 32 58 48     secondary: %02XH
    2cfc:	2c 20 73 74 61 74 65 3a 25 30 32 58 48 2c 20 6c     , state:%02XH, l
    2d0c:	69 73 74 65 6e 69 6e 67 3a 25 30 32 58 48 2c 20     istening:%02XH, 
    2d1c:	74 61 6c 6b 69 6e 67 3a 25 30 32 58 48 5d 0a 00     talking:%02XH]..

00002d2c <__c.4302>:
    2d2c:	5b 54 20 20 20 41 6d 69 67 6f 20 54 4f 44 4f 20     [T   Amigo TODO 
    2d3c:	73 65 63 6f 6e 64 61 72 79 3a 20 25 30 32 58 48     secondary: %02XH
    2d4c:	2c 20 73 74 61 74 65 3a 25 30 32 58 48 2c 20 6c     , state:%02XH, l
    2d5c:	69 73 74 65 6e 69 6e 67 3a 25 30 32 58 48 2c 20     istening:%02XH, 
    2d6c:	74 61 6c 6b 69 6e 67 3a 25 30 32 58 48 5d 0a 00     talking:%02XH]..

00002d7c <__c.4300>:
    2d7c:	5b 4c 20 20 20 41 6d 69 67 6f 20 54 4f 44 4f 20     [L   Amigo TODO 
    2d8c:	73 65 63 6f 6e 64 61 72 79 3a 20 25 30 32 58 48     secondary: %02XH
    2d9c:	2c 20 73 74 61 74 65 3a 25 30 32 58 48 2c 20 6c     , state:%02XH, l
    2dac:	69 73 74 65 6e 69 6e 67 3a 25 30 32 58 48 2c 20     istening:%02XH, 
    2dbc:	74 61 6c 6b 69 6e 67 3a 25 30 32 58 48 5d 0a 00     talking:%02XH]..

00002dcc <__c.4295>:
    2dcc:	5b 55 20 41 6d 69 67 6f 20 54 4f 44 4f 20 73 65     [U Amigo TODO se
    2ddc:	63 6f 6e 64 61 72 79 3a 20 25 30 32 58 48 2c 20     condary: %02XH, 
    2dec:	73 74 61 74 65 3a 25 30 32 58 48 2c 20 6f 70 63     state:%02XH, opc
    2dfc:	6f 64 65 3a 25 30 32 58 48 2c 20 6c 65 6e 3a 25     ode:%02XH, len:%
    2e0c:	33 64 2c 20 6c 69 73 74 65 6e 69 6e 67 3a 25 30     3d, listening:%0
    2e1c:	32 58 48 2c 20 74 61 6c 6b 69 6e 67 3a 25 30 32     2XH, talking:%02
    2e2c:	58 48 5d 0a 00                                      XH]..

00002e31 <__c.4293>:
    2e31:	5b 55 4e 54 20 41 6d 69 67 6f 20 54 4f 44 4f 20     [UNT Amigo TODO 
    2e41:	73 65 63 6f 6e 64 61 72 79 3a 20 25 30 32 58 48     secondary: %02XH
    2e51:	2c 20 73 74 61 74 65 3a 25 30 32 58 48 2c 20 6f     , state:%02XH, o
    2e61:	70 63 6f 64 65 3a 25 30 32 58 48 2c 20 6c 65 6e     pcode:%02XH, len
    2e71:	3a 25 33 64 2c 20 6c 69 73 74 65 6e 69 6e 67 3a     :%3d, listening:
    2e81:	25 30 32 58 48 2c 20 74 61 6c 6b 69 6e 67 3a 25     %02XH, talking:%
    2e91:	30 32 58 48 5d 0a 00                                02XH]..

00002e98 <__c.4291>:
    2e98:	5b 54 20 20 20 41 6d 69 67 6f 20 54 4f 44 4f 20     [T   Amigo TODO 
    2ea8:	73 65 63 6f 6e 64 61 72 79 3a 20 25 30 32 58 48     secondary: %02XH
    2eb8:	2c 20 73 74 61 74 65 3a 25 30 32 58 48 2c 20 6f     , state:%02XH, o
    2ec8:	70 63 6f 64 65 3a 25 30 32 58 48 2c 20 6c 65 6e     pcode:%02XH, len
    2ed8:	3a 25 33 64 2c 20 6c 69 73 74 65 6e 69 6e 67 3a     :%3d, listening:
    2ee8:	25 30 32 58 48 2c 20 74 61 6c 6b 69 6e 67 3a 25     %02XH, talking:%
    2ef8:	30 32 58 48 5d 0a 00                                02XH]..

00002eff <__c.4289>:
    2eff:	5b 4c 20 20 20 41 6d 69 67 6f 20 54 4f 44 4f 20     [L   Amigo TODO 
    2f0f:	73 65 63 6f 6e 64 61 72 79 3a 20 25 30 32 58 48     secondary: %02XH
    2f1f:	2c 20 73 74 61 74 65 3a 25 30 32 58 48 2c 20 6f     , state:%02XH, o
    2f2f:	70 63 6f 64 65 3a 25 30 32 58 48 2c 20 6c 65 6e     pcode:%02XH, len
    2f3f:	3a 25 33 64 2c 20 6c 69 73 74 65 6e 69 6e 67 3a     :%3d, listening:
    2f4f:	25 30 32 58 48 2c 20 74 61 6c 6b 69 6e 67 3a 25     %02XH, talking:%
    2f5f:	30 32 58 48 5d 0a 00                                02XH]..

00002f66 <__c.4282>:
    2f66:	5b 41 4d 49 47 4f 20 43 6c 65 61 72 5d 0a 00        [AMIGO Clear]..

00002f75 <__c.4269>:
    2f75:	5b 44 53 4a 20 25 30 32 58 48 5d 0a 00              [DSJ %02XH]..

00002f82 <__c.4267>:
    2f82:	5b 41 49 4d 47 4f 3a 20 44 53 4a 20 73 65 6e 64     [AIMGO: DSJ send
    2f92:	20 66 61 69 6c 65 64 5d 0a 00                        failed]..

00002f9c <__c.4260>:
    2f9c:	5b 41 4d 49 47 4f 20 57 72 69 74 65 20 64 69 73     [AMIGO Write dis
    2fac:	6b 20 77 72 69 74 65 20 65 72 72 6f 72 5d 0a 00     k write error]..

00002fbc <__c.4258>:
    2fbc:	5b 41 4d 49 47 4f 20 57 72 69 74 65 20 47 50 49     [AMIGO Write GPI
    2fcc:	42 20 72 65 61 64 20 65 72 72 6f 72 5d 0a 00        B read error]..

00002fdb <__c.4256>:
    2fdb:	41 4d 49 47 4f 73 2d 3e 73 74 61 74 65 3a 25 64     AMIGOs->state:%d
    2feb:	0a 00                                               ..

00002fed <__c.4249>:
    2fed:	5b 41 4d 49 47 4f 20 47 50 49 42 20 77 72 69 74     [AMIGO GPIB writ
    2ffd:	65 20 65 72 72 6f 72 5d 0a 00                       e error]..

00003007 <__c.4243>:
    3007:	41 4d 49 47 4f 73 2d 3e 73 74 61 74 65 3a 25 64     AMIGOs->state:%d
    3017:	0a 00                                               ..

00003019 <__c.4237>:
    3019:	5b 41 4d 49 47 4f 20 46 6f 72 6d 61 74 20 44 6f     [AMIGO Format Do
    3029:	6e 65 5d 0a 00                                      ne]..

0000302e <__c.4233>:
    302e:	5b 41 4d 49 47 4f 20 66 6f 72 6d 61 74 5d 0a 00     [AMIGO format]..

0000303e <__c.4192>:
    303e:	5b 41 4d 49 47 4f 20 25 73 2c 20 50 3a 25 30 38     [AMIGO %s, P:%08
    304e:	6c 78 48 2c 20 55 3a 25 64 20 43 3a 25 64 20 48     lxH, U:%d C:%d H
    305e:	3a 25 64 20 53 3a 25 64 5d 0a 00                    :%d S:%d]..

00003069 <__c.4222>:
    3069:	5b 41 4d 49 47 4f 20 76 65 72 69 66 79 20 50 3a     [AMIGO verify P:
    3079:	25 30 38 6c 58 48 2c 20 73 65 63 74 6f 72 73 3a     %08lXH, sectors:
    3089:	25 30 34 58 48 5d 0a 00                             %04XH]..

00003091 <__c.4199>:
    3091:	5b 41 4d 49 47 4f 20 25 73 20 70 6f 73 20 4f 56     [AMIGO %s pos OV
    30a1:	45 52 46 4c 4f 57 5d 0a 00                          ERFLOW]..

000030aa <__c.4185>:
    30aa:	5b 41 4d 49 47 4f 20 47 50 49 42 20 77 72 69 74     [AMIGO GPIB writ
    30ba:	65 20 65 72 72 6f 72 5d 0a 00                       e error]..

000030c4 <__c.4183>:
    30c4:	5b 41 4d 49 47 4f 20 73 65 6e 64 20 73 74 61 74     [AMIGO send stat
    30d4:	75 73 5d 0a 00                                      us]..

000030d9 <__c.4177>:
    30d9:	5b 41 4d 49 47 4f 20 47 50 49 42 20 77 72 69 74     [AMIGO GPIB writ
    30e9:	65 20 65 72 72 6f 72 5d 0a 00                       e error]..

000030f3 <__c.4175>:
    30f3:	5b 41 4d 49 47 4f 20 73 65 6e 64 20 6c 6f 67 69     [AMIGO send logi
    3103:	63 61 6c 20 61 64 64 72 65 73 73 5d 0a 00           cal address]..

00003111 <__c.4169>:
    3111:	5b 41 4d 49 47 4f 20 72 65 71 75 65 73 74 20 73     [AMIGO request s
    3121:	74 61 74 75 73 5d 0a 00                             tatus]..

00003129 <__c.4154>:
    3129:	5b 53 43 20 50 52 49 4e 54 45 52 20 54 61 6c 6b     [SC PRINTER Talk
    3139:	3a 20 25 30 32 58 48 5d 0a 00                       : %02XH]..

00003143 <__c.4152>:
    3143:	5b 53 43 20 50 52 49 4e 54 45 52 20 4c 69 73 74     [SC PRINTER List
    3153:	65 6e 3a 20 25 30 32 58 48 5d 0a 00                 en: %02XH]..

0000315f <__c.4147>:
    315f:	25 30 38 6c 64 0d 00                                %08ld..

00003166 <__c.4141>:
    3166:	77 72 69 74 65 20 66 61 69 6c 65 64 3a 20 77 61     write failed: wa
    3176:	6e 74 65 64 20 25 64 2c 20 67 6f 74 3a 25 64 0a     nted %d, got:%d.
	...

00003187 <__c.4135>:
    3187:	0a 44 4f 4e 45 3a 20 25 30 38 6c 64 0a 00           .DONE: %08ld..

00003195 <__c.4133>:
    3195:	45 52 52 4f 52 20 64 75 72 72 69 6e 67 20 77 72     ERROR durring wr
    31a5:	69 74 65 0a 00                                      ite..

000031aa <__c.4127>:
    31aa:	65 78 69 74 69 6e 67 2e 2e 2e 0a 00                 exiting.....

000031b6 <__c.4125>:
    31b6:	43 61 70 74 75 72 69 6e 67 20 70 6c 6f 74 20 74     Capturing plot t
    31c6:	6f 3a 25 73 0a 00                                   o:%s..

000031cc <__c.4123>:
    31cc:	2f 70 6c 6f 74 2d 25 30 32 64 25 73 25 30 34 64     /plot-%02d%s%04d
    31dc:	2d 25 30 32 64 25 30 32 64 25 30 32 64 2e 70 6c     -%02d%02d%02d.pl
    31ec:	74 00                                               t.

000031ee <__c.4578>:
    31ee:	09 46 6f 72 6d 61 74 74 69 6e 67 3a 20 77 72 6f     .Formatting: wro
    31fe:	74 65 20 25 6c 64 20 73 65 63 74 6f 72 73 0a 00     te %ld sectors..

0000320e <__c.4576>:
    320e:	6c 69 66 5f 63 72 65 61 74 65 5f 69 6d 61 67 65     lif_create_image
    321e:	3a 20 73 65 63 74 6f 72 73 20 69 73 20 30 0a 00     : sectors is 0..

0000322e <__c.4574>:
    322e:	6c 69 66 5f 63 72 65 61 74 65 5f 69 6d 61 67 65     lif_create_image
    323e:	3a 20 64 69 72 73 65 63 74 6f 72 73 20 69 73 20     : dirsectors is 
    324e:	30 0a 00                                            0..

00003251 <__c.4572>:
    3251:	6c 69 66 5f 63 72 65 61 74 65 5f 69 6d 61 67 65     lif_create_image
    3261:	3a 20 6c 69 66 6c 61 62 65 6c 20 69 73 20 65 6d     : liflabel is em
    3271:	70 74 79 0a 00                                      pty..

00003276 <__c.4570>:
    3276:	6c 69 66 5f 63 72 65 61 74 65 5f 69 6d 61 67 65     lif_create_image
    3286:	3a 20 6c 69 66 69 6d 61 67 65 6e 61 6d 65 20 69     : lifimagename i
    3296:	73 20 65 6d 70 74 79 0a 00                          s empty..

0000329f <__c.4557>:
    329f:	6c 69 66 5f 72 65 6e 61 6d 65 5f 76 6f 6c 75 6d     lif_rename_volum
    32af:	65 3a 5b 25 73 5d 20 65 72 72 6f 72 20 77 72 69     e:[%s] error wri
    32bf:	74 65 20 76 6f 6c 75 6d 65 20 68 65 61 64 65 72     te volume header
    32cf:	20 66 61 69 6c 65 64 0a 00                           failed..

000032d8 <__c.4555>:
    32d8:	6c 69 66 5f 72 65 6e 61 6d 65 5f 76 6f 6c 75 6d     lif_rename_volum
    32e8:	65 3a 5b 25 73 5d 20 65 72 72 6f 72 20 76 6f 6c     e:[%s] error vol
    32f8:	75 6d 65 20 76 61 6c 69 64 61 74 65 20 66 61 69     ume validate fai
    3308:	6c 65 64 0a 00                                      led..

0000330d <__c.4553>:
    330d:	6c 69 66 5f 72 65 6e 61 6d 65 5f 66 69 6c 65 3a     lif_rename_file:
    331d:	20 6e 65 77 20 6c 69 66 6e 61 6d 65 20 63 6f 6e      new lifname con
    332d:	74 61 69 6e 73 20 62 61 64 20 63 68 61 72 61 63     tains bad charac
    333d:	74 65 72 73 0a 00                                   ters..

00003343 <__c.4551>:
    3343:	6c 69 66 5f 72 65 6e 61 6d 65 5f 66 69 6c 65 3a     lif_rename_file:
    3353:	20 6e 65 77 20 56 6f 6c 75 6d 65 20 6e 61 6d 65      new Volume name
    3363:	20 65 6d 70 74 79 0a 00                              empty..

0000336b <__c.4549>:
    336b:	6c 69 66 5f 72 65 6e 61 6d 65 5f 66 69 6c 65 3a     lif_rename_file:
    337b:	20 6c 69 66 69 6d 61 67 65 6e 61 6d 65 20 69 73      lifimagename is
    338b:	20 65 6d 70 74 79 0a 00                              empty..

00003393 <__c.4541>:
    3393:	72 65 6e 61 6d 65 64 3a 20 25 31 30 73 20 74 6f     renamed: %10s to
    33a3:	20 25 31 30 73 0a 00                                 %10s..

000033aa <__c.4539>:
    33aa:	6c 69 66 5f 72 65 6e 61 6d 65 3a 5b 25 73 5d 20     lif_rename:[%s] 
    33ba:	6c 69 66 20 6e 61 6d 65 3a 5b 25 73 5d 20 6e 6f     lif name:[%s] no
    33ca:	74 20 66 6f 75 6e 64 0a 00                          t found..

000033d3 <__c.4537>:
    33d3:	6c 69 66 5f 72 65 6e 61 6d 65 5f 66 69 6c 65 3a     lif_rename_file:
    33e3:	20 6e 65 77 20 6c 69 66 6e 61 6d 65 20 63 6f 6e      new lifname con
    33f3:	74 61 69 6e 73 20 62 61 64 20 63 68 61 72 61 63     tains bad charac
    3403:	74 65 72 73 0a 00                                   ters..

00003409 <__c.4535>:
    3409:	6c 69 66 5f 72 65 6e 61 6d 65 5f 66 69 6c 65 3a     lif_rename_file:
    3419:	20 6e 65 77 20 6c 69 66 6e 61 6d 65 20 69 73 20      new lifname is 
    3429:	65 6d 70 74 79 0a 00                                empty..

00003430 <__c.4533>:
    3430:	6c 69 66 5f 72 65 6e 61 6d 65 5f 66 69 6c 65 3a     lif_rename_file:
    3440:	20 6f 6c 64 20 6c 69 66 6e 61 6d 65 20 69 73 20      old lifname is 
    3450:	65 6d 70 74 79 0a 00                                empty..

00003457 <__c.4531>:
    3457:	6c 69 66 5f 72 65 6e 61 6d 65 5f 66 69 6c 65 3a     lif_rename_file:
    3467:	20 6c 69 66 69 6d 61 67 65 6e 61 6d 65 20 69 73      lifimagename is
    3477:	20 65 6d 70 74 79 0a 00                              empty..

0000347f <__c.4522>:
    347f:	44 65 6c 65 74 65 64 3a 20 25 31 30 73 0a 00        Deleted: %10s..

0000348e <__c.4520>:
    348e:	4c 49 46 20 69 6d 61 67 65 3a 5b 25 73 5d 20 6c     LIF image:[%s] l
    349e:	69 66 20 6e 61 6d 65 3a 5b 25 73 5d 20 6e 6f 74     if name:[%s] not
    34ae:	20 66 6f 75 6e 64 0a 00                              found..

000034b6 <__c.4518>:
    34b6:	4c 49 46 20 69 6d 61 67 65 3a 5b 25 73 5d 2c 20     LIF image:[%s], 
    34c6:	4c 49 46 20 6e 61 6d 65 3a 5b 25 73 5d 0a 00        LIF name:[%s]..

000034d5 <__c.4516>:
    34d5:	6c 69 66 5f 64 65 6c 5f 66 69 6c 65 3a 20 6c 69     lif_del_file: li
    34e5:	66 6e 61 6d 65 20 69 73 20 65 6d 70 74 79 0a 00     fname is empty..

000034f5 <__c.4514>:
    34f5:	6c 69 66 5f 64 65 6c 5f 66 69 6c 65 3a 20 6c 69     lif_del_file: li
    3505:	66 69 6d 61 67 65 6e 61 6d 65 20 69 73 20 65 6d     fimagename is em
    3515:	70 74 79 0a 00                                      pty..

0000351a <__c.4506>:
    351a:	09 57 72 6f 74 65 3a 20 25 38 6c 64 0a 00           .Wrote: %8ld..

00003528 <__c.4501>:
    3528:	09 57 72 6f 74 65 3a 20 25 38 6c 64 0d 00           .Wrote: %8ld..

00003536 <__c.4499>:
    3536:	4c 49 46 20 69 6d 61 67 65 3a 5b 25 73 5d 2c 20     LIF image:[%s], 
    3546:	6e 6f 74 20 65 6e 6f 75 67 68 20 66 72 65 65 20     not enough free 
    3556:	73 70 61 63 65 20 66 6f 72 3a 5b 25 73 5d 0a 00     space for:[%s]..

00003566 <__c.4497>:
    3566:	46 69 6c 65 20 6e 6f 74 20 66 6f 75 6e 64 3a 25     File not found:%
    3576:	73 0a 00                                            s..

00003579 <__c.4495>:
    3579:	4c 49 46 20 69 6d 61 67 65 3a 5b 25 73 5d 2c 20     LIF image:[%s], 
    3589:	4c 49 46 20 6e 61 6d 65 3a 5b 25 73 5d 2c 20 75     LIF name:[%s], u
    3599:	73 65 72 20 66 69 6c 65 3a 5b 25 73 5d 0a 00        ser file:[%s]..

000035a8 <__c.4493>:
    35a8:	6c 69 66 5f 61 64 64 3a 20 75 73 65 72 66 69 6c     lif_add: userfil
    35b8:	65 20 69 73 20 65 6d 70 74 79 0a 00                 e is empty..

000035c4 <__c.4491>:
    35c4:	6c 69 66 5f 61 64 64 3a 20 6c 69 66 6e 61 6d 65     lif_add: lifname
    35d4:	20 69 73 20 65 6d 70 74 79 0a 00                     is empty..

000035df <__c.4489>:
    35df:	6c 69 66 5f 61 64 64 3a 20 6c 69 66 69 6d 61 67     lif_add: lifimag
    35ef:	65 6e 61 6d 65 20 69 73 20 65 6d 70 74 79 0a 00     ename is empty..

000035ff <__c.4472>:
    35ff:	09 57 72 6f 74 65 3a 20 25 38 6c 64 0a 00           .Wrote: %8ld..

0000360d <__c.4467>:
    360d:	09 57 72 6f 74 65 3a 20 25 38 6c 64 0d 00           .Wrote: %8ld..

0000361b <__c.4465>:
    361b:	46 69 6c 65 20 6e 6f 74 20 66 6f 75 6e 64 3a 25     File not found:%
    362b:	73 0a 00                                            s..

0000362e <__c.4463>:
    362e:	4c 49 46 20 69 6d 61 67 65 20 6e 6f 74 20 66 6f     LIF image not fo
    363e:	75 6e 64 3a 25 73 0a 00                             und:%s..

00003646 <__c.4446>:
    3646:	09 57 72 6f 74 65 3a 20 25 38 6c 64 0a 00           .Wrote: %8ld..

00003654 <__c.4443>:
    3654:	6c 69 66 5f 65 78 74 72 61 63 74 5f 65 30 31 30     lif_extract_e010
    3664:	5f 61 73 5f 61 73 63 69 69 3a 20 77 72 69 74 65     _as_ascii: write
    3674:	20 65 72 72 6f 72 0a 00                              error..

0000367c <__c.4435>:
    367c:	09 57 72 6f 74 65 3a 20 25 38 6c 64 0d 00           .Wrote: %8ld..

0000368a <__c.4433>:
    368a:	6c 69 66 5f 65 78 74 72 61 63 74 5f 65 30 31 30     lif_extract_e010
    369a:	5f 61 73 5f 61 73 63 69 69 3a 20 77 72 69 74 65     _as_ascii: write
    36aa:	20 65 72 72 6f 72 0a 00                              error..

000036b2 <__c.4430>:
    36b2:	6c 69 66 5f 65 78 74 72 61 63 74 5f 65 30 31 30     lif_extract_e010
    36c2:	5f 61 73 5f 61 73 63 69 69 3a 20 75 6e 65 78 70     _as_ascii: unexp
    36d2:	65 63 74 65 64 20 63 6f 6e 74 72 6f 6c 20 62 79     ected control by
    36e2:	74 65 3a 5b 25 30 32 58 48 5d 20 40 20 6f 66 66     te:[%02XH] @ off
    36f2:	73 65 74 3a 20 25 38 6c 78 2c 20 69 6e 64 3a 25     set: %8lx, ind:%
    3702:	30 32 58 48 0a 00                                   02XH..

00003708 <__c.4428>:
    3708:	6c 69 66 5f 65 78 74 72 61 63 74 5f 65 30 31 30     lif_extract_e010
    3718:	5f 61 73 5f 61 73 63 69 69 3a 20 73 74 72 69 6e     _as_ascii: strin
    3728:	67 20 74 6f 6f 20 62 69 67 20 73 69 7a 65 20 3d     g too big size =
    3738:	20 25 64 0a 00                                       %d..

0000373d <__c.4424>:
    373d:	45 78 74 72 61 63 74 69 6e 67 3a 20 25 73 0a 00     Extracting: %s..

0000374d <__c.4422>:
    374d:	46 69 6c 65 20 25 73 20 68 61 73 20 77 72 6f 6e     File %s has wron
    375d:	67 20 74 79 70 65 3a 5b 25 30 34 58 48 5d 20 65     g type:[%04XH] e
    376d:	78 70 65 63 74 65 64 20 30 78 45 30 31 30 2e 2e     xpected 0xE010..
    377d:	30 78 45 30 31 33 0a 00                             0xE013..

00003785 <__c.4420>:
    3785:	4c 49 46 20 46 69 6c 65 20 6e 6f 74 20 66 6f 75     LIF File not fou
    3795:	6e 64 3a 25 73 0a 00                                nd:%s..

0000379c <__c.4418>:
    379c:	4c 49 46 20 69 6d 61 67 65 20 6e 6f 74 20 66 6f     LIF image not fo
    37ac:	75 6e 64 3a 25 73 0a 00                             und:%s..

000037b4 <__c.4394>:
    37b4:	09 57 72 6f 74 65 3a 20 25 38 6c 64 0a 00           .Wrote: %8ld..

000037c2 <__c.4392>:
    37c2:	46 69 6c 65 20 53 65 63 74 6f 72 73 3a 20 20 20     File Sectors:   
    37d2:	20 20 25 34 6c 78 48 0a 00                            %4lxH..

000037db <__c.4390>:
    37db:	46 69 72 73 74 20 53 65 63 74 6f 72 3a 20 20 20     First Sector:   
    37eb:	20 20 25 34 6c 78 48 0a 00                            %4lxH..

000037f4 <__c.4388>:
    37f4:	49 6e 64 65 78 3a 20 20 20 20 20 20 20 20 20 20     Index:          
    3804:	20 20 25 34 64 0a 00                                  %4d..

0000380b <__c.4386>:
    380b:	4e 61 6d 65 3a 20 20 20 20 20 20 20 20 20 20 20     Name:           
    381b:	20 20 20 25 73 0a 00                                   %s..

00003822 <__c.4384>:
    3822:	4e 65 77 20 44 69 72 65 63 74 6f 72 79 20 49 6e     New Directory In
    3832:	66 6f 72 6d 61 74 69 6f 6e 20 41 46 54 45 52 20     formation AFTER 
    3842:	77 72 69 74 65 0a 00                                write..

00003849 <__c.4382>:
    3849:	4c 49 46 20 69 6d 61 67 65 3a 5b 25 73 5d 2c 20     LIF image:[%s], 
    3859:	6e 6f 74 20 65 6e 6f 75 67 68 20 66 72 65 65 20     not enough free 
    3869:	73 70 61 63 65 20 66 6f 72 3a 5b 25 73 5d 0a 00     space for:[%s]..

00003879 <__c.4380>:
    3879:	4c 49 46 20 69 6d 61 67 65 3a 5b 25 73 5d 2c 20     LIF image:[%s], 
    3889:	4c 49 46 20 6e 61 6d 65 3a 5b 25 73 5d 2c 20 75     LIF name:[%s], u
    3899:	73 65 72 20 66 69 6c 65 3a 5b 25 73 5d 0a 00        ser file:[%s]..

000038a8 <__c.4378>:
    38a8:	6c 69 66 5f 61 64 64 5f 61 73 63 69 69 5f 66 69     lif_add_ascii_fi
    38b8:	6c 65 5f 61 73 5f 65 30 31 30 3a 20 75 73 65 72     le_as_e010: user
    38c8:	66 69 6c 65 20 6e 6f 74 20 66 6f 75 6e 64 0a 00     file not found..

000038d8 <__c.4376>:
    38d8:	6c 69 66 5f 61 64 64 5f 61 73 63 69 69 5f 66 69     lif_add_ascii_fi
    38e8:	6c 65 5f 61 73 5f 65 30 31 30 3a 20 75 73 65 72     le_as_e010: user
    38f8:	66 69 6c 65 20 69 73 20 65 6d 70 74 79 0a 00        file is empty..

00003907 <__c.4374>:
    3907:	6c 69 66 5f 61 64 64 5f 61 73 63 69 69 5f 66 69     lif_add_ascii_fi
    3917:	6c 65 5f 61 73 5f 65 30 31 30 3a 20 6c 69 66 6e     le_as_e010: lifn
    3927:	61 6d 65 20 69 73 20 65 6d 70 74 79 0a 00           ame is empty..

00003935 <__c.4372>:
    3935:	6c 69 66 5f 61 64 64 5f 61 73 63 69 69 5f 66 69     lif_add_ascii_fi
    3945:	6c 65 5f 61 73 5f 65 30 31 30 3a 20 6c 69 66 69     le_as_e010: lifi
    3955:	6d 61 67 65 6e 61 6d 65 20 69 73 20 65 6d 70 74     magename is empt
    3965:	79 0a 00                                            y..

00003968 <__c.4358>:
    3968:	09 57 72 6f 74 65 3a 20 25 38 6c 64 0d 00           .Wrote: %8ld..

00003976 <__c.4356>:
    3976:	09 57 72 6f 74 65 3a 20 25 38 6c 64 0d 00           .Wrote: %8ld..

00003984 <__c.4351>:
    3984:	09 57 72 6f 74 65 3a 20 25 38 6c 64 0d 00           .Wrote: %8ld..

00003992 <__c.4334>:
    3992:	45 78 70 65 63 74 65 64 20 73 65 63 74 6f 72 20     Expected sector 
    39a2:	62 6f 75 6e 64 72 79 2c 20 6f 66 66 73 65 74 3a     boundry, offset:
    39b2:	25 64 0a 00                                         %d..

000039b6 <__c.4317>:
    39b6:	6c 69 66 5f 65 30 31 30 5f 64 61 70 5f 73 65 63     lif_e010_dap_sec
    39c6:	74 6f 72 3a 20 65 78 70 65 63 74 65 64 20 73 65     tor: expected se
    39d6:	63 74 6f 72 20 62 6f 75 6e 64 72 79 3a 20 6f 66     ctor boundry: of
    39e6:	66 73 65 74 3a 25 64 0a 00                          fset:%d..

000039ef <__c.4303>:
    39ef:	6c 69 66 5f 66 69 6e 64 5f 66 69 6c 65 3a 5b 25     lif_find_file:[%
    39ff:	73 5d 20 6c 69 66 6c 61 62 65 6c 20 74 6f 6f 20     s] liflabel too 
    3a0f:	62 69 67 0a 00                                      big..

00003a14 <__c.4301>:
    3a14:	6c 69 66 5f 66 69 6e 64 5f 66 69 6c 65 3a 5b 25     lif_find_file:[%
    3a24:	73 5d 20 69 6e 76 61 6c 69 64 20 63 68 61 72 61     s] invalid chara
    3a34:	63 74 65 72 73 0a 00                                cters..

00003a3b <__c.4294>:
    3a3b:	25 38 6c 64 20 46 72 65 65 20 73 65 63 74 6f 72     %8ld Free sector
    3a4b:	73 0a 00                                            s..

00003a4e <__c.4292>:
    3a4e:	25 38 6c 64 20 55 73 65 64 20 73 65 63 74 6f 72     %8ld Used sector
    3a5e:	73 0a 00                                            s..

00003a61 <__c.4290>:
    3a61:	25 38 6c 64 20 44 69 72 20 20 73 65 63 74 6f 72     %8ld Dir  sector
    3a71:	73 0a 00                                            s..

00003a74 <__c.4288>:
    3a74:	25 38 6c 64 20 44 69 72 20 20 73 74 61 72 74 0a     %8ld Dir  start.
	...

00003a85 <__c.4286>:
    3a85:	25 38 6c 64 20 50 75 72 67 65 64 0a 00              %8ld Purged..

00003a92 <__c.4284>:
    3a92:	25 38 6c 64 20 46 69 6c 65 73 0a 00                 %8ld Files..

00003a9e <__c.4282>:
    3a9e:	0a 00                                               ..

00003aa0 <__c.4279>:
    3aa0:	25 2d 31 30 73 20 20 25 30 34 58 68 20 20 20 20     %-10s  %04Xh    
    3ab0:	20 20 25 38 6c 58 68 20 20 20 25 39 6c 64 25 63       %8lXh   %9ld%c
    3ac0:	20 20 20 20 20 20 25 34 64 20 20 20 25 73 0a 00           %4d   %s..

00003ad0 <__c.4277>:
    3ad0:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    3ae0:	73 5d 20 77 61 72 6e 69 6e 67 20 46 69 6c 65 42     s] warning FileB
    3af0:	79 74 65 73 3a 25 6c 64 20 61 73 20 73 65 63 74     ytes:%ld as sect
    3b00:	6f 72 73 3a 25 6c 64 20 21 3d 20 46 69 6c 65 53     ors:%ld != FileS
    3b10:	65 63 74 6f 72 73 3a 25 6c 64 0a 00                 ectors:%ld..

00003b1c <__c.4274>:
    3b1c:	4e 41 4d 45 20 20 20 20 20 20 20 20 20 54 59 50     NAME         TYP
    3b2c:	45 20 20 20 53 54 41 52 54 20 53 45 43 54 4f 52     E   START SECTOR
    3b3c:	20 20 20 20 20 20 20 20 53 49 5a 45 20 20 20 20             SIZE    
    3b4c:	52 45 43 53 49 5a 45 20 20 20 44 41 54 45 0a 00     RECSIZE   DATE..

00003b5c <__c.4272>:
    3b5c:	56 6f 6c 75 6d 65 3a 5b 25 73 5d 20 44 61 74 65     Volume:[%s] Date
    3b6c:	3a 5b 25 73 5d 0a 00                                :[%s]..

00003b73 <__c.4262>:
    3b73:	6c 69 66 5f 6f 70 65 6e 5f 76 6f 6c 75 6d 65 3a     lif_open_volume:
    3b83:	5b 25 73 5d 20 65 72 72 6f 72 20 64 69 72 65 63     [%s] error direc
    3b93:	74 6f 72 79 20 63 68 65 63 6b 20 66 61 69 6c 65     tory check faile
    3ba3:	64 0a 00                                            d..

00003ba6 <__c.4260>:
    3ba6:	6c 69 66 5f 6f 70 65 6e 5f 76 6f 6c 75 6d 65 3a     lif_open_volume:
    3bb6:	5b 25 73 5d 20 65 72 72 6f 72 20 76 6f 6c 75 6d     [%s] error volum
    3bc6:	65 20 76 61 6c 69 64 61 74 65 20 66 61 69 6c 65     e validate faile
    3bd6:	64 0a 00                                            d..

00003bd9 <__c.4258>:
    3bd9:	6c 69 66 5f 6f 70 65 6e 5f 76 6f 6c 75 6d 65 3a     lif_open_volume:
    3be9:	5b 25 73 5d 20 65 72 72 6f 72 20 72 65 61 64 20     [%s] error read 
    3bf9:	76 6f 6c 75 6d 65 20 68 65 61 64 65 72 20 66 61     volume header fa
    3c09:	69 6c 65 64 0a 00                                   iled..

00003c0f <__c.4256>:
    3c0f:	6c 69 66 5f 6f 70 65 6e 5f 76 6f 6c 75 6d 65 3a     lif_open_volume:
    3c1f:	5b 25 73 5d 20 65 72 72 6f 72 20 76 6f 6c 75 6d     [%s] error volum
    3c2f:	65 20 68 65 61 64 65 72 20 61 72 65 61 20 74 6f     e header area to
    3c3f:	6f 20 73 6d 61 6c 6c 3a 5b 25 6c 64 5d 0a 00        o small:[%ld]..

00003c4e <__c.4243>:
    3c4e:	6c 69 66 5f 6e 65 77 64 69 72 3a 20 69 6e 64 65     lif_newdir: inde
    3c5e:	78 3a 5b 25 64 5d 20 61 64 64 69 6e 67 20 61 74     x:[%d] adding at
    3c6e:	3a 5b 25 6c 64 5d 74 6f 20 70 75 72 67 65 64 20     :[%ld]to purged 
    3c7e:	73 70 61 63 65 3a 5b 25 6c 64 5d 20 73 65 63 74     space:[%ld] sect
    3c8e:	6f 72 73 2c 20 66 72 65 65 3a 5b 25 6c 64 5d 0a     ors, free:[%ld].
	...

00003c9f <__c.4240>:
    3c9f:	6c 69 66 5f 6e 65 77 64 69 72 3a 20 6e 6f 74 20     lif_newdir: not 
    3caf:	65 6e 6f 75 67 68 20 66 72 65 65 20 73 70 61 63     enough free spac
    3cbf:	65 3a 5b 25 6c 64 5d 0a 00                          e:[%ld]..

00003cc8 <__c.4238>:
    3cc8:	6c 69 66 5f 6e 65 77 64 69 72 3a 20 6e 6f 74 20     lif_newdir: not 
    3cd8:	65 6e 6f 75 67 68 20 66 72 65 65 20 73 70 61 63     enough free spac
    3ce8:	65 3a 5b 25 6c 64 5d 20 66 6f 72 20 73 69 7a 65     e:[%ld] for size
    3cf8:	3a 5b 25 6c 64 5d 0a 00                             :[%ld]..

00003d00 <__c.4226>:
    3d00:	6c 69 66 5f 75 70 64 61 74 65 5f 66 72 65 65 3a     lif_update_free:
    3d10:	5b 25 73 5d 20 65 72 72 6f 72 20 70 72 65 76 69     [%s] error previ
    3d20:	6f 75 73 20 72 65 63 6f 72 64 20 66 69 6c 65 20     ous record file 
    3d30:	61 72 65 61 20 6f 76 65 72 6c 61 70 73 20 74 68     area overlaps th
    3d40:	69 73 20 6f 6e 65 3a 5b 25 73 5d 0a 00              is one:[%s]..

00003d4d <__c.4201>:
    3d4d:	6c 69 66 5f 63 68 65 63 6b 5f 64 69 72 3a 20 65     lif_check_dir: e
    3d5d:	72 72 6f 72 2c 20 69 6e 64 65 78 3a 25 64 0a 00     rror, index:%d..

00003d6d <__c.4192>:
    3d6d:	6c 69 66 5f 63 68 65 63 6b 64 69 72 69 6e 64 65     lif_checkdirinde
    3d7d:	78 3a 5b 25 73 5d 20 64 69 72 65 63 6f 72 79 20     x:[%s] direcory 
    3d8d:	69 6e 64 65 78 3a 5b 25 64 5d 20 6f 75 74 20 6f     index:[%d] out o
    3d9d:	66 20 62 6f 75 6e 64 73 0a 00                       f bounds..

00003da7 <__c.4173>:
    3da7:	09 57 72 6f 74 65 3a 20 25 6c 64 0a 00              .Wrote: %ld..

00003db4 <__c.4168>:
    3db4:	09 57 72 6f 74 65 3a 20 25 6c 64 0d 00              .Wrote: %ld..

00003dc1 <__c.4163>:
    3dc1:	09 57 72 6f 74 65 3a 20 25 6c 64 0d 00              .Wrote: %ld..

00003dce <__c.4155>:
    3dce:	09 57 72 6f 74 65 3a 20 25 6c 64 0d 00              .Wrote: %ld..

00003ddb <__c.4153>:
    3ddb:	43 72 65 61 74 69 6e 67 3a 25 73 2c 20 4c 61 62     Creating:%s, Lab
    3deb:	65 6c 3a 5b 25 73 5d 2c 20 44 69 72 65 63 74 6f     el:[%s], Directo
    3dfb:	72 79 20 53 74 61 72 74 20 25 6c 64 2c 20 44 69     ry Start %ld, Di
    3e0b:	72 65 63 74 6f 72 79 20 53 69 7a 65 3a 20 25 6c     rectory Size: %l
    3e1b:	64 2c 20 46 69 6c 65 20 53 65 63 74 6f 72 73 3a     d, File Sectors:
    3e2b:	25 6c 64 0a 00                                      %ld..

00003e30 <__c.4137>:
    3e30:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    3e40:	73 5d 20 77 61 72 6e 69 6e 67 20 73 65 63 74 6f     s] warning secto
    3e50:	72 20 73 69 7a 65 20 3a 25 6c 64 20 21 3d 20 25     r size :%ld != %
    3e60:	64 0a 00                                            d..

00003e63 <__c.4135>:
    3e63:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    3e73:	73 5d 20 69 6e 76 61 6c 69 64 20 46 69 6c 65 42     s] invalid FileB
    3e83:	79 74 65 73 20 3d 3d 20 30 0a 00                    ytes == 0..

00003e8e <__c.4133>:
    3e8e:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    3e9e:	73 5d 20 77 61 72 6e 69 6e 67 20 46 69 6c 65 42     s] warning FileB
    3eae:	79 74 65 73 3a 25 6c 64 20 61 73 20 73 65 63 74     ytes:%ld as sect
    3ebe:	6f 72 73 3a 25 6c 64 20 3c 20 46 69 6c 65 53 65     ors:%ld < FileSe
    3ece:	63 74 6f 72 73 3a 25 6c 64 0a 00                    ctors:%ld..

00003ed9 <__c.4131>:
    3ed9:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    3ee9:	73 5d 20 69 6e 76 61 6c 69 64 20 46 69 6c 65 42     s] invalid FileB
    3ef9:	79 74 65 73 3a 25 6c 64 20 61 73 20 73 65 63 74     ytes:%ld as sect
    3f09:	6f 72 73 3a 25 6c 64 20 3e 20 46 69 6c 65 53 65     ors:%ld > FileSe
    3f19:	63 74 6f 72 73 3a 25 6c 64 0a 00                    ctors:%ld..

00003f24 <__c.4129>:
    3f24:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    3f34:	73 5d 20 69 6e 76 61 6c 69 64 20 56 6f 6c 75 6d     s] invalid Volum
    3f44:	65 20 4e 75 6d 62 65 72 3a 25 58 68 0a 00           e Number:%Xh..

00003f52 <__c.4127>:
    3f52:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    3f62:	73 5d 20 69 6e 76 61 6c 69 64 20 65 6e 64 20 73     s] invalid end s
    3f72:	65 63 74 6f 72 3a 25 6c 58 68 20 3e 20 74 6f 74     ector:%lXh > tot
    3f82:	61 6c 20 73 65 63 74 6f 72 73 3a 25 6c 58 68 0a     al sectors:%lXh.
	...

00003f93 <__c.4125>:
    3f93:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    3fa3:	73 5d 20 69 6e 76 61 6c 69 64 20 73 74 61 72 74     s] invalid start
    3fb3:	20 73 65 63 74 6f 72 3a 25 6c 58 68 20 3c 20 66      sector:%lXh < f
    3fc3:	69 65 20 61 72 65 61 20 73 74 61 72 74 3a 25 6c     ie area start:%l
    3fd3:	58 68 0a 00                                         Xh..

00003fd7 <__c.4123>:
    3fd7:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    3fe7:	73 5d 20 69 6e 76 61 6c 69 64 20 4e 61 6d 65 0a     s] invalid Name.
	...

00003ff8 <__c.4117>:
    3ff8:	4c 49 46 20 56 6f 6c 75 6d 65 20 69 6e 76 61 6c     LIF Volume inval
    4008:	69 64 20 66 69 6c 65 20 73 74 61 72 74 20 3e 20     id file start > 
    4018:	69 6d 61 67 65 20 73 69 7a 65 0a 00                 image size..

00004024 <__c.4115>:
    4024:	4c 49 46 20 56 6f 6c 75 6d 65 20 69 6e 76 61 6c     LIF Volume inval
    4034:	69 64 20 44 69 72 65 63 74 6f 72 79 20 53 65 63     id Directory Sec
    4044:	74 6f 72 20 43 6f 75 6e 74 20 3c 20 31 0a 00        tor Count < 1..

00004053 <__c.4113>:
    4053:	4c 49 46 20 56 6f 6c 75 6d 65 20 69 6e 76 61 6c     LIF Volume inval
    4063:	69 64 20 73 74 61 72 74 20 73 65 63 74 6f 72 3a     id start sector:
    4073:	25 6c 64 0a 00                                      %ld..

00004078 <__c.4111>:
    4078:	4c 49 46 20 56 6f 6c 75 6d 65 20 69 6e 76 61 6c     LIF Volume inval
    4088:	69 64 20 62 79 74 65 73 20 61 74 20 6f 66 66 73     id bytes at offs
    4098:	65 74 20 32 32 26 32 33 20 73 68 6f 75 6c 64 20     et 22&23 should 
    40a8:	62 65 20 7a 65 72 6f 0a 00                          be zero..

000040b1 <__c.4109>:
    40b1:	4c 49 46 20 56 6f 6c 75 6d 65 20 69 6e 76 61 6c     LIF Volume inval
    40c1:	69 64 20 62 79 74 65 73 20 61 74 20 6f 66 66 73     id bytes at offs
    40d1:	65 74 20 31 34 26 31 35 20 73 68 6f 75 6c 64 20     et 14&15 should 
    40e1:	62 65 20 7a 65 72 6f 0a 00                          be zero..

000040ea <__c.4107>:
    40ea:	4c 49 46 20 56 65 72 73 69 6f 6e 3a 20 25 30 34     LIF Version: %04
    40fa:	58 48 20 3e 20 31 0a 00                             XH > 1..

00004102 <__c.4105>:
    4102:	4c 49 46 20 56 6f 6c 75 6d 65 20 69 6e 76 61 6c     LIF Volume inval
    4112:	69 64 20 53 79 73 74 65 6d 33 30 30 30 20 49 44     id System3000 ID
    4122:	20 28 25 30 34 58 48 29 20 65 78 70 65 63 74 65      (%04XH) expecte
    4132:	64 20 31 30 30 30 48 0a 00                          d 1000H..

0000413b <__c.4103>:
    413b:	4c 49 46 20 56 6f 6c 75 6d 65 20 69 6e 76 61 6c     LIF Volume inval
    414b:	69 64 20 56 6f 6c 75 6d 65 20 4e 61 6d 65 00        id Volume Name.

0000415a <__c.4096>:
    415a:	0a 00                                               ..

0000415c <__c.4094>:
    415c:	44 49 52 20 46 69 6c 65 20 44 61 74 65 3a 20 20     DIR File Date:  
    416c:	20 20 20 20 20 20 25 73 0a 00                             %s..

00004176 <__c.4092>:
    4176:	44 49 52 20 46 69 6c 65 20 73 65 63 74 6f 72 20     DIR File sector 
    4186:	73 69 7a 65 3a 20 25 38 58 68 0a 00                 size: %8Xh..

00004192 <__c.4090>:
    4192:	44 49 52 20 46 69 6c 65 20 62 79 74 65 73 3a 20     DIR File bytes: 
    41a2:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

000041af <__c.4088>:
    41af:	44 49 52 20 46 69 6c 65 20 73 65 63 74 6f 72 73     DIR File sectors
    41bf:	3a 20 20 20 20 20 25 38 6c 58 68 0a 00              :     %8lXh..

000041cc <__c.4086>:
    41cc:	44 49 52 20 46 69 6c 65 20 73 74 61 72 74 3a 20     DIR File start: 
    41dc:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

000041e9 <__c.4084>:
    41e9:	44 49 52 20 46 69 6c 65 20 56 6f 6c 75 6d 65 23     DIR File Volume#
    41f9:	3a 20 20 20 20 20 25 38 58 68 0a 00                 :     %8Xh..

00004205 <__c.4082>:
    4205:	44 49 52 20 46 69 6c 65 20 54 79 70 65 3a 20 20     DIR File Type:  
    4215:	20 20 20 20 20 20 25 38 58 68 0a 00                       %8Xh..

00004221 <__c.4080>:
    4221:	44 49 52 20 46 69 6c 65 20 4e 61 6d 65 3a 20 20     DIR File Name:  
    4231:	20 20 20 20 20 20 25 73 0a 00                             %s..

0000423b <__c.4078>:
    423b:	56 4f 4c 20 44 61 74 65 3a 20 20 20 20 20 20 20     VOL Date:       
    424b:	20 20 20 20 20 20 25 73 0a 00                             %s..

00004255 <__c.4076>:
    4255:	56 4f 4c 20 4c 49 46 56 65 72 73 69 6f 6e 3a 20     VOL LIFVersion: 
    4265:	20 20 20 20 20 20 25 38 58 68 0a 00                       %8Xh..

00004271 <__c.4074>:
    4271:	56 4f 4c 20 33 30 30 30 4c 49 46 69 64 3a 20 20     VOL 3000LIFid:  
    4281:	20 20 20 20 20 20 25 38 58 68 0a 00                       %8Xh..

0000428d <__c.4072>:
    428d:	56 4f 4c 20 44 69 72 20 73 65 63 74 6f 72 73 3a     VOL Dir sectors:
    429d:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

000042aa <__c.4070>:
    42aa:	56 4f 4c 20 44 69 72 20 73 74 61 72 74 3a 20 20     VOL Dir start:  
    42ba:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

000042c7 <__c.4068>:
    42c7:	56 4f 4c 20 4c 49 46 69 64 3a 20 20 20 20 20 20     VOL LIFid:      
    42d7:	20 20 20 20 20 20 25 38 58 68 0a 00                       %8Xh..

000042e3 <__c.4066>:
    42e3:	56 4f 4c 20 4c 61 62 65 6c 3a 20 20 20 20 20 20     VOL Label:      
    42f3:	20 20 20 20 20 20 25 73 0a 00                             %s..

000042fd <__c.4064>:
    42fd:	4c 49 46 20 70 75 72 67 65 64 3a 20 20 20 20 20     LIF purged:     
    430d:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

0000431a <__c.4062>:
    431a:	4c 49 46 20 66 69 6c 65 73 3a 20 20 20 20 20 20     LIF files:      
    432a:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

00004337 <__c.4060>:
    4337:	4c 49 46 20 66 72 65 65 3a 20 20 20 20 20 20 20     LIF free:       
    4347:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

00004354 <__c.4058>:
    4354:	4c 49 46 20 75 73 65 64 3a 20 20 20 20 20 20 20     LIF used:       
    4364:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

00004371 <__c.4056>:
    4371:	4c 49 46 20 66 69 6c 65 20 73 65 63 74 6f 72 73     LIF file sectors
    4381:	3a 20 20 20 20 20 25 38 6c 58 68 0a 00              :     %8lXh..

0000438e <__c.4054>:
    438e:	4c 49 46 20 66 69 6c 65 73 74 61 72 74 3a 20 20     LIF filestart:  
    439e:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

000043ab <__c.4052>:
    43ab:	4c 49 46 20 62 79 74 65 73 3a 20 20 20 20 20 20     LIF bytes:      
    43bb:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

000043c8 <__c.4050>:
    43c8:	4c 49 46 20 73 65 63 74 6f 72 73 3a 20 20 20 20     LIF sectors:    
    43d8:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

000043e5 <__c.4048>:
    43e5:	4c 49 46 20 6e 61 6d 65 3a 20 20 20 20 20 20 20     LIF name:       
    43f5:	20 20 20 20 20 20 25 73 0a 00                             %s..

000043ff <__c.4046>:
    43ff:	0a 25 73 0a 00                                      .%s..

00004404 <__c.3923>:
    4404:	6c 69 66 5f 77 72 69 74 65 3a 20 57 72 69 74 65     lif_write: Write
    4414:	3a 5b 25 73 5d 20 6f 66 66 73 65 74 3a 5b 25 6c     :[%s] offset:[%l
    4424:	64 5d 20 77 72 69 74 65 3a 5b 25 64 5d 20 65 78     d] write:[%d] ex
    4434:	70 65 63 74 65 64 3a 5b 25 64 5d 0a 00              pected:[%d]..

00004441 <__c.3914>:
    4441:	6c 69 66 5f 72 65 61 64 3a 20 72 65 61 64 3a 5b     lif_read: read:[
    4451:	25 73 5d 20 6f 66 66 73 65 74 3a 5b 25 6c 64 5d     %s] offset:[%ld]
    4461:	20 77 72 69 74 65 3a 5b 25 6c 64 5d 20 65 78 70      write:[%ld] exp
    4471:	65 63 74 65 64 3a 5b 25 64 5d 0a 00                 ected:[%d]..

0000447d <__c.3905>:
    447d:	6c 69 66 5f 72 65 61 64 5f 6d 73 67 3a 20 25 73     lif_read_msg: %s
    448d:	20 53 65 65 6b 20 65 72 72 6f 72 20 25 6c 64 0a      Seek error %ld.
	...

0000449e <__c.3898>:
    449e:	6c 69 66 5f 73 74 61 74 3a 20 43 61 6e 27 74 20     lif_stat: Can't 
    44ae:	73 74 61 74 3a 25 73 0a 00                          stat:%s..

000044b7 <__c.3892>:
    44b7:	6c 69 66 5f 6f 70 65 6e 3a 20 43 61 6e 27 74 20     lif_open: Can't 
    44c7:	6f 70 65 6e 3a 5b 25 73 5d 20 6d 6f 64 65 3a 5b     open:[%s] mode:[
    44d7:	25 73 5d 0a 00                                      %s]..

000044dc <__c.3880>:
    44dc:	6c 69 66 5f 66 72 65 65 3a 20 4e 55 4c 4c 20 70     lif_free: NULL p
    44ec:	6f 69 6e 74 65 72 0a 00                             ointer..

000044f4 <__c.3875>:
    44f4:	6c 69 66 5f 63 61 6c 6c 6f 63 3a 5b 25 6c 64 5d     lif_calloc:[%ld]
    4504:	20 6e 6f 74 20 65 6e 6f 75 67 68 20 66 72 65 65      not enough free
    4514:	20 6d 65 6d 6f 72 79 0a 00                           memory..

0000451d <__c.3869>:
    451d:	74 64 30 32 6c 69 66 20 73 75 70 70 6f 72 74 20     td02lif support 
    452d:	6e 6f 74 20 65 6e 61 62 6c 65 64 0a 00              not enabled..

0000453a <__c.3867>:
    453a:	44 69 73 6b 3a 20 25 73 20 6e 6f 74 20 66 6f 75     Disk: %s not fou
    454a:	6e 64 20 69 6e 20 68 70 64 69 72 2e 69 6e 69 0a     nd in hpdir.ini.
	...

0000455b <__c.3854>:
    455b:	6c 69 66 20 61 64 64 20 6c 69 66 69 6d 61 67 65     lif add lifimage
    456b:	20 6c 69 66 6e 61 6d 65 20 66 72 6f 6d 5f 61 73      lifname from_as
    457b:	63 69 69 5f 66 69 6c 65 0a 6c 69 66 20 61 64 64     cii_file.lif add
    458b:	62 69 6e 20 6c 69 66 69 6d 61 67 65 20 6c 69 66     bin lifimage lif
    459b:	6e 61 6d 65 20 66 72 6f 6d 5f 6c 69 66 5f 66 69     name from_lif_fi
    45ab:	6c 65 0a 6c 69 66 20 63 72 65 61 74 65 20 6c 69     le.lif create li
    45bb:	66 69 6d 61 67 65 20 6c 61 62 65 6c 20 64 69 72     fimage label dir
    45cb:	65 63 74 6f 72 79 5f 73 65 63 74 6f 72 73 20 73     ectory_sectors s
    45db:	65 63 74 6f 72 73 0a 6c 69 66 20 63 72 65 61 74     ectors.lif creat
    45eb:	65 64 69 73 6b 20 6c 69 66 69 6d 61 67 65 20 6c     edisk lifimage l
    45fb:	61 62 65 6c 20 6d 6f 64 65 6c 0a 6c 69 66 20 64     abel model.lif d
    460b:	65 6c 20 6c 69 66 69 6d 61 67 65 20 6e 61 6d 65     el lifimage name
    461b:	0a 6c 69 66 20 64 69 72 20 6c 69 66 69 6d 61 67     .lif dir lifimag
    462b:	65 0a 6c 69 66 20 65 78 74 72 61 63 74 20 6c 69     e.lif extract li
    463b:	66 69 6d 61 67 65 20 6c 69 66 6e 61 6d 65 20 74     fimage lifname t
    464b:	6f 5f 61 73 63 69 69 5f 66 69 6c 65 0a 6c 69 66     o_ascii_file.lif
    465b:	20 65 78 74 72 61 63 74 62 69 6e 20 6c 69 66 69      extractbin lifi
    466b:	6d 61 67 65 20 6c 69 66 6e 61 6d 65 20 74 6f 5f     mage lifname to_
    467b:	6c 69 66 5f 66 69 6c 65 0a 20 20 20 20 65 78 74     lif_file.    ext
    468b:	72 61 63 74 73 20 61 20 66 69 6c 65 20 69 6e 74     racts a file int
    469b:	6f 20 61 20 73 69 67 6c 65 20 66 69 6c 65 20 4c     o a sigle file L
    46ab:	49 46 20 69 6d 61 67 65 0a 6c 69 66 20 72 65 6e     IF image.lif ren
    46bb:	61 6d 65 20 6c 69 66 69 6d 61 67 65 20 6f 6c 64     ame lifimage old
    46cb:	6c 69 66 6e 61 6d 65 20 6e 65 77 6c 69 66 6e 61     lifname newlifna
    46db:	6d 65 0a 6c 69 66 20 72 65 6e 61 6d 65 76 6f 6c     me.lif renamevol
    46eb:	20 6c 69 66 69 6d 61 67 65 20 6e 61 6d 65 0a 55      lifimage name.U
    46fb:	73 65 20 2d 64 20 20 61 66 74 65 72 20 27 6c 69     se -d  after 'li
    470b:	66 27 20 6b 65 79 77 6f 72 64 20 74 6f 20 65 6e     f' keyword to en
    471b:	61 62 6c 65 20 4c 49 46 20 66 69 6c 65 73 79 73     able LIF filesys
    472b:	74 65 6d 20 64 65 62 75 67 67 69 6e 67 0a 0a 00     tem debugging...

0000473b <__c.3852>:
    473b:	6c 69 66 20 20 20 20 20 20 20 68 65 6c 70 0a 00     lif       help..

0000474b <__c.4658>:
    474b:	53 74 61 72 74 69 6e 67 20 47 50 49 42 20 54 41     Starting GPIB TA
    475b:	53 4b 0a 00                                         SK..

0000475f <__c.4656>:
    475f:	49 32 43 20 4c 43 44 20 69 73 20 4e 4f 54 20 61     I2C LCD is NOT a
    476f:	74 74 61 63 68 65 64 21 0a 00                       ttached!..

00004779 <__c.4654>:
    4779:	25 2d 31 36 73 00                                   %-16s.

0000477f <__c.4652>:
    477f:	64 65 62 75 67 6c 65 76 65 6c 20 20 20 3d 20 25     debuglevel   = %
    478f:	30 34 78 48 0a 00                                   04xH..

00004795 <__c.4650>:
    4795:	47 50 49 42 20 53 74 61 74 65 20 69 6e 69 74 20     GPIB State init 
    47a5:	64 6f 6e 65 0a 00                                   done..

000047ab <__c.4648>:
    47ab:	47 50 49 42 20 46 69 6c 65 20 69 6e 69 74 20 64     GPIB File init d
    47bb:	6f 6e 65 0a 00                                      one..

000047c0 <__c.4646>:
    47c0:	47 50 49 42 20 54 69 6d 65 72 20 69 6e 69 74 69     GPIB Timer initi
    47d0:	61 6c 69 7a 65 64 0a 00                             alized..

000047d8 <__c.4644>:
    47d8:	47 50 49 42 20 54 69 6d 65 72 20 53 65 74 75 70     GPIB Timer Setup
    47e8:	0a 00                                               ..

000047ea <__c.4642>:
    47ea:	50 72 69 6e 74 65 72 20 69 6e 69 74 69 61 6c 69     Printer initiali
    47fa:	7a 65 64 0a 00                                      zed..

000047ff <__c.4640>:
    47ff:	47 50 49 42 20 62 75 73 20 69 6e 69 74 69 61 6c     GPIB bus initial
    480f:	69 7a 65 64 0a 00                                   ized..

00004815 <__c.4638>:
    4815:	4d 4d 43 20 69 6e 69 74 69 61 6c 69 7a 65 64 0a     MMC initialized.
	...

00004826 <__c.4636>:
    4826:	4d 4d 43 20 69 6e 69 74 69 61 6c 69 7a 69 6e 67     MMC initializing
    4836:	20 73 74 61 72 74 0a 00                              start..

0000483e <__c.4634>:
    483e:	53 79 73 74 65 6d 20 54 61 73 6b 20 49 6e 74 65     System Task Inte
    484e:	72 72 75 70 74 20 52 61 74 65 3a 20 25 6c 64 20     rrupt Rate: %ld 
    485e:	4e 61 6e 6f 20 53 65 63 6f 6e 64 73 0a 00           Nano Seconds..

0000486c <__c.4632>:
    486c:	43 6c 6f 63 6b 20 63 6c 65 61 72 65 64 0a 00        Clock cleared..

0000487b <__c.4630>:
    487b:	49 6e 69 74 69 61 6c 69 7a 69 6e 67 20 52 54 43     Initializing RTC
    488b:	0a 00                                               ..

0000488d <__c.4628>:
    488d:	49 6e 69 74 69 61 6c 69 7a 69 6e 67 20 49 32 43     Initializing I2C
    489d:	20 62 75 73 0a 00                                    bus..

000048a3 <__c.4626>:
    48a3:	49 6e 69 74 69 61 6c 69 7a 69 6e 67 20 53 50 49     Initializing SPI
    48b3:	20 62 75 73 0a 00                                    bus..

000048b9 <__c.4624>:
    48b9:	20 20 20 4c 61 73 74 20 75 70 64 61 74 65 64 20        Last updated 
    48c9:	66 69 6c 65 3a 20 25 73 0a 00                       file: %s..

000048d3 <__c.4622>:
    48d3:	20 20 20 47 49 54 20 6c 61 73 74 20 70 75 73 68        GIT last push
    48e3:	65 64 3a 20 20 20 25 73 0a 00                       ed:   %s..

000048ed <__c.4620>:
    48ed:	2d 3e 20 68 74 74 70 73 3a 2f 2f 67 69 74 68 75     -> https://githu
    48fd:	62 2e 63 6f 6d 2f 6d 61 67 6f 72 65 2f 68 70 38     b.com/magore/hp8
    490d:	35 64 69 73 6b 0a 00                                5disk..

00004914 <__c.4618>:
    4914:	20 47 4e 55 20 76 65 72 73 69 6f 6e 20 33 0a 00      GNU version 3..

00004924 <__c.4616>:
    4924:	20 28 43 29 20 32 30 31 34 2d 32 30 32 30 20 62      (C) 2014-2020 b
    4934:	79 20 4d 69 6b 65 20 47 6f 72 65 0a 00              y Mike Gore..

00004941 <__c.4614>:
    4941:	48 50 38 35 20 44 69 73 6b 20 61 6e 64 20 44 65     HP85 Disk and De
    4951:	76 69 63 65 20 45 6d 75 6c 61 74 6f 72 0a 00        vice Emulator..

00004960 <__c.4612>:
    4960:	52 65 71 75 65 73 74 65 64 20 42 61 75 64 20 52     Requested Baud R
    4970:	61 74 65 3a 20 25 6c 64 2c 20 41 63 74 75 61 6c     ate: %ld, Actual
    4980:	3a 20 25 6c 64 0a 00                                : %ld..

00004987 <__c.4610>:
    4987:	43 50 55 20 43 6c 6f 63 6b 20 3d 20 25 6c 75 0a     CPU Clock = %lu.
	...

00004998 <__c.4608>:
    4998:	53 74 61 72 74 0a 00                                Start..

0000499f <__c.4600>:
    499f:	25 2d 31 36 73 00                                   %-16s.

000049a5 <__c.4598>:
    49a5:	53 53 38 30 3d 25 64 20 41 4d 49 47 4f 3d 25 64     SS80=%d AMIGO=%d
	...

000049b6 <__c.4590>:
    49b6:	20 20 20 20 20 20 20 5b 25 73 5d 0a 00                     [%s]..

000049c3 <__c.4588>:
    49c3:	20 20 20 20 41 72 67 75 6d 65 6e 74 20 63 6f 75         Argument cou
    49d3:	6e 74 20 3d 20 25 64 0a 00                          nt = %d..

000049dc <__c.4586>:
    49dc:	49 6e 76 61 6c 69 64 20 43 6f 6d 6d 61 6e 64 0a     Invalid Command.
	...

000049ed <__c.4584>:
    49ed:	43 6f 6d 6d 61 6e 64 20 46 41 49 4c 45 44 0a 00     Command FAILED..

000049fd <__c.4582>:
    49fd:	4f 4b 0a 00                                         OK..

00004a01 <__c.4580>:
    4a01:	49 6e 70 75 74 20 64 65 62 75 67 67 69 6e 67 3a     Input debugging:
    4a11:	20 25 73 0a 00                                       %s..

00004a16 <__c.4569>:
    4a16:	20 20 20 5b 25 73 5d 0a 00                             [%s]..

00004a1f <__c.4567>:
    4a1f:	41 72 67 75 6d 65 6e 74 20 63 6f 75 6e 74 20 3d     Argument count =
    4a2f:	20 25 64 0a 00                                       %d..

00004a34 <__c.4565>:
    4a34:	0a 3e 00                                            .>.

00004a37 <__c.4552>:
    4a37:	0a 00                                               ..

00004a39 <__c.4550>:
    4a39:	69 6e 70 75 74 20 20 20 2d 20 54 6f 67 67 6c 65     input   - Toggle
    4a49:	20 69 6e 70 75 74 20 70 61 72 73 69 6e 67 20 64      input parsing d
    4a59:	65 62 75 67 67 69 6e 67 0a 6d 65 6d 20 20 20 20     ebugging.mem    
    4a69:	20 2d 20 44 69 73 70 6c 61 79 20 66 72 65 65 20      - Display free 
    4a79:	6d 65 6d 6f 72 79 0a 00                             memory..

00004a81 <__c.4548>:
    4a81:	74 69 6d 65 20 20 20 20 2d 20 64 69 73 70 6c 61     time    - displa
    4a91:	79 20 63 75 72 72 65 6e 74 20 64 61 74 65 20 61     y current date a
    4aa1:	6e 64 20 74 69 6d 65 0a 0a 00                       nd time...

00004aab <__c.4546>:
    4aab:	72 65 73 65 74 20 20 20 2d 20 72 65 73 65 74 20     reset   - reset 
    4abb:	65 6d 75 6c 61 74 6f 72 0a 73 65 74 64 61 74 65     emulator.setdate
    4acb:	20 2d 20 73 65 74 20 64 61 74 65 20 2d 20 70 72      - set date - pr
    4adb:	6f 6d 70 74 73 20 66 6f 72 20 64 61 74 65 0a 00     ompts for date..

00004aeb <__c.4544>:
    4aeb:	64 69 72 20 20 20 20 20 20 20 44 69 72 65 63 74     dir       Direct
    4afb:	6f 72 79 20 6c 69 73 74 20 4d 53 44 4f 53 20 66     ory list MSDOS f
    4b0b:	6f 72 6d 61 74 0a 00                                ormat..

00004b12 <__c.4542>:
    4b12:	62 61 63 6b 6c 69 67 68 74 20 30 78 52 52 47 47     backlight 0xRRGG
    4b22:	42 42 20 2d 20 66 6f 72 6d 61 74 20 30 78 5b 30     BB - format 0x[0
    4b32:	30 2d 46 46 5d 5b 30 30 2d 46 46 5d 5b 30 30 2d     0-FF][00-FF][00-
    4b42:	46 46 5d 0a 00                                      FF]..

00004b47 <__c.4540>:
    4b47:	68 65 6c 70 20 20 20 20 20 2d 20 64 69 73 70 6c     help     - displ
    4b57:	61 79 73 20 74 68 69 73 20 68 65 6c 70 20 6d 65     ays this help me
    4b67:	6e 75 0a 00                                         nu..

00004b6b <__c.4533>:
    4b6b:	25 2d 31 36 73 00                                   %-16s.

00004b71 <__c.4531>:
    4b71:	25 2d 31 36 73 00                                   %-16s.

00004b77 <__c.4524>:
    4b77:	49 32 43 20 4c 43 44 20 69 73 20 4e 4f 54 20 61     I2C LCD is NOT a
    4b87:	74 74 61 63 68 65 64 21 0a 00                       ttached!..

00004b91 <__c.4522>:
    4b91:	25 2d 31 36 73 00                                   %-16s.

00004b97 <__c.4520>:
    4b97:	25 2d 31 36 73 00                                   %-16s.

00004b9d <__c.4518>:
    4b9d:	6c 63 64 5f 74 61 73 6b 20 69 6e 69 74 20 66 61     lcd_task init fa
    4bad:	69 6c 65 64 0a 00                                   iled..

00004bb3 <__c.4516>:
    4bb3:	49 32 43 20 4c 43 44 20 69 6e 69 74 69 61 6c 69     I2C LCD initiali
    4bc3:	7a 61 74 69 6f 6e 20 73 74 61 72 74 0a 00           zation start..

00004bd1 <__c.4510>:
    4bd1:	49 32 43 20 4c 43 44 20 69 73 20 4e 4f 54 20 61     I2C LCD is NOT a
    4be1:	74 74 61 63 68 65 64 21 0a 00                       ttached!..

00004beb <__c.4504>:
    4beb:	25 73 20 25 32 64 20 25 30 32 64 3a 25 30 32 64     %s %2d %02d:%02d
    4bfb:	3a 25 30 32 64 00                                   :%02d.

00004c01 <__c.4490>:
    4c01:	0a 00                                               ..

00004c03 <__c.4488>:
    4c03:	20 20 20 4c 61 73 74 20 75 70 64 61 74 65 64 20        Last updated 
    4c13:	66 69 6c 65 3a 20 25 73 0a 00                       file: %s..

00004c1d <__c.4486>:
    4c1d:	20 20 20 47 49 54 20 6c 61 73 74 20 70 75 73 68        GIT last push
    4c2d:	65 64 3a 20 20 20 25 73 0a 00                       ed:   %s..

00004c37 <__c.4484>:
    4c37:	2d 3e 20 68 74 74 70 73 3a 2f 2f 67 69 74 68 75     -> https://githu
    4c47:	62 2e 63 6f 6d 2f 6d 61 67 6f 72 65 2f 68 70 38     b.com/magore/hp8
    4c57:	35 64 69 73 6b 0a 00                                5disk..

00004c5e <__c.4482>:
    4c5e:	20 47 4e 55 20 76 65 72 73 69 6f 6e 20 33 0a 00      GNU version 3..

00004c6e <__c.4480>:
    4c6e:	20 28 63 29 20 32 30 31 34 2d 32 30 32 30 20 62      (c) 2014-2020 b
    4c7e:	79 20 4d 69 6b 65 20 47 6f 72 65 0a 00              y Mike Gore..

00004c8b <__c.4478>:
    4c8b:	48 50 38 35 20 44 69 73 6b 20 61 6e 64 20 44 65     HP85 Disk and De
    4c9b:	76 69 63 65 20 45 6d 75 6c 61 74 6f 72 20 77 69     vice Emulator wi
    4cab:	74 68 20 62 75 69 6c 74 20 69 6e 20 4c 49 46 20     th built in LIF 
    4cbb:	75 74 69 6c 69 74 69 65 73 0a 00                    utilities..

00004cc6 <__ctors_end>:
    4cc6:	11 24       	eor	r1, r1
    4cc8:	1f be       	out	0x3f, r1	; 63
    4cca:	cf ef       	ldi	r28, 0xFF	; 255
    4ccc:	d0 e4       	ldi	r29, 0x40	; 64
    4cce:	de bf       	out	0x3e, r29	; 62
    4cd0:	cd bf       	out	0x3d, r28	; 61

00004cd2 <__do_copy_data>:
    4cd2:	17 e1       	ldi	r17, 0x17	; 23
    4cd4:	a0 e0       	ldi	r26, 0x00	; 0
    4cd6:	b1 e0       	ldi	r27, 0x01	; 1
    4cd8:	ea e4       	ldi	r30, 0x4A	; 74
    4cda:	f9 ed       	ldi	r31, 0xD9	; 217
    4cdc:	01 e0       	ldi	r16, 0x01	; 1
    4cde:	0b bf       	out	0x3b, r16	; 59
    4ce0:	02 c0       	rjmp	.+4      	; 0x4ce6 <__do_copy_data+0x14>
    4ce2:	07 90       	elpm	r0, Z+
    4ce4:	0d 92       	st	X+, r0
    4ce6:	ae 34       	cpi	r26, 0x4E	; 78
    4ce8:	b1 07       	cpc	r27, r17
    4cea:	d9 f7       	brne	.-10     	; 0x4ce2 <__do_copy_data+0x10>

00004cec <__do_clear_bss>:
    4cec:	20 e2       	ldi	r18, 0x20	; 32
    4cee:	ae e4       	ldi	r26, 0x4E	; 78
    4cf0:	b7 e1       	ldi	r27, 0x17	; 23
    4cf2:	01 c0       	rjmp	.+2      	; 0x4cf6 <.do_clear_bss_start>

00004cf4 <.do_clear_bss_loop>:
    4cf4:	1d 92       	st	X+, r1

00004cf6 <.do_clear_bss_start>:
    4cf6:	a0 33       	cpi	r26, 0x30	; 48
    4cf8:	b2 07       	cpc	r27, r18
    4cfa:	e1 f7       	brne	.-8      	; 0x4cf4 <.do_clear_bss_loop>
    4cfc:	0e 94 3e e6 	call	0x1cc7c	; 0x1cc7c <main>
    4d00:	0c 94 a3 ec 	jmp	0x1d946	; 0x1d946 <_exit>

00004d04 <__bad_interrupt>:
    4d04:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00004d08 <chip_select>:
#endif
#ifdef AVR
    SPI0_RX(&data,1);
#endif
    return(data);
}
    4d08:	e8 2f       	mov	r30, r24
    4d0a:	e6 95       	lsr	r30
    4d0c:	e6 95       	lsr	r30
    4d0e:	e6 95       	lsr	r30
    4d10:	93 e0       	ldi	r25, 0x03	; 3
    4d12:	e9 9f       	mul	r30, r25
    4d14:	f0 01       	movw	r30, r0
    4d16:	11 24       	eor	r1, r1
    4d18:	32 a1       	ldd	r19, Z+34	; 0x22
    4d1a:	28 2f       	mov	r18, r24
    4d1c:	27 70       	andi	r18, 0x07	; 7
    4d1e:	81 e0       	ldi	r24, 0x01	; 1
    4d20:	90 e0       	ldi	r25, 0x00	; 0
    4d22:	01 c0       	rjmp	.+2      	; 0x4d26 <chip_select+0x1e>
    4d24:	88 0f       	add	r24, r24
    4d26:	2a 95       	dec	r18
    4d28:	ea f7       	brpl	.-6      	; 0x4d24 <chip_select+0x1c>
    4d2a:	98 2f       	mov	r25, r24
    4d2c:	90 95       	com	r25
    4d2e:	93 23       	and	r25, r19
    4d30:	92 a3       	std	Z+34, r25	; 0x22
    4d32:	91 a1       	ldd	r25, Z+33	; 0x21
    4d34:	89 2b       	or	r24, r25
    4d36:	81 a3       	std	Z+33, r24	; 0x21
    4d38:	08 95       	ret

00004d3a <chip_deselect>:
    4d3a:	e8 2f       	mov	r30, r24
    4d3c:	e6 95       	lsr	r30
    4d3e:	e6 95       	lsr	r30
    4d40:	e6 95       	lsr	r30
    4d42:	93 e0       	ldi	r25, 0x03	; 3
    4d44:	e9 9f       	mul	r30, r25
    4d46:	f0 01       	movw	r30, r0
    4d48:	11 24       	eor	r1, r1
    4d4a:	32 a1       	ldd	r19, Z+34	; 0x22
    4d4c:	28 2f       	mov	r18, r24
    4d4e:	27 70       	andi	r18, 0x07	; 7
    4d50:	81 e0       	ldi	r24, 0x01	; 1
    4d52:	90 e0       	ldi	r25, 0x00	; 0
    4d54:	01 c0       	rjmp	.+2      	; 0x4d58 <chip_deselect+0x1e>
    4d56:	88 0f       	add	r24, r24
    4d58:	2a 95       	dec	r18
    4d5a:	ea f7       	brpl	.-6      	; 0x4d56 <chip_deselect+0x1c>
    4d5c:	93 2f       	mov	r25, r19
    4d5e:	98 2b       	or	r25, r24
    4d60:	92 a3       	std	Z+34, r25	; 0x22
    4d62:	91 a1       	ldd	r25, Z+33	; 0x21
    4d64:	89 2b       	or	r24, r25
    4d66:	81 a3       	std	Z+33, r24	; 0x21
    4d68:	08 95       	ret

00004d6a <chip_select_init>:
    4d6a:	e7 cf       	rjmp	.-50     	; 0x4d3a <chip_deselect>
    4d6c:	08 95       	ret

00004d6e <spi_end>:
    4d6e:	cf 93       	push	r28
    4d70:	ad b7       	in	r26, 0x3d	; 61
    4d72:	be b7       	in	r27, 0x3e	; 62
    4d74:	17 97       	sbiw	r26, 0x07	; 7
    4d76:	0f b6       	in	r0, 0x3f	; 63
    4d78:	f8 94       	cli
    4d7a:	be bf       	out	0x3e, r27	; 62
    4d7c:	0f be       	out	0x3f, r0	; 63
    4d7e:	ad bf       	out	0x3d, r26	; 61
    4d80:	c8 2f       	mov	r28, r24
    4d82:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <_cs_pin>
    4d86:	8c 17       	cp	r24, r28
    4d88:	99 f0       	breq	.+38     	; 0x4db0 <spi_end+0x42>
    4d8a:	8f 3f       	cpi	r24, 0xFF	; 255
    4d8c:	89 f0       	breq	.+34     	; 0x4db0 <spi_end+0x42>
    4d8e:	2c 2f       	mov	r18, r28
    4d90:	30 e0       	ldi	r19, 0x00	; 0
    4d92:	ed b7       	in	r30, 0x3d	; 61
    4d94:	fe b7       	in	r31, 0x3e	; 62
    4d96:	37 83       	std	Z+7, r19	; 0x07
    4d98:	26 83       	std	Z+6, r18	; 0x06
    4d9a:	90 e0       	ldi	r25, 0x00	; 0
    4d9c:	95 83       	std	Z+5, r25	; 0x05
    4d9e:	84 83       	std	Z+4, r24	; 0x04
    4da0:	82 ec       	ldi	r24, 0xC2	; 194
    4da2:	91 e0       	ldi	r25, 0x01	; 1
    4da4:	a0 e0       	ldi	r26, 0x00	; 0
    4da6:	81 83       	std	Z+1, r24	; 0x01
    4da8:	92 83       	std	Z+2, r25	; 0x02
    4daa:	a3 83       	std	Z+3, r26	; 0x03
    4dac:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
    4db0:	8c 2f       	mov	r24, r28
    4db2:	c3 df       	rcall	.-122    	; 0x4d3a <chip_deselect>
    4db4:	8f ef       	ldi	r24, 0xFF	; 255
    4db6:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <_cs_pin>
    4dba:	ad b7       	in	r26, 0x3d	; 61
    4dbc:	be b7       	in	r27, 0x3e	; 62
    4dbe:	17 96       	adiw	r26, 0x07	; 7
    4dc0:	0f b6       	in	r0, 0x3f	; 63
    4dc2:	f8 94       	cli
    4dc4:	be bf       	out	0x3e, r27	; 62
    4dc6:	0f be       	out	0x3f, r0	; 63
    4dc8:	ad bf       	out	0x3d, r26	; 61
    4dca:	cf 91       	pop	r28
    4dcc:	08 95       	ret

00004dce <spi_TX_buffer>:
    4dce:	03 c5       	rjmp	.+2566   	; 0x57d6 <SPI0_TX>
    4dd0:	08 95       	ret

00004dd2 <spi_RX_buffer>:
    4dd2:	2b c5       	rjmp	.+2646   	; 0x582a <SPI0_RX>
    4dd4:	08 95       	ret

00004dd6 <spi_TX>:

/// @brief SPI write 1 byte
/// @param[in] data: value to transmit
/// @return  void
void spi_TX(uint8_t data)
{
    4dd6:	a1 e0       	ldi	r26, 0x01	; 1
    4dd8:	b0 e0       	ldi	r27, 0x00	; 0
    4dda:	e1 ef       	ldi	r30, 0xF1	; 241
    4ddc:	f6 e2       	ldi	r31, 0x26	; 38
    4dde:	0c 94 b4 e8 	jmp	0x1d168	; 0x1d168 <__prologue_saves__+0x20>
    4de2:	89 83       	std	Y+1, r24	; 0x01
#ifdef ESP8266
    hspi_TX(&data,1);
#endif
#ifdef AVR
    SPI0_TX(&data,1);
    4de4:	61 e0       	ldi	r22, 0x01	; 1
    4de6:	70 e0       	ldi	r23, 0x00	; 0
    4de8:	ce 01       	movw	r24, r28
    4dea:	01 96       	adiw	r24, 0x01	; 1
    4dec:	f4 d4       	rcall	.+2536   	; 0x57d6 <SPI0_TX>
#endif
}
    4dee:	21 96       	adiw	r28, 0x01	; 1
    4df0:	e2 e0       	ldi	r30, 0x02	; 2
    4df2:	0c 94 d0 e8 	jmp	0x1d1a0	; 0x1d1a0 <__epilogue_restores__+0x20>

00004df6 <spi_init>:
 @return void
*/
uint8_t _cs_pin = 0xff;
uint32_t _spi_clock = -1L;
void spi_init(uint32_t clock, int pin)
{
    4df6:	cf 92       	push	r12
    4df8:	df 92       	push	r13
    4dfa:	ef 92       	push	r14
    4dfc:	ff 92       	push	r15
    4dfe:	6b 01       	movw	r12, r22
    4e00:	7c 01       	movw	r14, r24
    4e02:	84 2f       	mov	r24, r20
    spi_waitReady();
    chip_deselect(pin);
    4e04:	9a df       	rcall	.-204    	; 0x4d3a <chip_deselect>
    _cs_pin = 0xff;
    4e06:	8f ef       	ldi	r24, 0xFF	; 255
    4e08:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <_cs_pin>

#ifdef AVR
    SPI0_Init(clock);                             // Initialize the SPI bus - does nothing if clock unchanged
    4e0c:	c7 01       	movw	r24, r14
    4e0e:	b6 01       	movw	r22, r12
    4e10:	b5 d4       	rcall	.+2410   	; 0x577c <SPI0_Init>
    SPI0_Mode(0);                                 // Set the clocking mode, etc
    4e12:	80 e0       	ldi	r24, 0x00	; 0
    4e14:	90 e0       	ldi	r25, 0x00	; 0
#endif
#ifdef ESP8266
    hspi_init(clock,0);                           // Initialize the SPI bus - does nothing if clock unchanged
#endif
    spi_TX(0xff);
    4e16:	72 d4       	rcall	.+2276   	; 0x56fc <SPI0_Mode>
    4e18:	8f ef       	ldi	r24, 0xFF	; 255
    4e1a:	dd df       	rcall	.-70     	; 0x4dd6 <spi_TX>
    _spi_clock = clock;
    4e1c:	c0 92 06 01 	sts	0x0106, r12	; 0x800106 <_spi_clock>
    4e20:	d0 92 07 01 	sts	0x0107, r13	; 0x800107 <_spi_clock+0x1>
    4e24:	e0 92 08 01 	sts	0x0108, r14	; 0x800108 <_spi_clock+0x2>
    4e28:	f0 92 09 01 	sts	0x0109, r15	; 0x800109 <_spi_clock+0x3>
// waits for any prior transactions to complete before updating
    spi_waitReady();
}
    4e2c:	ff 90       	pop	r15
    4e2e:	ef 90       	pop	r14
    4e30:	df 90       	pop	r13
    4e32:	cf 90       	pop	r12
    4e34:	08 95       	ret

00004e36 <spi_begin>:
 @param[in] clock: SPI clock rate
 @param[in] pin: GPIO CS pin
 @return void
*/
void spi_begin(uint32_t clock, int pin)
{
    4e36:	cf 92       	push	r12
    4e38:	df 92       	push	r13
    4e3a:	ef 92       	push	r14
    4e3c:	ff 92       	push	r15
    4e3e:	cf 93       	push	r28
    4e40:	df 93       	push	r29
    4e42:	ad b7       	in	r26, 0x3d	; 61
    4e44:	be b7       	in	r27, 0x3e	; 62
    4e46:	17 97       	sbiw	r26, 0x07	; 7
    4e48:	0f b6       	in	r0, 0x3f	; 63
    4e4a:	f8 94       	cli
    4e4c:	be bf       	out	0x3e, r27	; 62
    4e4e:	0f be       	out	0x3f, r0	; 63
    4e50:	ad bf       	out	0x3d, r26	; 61
    4e52:	6b 01       	movw	r12, r22
    4e54:	7c 01       	movw	r14, r24
    4e56:	ea 01       	movw	r28, r20
// FIXME allow nesting by using an array of clock values for each pin

//@brief if there is a prior chip select in progress flag an error
    if(_cs_pin != 0xff)
    4e58:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <_cs_pin>
    4e5c:	8f 3f       	cpi	r24, 0xFF	; 255
    4e5e:	79 f0       	breq	.+30     	; 0x4e7e <spi_begin+0x48>
    {
// This implies a bug!
        printf("cs_enable was: %d, want: %d\n", 0xff & _cs_pin, pin);
    4e60:	ed b7       	in	r30, 0x3d	; 61
    4e62:	fe b7       	in	r31, 0x3e	; 62
    4e64:	46 83       	std	Z+6, r20	; 0x06
    4e66:	d7 83       	std	Z+7, r29	; 0x07
    4e68:	90 e0       	ldi	r25, 0x00	; 0
    4e6a:	95 83       	std	Z+5, r25	; 0x05
    4e6c:	84 83       	std	Z+4, r24	; 0x04
    4e6e:	80 ee       	ldi	r24, 0xE0	; 224
    4e70:	91 e0       	ldi	r25, 0x01	; 1
    4e72:	a0 e0       	ldi	r26, 0x00	; 0
    4e74:	81 83       	std	Z+1, r24	; 0x01
    4e76:	92 83       	std	Z+2, r25	; 0x02
    4e78:	a3 83       	std	Z+3, r26	; 0x03
    4e7a:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
// waits for any prior transactions to complete before updating
    spi_waitReady();

///@brief initialize pin in case it has not been done yet
///@ we cache the clock frequency seeting for multiple device support
    if(_spi_clock != clock)
    4e7e:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <_spi_clock>
    4e82:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <_spi_clock+0x1>
    4e86:	a0 91 08 01 	lds	r26, 0x0108	; 0x800108 <_spi_clock+0x2>
    4e8a:	b0 91 09 01 	lds	r27, 0x0109	; 0x800109 <_spi_clock+0x3>
    4e8e:	8c 15       	cp	r24, r12
    4e90:	9d 05       	cpc	r25, r13
    4e92:	ae 05       	cpc	r26, r14
    4e94:	bf 05       	cpc	r27, r15
    4e96:	21 f0       	breq	.+8      	; 0x4ea0 <spi_begin+0x6a>
    {
        spi_init(clock,pin);
    4e98:	ae 01       	movw	r20, r28
    4e9a:	c7 01       	movw	r24, r14
    4e9c:	b6 01       	movw	r22, r12
    4e9e:	ab df       	rcall	.-170    	; 0x4df6 <spi_init>
    }

    chip_select(pin);
    4ea0:	8c 2f       	mov	r24, r28
    4ea2:	32 df       	rcall	.-412    	; 0x4d08 <chip_select>
    _cs_pin = pin;
    4ea4:	c0 93 0a 01 	sts	0x010A, r28	; 0x80010a <_cs_pin>
}
    4ea8:	ad b7       	in	r26, 0x3d	; 61
    4eaa:	be b7       	in	r27, 0x3e	; 62
    4eac:	17 96       	adiw	r26, 0x07	; 7
    4eae:	0f b6       	in	r0, 0x3f	; 63
    4eb0:	f8 94       	cli
    4eb2:	be bf       	out	0x3e, r27	; 62
    4eb4:	0f be       	out	0x3f, r0	; 63
    4eb6:	ad bf       	out	0x3d, r26	; 61
    4eb8:	df 91       	pop	r29
    4eba:	cf 91       	pop	r28
    4ebc:	ff 90       	pop	r15
    4ebe:	ef 90       	pop	r14
    4ec0:	df 90       	pop	r13
    4ec2:	cf 90       	pop	r12
    4ec4:	08 95       	ret

00004ec6 <spi_TXRX>:

/// @brief SPI read and write 1 byte
/// @param[in] data: value to transmit
/// @return  uint8_t value read
uint8_t spi_TXRX(uint8_t data)
{
    4ec6:	a1 e0       	ldi	r26, 0x01	; 1
    4ec8:	b0 e0       	ldi	r27, 0x00	; 0
    4eca:	e9 e6       	ldi	r30, 0x69	; 105
    4ecc:	f7 e2       	ldi	r31, 0x27	; 39
    4ece:	0c 94 b4 e8 	jmp	0x1d168	; 0x1d168 <__prologue_saves__+0x20>
    4ed2:	89 83       	std	Y+1, r24	; 0x01
#ifdef ESP8266
    hspi_TXRX(&data,1);
#endif
#ifdef AVR
    SPI0_TXRX(&data,1);
    4ed4:	61 e0       	ldi	r22, 0x01	; 1
    4ed6:	70 e0       	ldi	r23, 0x00	; 0
    4ed8:	ce 01       	movw	r24, r28
    4eda:	01 96       	adiw	r24, 0x01	; 1
    4edc:	90 d4       	rcall	.+2336   	; 0x57fe <SPI0_TXRX>
#endif
    return(data);
}
    4ede:	89 81       	ldd	r24, Y+1	; 0x01
    4ee0:	21 96       	adiw	r28, 0x01	; 1
    4ee2:	e2 e0       	ldi	r30, 0x02	; 2
    4ee4:	0c 94 d0 e8 	jmp	0x1d1a0	; 0x1d1a0 <__epilogue_restores__+0x20>

00004ee8 <set_error>:
static uint8_t error_flag = 0;
/// @brief Set error condition
/// @return  void
void set_error(uint8_t error)
{
	error_flag = error;
    4ee8:	80 93 4e 17 	sts	0x174E, r24	; 0x80174e <__data_end>
    GPIO_PIN_HI(LED2);
    4eec:	2c 9a       	sbi	0x05, 4	; 5
    4eee:	24 9a       	sbi	0x04, 4	; 4
    4ef0:	08 95       	ret

00004ef2 <clear_error>:

/// @brief Set error condition
/// @return  void
void clear_error()
{
	error_flag = 0;
    4ef2:	10 92 4e 17 	sts	0x174E, r1	; 0x80174e <__data_end>
    GPIO_PIN_LOW(LED2);
    4ef6:	2c 98       	cbi	0x05, 4	; 5
    4ef8:	24 9a       	sbi	0x04, 4	; 4
    4efa:	08 95       	ret

00004efc <heaptop>:
/// - avr-libc dependent code.
///
/// @return top of heap
/// @see malloc().
size_t heaptop()
{
    4efc:	a4 e0       	ldi	r26, 0x04	; 4
    4efe:	b0 e0       	ldi	r27, 0x00	; 0
    4f00:	e4 e8       	ldi	r30, 0x84	; 132
    4f02:	f7 e2       	ldi	r31, 0x27	; 39
    4f04:	0c 94 b4 e8 	jmp	0x1d168	; 0x1d168 <__prologue_saves__+0x20>
	volatile size_t heap_end;

	// I looked at the malloc source code to figure these all out
	// if malloc_heap_end and breakval are 0 then we use the stack bootom plus a margin

	if( (size_t) __malloc_heap_end )
    4f08:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    4f0c:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    4f10:	00 97       	sbiw	r24, 0x00	; 0
    4f12:	91 f4       	brne	.+36     	; 0x4f38 <heaptop+0x3c>
		heap_end = (size_t) __malloc_heap_end;
	else if(__brkval)
    4f14:	80 91 2c 20 	lds	r24, 0x202C	; 0x80202c <__brkval>
    4f18:	90 91 2d 20 	lds	r25, 0x202D	; 0x80202d <__brkval+0x1>
    4f1c:	00 97       	sbiw	r24, 0x00	; 0
    4f1e:	61 f4       	brne	.+24     	; 0x4f38 <heaptop+0x3c>
        heap_end = (size_t) __brkval;
    else
        heap_end = (size_t) SP - (size_t) __malloc_margin;
    4f20:	8d b7       	in	r24, 0x3d	; 61
    4f22:	9e b7       	in	r25, 0x3e	; 62
    4f24:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <__malloc_margin>
    4f28:	30 91 05 01 	lds	r19, 0x0105	; 0x800105 <__malloc_margin+0x1>
    4f2c:	82 1b       	sub	r24, r18
    4f2e:	93 0b       	sbc	r25, r19
    4f30:	9a 83       	std	Y+2, r25	; 0x02
    4f32:	89 83       	std	Y+1, r24	; 0x01

	return(heap_end);
    4f34:	89 81       	ldd	r24, Y+1	; 0x01
    4f36:	9a 81       	ldd	r25, Y+2	; 0x02
    4f38:	9c 83       	std	Y+4, r25	; 0x04
    4f3a:	8b 83       	std	Y+3, r24	; 0x03
    4f3c:	8b 81       	ldd	r24, Y+3	; 0x03
    4f3e:	9c 81       	ldd	r25, Y+4	; 0x04

}
    4f40:	24 96       	adiw	r28, 0x04	; 4
    4f42:	e2 e0       	ldi	r30, 0x02	; 2
    4f44:	0c 94 d0 e8 	jmp	0x1d1a0	; 0x1d1a0 <__epilogue_restores__+0x20>

00004f48 <freeRam>:
size_t freeRam ()
{
    size_t total;
	size_t heap_end;

	heap_end = heaptop();
    4f48:	d9 df       	rcall	.-78     	; 0x4efc <heaptop>

	total = (unsigned long) SP - (unsigned long) heap_end;
    4f4a:	2d b7       	in	r18, 0x3d	; 61
    4f4c:	3e b7       	in	r19, 0x3e	; 62

    return ( total );
}
    4f4e:	a9 01       	movw	r20, r18
    4f50:	48 1b       	sub	r20, r24
    4f52:	59 0b       	sbc	r21, r25
    4f54:	ca 01       	movw	r24, r20
    4f56:	08 95       	ret

00004f58 <PrintFree>:
/// - avr-libc dependent code.
/// - Stack, BSS, Data, Heap, Malloc.
///
/// @return  void
void PrintFree()
{
    4f58:	0f 93       	push	r16
    4f5a:	1f 93       	push	r17
    4f5c:	cf 93       	push	r28
    4f5e:	df 93       	push	r29
    4f60:	ad b7       	in	r26, 0x3d	; 61
    4f62:	be b7       	in	r27, 0x3e	; 62
    4f64:	17 97       	sbiw	r26, 0x07	; 7
    4f66:	0f b6       	in	r0, 0x3f	; 63
    4f68:	f8 94       	cli
    4f6a:	be bf       	out	0x3e, r27	; 62
    4f6c:	0f be       	out	0x3f, r0	; 63
    4f6e:	ad bf       	out	0x3d, r26	; 61
	size_t ram;
    size_t heap_end;

	// I looked at the malloc source code to figure these all out

    ram = freeRam();
    4f70:	eb df       	rcall	.-42     	; 0x4f48 <freeRam>
    4f72:	ec 01       	movw	r28, r24
	heap_end = heaptop();
    4f74:	c3 df       	rcall	.-122    	; 0x4efc <heaptop>
    4f76:	8c 01       	movw	r16, r24
    4f78:	ed b7       	in	r30, 0x3d	; 61

#ifdef AVR
    printf("Free Ram:        %5u\n", (unsigned int) ram);
    4f7a:	fe b7       	in	r31, 0x3e	; 62
    4f7c:	d5 83       	std	Z+5, r29	; 0x05
    4f7e:	c4 83       	std	Z+4, r28	; 0x04
    4f80:	81 ef       	ldi	r24, 0xF1	; 241
    4f82:	92 e0       	ldi	r25, 0x02	; 2
    4f84:	a0 e0       	ldi	r26, 0x00	; 0
    4f86:	81 83       	std	Z+1, r24	; 0x01
    4f88:	92 83       	std	Z+2, r25	; 0x02
    4f8a:	a3 83       	std	Z+3, r26	; 0x03
    4f8c:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
    4f90:	8d b7       	in	r24, 0x3d	; 61

    printf("  Stack Top:     %5u, End: %5u\n", (unsigned int*) &__stack, (unsigned int) SP);
    4f92:	9e b7       	in	r25, 0x3e	; 62
    4f94:	ed b7       	in	r30, 0x3d	; 61
    4f96:	fe b7       	in	r31, 0x3e	; 62
    4f98:	97 83       	std	Z+7, r25	; 0x07
    4f9a:	86 83       	std	Z+6, r24	; 0x06
    4f9c:	cf ef       	ldi	r28, 0xFF	; 255
    4f9e:	d0 e4       	ldi	r29, 0x40	; 64
    4fa0:	d5 83       	std	Z+5, r29	; 0x05
    4fa2:	c4 83       	std	Z+4, r28	; 0x04
    4fa4:	81 ed       	ldi	r24, 0xD1	; 209
    4fa6:	92 e0       	ldi	r25, 0x02	; 2
    4fa8:	a0 e0       	ldi	r26, 0x00	; 0
    4faa:	81 83       	std	Z+1, r24	; 0x01
    4fac:	92 83       	std	Z+2, r25	; 0x02
    4fae:	a3 83       	std	Z+3, r26	; 0x03
    4fb0:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
    4fb4:	8d b7       	in	r24, 0x3d	; 61
    printf("  Stack Used:    %5u\n", (unsigned int*) &__stack - (unsigned int*) SP);
    4fb6:	9e b7       	in	r25, 0x3e	; 62
    4fb8:	c8 1b       	sub	r28, r24
    4fba:	d9 0b       	sbc	r29, r25
    4fbc:	d5 95       	asr	r29
    4fbe:	c7 95       	ror	r28
    4fc0:	ed b7       	in	r30, 0x3d	; 61
    4fc2:	fe b7       	in	r31, 0x3e	; 62
    4fc4:	d5 83       	std	Z+5, r29	; 0x05
    4fc6:	c4 83       	std	Z+4, r28	; 0x04
    4fc8:	8b eb       	ldi	r24, 0xBB	; 187
    4fca:	92 e0       	ldi	r25, 0x02	; 2
    4fcc:	a0 e0       	ldi	r26, 0x00	; 0
    4fce:	81 83       	std	Z+1, r24	; 0x01
    4fd0:	92 83       	std	Z+2, r25	; 0x02
    4fd2:	a3 83       	std	Z+3, r26	; 0x03
    4fd4:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
    4fd8:	ed b7       	in	r30, 0x3d	; 61

	printf("  Heap  Start:   %5u, End: %5u\n",
    4fda:	fe b7       	in	r31, 0x3e	; 62
    4fdc:	17 83       	std	Z+7, r17	; 0x07
    4fde:	06 83       	std	Z+6, r16	; 0x06
    4fe0:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__malloc_heap_start>
    4fe4:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    4fe8:	95 83       	std	Z+5, r25	; 0x05
    4fea:	84 83       	std	Z+4, r24	; 0x04
    4fec:	8b e9       	ldi	r24, 0x9B	; 155
    4fee:	92 e0       	ldi	r25, 0x02	; 2
    4ff0:	a0 e0       	ldi	r26, 0x00	; 0
    4ff2:	81 83       	std	Z+1, r24	; 0x01
    4ff4:	92 83       	std	Z+2, r25	; 0x02
    4ff6:	a3 83       	std	Z+3, r26	; 0x03
    4ff8:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
    4ffc:	80 e3       	ldi	r24, 0x30	; 48
		(unsigned int) __malloc_heap_start, (unsigned int)heap_end);

    printf("  BSS   Start:   %5u, End: %5u\n",
    4ffe:	90 e2       	ldi	r25, 0x20	; 32
    5000:	ed b7       	in	r30, 0x3d	; 61
    5002:	fe b7       	in	r31, 0x3e	; 62
    5004:	97 83       	std	Z+7, r25	; 0x07
    5006:	86 83       	std	Z+6, r24	; 0x06
    5008:	8e e4       	ldi	r24, 0x4E	; 78
    500a:	97 e1       	ldi	r25, 0x17	; 23
    500c:	95 83       	std	Z+5, r25	; 0x05
    500e:	84 83       	std	Z+4, r24	; 0x04
    5010:	8b e7       	ldi	r24, 0x7B	; 123
    5012:	92 e0       	ldi	r25, 0x02	; 2
    5014:	a0 e0       	ldi	r26, 0x00	; 0
    5016:	81 83       	std	Z+1, r24	; 0x01
    5018:	92 83       	std	Z+2, r25	; 0x02
    501a:	a3 83       	std	Z+3, r26	; 0x03
    501c:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
    5020:	8e e4       	ldi	r24, 0x4E	; 78
        (unsigned int)&__bss_start, (unsigned int)&__bss_end);

    printf("  Data  Start:   %5u, End: %5u\n",
    5022:	97 e1       	ldi	r25, 0x17	; 23
    5024:	ed b7       	in	r30, 0x3d	; 61
    5026:	fe b7       	in	r31, 0x3e	; 62
    5028:	97 83       	std	Z+7, r25	; 0x07
    502a:	86 83       	std	Z+6, r24	; 0x06
    502c:	80 e0       	ldi	r24, 0x00	; 0
    502e:	91 e0       	ldi	r25, 0x01	; 1
    5030:	95 83       	std	Z+5, r25	; 0x05
    5032:	84 83       	std	Z+4, r24	; 0x04
    5034:	8b e5       	ldi	r24, 0x5B	; 91
    5036:	92 e0       	ldi	r25, 0x02	; 2
    5038:	a0 e0       	ldi	r26, 0x00	; 0
    503a:	81 83       	std	Z+1, r24	; 0x01
    503c:	92 83       	std	Z+2, r25	; 0x02
    503e:	a3 83       	std	Z+3, r26	; 0x03
    5040:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
    5044:	cd b7       	in	r28, 0x3d	; 61

    printf("  Data  Start:   %8lu, End: %8lu\n",
        (unsigned int)&__data_start, (unsigned int)&__data_end);
#endif

}
    5046:	de b7       	in	r29, 0x3e	; 62
    5048:	27 96       	adiw	r28, 0x07	; 7
    504a:	e4 e0       	ldi	r30, 0x04	; 4
    504c:	0c 94 ce e8 	jmp	0x1d19c	; 0x1d19c <__epilogue_restores__+0x1c>

00005050 <safecalloc>:
    5050:	ef 92       	push	r14
///  - We check if the pointer was in the heap.
///  - Otherwise it may have been statically defined - display error.
///
/// @return  void.
void *safecalloc(int size, int elements)
{
    5052:	ff 92       	push	r15
    5054:	0f 93       	push	r16
    5056:	1f 93       	push	r17
    5058:	cf 93       	push	r28
    505a:	df 93       	push	r29
    505c:	ad b7       	in	r26, 0x3d	; 61
    505e:	be b7       	in	r27, 0x3e	; 62
    5060:	17 97       	sbiw	r26, 0x07	; 7
    5062:	0f b6       	in	r0, 0x3f	; 63
    5064:	f8 94       	cli
    5066:	be bf       	out	0x3e, r27	; 62
    5068:	0f be       	out	0x3f, r0	; 63
    506a:	ad bf       	out	0x3d, r26	; 61
    506c:	8c 01       	movw	r16, r24
    506e:	7b 01       	movw	r14, r22
    void *p = calloc(size, elements);
    5070:	0e 94 61 eb 	call	0x1d6c2	; 0x1d6c2 <calloc>
    5074:	ec 01       	movw	r28, r24
    if(!p)
    5076:	89 2b       	or	r24, r25
    5078:	71 f4       	brne	.+28     	; 0x5096 <safecalloc+0x46>
    {
        printf("safecalloc(%d,%d) failed!\n", size, elements);
    507a:	ed b7       	in	r30, 0x3d	; 61
    507c:	fe b7       	in	r31, 0x3e	; 62
    507e:	f7 82       	std	Z+7, r15	; 0x07
    5080:	e6 82       	std	Z+6, r14	; 0x06
    5082:	15 83       	std	Z+5, r17	; 0x05
    5084:	04 83       	std	Z+4, r16	; 0x04
    5086:	80 e4       	ldi	r24, 0x40	; 64
    5088:	92 e0       	ldi	r25, 0x02	; 2
    508a:	a0 e0       	ldi	r26, 0x00	; 0
    508c:	81 83       	std	Z+1, r24	; 0x01
    508e:	92 83       	std	Z+2, r25	; 0x02
    5090:	a3 83       	std	Z+3, r26	; 0x03
    5092:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
    }
    return(p);
}
    5096:	ce 01       	movw	r24, r28
    5098:	cd b7       	in	r28, 0x3d	; 61
    509a:	de b7       	in	r29, 0x3e	; 62
    509c:	27 96       	adiw	r28, 0x07	; 7
    509e:	e6 e0       	ldi	r30, 0x06	; 6
    50a0:	0c 94 cc e8 	jmp	0x1d198	; 0x1d198 <__epilogue_restores__+0x18>

000050a4 <safemalloc>:
///  - We check if the pointer was in the heap.
///  - Otherwise it may have been statically defined - display error.
/// @param[in] size:  size
/// @return  void.
void *safemalloc(size_t size)
{
    50a4:	0f 93       	push	r16
    50a6:	1f 93       	push	r17
    50a8:	cf 93       	push	r28
    50aa:	df 93       	push	r29
    50ac:	00 d0       	rcall	.+0      	; 0x50ae <safemalloc+0xa>
    50ae:	00 d0       	rcall	.+0      	; 0x50b0 <safemalloc+0xc>
    50b0:	1f 92       	push	r1
    50b2:	8c 01       	movw	r16, r24
    void *p = calloc(size, 1);
    50b4:	61 e0       	ldi	r22, 0x01	; 1
    50b6:	70 e0       	ldi	r23, 0x00	; 0
    50b8:	0e 94 61 eb 	call	0x1d6c2	; 0x1d6c2 <calloc>
    50bc:	ec 01       	movw	r28, r24
    if(!p)
    50be:	89 2b       	or	r24, r25
    50c0:	61 f4       	brne	.+24     	; 0x50da <safemalloc+0x36>
    {
        printf("safemalloc(%d) failed!\n", (int) size);
    50c2:	ed b7       	in	r30, 0x3d	; 61
    50c4:	fe b7       	in	r31, 0x3e	; 62
    50c6:	15 83       	std	Z+5, r17	; 0x05
    50c8:	04 83       	std	Z+4, r16	; 0x04
    50ca:	88 e2       	ldi	r24, 0x28	; 40
    50cc:	92 e0       	ldi	r25, 0x02	; 2
    50ce:	a0 e0       	ldi	r26, 0x00	; 0
    50d0:	81 83       	std	Z+1, r24	; 0x01
    50d2:	92 83       	std	Z+2, r25	; 0x02
    50d4:	a3 83       	std	Z+3, r26	; 0x03
    50d6:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
    }
    return(p);
}
    50da:	ce 01       	movw	r24, r28
    50dc:	cd b7       	in	r28, 0x3d	; 61
    50de:	de b7       	in	r29, 0x3e	; 62
    50e0:	25 96       	adiw	r28, 0x05	; 5
    50e2:	e4 e0       	ldi	r30, 0x04	; 4
    50e4:	0c 94 ce e8 	jmp	0x1d19c	; 0x1d19c <__epilogue_restores__+0x1c>

000050e8 <safefree>:
///
/// @param[in] p: pointer to free.
///
/// @return  void.
void safefree(void *p)
{
    50e8:	cf 93       	push	r28
    50ea:	df 93       	push	r29
    50ec:	ad b7       	in	r26, 0x3d	; 61
    50ee:	be b7       	in	r27, 0x3e	; 62
    50f0:	17 97       	sbiw	r26, 0x07	; 7
    50f2:	0f b6       	in	r0, 0x3f	; 63
    50f4:	f8 94       	cli
    50f6:	be bf       	out	0x3e, r27	; 62
    50f8:	0f be       	out	0x3f, r0	; 63
    50fa:	ad bf       	out	0x3d, r26	; 61
    size_t heap_end;

    if(p == NULL)
    50fc:	00 97       	sbiw	r24, 0x00	; 0
    50fe:	f9 f0       	breq	.+62     	; 0x513e <safefree+0x56>
    5100:	ec 01       	movw	r28, r24
        return;

	heap_end = heaptop();
    5102:	fc de       	rcall	.-520    	; 0x4efc <heaptop>

    if( ((size_t) p >= (size_t) __malloc_heap_start) && ((size_t) p <= heap_end) )
    5104:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    5108:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    510c:	c2 17       	cp	r28, r18
    510e:	d3 07       	cpc	r29, r19
    5110:	38 f0       	brcs	.+14     	; 0x5120 <safefree+0x38>
    5112:	8c 17       	cp	r24, r28
    5114:	9d 07       	cpc	r25, r29
    5116:	20 f0       	brcs	.+8      	; 0x5120 <safefree+0x38>
    {
        free(p);
    5118:	ce 01       	movw	r24, r28
    511a:	0e 94 13 ec 	call	0x1d826	; 0x1d826 <free>
        return;
    511e:	0f c0       	rjmp	.+30     	; 0x513e <safefree+0x56>
    }
    printf("safefree: FREE ERROR start(%lu), end(%lu)\n", (size_t) p, (size_t) heap_end);
    5120:	ed b7       	in	r30, 0x3d	; 61
    5122:	fe b7       	in	r31, 0x3e	; 62
    5124:	97 83       	std	Z+7, r25	; 0x07
    5126:	86 83       	std	Z+6, r24	; 0x06
    5128:	d5 83       	std	Z+5, r29	; 0x05
    512a:	c4 83       	std	Z+4, r28	; 0x04
    512c:	8d ef       	ldi	r24, 0xFD	; 253
    512e:	91 e0       	ldi	r25, 0x01	; 1
    5130:	a0 e0       	ldi	r26, 0x00	; 0
    5132:	81 83       	std	Z+1, r24	; 0x01
    5134:	92 83       	std	Z+2, r25	; 0x02
    5136:	a3 83       	std	Z+3, r26	; 0x03
    5138:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
    PrintFree();
    513c:	0d df       	rcall	.-486    	; 0x4f58 <PrintFree>
}
    513e:	cd b7       	in	r28, 0x3d	; 61
    5140:	de b7       	in	r29, 0x3e	; 62
    5142:	27 96       	adiw	r28, 0x07	; 7
    5144:	e2 e0       	ldi	r30, 0x02	; 2
    5146:	0c 94 d0 e8 	jmp	0x1d1a0	; 0x1d1a0 <__epilogue_restores__+0x20>

0000514a <delayus>:
/// @return  void
/// @see _delay_us() is part of avr-libc
void delayus(uint32_t us)
{

    while (us >= 100U)
    514a:	64 36       	cpi	r22, 0x64	; 100
    514c:	71 05       	cpc	r23, r1
    514e:	81 05       	cpc	r24, r1
    5150:	91 05       	cpc	r25, r1
    5152:	58 f0       	brcs	.+22     	; 0x516a <delayus+0x20>
    {
        us -= 100U;
    5154:	64 56       	subi	r22, 0x64	; 100
    5156:	71 09       	sbc	r23, r1
    5158:	81 09       	sbc	r24, r1
    515a:	91 09       	sbc	r25, r1
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    515c:	e3 ef       	ldi	r30, 0xF3	; 243
    515e:	f1 e0       	ldi	r31, 0x01	; 1
    5160:	31 97       	sbiw	r30, 0x01	; 1
    5162:	f1 f7       	brne	.-4      	; 0x5160 <delayus+0x16>
    5164:	00 c0       	rjmp	.+0      	; 0x5166 <delayus+0x1c>
    5166:	00 00       	nop
    5168:	f0 cf       	rjmp	.-32     	; 0x514a <delayus>
        _delay_us(100);
    }
    while (us >= 10U)
    516a:	6a 30       	cpi	r22, 0x0A	; 10
    516c:	71 05       	cpc	r23, r1
    516e:	81 05       	cpc	r24, r1
    5170:	91 05       	cpc	r25, r1
    5172:	48 f0       	brcs	.+18     	; 0x5186 <delayus+0x3c>
    {
        us -= 10U;
    5174:	6a 50       	subi	r22, 0x0A	; 10
    5176:	71 09       	sbc	r23, r1
    5178:	81 09       	sbc	r24, r1
    517a:	91 09       	sbc	r25, r1
    517c:	f2 e4       	ldi	r31, 0x42	; 66
    517e:	fa 95       	dec	r31
    5180:	f1 f7       	brne	.-4      	; 0x517e <delayus+0x34>
    5182:	00 c0       	rjmp	.+0      	; 0x5184 <delayus+0x3a>
    5184:	f2 cf       	rjmp	.-28     	; 0x516a <delayus+0x20>
        _delay_us(10);
    }
    while (us != 0U)
    5186:	61 15       	cp	r22, r1
    5188:	71 05       	cpc	r23, r1
    518a:	81 05       	cpc	r24, r1
    518c:	91 05       	cpc	r25, r1
    518e:	49 f0       	breq	.+18     	; 0x51a2 <delayus+0x58>
    {
        --us;
    5190:	61 50       	subi	r22, 0x01	; 1
    5192:	71 09       	sbc	r23, r1
    5194:	81 09       	sbc	r24, r1
    5196:	91 09       	sbc	r25, r1
    5198:	26 e0       	ldi	r18, 0x06	; 6
    519a:	2a 95       	dec	r18
    519c:	f1 f7       	brne	.-4      	; 0x519a <delayus+0x50>
    519e:	00 c0       	rjmp	.+0      	; 0x51a0 <delayus+0x56>
    51a0:	f2 cf       	rjmp	.-28     	; 0x5186 <delayus+0x3c>
        _delay_us(1);
    }
}
    51a2:	08 95       	ret

000051a4 <delayms>:
/// _delay_us() has limited range - this extends it.
/// @return  void
/// @see _delay_us() is part of avr-libc
void delayms(uint32_t ms)
{
    while (ms--)
    51a4:	61 15       	cp	r22, r1
    51a6:	71 05       	cpc	r23, r1
    51a8:	81 05       	cpc	r24, r1
    51aa:	91 05       	cpc	r25, r1
    51ac:	09 f4       	brne	.+2      	; 0x51b0 <delayms+0xc>
    51ae:	41 c0       	rjmp	.+130    	; 0x5232 <delayms+0x8e>
    51b0:	e3 ef       	ldi	r30, 0xF3	; 243
    51b2:	f1 e0       	ldi	r31, 0x01	; 1
    51b4:	31 97       	sbiw	r30, 0x01	; 1
    51b6:	f1 f7       	brne	.-4      	; 0x51b4 <delayms+0x10>
    51b8:	00 c0       	rjmp	.+0      	; 0x51ba <delayms+0x16>
    51ba:	00 00       	nop
    51bc:	e3 ef       	ldi	r30, 0xF3	; 243
    51be:	f1 e0       	ldi	r31, 0x01	; 1
    51c0:	31 97       	sbiw	r30, 0x01	; 1
    51c2:	f1 f7       	brne	.-4      	; 0x51c0 <delayms+0x1c>
    51c4:	00 c0       	rjmp	.+0      	; 0x51c6 <delayms+0x22>
    51c6:	00 00       	nop
    51c8:	e3 ef       	ldi	r30, 0xF3	; 243
    51ca:	f1 e0       	ldi	r31, 0x01	; 1
    51cc:	31 97       	sbiw	r30, 0x01	; 1
    51ce:	f1 f7       	brne	.-4      	; 0x51cc <delayms+0x28>
    51d0:	00 c0       	rjmp	.+0      	; 0x51d2 <delayms+0x2e>
    51d2:	00 00       	nop
    51d4:	e3 ef       	ldi	r30, 0xF3	; 243
    51d6:	f1 e0       	ldi	r31, 0x01	; 1
    51d8:	31 97       	sbiw	r30, 0x01	; 1
    51da:	f1 f7       	brne	.-4      	; 0x51d8 <delayms+0x34>
    51dc:	00 c0       	rjmp	.+0      	; 0x51de <delayms+0x3a>
    51de:	00 00       	nop
    51e0:	e3 ef       	ldi	r30, 0xF3	; 243
    51e2:	f1 e0       	ldi	r31, 0x01	; 1
    51e4:	31 97       	sbiw	r30, 0x01	; 1
    51e6:	f1 f7       	brne	.-4      	; 0x51e4 <delayms+0x40>
    51e8:	00 c0       	rjmp	.+0      	; 0x51ea <delayms+0x46>
    51ea:	00 00       	nop
    51ec:	e3 ef       	ldi	r30, 0xF3	; 243
    51ee:	f1 e0       	ldi	r31, 0x01	; 1
    51f0:	31 97       	sbiw	r30, 0x01	; 1
    51f2:	f1 f7       	brne	.-4      	; 0x51f0 <delayms+0x4c>
    51f4:	00 c0       	rjmp	.+0      	; 0x51f6 <delayms+0x52>
    51f6:	00 00       	nop
    51f8:	e3 ef       	ldi	r30, 0xF3	; 243
    51fa:	f1 e0       	ldi	r31, 0x01	; 1
    51fc:	31 97       	sbiw	r30, 0x01	; 1
    51fe:	f1 f7       	brne	.-4      	; 0x51fc <delayms+0x58>
    5200:	00 c0       	rjmp	.+0      	; 0x5202 <delayms+0x5e>
    5202:	00 00       	nop
    5204:	e3 ef       	ldi	r30, 0xF3	; 243
    5206:	f1 e0       	ldi	r31, 0x01	; 1
    5208:	31 97       	sbiw	r30, 0x01	; 1
    520a:	f1 f7       	brne	.-4      	; 0x5208 <delayms+0x64>
    520c:	00 c0       	rjmp	.+0      	; 0x520e <delayms+0x6a>
    520e:	00 00       	nop
    5210:	e3 ef       	ldi	r30, 0xF3	; 243
    5212:	f1 e0       	ldi	r31, 0x01	; 1
    5214:	31 97       	sbiw	r30, 0x01	; 1
    5216:	f1 f7       	brne	.-4      	; 0x5214 <delayms+0x70>
    5218:	00 c0       	rjmp	.+0      	; 0x521a <delayms+0x76>
    521a:	00 00       	nop
    521c:	e3 ef       	ldi	r30, 0xF3	; 243
    521e:	f1 e0       	ldi	r31, 0x01	; 1
    5220:	31 97       	sbiw	r30, 0x01	; 1
    5222:	f1 f7       	brne	.-4      	; 0x5220 <delayms+0x7c>
    5224:	00 c0       	rjmp	.+0      	; 0x5226 <delayms+0x82>
    5226:	00 00       	nop
    5228:	61 50       	subi	r22, 0x01	; 1
    522a:	71 09       	sbc	r23, r1
    522c:	81 09       	sbc	r24, r1
    522e:	91 09       	sbc	r25, r1
    5230:	b9 cf       	rjmp	.-142    	; 0x51a4 <delayms>
        _delay_us(100);                           // 700
        _delay_us(100);                           // 800
        _delay_us(100);                           // 900
        _delay_us(100);                           //1000
    }
}
    5232:	08 95       	ret

00005234 <uart_rx_flush>:

    cli();
    c = uarts[uart].rx_buf[uarts[uart].rx_tail];
    sei();
    return (c & 0xff);
}
    5234:	81 11       	cpse	r24, r1
    5236:	0e c0       	rjmp	.+28     	; 0x5254 <uart_rx_flush+0x20>
    5238:	f8 94       	cli
    523a:	10 92 f3 19 	sts	0x19F3, r1	; 0x8019f3 <uarts+0x4>
    523e:	10 92 f2 19 	sts	0x19F2, r1	; 0x8019f2 <uarts+0x3>
    5242:	10 92 ef 19 	sts	0x19EF, r1	; 0x8019ef <uarts>
    5246:	10 92 f0 19 	sts	0x19F0, r1	; 0x8019f0 <uarts+0x1>
    524a:	10 92 f1 19 	sts	0x19F1, r1	; 0x8019f1 <uarts+0x2>
    524e:	10 92 f4 19 	sts	0x19F4, r1	; 0x8019f4 <uarts+0x5>
    5252:	78 94       	sei
    5254:	08 95       	ret

00005256 <uart_ubr>:
    5256:	4f 92       	push	r4
    5258:	5f 92       	push	r5
    525a:	6f 92       	push	r6
    525c:	7f 92       	push	r7
    525e:	8f 92       	push	r8
    5260:	9f 92       	push	r9
    5262:	af 92       	push	r10
    5264:	bf 92       	push	r11
    5266:	cf 92       	push	r12
    5268:	df 92       	push	r13
    526a:	ef 92       	push	r14
    526c:	ff 92       	push	r15
    526e:	cf 93       	push	r28
    5270:	df 93       	push	r29
    5272:	5a 01       	movw	r10, r20
    5274:	e9 01       	movw	r28, r18
    5276:	0e 94 ff e9 	call	0x1d3fe	; 0x1d3fe <__floatunsisf>
    527a:	2b 01       	movw	r4, r22
    527c:	3c 01       	movw	r6, r24
    527e:	20 e0       	ldi	r18, 0x00	; 0
    5280:	30 e0       	ldi	r19, 0x00	; 0
    5282:	40 e0       	ldi	r20, 0x00	; 0
    5284:	51 e4       	ldi	r21, 0x41	; 65
    5286:	0e 94 b5 ea 	call	0x1d56a	; 0x1d56a <__mulsf3>
    528a:	9b 01       	movw	r18, r22
    528c:	ac 01       	movw	r20, r24
    528e:	60 e8       	ldi	r22, 0x80	; 128
    5290:	76 e9       	ldi	r23, 0x96	; 150
    5292:	88 e9       	ldi	r24, 0x98	; 152
    5294:	9b e4       	ldi	r25, 0x4B	; 75
    5296:	0e 94 66 e9 	call	0x1d2cc	; 0x1d2cc <__divsf3>
    529a:	20 e0       	ldi	r18, 0x00	; 0
    529c:	30 e0       	ldi	r19, 0x00	; 0
    529e:	40 e8       	ldi	r20, 0x80	; 128
    52a0:	5f e3       	ldi	r21, 0x3F	; 63
    52a2:	0e 94 fd e8 	call	0x1d1fa	; 0x1d1fa <__subsf3>
    52a6:	0e 94 18 eb 	call	0x1d630	; 0x1d630 <round>
    52aa:	0e 94 d3 e9 	call	0x1d3a6	; 0x1d3a6 <__fixunssfsi>
    52ae:	6b 01       	movw	r12, r22
    52b0:	7c 01       	movw	r14, r24
    52b2:	c1 14       	cp	r12, r1
    52b4:	80 e1       	ldi	r24, 0x10	; 16
    52b6:	d8 06       	cpc	r13, r24
    52b8:	e1 04       	cpc	r14, r1
    52ba:	f1 04       	cpc	r15, r1
    52bc:	58 f4       	brcc	.+22     	; 0x52d4 <uart_ubr+0x7e>
    52be:	81 e0       	ldi	r24, 0x01	; 1
    52c0:	90 e0       	ldi	r25, 0x00	; 0
    52c2:	f5 01       	movw	r30, r10
    52c4:	91 83       	std	Z+1, r25	; 0x01
    52c6:	80 83       	st	Z, r24
    52c8:	81 2c       	mov	r8, r1
    52ca:	91 2c       	mov	r9, r1
    52cc:	a1 2c       	mov	r10, r1
    52ce:	21 e4       	ldi	r18, 0x41	; 65
    52d0:	b2 2e       	mov	r11, r18
    52d2:	31 c0       	rjmp	.+98     	; 0x5336 <uart_ubr+0xe0>
    52d4:	f5 01       	movw	r30, r10
    52d6:	11 82       	std	Z+1, r1	; 0x01
    52d8:	10 82       	st	Z, r1
    52da:	20 e0       	ldi	r18, 0x00	; 0
    52dc:	30 e0       	ldi	r19, 0x00	; 0
    52de:	40 e8       	ldi	r20, 0x80	; 128
    52e0:	51 e4       	ldi	r21, 0x41	; 65
    52e2:	c3 01       	movw	r24, r6
    52e4:	b2 01       	movw	r22, r4
    52e6:	0e 94 b5 ea 	call	0x1d56a	; 0x1d56a <__mulsf3>
    52ea:	9b 01       	movw	r18, r22
    52ec:	ac 01       	movw	r20, r24
    52ee:	60 e8       	ldi	r22, 0x80	; 128
    52f0:	76 e9       	ldi	r23, 0x96	; 150
    52f2:	88 e9       	ldi	r24, 0x98	; 152
    52f4:	9b e4       	ldi	r25, 0x4B	; 75
    52f6:	0e 94 66 e9 	call	0x1d2cc	; 0x1d2cc <__divsf3>
    52fa:	20 e0       	ldi	r18, 0x00	; 0
    52fc:	30 e0       	ldi	r19, 0x00	; 0
    52fe:	40 e8       	ldi	r20, 0x80	; 128
    5300:	5f e3       	ldi	r21, 0x3F	; 63
    5302:	0e 94 fd e8 	call	0x1d1fa	; 0x1d1fa <__subsf3>
    5306:	0e 94 18 eb 	call	0x1d630	; 0x1d630 <round>
    530a:	0e 94 d3 e9 	call	0x1d3a6	; 0x1d3a6 <__fixunssfsi>
    530e:	6b 01       	movw	r12, r22
    5310:	7c 01       	movw	r14, r24
    5312:	81 2c       	mov	r8, r1
    5314:	91 2c       	mov	r9, r1
    5316:	90 e8       	ldi	r25, 0x80	; 128
    5318:	a9 2e       	mov	r10, r25
    531a:	91 e4       	ldi	r25, 0x41	; 65
    531c:	b9 2e       	mov	r11, r25
    531e:	c1 14       	cp	r12, r1
    5320:	f0 e1       	ldi	r31, 0x10	; 16
    5322:	df 06       	cpc	r13, r31
    5324:	e1 04       	cpc	r14, r1
    5326:	f1 04       	cpc	r15, r1
    5328:	30 f0       	brcs	.+12     	; 0x5336 <uart_ubr+0xe0>
    532a:	cc 24       	eor	r12, r12
    532c:	ca 94       	dec	r12
    532e:	8f e0       	ldi	r24, 0x0F	; 15
    5330:	d8 2e       	mov	r13, r24
    5332:	e1 2c       	mov	r14, r1
    5334:	f1 2c       	mov	r15, r1
    5336:	c7 01       	movw	r24, r14
    5338:	b6 01       	movw	r22, r12
    533a:	6f 5f       	subi	r22, 0xFF	; 255
    533c:	7f 4f       	sbci	r23, 0xFF	; 255
    533e:	8f 4f       	sbci	r24, 0xFF	; 255
    5340:	9f 4f       	sbci	r25, 0xFF	; 255
    5342:	0e 94 ff e9 	call	0x1d3fe	; 0x1d3fe <__floatunsisf>
    5346:	a5 01       	movw	r20, r10
    5348:	94 01       	movw	r18, r8
    534a:	0e 94 b5 ea 	call	0x1d56a	; 0x1d56a <__mulsf3>
    534e:	9b 01       	movw	r18, r22
    5350:	ac 01       	movw	r20, r24
    5352:	60 e8       	ldi	r22, 0x80	; 128
    5354:	76 e9       	ldi	r23, 0x96	; 150
    5356:	88 e9       	ldi	r24, 0x98	; 152
    5358:	9b e4       	ldi	r25, 0x4B	; 75
    535a:	0e 94 66 e9 	call	0x1d2cc	; 0x1d2cc <__divsf3>
    535e:	0e 94 d3 e9 	call	0x1d3a6	; 0x1d3a6 <__fixunssfsi>
    5362:	68 83       	st	Y, r22
    5364:	79 83       	std	Y+1, r23	; 0x01
    5366:	8a 83       	std	Y+2, r24	; 0x02
    5368:	9b 83       	std	Y+3, r25	; 0x03
    536a:	c6 01       	movw	r24, r12
    536c:	df 91       	pop	r29
    536e:	cf 91       	pop	r28
    5370:	ff 90       	pop	r15
    5372:	ef 90       	pop	r14
    5374:	df 90       	pop	r13
    5376:	cf 90       	pop	r12
    5378:	bf 90       	pop	r11
    537a:	af 90       	pop	r10
    537c:	9f 90       	pop	r9
    537e:	8f 90       	pop	r8
    5380:	7f 90       	pop	r7
    5382:	6f 90       	pop	r6
    5384:	5f 90       	pop	r5
    5386:	4f 90       	pop	r4
    5388:	08 95       	ret

0000538a <uart_init>:
    538a:	a6 e0       	ldi	r26, 0x06	; 6
    538c:	b0 e0       	ldi	r27, 0x00	; 0
    538e:	eb ec       	ldi	r30, 0xCB	; 203
    5390:	f9 e2       	ldi	r31, 0x29	; 41
    5392:	0c 94 b4 e8 	jmp	0x1d168	; 0x1d168 <__prologue_saves__+0x20>
    5396:	1e 82       	std	Y+6, r1	; 0x06
    5398:	1d 82       	std	Y+5, r1	; 0x05
    539a:	81 11       	cpse	r24, r1
    539c:	36 c0       	rjmp	.+108    	; 0x540a <uart_init+0x80>
    539e:	cb 01       	movw	r24, r22
    53a0:	ba 01       	movw	r22, r20
    53a2:	9e 01       	movw	r18, r28
    53a4:	2f 5f       	subi	r18, 0xFF	; 255
    53a6:	3f 4f       	sbci	r19, 0xFF	; 255
    53a8:	ae 01       	movw	r20, r28
    53aa:	4b 5f       	subi	r20, 0xFB	; 251
    53ac:	5f 4f       	sbci	r21, 0xFF	; 255
    53ae:	53 df       	rcall	.-346    	; 0x5256 <uart_ubr>
    53b0:	f8 94       	cli
    53b2:	10 92 f3 19 	sts	0x19F3, r1	; 0x8019f3 <uarts+0x4>
    53b6:	10 92 f2 19 	sts	0x19F2, r1	; 0x8019f2 <uarts+0x3>
    53ba:	10 92 ef 19 	sts	0x19EF, r1	; 0x8019ef <uarts>
    53be:	10 92 f0 19 	sts	0x19F0, r1	; 0x8019f0 <uarts+0x1>
    53c2:	10 92 f1 19 	sts	0x19F1, r1	; 0x8019f1 <uarts+0x2>
    53c6:	10 92 f4 19 	sts	0x19F4, r1	; 0x8019f4 <uarts+0x5>
    53ca:	78 94       	sei
    53cc:	f8 94       	cli
    53ce:	58 9a       	sbi	0x0b, 0	; 11
    53d0:	59 9a       	sbi	0x0b, 1	; 11
    53d2:	50 98       	cbi	0x0a, 0	; 10
    53d4:	51 9a       	sbi	0x0a, 1	; 10
    53d6:	28 e9       	ldi	r18, 0x98	; 152
    53d8:	20 93 c1 00 	sts	0x00C1, r18	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    53dc:	2d 81       	ldd	r18, Y+5	; 0x05
    53de:	3e 81       	ldd	r19, Y+6	; 0x06
    53e0:	23 2b       	or	r18, r19
    53e2:	19 f0       	breq	.+6      	; 0x53ea <uart_init+0x60>
    53e4:	22 e0       	ldi	r18, 0x02	; 2
    53e6:	20 93 c0 00 	sts	0x00C0, r18	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    53ea:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
    53ee:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
    53f2:	78 94       	sei
    53f4:	6e eb       	ldi	r22, 0xBE	; 190
    53f6:	7a e2       	ldi	r23, 0x2A	; 42
    53f8:	83 ed       	ldi	r24, 0xD3	; 211
    53fa:	9a e2       	ldi	r25, 0x2A	; 42
    53fc:	0e 94 ca 79 	call	0xf394	; 0xf394 <fdevopen>
    5400:	69 81       	ldd	r22, Y+1	; 0x01
    5402:	7a 81       	ldd	r23, Y+2	; 0x02
    5404:	8b 81       	ldd	r24, Y+3	; 0x03
    5406:	9c 81       	ldd	r25, Y+4	; 0x04
    5408:	03 c0       	rjmp	.+6      	; 0x5410 <uart_init+0x86>
    540a:	60 e0       	ldi	r22, 0x00	; 0
    540c:	70 e0       	ldi	r23, 0x00	; 0
    540e:	cb 01       	movw	r24, r22
    5410:	26 96       	adiw	r28, 0x06	; 6
    5412:	e2 e0       	ldi	r30, 0x02	; 2
    5414:	0c 94 d0 e8 	jmp	0x1d1a0	; 0x1d1a0 <__epilogue_restores__+0x20>

00005418 <uart_rx_interrupt>:
    5418:	cf 93       	push	r28
    541a:	df 93       	push	r29
    541c:	27 e5       	ldi	r18, 0x57	; 87
    541e:	82 9f       	mul	r24, r18
    5420:	c0 01       	movw	r24, r0
    5422:	11 24       	eor	r1, r1
    5424:	fc 01       	movw	r30, r24
    5426:	e1 51       	subi	r30, 0x11	; 17
    5428:	f6 4e       	sbci	r31, 0xE6	; 230
    542a:	83 81       	ldd	r24, Z+3	; 0x03
    542c:	94 81       	ldd	r25, Z+4	; 0x04
    542e:	80 35       	cpi	r24, 0x50	; 80
    5430:	91 05       	cpc	r25, r1
    5432:	84 f4       	brge	.+32     	; 0x5454 <uart_rx_interrupt+0x3c>
    5434:	30 81       	ld	r19, Z
    5436:	21 e0       	ldi	r18, 0x01	; 1
    5438:	23 0f       	add	r18, r19
    543a:	20 83       	st	Z, r18
    543c:	ef 01       	movw	r28, r30
    543e:	c3 0f       	add	r28, r19
    5440:	d1 1d       	adc	r29, r1
    5442:	6f 77       	andi	r22, 0x7F	; 127
    5444:	6e 83       	std	Y+6, r22	; 0x06
    5446:	01 96       	adiw	r24, 0x01	; 1
    5448:	94 83       	std	Z+4, r25	; 0x04
    544a:	83 83       	std	Z+3, r24	; 0x03
    544c:	20 35       	cpi	r18, 0x50	; 80
    544e:	28 f0       	brcs	.+10     	; 0x545a <uart_rx_interrupt+0x42>
    5450:	10 82       	st	Z, r1
    5452:	03 c0       	rjmp	.+6      	; 0x545a <uart_rx_interrupt+0x42>
    5454:	85 81       	ldd	r24, Z+5	; 0x05
    5456:	81 60       	ori	r24, 0x01	; 1
    5458:	85 83       	std	Z+5, r24	; 0x05
    545a:	df 91       	pop	r29
    545c:	cf 91       	pop	r28
    545e:	08 95       	ret

00005460 <__vector_20>:
    5460:	1f 92       	push	r1
    5462:	0f 92       	push	r0
    5464:	0f b6       	in	r0, 0x3f	; 63
    5466:	0f 92       	push	r0
    5468:	11 24       	eor	r1, r1
    546a:	0b b6       	in	r0, 0x3b	; 59
    546c:	0f 92       	push	r0
    546e:	2f 93       	push	r18
    5470:	3f 93       	push	r19
    5472:	4f 93       	push	r20
    5474:	5f 93       	push	r21
    5476:	6f 93       	push	r22
    5478:	7f 93       	push	r23
    547a:	8f 93       	push	r24
    547c:	9f 93       	push	r25
    547e:	af 93       	push	r26
    5480:	bf 93       	push	r27
    5482:	ef 93       	push	r30
    5484:	ff 93       	push	r31
    5486:	60 91 c6 00 	lds	r22, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    548a:	80 e0       	ldi	r24, 0x00	; 0
    548c:	c5 df       	rcall	.-118    	; 0x5418 <uart_rx_interrupt>
    548e:	ff 91       	pop	r31
    5490:	ef 91       	pop	r30
    5492:	bf 91       	pop	r27
    5494:	af 91       	pop	r26
    5496:	9f 91       	pop	r25
    5498:	8f 91       	pop	r24
    549a:	7f 91       	pop	r23
    549c:	6f 91       	pop	r22
    549e:	5f 91       	pop	r21
    54a0:	4f 91       	pop	r20
    54a2:	3f 91       	pop	r19
    54a4:	2f 91       	pop	r18
    54a6:	0f 90       	pop	r0
    54a8:	0b be       	out	0x3b, r0	; 59
    54aa:	0f 90       	pop	r0
    54ac:	0f be       	out	0x3f, r0	; 63
    54ae:	0f 90       	pop	r0
    54b0:	1f 90       	pop	r1
    54b2:	18 95       	reti

000054b4 <uart_rx_count>:
/// @return  Character count in ring buffer.
int uart_rx_count(uint8_t uart)
{
    int count;

    if(uart >= UARTS)
    54b4:	81 11       	cpse	r24, r1
    54b6:	07 c0       	rjmp	.+14     	; 0x54c6 <uart_rx_count+0x12>
        return(EOF);

    cli();
    54b8:	f8 94       	cli

    count = uarts[uart].rx_count;
    54ba:	80 91 f2 19 	lds	r24, 0x19F2	; 0x8019f2 <uarts+0x3>
    54be:	90 91 f3 19 	lds	r25, 0x19F3	; 0x8019f3 <uarts+0x4>

    sei();
    54c2:	78 94       	sei

    return (count );
    54c4:	08 95       	ret
int uart_rx_count(uint8_t uart)
{
    int count;

    if(uart >= UARTS)
        return(EOF);
    54c6:	8f ef       	ldi	r24, 0xFF	; 255
    54c8:	9f ef       	ldi	r25, 0xFF	; 255
    count = uarts[uart].rx_count;

    sei();

    return (count );
}
    54ca:	08 95       	ret

000054cc <uart_get_tail>:
/// @see uart_rx_count().
int uart_get_tail(uint8_t uart)
{
    uint8_t c;

    if (uart >= UARTS)
    54cc:	81 11       	cpse	r24, r1
    54ce:	21 c0       	rjmp	.+66     	; 0x5512 <uart_get_tail+0x46>
    {
        return(EOF);
    }

    while(uart_rx_count(uart) < 1)
    54d0:	80 e0       	ldi	r24, 0x00	; 0
    54d2:	f0 df       	rcall	.-32     	; 0x54b4 <uart_rx_count>
    54d4:	18 16       	cp	r1, r24
    54d6:	19 06       	cpc	r1, r25
    54d8:	dc f7       	brge	.-10     	; 0x54d0 <uart_get_tail+0x4>
        ;

    cli();
    54da:	f8 94       	cli
    c = uarts[uart].rx_buf[uarts[uart].rx_tail++];
    54dc:	e0 91 f0 19 	lds	r30, 0x19F0	; 0x8019f0 <uarts+0x1>
    54e0:	91 e0       	ldi	r25, 0x01	; 1
    54e2:	9e 0f       	add	r25, r30
    54e4:	90 93 f0 19 	sts	0x19F0, r25	; 0x8019f0 <uarts+0x1>
    54e8:	f0 e0       	ldi	r31, 0x00	; 0
    54ea:	e1 51       	subi	r30, 0x11	; 17
    54ec:	f6 4e       	sbci	r31, 0xE6	; 230
    54ee:	86 81       	ldd	r24, Z+6	; 0x06
    if (uarts[uart].rx_tail >= RX_BUF_SIZE)
    54f0:	90 35       	cpi	r25, 0x50	; 80
    54f2:	10 f0       	brcs	.+4      	; 0x54f8 <uart_get_tail+0x2c>
        uarts[uart].rx_tail = 0;
    54f4:	10 92 f0 19 	sts	0x19F0, r1	; 0x8019f0 <uarts+0x1>
    uarts[uart].rx_count--;
    54f8:	20 91 f2 19 	lds	r18, 0x19F2	; 0x8019f2 <uarts+0x3>
    54fc:	30 91 f3 19 	lds	r19, 0x19F3	; 0x8019f3 <uarts+0x4>
    5500:	21 50       	subi	r18, 0x01	; 1
    5502:	31 09       	sbc	r19, r1
    5504:	30 93 f3 19 	sts	0x19F3, r19	; 0x8019f3 <uarts+0x4>
    5508:	20 93 f2 19 	sts	0x19F2, r18	; 0x8019f2 <uarts+0x3>
    sei();
    550c:	78 94       	sei

    return (c & 0xff);
    550e:	90 e0       	ldi	r25, 0x00	; 0
    5510:	08 95       	ret
{
    uint8_t c;

    if (uart >= UARTS)
    {
        return(EOF);
    5512:	8f ef       	ldi	r24, 0xFF	; 255
    5514:	9f ef       	ldi	r25, 0xFF	; 255
        uarts[uart].rx_tail = 0;
    uarts[uart].rx_count--;
    sei();

    return (c & 0xff);
}
    5516:	08 95       	ret

00005518 <uart_rx_byte>:
/// @param[in] uart: uart number.
///
/// @return  Character.
int uart_rx_byte(uint8_t uart)
{
    return( uart_get_tail(uart) & 0xff);
    5518:	d9 df       	rcall	.-78     	; 0x54cc <uart_get_tail>
}
    551a:	99 27       	eor	r25, r25
    551c:	08 95       	ret

0000551e <uart_tx_byte>:
/// @param[in] uart: uart number.
///
/// @return void.
int uart_tx_byte(int c, uint8_t uart)
{
    if(uart == 0)
    551e:	61 11       	cpse	r22, r1
    5520:	09 c0       	rjmp	.+18     	; 0x5534 <uart_tx_byte+0x16>
    {
        while (!BIT_TST(UCSR0A, UDRE0))
    5522:	20 91 c0 00 	lds	r18, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    5526:	25 ff       	sbrs	r18, 5
    5528:	fc cf       	rjmp	.-8      	; 0x5522 <uart_tx_byte+0x4>
            ;
        UDR0 = c & 0x7f;
    552a:	28 2f       	mov	r18, r24
    552c:	2f 77       	andi	r18, 0x7F	; 127
    552e:	20 93 c6 00 	sts	0x00C6, r18	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
        return(c);
    5532:	08 95       	ret
    }
#ifdef UARTS > 1
    if(uart == 1)
    5534:	61 30       	cpi	r22, 0x01	; 1
    5536:	49 f4       	brne	.+18     	; 0x554a <uart_tx_byte+0x2c>
    {
        while (!BIT_TST(UCSR1A, UDRE1))
    5538:	20 91 c8 00 	lds	r18, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
    553c:	25 ff       	sbrs	r18, 5
    553e:	fc cf       	rjmp	.-8      	; 0x5538 <uart_tx_byte+0x1a>
            ;
        UDR1 = c & 0x7f;
    5540:	28 2f       	mov	r18, r24
    5542:	2f 77       	andi	r18, 0x7F	; 127
    5544:	20 93 ce 00 	sts	0x00CE, r18	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
    5548:	08 95       	ret
        return(c);
    }
#endif
    return(EOF);
    554a:	8f ef       	ldi	r24, 0xFF	; 255
    554c:	9f ef       	ldi	r25, 0xFF	; 255
}
    554e:	08 95       	ret

00005550 <uart_getchar>:
///
/// @param[in] uart: uart number.
///
/// @return  Character.
int uart_getchar(uint8_t uart)
{
    5550:	cf 93       	push	r28
    uint8_t c;

    if(uart >= UARTS)
    5552:	81 11       	cpse	r24, r1
    5554:	0f c0       	rjmp	.+30     	; 0x5574 <uart_getchar+0x24>
        break;
    }
    if(c == '\r')
        c = '\n';
#endif
    c = uart_rx_byte(uart);
    5556:	e0 df       	rcall	.-64     	; 0x5518 <uart_rx_byte>
    5558:	c8 2f       	mov	r28, r24
    uart_tx_byte(c, uart);
    555a:	60 e0       	ldi	r22, 0x00	; 0
    555c:	90 e0       	ldi	r25, 0x00	; 0
    555e:	df df       	rcall	.-66     	; 0x551e <uart_tx_byte>
    if(c == '\r')
    5560:	cd 30       	cpi	r28, 0x0D	; 13
    5562:	29 f4       	brne	.+10     	; 0x556e <uart_getchar+0x1e>
    {
        c = '\n';
        uart_tx_byte(c, uart);
    5564:	60 e0       	ldi	r22, 0x00	; 0
    5566:	8a e0       	ldi	r24, 0x0A	; 10
    5568:	90 e0       	ldi	r25, 0x00	; 0
    556a:	d9 df       	rcall	.-78     	; 0x551e <uart_tx_byte>
#endif
    c = uart_rx_byte(uart);
    uart_tx_byte(c, uart);
    if(c == '\r')
    {
        c = '\n';
    556c:	ca e0       	ldi	r28, 0x0A	; 10
        uart_tx_byte(c, uart);
    }
//FIXME ECHO
    return (c);
    556e:	8c 2f       	mov	r24, r28
    5570:	90 e0       	ldi	r25, 0x00	; 0
    5572:	02 c0       	rjmp	.+4      	; 0x5578 <uart_getchar+0x28>
int uart_getchar(uint8_t uart)
{
    uint8_t c;

    if(uart >= UARTS)
        return(EOF);
    5574:	8f ef       	ldi	r24, 0xFF	; 255
    5576:	9f ef       	ldi	r25, 0xFF	; 255
        c = '\n';
        uart_tx_byte(c, uart);
    }
//FIXME ECHO
    return (c);
}
    5578:	cf 91       	pop	r28
    557a:	08 95       	ret

0000557c <uart0_getchar>:
///
/// @return  uart_getchar(0);.
/// @see fdevopen() from avr-libc.
int uart0_getchar( void *f  __attribute__((unused)))
{
    return( uart_getchar(0) );
    557c:	80 e0       	ldi	r24, 0x00	; 0
    557e:	e8 cf       	rjmp	.-48     	; 0x5550 <uart_getchar>
}
    5580:	08 95       	ret

00005582 <uart_putchar>:
/// @param[in] c: transmit character.
/// @param[in] uart: uart number.
///
/// @return void.
int uart_putchar(int c, int uart)
{
    5582:	1f 93       	push	r17
    5584:	cf 93       	push	r28
    5586:	df 93       	push	r29
    5588:	ec 01       	movw	r28, r24
    558a:	16 2f       	mov	r17, r22
    uart_tx_byte(c, uart);
    558c:	c8 df       	rcall	.-112    	; 0x551e <uart_tx_byte>

    if( c == '\n' )
    558e:	ca 30       	cpi	r28, 0x0A	; 10
    5590:	d1 05       	cpc	r29, r1
    5592:	21 f4       	brne	.+8      	; 0x559c <uart_putchar+0x1a>
        uart_tx_byte('\r', uart);
    5594:	61 2f       	mov	r22, r17
    5596:	8d e0       	ldi	r24, 0x0D	; 13
    5598:	90 e0       	ldi	r25, 0x00	; 0
    559a:	c1 df       	rcall	.-126    	; 0x551e <uart_tx_byte>

    return(c);
}
    559c:	ce 01       	movw	r24, r28
    559e:	df 91       	pop	r29
    55a0:	cf 91       	pop	r28
    55a2:	1f 91       	pop	r17
    55a4:	08 95       	ret

000055a6 <uart0_putchar>:
/// @param[in] f: unused FILE *stream pointer.
///
/// @return  uart_putchar(c, 0);.
/// @see fdevopen() from avr-libc.
int uart0_putchar(int c, void *f  __attribute__((unused)))
{
    55a6:	cf 93       	push	r28
    55a8:	df 93       	push	r29
    55aa:	ec 01       	movw	r28, r24
    uart_putchar(c, 0);
    55ac:	60 e0       	ldi	r22, 0x00	; 0
    55ae:	70 e0       	ldi	r23, 0x00	; 0
    55b0:	e8 df       	rcall	.-48     	; 0x5582 <uart_putchar>
    return(c);
}
    55b2:	ce 01       	movw	r24, r28
    55b4:	df 91       	pop	r29
    55b6:	cf 91       	pop	r28
    55b8:	08 95       	ret

000055ba <uart_keyhit>:
/// @param[in] uart: uart number.
///
/// @return  Character count in receive buffer.
int uart_keyhit(uint8_t uart)
{
    return ( uart_rx_count( uart ) );
    55ba:	7c cf       	rjmp	.-264    	; 0x54b4 <uart_rx_count>
}
    55bc:	08 95       	ret

000055be <SPI0_Speed>:
/// @brief  Return saved SPI mode as set by SPI0_Mode().
/// @return  saved mode.
int SPI0_Get_Mode( void )
{
    return(SPI0_Mode_value);
}
    55be:	8f 92       	push	r8
    55c0:	9f 92       	push	r9
    55c2:	af 92       	push	r10
    55c4:	bf 92       	push	r11
    55c6:	cf 92       	push	r12
    55c8:	df 92       	push	r13
    55ca:	ef 92       	push	r14
    55cc:	ff 92       	push	r15
    55ce:	ad b7       	in	r26, 0x3d	; 61
    55d0:	be b7       	in	r27, 0x3e	; 62
    55d2:	17 97       	sbiw	r26, 0x07	; 7
    55d4:	0f b6       	in	r0, 0x3f	; 63
    55d6:	f8 94       	cli
    55d8:	be bf       	out	0x3e, r27	; 62
    55da:	0f be       	out	0x3f, r0	; 63
    55dc:	ad bf       	out	0x3d, r26	; 61
    55de:	c0 90 51 17 	lds	r12, 0x1751	; 0x801751 <SPI0_Speed_value>
    55e2:	d0 90 52 17 	lds	r13, 0x1752	; 0x801752 <SPI0_Speed_value+0x1>
    55e6:	e0 90 53 17 	lds	r14, 0x1753	; 0x801753 <SPI0_Speed_value+0x2>
    55ea:	f0 90 54 17 	lds	r15, 0x1754	; 0x801754 <SPI0_Speed_value+0x3>
    55ee:	c6 16       	cp	r12, r22
    55f0:	d7 06       	cpc	r13, r23
    55f2:	e8 06       	cpc	r14, r24
    55f4:	f9 06       	cpc	r15, r25
    55f6:	09 f4       	brne	.+2      	; 0x55fa <SPI0_Speed+0x3c>
    55f8:	70 c0       	rjmp	.+224    	; 0x56da <SPI0_Speed+0x11c>
    55fa:	4b 01       	movw	r8, r22
    55fc:	5c 01       	movw	r10, r24
    55fe:	dc 01       	movw	r26, r24
    5600:	cb 01       	movw	r24, r22
    5602:	b6 95       	lsr	r27
    5604:	a7 95       	ror	r26
    5606:	97 95       	ror	r25
    5608:	87 95       	ror	r24
    560a:	bc 01       	movw	r22, r24
    560c:	cd 01       	movw	r24, r26
    560e:	73 5d       	subi	r23, 0xD3	; 211
    5610:	8e 4c       	sbci	r24, 0xCE	; 206
    5612:	9e 4f       	sbci	r25, 0xFE	; 254
    5614:	a5 01       	movw	r20, r10
    5616:	94 01       	movw	r18, r8
    5618:	0e 94 37 e8 	call	0x1d06e	; 0x1d06e <__udivmodsi4>
    561c:	69 01       	movw	r12, r18
    561e:	7a 01       	movw	r14, r20
    5620:	ed b7       	in	r30, 0x3d	; 61
    5622:	fe b7       	in	r31, 0x3e	; 62
    5624:	24 83       	std	Z+4, r18	; 0x04
    5626:	35 83       	std	Z+5, r19	; 0x05
    5628:	46 83       	std	Z+6, r20	; 0x06
    562a:	57 83       	std	Z+7, r21	; 0x07
    562c:	84 e2       	ldi	r24, 0x24	; 36
    562e:	93 e0       	ldi	r25, 0x03	; 3
    5630:	a0 e0       	ldi	r26, 0x00	; 0
    5632:	81 83       	std	Z+1, r24	; 0x01
    5634:	92 83       	std	Z+2, r25	; 0x02
    5636:	a3 83       	std	Z+3, r26	; 0x03
    5638:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
    563c:	f0 e8       	ldi	r31, 0x80	; 128
    563e:	cf 16       	cp	r12, r31
    5640:	d1 04       	cpc	r13, r1
    5642:	e1 04       	cpc	r14, r1
    5644:	f1 04       	cpc	r15, r1
    5646:	30 f4       	brcc	.+12     	; 0x5654 <SPI0_Speed+0x96>
    5648:	80 e4       	ldi	r24, 0x40	; 64
    564a:	c8 16       	cp	r12, r24
    564c:	d1 04       	cpc	r13, r1
    564e:	e1 04       	cpc	r14, r1
    5650:	f1 04       	cpc	r15, r1
    5652:	30 f0       	brcs	.+12     	; 0x5660 <SPI0_Speed+0xa2>
    5654:	8d b5       	in	r24, 0x2d	; 45
    5656:	8e 7f       	andi	r24, 0xFE	; 254
    5658:	8d bd       	out	0x2d, r24	; 45
    565a:	8c b5       	in	r24, 0x2c	; 44
    565c:	82 60       	ori	r24, 0x02	; 2
    565e:	20 c0       	rjmp	.+64     	; 0x56a0 <SPI0_Speed+0xe2>
    5660:	e0 e2       	ldi	r30, 0x20	; 32
    5662:	ce 16       	cp	r12, r30
    5664:	d1 04       	cpc	r13, r1
    5666:	e1 04       	cpc	r14, r1
    5668:	f1 04       	cpc	r15, r1
    566a:	30 f0       	brcs	.+12     	; 0x5678 <SPI0_Speed+0xba>
    566c:	8d b5       	in	r24, 0x2d	; 45
    566e:	81 60       	ori	r24, 0x01	; 1
    5670:	8d bd       	out	0x2d, r24	; 45
    5672:	8c b5       	in	r24, 0x2c	; 44
    5674:	82 60       	ori	r24, 0x02	; 2
    5676:	25 c0       	rjmp	.+74     	; 0x56c2 <SPI0_Speed+0x104>
    5678:	f0 e1       	ldi	r31, 0x10	; 16
    567a:	cf 16       	cp	r12, r31
    567c:	d1 04       	cpc	r13, r1
    567e:	e1 04       	cpc	r14, r1
    5680:	f1 04       	cpc	r15, r1
    5682:	18 f0       	brcs	.+6      	; 0x568a <SPI0_Speed+0xcc>
    5684:	8d b5       	in	r24, 0x2d	; 45
    5686:	8e 7f       	andi	r24, 0xFE	; 254
    5688:	08 c0       	rjmp	.+16     	; 0x569a <SPI0_Speed+0xdc>
    568a:	88 e0       	ldi	r24, 0x08	; 8
    568c:	c8 16       	cp	r12, r24
    568e:	d1 04       	cpc	r13, r1
    5690:	e1 04       	cpc	r14, r1
    5692:	f1 04       	cpc	r15, r1
    5694:	48 f0       	brcs	.+18     	; 0x56a8 <SPI0_Speed+0xea>
    5696:	8d b5       	in	r24, 0x2d	; 45
    5698:	81 60       	ori	r24, 0x01	; 1
    569a:	8d bd       	out	0x2d, r24	; 45
    569c:	8c b5       	in	r24, 0x2c	; 44
    569e:	8d 7f       	andi	r24, 0xFD	; 253
    56a0:	8c bd       	out	0x2c, r24	; 44
    56a2:	8c b5       	in	r24, 0x2c	; 44
    56a4:	81 60       	ori	r24, 0x01	; 1
    56a6:	10 c0       	rjmp	.+32     	; 0x56c8 <SPI0_Speed+0x10a>
    56a8:	8d b5       	in	r24, 0x2d	; 45
    56aa:	e4 e0       	ldi	r30, 0x04	; 4
    56ac:	ce 16       	cp	r12, r30
    56ae:	d1 04       	cpc	r13, r1
    56b0:	e1 04       	cpc	r14, r1
    56b2:	f1 04       	cpc	r15, r1
    56b4:	10 f0       	brcs	.+4      	; 0x56ba <SPI0_Speed+0xfc>
    56b6:	8e 7f       	andi	r24, 0xFE	; 254
    56b8:	01 c0       	rjmp	.+2      	; 0x56bc <SPI0_Speed+0xfe>
    56ba:	81 60       	ori	r24, 0x01	; 1
    56bc:	8d bd       	out	0x2d, r24	; 45
    56be:	8c b5       	in	r24, 0x2c	; 44
    56c0:	8d 7f       	andi	r24, 0xFD	; 253
    56c2:	8c bd       	out	0x2c, r24	; 44
    56c4:	8c b5       	in	r24, 0x2c	; 44
    56c6:	8e 7f       	andi	r24, 0xFE	; 254
    56c8:	8c bd       	out	0x2c, r24	; 44
    56ca:	80 92 51 17 	sts	0x1751, r8	; 0x801751 <SPI0_Speed_value>
    56ce:	90 92 52 17 	sts	0x1752, r9	; 0x801752 <SPI0_Speed_value+0x1>
    56d2:	a0 92 53 17 	sts	0x1753, r10	; 0x801753 <SPI0_Speed_value+0x2>
    56d6:	b0 92 54 17 	sts	0x1754, r11	; 0x801754 <SPI0_Speed_value+0x3>
    56da:	ad b7       	in	r26, 0x3d	; 61
    56dc:	be b7       	in	r27, 0x3e	; 62
    56de:	17 96       	adiw	r26, 0x07	; 7
    56e0:	0f b6       	in	r0, 0x3f	; 63
    56e2:	f8 94       	cli
    56e4:	be bf       	out	0x3e, r27	; 62
    56e6:	0f be       	out	0x3f, r0	; 63
    56e8:	ad bf       	out	0x3d, r26	; 61
    56ea:	ff 90       	pop	r15
    56ec:	ef 90       	pop	r14
    56ee:	df 90       	pop	r13
    56f0:	cf 90       	pop	r12
    56f2:	bf 90       	pop	r11
    56f4:	af 90       	pop	r10
    56f6:	9f 90       	pop	r9
    56f8:	8f 90       	pop	r8
    56fa:	08 95       	ret

000056fc <SPI0_Mode>:
    56fc:	cf 93       	push	r28
    56fe:	df 93       	push	r29
    5700:	00 d0       	rcall	.+0      	; 0x5702 <SPI0_Mode+0x6>
    5702:	00 d0       	rcall	.+0      	; 0x5704 <SPI0_Mode+0x8>
    5704:	1f 92       	push	r1
    5706:	ec 01       	movw	r28, r24
    5708:	81 30       	cpi	r24, 0x01	; 1
    570a:	91 05       	cpc	r25, r1
    570c:	71 f0       	breq	.+28     	; 0x572a <SPI0_Mode+0x2e>
    570e:	2c f4       	brge	.+10     	; 0x571a <SPI0_Mode+0x1e>
    5710:	89 2b       	or	r24, r25
    5712:	c1 f4       	brne	.+48     	; 0x5744 <SPI0_Mode+0x48>
    5714:	8c b5       	in	r24, 0x2c	; 44
    5716:	87 7f       	andi	r24, 0xF7	; 247
    5718:	11 c0       	rjmp	.+34     	; 0x573c <SPI0_Mode+0x40>
    571a:	82 30       	cpi	r24, 0x02	; 2
    571c:	91 05       	cpc	r25, r1
    571e:	61 f0       	breq	.+24     	; 0x5738 <SPI0_Mode+0x3c>
    5720:	03 97       	sbiw	r24, 0x03	; 3
    5722:	81 f4       	brne	.+32     	; 0x5744 <SPI0_Mode+0x48>
    5724:	8c b5       	in	r24, 0x2c	; 44
    5726:	88 60       	ori	r24, 0x08	; 8
    5728:	02 c0       	rjmp	.+4      	; 0x572e <SPI0_Mode+0x32>
    572a:	8c b5       	in	r24, 0x2c	; 44
    572c:	87 7f       	andi	r24, 0xF7	; 247
    572e:	8c bd       	out	0x2c, r24	; 44
    5730:	8c b5       	in	r24, 0x2c	; 44
    5732:	84 60       	ori	r24, 0x04	; 4
    5734:	8c bd       	out	0x2c, r24	; 44
    5736:	12 c0       	rjmp	.+36     	; 0x575c <SPI0_Mode+0x60>
    5738:	8c b5       	in	r24, 0x2c	; 44
    573a:	88 60       	ori	r24, 0x08	; 8
    573c:	8c bd       	out	0x2c, r24	; 44
    573e:	8c b5       	in	r24, 0x2c	; 44
    5740:	8b 7f       	andi	r24, 0xFB	; 251
    5742:	f8 cf       	rjmp	.-16     	; 0x5734 <SPI0_Mode+0x38>
    5744:	ed b7       	in	r30, 0x3d	; 61
    5746:	fe b7       	in	r31, 0x3e	; 62
    5748:	d5 83       	std	Z+5, r29	; 0x05
    574a:	c4 83       	std	Z+4, r28	; 0x04
    574c:	87 e0       	ldi	r24, 0x07	; 7
    574e:	93 e0       	ldi	r25, 0x03	; 3
    5750:	a0 e0       	ldi	r26, 0x00	; 0
    5752:	81 83       	std	Z+1, r24	; 0x01
    5754:	92 83       	std	Z+2, r25	; 0x02
    5756:	a3 83       	std	Z+3, r26	; 0x03
    5758:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
    575c:	d0 93 50 17 	sts	0x1750, r29	; 0x801750 <SPI0_Mode_value+0x1>
    5760:	c0 93 4f 17 	sts	0x174F, r28	; 0x80174f <SPI0_Mode_value>
    5764:	cd b7       	in	r28, 0x3d	; 61
    5766:	de b7       	in	r29, 0x3e	; 62
    5768:	25 96       	adiw	r28, 0x05	; 5
    576a:	e2 e0       	ldi	r30, 0x02	; 2
    576c:	0c 94 d0 e8 	jmp	0x1d1a0	; 0x1d1a0 <__epilogue_restores__+0x20>

00005770 <SPI0_TXRX_Byte>:
/// @param[in] Data: Data to send.
///
/// @return  Data received.
uint8_t SPI0_TXRX_Byte(uint8_t Data)
{
    SPDR = Data;                                  // Transmit
    5770:	8e bd       	out	0x2e, r24	; 46

    while( !BIT_TST(SPSR,SPIF) )                  // Wait for send
    5772:	0d b4       	in	r0, 0x2d	; 45
    5774:	07 fe       	sbrs	r0, 7
    5776:	fd cf       	rjmp	.-6      	; 0x5772 <SPI0_TXRX_Byte+0x2>
        ;

    return (SPDR);                                // Received Data
    5778:	8e b5       	in	r24, 0x2e	; 46
}
    577a:	08 95       	ret

0000577c <SPI0_Init>:

///@brief Initialize SPI0 device.
/// See Atmel App Note AVR151
/// Set default speed, IO pins and mode.
void SPI0_Init(uint32_t speed)
{
    577c:	cf 92       	push	r12
    577e:	df 92       	push	r13
    5780:	ef 92       	push	r14
    5782:	ff 92       	push	r15
    5784:	cf 93       	push	r28
    5786:	df 93       	push	r29
    5788:	1f 92       	push	r1
    578a:	cd b7       	in	r28, 0x3d	; 61
    578c:	de b7       	in	r29, 0x3e	; 62
    578e:	6b 01       	movw	r12, r22
    5790:	7c 01       	movw	r14, r24
    printf("Port B DDR:   0x%02x\n", (int) GPIO_PORT_DDR_RD(GPIO_B));
    printf("Port B LATCH: 0x%02x\n", (int) GPIO_PORT_LATCH_RD(GPIO_B));
    printf("Port B PINS:  0x%02x\n", (int) GPIO_PORT_LATCH_RD(GPIO_B));
#endif

    SPCR = 0;                                     // Clear SPCR in case we are not called after RESET
    5792:	1c bc       	out	0x2c, r1	; 44

    GPIO_PIN_HI(SCK);                             // SCK Output
    5794:	2f 9a       	sbi	0x05, 7	; 5
    5796:	27 9a       	sbi	0x04, 7	; 4
    GPIO_PIN_HI(MOSI);                            // MOSI Output
    5798:	2d 9a       	sbi	0x05, 5	; 5
    579a:	25 9a       	sbi	0x04, 5	; 4
    GPIO_PIN_FLOAT(MISO);                         // MISO Input, no pull-up
    579c:	26 98       	cbi	0x04, 6	; 4

// Warning *** MSTR MUST be set BEFORE SPE!!!! *** otherwise SS will NOT behave as an output
    GPIO_PIN_LOW(SS);                             // SS Output must be HI prevent slave mode from getting set while initializing
    579e:	2c 98       	cbi	0x05, 4	; 5
    57a0:	24 9a       	sbi	0x04, 4	; 4
    BIT_SET(SPCR, MSTR);                          // Master Mode
    57a2:	8c b5       	in	r24, 0x2c	; 44
    57a4:	80 61       	ori	r24, 0x10	; 16
    57a6:	8c bd       	out	0x2c, r24	; 44
    BIT_SET(SPCR, SPE);                           // Enable SPI
    57a8:	8c b5       	in	r24, 0x2c	; 44
    57aa:	80 64       	ori	r24, 0x40	; 64
    57ac:	8c bd       	out	0x2c, r24	; 44

// SPI Clear any pending interrupt flags
    D = SPSR;
    57ae:	8d b5       	in	r24, 0x2d	; 45
    57b0:	89 83       	std	Y+1, r24	; 0x01
    D = SPDR;
    57b2:	8e b5       	in	r24, 0x2e	; 46
    57b4:	89 83       	std	Y+1, r24	; 0x01

/// Set SPI clock mode 0
///  SPI Mode     CPOL    CPHA            Sample
///  0    0       0       Leading (Rising)   Edge
    SPI0_Mode(0);
    57b6:	80 e0       	ldi	r24, 0x00	; 0
    57b8:	90 e0       	ldi	r25, 0x00	; 0
    57ba:	a0 df       	rcall	.-192    	; 0x56fc <SPI0_Mode>

// Set SPI clock speed
    SPI0_Speed(speed);
    57bc:	c7 01       	movw	r24, r14
    57be:	b6 01       	movw	r22, r12
    57c0:	fe de       	rcall	.-516    	; 0x55be <SPI0_Speed>

    SPI0_TXRX_Byte(0xff);                         // Send dummy 0xFF
    57c2:	8f ef       	ldi	r24, 0xFF	; 255
    57c4:	d5 df       	rcall	.-86     	; 0x5770 <SPI0_TXRX_Byte>
    57c6:	0f 90       	pop	r0
    SPI0_Init_state = 1;

}
    57c8:	df 91       	pop	r29
    57ca:	cf 91       	pop	r28
    57cc:	ff 90       	pop	r15
    57ce:	ef 90       	pop	r14
    57d0:	df 90       	pop	r13
    57d2:	cf 90       	pop	r12
    57d4:	08 95       	ret

000057d6 <SPI0_TX>:
    57d6:	0f 93       	push	r16
/// @brief HSPI write using FIFO
/// @param[in] *data: transmit buffer
/// @param[in] count: number of bytes to write
/// @return  void
void SPI0_TX(uint8_t *data, int count)
{
    57d8:	1f 93       	push	r17
    57da:	cf 93       	push	r28
    57dc:	df 93       	push	r29
    57de:	8c 01       	movw	r16, r24
    57e0:	eb 01       	movw	r28, r22

    while(count > 0)
    57e2:	1c 16       	cp	r1, r28
    57e4:	1d 06       	cpc	r1, r29
    57e6:	34 f4       	brge	.+12     	; 0x57f4 <SPI0_TX+0x1e>
    {
        SPI0_TXRX_Byte(*data);
    57e8:	f8 01       	movw	r30, r16
    57ea:	81 91       	ld	r24, Z+
    57ec:	8f 01       	movw	r16, r30
    57ee:	c0 df       	rcall	.-128    	; 0x5770 <SPI0_TXRX_Byte>
        ++data;
        --count;
    57f0:	21 97       	sbiw	r28, 0x01	; 1
    57f2:	f7 cf       	rjmp	.-18     	; 0x57e2 <SPI0_TX+0xc>
    }
}
    57f4:	df 91       	pop	r29
    57f6:	cf 91       	pop	r28
    57f8:	1f 91       	pop	r17
    57fa:	0f 91       	pop	r16
    57fc:	08 95       	ret

000057fe <SPI0_TXRX>:
/// @param[in] *data: transmit / receive buffer
/// @param[in] count: number of bytes to write / read
/// @return  void

void SPI0_TXRX(uint8_t *data, int count)
{
    57fe:	0f 93       	push	r16
    5800:	1f 93       	push	r17
    5802:	cf 93       	push	r28
    5804:	df 93       	push	r29
    5806:	8c 01       	movw	r16, r24
    5808:	eb 01       	movw	r28, r22

    while(count > 0)
    580a:	1c 16       	cp	r1, r28
    580c:	1d 06       	cpc	r1, r29
    580e:	44 f4       	brge	.+16     	; 0x5820 <SPI0_TXRX+0x22>
    {
        *data = SPI0_TXRX_Byte(*data);
    5810:	f8 01       	movw	r30, r16
    5812:	80 81       	ld	r24, Z
    5814:	ad df       	rcall	.-166    	; 0x5770 <SPI0_TXRX_Byte>
    5816:	f8 01       	movw	r30, r16
    5818:	81 93       	st	Z+, r24
    581a:	8f 01       	movw	r16, r30
        ++data;
        --count;
    581c:	21 97       	sbiw	r28, 0x01	; 1
    581e:	f5 cf       	rjmp	.-22     	; 0x580a <SPI0_TXRX+0xc>
    }
}
    5820:	df 91       	pop	r29
    5822:	cf 91       	pop	r28
    5824:	1f 91       	pop	r17
    5826:	0f 91       	pop	r16
    5828:	08 95       	ret

0000582a <SPI0_RX>:
/// @brief HSPI read using FIFO
/// @param[in] *data: receive buffer
/// @param[in] count: number of bytes to read
/// @return  void
void SPI0_RX(uint8_t *data, int count)
{
    582a:	0f 93       	push	r16
    582c:	1f 93       	push	r17
    582e:	cf 93       	push	r28
    5830:	df 93       	push	r29
    5832:	8c 01       	movw	r16, r24
    5834:	eb 01       	movw	r28, r22

    while(count > 0)
    5836:	1c 16       	cp	r1, r28
    5838:	1d 06       	cpc	r1, r29
    583a:	3c f4       	brge	.+14     	; 0x584a <SPI0_RX+0x20>
    {
        *data = SPI0_TXRX_Byte(0xff);
    583c:	8f ef       	ldi	r24, 0xFF	; 255
    583e:	98 df       	rcall	.-208    	; 0x5770 <SPI0_TXRX_Byte>
    5840:	f8 01       	movw	r30, r16
    5842:	81 93       	st	Z+, r24
    5844:	8f 01       	movw	r16, r30
        ++data;
        --count;
    5846:	21 97       	sbiw	r28, 0x01	; 1
    5848:	f6 cf       	rjmp	.-20     	; 0x5836 <SPI0_RX+0xc>
    }
}
    584a:	df 91       	pop	r29
    584c:	cf 91       	pop	r28
    584e:	1f 91       	pop	r17
    5850:	0f 91       	pop	r16
    5852:	08 95       	ret

00005854 <i2c_timer>:
int8_t i2c_ok()
{
	if (i2c.flags) 
		return(0);
	return(1);
}
    5854:	2f b7       	in	r18, 0x3f	; 63
    5856:	80 91 47 1a 	lds	r24, 0x1A47	; 0x801a47 <i2c+0x1>
    585a:	81 11       	cpse	r24, r1
    585c:	04 c0       	rjmp	.+8      	; 0x5866 <i2c_timer+0x12>
    585e:	80 91 48 1a 	lds	r24, 0x1A48	; 0x801a48 <i2c+0x2>
    5862:	81 11       	cpse	r24, r1
    5864:	0b c0       	rjmp	.+22     	; 0x587c <i2c_timer+0x28>
    5866:	80 91 4a 1a 	lds	r24, 0x1A4A	; 0x801a4a <i2c+0x4>
    586a:	90 91 4b 1a 	lds	r25, 0x1A4B	; 0x801a4b <i2c+0x5>
    586e:	00 97       	sbiw	r24, 0x00	; 0
    5870:	29 f0       	breq	.+10     	; 0x587c <i2c_timer+0x28>
    5872:	01 97       	sbiw	r24, 0x01	; 1
    5874:	90 93 4b 1a 	sts	0x1A4B, r25	; 0x801a4b <i2c+0x5>
    5878:	80 93 4a 1a 	sts	0x1A4A, r24	; 0x801a4a <i2c+0x4>
    587c:	2f bf       	out	0x3f, r18	; 63
    587e:	08 95       	ret

00005880 <i2c_check_op>:
    5880:	ad b7       	in	r26, 0x3d	; 61
    5882:	be b7       	in	r27, 0x3e	; 62
    5884:	17 97       	sbiw	r26, 0x07	; 7
    5886:	0f b6       	in	r0, 0x3f	; 63
    5888:	f8 94       	cli
    588a:	be bf       	out	0x3e, r27	; 62
    588c:	0f be       	out	0x3f, r0	; 63
    588e:	ad bf       	out	0x3d, r26	; 61
    5890:	28 2f       	mov	r18, r24
    5892:	08 2e       	mov	r0, r24
    5894:	00 0c       	add	r0, r0
    5896:	33 0b       	sbc	r19, r19
    5898:	80 31       	cpi	r24, 0x10	; 16
    589a:	88 f0       	brcs	.+34     	; 0x58be <i2c_check_op+0x3e>
    589c:	80 e1       	ldi	r24, 0x10	; 16
    589e:	90 e0       	ldi	r25, 0x00	; 0
    58a0:	ed b7       	in	r30, 0x3d	; 61
    58a2:	fe b7       	in	r31, 0x3e	; 62
    58a4:	97 83       	std	Z+7, r25	; 0x07
    58a6:	86 83       	std	Z+6, r24	; 0x06
    58a8:	35 83       	std	Z+5, r19	; 0x05
    58aa:	24 83       	std	Z+4, r18	; 0x04
    58ac:	8b e2       	ldi	r24, 0x2B	; 43
    58ae:	94 e0       	ldi	r25, 0x04	; 4
    58b0:	a0 e0       	ldi	r26, 0x00	; 0
    58b2:	81 83       	std	Z+1, r24	; 0x01
    58b4:	92 83       	std	Z+2, r25	; 0x02
    58b6:	a3 83       	std	Z+3, r26	; 0x03
    58b8:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
    58bc:	24 c0       	rjmp	.+72     	; 0x5906 <i2c_check_op+0x86>
    58be:	f9 01       	movw	r30, r18
    58c0:	ee 0f       	add	r30, r30
    58c2:	ff 1f       	adc	r31, r31
    58c4:	ea 5a       	subi	r30, 0xAA	; 170
    58c6:	f8 4e       	sbci	r31, 0xE8	; 232
    58c8:	01 90       	ld	r0, Z+
    58ca:	f0 81       	ld	r31, Z
    58cc:	e0 2d       	mov	r30, r0
    58ce:	30 97       	sbiw	r30, 0x00	; 0
    58d0:	d1 f0       	breq	.+52     	; 0x5906 <i2c_check_op+0x86>
    58d2:	80 85       	ldd	r24, Z+8	; 0x08
    58d4:	91 85       	ldd	r25, Z+9	; 0x09
    58d6:	89 2b       	or	r24, r25
    58d8:	39 f4       	brne	.+14     	; 0x58e8 <i2c_check_op+0x68>
    58da:	ed b7       	in	r30, 0x3d	; 61
    58dc:	fe b7       	in	r31, 0x3e	; 62
    58de:	35 83       	std	Z+5, r19	; 0x05
    58e0:	24 83       	std	Z+4, r18	; 0x04
    58e2:	82 e1       	ldi	r24, 0x12	; 18
    58e4:	94 e0       	ldi	r25, 0x04	; 4
    58e6:	09 c0       	rjmp	.+18     	; 0x58fa <i2c_check_op+0x7a>
    58e8:	86 81       	ldd	r24, Z+6	; 0x06
    58ea:	81 11       	cpse	r24, r1
    58ec:	0e c0       	rjmp	.+28     	; 0x590a <i2c_check_op+0x8a>
    58ee:	ed b7       	in	r30, 0x3d	; 61
    58f0:	fe b7       	in	r31, 0x3e	; 62
    58f2:	35 83       	std	Z+5, r19	; 0x05
    58f4:	24 83       	std	Z+4, r18	; 0x04
    58f6:	8c ef       	ldi	r24, 0xFC	; 252
    58f8:	93 e0       	ldi	r25, 0x03	; 3
    58fa:	a0 e0       	ldi	r26, 0x00	; 0
    58fc:	81 83       	std	Z+1, r24	; 0x01
    58fe:	92 83       	std	Z+2, r25	; 0x02
    5900:	a3 83       	std	Z+3, r26	; 0x03
    5902:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
    5906:	80 e0       	ldi	r24, 0x00	; 0
    5908:	01 c0       	rjmp	.+2      	; 0x590c <i2c_check_op+0x8c>
    590a:	81 e0       	ldi	r24, 0x01	; 1
    590c:	ad b7       	in	r26, 0x3d	; 61
    590e:	be b7       	in	r27, 0x3e	; 62
    5910:	17 96       	adiw	r26, 0x07	; 7
    5912:	0f b6       	in	r0, 0x3f	; 63
    5914:	f8 94       	cli
    5916:	be bf       	out	0x3e, r27	; 62
    5918:	0f be       	out	0x3f, r0	; 63
    591a:	ad bf       	out	0x3d, r26	; 61
    591c:	08 95       	ret

0000591e <i2c_task_init>:
    591e:	8f b7       	in	r24, 0x3f	; 63
    5920:	f8 94       	cli
    5922:	e6 e5       	ldi	r30, 0x56	; 86
    5924:	f7 e1       	ldi	r31, 0x17	; 23
    5926:	11 92       	st	Z+, r1
    5928:	11 92       	st	Z+, r1
    592a:	97 e1       	ldi	r25, 0x17	; 23
    592c:	e6 37       	cpi	r30, 0x76	; 118
    592e:	f9 07       	cpc	r31, r25
    5930:	d1 f7       	brne	.-12     	; 0x5926 <i2c_task_init+0x8>
    5932:	10 92 76 17 	sts	0x1776, r1	; 0x801776 <i2c_task>
    5936:	91 e0       	ldi	r25, 0x01	; 1
    5938:	90 93 78 17 	sts	0x1778, r25	; 0x801778 <i2c_task+0x2>
    593c:	10 92 77 17 	sts	0x1777, r1	; 0x801777 <i2c_task+0x1>
    5940:	10 92 79 17 	sts	0x1779, r1	; 0x801779 <i2c_task+0x3>
    5944:	8f bf       	out	0x3f, r24	; 63
    5946:	08 95       	ret

00005948 <i2c_task_op_add>:
    5948:	ef 92       	push	r14
    594a:	ff 92       	push	r15
    594c:	0f 93       	push	r16
    594e:	1f 93       	push	r17
    5950:	cf 93       	push	r28
    5952:	df 93       	push	r29
    5954:	d8 2f       	mov	r29, r24
    5956:	c6 2f       	mov	r28, r22
    5958:	7a 01       	movw	r14, r20
    595a:	02 2f       	mov	r16, r18
    595c:	1f b7       	in	r17, 0x3f	; 63
    595e:	6a e0       	ldi	r22, 0x0A	; 10
    5960:	70 e0       	ldi	r23, 0x00	; 0
    5962:	81 e0       	ldi	r24, 0x01	; 1
    5964:	90 e0       	ldi	r25, 0x00	; 0
    5966:	74 db       	rcall	.-2328   	; 0x5050 <safecalloc>
    5968:	fc 01       	movw	r30, r24
    596a:	89 2b       	or	r24, r25
    596c:	89 f0       	breq	.+34     	; 0x5990 <i2c_task_op_add+0x48>
    596e:	f8 94       	cli
    5970:	11 82       	std	Z+1, r1	; 0x01
    5972:	12 82       	std	Z+2, r1	; 0x02
    5974:	dd 0f       	add	r29, r29
    5976:	c1 70       	andi	r28, 0x01	; 1
    5978:	cd 2b       	or	r28, r29
    597a:	c0 83       	st	Z, r28
    597c:	8a e0       	ldi	r24, 0x0A	; 10
    597e:	90 e0       	ldi	r25, 0x00	; 0
    5980:	95 83       	std	Z+5, r25	; 0x05
    5982:	84 83       	std	Z+4, r24	; 0x04
    5984:	13 82       	std	Z+3, r1	; 0x03
    5986:	06 83       	std	Z+6, r16	; 0x06
    5988:	17 82       	std	Z+7, r1	; 0x07
    598a:	f1 86       	std	Z+9, r15	; 0x09
    598c:	e0 86       	std	Z+8, r14	; 0x08
    598e:	1f bf       	out	0x3f, r17	; 63
    5990:	cf 01       	movw	r24, r30
    5992:	cd b7       	in	r28, 0x3d	; 61
    5994:	de b7       	in	r29, 0x3e	; 62
    5996:	e6 e0       	ldi	r30, 0x06	; 6
    5998:	0c 94 cc e8 	jmp	0x1d198	; 0x1d198 <__epilogue_restores__+0x18>

0000599c <i2c_init>:
    599c:	cf 93       	push	r28
    599e:	00 d0       	rcall	.+0      	; 0x59a0 <i2c_init+0x4>
    59a0:	1f 92       	push	r1
    59a2:	9b 01       	movw	r18, r22
    59a4:	ac 01       	movw	r20, r24
    59a6:	cf b7       	in	r28, 0x3f	; 63
    59a8:	60 e0       	ldi	r22, 0x00	; 0
    59aa:	7d e2       	ldi	r23, 0x2D	; 45
    59ac:	81 e3       	ldi	r24, 0x31	; 49
    59ae:	91 e0       	ldi	r25, 0x01	; 1
    59b0:	0e 94 37 e8 	call	0x1d06e	; 0x1d06e <__udivmodsi4>
    59b4:	da 01       	movw	r26, r20
    59b6:	c9 01       	movw	r24, r18
    59b8:	40 97       	sbiw	r24, 0x10	; 16
    59ba:	a1 09       	sbc	r26, r1
    59bc:	b1 09       	sbc	r27, r1
    59be:	ac 01       	movw	r20, r24
    59c0:	bd 01       	movw	r22, r26
    59c2:	76 95       	lsr	r23
    59c4:	67 95       	ror	r22
    59c6:	57 95       	ror	r21
    59c8:	47 95       	ror	r20
    59ca:	ca 01       	movw	r24, r20
    59cc:	88 27       	eor	r24, r24
    59ce:	89 2b       	or	r24, r25
    59d0:	59 f0       	breq	.+22     	; 0x59e8 <i2c_init+0x4c>
    59d2:	80 ee       	ldi	r24, 0xE0	; 224
    59d4:	93 e0       	ldi	r25, 0x03	; 3
    59d6:	a0 e0       	ldi	r26, 0x00	; 0
    59d8:	ed b7       	in	r30, 0x3d	; 61
    59da:	fe b7       	in	r31, 0x3e	; 62
    59dc:	81 83       	std	Z+1, r24	; 0x01
    59de:	92 83       	std	Z+2, r25	; 0x02
    59e0:	a3 83       	std	Z+3, r26	; 0x03
    59e2:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
    59e6:	3a c0       	rjmp	.+116    	; 0x5a5c <i2c_init+0xc0>
    59e8:	f8 94       	cli
    59ea:	40 93 b8 00 	sts	0x00B8, r20	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
    59ee:	10 92 47 1a 	sts	0x1A47, r1	; 0x801a47 <i2c+0x1>
    59f2:	81 e0       	ldi	r24, 0x01	; 1
    59f4:	80 93 48 1a 	sts	0x1A48, r24	; 0x801a48 <i2c+0x2>
    59f8:	10 92 76 17 	sts	0x1776, r1	; 0x801776 <i2c_task>
    59fc:	80 93 78 17 	sts	0x1778, r24	; 0x801778 <i2c_task+0x2>
    5a00:	40 9a       	sbi	0x08, 0	; 8
    5a02:	41 9a       	sbi	0x08, 1	; 8
    5a04:	84 e8       	ldi	r24, 0x84	; 132
    5a06:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    5a0a:	10 92 ba 00 	sts	0x00BA, r1	; 0x8000ba <__TEXT_REGION_LENGTH__+0x7e00ba>
    5a0e:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    5a12:	8c 7f       	andi	r24, 0xFC	; 252
    5a14:	80 93 b9 00 	sts	0x00B9, r24	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    5a18:	80 91 55 17 	lds	r24, 0x1755	; 0x801755 <i2c_init_status>
    5a1c:	81 11       	cpse	r24, r1
    5a1e:	1d c0       	rjmp	.+58     	; 0x5a5a <i2c_init+0xbe>
    5a20:	e6 e5       	ldi	r30, 0x56	; 86
    5a22:	f7 e1       	ldi	r31, 0x17	; 23
    5a24:	11 92       	st	Z+, r1
    5a26:	11 92       	st	Z+, r1
    5a28:	27 e1       	ldi	r18, 0x17	; 23
    5a2a:	e6 37       	cpi	r30, 0x76	; 118
    5a2c:	f2 07       	cpc	r31, r18
    5a2e:	d1 f7       	brne	.-12     	; 0x5a24 <i2c_init+0x88>
    5a30:	61 e0       	ldi	r22, 0x01	; 1
    5a32:	70 e0       	ldi	r23, 0x00	; 0
    5a34:	8a e2       	ldi	r24, 0x2A	; 42
    5a36:	9c e2       	ldi	r25, 0x2C	; 44
    5a38:	0e 94 aa 35 	call	0x6b54	; 0x6b54 <set_timers>
    5a3c:	01 96       	adiw	r24, 0x01	; 1
    5a3e:	51 f4       	brne	.+20     	; 0x5a54 <i2c_init+0xb8>
    5a40:	89 ec       	ldi	r24, 0xC9	; 201
    5a42:	93 e0       	ldi	r25, 0x03	; 3
    5a44:	a0 e0       	ldi	r26, 0x00	; 0
    5a46:	ed b7       	in	r30, 0x3d	; 61
    5a48:	fe b7       	in	r31, 0x3e	; 62
    5a4a:	81 83       	std	Z+1, r24	; 0x01
    5a4c:	92 83       	std	Z+2, r25	; 0x02
    5a4e:	a3 83       	std	Z+3, r26	; 0x03
    5a50:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
    5a54:	81 e0       	ldi	r24, 0x01	; 1
    5a56:	80 93 55 17 	sts	0x1755, r24	; 0x801755 <i2c_init_status>
    5a5a:	cf bf       	out	0x3f, r28	; 63
    5a5c:	0f 90       	pop	r0
    5a5e:	0f 90       	pop	r0
    5a60:	0f 90       	pop	r0
    5a62:	cf 91       	pop	r28
    5a64:	08 95       	ret

00005a66 <i2c_done>:
///@brief Is i2c structure done sending/receiving ?
///
/// @return  1 DONE, 0 NOT DONE
int8_t i2c_done()
{
	delayus(1);
    5a66:	61 e0       	ldi	r22, 0x01	; 1
    5a68:	70 e0       	ldi	r23, 0x00	; 0
    5a6a:	80 e0       	ldi	r24, 0x00	; 0
    5a6c:	90 e0       	ldi	r25, 0x00	; 0
    5a6e:	6d db       	rcall	.-2342   	; 0x514a <delayus>
	if(!i2c.enable || i2c.done )
    5a70:	80 91 47 1a 	lds	r24, 0x1A47	; 0x801a47 <i2c+0x1>
    5a74:	88 23       	and	r24, r24
    5a76:	39 f0       	breq	.+14     	; 0x5a86 <i2c_done+0x20>
		return(1);
    5a78:	81 e0       	ldi	r24, 0x01	; 1
    5a7a:	90 91 48 1a 	lds	r25, 0x1A48	; 0x801a48 <i2c+0x2>
    5a7e:	91 11       	cpse	r25, r1
    5a80:	03 c0       	rjmp	.+6      	; 0x5a88 <i2c_done+0x22>
    5a82:	80 e0       	ldi	r24, 0x00	; 0
    5a84:	08 95       	ret
    5a86:	81 e0       	ldi	r24, 0x01	; 1
	return(0);
}
    5a88:	08 95       	ret

00005a8a <i2c_task_done>:
///@brief Are all i2c_task_op[] pointers done sending/receiving ?
///
/// @return  1 DONE, 0 NOT DONE
int8_t i2c_task_done()
{
	delayus(1);
    5a8a:	61 e0       	ldi	r22, 0x01	; 1
    5a8c:	70 e0       	ldi	r23, 0x00	; 0
    5a8e:	80 e0       	ldi	r24, 0x00	; 0
    5a90:	90 e0       	ldi	r25, 0x00	; 0
    5a92:	5b db       	rcall	.-2378   	; 0x514a <delayus>
	if(!i2c_task.enable || i2c_task.done )
    5a94:	80 91 76 17 	lds	r24, 0x1776	; 0x801776 <i2c_task>
    5a98:	88 23       	and	r24, r24
    5a9a:	39 f0       	breq	.+14     	; 0x5aaa <i2c_task_done+0x20>
		return(1);
    5a9c:	81 e0       	ldi	r24, 0x01	; 1
    5a9e:	90 91 78 17 	lds	r25, 0x1778	; 0x801778 <i2c_task+0x2>
    5aa2:	91 11       	cpse	r25, r1
    5aa4:	03 c0       	rjmp	.+6      	; 0x5aac <i2c_task_done+0x22>
    5aa6:	80 e0       	ldi	r24, 0x00	; 0
    5aa8:	08 95       	ret
    5aaa:	81 e0       	ldi	r24, 0x01	; 1
	return(0);
}
    5aac:	08 95       	ret

00005aae <i2c_send_start>:
///@brief Send I2C START and enable interrupts
///
/// @return  void
void i2c_send_start()
{
	i2c.done = 0;
    5aae:	e6 e4       	ldi	r30, 0x46	; 70
    5ab0:	fa e1       	ldi	r31, 0x1A	; 26
    5ab2:	12 82       	std	Z+2, r1	; 0x02
	i2c.enable = 1;
    5ab4:	81 e0       	ldi	r24, 0x01	; 1
    5ab6:	81 83       	std	Z+1, r24	; 0x01
	i2c.timeout = I2C_TIMEOUT;		// Start timeout timer
    5ab8:	8a e0       	ldi	r24, 0x0A	; 10
    5aba:	90 e0       	ldi	r25, 0x00	; 0
    5abc:	95 83       	std	Z+5, r25	; 0x05
    5abe:	84 83       	std	Z+4, r24	; 0x04
	// Start a transactions
	// TWI Enable
	// TWI Interrupt Enable
	// TWI Interrupt Clear
	// TWI SEND RESTART
	TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWSTA);
    5ac0:	85 ea       	ldi	r24, 0xA5	; 165
    5ac2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    5ac6:	08 95       	ret

00005ac8 <i2c_task_run>:

/// @brief Run all valid i2c_task_op[] tasks
///
/// @return  void
void i2c_task_run()
{
    5ac8:	ef 92       	push	r14
    5aca:	ff 92       	push	r15
    5acc:	0f 93       	push	r16
    5ace:	1f 93       	push	r17
    5ad0:	cf 93       	push	r28
    5ad2:	df 93       	push	r29
	uint8_t sreg = SREG;
    5ad4:	ff b6       	in	r15, 0x3f	; 63
	i2c_op_t *o;
    uint8_t run = 0;
	int8_t i;


	cli();
    5ad6:	f8 94       	cli
	i2c_task.done = 0;
    5ad8:	10 92 78 17 	sts	0x1778, r1	; 0x801778 <i2c_task+0x2>
	i2c_task.error = 0;
    5adc:	10 92 79 17 	sts	0x1779, r1	; 0x801779 <i2c_task+0x3>
	i2c_task.ind = 0;
    5ae0:	10 92 77 17 	sts	0x1777, r1	; 0x801777 <i2c_task+0x1>

	// re-enable tasks
	for(i=0;i2c_check_op(i);++i)
    5ae4:	c0 e0       	ldi	r28, 0x00	; 0
/// @return  void
void i2c_task_run()
{
	uint8_t sreg = SREG;
	i2c_op_t *o;
    uint8_t run = 0;
    5ae6:	d0 e0       	ldi	r29, 0x00	; 0

	// re-enable tasks
	for(i=0;i2c_check_op(i);++i)
	{
		o = i2c_task_op[i];
		o->enable = 1;
    5ae8:	ee 24       	eor	r14, r14
    5aea:	e3 94       	inc	r14
		o->done = 0;
		o->flags = 0;
		o->ind = 0;
		o->timeout = I2C_TIMEOUT;
    5aec:	0a e0       	ldi	r16, 0x0A	; 10
    5aee:	10 e0       	ldi	r17, 0x00	; 0
	i2c_task.done = 0;
	i2c_task.error = 0;
	i2c_task.ind = 0;

	// re-enable tasks
	for(i=0;i2c_check_op(i);++i)
    5af0:	8c 2f       	mov	r24, r28
    5af2:	c6 de       	rcall	.-628    	; 0x5880 <i2c_check_op>
    5af4:	88 23       	and	r24, r24
    5af6:	d1 f0       	breq	.+52     	; 0x5b2c <i2c_task_run+0x64>
	{
		o = i2c_task_op[i];
    5af8:	ec 2f       	mov	r30, r28
    5afa:	ee 0f       	add	r30, r30
    5afc:	ff 0b       	sbc	r31, r31
    5afe:	ea 5a       	subi	r30, 0xAA	; 170
    5b00:	f8 4e       	sbci	r31, 0xE8	; 232
    5b02:	01 90       	ld	r0, Z+
    5b04:	f0 81       	ld	r31, Z
    5b06:	e0 2d       	mov	r30, r0
		o->enable = 1;
    5b08:	e1 82       	std	Z+1, r14	; 0x01
		o->done = 0;
    5b0a:	12 82       	std	Z+2, r1	; 0x02
		o->flags = 0;
    5b0c:	13 82       	std	Z+3, r1	; 0x03
		o->ind = 0;
    5b0e:	17 82       	std	Z+7, r1	; 0x07
		o->timeout = I2C_TIMEOUT;
    5b10:	15 83       	std	Z+5, r17	; 0x05
    5b12:	04 83       	std	Z+4, r16	; 0x04
		if(!run)
    5b14:	d1 11       	cpse	r29, r1
    5b16:	07 c0       	rjmp	.+14     	; 0x5b26 <i2c_task_run+0x5e>
		{
			run = 1;
			i2c = *o;
    5b18:	8a e0       	ldi	r24, 0x0A	; 10
    5b1a:	a6 e4       	ldi	r26, 0x46	; 70
    5b1c:	ba e1       	ldi	r27, 0x1A	; 26
    5b1e:	01 90       	ld	r0, Z+
    5b20:	0d 92       	st	X+, r0
    5b22:	8a 95       	dec	r24
    5b24:	e1 f7       	brne	.-8      	; 0x5b1e <i2c_task_run+0x56>
    5b26:	cf 5f       	subi	r28, 0xFF	; 255
    5b28:	d1 e0       	ldi	r29, 0x01	; 1
    5b2a:	e2 cf       	rjmp	.-60     	; 0x5af0 <i2c_task_run+0x28>
		}
	}

	if(run)
    5b2c:	dd 23       	and	r29, r29
    5b2e:	91 f0       	breq	.+36     	; 0x5b54 <i2c_task_run+0x8c>
	{
		// TASK callback
		i2c_callback = i2c_task_next_op;
    5b30:	81 e0       	ldi	r24, 0x01	; 1
    5b32:	9e e2       	ldi	r25, 0x2E	; 46
    5b34:	90 93 7b 17 	sts	0x177B, r25	; 0x80177b <i2c_callback+0x1>
    5b38:	80 93 7a 17 	sts	0x177A, r24	; 0x80177a <i2c_callback>

		i2c_task.enable = 1;
    5b3c:	81 e0       	ldi	r24, 0x01	; 1
    5b3e:	80 93 76 17 	sts	0x1776, r24	; 0x801776 <i2c_task>
		i2c_task.done = 0;
    5b42:	10 92 78 17 	sts	0x1778, r1	; 0x801778 <i2c_task+0x2>

        // Reset Status
        TWSR &= ~(_BV(TWPS0) | _BV(TWPS1));
    5b46:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    5b4a:	8c 7f       	andi	r24, 0xFC	; 252
    5b4c:	80 93 b9 00 	sts	0x00B9, r24	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
        // TWI Interrupt Clear
        // TWI SEND RESTART
        // TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWSTA);
        // Disable Slave Mode

		i2c_send_start();
    5b50:	ae df       	rcall	.-164    	; 0x5aae <i2c_send_start>
    5b52:	15 c0       	rjmp	.+42     	; 0x5b7e <i2c_task_run+0xb6>
        // FIXME we should notify the user ?
		// Nothing to DO
		// User Error

		// TASK callback
		i2c_callback = NULL;
    5b54:	10 92 7b 17 	sts	0x177B, r1	; 0x80177b <i2c_callback+0x1>
    5b58:	10 92 7a 17 	sts	0x177A, r1	; 0x80177a <i2c_callback>

		// TASK Nothing to DO
		i2c_task.enable = 0;
    5b5c:	10 92 76 17 	sts	0x1776, r1	; 0x801776 <i2c_task>
		i2c_task.done = 1;
    5b60:	81 e0       	ldi	r24, 0x01	; 1
    5b62:	80 93 78 17 	sts	0x1778, r24	; 0x801778 <i2c_task+0x2>

		// I2C Nothing to do
        i2c.done = 1;
    5b66:	80 93 48 1a 	sts	0x1A48, r24	; 0x801a48 <i2c+0x2>
        i2c.enable = 0;
    5b6a:	10 92 47 1a 	sts	0x1A47, r1	; 0x801a47 <i2c+0x1>

        // TWI Enable
        // TWI Disable Enable
        // TWI Interrupt Clear
        TWCR = _BV(TWEN) | _BV(TWINT);
    5b6e:	84 e8       	ldi	r24, 0x84	; 132
    5b70:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
        // Reset status
        TWSR &= ~(_BV(TWPS0) | _BV(TWPS1));
    5b74:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    5b78:	8c 7f       	andi	r24, 0xFC	; 252
    5b7a:	80 93 b9 00 	sts	0x00B9, r24	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
        // Disable Slave Mode
        TWAR = 0;
    5b7e:	10 92 ba 00 	sts	0x00BA, r1	; 0x8000ba <__TEXT_REGION_LENGTH__+0x7e00ba>
	}
	// Disable Slave Mode

	SREG = sreg;
    5b82:	ff be       	out	0x3f, r15	; 63

}
    5b84:	cd b7       	in	r28, 0x3d	; 61
    5b86:	de b7       	in	r29, 0x3e	; 62
    5b88:	e6 e0       	ldi	r30, 0x06	; 6
    5b8a:	0c 94 cc e8 	jmp	0x1d198	; 0x1d198 <__epilogue_restores__+0x18>

00005b8e <i2c_fn>:
/// @param[in] *buf: pointer to buffer for send or receive
/// @param[in] len: size of buffer to read or write
/// @return  1 = OK, 0 = ERROR
uint8_t i2c_fn(uint8_t address, uint8_t mode, uint8_t *buf, uint8_t len)
{
	uint8_t sreg = SREG;
    5b8e:	9f b7       	in	r25, 0x3f	; 63
	
    cli();
    5b90:	f8 94       	cli

	// sign task only
	i2c_callback = NULL;
    5b92:	10 92 7b 17 	sts	0x177B, r1	; 0x80177b <i2c_callback+0x1>
    5b96:	10 92 7a 17 	sts	0x177A, r1	; 0x80177a <i2c_callback>

	i2c.enable = 1; // Enabled
    5b9a:	31 e0       	ldi	r19, 0x01	; 1
    5b9c:	30 93 47 1a 	sts	0x1A47, r19	; 0x801a47 <i2c+0x1>
	i2c.done = 0;
    5ba0:	10 92 48 1a 	sts	0x1A48, r1	; 0x801a48 <i2c+0x2>
    i2c.address = (address << 1) | (mode & 1);
    5ba4:	88 0f       	add	r24, r24
    5ba6:	61 70       	andi	r22, 0x01	; 1
    5ba8:	68 2b       	or	r22, r24
    5baa:	60 93 46 1a 	sts	0x1A46, r22	; 0x801a46 <i2c>
	i2c.flags = 0;
    5bae:	10 92 49 1a 	sts	0x1A49, r1	; 0x801a49 <i2c+0x3>
    i2c.len = len;
    5bb2:	20 93 4c 1a 	sts	0x1A4C, r18	; 0x801a4c <i2c+0x6>
    i2c.ind = 0;
    5bb6:	10 92 4d 1a 	sts	0x1A4D, r1	; 0x801a4d <i2c+0x7>
    i2c.buf = buf;
    5bba:	50 93 4f 1a 	sts	0x1A4F, r21	; 0x801a4f <i2c+0x9>
    5bbe:	40 93 4e 1a 	sts	0x1A4E, r20	; 0x801a4e <i2c+0x8>

	// Reset Status
	TWSR &= ~(_BV(TWPS0) | _BV(TWPS1));
    5bc2:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    5bc6:	8c 7f       	andi	r24, 0xFC	; 252
    5bc8:	80 93 b9 00 	sts	0x00B9, r24	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>

	// Disable Slave Mode
	TWAR = 0;
    5bcc:	10 92 ba 00 	sts	0x00BA, r1	; 0x8000ba <__TEXT_REGION_LENGTH__+0x7e00ba>

	SREG = sreg;
    5bd0:	9f bf       	out	0x3f, r25	; 63

	i2c_send_start();
    5bd2:	6d df       	rcall	.-294    	; 0x5aae <i2c_send_start>
	{
		printf("timeout: %d\r",(int)i2c.timeout);
	}
	printf("\n");
#else
	while(! i2c_done() )
    5bd4:	48 df       	rcall	.-368    	; 0x5a66 <i2c_done>
    5bd6:	88 23       	and	r24, r24
    5bd8:	e9 f3       	breq	.-6      	; 0x5bd4 <i2c_fn+0x46>
    5bda:	81 e0       	ldi	r24, 0x01	; 1
		;
#endif
	return( i2c.flags ? 0 : 1);
    5bdc:	90 91 49 1a 	lds	r25, 0x1A49	; 0x801a49 <i2c+0x3>
    5be0:	91 11       	cpse	r25, r1
    5be2:	80 e0       	ldi	r24, 0x00	; 0
    5be4:	08 95       	ret

00005be6 <i2c_send_stop>:
}
    5be6:	e6 e4       	ldi	r30, 0x46	; 70
///
/// @return  void
void i2c_send_stop()
{
    // All transactions are done
    i2c.done = 1;
    5be8:	fa e1       	ldi	r31, 0x1A	; 26
    5bea:	81 e0       	ldi	r24, 0x01	; 1
    5bec:	82 83       	std	Z+2, r24	; 0x02
    i2c.enable = 0;
    5bee:	11 82       	std	Z+1, r1	; 0x01
    // We are DONE
    // TWI Enable
    // TWI Interrupt Disable
    // TWI Interrupt Clear
    // TWI SEND STOP
    TWCR = _BV(TWEN) | _BV(TWINT) | _BV(TWSTO);
    5bf0:	84 e9       	ldi	r24, 0x94	; 148
    5bf2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	delayus(10);
    5bf6:	6a e0       	ldi	r22, 0x0A	; 10
    5bf8:	70 e0       	ldi	r23, 0x00	; 0
    5bfa:	80 e0       	ldi	r24, 0x00	; 0
    5bfc:	90 e0       	ldi	r25, 0x00	; 0
    5bfe:	a5 ca       	rjmp	.-2742   	; 0x514a <delayus>
    5c00:	08 95       	ret

00005c02 <i2c_task_next_op>:

///@brief I2C task ISR callback function
///
/// @return  void
int8_t i2c_task_next_op()
{
    5c02:	cf 93       	push	r28
    5c04:	df 93       	push	r29
	i2c_op_t *o;

	// NOTE: we are in an ISR do not disable other interrupts

	if(i2c_task.enable)
    5c06:	80 91 76 17 	lds	r24, 0x1776	; 0x801776 <i2c_task>
    5c0a:	88 23       	and	r24, r24
    5c0c:	09 f4       	brne	.+2      	; 0x5c10 <i2c_task_next_op+0xe>
    5c0e:	46 c0       	rjmp	.+140    	; 0x5c9c <i2c_task_next_op+0x9a>
	{
		// Save state of LAST operation
		if(i2c_check_op(i2c_task.ind) )
    5c10:	80 91 77 17 	lds	r24, 0x1777	; 0x801777 <i2c_task+0x1>
    5c14:	35 de       	rcall	.-918    	; 0x5880 <i2c_check_op>
    5c16:	88 23       	and	r24, r24
    5c18:	b1 f0       	breq	.+44     	; 0x5c46 <i2c_task_next_op+0x44>
		{
			o = i2c_task_op[i2c_task.ind];
    5c1a:	e0 91 77 17 	lds	r30, 0x1777	; 0x801777 <i2c_task+0x1>
    5c1e:	ee 0f       	add	r30, r30
    5c20:	ff 0b       	sbc	r31, r31
    5c22:	ea 5a       	subi	r30, 0xAA	; 170
    5c24:	f8 4e       	sbci	r31, 0xE8	; 232
    5c26:	c0 81       	ld	r28, Z
    5c28:	d1 81       	ldd	r29, Z+1	; 0x01
			// Save state in last opperation
			*o = i2c;
    5c2a:	8a e0       	ldi	r24, 0x0A	; 10
    5c2c:	e6 e4       	ldi	r30, 0x46	; 70
    5c2e:	fa e1       	ldi	r31, 0x1A	; 26
    5c30:	de 01       	movw	r26, r28
    5c32:	01 90       	ld	r0, Z+
    5c34:	0d 92       	st	X+, r0
    5c36:	8a 95       	dec	r24
    5c38:	e1 f7       	brne	.-8      	; 0x5c32 <i2c_task_next_op+0x30>
			if(o->flags)
    5c3a:	8b 81       	ldd	r24, Y+3	; 0x03
    5c3c:	88 23       	and	r24, r24
    5c3e:	19 f0       	breq	.+6      	; 0x5c46 <i2c_task_next_op+0x44>
				i2c_task.error = 1;
    5c40:	81 e0       	ldi	r24, 0x01	; 1
    5c42:	80 93 79 17 	sts	0x1779, r24	; 0x801779 <i2c_task+0x3>
		}

		if(i2c_check_op(i2c_task.ind+1) )
    5c46:	80 91 77 17 	lds	r24, 0x1777	; 0x801777 <i2c_task+0x1>
    5c4a:	8f 5f       	subi	r24, 0xFF	; 255
    5c4c:	19 de       	rcall	.-974    	; 0x5880 <i2c_check_op>
    5c4e:	88 23       	and	r24, r24
    5c50:	29 f1       	breq	.+74     	; 0x5c9c <i2c_task_next_op+0x9a>
		{
			i2c_task.ind++;
    5c52:	e0 91 77 17 	lds	r30, 0x1777	; 0x801777 <i2c_task+0x1>
    5c56:	ef 5f       	subi	r30, 0xFF	; 255
    5c58:	e0 93 77 17 	sts	0x1777, r30	; 0x801777 <i2c_task+0x1>

			o = i2c_task_op[i2c_task.ind];
    5c5c:	ee 0f       	add	r30, r30
    5c5e:	ff 0b       	sbc	r31, r31
    5c60:	ea 5a       	subi	r30, 0xAA	; 170
    5c62:	f8 4e       	sbci	r31, 0xE8	; 232
    5c64:	01 90       	ld	r0, Z+
    5c66:	f0 81       	ld	r31, Z
    5c68:	e0 2d       	mov	r30, r0

			if( o->enable == 1 || o->done == 0)
    5c6a:	81 81       	ldd	r24, Z+1	; 0x01
    5c6c:	81 30       	cpi	r24, 0x01	; 1
    5c6e:	19 f0       	breq	.+6      	; 0x5c76 <i2c_task_next_op+0x74>
    5c70:	82 81       	ldd	r24, Z+2	; 0x02
    5c72:	81 11       	cpse	r24, r1
    5c74:	13 c0       	rjmp	.+38     	; 0x5c9c <i2c_task_next_op+0x9a>
			{
				o->timeout = I2C_TIMEOUT;
    5c76:	8a e0       	ldi	r24, 0x0A	; 10
    5c78:	90 e0       	ldi	r25, 0x00	; 0
    5c7a:	95 83       	std	Z+5, r25	; 0x05
    5c7c:	84 83       	std	Z+4, r24	; 0x04
				o->flags = 0;
    5c7e:	13 82       	std	Z+3, r1	; 0x03
				o->ind = 0;
    5c80:	17 82       	std	Z+7, r1	; 0x07
				o->enable = 1;
    5c82:	81 e0       	ldi	r24, 0x01	; 1
    5c84:	81 83       	std	Z+1, r24	; 0x01
				o->done = 0;
    5c86:	12 82       	std	Z+2, r1	; 0x02

				i2c = *o;
    5c88:	8a e0       	ldi	r24, 0x0A	; 10
    5c8a:	a6 e4       	ldi	r26, 0x46	; 70
    5c8c:	ba e1       	ldi	r27, 0x1A	; 26
    5c8e:	01 90       	ld	r0, Z+
    5c90:	0d 92       	st	X+, r0
    5c92:	8a 95       	dec	r24

				i2c_send_start();
    5c94:	e1 f7       	brne	.-8      	; 0x5c8e <i2c_task_next_op+0x8c>
    5c96:	0b df       	rcall	.-490    	; 0x5aae <i2c_send_start>

				return(1);
    5c98:	81 e0       	ldi	r24, 0x01	; 1
    5c9a:	0f c0       	rjmp	.+30     	; 0x5cba <i2c_task_next_op+0xb8>
			}
		}
	}
	// program error
	// Disable TASK
	i2c_task.enable = 0;
    5c9c:	10 92 76 17 	sts	0x1776, r1	; 0x801776 <i2c_task>
	i2c_task.done = 1;
    5ca0:	81 e0       	ldi	r24, 0x01	; 1
    5ca2:	80 93 78 17 	sts	0x1778, r24	; 0x801778 <i2c_task+0x2>

	// I2C disable
	i2c.done = 1;
    5ca6:	80 93 48 1a 	sts	0x1A48, r24	; 0x801a48 <i2c+0x2>
	i2c.enable = 0;
    5caa:	10 92 47 1a 	sts	0x1A47, r1	; 0x801a47 <i2c+0x1>
	i2c.flags = 0;
    5cae:	10 92 49 1a 	sts	0x1A49, r1	; 0x801a49 <i2c+0x3>
	i2c.ind = 0;
    5cb2:	10 92 4d 1a 	sts	0x1A4D, r1	; 0x801a4d <i2c+0x7>

	i2c_send_stop();
    5cb6:	97 df       	rcall	.-210    	; 0x5be6 <i2c_send_stop>

	return(0);
    5cb8:	80 e0       	ldi	r24, 0x00	; 0
}
    5cba:	df 91       	pop	r29
    5cbc:	cf 91       	pop	r28
    5cbe:	08 95       	ret

00005cc0 <i2c_next>:
{

	// IF we have an i2c_callback() function then
	// it must save status and reset i2c structure for next operation

	if(i2c_callback)
    5cc0:	e0 91 7a 17 	lds	r30, 0x177A	; 0x80177a <i2c_callback>
    5cc4:	f0 91 7b 17 	lds	r31, 0x177B	; 0x80177b <i2c_callback+0x1>
    5cc8:	30 97       	sbiw	r30, 0x00	; 0
    5cca:	11 f0       	breq	.+4      	; 0x5cd0 <i2c_next+0x10>
	    i2c_callback();
    5ccc:	09 95       	icall
    5cce:	08 95       	ret
	else
		i2c_send_stop();
    5cd0:	8a cf       	rjmp	.-236    	; 0x5be6 <i2c_send_stop>
    5cd2:	08 95       	ret

00005cd4 <__vector_26>:

///@brief I2C ISR for send/receive
///
/// @return  void
ISR(TWI_vect)
{
    5cd4:	1f 92       	push	r1
    5cd6:	0f 92       	push	r0
    5cd8:	0f b6       	in	r0, 0x3f	; 63
    5cda:	0f 92       	push	r0
    5cdc:	11 24       	eor	r1, r1
    5cde:	0b b6       	in	r0, 0x3b	; 59
    5ce0:	0f 92       	push	r0
    5ce2:	2f 93       	push	r18
    5ce4:	3f 93       	push	r19
    5ce6:	4f 93       	push	r20
    5ce8:	5f 93       	push	r21
    5cea:	6f 93       	push	r22
    5cec:	7f 93       	push	r23
    5cee:	8f 93       	push	r24
    5cf0:	9f 93       	push	r25
    5cf2:	af 93       	push	r26
    5cf4:	bf 93       	push	r27
    5cf6:	ef 93       	push	r30
    5cf8:	ff 93       	push	r31
	// FYI: reading TWSR clears the status
	// twi.h defines TW_STATUS
    // #define TW_STATUS (TWSR & TW_STATUS_MASK)
    uint8_t status = TW_STATUS;	
    5cfa:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>

	// Are we Enabled to Receive/Send ?
	// Are we Done ?
	// Program errors - these should not happen
	if(!i2c.enable || i2c.done || !i2c.buf || !i2c.len )
    5cfe:	90 91 47 1a 	lds	r25, 0x1A47	; 0x801a47 <i2c+0x1>
    5d02:	99 23       	and	r25, r25
    5d04:	09 f1       	breq	.+66     	; 0x5d48 <__vector_26+0x74>
    5d06:	90 91 48 1a 	lds	r25, 0x1A48	; 0x801a48 <i2c+0x2>
    5d0a:	91 11       	cpse	r25, r1
    5d0c:	1d c0       	rjmp	.+58     	; 0x5d48 <__vector_26+0x74>
    5d0e:	20 91 4e 1a 	lds	r18, 0x1A4E	; 0x801a4e <i2c+0x8>
    5d12:	30 91 4f 1a 	lds	r19, 0x1A4F	; 0x801a4f <i2c+0x9>
    5d16:	21 15       	cp	r18, r1
    5d18:	31 05       	cpc	r19, r1
    5d1a:	b1 f0       	breq	.+44     	; 0x5d48 <__vector_26+0x74>
    5d1c:	90 91 4c 1a 	lds	r25, 0x1A4C	; 0x801a4c <i2c+0x6>
    5d20:	99 23       	and	r25, r25
    5d22:	91 f0       	breq	.+36     	; 0x5d48 <__vector_26+0x74>
		i2c_send_stop();
		return;
	}

	// TUMEOUT ? STOP everything
	if(i2c.timeout == 0)
    5d24:	40 91 4a 1a 	lds	r20, 0x1A4A	; 0x801a4a <i2c+0x4>
    5d28:	50 91 4b 1a 	lds	r21, 0x1A4B	; 0x801a4b <i2c+0x5>
    5d2c:	45 2b       	or	r20, r21
    5d2e:	71 f4       	brne	.+28     	; 0x5d4c <__vector_26+0x78>
	{
		i2c.flags |= (I2C_OP_TIMEOUT);
    5d30:	80 91 49 1a 	lds	r24, 0x1A49	; 0x801a49 <i2c+0x3>
    5d34:	81 60       	ori	r24, 0x01	; 1
    5d36:	80 93 49 1a 	sts	0x1A49, r24	; 0x801a49 <i2c+0x3>
		i2c_task.enable = 0;
    5d3a:	10 92 76 17 	sts	0x1776, r1	; 0x801776 <i2c_task>
		i2c_task.done = 1;
    5d3e:	81 e0       	ldi	r24, 0x01	; 1
    5d40:	80 93 78 17 	sts	0x1778, r24	; 0x801778 <i2c_task+0x2>
		i2c_task.error = 1;
    5d44:	80 93 79 17 	sts	0x1779, r24	; 0x801779 <i2c_task+0x3>
		i2c_send_stop();
    5d48:	4e df       	rcall	.-356    	; 0x5be6 <i2c_send_stop>
		return;
    5d4a:	9b c0       	rjmp	.+310    	; 0x5e82 <__vector_26+0x1ae>
	}

	// Master Receiver mode
	switch (status)
    5d4c:	88 7f       	andi	r24, 0xF8	; 248
    5d4e:	80 33       	cpi	r24, 0x30	; 48
    5d50:	09 f4       	brne	.+2      	; 0x5d54 <__vector_26+0x80>
    5d52:	83 c0       	rjmp	.+262    	; 0x5e5a <__vector_26+0x186>
    5d54:	70 f4       	brcc	.+28     	; 0x5d72 <__vector_26+0x9e>
    5d56:	88 31       	cpi	r24, 0x18	; 24
    5d58:	09 f1       	breq	.+66     	; 0x5d9c <__vector_26+0xc8>
    5d5a:	28 f4       	brcc	.+10     	; 0x5d66 <__vector_26+0x92>
    5d5c:	88 30       	cpi	r24, 0x08	; 8
    5d5e:	c9 f0       	breq	.+50     	; 0x5d92 <__vector_26+0xbe>
    5d60:	80 31       	cpi	r24, 0x10	; 16
    5d62:	b9 f0       	breq	.+46     	; 0x5d92 <__vector_26+0xbe>
    5d64:	83 c0       	rjmp	.+262    	; 0x5e6c <__vector_26+0x198>
    5d66:	80 32       	cpi	r24, 0x20	; 32
    5d68:	09 f4       	brne	.+2      	; 0x5d6c <__vector_26+0x98>
    5d6a:	65 c0       	rjmp	.+202    	; 0x5e36 <__vector_26+0x162>
    5d6c:	88 32       	cpi	r24, 0x28	; 40
    5d6e:	b1 f0       	breq	.+44     	; 0x5d9c <__vector_26+0xc8>
    5d70:	7d c0       	rjmp	.+250    	; 0x5e6c <__vector_26+0x198>
    5d72:	88 34       	cpi	r24, 0x48	; 72
    5d74:	09 f4       	brne	.+2      	; 0x5d78 <__vector_26+0xa4>
    5d76:	68 c0       	rjmp	.+208    	; 0x5e48 <__vector_26+0x174>
    5d78:	38 f4       	brcc	.+14     	; 0x5d88 <__vector_26+0xb4>
    5d7a:	88 33       	cpi	r24, 0x38	; 56
    5d7c:	09 f4       	brne	.+2      	; 0x5d80 <__vector_26+0xac>
    5d7e:	57 c0       	rjmp	.+174    	; 0x5e2e <__vector_26+0x15a>
    5d80:	80 34       	cpi	r24, 0x40	; 64
    5d82:	09 f4       	brne	.+2      	; 0x5d86 <__vector_26+0xb2>
    5d84:	42 c0       	rjmp	.+132    	; 0x5e0a <__vector_26+0x136>
    5d86:	72 c0       	rjmp	.+228    	; 0x5e6c <__vector_26+0x198>
    5d88:	80 35       	cpi	r24, 0x50	; 80
    5d8a:	79 f1       	breq	.+94     	; 0x5dea <__vector_26+0x116>
    5d8c:	88 35       	cpi	r24, 0x58	; 88
    5d8e:	b9 f0       	breq	.+46     	; 0x5dbe <__vector_26+0xea>
    5d90:	6d c0       	rjmp	.+218    	; 0x5e6c <__vector_26+0x198>
	{
		case TW_START:		// START has been transmitted
		case TW_REP_START:  // RE-START has been transmitted
			i2c.ind = 0;
    5d92:	10 92 4d 1a 	sts	0x1A4D, r1	; 0x801a4d <i2c+0x7>
			TWDR = i2c.address;
    5d96:	80 91 46 1a 	lds	r24, 0x1A46	; 0x801a46 <i2c>
    5d9a:	0e c0       	rjmp	.+28     	; 0x5db8 <__vector_26+0xe4>
			break;


		case TW_MT_SLA_ACK:	// SLA+W trasnmitted and ACK received
		case TW_MT_DATA_ACK:// Data trasnmitted and ACK received
			if (i2c.ind < i2c.len)
    5d9c:	80 91 4d 1a 	lds	r24, 0x1A4D	; 0x801a4d <i2c+0x7>
    5da0:	89 17       	cp	r24, r25
    5da2:	ec f4       	brge	.+58     	; 0x5dde <__vector_26+0x10a>
			{
				TWDR = i2c.buf[i2c.ind++];
    5da4:	91 e0       	ldi	r25, 0x01	; 1
    5da6:	98 0f       	add	r25, r24
    5da8:	90 93 4d 1a 	sts	0x1A4D, r25	; 0x801a4d <i2c+0x7>
    5dac:	f9 01       	movw	r30, r18
    5dae:	e8 0f       	add	r30, r24
    5db0:	f1 1d       	adc	r31, r1
    5db2:	87 fd       	sbrc	r24, 7
    5db4:	fa 95       	dec	r31
    5db6:	80 81       	ld	r24, Z
    5db8:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    5dbc:	36 c0       	rjmp	.+108    	; 0x5e2a <__vector_26+0x156>
				TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
			}
			break;

		case TW_MR_DATA_NACK:	// Data received NACK transmitted
			if(i2c.ind < i2c.len)
    5dbe:	80 91 4d 1a 	lds	r24, 0x1A4D	; 0x801a4d <i2c+0x7>
    5dc2:	89 17       	cp	r24, r25
    5dc4:	64 f4       	brge	.+24     	; 0x5dde <__vector_26+0x10a>
				i2c.buf[i2c.ind++] = TWDR;
    5dc6:	91 e0       	ldi	r25, 0x01	; 1
    5dc8:	98 0f       	add	r25, r24
    5dca:	90 93 4d 1a 	sts	0x1A4D, r25	; 0x801a4d <i2c+0x7>
    5dce:	90 91 bb 00 	lds	r25, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    5dd2:	f9 01       	movw	r30, r18
    5dd4:	e8 0f       	add	r30, r24
    5dd6:	f1 1d       	adc	r31, r1
    5dd8:	87 fd       	sbrc	r24, 7
    5dda:	fa 95       	dec	r31
    5ddc:	90 83       	st	Z, r25
				TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
			}
			else
			{
				// Done
				i2c.done = 1;
    5dde:	81 e0       	ldi	r24, 0x01	; 1
    5de0:	80 93 48 1a 	sts	0x1A48, r24	; 0x801a48 <i2c+0x2>
				i2c.enable = 0;
    5de4:	10 92 47 1a 	sts	0x1A47, r1	; 0x801a47 <i2c+0x1>
    5de8:	4b c0       	rjmp	.+150    	; 0x5e80 <__vector_26+0x1ac>
				i2c_next();
			}
			break;

		case TW_MR_DATA_ACK:	// Data received ACK transmitted
			if(i2c.ind < i2c.len)
    5dea:	80 91 4d 1a 	lds	r24, 0x1A4D	; 0x801a4d <i2c+0x7>
    5dee:	89 17       	cp	r24, r25
    5df0:	64 f4       	brge	.+24     	; 0x5e0a <__vector_26+0x136>
				i2c.buf[i2c.ind++] = TWDR;
    5df2:	91 e0       	ldi	r25, 0x01	; 1
    5df4:	98 0f       	add	r25, r24
    5df6:	90 93 4d 1a 	sts	0x1A4D, r25	; 0x801a4d <i2c+0x7>
    5dfa:	90 91 bb 00 	lds	r25, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    5dfe:	f9 01       	movw	r30, r18
    5e00:	e8 0f       	add	r30, r24
    5e02:	f1 1d       	adc	r31, r1
    5e04:	87 fd       	sbrc	r24, 7
    5e06:	fa 95       	dec	r31
    5e08:	90 83       	st	Z, r25
		case TW_MR_SLA_ACK:		// SLA+R transmitted ACK received
			if ((i2c.ind+1) < i2c.len)
    5e0a:	80 91 4d 1a 	lds	r24, 0x1A4D	; 0x801a4d <i2c+0x7>
    5e0e:	08 2e       	mov	r0, r24
    5e10:	00 0c       	add	r0, r0
    5e12:	99 0b       	sbc	r25, r25
    5e14:	01 96       	adiw	r24, 0x01	; 1
    5e16:	20 91 4c 1a 	lds	r18, 0x1A4C	; 0x801a4c <i2c+0x6>
    5e1a:	02 2e       	mov	r0, r18
    5e1c:	00 0c       	add	r0, r0
    5e1e:	33 0b       	sbc	r19, r19
    5e20:	82 17       	cp	r24, r18
    5e22:	93 07       	cpc	r25, r19
    5e24:	14 f4       	brge	.+4      	; 0x5e2a <__vector_26+0x156>
			{
				// TWI Enable
				// TWI Interrupt Enable
				// TWI Interrupt Clear
				// SEND ACK after receive
				TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    5e26:	85 ec       	ldi	r24, 0xC5	; 197
    5e28:	03 c0       	rjmp	.+6      	; 0x5e30 <__vector_26+0x15c>
				// LAST BYTE
				// TWI Enable
				// TWI Interrupt Enable
				// TWI Interrupt Clear
				// SEND NACK after receive
				TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    5e2a:	85 e8       	ldi	r24, 0x85	; 133
    5e2c:	01 c0       	rjmp	.+2      	; 0x5e30 <__vector_26+0x15c>
		case TW_ARB_LOST:
			// TWI Enable
			// TWI Interrupt Enable
			// TWI Interrupt Clear
			// TWI SEND RESTART
			TWCR = _BV(TWEN) |  _BV(TWIE) | _BV(TWINT) | _BV(TWSTA);
    5e2e:	85 ea       	ldi	r24, 0xA5	; 165
    5e30:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
			break;
    5e34:	26 c0       	rjmp	.+76     	; 0x5e82 <__vector_26+0x1ae>

// Error cases
		case TW_MT_SLA_NACK:	// SLA+W transmitted NACK received
			i2c.done = 1;
    5e36:	81 e0       	ldi	r24, 0x01	; 1
    5e38:	80 93 48 1a 	sts	0x1A48, r24	; 0x801a48 <i2c+0x2>
			i2c.enable = 0;
    5e3c:	10 92 47 1a 	sts	0x1A47, r1	; 0x801a47 <i2c+0x1>
			i2c.flags |= I2C_TW_MT_SLA_NACK;
    5e40:	80 91 49 1a 	lds	r24, 0x1A49	; 0x801a49 <i2c+0x3>
    5e44:	88 60       	ori	r24, 0x08	; 8
    5e46:	1a c0       	rjmp	.+52     	; 0x5e7c <__vector_26+0x1a8>
			// ERROR
			i2c_next();
			break;

		case TW_MR_SLA_NACK:	// SLA+R transmitted NACK received
			i2c.done = 1;
    5e48:	81 e0       	ldi	r24, 0x01	; 1
    5e4a:	80 93 48 1a 	sts	0x1A48, r24	; 0x801a48 <i2c+0x2>
			i2c.enable = 0;
    5e4e:	10 92 47 1a 	sts	0x1A47, r1	; 0x801a47 <i2c+0x1>
			i2c.flags |= I2C_TW_MR_SLA_NACK;
    5e52:	80 91 49 1a 	lds	r24, 0x1A49	; 0x801a49 <i2c+0x3>
    5e56:	80 61       	ori	r24, 0x10	; 16
    5e58:	11 c0       	rjmp	.+34     	; 0x5e7c <__vector_26+0x1a8>
			// ERROR
			i2c_next();
			break;

		case TW_MT_DATA_NACK:	// Data Transmitted NACK received
			i2c.done = 1;
    5e5a:	81 e0       	ldi	r24, 0x01	; 1
    5e5c:	80 93 48 1a 	sts	0x1A48, r24	; 0x801a48 <i2c+0x2>
			i2c.enable = 0;
    5e60:	10 92 47 1a 	sts	0x1A47, r1	; 0x801a47 <i2c+0x1>
			i2c.flags |= I2C_TW_MT_DATA_NACK;
    5e64:	80 91 49 1a 	lds	r24, 0x1A49	; 0x801a49 <i2c+0x3>
    5e68:	80 62       	ori	r24, 0x20	; 32
    5e6a:	08 c0       	rjmp	.+16     	; 0x5e7c <__vector_26+0x1a8>
			// ERROR
			i2c_next();
			break;

		default:				// Error
			i2c.done = 1;
    5e6c:	81 e0       	ldi	r24, 0x01	; 1
    5e6e:	80 93 48 1a 	sts	0x1A48, r24	; 0x801a48 <i2c+0x2>
			i2c.enable = 0;
    5e72:	10 92 47 1a 	sts	0x1A47, r1	; 0x801a47 <i2c+0x1>
			// ERROR
			i2c.flags |= I2C_BUS_ERROR;
    5e76:	80 91 49 1a 	lds	r24, 0x1A49	; 0x801a49 <i2c+0x3>
    5e7a:	80 64       	ori	r24, 0x40	; 64
    5e7c:	80 93 49 1a 	sts	0x1A49, r24	; 0x801a49 <i2c+0x3>
			i2c_next();
    5e80:	1f df       	rcall	.-450    	; 0x5cc0 <i2c_next>
			break;
	}
}
    5e82:	ff 91       	pop	r31
    5e84:	ef 91       	pop	r30
    5e86:	bf 91       	pop	r27
    5e88:	af 91       	pop	r26
    5e8a:	9f 91       	pop	r25
    5e8c:	8f 91       	pop	r24
    5e8e:	7f 91       	pop	r23
    5e90:	6f 91       	pop	r22
    5e92:	5f 91       	pop	r21
    5e94:	4f 91       	pop	r20
    5e96:	3f 91       	pop	r19
    5e98:	2f 91       	pop	r18
    5e9a:	0f 90       	pop	r0
    5e9c:	0b be       	out	0x3b, r0	; 59
    5e9e:	0f 90       	pop	r0
    5ea0:	0f be       	out	0x3f, r0	; 63
    5ea2:	0f 90       	pop	r0
    5ea4:	1f 90       	pop	r1
    5ea6:	18 95       	reti

00005ea8 <i2c_print_error>:
/// @brief Display Errors for i2c_task_op[index]
///
/// @param[in] index: index of i2c_task_op[] array
/// @return  void
void i2c_print_error(i2c_op_t *o)
{
    5ea8:	cf 93       	push	r28
    5eaa:	00 d0       	rcall	.+0      	; 0x5eac <i2c_print_error+0x4>
    5eac:	00 d0       	rcall	.+0      	; 0x5eae <i2c_print_error+0x6>
    5eae:	1f 92       	push	r1
    int flags = o->flags;
    5eb0:	fc 01       	movw	r30, r24
    5eb2:	c3 81       	ldd	r28, Z+3	; 0x03

	if(flags)
    5eb4:	cc 23       	and	r28, r28
    5eb6:	09 f4       	brne	.+2      	; 0x5eba <i2c_print_error+0x12>
    5eb8:	67 c0       	rjmp	.+206    	; 0x5f88 <i2c_print_error+0xe0>
	{
		printf("  %s\n", (i2c.done ? "DONE" : "ACTIVE") );
    5eba:	80 91 48 1a 	lds	r24, 0x1A48	; 0x801a48 <i2c+0x2>
    5ebe:	81 11       	cpse	r24, r1
    5ec0:	03 c0       	rjmp	.+6      	; 0x5ec8 <i2c_print_error+0x20>
    5ec2:	88 e2       	ldi	r24, 0x28	; 40
    5ec4:	93 e0       	ldi	r25, 0x03	; 3
    5ec6:	02 c0       	rjmp	.+4      	; 0x5ecc <i2c_print_error+0x24>
    5ec8:	83 e2       	ldi	r24, 0x23	; 35
    5eca:	93 e0       	ldi	r25, 0x03	; 3
    5ecc:	ed b7       	in	r30, 0x3d	; 61
    5ece:	fe b7       	in	r31, 0x3e	; 62
    5ed0:	95 83       	std	Z+5, r25	; 0x05
    5ed2:	84 83       	std	Z+4, r24	; 0x04
    5ed4:	83 ec       	ldi	r24, 0xC3	; 195
    5ed6:	93 e0       	ldi	r25, 0x03	; 3
    5ed8:	a0 e0       	ldi	r26, 0x00	; 0
    5eda:	81 83       	std	Z+1, r24	; 0x01
    5edc:	92 83       	std	Z+2, r25	; 0x02
    5ede:	a3 83       	std	Z+3, r26	; 0x03
    5ee0:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
		if(flags & I2C_OP_TIMEOUT)
    5ee4:	c0 ff       	sbrs	r28, 0
    5ee6:	0a c0       	rjmp	.+20     	; 0x5efc <i2c_print_error+0x54>
			printf("  OP_TIMEOUT\n");
    5ee8:	85 eb       	ldi	r24, 0xB5	; 181
    5eea:	93 e0       	ldi	r25, 0x03	; 3
    5eec:	a0 e0       	ldi	r26, 0x00	; 0
    5eee:	ed b7       	in	r30, 0x3d	; 61
    5ef0:	fe b7       	in	r31, 0x3e	; 62
    5ef2:	81 83       	std	Z+1, r24	; 0x01
    5ef4:	92 83       	std	Z+2, r25	; 0x02
    5ef6:	a3 83       	std	Z+3, r26	; 0x03
    5ef8:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
		if(flags & I2C_OP_LEN)
    5efc:	c1 ff       	sbrs	r28, 1
    5efe:	0a c0       	rjmp	.+20     	; 0x5f14 <i2c_print_error+0x6c>
			printf("  OP_LEN\n");
    5f00:	8b ea       	ldi	r24, 0xAB	; 171
    5f02:	93 e0       	ldi	r25, 0x03	; 3
    5f04:	a0 e0       	ldi	r26, 0x00	; 0
    5f06:	ed b7       	in	r30, 0x3d	; 61
    5f08:	fe b7       	in	r31, 0x3e	; 62
    5f0a:	81 83       	std	Z+1, r24	; 0x01
    5f0c:	92 83       	std	Z+2, r25	; 0x02
    5f0e:	a3 83       	std	Z+3, r26	; 0x03
    5f10:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
		if(flags & I2C_OP_ERROR)
    5f14:	c2 ff       	sbrs	r28, 2
    5f16:	0a c0       	rjmp	.+20     	; 0x5f2c <i2c_print_error+0x84>
			printf("  OP_ERROR\n");
    5f18:	8f e9       	ldi	r24, 0x9F	; 159
    5f1a:	93 e0       	ldi	r25, 0x03	; 3
    5f1c:	a0 e0       	ldi	r26, 0x00	; 0
    5f1e:	ed b7       	in	r30, 0x3d	; 61
    5f20:	fe b7       	in	r31, 0x3e	; 62
    5f22:	81 83       	std	Z+1, r24	; 0x01
    5f24:	92 83       	std	Z+2, r25	; 0x02
    5f26:	a3 83       	std	Z+3, r26	; 0x03
    5f28:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
		if(flags & I2C_TW_MR_SLA_NACK)
    5f2c:	c4 ff       	sbrs	r28, 4
    5f2e:	0a c0       	rjmp	.+20     	; 0x5f44 <i2c_print_error+0x9c>
			printf("  TW_MR_SLA_NACK\n");
    5f30:	8d e8       	ldi	r24, 0x8D	; 141
    5f32:	93 e0       	ldi	r25, 0x03	; 3
    5f34:	a0 e0       	ldi	r26, 0x00	; 0
    5f36:	ed b7       	in	r30, 0x3d	; 61
    5f38:	fe b7       	in	r31, 0x3e	; 62
    5f3a:	81 83       	std	Z+1, r24	; 0x01
    5f3c:	92 83       	std	Z+2, r25	; 0x02
    5f3e:	a3 83       	std	Z+3, r26	; 0x03
    5f40:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
		if(flags & I2C_TW_MT_SLA_NACK)
    5f44:	c3 ff       	sbrs	r28, 3
    5f46:	0a c0       	rjmp	.+20     	; 0x5f5c <i2c_print_error+0xb4>
			printf("  TW_MT_SLA_NACK\n");
    5f48:	8b e7       	ldi	r24, 0x7B	; 123
    5f4a:	93 e0       	ldi	r25, 0x03	; 3
    5f4c:	a0 e0       	ldi	r26, 0x00	; 0
    5f4e:	ed b7       	in	r30, 0x3d	; 61
    5f50:	fe b7       	in	r31, 0x3e	; 62
    5f52:	81 83       	std	Z+1, r24	; 0x01
    5f54:	92 83       	std	Z+2, r25	; 0x02
    5f56:	a3 83       	std	Z+3, r26	; 0x03
    5f58:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
		if(flags & I2C_TW_MT_DATA_NACK)
    5f5c:	c5 ff       	sbrs	r28, 5
    5f5e:	0a c0       	rjmp	.+20     	; 0x5f74 <i2c_print_error+0xcc>
			printf("  TW_MT_DATA_NACK\n");
    5f60:	88 e6       	ldi	r24, 0x68	; 104
    5f62:	93 e0       	ldi	r25, 0x03	; 3
    5f64:	a0 e0       	ldi	r26, 0x00	; 0
    5f66:	ed b7       	in	r30, 0x3d	; 61
    5f68:	fe b7       	in	r31, 0x3e	; 62
    5f6a:	81 83       	std	Z+1, r24	; 0x01
    5f6c:	92 83       	std	Z+2, r25	; 0x02
    5f6e:	a3 83       	std	Z+3, r26	; 0x03
    5f70:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
		printf("\n");
    5f74:	86 e6       	ldi	r24, 0x66	; 102
    5f76:	93 e0       	ldi	r25, 0x03	; 3
    5f78:	a0 e0       	ldi	r26, 0x00	; 0
    5f7a:	ed b7       	in	r30, 0x3d	; 61
    5f7c:	fe b7       	in	r31, 0x3e	; 62
    5f7e:	81 83       	std	Z+1, r24	; 0x01
    5f80:	92 83       	std	Z+2, r25	; 0x02
    5f82:	a3 83       	std	Z+3, r26	; 0x03
    5f84:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
	}
}
    5f88:	0f 90       	pop	r0
    5f8a:	0f 90       	pop	r0
    5f8c:	0f 90       	pop	r0
    5f8e:	0f 90       	pop	r0
    5f90:	0f 90       	pop	r0
    5f92:	cf 91       	pop	r28
    5f94:	08 95       	ret

00005f96 <i2c_display_task_errors>:

///@brief Display any task errors
void i2c_display_task_errors()
{
    5f96:	6f 92       	push	r6
    5f98:	7f 92       	push	r7
    5f9a:	8f 92       	push	r8
    5f9c:	af 92       	push	r10
    5f9e:	bf 92       	push	r11
    5fa0:	cf 92       	push	r12
    5fa2:	df 92       	push	r13
    5fa4:	ef 92       	push	r14
    5fa6:	0f 93       	push	r16
    5fa8:	1f 93       	push	r17
    5faa:	cf 93       	push	r28
    5fac:	df 93       	push	r29
    5fae:	00 d0       	rcall	.+0      	; 0x5fb0 <i2c_display_task_errors+0x1a>
    5fb0:	00 d0       	rcall	.+0      	; 0x5fb2 <i2c_display_task_errors+0x1c>
    5fb2:	1f 92       	push	r1
	int8_t i;
	printf("i2c_task.done: %d\n", (int) i2c_task.done);
    5fb4:	80 91 78 17 	lds	r24, 0x1778	; 0x801778 <i2c_task+0x2>
    5fb8:	90 e0       	ldi	r25, 0x00	; 0
    5fba:	ed b7       	in	r30, 0x3d	; 61
    5fbc:	fe b7       	in	r31, 0x3e	; 62
    5fbe:	95 83       	std	Z+5, r25	; 0x05
    5fc0:	84 83       	std	Z+4, r24	; 0x04
    5fc2:	83 e5       	ldi	r24, 0x53	; 83
    5fc4:	93 e0       	ldi	r25, 0x03	; 3
    5fc6:	a0 e0       	ldi	r26, 0x00	; 0
    5fc8:	81 83       	std	Z+1, r24	; 0x01
    5fca:	92 83       	std	Z+2, r25	; 0x02
    5fcc:	a3 83       	std	Z+3, r26	; 0x03
    5fce:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
	printf("i2c_task.error: %d\n", (int) i2c_task.error);
    5fd2:	80 91 79 17 	lds	r24, 0x1779	; 0x801779 <i2c_task+0x3>
    5fd6:	90 e0       	ldi	r25, 0x00	; 0
    5fd8:	ed b7       	in	r30, 0x3d	; 61
    5fda:	fe b7       	in	r31, 0x3e	; 62
    5fdc:	95 83       	std	Z+5, r25	; 0x05
    5fde:	84 83       	std	Z+4, r24	; 0x04
    5fe0:	8f e3       	ldi	r24, 0x3F	; 63
    5fe2:	93 e0       	ldi	r25, 0x03	; 3
    5fe4:	a0 e0       	ldi	r26, 0x00	; 0
    5fe6:	81 83       	std	Z+1, r24	; 0x01
    5fe8:	92 83       	std	Z+2, r25	; 0x02
    5fea:	a3 83       	std	Z+3, r26	; 0x03
    5fec:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
    5ff0:	c6 e5       	ldi	r28, 0x56	; 86
    5ff2:	d7 e1       	ldi	r29, 0x17	; 23
	for(i=0;i2c_task_op[i] && i < I2C_OPS;++i)
    5ff4:	00 e0       	ldi	r16, 0x00	; 0
    5ff6:	10 e0       	ldi	r17, 0x00	; 0
	{
		printf("task: %d\n", (int) i);
    5ff8:	85 e3       	ldi	r24, 0x35	; 53
    5ffa:	93 e0       	ldi	r25, 0x03	; 3
    5ffc:	6c 01       	movw	r12, r24
    5ffe:	e1 2c       	mov	r14, r1
		i2c_print_error(i2c_task_op[i]);
		printf("\n");
    6000:	83 e3       	ldi	r24, 0x33	; 51
    6002:	93 e0       	ldi	r25, 0x03	; 3
    6004:	3c 01       	movw	r6, r24
    6006:	81 2c       	mov	r8, r1
void i2c_display_task_errors()
{
	int8_t i;
	printf("i2c_task.done: %d\n", (int) i2c_task.done);
	printf("i2c_task.error: %d\n", (int) i2c_task.error);
	for(i=0;i2c_task_op[i] && i < I2C_OPS;++i)
    6008:	30 2f       	mov	r19, r16
    600a:	21 2f       	mov	r18, r17
    600c:	5e 01       	movw	r10, r28
    600e:	0f 5f       	subi	r16, 0xFF	; 255
    6010:	1f 4f       	sbci	r17, 0xFF	; 255
    6012:	88 81       	ld	r24, Y
    6014:	99 81       	ldd	r25, Y+1	; 0x01
    6016:	89 2b       	or	r24, r25
    6018:	b1 f0       	breq	.+44     	; 0x6046 <i2c_display_task_errors+0xb0>
	{
		printf("task: %d\n", (int) i);
    601a:	ed b7       	in	r30, 0x3d	; 61
    601c:	fe b7       	in	r31, 0x3e	; 62
    601e:	34 83       	std	Z+4, r19	; 0x04
    6020:	25 83       	std	Z+5, r18	; 0x05
    6022:	c1 82       	std	Z+1, r12	; 0x01
    6024:	d2 82       	std	Z+2, r13	; 0x02
    6026:	e3 82       	std	Z+3, r14	; 0x03
    6028:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
    602c:	22 96       	adiw	r28, 0x02	; 2
		i2c_print_error(i2c_task_op[i]);
    602e:	f5 01       	movw	r30, r10
    6030:	80 81       	ld	r24, Z
    6032:	91 81       	ldd	r25, Z+1	; 0x01
    6034:	39 df       	rcall	.-398    	; 0x5ea8 <i2c_print_error>
		printf("\n");
    6036:	ed b7       	in	r30, 0x3d	; 61
    6038:	fe b7       	in	r31, 0x3e	; 62
    603a:	61 82       	std	Z+1, r6	; 0x01
    603c:	72 82       	std	Z+2, r7	; 0x02
    603e:	83 82       	std	Z+3, r8	; 0x03
    6040:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
    6044:	e1 cf       	rjmp	.-62     	; 0x6008 <i2c_display_task_errors+0x72>
	}
}
    6046:	0f 90       	pop	r0
    6048:	0f 90       	pop	r0
    604a:	0f 90       	pop	r0
    604c:	0f 90       	pop	r0
    604e:	0f 90       	pop	r0
    6050:	df 91       	pop	r29
    6052:	cf 91       	pop	r28
    6054:	1f 91       	pop	r17
    6056:	0f 91       	pop	r16
    6058:	ef 90       	pop	r14
    605a:	df 90       	pop	r13
    605c:	cf 90       	pop	r12
    605e:	bf 90       	pop	r11
    6060:	af 90       	pop	r10
    6062:	8f 90       	pop	r8
    6064:	7f 90       	pop	r7
    6066:	6f 90       	pop	r6
    6068:	08 95       	ret

0000606a <i2c_rtc_write.part.0>:
/// @return 0 if not running.
/// @return -1 ERROR
int8_t rtc_run_test()
{
	return ( rtc_run(-1) );
}
    606a:	cf 92       	push	r12
    606c:	df 92       	push	r13
    606e:	ef 92       	push	r14
    6070:	0f 93       	push	r16
    6072:	1f 93       	push	r17
    6074:	cf 93       	push	r28
    6076:	df 93       	push	r29
    6078:	cd b7       	in	r28, 0x3d	; 61
    607a:	de b7       	in	r29, 0x3e	; 62
    607c:	2c 97       	sbiw	r28, 0x0c	; 12
    607e:	0f b6       	in	r0, 0x3f	; 63
    6080:	f8 94       	cli
    6082:	de bf       	out	0x3e, r29	; 62
    6084:	0f be       	out	0x3f, r0	; 63
    6086:	cd bf       	out	0x3d, r28	; 61
    6088:	08 2f       	mov	r16, r24
    608a:	6c 83       	std	Y+4, r22	; 0x04
    608c:	30 e0       	ldi	r19, 0x00	; 0
    608e:	62 2f       	mov	r22, r18
    6090:	70 e0       	ldi	r23, 0x00	; 0
    6092:	83 2f       	mov	r24, r19
    6094:	03 2e       	mov	r0, r19
    6096:	00 0c       	add	r0, r0
    6098:	99 0b       	sbc	r25, r25
    609a:	86 17       	cp	r24, r22
    609c:	97 07       	cpc	r25, r23
    609e:	6c f4       	brge	.+26     	; 0x60ba <i2c_rtc_write.part.0+0x50>
    60a0:	e5 e0       	ldi	r30, 0x05	; 5
    60a2:	f0 e0       	ldi	r31, 0x00	; 0
    60a4:	ec 0f       	add	r30, r28
    60a6:	fd 1f       	adc	r31, r29
    60a8:	e8 0f       	add	r30, r24
    60aa:	f9 1f       	adc	r31, r25
    60ac:	da 01       	movw	r26, r20
    60ae:	a8 0f       	add	r26, r24
    60b0:	b9 1f       	adc	r27, r25
    60b2:	8c 91       	ld	r24, X
    60b4:	80 83       	st	Z, r24
    60b6:	3f 5f       	subi	r19, 0xFF	; 255
    60b8:	ec cf       	rjmp	.-40     	; 0x6092 <i2c_rtc_write.part.0+0x28>
    60ba:	11 e0       	ldi	r17, 0x01	; 1
    60bc:	12 0f       	add	r17, r18
    60be:	21 2f       	mov	r18, r17
    60c0:	ae 01       	movw	r20, r28
    60c2:	4c 5f       	subi	r20, 0xFC	; 252
    60c4:	5f 4f       	sbci	r21, 0xFF	; 255
    60c6:	60 e0       	ldi	r22, 0x00	; 0
    60c8:	80 2f       	mov	r24, r16
    60ca:	61 dd       	rcall	.-1342   	; 0x5b8e <i2c_fn>
    60cc:	88 23       	and	r24, r24
    60ce:	11 f0       	breq	.+4      	; 0x60d4 <i2c_rtc_write.part.0+0x6a>
    60d0:	81 e0       	ldi	r24, 0x01	; 1
    60d2:	1c c0       	rjmp	.+56     	; 0x610c <i2c_rtc_write.part.0+0xa2>
    60d4:	80 ee       	ldi	r24, 0xE0	; 224
    60d6:	94 e0       	ldi	r25, 0x04	; 4
    60d8:	6c 01       	movw	r12, r24
    60da:	e1 2c       	mov	r14, r1
    60dc:	ed b7       	in	r30, 0x3d	; 61
    60de:	fe b7       	in	r31, 0x3e	; 62
    60e0:	c1 82       	std	Z+1, r12	; 0x01
    60e2:	d2 82       	std	Z+2, r13	; 0x02
    60e4:	e3 82       	std	Z+3, r14	; 0x03
    60e6:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
    60ea:	21 2f       	mov	r18, r17
    60ec:	ae 01       	movw	r20, r28
    60ee:	4c 5f       	subi	r20, 0xFC	; 252
    60f0:	5f 4f       	sbci	r21, 0xFF	; 255
    60f2:	60 e0       	ldi	r22, 0x00	; 0
    60f4:	80 2f       	mov	r24, r16
    60f6:	4b dd       	rcall	.-1386   	; 0x5b8e <i2c_fn>
    60f8:	81 11       	cpse	r24, r1
    60fa:	ea cf       	rjmp	.-44     	; 0x60d0 <i2c_rtc_write.part.0+0x66>
    60fc:	ed b7       	in	r30, 0x3d	; 61
    60fe:	fe b7       	in	r31, 0x3e	; 62
    6100:	c1 82       	std	Z+1, r12	; 0x01
    6102:	d2 82       	std	Z+2, r13	; 0x02
    6104:	e3 82       	std	Z+3, r14	; 0x03
    6106:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
    610a:	80 e0       	ldi	r24, 0x00	; 0
    610c:	2c 96       	adiw	r28, 0x0c	; 12
    610e:	0f b6       	in	r0, 0x3f	; 63
    6110:	f8 94       	cli
    6112:	de bf       	out	0x3e, r29	; 62
    6114:	0f be       	out	0x3f, r0	; 63
    6116:	cd bf       	out	0x3d, r28	; 61
    6118:	df 91       	pop	r29
    611a:	cf 91       	pop	r28
    611c:	1f 91       	pop	r17
    611e:	0f 91       	pop	r16
    6120:	ef 90       	pop	r14
    6122:	df 90       	pop	r13
    6124:	cf 90       	pop	r12
    6126:	08 95       	ret

00006128 <BINtoBCD>:
    6128:	6a e0       	ldi	r22, 0x0A	; 10
    612a:	0e 94 04 e8 	call	0x1d008	; 0x1d008 <__udivmodqi4>
    612e:	82 95       	swap	r24
    6130:	80 7f       	andi	r24, 0xF0	; 240
    6132:	89 2b       	or	r24, r25
    6134:	08 95       	ret

00006136 <BCDtoBIN>:
    6136:	98 2f       	mov	r25, r24
    6138:	92 95       	swap	r25
    613a:	9f 70       	andi	r25, 0x0F	; 15
    613c:	8f 70       	andi	r24, 0x0F	; 15
    613e:	2a e0       	ldi	r18, 0x0A	; 10
    6140:	92 9f       	mul	r25, r18
    6142:	80 0d       	add	r24, r0
    6144:	11 24       	eor	r1, r1
    6146:	08 95       	ret

00006148 <i2c_rtc_read>:
    6148:	af 92       	push	r10
    614a:	bf 92       	push	r11
    614c:	cf 92       	push	r12
    614e:	df 92       	push	r13
    6150:	ef 92       	push	r14
    6152:	0f 93       	push	r16
    6154:	1f 93       	push	r17
    6156:	cf 93       	push	r28
    6158:	df 93       	push	r29
    615a:	00 d0       	rcall	.+0      	; 0x615c <i2c_rtc_read+0x14>
    615c:	00 d0       	rcall	.+0      	; 0x615e <i2c_rtc_read+0x16>
    615e:	cd b7       	in	r28, 0x3d	; 61
    6160:	de b7       	in	r29, 0x3e	; 62
    6162:	6c 83       	std	Y+4, r22	; 0x04
    6164:	9f ef       	ldi	r25, 0xFF	; 255
    6166:	92 0f       	add	r25, r18
    6168:	98 30       	cpi	r25, 0x08	; 8
    616a:	b0 f5       	brcc	.+108    	; 0x61d8 <i2c_rtc_read+0x90>
    616c:	02 2f       	mov	r16, r18
    616e:	5a 01       	movw	r10, r20
    6170:	18 2f       	mov	r17, r24
    6172:	21 e0       	ldi	r18, 0x01	; 1
    6174:	ae 01       	movw	r20, r28
    6176:	4c 5f       	subi	r20, 0xFC	; 252
    6178:	5f 4f       	sbci	r21, 0xFF	; 255
    617a:	60 e0       	ldi	r22, 0x00	; 0
    617c:	08 dd       	rcall	.-1520   	; 0x5b8e <i2c_fn>
    617e:	81 11       	cpse	r24, r1
    6180:	1a c0       	rjmp	.+52     	; 0x61b6 <i2c_rtc_read+0x6e>
    6182:	84 ec       	ldi	r24, 0xC4	; 196
    6184:	94 e0       	ldi	r25, 0x04	; 4
    6186:	6c 01       	movw	r12, r24
    6188:	e1 2c       	mov	r14, r1
    618a:	ed b7       	in	r30, 0x3d	; 61
    618c:	fe b7       	in	r31, 0x3e	; 62
    618e:	c1 82       	std	Z+1, r12	; 0x01
    6190:	d2 82       	std	Z+2, r13	; 0x02
    6192:	e3 82       	std	Z+3, r14	; 0x03
    6194:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
    6198:	21 e0       	ldi	r18, 0x01	; 1
    619a:	ae 01       	movw	r20, r28
    619c:	4c 5f       	subi	r20, 0xFC	; 252
    619e:	5f 4f       	sbci	r21, 0xFF	; 255
    61a0:	60 e0       	ldi	r22, 0x00	; 0
    61a2:	81 2f       	mov	r24, r17
    61a4:	f4 dc       	rcall	.-1560   	; 0x5b8e <i2c_fn>
    61a6:	81 11       	cpse	r24, r1
    61a8:	06 c0       	rjmp	.+12     	; 0x61b6 <i2c_rtc_read+0x6e>
    61aa:	ed b7       	in	r30, 0x3d	; 61
    61ac:	fe b7       	in	r31, 0x3e	; 62
    61ae:	c1 82       	std	Z+1, r12	; 0x01
    61b0:	d2 82       	std	Z+2, r13	; 0x02
    61b2:	e3 82       	std	Z+3, r14	; 0x03
    61b4:	0f c0       	rjmp	.+30     	; 0x61d4 <i2c_rtc_read+0x8c>
    61b6:	20 2f       	mov	r18, r16
    61b8:	a5 01       	movw	r20, r10
    61ba:	61 e0       	ldi	r22, 0x01	; 1
    61bc:	81 2f       	mov	r24, r17
    61be:	e7 dc       	rcall	.-1586   	; 0x5b8e <i2c_fn>
    61c0:	81 11       	cpse	r24, r1
    61c2:	0c c0       	rjmp	.+24     	; 0x61dc <i2c_rtc_read+0x94>
    61c4:	8b ea       	ldi	r24, 0xAB	; 171
    61c6:	94 e0       	ldi	r25, 0x04	; 4
    61c8:	a0 e0       	ldi	r26, 0x00	; 0
    61ca:	ed b7       	in	r30, 0x3d	; 61
    61cc:	fe b7       	in	r31, 0x3e	; 62
    61ce:	81 83       	std	Z+1, r24	; 0x01
    61d0:	92 83       	std	Z+2, r25	; 0x02
    61d2:	a3 83       	std	Z+3, r26	; 0x03
    61d4:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
    61d8:	80 e0       	ldi	r24, 0x00	; 0
    61da:	01 c0       	rjmp	.+2      	; 0x61de <i2c_rtc_read+0x96>
    61dc:	81 e0       	ldi	r24, 0x01	; 1
    61de:	0f 90       	pop	r0
    61e0:	0f 90       	pop	r0
    61e2:	0f 90       	pop	r0
    61e4:	0f 90       	pop	r0
    61e6:	df 91       	pop	r29
    61e8:	cf 91       	pop	r28
    61ea:	1f 91       	pop	r17
    61ec:	0f 91       	pop	r16
    61ee:	ef 90       	pop	r14
    61f0:	df 90       	pop	r13
    61f2:	cf 90       	pop	r12
    61f4:	bf 90       	pop	r11
    61f6:	af 90       	pop	r10
    61f8:	08 95       	ret

000061fa <i2c_rtc_init>:
    61fa:	60 ea       	ldi	r22, 0xA0	; 160
    61fc:	76 e8       	ldi	r23, 0x86	; 134
    61fe:	81 e0       	ldi	r24, 0x01	; 1
    6200:	90 e0       	ldi	r25, 0x00	; 0
    6202:	cc cb       	rjmp	.-2152   	; 0x599c <i2c_init>
    6204:	08 95       	ret

00006206 <rtc_write>:
    6206:	ab e0       	ldi	r26, 0x0B	; 11
    6208:	b0 e0       	ldi	r27, 0x00	; 0
    620a:	e9 e0       	ldi	r30, 0x09	; 9
    620c:	f1 e3       	ldi	r31, 0x31	; 49
    620e:	0c 94 b2 e8 	jmp	0x1d164	; 0x1d164 <__prologue_saves__+0x1c>
    6212:	8c 01       	movw	r16, r24
    6214:	fc 01       	movw	r30, r24
    6216:	80 81       	ld	r24, Z
    6218:	87 df       	rcall	.-242    	; 0x6128 <BINtoBCD>
    621a:	8f 77       	andi	r24, 0x7F	; 127
    621c:	8c 83       	std	Y+4, r24	; 0x04
    621e:	f8 01       	movw	r30, r16
    6220:	82 81       	ldd	r24, Z+2	; 0x02
    6222:	82 df       	rcall	.-252    	; 0x6128 <BINtoBCD>
    6224:	8f 77       	andi	r24, 0x7F	; 127
    6226:	8d 83       	std	Y+5, r24	; 0x05
    6228:	f8 01       	movw	r30, r16
    622a:	84 81       	ldd	r24, Z+4	; 0x04
    622c:	7d df       	rcall	.-262    	; 0x6128 <BINtoBCD>
    622e:	8f 73       	andi	r24, 0x3F	; 63
    6230:	8e 83       	std	Y+6, r24	; 0x06
    6232:	f8 01       	movw	r30, r16
    6234:	84 85       	ldd	r24, Z+12	; 0x0c
    6236:	87 70       	andi	r24, 0x07	; 7
    6238:	8f 5f       	subi	r24, 0xFF	; 255
    623a:	8f 83       	std	Y+7, r24	; 0x07
    623c:	86 81       	ldd	r24, Z+6	; 0x06
    623e:	74 df       	rcall	.-280    	; 0x6128 <BINtoBCD>
    6240:	8f 73       	andi	r24, 0x3F	; 63
    6242:	88 87       	std	Y+8, r24	; 0x08
    6244:	f8 01       	movw	r30, r16
    6246:	80 85       	ldd	r24, Z+8	; 0x08
    6248:	8f 5f       	subi	r24, 0xFF	; 255
    624a:	6e df       	rcall	.-292    	; 0x6128 <BINtoBCD>
    624c:	8f 71       	andi	r24, 0x1F	; 31
    624e:	89 87       	std	Y+9, r24	; 0x09
    6250:	f8 01       	movw	r30, r16
    6252:	82 85       	ldd	r24, Z+10	; 0x0a
    6254:	84 56       	subi	r24, 0x64	; 100
    6256:	68 df       	rcall	.-304    	; 0x6128 <BINtoBCD>
    6258:	8a 87       	std	Y+10, r24	; 0x0a
    625a:	83 e9       	ldi	r24, 0x93	; 147
    625c:	8b 87       	std	Y+11, r24	; 0x0b
    625e:	28 e0       	ldi	r18, 0x08	; 8
    6260:	ae 01       	movw	r20, r28
    6262:	4c 5f       	subi	r20, 0xFC	; 252
    6264:	5f 4f       	sbci	r21, 0xFF	; 255
    6266:	60 e0       	ldi	r22, 0x00	; 0
    6268:	88 e6       	ldi	r24, 0x68	; 104
    626a:	ff de       	rcall	.-514    	; 0x606a <i2c_rtc_write.part.0>
    626c:	81 11       	cpse	r24, r1
    626e:	0c c0       	rjmp	.+24     	; 0x6288 <rtc_write+0x82>
    6270:	8a e9       	ldi	r24, 0x9A	; 154
    6272:	94 e0       	ldi	r25, 0x04	; 4
    6274:	a0 e0       	ldi	r26, 0x00	; 0
    6276:	ed b7       	in	r30, 0x3d	; 61
    6278:	fe b7       	in	r31, 0x3e	; 62
    627a:	81 83       	std	Z+1, r24	; 0x01
    627c:	92 83       	std	Z+2, r25	; 0x02
    627e:	a3 83       	std	Z+3, r26	; 0x03
    6280:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
    6284:	80 e0       	ldi	r24, 0x00	; 0
    6286:	01 c0       	rjmp	.+2      	; 0x628a <rtc_write+0x84>
    6288:	81 e0       	ldi	r24, 0x01	; 1
    628a:	2b 96       	adiw	r28, 0x0b	; 11
    628c:	e4 e0       	ldi	r30, 0x04	; 4
    628e:	0c 94 ce e8 	jmp	0x1d19c	; 0x1d19c <__epilogue_restores__+0x1c>

00006292 <rtc_read>:
    6292:	ab e0       	ldi	r26, 0x0B	; 11
    6294:	b0 e0       	ldi	r27, 0x00	; 0
    6296:	ef e4       	ldi	r30, 0x4F	; 79
    6298:	f1 e3       	ldi	r31, 0x31	; 49
    629a:	0c 94 b2 e8 	jmp	0x1d164	; 0x1d164 <__prologue_saves__+0x1c>
    629e:	8c 01       	movw	r16, r24
    62a0:	28 e0       	ldi	r18, 0x08	; 8
    62a2:	ae 01       	movw	r20, r28
    62a4:	4c 5f       	subi	r20, 0xFC	; 252
    62a6:	5f 4f       	sbci	r21, 0xFF	; 255
    62a8:	60 e0       	ldi	r22, 0x00	; 0
    62aa:	88 e6       	ldi	r24, 0x68	; 104
    62ac:	4d df       	rcall	.-358    	; 0x6148 <i2c_rtc_read>
    62ae:	81 11       	cpse	r24, r1
    62b0:	0c c0       	rjmp	.+24     	; 0x62ca <rtc_read+0x38>
    62b2:	8a e8       	ldi	r24, 0x8A	; 138
    62b4:	94 e0       	ldi	r25, 0x04	; 4
    62b6:	a0 e0       	ldi	r26, 0x00	; 0
    62b8:	ed b7       	in	r30, 0x3d	; 61
    62ba:	fe b7       	in	r31, 0x3e	; 62
    62bc:	81 83       	std	Z+1, r24	; 0x01
    62be:	92 83       	std	Z+2, r25	; 0x02
    62c0:	a3 83       	std	Z+3, r26	; 0x03
    62c2:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
    62c6:	80 e0       	ldi	r24, 0x00	; 0
    62c8:	33 c0       	rjmp	.+102    	; 0x6330 <rtc_read+0x9e>
    62ca:	8c 81       	ldd	r24, Y+4	; 0x04
    62cc:	8f 77       	andi	r24, 0x7F	; 127
    62ce:	33 df       	rcall	.-410    	; 0x6136 <BCDtoBIN>
    62d0:	90 e0       	ldi	r25, 0x00	; 0
    62d2:	f8 01       	movw	r30, r16
    62d4:	91 83       	std	Z+1, r25	; 0x01
    62d6:	80 83       	st	Z, r24
    62d8:	8d 81       	ldd	r24, Y+5	; 0x05
    62da:	8f 77       	andi	r24, 0x7F	; 127
    62dc:	2c df       	rcall	.-424    	; 0x6136 <BCDtoBIN>
    62de:	90 e0       	ldi	r25, 0x00	; 0
    62e0:	f8 01       	movw	r30, r16
    62e2:	93 83       	std	Z+3, r25	; 0x03
    62e4:	82 83       	std	Z+2, r24	; 0x02
    62e6:	8e 81       	ldd	r24, Y+6	; 0x06
    62e8:	8f 73       	andi	r24, 0x3F	; 63
    62ea:	25 df       	rcall	.-438    	; 0x6136 <BCDtoBIN>
    62ec:	90 e0       	ldi	r25, 0x00	; 0
    62ee:	f8 01       	movw	r30, r16
    62f0:	95 83       	std	Z+5, r25	; 0x05
    62f2:	84 83       	std	Z+4, r24	; 0x04
    62f4:	8f 81       	ldd	r24, Y+7	; 0x07
    62f6:	87 70       	andi	r24, 0x07	; 7
    62f8:	90 e0       	ldi	r25, 0x00	; 0
    62fa:	01 97       	sbiw	r24, 0x01	; 1
    62fc:	95 87       	std	Z+13, r25	; 0x0d
    62fe:	84 87       	std	Z+12, r24	; 0x0c
    6300:	88 85       	ldd	r24, Y+8	; 0x08
    6302:	8f 73       	andi	r24, 0x3F	; 63
    6304:	18 df       	rcall	.-464    	; 0x6136 <BCDtoBIN>
    6306:	90 e0       	ldi	r25, 0x00	; 0
    6308:	f8 01       	movw	r30, r16
    630a:	97 83       	std	Z+7, r25	; 0x07
    630c:	86 83       	std	Z+6, r24	; 0x06
    630e:	89 85       	ldd	r24, Y+9	; 0x09
    6310:	8f 71       	andi	r24, 0x1F	; 31
    6312:	11 df       	rcall	.-478    	; 0x6136 <BCDtoBIN>
    6314:	90 e0       	ldi	r25, 0x00	; 0
    6316:	01 97       	sbiw	r24, 0x01	; 1
    6318:	f8 01       	movw	r30, r16
    631a:	91 87       	std	Z+9, r25	; 0x09
    631c:	80 87       	std	Z+8, r24	; 0x08
    631e:	8a 85       	ldd	r24, Y+10	; 0x0a
    6320:	0a df       	rcall	.-492    	; 0x6136 <BCDtoBIN>
    6322:	90 e0       	ldi	r25, 0x00	; 0
    6324:	8c 59       	subi	r24, 0x9C	; 156
    6326:	9f 4f       	sbci	r25, 0xFF	; 255
    6328:	f8 01       	movw	r30, r16
    632a:	93 87       	std	Z+11, r25	; 0x0b
    632c:	82 87       	std	Z+10, r24	; 0x0a
    632e:	81 e0       	ldi	r24, 0x01	; 1
    6330:	2b 96       	adiw	r28, 0x0b	; 11
    6332:	e4 e0       	ldi	r30, 0x04	; 4
    6334:	0c 94 ce e8 	jmp	0x1d19c	; 0x1d19c <__epilogue_restores__+0x1c>

00006338 <rtc_run>:
    6338:	a4 e0       	ldi	r26, 0x04	; 4
    633a:	b0 e0       	ldi	r27, 0x00	; 0
    633c:	e2 ea       	ldi	r30, 0xA2	; 162
    633e:	f1 e3       	ldi	r31, 0x31	; 49
    6340:	0c 94 b2 e8 	jmp	0x1d164	; 0x1d164 <__prologue_saves__+0x1c>
    6344:	8c 01       	movw	r16, r24
    6346:	21 e0       	ldi	r18, 0x01	; 1
    6348:	ae 01       	movw	r20, r28
    634a:	4c 5f       	subi	r20, 0xFC	; 252
    634c:	5f 4f       	sbci	r21, 0xFF	; 255
    634e:	60 e0       	ldi	r22, 0x00	; 0
    6350:	88 e6       	ldi	r24, 0x68	; 104
    6352:	fa de       	rcall	.-524    	; 0x6148 <i2c_rtc_read>
    6354:	81 11       	cpse	r24, r1
    6356:	03 c0       	rjmp	.+6      	; 0x635e <rtc_run+0x26>
    6358:	86 e7       	ldi	r24, 0x76	; 118
    635a:	94 e0       	ldi	r25, 0x04	; 4
    635c:	24 c0       	rjmp	.+72     	; 0x63a6 <rtc_run+0x6e>
    635e:	8c 81       	ldd	r24, Y+4	; 0x04
    6360:	0f 3f       	cpi	r16, 0xFF	; 255
    6362:	ff ef       	ldi	r31, 0xFF	; 255
    6364:	1f 07       	cpc	r17, r31
    6366:	59 f4       	brne	.+22     	; 0x637e <rtc_run+0x46>
    6368:	08 2e       	mov	r0, r24
    636a:	00 0c       	add	r0, r0
    636c:	99 0b       	sbc	r25, r25
    636e:	80 95       	com	r24
    6370:	90 95       	com	r25
    6372:	89 2f       	mov	r24, r25
    6374:	88 1f       	adc	r24, r24
    6376:	88 27       	eor	r24, r24
    6378:	88 1f       	adc	r24, r24
    637a:	90 e0       	ldi	r25, 0x00	; 0
    637c:	20 c0       	rjmp	.+64     	; 0x63be <rtc_run+0x86>
    637e:	8f 77       	andi	r24, 0x7F	; 127
    6380:	01 15       	cp	r16, r1
    6382:	11 05       	cpc	r17, r1
    6384:	11 f4       	brne	.+4      	; 0x638a <rtc_run+0x52>
    6386:	90 e8       	ldi	r25, 0x80	; 128
    6388:	01 c0       	rjmp	.+2      	; 0x638c <rtc_run+0x54>
    638a:	90 e0       	ldi	r25, 0x00	; 0
    638c:	89 2b       	or	r24, r25
    638e:	8c 83       	std	Y+4, r24	; 0x04
    6390:	21 e0       	ldi	r18, 0x01	; 1
    6392:	ae 01       	movw	r20, r28
    6394:	4c 5f       	subi	r20, 0xFC	; 252
    6396:	5f 4f       	sbci	r21, 0xFF	; 255
    6398:	60 e0       	ldi	r22, 0x00	; 0
    639a:	88 e6       	ldi	r24, 0x68	; 104
    639c:	66 de       	rcall	.-820    	; 0x606a <i2c_rtc_write.part.0>
    639e:	81 11       	cpse	r24, r1
    63a0:	0d c0       	rjmp	.+26     	; 0x63bc <rtc_run+0x84>
    63a2:	81 e6       	ldi	r24, 0x61	; 97
    63a4:	94 e0       	ldi	r25, 0x04	; 4
    63a6:	a0 e0       	ldi	r26, 0x00	; 0
    63a8:	ed b7       	in	r30, 0x3d	; 61
    63aa:	fe b7       	in	r31, 0x3e	; 62
    63ac:	81 83       	std	Z+1, r24	; 0x01
    63ae:	92 83       	std	Z+2, r25	; 0x02
    63b0:	a3 83       	std	Z+3, r26	; 0x03
    63b2:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
    63b6:	8f ef       	ldi	r24, 0xFF	; 255
    63b8:	9f ef       	ldi	r25, 0xFF	; 255
    63ba:	01 c0       	rjmp	.+2      	; 0x63be <rtc_run+0x86>
    63bc:	c8 01       	movw	r24, r16
    63be:	24 96       	adiw	r28, 0x04	; 4
    63c0:	e4 e0       	ldi	r30, 0x04	; 4
    63c2:	0c 94 ce e8 	jmp	0x1d19c	; 0x1d19c <__epilogue_restores__+0x1c>

000063c6 <rtc_init>:
/// @param[in] seconds: POSIX EPOCH time in seconds.
///
/// @return  run state 0 = STOP, 1 = RUN
/// @return -1 = ERROR
uint8_t rtc_init (int force, time_t seconds)
{
    63c6:	a7 e0       	ldi	r26, 0x07	; 7
    63c8:	b0 e0       	ldi	r27, 0x00	; 0
    63ca:	e9 ee       	ldi	r30, 0xE9	; 233
    63cc:	f1 e3       	ldi	r31, 0x31	; 49
    63ce:	0c 94 b2 e8 	jmp	0x1d164	; 0x1d164 <__prologue_saves__+0x1c>
    63d2:	8c 01       	movw	r16, r24
    63d4:	4c 83       	std	Y+4, r20	; 0x04
    63d6:	5d 83       	std	Y+5, r21	; 0x05
    63d8:	6e 83       	std	Y+6, r22	; 0x06
    63da:	7f 83       	std	Y+7, r23	; 0x07
    int8_t    state;

    tm_t *tmp;

    i2c_rtc_init();
    63dc:	0e df       	rcall	.-484    	; 0x61fa <i2c_rtc_init>

    if(!force)
    63de:	01 15       	cp	r16, r1
    63e0:	11 05       	cpc	r17, r1
    63e2:	39 f4       	brne	.+14     	; 0x63f2 <rtc_init+0x2c>
    {
        state = rtc_run(-1);
    63e4:	8f ef       	ldi	r24, 0xFF	; 255
    63e6:	9f ef       	ldi	r25, 0xFF	; 255
    63e8:	a7 df       	rcall	.-178    	; 0x6338 <rtc_run>
        if(state < 0)
    63ea:	87 fd       	sbrc	r24, 7
    63ec:	16 c0       	rjmp	.+44     	; 0x641a <rtc_init+0x54>
        {
            rtc_ok = 0;
            return 0;
        }
        if(state == 0)                            // stopped
    63ee:	81 11       	cpse	r24, r1
    63f0:	22 c0       	rjmp	.+68     	; 0x6436 <rtc_init+0x70>
            force = 1;
    }

    if(force)                                     // INIT
    {
        if(rtc_run(0) < 0)                        // STOP RTC
    63f2:	80 e0       	ldi	r24, 0x00	; 0
    63f4:	90 e0       	ldi	r25, 0x00	; 0
    63f6:	a0 df       	rcall	.-192    	; 0x6338 <rtc_run>
    63f8:	97 fd       	sbrc	r25, 7
    63fa:	0f c0       	rjmp	.+30     	; 0x641a <rtc_init+0x54>
        {
            rtc_ok = 0;                           // Fail
            return 0;
        }

        tmp = gmtime(&seconds);
    63fc:	ce 01       	movw	r24, r28
    63fe:	04 96       	adiw	r24, 0x04	; 4
    6400:	a3 d6       	rcall	.+3398   	; 0x7148 <gmtime>
    6402:	00 97       	sbiw	r24, 0x00	; 0

        if(tmp == NULL || !rtc_write(tmp))
    6404:	81 f4       	brne	.+32     	; 0x6426 <rtc_init+0x60>
    6406:	83 e4       	ldi	r24, 0x43	; 67
        {
            printf("rtc_init  write epoch failed\n");
    6408:	94 e0       	ldi	r25, 0x04	; 4
    640a:	a0 e0       	ldi	r26, 0x00	; 0
    640c:	ed b7       	in	r30, 0x3d	; 61
    640e:	fe b7       	in	r31, 0x3e	; 62
    6410:	81 83       	std	Z+1, r24	; 0x01
    6412:	92 83       	std	Z+2, r25	; 0x02
    6414:	a3 83       	std	Z+3, r26	; 0x03
    6416:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
    641a:	10 92 ee 19 	sts	0x19EE, r1	; 0x8019ee <rtc_ok+0x1>
            rtc_ok = 0;
    641e:	10 92 ed 19 	sts	0x19ED, r1	; 0x8019ed <rtc_ok>
            return 0;
    6422:	80 e0       	ldi	r24, 0x00	; 0
    6424:	0e c0       	rjmp	.+28     	; 0x6442 <rtc_init+0x7c>
            return 0;
        }

        tmp = gmtime(&seconds);

        if(tmp == NULL || !rtc_write(tmp))
    6426:	ef de       	rcall	.-546    	; 0x6206 <rtc_write>
    6428:	88 23       	and	r24, r24
    642a:	69 f3       	breq	.-38     	; 0x6406 <rtc_init+0x40>
            printf("rtc_init  write epoch failed\n");
            rtc_ok = 0;
            return 0;
        }

        if(rtc_run(1) < 0)                        // START RTC
    642c:	81 e0       	ldi	r24, 0x01	; 1
    642e:	90 e0       	ldi	r25, 0x00	; 0
    6430:	83 df       	rcall	.-250    	; 0x6338 <rtc_run>
    6432:	97 fd       	sbrc	r25, 7
    6434:	f2 cf       	rjmp	.-28     	; 0x641a <rtc_init+0x54>
    6436:	81 e0       	ldi	r24, 0x01	; 1
        {
            rtc_ok = 0;                           // Fail
            return 0;
        }
    }
    rtc_ok = 1;
    6438:	90 e0       	ldi	r25, 0x00	; 0
    643a:	90 93 ee 19 	sts	0x19EE, r25	; 0x8019ee <rtc_ok+0x1>
    643e:	80 93 ed 19 	sts	0x19ED, r24	; 0x8019ed <rtc_ok>
    6442:	27 96       	adiw	r28, 0x07	; 7
    return 1;
}
    6444:	e4 e0       	ldi	r30, 0x04	; 4
    6446:	0c 94 ce e8 	jmp	0x1d19c	; 0x1d19c <__epilogue_restores__+0x1c>

0000644a <islower>:
    644a:	9c 01       	movw	r18, r24
    if(!ptr)
        return(ptr);
    strncpy(ptr,str,len);
    return(ptr);

}
    644c:	21 56       	subi	r18, 0x61	; 97
    644e:	31 09       	sbc	r19, r1
    6450:	81 e0       	ldi	r24, 0x01	; 1
    6452:	90 e0       	ldi	r25, 0x00	; 0
    6454:	2a 31       	cpi	r18, 0x1A	; 26
    6456:	31 05       	cpc	r19, r1
    6458:	10 f0       	brcs	.+4      	; 0x645e <islower+0x14>
    645a:	80 e0       	ldi	r24, 0x00	; 0
    645c:	90 e0       	ldi	r25, 0x00	; 0
    645e:	08 95       	ret

00006460 <toupper>:
    6460:	cf 93       	push	r28
    6462:	df 93       	push	r29
    6464:	ec 01       	movw	r28, r24
    6466:	f1 df       	rcall	.-30     	; 0x644a <islower>
    6468:	89 2b       	or	r24, r25
    646a:	19 f0       	breq	.+6      	; 0x6472 <toupper+0x12>
    646c:	ce 01       	movw	r24, r28
    646e:	80 97       	sbiw	r24, 0x20	; 32
    6470:	01 c0       	rjmp	.+2      	; 0x6474 <toupper+0x14>
    6472:	ce 01       	movw	r24, r28
    6474:	df 91       	pop	r29
    6476:	cf 91       	pop	r28
    6478:	08 95       	ret

0000647a <strcpy>:
    647a:	fc 01       	movw	r30, r24
    647c:	db 01       	movw	r26, r22
    647e:	2d 91       	ld	r18, X+
    6480:	bd 01       	movw	r22, r26
    6482:	01 96       	adiw	r24, 0x01	; 1
    6484:	22 23       	and	r18, r18
    6486:	11 f0       	breq	.+4      	; 0x648c <strcpy+0x12>
    6488:	20 83       	st	Z, r18
    648a:	f7 cf       	rjmp	.-18     	; 0x647a <strcpy>
    648c:	10 82       	st	Z, r1
    648e:	08 95       	ret

00006490 <strncpy>:
    6490:	db 01       	movw	r26, r22
    6492:	fc 01       	movw	r30, r24
    6494:	2d 91       	ld	r18, X+
    6496:	21 11       	cpse	r18, r1
    6498:	03 c0       	rjmp	.+6      	; 0x64a0 <strncpy+0x10>
    649a:	4e 0f       	add	r20, r30
    649c:	5f 1f       	adc	r21, r31
    649e:	08 c0       	rjmp	.+16     	; 0x64b0 <strncpy+0x20>
    64a0:	41 15       	cp	r20, r1
    64a2:	51 05       	cpc	r21, r1
    64a4:	21 f0       	breq	.+8      	; 0x64ae <strncpy+0x1e>
    64a6:	21 93       	st	Z+, r18
    64a8:	41 50       	subi	r20, 0x01	; 1
    64aa:	51 09       	sbc	r21, r1
    64ac:	f3 cf       	rjmp	.-26     	; 0x6494 <strncpy+0x4>
    64ae:	08 95       	ret
    64b0:	4e 17       	cp	r20, r30
    64b2:	5f 07       	cpc	r21, r31
    64b4:	11 f0       	breq	.+4      	; 0x64ba <strncpy+0x2a>
    64b6:	11 92       	st	Z+, r1
    64b8:	fb cf       	rjmp	.-10     	; 0x64b0 <strncpy+0x20>
    64ba:	08 95       	ret

000064bc <strcat>:
    64bc:	cf 93       	push	r28
    64be:	df 93       	push	r29
    64c0:	d8 2f       	mov	r29, r24
    64c2:	c9 2f       	mov	r28, r25
    64c4:	28 2f       	mov	r18, r24
    64c6:	39 2f       	mov	r19, r25
    64c8:	c9 01       	movw	r24, r18
    64ca:	2f 5f       	subi	r18, 0xFF	; 255
    64cc:	3f 4f       	sbci	r19, 0xFF	; 255
    64ce:	fc 01       	movw	r30, r24
    64d0:	40 81       	ld	r20, Z
    64d2:	41 11       	cpse	r20, r1
    64d4:	f9 cf       	rjmp	.-14     	; 0x64c8 <strcat+0xc>
    64d6:	d1 df       	rcall	.-94     	; 0x647a <strcpy>
    64d8:	8d 2f       	mov	r24, r29
    64da:	9c 2f       	mov	r25, r28
    64dc:	df 91       	pop	r29
    64de:	cf 91       	pop	r28
    64e0:	08 95       	ret

000064e2 <reverse>:
    64e2:	fc 01       	movw	r30, r24
    64e4:	01 90       	ld	r0, Z+
    64e6:	00 20       	and	r0, r0
    64e8:	e9 f7       	brne	.-6      	; 0x64e4 <reverse+0x2>
    64ea:	31 97       	sbiw	r30, 0x01	; 1
    64ec:	e8 1b       	sub	r30, r24
    64ee:	f9 0b       	sbc	r31, r25
    64f0:	af 01       	movw	r20, r30
    64f2:	55 95       	asr	r21
    64f4:	47 95       	ror	r20
    64f6:	e8 0f       	add	r30, r24
    64f8:	f9 1f       	adc	r31, r25
    64fa:	dc 01       	movw	r26, r24
    64fc:	9d 01       	movw	r18, r26
    64fe:	28 1b       	sub	r18, r24
    6500:	39 0b       	sbc	r19, r25
    6502:	24 17       	cp	r18, r20
    6504:	35 07       	cpc	r19, r21
    6506:	2c f4       	brge	.+10     	; 0x6512 <reverse+0x30>
    6508:	22 91       	ld	r18, -Z
    650a:	3c 91       	ld	r19, X
    650c:	30 83       	st	Z, r19
    650e:	2d 93       	st	X+, r18
    6510:	f5 cf       	rjmp	.-22     	; 0x64fc <reverse+0x1a>
    6512:	08 95       	ret

00006514 <strupper>:
    6514:	cf 93       	push	r28
    6516:	df 93       	push	r29
    6518:	ec 01       	movw	r28, r24
    651a:	88 81       	ld	r24, Y
    651c:	88 23       	and	r24, r24
    651e:	21 f0       	breq	.+8      	; 0x6528 <strupper+0x14>
    6520:	90 e0       	ldi	r25, 0x00	; 0
    6522:	9e df       	rcall	.-196    	; 0x6460 <toupper>
    6524:	89 93       	st	Y+, r24
    6526:	f9 cf       	rjmp	.-14     	; 0x651a <strupper+0x6>
    6528:	df 91       	pop	r29
    652a:	cf 91       	pop	r28
    652c:	08 95       	ret

0000652e <strcmp>:
    652e:	dc 01       	movw	r26, r24
    6530:	fb 01       	movw	r30, r22
    6532:	2d 91       	ld	r18, X+
    6534:	41 91       	ld	r20, Z+
    6536:	50 e0       	ldi	r21, 0x00	; 0
    6538:	30 e0       	ldi	r19, 0x00	; 0
    653a:	c9 01       	movw	r24, r18
    653c:	84 1b       	sub	r24, r20
    653e:	95 0b       	sbc	r25, r21
    6540:	11 f4       	brne	.+4      	; 0x6546 <strcmp+0x18>
    6542:	45 2b       	or	r20, r21
    6544:	b1 f7       	brne	.-20     	; 0x6532 <strcmp+0x4>
    6546:	08 95       	ret

00006548 <strcasecmp>:
    6548:	ef 92       	push	r14
    654a:	ff 92       	push	r15
    654c:	0f 93       	push	r16
    654e:	1f 93       	push	r17
    6550:	cf 93       	push	r28
    6552:	df 93       	push	r29
    6554:	7c 01       	movw	r14, r24
    6556:	8b 01       	movw	r16, r22
    6558:	f7 01       	movw	r30, r14
    655a:	81 91       	ld	r24, Z+
    655c:	7f 01       	movw	r14, r30
    655e:	90 e0       	ldi	r25, 0x00	; 0
    6560:	7f df       	rcall	.-258    	; 0x6460 <toupper>
    6562:	ec 01       	movw	r28, r24
    6564:	f8 01       	movw	r30, r16
    6566:	81 91       	ld	r24, Z+
    6568:	8f 01       	movw	r16, r30
    656a:	90 e0       	ldi	r25, 0x00	; 0
    656c:	79 df       	rcall	.-270    	; 0x6460 <toupper>
    656e:	9c 01       	movw	r18, r24
    6570:	ce 01       	movw	r24, r28
    6572:	82 1b       	sub	r24, r18
    6574:	93 0b       	sbc	r25, r19
    6576:	11 f4       	brne	.+4      	; 0x657c <strcasecmp+0x34>
    6578:	23 2b       	or	r18, r19
    657a:	71 f7       	brne	.-36     	; 0x6558 <strcasecmp+0x10>
    657c:	cd b7       	in	r28, 0x3d	; 61
    657e:	de b7       	in	r29, 0x3e	; 62
    6580:	e6 e0       	ldi	r30, 0x06	; 6
    6582:	0c 94 cc e8 	jmp	0x1d198	; 0x1d198 <__epilogue_restores__+0x18>

00006586 <strncasecmp>:
    6586:	a0 e0       	ldi	r26, 0x00	; 0
    6588:	b0 e0       	ldi	r27, 0x00	; 0
    658a:	e9 ec       	ldi	r30, 0xC9	; 201
    658c:	f2 e3       	ldi	r31, 0x32	; 50
    658e:	0c 94 ae e8 	jmp	0x1d15c	; 0x1d15c <__prologue_saves__+0x14>
    6592:	8c 01       	movw	r16, r24
    6594:	7b 01       	movw	r14, r22
    6596:	6c 01       	movw	r12, r24
    6598:	c4 0e       	add	r12, r20
    659a:	d5 1e       	adc	r13, r21
    659c:	0c 15       	cp	r16, r12
    659e:	1d 05       	cpc	r17, r13
    65a0:	99 f0       	breq	.+38     	; 0x65c8 <strncasecmp+0x42>
    65a2:	f8 01       	movw	r30, r16
    65a4:	81 91       	ld	r24, Z+
    65a6:	8f 01       	movw	r16, r30
    65a8:	90 e0       	ldi	r25, 0x00	; 0
    65aa:	5a df       	rcall	.-332    	; 0x6460 <toupper>
    65ac:	ec 01       	movw	r28, r24
    65ae:	f7 01       	movw	r30, r14
    65b0:	81 91       	ld	r24, Z+
    65b2:	7f 01       	movw	r14, r30
    65b4:	90 e0       	ldi	r25, 0x00	; 0
    65b6:	54 df       	rcall	.-344    	; 0x6460 <toupper>
    65b8:	9c 01       	movw	r18, r24
    65ba:	ce 01       	movw	r24, r28
    65bc:	82 1b       	sub	r24, r18
    65be:	93 0b       	sbc	r25, r19
    65c0:	29 f4       	brne	.+10     	; 0x65cc <strncasecmp+0x46>
    65c2:	23 2b       	or	r18, r19
    65c4:	59 f7       	brne	.-42     	; 0x659c <strncasecmp+0x16>
    65c6:	02 c0       	rjmp	.+4      	; 0x65cc <strncasecmp+0x46>
    65c8:	80 e0       	ldi	r24, 0x00	; 0
    65ca:	90 e0       	ldi	r25, 0x00	; 0
    65cc:	cd b7       	in	r28, 0x3d	; 61
    65ce:	de b7       	in	r29, 0x3e	; 62
    65d0:	e8 e0       	ldi	r30, 0x08	; 8
    65d2:	0c 94 ca e8 	jmp	0x1d194	; 0x1d194 <__epilogue_restores__+0x14>

000065d6 <stralloc>:
///
///@return pointer to alocated string.
///@return NULL on out of memory.
MEMSPACE
char *stralloc(char *str)
{
    65d6:	0f 93       	push	r16
    65d8:	1f 93       	push	r17
    65da:	cf 93       	push	r28
    65dc:	df 93       	push	r29
    char *ptr;
    int len;

    if(!str)
    65de:	00 97       	sbiw	r24, 0x00	; 0
    65e0:	99 f0       	breq	.+38     	; 0x6608 <stralloc+0x32>
    65e2:	ec 01       	movw	r28, r24
        return(str);;
    len  = strlen(str);
    65e4:	fc 01       	movw	r30, r24
    65e6:	01 90       	ld	r0, Z+
    65e8:	00 20       	and	r0, r0
    65ea:	e9 f7       	brne	.-6      	; 0x65e6 <stralloc+0x10>
    65ec:	cf 01       	movw	r24, r30
    ptr = safecalloc(len+1,1);
    65ee:	61 e0       	ldi	r22, 0x01	; 1
    65f0:	70 e0       	ldi	r23, 0x00	; 0
    65f2:	8c 1b       	sub	r24, r28
    65f4:	9d 0b       	sbc	r25, r29
    65f6:	0e 94 28 28 	call	0x5050	; 0x5050 <safecalloc>
    65fa:	8c 01       	movw	r16, r24
    if(!ptr)
    65fc:	00 97       	sbiw	r24, 0x00	; 0
    65fe:	21 f0       	breq	.+8      	; 0x6608 <stralloc+0x32>
        return(ptr);
    strcpy(ptr,str);
    6600:	be 01       	movw	r22, r28
    6602:	3b df       	rcall	.-394    	; 0x647a <strcpy>
    return(ptr);
    6604:	c8 01       	movw	r24, r16
    6606:	02 c0       	rjmp	.+4      	; 0x660c <stralloc+0x36>
    6608:	80 e0       	ldi	r24, 0x00	; 0
    660a:	90 e0       	ldi	r25, 0x00	; 0
}
    660c:	df 91       	pop	r29
    660e:	cf 91       	pop	r28
    6610:	1f 91       	pop	r17
    6612:	0f 91       	pop	r16
    6614:	08 95       	ret

00006616 <sep>:
        return(0);

    if(strncmp(str,pat,patlen) == 0)
        return(len);
    return(0);
}
    6616:	00 d0       	rcall	.+0      	; 0x6618 <sep+0x2>
    6618:	1f 92       	push	r1
    661a:	80 e2       	ldi	r24, 0x20	; 32
    661c:	95 e0       	ldi	r25, 0x05	; 5
    661e:	a0 e0       	ldi	r26, 0x00	; 0
    6620:	ed b7       	in	r30, 0x3d	; 61
    6622:	fe b7       	in	r31, 0x3e	; 62
    6624:	81 83       	std	Z+1, r24	; 0x01
    6626:	92 83       	std	Z+2, r25	; 0x02
    6628:	a3 83       	std	Z+3, r26	; 0x03
    662a:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
    662e:	0f 90       	pop	r0
    6630:	0f 90       	pop	r0
    6632:	0f 90       	pop	r0
    6634:	08 95       	ret

00006636 <trim_tail>:
    6636:	00 97       	sbiw	r24, 0x00	; 0
    6638:	69 f0       	breq	.+26     	; 0x6654 <trim_tail+0x1e>
    663a:	fc 01       	movw	r30, r24
    663c:	01 90       	ld	r0, Z+
    663e:	00 20       	and	r0, r0
    6640:	e9 f7       	brne	.-6      	; 0x663c <trim_tail+0x6>
    6642:	31 97       	sbiw	r30, 0x01	; 1
    6644:	e8 17       	cp	r30, r24
    6646:	f9 07       	cpc	r31, r25
    6648:	29 f0       	breq	.+10     	; 0x6654 <trim_tail+0x1e>
    664a:	22 91       	ld	r18, -Z
    664c:	21 32       	cpi	r18, 0x21	; 33
    664e:	10 f4       	brcc	.+4      	; 0x6654 <trim_tail+0x1e>
    6650:	10 82       	st	Z, r1
    6652:	f8 cf       	rjmp	.-16     	; 0x6644 <trim_tail+0xe>
    6654:	08 95       	ret

00006656 <skipspaces>:
    6656:	00 97       	sbiw	r24, 0x00	; 0
    6658:	39 f0       	breq	.+14     	; 0x6668 <skipspaces+0x12>
    665a:	fc 01       	movw	r30, r24
    665c:	cf 01       	movw	r24, r30
    665e:	21 91       	ld	r18, Z+
    6660:	20 32       	cpi	r18, 0x20	; 32
    6662:	e1 f3       	breq	.-8      	; 0x665c <skipspaces+0x6>
    6664:	29 30       	cpi	r18, 0x09	; 9
    6666:	d1 f3       	breq	.-12     	; 0x665c <skipspaces+0x6>
    6668:	08 95       	ret

0000666a <MATCH>:
    666a:	cf 93       	push	r28
    666c:	df 93       	push	r29
    666e:	fb 01       	movw	r30, r22
    6670:	01 90       	ld	r0, Z+
    6672:	00 20       	and	r0, r0
    6674:	e9 f7       	brne	.-6      	; 0x6670 <MATCH+0x6>
    6676:	31 97       	sbiw	r30, 0x01	; 1
    6678:	ef 01       	movw	r28, r30
    667a:	c6 1b       	sub	r28, r22
    667c:	d7 0b       	sbc	r29, r23
    667e:	57 df       	rcall	.-338    	; 0x652e <strcmp>
    6680:	89 2b       	or	r24, r25
    6682:	11 f4       	brne	.+4      	; 0x6688 <MATCH+0x1e>
    6684:	ce 01       	movw	r24, r28
    6686:	02 c0       	rjmp	.+4      	; 0x668c <MATCH+0x22>
    6688:	80 e0       	ldi	r24, 0x00	; 0
    668a:	90 e0       	ldi	r25, 0x00	; 0
    668c:	df 91       	pop	r29
    668e:	cf 91       	pop	r28
    6690:	08 95       	ret

00006692 <MATCHI>:
    6692:	cf 93       	push	r28
    6694:	df 93       	push	r29
    6696:	fb 01       	movw	r30, r22
    6698:	01 90       	ld	r0, Z+
    669a:	00 20       	and	r0, r0
    669c:	e9 f7       	brne	.-6      	; 0x6698 <MATCHI+0x6>
    669e:	31 97       	sbiw	r30, 0x01	; 1
    66a0:	ef 01       	movw	r28, r30
    66a2:	c6 1b       	sub	r28, r22
    66a4:	d7 0b       	sbc	r29, r23
    66a6:	50 df       	rcall	.-352    	; 0x6548 <strcasecmp>
    66a8:	89 2b       	or	r24, r25
    66aa:	11 f4       	brne	.+4      	; 0x66b0 <MATCHI+0x1e>
    66ac:	ce 01       	movw	r24, r28
    66ae:	02 c0       	rjmp	.+4      	; 0x66b4 <MATCHI+0x22>
    66b0:	80 e0       	ldi	r24, 0x00	; 0
    66b2:	90 e0       	ldi	r25, 0x00	; 0
    66b4:	df 91       	pop	r29
    66b6:	cf 91       	pop	r28
    66b8:	08 95       	ret

000066ba <MATCHARGS>:
    66ba:	a9 e0       	ldi	r26, 0x09	; 9
    66bc:	b0 e0       	ldi	r27, 0x00	; 0
    66be:	e3 e6       	ldi	r30, 0x63	; 99
    66c0:	f3 e3       	ldi	r31, 0x33	; 51
    66c2:	0c 94 b0 e8 	jmp	0x1d160	; 0x1d160 <__prologue_saves__+0x18>
    66c6:	eb 01       	movw	r28, r22
    66c8:	8a 01       	movw	r16, r20
    66ca:	79 01       	movw	r14, r18
    66cc:	e2 df       	rcall	.-60     	; 0x6692 <MATCHI>
    66ce:	00 97       	sbiw	r24, 0x00	; 0
    66d0:	c1 f0       	breq	.+48     	; 0x6702 <MATCHARGS+0x48>
    66d2:	e0 16       	cp	r14, r16
    66d4:	f1 06       	cpc	r15, r17
    66d6:	9c f4       	brge	.+38     	; 0x66fe <MATCHARGS+0x44>
    66d8:	ed b7       	in	r30, 0x3d	; 61
    66da:	fe b7       	in	r31, 0x3e	; 62
    66dc:	f1 86       	std	Z+9, r15	; 0x09
    66de:	e0 86       	std	Z+8, r14	; 0x08
    66e0:	17 83       	std	Z+7, r17	; 0x07
    66e2:	06 83       	std	Z+6, r16	; 0x06
    66e4:	d5 83       	std	Z+5, r29	; 0x05
    66e6:	c4 83       	std	Z+4, r28	; 0x04
    66e8:	8a ef       	ldi	r24, 0xFA	; 250
    66ea:	94 e0       	ldi	r25, 0x04	; 4
    66ec:	a0 e0       	ldi	r26, 0x00	; 0
    66ee:	81 83       	std	Z+1, r24	; 0x01
    66f0:	92 83       	std	Z+2, r25	; 0x02
    66f2:	a3 83       	std	Z+3, r26	; 0x03
    66f4:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
    66f8:	80 e0       	ldi	r24, 0x00	; 0
    66fa:	90 e0       	ldi	r25, 0x00	; 0
    66fc:	02 c0       	rjmp	.+4      	; 0x6702 <MATCHARGS+0x48>
    66fe:	81 e0       	ldi	r24, 0x01	; 1
    6700:	90 e0       	ldi	r25, 0x00	; 0
    6702:	cd b7       	in	r28, 0x3d	; 61
    6704:	de b7       	in	r29, 0x3e	; 62
    6706:	29 96       	adiw	r28, 0x09	; 9
    6708:	e6 e0       	ldi	r30, 0x06	; 6
    670a:	0c 94 cc e8 	jmp	0x1d198	; 0x1d198 <__epilogue_restores__+0x18>

0000670e <MATCHI_LEN>:
    670e:	cf 93       	push	r28
    6710:	df 93       	push	r29
    6712:	00 97       	sbiw	r24, 0x00	; 0
    6714:	89 f0       	breq	.+34     	; 0x6738 <MATCHI_LEN+0x2a>
    6716:	61 15       	cp	r22, r1
    6718:	71 05       	cpc	r23, r1
    671a:	71 f0       	breq	.+28     	; 0x6738 <MATCHI_LEN+0x2a>
    671c:	eb 01       	movw	r28, r22
    671e:	09 90       	ld	r0, Y+
    6720:	00 20       	and	r0, r0
    6722:	e9 f7       	brne	.-6      	; 0x671e <MATCHI_LEN+0x10>
    6724:	21 97       	sbiw	r28, 0x01	; 1
    6726:	c6 1b       	sub	r28, r22
    6728:	d7 0b       	sbc	r29, r23
    672a:	31 f0       	breq	.+12     	; 0x6738 <MATCHI_LEN+0x2a>
    672c:	ae 01       	movw	r20, r28
    672e:	2b df       	rcall	.-426    	; 0x6586 <strncasecmp>
    6730:	89 2b       	or	r24, r25
    6732:	11 f4       	brne	.+4      	; 0x6738 <MATCHI_LEN+0x2a>
    6734:	ce 01       	movw	r24, r28
    6736:	02 c0       	rjmp	.+4      	; 0x673c <MATCHI_LEN+0x2e>
    6738:	80 e0       	ldi	r24, 0x00	; 0
    673a:	90 e0       	ldi	r25, 0x00	; 0
    673c:	df 91       	pop	r29
    673e:	cf 91       	pop	r28
    6740:	08 95       	ret

00006742 <split_args>:
    6742:	a0 e0       	ldi	r26, 0x00	; 0
    6744:	b0 e0       	ldi	r27, 0x00	; 0
    6746:	e7 ea       	ldi	r30, 0xA7	; 167
    6748:	f3 e3       	ldi	r31, 0x33	; 51
    674a:	0c 94 ae e8 	jmp	0x1d15c	; 0x1d15c <__prologue_saves__+0x14>
    674e:	dc 01       	movw	r26, r24
    6750:	6a 01       	movw	r12, r20
    6752:	8b 01       	movw	r16, r22
    6754:	fb 01       	movw	r30, r22
    6756:	80 e0       	ldi	r24, 0x00	; 0
    6758:	90 e0       	ldi	r25, 0x00	; 0
    675a:	8c 15       	cp	r24, r12
    675c:	9d 05       	cpc	r25, r13
    675e:	24 f4       	brge	.+8      	; 0x6768 <split_args+0x26>
    6760:	11 92       	st	Z+, r1
    6762:	11 92       	st	Z+, r1
    6764:	01 96       	adiw	r24, 0x01	; 1
    6766:	f9 cf       	rjmp	.-14     	; 0x675a <split_args+0x18>
    6768:	c1 14       	cp	r12, r1
    676a:	d1 04       	cpc	r13, r1
    676c:	d9 f1       	breq	.+118    	; 0x67e4 <split_args+0xa2>
    676e:	10 97       	sbiw	r26, 0x00	; 0
    6770:	c9 f1       	breq	.+114    	; 0x67e4 <split_args+0xa2>
    6772:	ee 24       	eor	r14, r14
    6774:	e3 94       	inc	r14
    6776:	f1 2c       	mov	r15, r1
    6778:	c0 e0       	ldi	r28, 0x00	; 0
    677a:	d0 e0       	ldi	r29, 0x00	; 0
    677c:	8c 91       	ld	r24, X
    677e:	88 23       	and	r24, r24
    6780:	b1 f1       	breq	.+108    	; 0x67ee <split_args+0xac>
    6782:	cc 15       	cp	r28, r12
    6784:	dd 05       	cpc	r29, r13
    6786:	9c f5       	brge	.+102    	; 0x67ee <split_args+0xac>
    6788:	cd 01       	movw	r24, r26
    678a:	65 df       	rcall	.-310    	; 0x6656 <skipspaces>
    678c:	dc 01       	movw	r26, r24
    678e:	2c 91       	ld	r18, X
    6790:	22 23       	and	r18, r18
    6792:	69 f1       	breq	.+90     	; 0x67ee <split_args+0xac>
    6794:	22 32       	cpi	r18, 0x22	; 34
    6796:	79 f4       	brne	.+30     	; 0x67b6 <split_args+0x74>
    6798:	fc 01       	movw	r30, r24
    679a:	31 96       	adiw	r30, 0x01	; 1
    679c:	d8 01       	movw	r26, r16
    679e:	ed 93       	st	X+, r30
    67a0:	fc 93       	st	X, r31
    67a2:	df 01       	movw	r26, r30
    67a4:	80 81       	ld	r24, Z
    67a6:	31 96       	adiw	r30, 0x01	; 1
    67a8:	88 23       	and	r24, r24
    67aa:	a9 f0       	breq	.+42     	; 0x67d6 <split_args+0x94>
    67ac:	82 32       	cpi	r24, 0x22	; 34
    67ae:	c9 f7       	brne	.-14     	; 0x67a2 <split_args+0x60>
    67b0:	1c 92       	st	X, r1
    67b2:	df 01       	movw	r26, r30
    67b4:	10 c0       	rjmp	.+32     	; 0x67d6 <split_args+0x94>
    67b6:	f8 01       	movw	r30, r16
    67b8:	91 83       	std	Z+1, r25	; 0x01
    67ba:	80 83       	st	Z, r24
    67bc:	fc 01       	movw	r30, r24
    67be:	2e 2f       	mov	r18, r30
    67c0:	9f 2f       	mov	r25, r31
    67c2:	81 91       	ld	r24, Z+
    67c4:	3f ed       	ldi	r19, 0xDF	; 223
    67c6:	38 0f       	add	r19, r24
    67c8:	3e 35       	cpi	r19, 0x5E	; 94
    67ca:	c8 f3       	brcs	.-14     	; 0x67be <split_args+0x7c>
    67cc:	88 23       	and	r24, r24
    67ce:	69 f0       	breq	.+26     	; 0x67ea <split_args+0xa8>
    67d0:	a2 2f       	mov	r26, r18
    67d2:	b9 2f       	mov	r27, r25
    67d4:	1d 92       	st	X+, r1
    67d6:	21 96       	adiw	r28, 0x01	; 1
    67d8:	ff ef       	ldi	r31, 0xFF	; 255
    67da:	ef 1a       	sub	r14, r31
    67dc:	ff 0a       	sbc	r15, r31
    67de:	0e 5f       	subi	r16, 0xFE	; 254
    67e0:	1f 4f       	sbci	r17, 0xFF	; 255
    67e2:	cc cf       	rjmp	.-104    	; 0x677c <split_args+0x3a>
    67e4:	80 e0       	ldi	r24, 0x00	; 0
    67e6:	90 e0       	ldi	r25, 0x00	; 0
    67e8:	03 c0       	rjmp	.+6      	; 0x67f0 <split_args+0xae>
    67ea:	c7 01       	movw	r24, r14
    67ec:	01 c0       	rjmp	.+2      	; 0x67f0 <split_args+0xae>
    67ee:	ce 01       	movw	r24, r28
    67f0:	cd b7       	in	r28, 0x3d	; 61
    67f2:	de b7       	in	r29, 0x3e	; 62
    67f4:	e8 e0       	ldi	r30, 0x08	; 8
    67f6:	0c 94 ca e8 	jmp	0x1d194	; 0x1d194 <__epilogue_restores__+0x14>

000067fa <get_token>:
    67fa:	ef 92       	push	r14
    67fc:	ff 92       	push	r15
    67fe:	0f 93       	push	r16
    6800:	1f 93       	push	r17
    6802:	cf 93       	push	r28
    6804:	df 93       	push	r29
    6806:	eb 01       	movw	r28, r22
    6808:	8a 01       	movw	r16, r20
    680a:	18 82       	st	Y, r1
    680c:	00 97       	sbiw	r24, 0x00	; 0
    680e:	89 f1       	breq	.+98     	; 0x6872 <get_token+0x78>
    6810:	fc 01       	movw	r30, r24
    6812:	20 81       	ld	r18, Z
    6814:	22 23       	and	r18, r18
    6816:	79 f1       	breq	.+94     	; 0x6876 <get_token+0x7c>
    6818:	1e df       	rcall	.-452    	; 0x6656 <skipspaces>
    681a:	7c 01       	movw	r14, r24
    681c:	0c df       	rcall	.-488    	; 0x6636 <trim_tail>
    681e:	f7 01       	movw	r30, r14
    6820:	cf 01       	movw	r24, r30
    6822:	21 91       	ld	r18, Z+
    6824:	21 32       	cpi	r18, 0x21	; 33
    6826:	e0 f0       	brcs	.+56     	; 0x6860 <get_token+0x66>
    6828:	10 16       	cp	r1, r16
    682a:	11 06       	cpc	r1, r17
    682c:	cc f4       	brge	.+50     	; 0x6860 <get_token+0x66>
    682e:	22 32       	cpi	r18, 0x22	; 34
    6830:	79 f4       	brne	.+30     	; 0x6850 <get_token+0x56>
    6832:	fc 01       	movw	r30, r24
    6834:	31 96       	adiw	r30, 0x01	; 1
    6836:	0c 0f       	add	r16, r28
    6838:	1d 1f       	adc	r17, r29
    683a:	cf 01       	movw	r24, r30
    683c:	21 91       	ld	r18, Z+
    683e:	22 23       	and	r18, r18
    6840:	79 f0       	breq	.+30     	; 0x6860 <get_token+0x66>
    6842:	22 32       	cpi	r18, 0x22	; 34
    6844:	59 f0       	breq	.+22     	; 0x685c <get_token+0x62>
    6846:	c0 17       	cp	r28, r16
    6848:	d1 07       	cpc	r29, r17
    684a:	51 f0       	breq	.+20     	; 0x6860 <get_token+0x66>
    684c:	29 93       	st	Y+, r18
    684e:	f5 cf       	rjmp	.-22     	; 0x683a <get_token+0x40>
    6850:	2c 32       	cpi	r18, 0x2C	; 44
    6852:	31 f0       	breq	.+12     	; 0x6860 <get_token+0x66>
    6854:	29 93       	st	Y+, r18
    6856:	01 50       	subi	r16, 0x01	; 1
    6858:	11 09       	sbc	r17, r1
    685a:	e2 cf       	rjmp	.-60     	; 0x6820 <get_token+0x26>
    685c:	cf 01       	movw	r24, r30
    685e:	18 82       	st	Y, r1
    6860:	fa de       	rcall	.-524    	; 0x6656 <skipspaces>
    6862:	fc 01       	movw	r30, r24
    6864:	80 81       	ld	r24, Z
    6866:	8c 32       	cpi	r24, 0x2C	; 44
    6868:	09 f4       	brne	.+2      	; 0x686c <get_token+0x72>
    686a:	31 96       	adiw	r30, 0x01	; 1
    686c:	18 82       	st	Y, r1
    686e:	cf 01       	movw	r24, r30
    6870:	02 c0       	rjmp	.+4      	; 0x6876 <get_token+0x7c>
    6872:	80 e0       	ldi	r24, 0x00	; 0
    6874:	90 e0       	ldi	r25, 0x00	; 0
    6876:	cd b7       	in	r28, 0x3d	; 61
    6878:	de b7       	in	r29, 0x3e	; 62
    687a:	e6 e0       	ldi	r30, 0x06	; 6
    687c:	0c 94 cc e8 	jmp	0x1d198	; 0x1d198 <__epilogue_restores__+0x18>

00006880 <get_value>:
/// @param[in] str: string to examine
///
/// @return  value
MEMSPACE
int32_t get_value(char *str)
{
    6880:	a2 e0       	ldi	r26, 0x02	; 2
    6882:	b0 e0       	ldi	r27, 0x00	; 0
    6884:	e6 e4       	ldi	r30, 0x46	; 70
    6886:	f4 e3       	ldi	r31, 0x34	; 52
    6888:	0c 94 b2 e8 	jmp	0x1d164	; 0x1d164 <__prologue_saves__+0x1c>
    int base;
    int ret;
    char *ptr;
    char *endptr;

    if(!str || *str == 0)
    688c:	00 97       	sbiw	r24, 0x00	; 0
    688e:	79 f1       	breq	.+94     	; 0x68ee <get_value+0x6e>
    6890:	fc 01       	movw	r30, r24
    6892:	20 81       	ld	r18, Z
    6894:	22 23       	and	r18, r18
    6896:	59 f1       	breq	.+86     	; 0x68ee <get_value+0x6e>
        return(0);

    ptr = skipspaces(str);
    6898:	de de       	rcall	.-580    	; 0x6656 <skipspaces>
    689a:	8c 01       	movw	r16, r24
    base = 10;

// convert number base 10, 16, 8 and 2
    if( (ret = MATCHI_LEN(ptr,"0x")) )
    689c:	6f e2       	ldi	r22, 0x2F	; 47
    689e:	73 e0       	ldi	r23, 0x03	; 3
    68a0:	36 df       	rcall	.-404    	; 0x670e <MATCHI_LEN>
    68a2:	00 97       	sbiw	r24, 0x00	; 0
    68a4:	29 f0       	breq	.+10     	; 0x68b0 <get_value+0x30>
    {
        base = 16;
        ptr += ret;
    68a6:	08 0f       	add	r16, r24
    68a8:	19 1f       	adc	r17, r25
    base = 10;

// convert number base 10, 16, 8 and 2
    if( (ret = MATCHI_LEN(ptr,"0x")) )
    {
        base = 16;
    68aa:	40 e1       	ldi	r20, 0x10	; 16
    68ac:	50 e0       	ldi	r21, 0x00	; 0
    68ae:	18 c0       	rjmp	.+48     	; 0x68e0 <get_value+0x60>
        ptr += ret;
    }
    else if( (ret = MATCHI_LEN(ptr,"0o")) )
    68b0:	62 e3       	ldi	r22, 0x32	; 50
    68b2:	73 e0       	ldi	r23, 0x03	; 3
    68b4:	c8 01       	movw	r24, r16
    68b6:	2b df       	rcall	.-426    	; 0x670e <MATCHI_LEN>
    68b8:	00 97       	sbiw	r24, 0x00	; 0
    68ba:	29 f0       	breq	.+10     	; 0x68c6 <get_value+0x46>
    {
        base = 8;
        ptr += ret;
    68bc:	08 0f       	add	r16, r24
    68be:	19 1f       	adc	r17, r25
        base = 16;
        ptr += ret;
    }
    else if( (ret = MATCHI_LEN(ptr,"0o")) )
    {
        base = 8;
    68c0:	48 e0       	ldi	r20, 0x08	; 8
    68c2:	50 e0       	ldi	r21, 0x00	; 0
    68c4:	0d c0       	rjmp	.+26     	; 0x68e0 <get_value+0x60>
        ptr += ret;
    }
    else if( (ret = MATCHI_LEN(ptr,"0b")) )
    68c6:	65 e3       	ldi	r22, 0x35	; 53
    68c8:	73 e0       	ldi	r23, 0x03	; 3
    68ca:	c8 01       	movw	r24, r16
    68cc:	20 df       	rcall	.-448    	; 0x670e <MATCHI_LEN>
    68ce:	00 97       	sbiw	r24, 0x00	; 0
    68d0:	29 f0       	breq	.+10     	; 0x68dc <get_value+0x5c>
    {
        base = 2;
        ptr += ret;
    68d2:	08 0f       	add	r16, r24
    68d4:	19 1f       	adc	r17, r25
        base = 8;
        ptr += ret;
    }
    else if( (ret = MATCHI_LEN(ptr,"0b")) )
    {
        base = 2;
    68d6:	42 e0       	ldi	r20, 0x02	; 2
    68d8:	50 e0       	ldi	r21, 0x00	; 0
    68da:	02 c0       	rjmp	.+4      	; 0x68e0 <get_value+0x60>

    if(!str || *str == 0)
        return(0);

    ptr = skipspaces(str);
    base = 10;
    68dc:	4a e0       	ldi	r20, 0x0A	; 10
    68de:	50 e0       	ldi	r21, 0x00	; 0
    else if( (ret = MATCHI_LEN(ptr,"0b")) )
    {
        base = 2;
        ptr += ret;
    }
    return(strtol(ptr, (char **)&endptr, base));
    68e0:	be 01       	movw	r22, r28
    68e2:	6f 5f       	subi	r22, 0xFF	; 255
    68e4:	7f 4f       	sbci	r23, 0xFF	; 255
    68e6:	c8 01       	movw	r24, r16
    68e8:	0e 94 37 48 	call	0x906e	; 0x906e <strtol>
    68ec:	03 c0       	rjmp	.+6      	; 0x68f4 <get_value+0x74>
    int ret;
    char *ptr;
    char *endptr;

    if(!str || *str == 0)
        return(0);
    68ee:	60 e0       	ldi	r22, 0x00	; 0
    68f0:	70 e0       	ldi	r23, 0x00	; 0
    68f2:	cb 01       	movw	r24, r22
    {
        base = 2;
        ptr += ret;
    }
    return(strtol(ptr, (char **)&endptr, base));
}
    68f4:	22 96       	adiw	r28, 0x02	; 2
    68f6:	e4 e0       	ldi	r30, 0x04	; 4
    68f8:	0c 94 ce e8 	jmp	0x1d19c	; 0x1d19c <__epilogue_restores__+0x1c>

000068fc <enable_system_task>:
/// @brief Enable interrupts
/// @return void.
MEMSPACE
void enable_system_task()
{
    sei();
    68fc:	78 94       	sei
    68fe:	08 95       	ret

00006900 <install_timers_isr>:
///
/// @see ISR().
/// @return void.
MEMSPACE void install_timers_isr()
{
    cli();
    6900:	f8 94       	cli
    TCCR1B=(1<<WGM12) | TIMER1_PRE_1;             // No Prescale
    6902:	89 e0       	ldi	r24, 0x09	; 9
    6904:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    TCCR1A=0;
    6908:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    OCR1A=(TIMER1_COUNTS_PER_TIC-1);              // 0 .. count
    690c:	8f e1       	ldi	r24, 0x1F	; 31
    690e:	9e e4       	ldi	r25, 0x4E	; 78
    6910:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    6914:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
    TIMSK1 |= (1<<OCIE1A);                        //Enable the Output Compare A interrupt
    6918:	ef e6       	ldi	r30, 0x6F	; 111
    691a:	f0 e0       	ldi	r31, 0x00	; 0
    691c:	80 81       	ld	r24, Z
    691e:	82 60       	ori	r24, 0x02	; 2
    6920:	80 83       	st	Z, r24
    sei();
    6922:	78 94       	sei
    6924:	08 95       	ret

00006926 <__vector_13>:
/// @brief AVR Timer Interrupt Vector
///
/// - calls execute_timers() - we call this the System task.
///
ISR(TIMER1_COMPA_vect)
{
    6926:	1f 92       	push	r1
    6928:	0f 92       	push	r0
    692a:	0f b6       	in	r0, 0x3f	; 63
    692c:	0f 92       	push	r0
    692e:	11 24       	eor	r1, r1
    6930:	0b b6       	in	r0, 0x3b	; 59
    6932:	0f 92       	push	r0
    6934:	2f 93       	push	r18
    6936:	3f 93       	push	r19
    6938:	4f 93       	push	r20
    693a:	5f 93       	push	r21
    693c:	6f 93       	push	r22
    693e:	7f 93       	push	r23
    6940:	8f 93       	push	r24
    6942:	9f 93       	push	r25
    6944:	af 93       	push	r26
    6946:	bf 93       	push	r27
    6948:	ef 93       	push	r30
    694a:	ff 93       	push	r31
    execute_timers();
    694c:	36 d2       	rcall	.+1132   	; 0x6dba <execute_timers>
}
    694e:	ff 91       	pop	r31
    6950:	ef 91       	pop	r30
    6952:	bf 91       	pop	r27
    6954:	af 91       	pop	r26
    6956:	9f 91       	pop	r25
    6958:	8f 91       	pop	r24
    695a:	7f 91       	pop	r23
    695c:	6f 91       	pop	r22
    695e:	5f 91       	pop	r21
    6960:	4f 91       	pop	r20
    6962:	3f 91       	pop	r19
    6964:	2f 91       	pop	r18
    6966:	0f 90       	pop	r0
    6968:	0b be       	out	0x3b, r0	; 59
    696a:	0f 90       	pop	r0
    696c:	0f be       	out	0x3f, r0	; 63
    696e:	0f 90       	pop	r0
    6970:	1f 90       	pop	r1
    6972:	18 95       	reti

00006974 <clock_gettime>:
///
/// @return 0 on success.
/// @return -1 on error.
MEMSPACE
int clock_gettime(clockid_t clk_id  __attribute__((unused)), struct timespec *ts)
{
    6974:	0f 93       	push	r16
    6976:	1f 93       	push	r17
    6978:	cf 93       	push	r28
    697a:	df 93       	push	r29
    697c:	fb 01       	movw	r30, r22
    uint32_t offset = 0;
    uint8_t pendingf = 0;
    int errorf = 0;

// disable interrupts
    cli();
    697e:	f8 94       	cli

    count1 = TCNT1;
    6980:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
    6984:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>

    ts->tv_sec = __clock.tv_sec;
    6988:	80 91 50 1a 	lds	r24, 0x1A50	; 0x801a50 <__clock>
    698c:	90 91 51 1a 	lds	r25, 0x1A51	; 0x801a51 <__clock+0x1>
    6990:	a0 91 52 1a 	lds	r26, 0x1A52	; 0x801a52 <__clock+0x2>
    6994:	b0 91 53 1a 	lds	r27, 0x1A53	; 0x801a53 <__clock+0x3>
    6998:	80 83       	st	Z, r24
    699a:	91 83       	std	Z+1, r25	; 0x01
    699c:	a2 83       	std	Z+2, r26	; 0x02
    699e:	b3 83       	std	Z+3, r27	; 0x03
    ts->tv_nsec = __clock.tv_nsec;
    69a0:	80 91 54 1a 	lds	r24, 0x1A54	; 0x801a54 <__clock+0x4>
    69a4:	90 91 55 1a 	lds	r25, 0x1A55	; 0x801a55 <__clock+0x5>
    69a8:	a0 91 56 1a 	lds	r26, 0x1A56	; 0x801a56 <__clock+0x6>
    69ac:	b0 91 57 1a 	lds	r27, 0x1A57	; 0x801a57 <__clock+0x7>
    69b0:	84 83       	std	Z+4, r24	; 0x04
    69b2:	95 83       	std	Z+5, r25	; 0x05
    69b4:	a6 83       	std	Z+6, r26	; 0x06
    69b6:	b7 83       	std	Z+7, r27	; 0x07

    count2 = TCNT1;
    69b8:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
    69bc:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>

    if( TIFR1 & (1<<OCF1A) )
    69c0:	b1 9b       	sbis	0x16, 1	; 22
    69c2:	03 c0       	rjmp	.+6      	; 0x69ca <clock_gettime+0x56>
int clock_gettime(clockid_t clk_id  __attribute__((unused)), struct timespec *ts)
{
    uint16_t count1,count2;                       // must be same size as timer register
    uint32_t offset = 0;
    uint8_t pendingf = 0;
    int errorf = 0;
    69c4:	c0 e0       	ldi	r28, 0x00	; 0
    69c6:	d0 e0       	ldi	r29, 0x00	; 0
    69c8:	3f c0       	rjmp	.+126    	; 0x6a48 <clock_gettime+0xd4>
    count2 = TCNT1;

    if( TIFR1 & (1<<OCF1A) )
        pendingf = 1;

    if (count2 < count1)
    69ca:	82 17       	cp	r24, r18
    69cc:	93 07       	cpc	r25, r19
    69ce:	d0 f1       	brcs	.+116    	; 0x6a44 <clock_gettime+0xd0>
int clock_gettime(clockid_t clk_id  __attribute__((unused)), struct timespec *ts)
{
    uint16_t count1,count2;                       // must be same size as timer register
    uint32_t offset = 0;
    uint8_t pendingf = 0;
    int errorf = 0;
    69d0:	c0 e0       	ldi	r28, 0x00	; 0
    69d2:	d0 e0       	ldi	r29, 0x00	; 0
/// @return -1 on error.
MEMSPACE
int clock_gettime(clockid_t clk_id  __attribute__((unused)), struct timespec *ts)
{
    uint16_t count1,count2;                       // must be same size as timer register
    uint32_t offset = 0;
    69d4:	40 e0       	ldi	r20, 0x00	; 0
    69d6:	50 e0       	ldi	r21, 0x00	; 0
    69d8:	ba 01       	movw	r22, r20
    else
    {
        if( pendingf )
            offset = TIMER1_COUNTS_PER_TIC;       // overflow
    }
    offset += count2;
    69da:	9a 01       	movw	r18, r20
    69dc:	ab 01       	movw	r20, r22
    69de:	28 0f       	add	r18, r24
    69e0:	39 1f       	adc	r19, r25
    69e2:	41 1d       	adc	r20, r1
    69e4:	51 1d       	adc	r21, r1

// enable interrupts
    sei();
    69e6:	78 94       	sei

    offset *= TIMER1_COUNTER_RES;

    ts->tv_nsec += offset;
    69e8:	a2 e3       	ldi	r26, 0x32	; 50
    69ea:	b0 e0       	ldi	r27, 0x00	; 0
    69ec:	0e 94 84 e8 	call	0x1d108	; 0x1d108 <__muluhisi3>
    69f0:	04 81       	ldd	r16, Z+4	; 0x04
    69f2:	15 81       	ldd	r17, Z+5	; 0x05
    69f4:	26 81       	ldd	r18, Z+6	; 0x06
    69f6:	37 81       	ldd	r19, Z+7	; 0x07
    69f8:	dc 01       	movw	r26, r24
    69fa:	cb 01       	movw	r24, r22
    69fc:	80 0f       	add	r24, r16
    69fe:	91 1f       	adc	r25, r17
    6a00:	a2 1f       	adc	r26, r18
    6a02:	b3 1f       	adc	r27, r19

    if (ts->tv_nsec >= 1000000000L)
    6a04:	81 15       	cp	r24, r1
    6a06:	2a ec       	ldi	r18, 0xCA	; 202
    6a08:	92 07       	cpc	r25, r18
    6a0a:	2a e9       	ldi	r18, 0x9A	; 154
    6a0c:	a2 07       	cpc	r26, r18
    6a0e:	2b e3       	ldi	r18, 0x3B	; 59
    6a10:	b2 07       	cpc	r27, r18
    6a12:	2c f4       	brge	.+10     	; 0x6a1e <clock_gettime+0xaa>
// enable interrupts
    sei();

    offset *= TIMER1_COUNTER_RES;

    ts->tv_nsec += offset;
    6a14:	84 83       	std	Z+4, r24	; 0x04
    6a16:	95 83       	std	Z+5, r25	; 0x05
    6a18:	a6 83       	std	Z+6, r26	; 0x06
    6a1a:	b7 83       	std	Z+7, r27	; 0x07
    6a1c:	1a c0       	rjmp	.+52     	; 0x6a52 <clock_gettime+0xde>

    if (ts->tv_nsec >= 1000000000L)
    {
        ts->tv_nsec -= 1000000000L;
    6a1e:	9a 5c       	subi	r25, 0xCA	; 202
    6a20:	aa 49       	sbci	r26, 0x9A	; 154
    6a22:	bb 43       	sbci	r27, 0x3B	; 59
    6a24:	84 83       	std	Z+4, r24	; 0x04
    6a26:	95 83       	std	Z+5, r25	; 0x05
    6a28:	a6 83       	std	Z+6, r26	; 0x06
    6a2a:	b7 83       	std	Z+7, r27	; 0x07
        ts->tv_sec++;
    6a2c:	80 81       	ld	r24, Z
    6a2e:	91 81       	ldd	r25, Z+1	; 0x01
    6a30:	a2 81       	ldd	r26, Z+2	; 0x02
    6a32:	b3 81       	ldd	r27, Z+3	; 0x03
    6a34:	01 96       	adiw	r24, 0x01	; 1
    6a36:	a1 1d       	adc	r26, r1
    6a38:	b1 1d       	adc	r27, r1
    6a3a:	80 83       	st	Z, r24
    6a3c:	91 83       	std	Z+1, r25	; 0x01
    6a3e:	a2 83       	std	Z+2, r26	; 0x02
    6a40:	b3 83       	std	Z+3, r27	; 0x03
    }
    return(errorf);
    6a42:	07 c0       	rjmp	.+14     	; 0x6a52 <clock_gettime+0xde>

    if (count2 < count1)
    {
///  note: counter2 < count1 implies ISR flag must be set
        if( !pendingf )
            errorf = -1;                          // counter overflow and NO pending is an error!
    6a44:	cf ef       	ldi	r28, 0xFF	; 255
    6a46:	df ef       	ldi	r29, 0xFF	; 255
        offset = TIMER1_COUNTS_PER_TIC;           // overflow
    6a48:	40 e2       	ldi	r20, 0x20	; 32
    6a4a:	5e e4       	ldi	r21, 0x4E	; 78
    6a4c:	60 e0       	ldi	r22, 0x00	; 0
    6a4e:	70 e0       	ldi	r23, 0x00	; 0
    6a50:	c4 cf       	rjmp	.-120    	; 0x69da <clock_gettime+0x66>
    {
        ts->tv_nsec -= 1000000000L;
        ts->tv_sec++;
    }
    return(errorf);
}
    6a52:	ce 01       	movw	r24, r28
    6a54:	df 91       	pop	r29
    6a56:	cf 91       	pop	r28
    6a58:	1f 91       	pop	r17
    6a5a:	0f 91       	pop	r16
    6a5c:	08 95       	ret

00006a5e <clock_task>:
void disable_timers()
{
    if(timers_configured && timers_enabled)
    {
        disable_system_task();
        timers_enabled = 0;
    6a5e:	80 91 54 1a 	lds	r24, 0x1A54	; 0x801a54 <__clock+0x4>
    6a62:	90 91 55 1a 	lds	r25, 0x1A55	; 0x801a55 <__clock+0x5>
    6a66:	a0 91 56 1a 	lds	r26, 0x1A56	; 0x801a56 <__clock+0x6>
    6a6a:	b0 91 57 1a 	lds	r27, 0x1A57	; 0x801a57 <__clock+0x7>
    6a6e:	80 5c       	subi	r24, 0xC0	; 192
    6a70:	9d 4b       	sbci	r25, 0xBD	; 189
    6a72:	a0 4f       	sbci	r26, 0xF0	; 240
    6a74:	bf 4f       	sbci	r27, 0xFF	; 255
    6a76:	80 93 54 1a 	sts	0x1A54, r24	; 0x801a54 <__clock+0x4>
    6a7a:	90 93 55 1a 	sts	0x1A55, r25	; 0x801a55 <__clock+0x5>
    6a7e:	a0 93 56 1a 	sts	0x1A56, r26	; 0x801a56 <__clock+0x6>
    6a82:	b0 93 57 1a 	sts	0x1A57, r27	; 0x801a57 <__clock+0x7>
    6a86:	80 91 54 1a 	lds	r24, 0x1A54	; 0x801a54 <__clock+0x4>
    6a8a:	90 91 55 1a 	lds	r25, 0x1A55	; 0x801a55 <__clock+0x5>
    6a8e:	a0 91 56 1a 	lds	r26, 0x1A56	; 0x801a56 <__clock+0x6>
    6a92:	b0 91 57 1a 	lds	r27, 0x1A57	; 0x801a57 <__clock+0x7>
    6a96:	81 15       	cp	r24, r1
    6a98:	9a 4c       	sbci	r25, 0xCA	; 202
    6a9a:	aa 49       	sbci	r26, 0x9A	; 154
    6a9c:	bb 43       	sbci	r27, 0x3B	; 59
    6a9e:	dc f0       	brlt	.+54     	; 0x6ad6 <clock_task+0x78>
    6aa0:	80 91 50 1a 	lds	r24, 0x1A50	; 0x801a50 <__clock>
    6aa4:	90 91 51 1a 	lds	r25, 0x1A51	; 0x801a51 <__clock+0x1>
    6aa8:	a0 91 52 1a 	lds	r26, 0x1A52	; 0x801a52 <__clock+0x2>
    6aac:	b0 91 53 1a 	lds	r27, 0x1A53	; 0x801a53 <__clock+0x3>
    6ab0:	01 96       	adiw	r24, 0x01	; 1
    6ab2:	a1 1d       	adc	r26, r1
    6ab4:	b1 1d       	adc	r27, r1
    6ab6:	80 93 50 1a 	sts	0x1A50, r24	; 0x801a50 <__clock>
    6aba:	90 93 51 1a 	sts	0x1A51, r25	; 0x801a51 <__clock+0x1>
    6abe:	a0 93 52 1a 	sts	0x1A52, r26	; 0x801a52 <__clock+0x2>
    6ac2:	b0 93 53 1a 	sts	0x1A53, r27	; 0x801a53 <__clock+0x3>
    6ac6:	10 92 54 1a 	sts	0x1A54, r1	; 0x801a54 <__clock+0x4>
    6aca:	10 92 55 1a 	sts	0x1A55, r1	; 0x801a55 <__clock+0x5>
    6ace:	10 92 56 1a 	sts	0x1A56, r1	; 0x801a56 <__clock+0x6>
    6ad2:	10 92 57 1a 	sts	0x1A57, r1	; 0x801a57 <__clock+0x7>
    6ad6:	08 95       	ret

00006ad8 <clock_settime.part.2>:
    6ad8:	fc 01       	movw	r30, r24
    6ada:	84 81       	ldd	r24, Z+4	; 0x04
    6adc:	95 81       	ldd	r25, Z+5	; 0x05
    6ade:	a6 81       	ldd	r26, Z+6	; 0x06
    6ae0:	b7 81       	ldd	r27, Z+7	; 0x07
    6ae2:	80 93 54 1a 	sts	0x1A54, r24	; 0x801a54 <__clock+0x4>
    6ae6:	90 93 55 1a 	sts	0x1A55, r25	; 0x801a55 <__clock+0x5>
    6aea:	a0 93 56 1a 	sts	0x1A56, r26	; 0x801a56 <__clock+0x6>
    6aee:	b0 93 57 1a 	sts	0x1A57, r27	; 0x801a57 <__clock+0x7>
    6af2:	80 81       	ld	r24, Z
    6af4:	91 81       	ldd	r25, Z+1	; 0x01
    6af6:	a2 81       	ldd	r26, Z+2	; 0x02
    6af8:	b3 81       	ldd	r27, Z+3	; 0x03
    6afa:	80 93 50 1a 	sts	0x1A50, r24	; 0x801a50 <__clock>
    6afe:	90 93 51 1a 	sts	0x1A51, r25	; 0x801a51 <__clock+0x1>
    6b02:	a0 93 52 1a 	sts	0x1A52, r26	; 0x801a52 <__clock+0x2>
    6b06:	b0 93 53 1a 	sts	0x1A53, r27	; 0x801a53 <__clock+0x3>
    6b0a:	80 91 54 1a 	lds	r24, 0x1A54	; 0x801a54 <__clock+0x4>
    6b0e:	90 91 55 1a 	lds	r25, 0x1A55	; 0x801a55 <__clock+0x5>
    6b12:	a0 91 56 1a 	lds	r26, 0x1A56	; 0x801a56 <__clock+0x6>
    6b16:	b0 91 57 1a 	lds	r27, 0x1A57	; 0x801a57 <__clock+0x7>
    6b1a:	44 81       	ldd	r20, Z+4	; 0x04
    6b1c:	55 81       	ldd	r21, Z+5	; 0x05
    6b1e:	66 81       	ldd	r22, Z+6	; 0x06
    6b20:	77 81       	ldd	r23, Z+7	; 0x07
    6b22:	48 17       	cp	r20, r24
    6b24:	59 07       	cpc	r21, r25
    6b26:	6a 07       	cpc	r22, r26
    6b28:	7b 07       	cpc	r23, r27
    6b2a:	b9 f6       	brne	.-82     	; 0x6ada <clock_settime.part.2+0x2>
    6b2c:	80 91 50 1a 	lds	r24, 0x1A50	; 0x801a50 <__clock>
    6b30:	90 91 51 1a 	lds	r25, 0x1A51	; 0x801a51 <__clock+0x1>
    6b34:	a0 91 52 1a 	lds	r26, 0x1A52	; 0x801a52 <__clock+0x2>
    6b38:	b0 91 53 1a 	lds	r27, 0x1A53	; 0x801a53 <__clock+0x3>
    6b3c:	40 81       	ld	r20, Z
    6b3e:	51 81       	ldd	r21, Z+1	; 0x01
    6b40:	62 81       	ldd	r22, Z+2	; 0x02
    6b42:	73 81       	ldd	r23, Z+3	; 0x03
    6b44:	48 17       	cp	r20, r24
    6b46:	59 07       	cpc	r21, r25
    6b48:	6a 07       	cpc	r22, r26
    6b4a:	7b 07       	cpc	r23, r27
    6b4c:	31 f6       	brne	.-116    	; 0x6ada <clock_settime.part.2+0x2>
    6b4e:	80 e0       	ldi	r24, 0x00	; 0
    6b50:	90 e0       	ldi	r25, 0x00	; 0
    6b52:	08 95       	ret

00006b54 <set_timers>:
    6b54:	00 d0       	rcall	.+0      	; 0x6b56 <set_timers+0x2>
    6b56:	1f 92       	push	r1
    6b58:	00 97       	sbiw	r24, 0x00	; 0
    6b5a:	79 f1       	breq	.+94     	; 0x6bba <set_timers+0x66>
    6b5c:	e8 e5       	ldi	r30, 0x58	; 88
    6b5e:	fa e1       	ldi	r31, 0x1A	; 26
    6b60:	4f ef       	ldi	r20, 0xFF	; 255
    6b62:	5f ef       	ldi	r21, 0xFF	; 255
    6b64:	20 e0       	ldi	r18, 0x00	; 0
    6b66:	30 e0       	ldi	r19, 0x00	; 0
    6b68:	60 81       	ld	r22, Z
    6b6a:	71 81       	ldd	r23, Z+1	; 0x01
    6b6c:	86 17       	cp	r24, r22
    6b6e:	97 07       	cpc	r25, r23
    6b70:	79 f0       	breq	.+30     	; 0x6b90 <set_timers+0x3c>
    6b72:	67 2b       	or	r22, r23
    6b74:	71 f4       	brne	.+28     	; 0x6b92 <set_timers+0x3e>
    6b76:	f9 01       	movw	r30, r18
    6b78:	ee 0f       	add	r30, r30
    6b7a:	ff 1f       	adc	r31, r31
    6b7c:	e2 0f       	add	r30, r18
    6b7e:	f3 1f       	adc	r31, r19
    6b80:	e8 5a       	subi	r30, 0xA8	; 168
    6b82:	f5 4e       	sbci	r31, 0xE5	; 229
    6b84:	91 83       	std	Z+1, r25	; 0x01
    6b86:	80 83       	st	Z, r24
    6b88:	81 e0       	ldi	r24, 0x01	; 1
    6b8a:	82 83       	std	Z+2, r24	; 0x02
    6b8c:	c9 01       	movw	r24, r18
    6b8e:	19 c0       	rjmp	.+50     	; 0x6bc2 <set_timers+0x6e>
    6b90:	a9 01       	movw	r20, r18
    6b92:	2f 5f       	subi	r18, 0xFF	; 255
    6b94:	3f 4f       	sbci	r19, 0xFF	; 255
    6b96:	33 96       	adiw	r30, 0x03	; 3
    6b98:	28 30       	cpi	r18, 0x08	; 8
    6b9a:	31 05       	cpc	r19, r1
    6b9c:	29 f7       	brne	.-54     	; 0x6b68 <set_timers+0x14>
    6b9e:	4f 3f       	cpi	r20, 0xFF	; 255
    6ba0:	8f ef       	ldi	r24, 0xFF	; 255
    6ba2:	58 07       	cpc	r21, r24
    6ba4:	69 f4       	brne	.+26     	; 0x6bc0 <set_timers+0x6c>
    6ba6:	8f ec       	ldi	r24, 0xCF	; 207
    6ba8:	95 e0       	ldi	r25, 0x05	; 5
    6baa:	a0 e0       	ldi	r26, 0x00	; 0
    6bac:	ed b7       	in	r30, 0x3d	; 61
    6bae:	fe b7       	in	r31, 0x3e	; 62
    6bb0:	81 83       	std	Z+1, r24	; 0x01
    6bb2:	92 83       	std	Z+2, r25	; 0x02
    6bb4:	a3 83       	std	Z+3, r26	; 0x03
    6bb6:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
    6bba:	8f ef       	ldi	r24, 0xFF	; 255
    6bbc:	9f ef       	ldi	r25, 0xFF	; 255
    6bbe:	01 c0       	rjmp	.+2      	; 0x6bc2 <set_timers+0x6e>
    6bc0:	ca 01       	movw	r24, r20
    6bc2:	0f 90       	pop	r0
    6bc4:	0f 90       	pop	r0
    6bc6:	0f 90       	pop	r0
    6bc8:	08 95       	ret

00006bca <delete_all_timers>:
    6bca:	e8 e5       	ldi	r30, 0x58	; 88
    6bcc:	fa e1       	ldi	r31, 0x1A	; 26
    6bce:	12 82       	std	Z+2, r1	; 0x02
    6bd0:	11 82       	std	Z+1, r1	; 0x01
    6bd2:	10 82       	st	Z, r1
    6bd4:	33 96       	adiw	r30, 0x03	; 3
    6bd6:	8a e1       	ldi	r24, 0x1A	; 26
    6bd8:	e0 37       	cpi	r30, 0x70	; 112
    6bda:	f8 07       	cpc	r31, r24
    6bdc:	c1 f7       	brne	.-16     	; 0x6bce <delete_all_timers+0x4>
    6bde:	08 95       	ret

00006be0 <subtract_timespec>:
    6be0:	0f 93       	push	r16
    6be2:	1f 93       	push	r17
    6be4:	cf 93       	push	r28
    6be6:	df 93       	push	r29
    6be8:	fc 01       	movw	r30, r24
    6bea:	84 81       	ldd	r24, Z+4	; 0x04
    6bec:	95 81       	ldd	r25, Z+5	; 0x05
    6bee:	a6 81       	ldd	r26, Z+6	; 0x06
    6bf0:	b7 81       	ldd	r27, Z+7	; 0x07
    6bf2:	eb 01       	movw	r28, r22
    6bf4:	0c 81       	ldd	r16, Y+4	; 0x04
    6bf6:	1d 81       	ldd	r17, Y+5	; 0x05
    6bf8:	2e 81       	ldd	r18, Y+6	; 0x06
    6bfa:	3f 81       	ldd	r19, Y+7	; 0x07
    6bfc:	80 1b       	sub	r24, r16
    6bfe:	91 0b       	sbc	r25, r17
    6c00:	a2 0b       	sbc	r26, r18
    6c02:	b3 0b       	sbc	r27, r19
    6c04:	b7 fd       	sbrc	r27, 7
    6c06:	05 c0       	rjmp	.+10     	; 0x6c12 <subtract_timespec+0x32>
    6c08:	84 83       	std	Z+4, r24	; 0x04
    6c0a:	95 83       	std	Z+5, r25	; 0x05
    6c0c:	a6 83       	std	Z+6, r26	; 0x06
    6c0e:	b7 83       	std	Z+7, r27	; 0x07
    6c10:	12 c0       	rjmp	.+36     	; 0x6c36 <subtract_timespec+0x56>
    6c12:	96 53       	subi	r25, 0x36	; 54
    6c14:	a5 46       	sbci	r26, 0x65	; 101
    6c16:	b4 4c       	sbci	r27, 0xC4	; 196
    6c18:	84 83       	std	Z+4, r24	; 0x04
    6c1a:	95 83       	std	Z+5, r25	; 0x05
    6c1c:	a6 83       	std	Z+6, r26	; 0x06
    6c1e:	b7 83       	std	Z+7, r27	; 0x07
    6c20:	80 81       	ld	r24, Z
    6c22:	91 81       	ldd	r25, Z+1	; 0x01
    6c24:	a2 81       	ldd	r26, Z+2	; 0x02
    6c26:	b3 81       	ldd	r27, Z+3	; 0x03
    6c28:	01 97       	sbiw	r24, 0x01	; 1
    6c2a:	a1 09       	sbc	r26, r1
    6c2c:	b1 09       	sbc	r27, r1
    6c2e:	80 83       	st	Z, r24
    6c30:	91 83       	std	Z+1, r25	; 0x01
    6c32:	a2 83       	std	Z+2, r26	; 0x02
    6c34:	b3 83       	std	Z+3, r27	; 0x03
    6c36:	80 81       	ld	r24, Z
    6c38:	91 81       	ldd	r25, Z+1	; 0x01
    6c3a:	a2 81       	ldd	r26, Z+2	; 0x02
    6c3c:	b3 81       	ldd	r27, Z+3	; 0x03
    6c3e:	eb 01       	movw	r28, r22
    6c40:	48 81       	ld	r20, Y
    6c42:	59 81       	ldd	r21, Y+1	; 0x01
    6c44:	6a 81       	ldd	r22, Y+2	; 0x02
    6c46:	7b 81       	ldd	r23, Y+3	; 0x03
    6c48:	84 1b       	sub	r24, r20
    6c4a:	95 0b       	sbc	r25, r21
    6c4c:	a6 0b       	sbc	r26, r22
    6c4e:	b7 0b       	sbc	r27, r23
    6c50:	80 83       	st	Z, r24
    6c52:	91 83       	std	Z+1, r25	; 0x01
    6c54:	a2 83       	std	Z+2, r26	; 0x02
    6c56:	b3 83       	std	Z+3, r27	; 0x03
    6c58:	df 91       	pop	r29
    6c5a:	cf 91       	pop	r28
    6c5c:	1f 91       	pop	r17
    6c5e:	0f 91       	pop	r16
    6c60:	08 95       	ret

00006c62 <ts_to_str>:
    6c62:	ad b7       	in	r26, 0x3d	; 61
    6c64:	be b7       	in	r27, 0x3e	; 62
    6c66:	1f 97       	sbiw	r26, 0x0f	; 15
    6c68:	0f b6       	in	r0, 0x3f	; 63
    6c6a:	f8 94       	cli
    6c6c:	be bf       	out	0x3e, r27	; 62
    6c6e:	0f be       	out	0x3f, r0	; 63
    6c70:	ad bf       	out	0x3d, r26	; 61
    6c72:	fc 01       	movw	r30, r24
    6c74:	44 81       	ldd	r20, Z+4	; 0x04
    6c76:	55 81       	ldd	r21, Z+5	; 0x05
    6c78:	66 81       	ldd	r22, Z+6	; 0x06
    6c7a:	77 81       	ldd	r23, Z+7	; 0x07
    6c7c:	ed b7       	in	r30, 0x3d	; 61
    6c7e:	fe b7       	in	r31, 0x3e	; 62
    6c80:	44 87       	std	Z+12, r20	; 0x0c
    6c82:	55 87       	std	Z+13, r21	; 0x0d
    6c84:	66 87       	std	Z+14, r22	; 0x0e
    6c86:	77 87       	std	Z+15, r23	; 0x0f
    6c88:	fc 01       	movw	r30, r24
    6c8a:	80 81       	ld	r24, Z
    6c8c:	91 81       	ldd	r25, Z+1	; 0x01
    6c8e:	a2 81       	ldd	r26, Z+2	; 0x02
    6c90:	b3 81       	ldd	r27, Z+3	; 0x03
    6c92:	ed b7       	in	r30, 0x3d	; 61
    6c94:	fe b7       	in	r31, 0x3e	; 62
    6c96:	80 87       	std	Z+8, r24	; 0x08
    6c98:	91 87       	std	Z+9, r25	; 0x09
    6c9a:	a2 87       	std	Z+10, r26	; 0x0a
    6c9c:	b3 87       	std	Z+11, r27	; 0x0b
    6c9e:	85 ec       	ldi	r24, 0xC5	; 197
    6ca0:	95 e0       	ldi	r25, 0x05	; 5
    6ca2:	a0 e0       	ldi	r26, 0x00	; 0
    6ca4:	85 83       	std	Z+5, r24	; 0x05
    6ca6:	96 83       	std	Z+6, r25	; 0x06
    6ca8:	a7 83       	std	Z+7, r26	; 0x07
    6caa:	8f e1       	ldi	r24, 0x1F	; 31
    6cac:	90 e0       	ldi	r25, 0x00	; 0
    6cae:	94 83       	std	Z+4, r25	; 0x04
    6cb0:	83 83       	std	Z+3, r24	; 0x03
    6cb2:	84 e8       	ldi	r24, 0x84	; 132
    6cb4:	97 e1       	ldi	r25, 0x17	; 23
    6cb6:	92 83       	std	Z+2, r25	; 0x02
    6cb8:	81 83       	std	Z+1, r24	; 0x01
    6cba:	0e 94 d4 47 	call	0x8fa8	; 0x8fa8 <snprintf_P>
    6cbe:	84 e8       	ldi	r24, 0x84	; 132
    6cc0:	97 e1       	ldi	r25, 0x17	; 23
    6cc2:	ad b7       	in	r26, 0x3d	; 61
    6cc4:	be b7       	in	r27, 0x3e	; 62
    6cc6:	1f 96       	adiw	r26, 0x0f	; 15
    6cc8:	0f b6       	in	r0, 0x3f	; 63
    6cca:	f8 94       	cli
    6ccc:	be bf       	out	0x3e, r27	; 62
    6cce:	0f be       	out	0x3f, r0	; 63
    6cd0:	ad bf       	out	0x3d, r26	; 61
    6cd2:	08 95       	ret

00006cd4 <clock_elapsed_begin>:
    6cd4:	6c e7       	ldi	r22, 0x7C	; 124
    6cd6:	77 e1       	ldi	r23, 0x17	; 23
    6cd8:	80 e0       	ldi	r24, 0x00	; 0
    6cda:	90 e0       	ldi	r25, 0x00	; 0
    6cdc:	4b ce       	rjmp	.-874    	; 0x6974 <clock_gettime>
    6cde:	08 95       	ret

00006ce0 <clock_elapsed_end>:
    6ce0:	af e0       	ldi	r26, 0x0F	; 15
    6ce2:	b0 e0       	ldi	r27, 0x00	; 0
    6ce4:	e6 e7       	ldi	r30, 0x76	; 118
    6ce6:	f6 e3       	ldi	r31, 0x36	; 54
    6ce8:	0c 94 b2 e8 	jmp	0x1d164	; 0x1d164 <__prologue_saves__+0x1c>
    6cec:	8c 01       	movw	r16, r24
    6cee:	be 01       	movw	r22, r28
    6cf0:	68 5f       	subi	r22, 0xF8	; 248
    6cf2:	7f 4f       	sbci	r23, 0xFF	; 255
    6cf4:	80 e0       	ldi	r24, 0x00	; 0
    6cf6:	90 e0       	ldi	r25, 0x00	; 0
    6cf8:	3d de       	rcall	.-902    	; 0x6974 <clock_gettime>
    6cfa:	6c e7       	ldi	r22, 0x7C	; 124
    6cfc:	77 e1       	ldi	r23, 0x17	; 23
    6cfe:	ce 01       	movw	r24, r28
    6d00:	08 96       	adiw	r24, 0x08	; 8
    6d02:	6e df       	rcall	.-292    	; 0x6be0 <subtract_timespec>
    6d04:	01 15       	cp	r16, r1
    6d06:	11 05       	cpc	r17, r1
    6d08:	b1 f0       	breq	.+44     	; 0x6d36 <clock_elapsed_end+0x56>
    6d0a:	f8 01       	movw	r30, r16
    6d0c:	80 81       	ld	r24, Z
    6d0e:	88 23       	and	r24, r24
    6d10:	91 f0       	breq	.+36     	; 0x6d36 <clock_elapsed_end+0x56>
    6d12:	ce 01       	movw	r24, r28
    6d14:	08 96       	adiw	r24, 0x08	; 8
    6d16:	a5 df       	rcall	.-182    	; 0x6c62 <ts_to_str>
    6d18:	ed b7       	in	r30, 0x3d	; 61
    6d1a:	fe b7       	in	r31, 0x3e	; 62
    6d1c:	97 83       	std	Z+7, r25	; 0x07
    6d1e:	86 83       	std	Z+6, r24	; 0x06
    6d20:	15 83       	std	Z+5, r17	; 0x05
    6d22:	04 83       	std	Z+4, r16	; 0x04
    6d24:	87 eb       	ldi	r24, 0xB7	; 183
    6d26:	95 e0       	ldi	r25, 0x05	; 5
    6d28:	a0 e0       	ldi	r26, 0x00	; 0
    6d2a:	81 83       	std	Z+1, r24	; 0x01
    6d2c:	92 83       	std	Z+2, r25	; 0x02
    6d2e:	a3 83       	std	Z+3, r26	; 0x03
    6d30:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
    6d34:	0f c0       	rjmp	.+30     	; 0x6d54 <clock_elapsed_end+0x74>
    6d36:	ce 01       	movw	r24, r28
    6d38:	08 96       	adiw	r24, 0x08	; 8
    6d3a:	93 df       	rcall	.-218    	; 0x6c62 <ts_to_str>
    6d3c:	ed b7       	in	r30, 0x3d	; 61
    6d3e:	fe b7       	in	r31, 0x3e	; 62
    6d40:	95 83       	std	Z+5, r25	; 0x05
    6d42:	84 83       	std	Z+4, r24	; 0x04
    6d44:	8c ea       	ldi	r24, 0xAC	; 172
    6d46:	95 e0       	ldi	r25, 0x05	; 5
    6d48:	a0 e0       	ldi	r26, 0x00	; 0
    6d4a:	81 83       	std	Z+1, r24	; 0x01
    6d4c:	92 83       	std	Z+2, r25	; 0x02
    6d4e:	a3 83       	std	Z+3, r26	; 0x03
    6d50:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
    6d54:	2f 96       	adiw	r28, 0x0f	; 15
    6d56:	e4 e0       	ldi	r30, 0x04	; 4
    6d58:	0c 94 ce e8 	jmp	0x1d19c	; 0x1d19c <__epilogue_restores__+0x1c>

00006d5c <clock_clear>:
    6d5c:	a8 e0       	ldi	r26, 0x08	; 8
    6d5e:	b0 e0       	ldi	r27, 0x00	; 0
    6d60:	e4 eb       	ldi	r30, 0xB4	; 180
    6d62:	f6 e3       	ldi	r31, 0x36	; 54
    6d64:	0c 94 b4 e8 	jmp	0x1d168	; 0x1d168 <__prologue_saves__+0x20>
    6d68:	1d 82       	std	Y+5, r1	; 0x05
    6d6a:	1e 82       	std	Y+6, r1	; 0x06
    6d6c:	1f 82       	std	Y+7, r1	; 0x07
    6d6e:	18 86       	std	Y+8, r1	; 0x08
    6d70:	19 82       	std	Y+1, r1	; 0x01
    6d72:	1a 82       	std	Y+2, r1	; 0x02
    6d74:	1b 82       	std	Y+3, r1	; 0x03
    6d76:	1c 82       	std	Y+4, r1	; 0x04
    6d78:	ce 01       	movw	r24, r28
    6d7a:	01 96       	adiw	r24, 0x01	; 1
    6d7c:	ad de       	rcall	.-678    	; 0x6ad8 <clock_settime.part.2>
    6d7e:	e0 e7       	ldi	r30, 0x70	; 112
    6d80:	fa e1       	ldi	r31, 0x1A	; 26
    6d82:	11 82       	std	Z+1, r1	; 0x01
    6d84:	10 82       	st	Z, r1
    6d86:	13 82       	std	Z+3, r1	; 0x03
    6d88:	12 82       	std	Z+2, r1	; 0x02
    6d8a:	28 96       	adiw	r28, 0x08	; 8
    6d8c:	e2 e0       	ldi	r30, 0x02	; 2
    6d8e:	0c 94 d0 e8 	jmp	0x1d1a0	; 0x1d1a0 <__epilogue_restores__+0x20>

00006d92 <enable_timers>:
///
/// @return  void
MEMSPACE
void enable_timers()
{
    if(timers_configured && !timers_enabled)
    6d92:	80 91 a4 17 	lds	r24, 0x17A4	; 0x8017a4 <timers_configured>
    6d96:	90 91 a5 17 	lds	r25, 0x17A5	; 0x8017a5 <timers_configured+0x1>
    6d9a:	89 2b       	or	r24, r25
    6d9c:	69 f0       	breq	.+26     	; 0x6db8 <enable_timers+0x26>
    6d9e:	80 91 a6 17 	lds	r24, 0x17A6	; 0x8017a6 <timers_enabled>
    6da2:	90 91 a7 17 	lds	r25, 0x17A7	; 0x8017a7 <timers_enabled+0x1>
    6da6:	89 2b       	or	r24, r25
    6da8:	39 f4       	brne	.+14     	; 0x6db8 <enable_timers+0x26>
    {
        enable_system_task();
    6daa:	a8 dd       	rcall	.-1200   	; 0x68fc <enable_system_task>
        timers_enabled = 1;
    6dac:	81 e0       	ldi	r24, 0x01	; 1
    6dae:	90 e0       	ldi	r25, 0x00	; 0
    6db0:	90 93 a7 17 	sts	0x17A7, r25	; 0x8017a7 <timers_enabled+0x1>
    6db4:	80 93 a6 17 	sts	0x17A6, r24	; 0x8017a6 <timers_enabled>
    6db8:	08 95       	ret

00006dba <execute_timers>:
/// @brief  Execute all user timers at SYSTEM_HZ rate.
///  Called by system task
///
/// @return  void
void execute_timers()
{
    6dba:	cf 93       	push	r28
    6dbc:	df 93       	push	r29
    6dbe:	c8 e5       	ldi	r28, 0x58	; 88
    6dc0:	da e1       	ldi	r29, 0x1A	; 26
    int i;

    for(i=0; i < MAX_TIMER_CNT; i++)
    {
        if(timer_irq[i].timer && timer_irq[i].user_timer_handler != NULL)
    6dc2:	8a 81       	ldd	r24, Y+2	; 0x02
    6dc4:	88 23       	and	r24, r24
    6dc6:	29 f0       	breq	.+10     	; 0x6dd2 <execute_timers+0x18>
    6dc8:	e8 81       	ld	r30, Y
    6dca:	f9 81       	ldd	r31, Y+1	; 0x01
    6dcc:	30 97       	sbiw	r30, 0x00	; 0
    6dce:	09 f0       	breq	.+2      	; 0x6dd2 <execute_timers+0x18>
            (*timer_irq[i].user_timer_handler)();
    6dd0:	09 95       	icall
    6dd2:	23 96       	adiw	r28, 0x03	; 3
/// @return  void
void execute_timers()
{
    int i;

    for(i=0; i < MAX_TIMER_CNT; i++)
    6dd4:	8a e1       	ldi	r24, 0x1A	; 26
    6dd6:	c0 37       	cpi	r28, 0x70	; 112
    6dd8:	d8 07       	cpc	r29, r24
    6dda:	99 f7       	brne	.-26     	; 0x6dc2 <execute_timers+0x8>
    {
        if(timer_irq[i].timer && timer_irq[i].user_timer_handler != NULL)
            (*timer_irq[i].user_timer_handler)();
    }
}
    6ddc:	df 91       	pop	r29
    6dde:	cf 91       	pop	r28
    6de0:	08 95       	ret

00006de2 <init_timers>:
/// @see: timer_hal.c for hardware dependent interface
//
/// @return  void
MEMSPACE
void init_timers()
{
    6de2:	00 d0       	rcall	.+0      	; 0x6de4 <init_timers+0x2>
    6de4:	1f 92       	push	r1
    printf("Timers init called\n");
    6de6:	88 e9       	ldi	r24, 0x98	; 152
    6de8:	95 e0       	ldi	r25, 0x05	; 5
    6dea:	a0 e0       	ldi	r26, 0x00	; 0
    6dec:	ed b7       	in	r30, 0x3d	; 61
    6dee:	fe b7       	in	r31, 0x3e	; 62
    6df0:	81 83       	std	Z+1, r24	; 0x01
    6df2:	92 83       	std	Z+2, r25	; 0x02
    6df4:	a3 83       	std	Z+3, r26	; 0x03
    6df6:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>

    if(!timers_configured)
    6dfa:	80 91 a4 17 	lds	r24, 0x17A4	; 0x8017a4 <timers_configured>
    6dfe:	90 91 a5 17 	lds	r25, 0x17A5	; 0x8017a5 <timers_configured+0x1>
    6e02:	89 2b       	or	r24, r25
    6e04:	a9 f4       	brne	.+42     	; 0x6e30 <init_timers+0x4e>
    {
        install_timers_isr();
    6e06:	7c dd       	rcall	.-1288   	; 0x6900 <install_timers_isr>
        timers_configured = 1;
    6e08:	81 e0       	ldi	r24, 0x01	; 1
    6e0a:	90 e0       	ldi	r25, 0x00	; 0
    6e0c:	90 93 a5 17 	sts	0x17A5, r25	; 0x8017a5 <timers_configured+0x1>
    6e10:	80 93 a4 17 	sts	0x17A4, r24	; 0x8017a4 <timers_configured>
        timers_enabled = 0;
    6e14:	10 92 a7 17 	sts	0x17A7, r1	; 0x8017a7 <timers_enabled+0x1>
    6e18:	10 92 a6 17 	sts	0x17A6, r1	; 0x8017a6 <timers_enabled>
        printf("Timers configured\n");
    6e1c:	85 e8       	ldi	r24, 0x85	; 133
    6e1e:	95 e0       	ldi	r25, 0x05	; 5
    6e20:	a0 e0       	ldi	r26, 0x00	; 0
    6e22:	ed b7       	in	r30, 0x3d	; 61
    6e24:	fe b7       	in	r31, 0x3e	; 62
    6e26:	81 83       	std	Z+1, r24	; 0x01
    6e28:	92 83       	std	Z+2, r25	; 0x02
    6e2a:	a3 83       	std	Z+3, r26	; 0x03
    6e2c:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
    }

    delete_all_timers();

    clock_clear();
    6e30:	cc de       	rcall	.-616    	; 0x6bca <delete_all_timers>
    6e32:	94 df       	rcall	.-216    	; 0x6d5c <clock_clear>
    printf("Clock Init\n");
    6e34:	89 e7       	ldi	r24, 0x79	; 121
    6e36:	95 e0       	ldi	r25, 0x05	; 5
    6e38:	a0 e0       	ldi	r26, 0x00	; 0
    6e3a:	ed b7       	in	r30, 0x3d	; 61
    6e3c:	fe b7       	in	r31, 0x3e	; 62
    6e3e:	81 83       	std	Z+1, r24	; 0x01
    6e40:	92 83       	std	Z+2, r25	; 0x02
    6e42:	a3 83       	std	Z+3, r26	; 0x03
    6e44:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>

///  See time.c
    if(set_timers(clock_task,1) == -1)
    6e48:	61 e0       	ldi	r22, 0x01	; 1
    6e4a:	70 e0       	ldi	r23, 0x00	; 0
    6e4c:	8f e2       	ldi	r24, 0x2F	; 47
    6e4e:	95 e3       	ldi	r25, 0x35	; 53
    6e50:	81 de       	rcall	.-766    	; 0x6b54 <set_timers>
    6e52:	01 96       	adiw	r24, 0x01	; 1
    6e54:	51 f4       	brne	.+20     	; 0x6e6a <init_timers+0x88>
        printf("Clock task init failed\n");
    6e56:	81 e6       	ldi	r24, 0x61	; 97
    6e58:	95 e0       	ldi	r25, 0x05	; 5
    6e5a:	a0 e0       	ldi	r26, 0x00	; 0
    6e5c:	ed b7       	in	r30, 0x3d	; 61
    6e5e:	fe b7       	in	r31, 0x3e	; 62
    6e60:	81 83       	std	Z+1, r24	; 0x01
    6e62:	92 83       	std	Z+2, r25	; 0x02
    6e64:	a3 83       	std	Z+3, r26	; 0x03
    6e66:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
    printf("Clock Installed\n");
    6e6a:	80 e5       	ldi	r24, 0x50	; 80
    6e6c:	95 e0       	ldi	r25, 0x05	; 5
    6e6e:	a0 e0       	ldi	r26, 0x00	; 0
    6e70:	ed b7       	in	r30, 0x3d	; 61
    6e72:	fe b7       	in	r31, 0x3e	; 62
    6e74:	81 83       	std	Z+1, r24	; 0x01
    6e76:	92 83       	std	Z+2, r25	; 0x02
    6e78:	a3 83       	std	Z+3, r26	; 0x03
    6e7a:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>

    enable_timers();
    6e7e:	89 df       	rcall	.-238    	; 0x6d92 <enable_timers>

    printf("Timers enabled\n");
    6e80:	80 e4       	ldi	r24, 0x40	; 64
    6e82:	95 e0       	ldi	r25, 0x05	; 5
    6e84:	a0 e0       	ldi	r26, 0x00	; 0
    6e86:	ed b7       	in	r30, 0x3d	; 61
    6e88:	fe b7       	in	r31, 0x3e	; 62
    6e8a:	81 83       	std	Z+1, r24	; 0x01
    6e8c:	92 83       	std	Z+2, r25	; 0x02
    6e8e:	a3 83       	std	Z+3, r26	; 0x03
    6e90:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
}
    6e94:	0f 90       	pop	r0
    6e96:	0f 90       	pop	r0
    6e98:	0f 90       	pop	r0
    6e9a:	08 95       	ret

00006e9c <clock_getres>:
/// @return 0 on success.
/// @return -1 on error.
MEMSPACE
int clock_getres(clockid_t clk_id  __attribute__((unused)), struct timespec *res)
{
    if(clk_id)
    6e9c:	89 2b       	or	r24, r25
    6e9e:	81 f4       	brne	.+32     	; 0x6ec0 <clock_getres+0x24>
        return(-1);
    res->tv_sec = 0;
    6ea0:	fb 01       	movw	r30, r22
    6ea2:	10 82       	st	Z, r1
    6ea4:	11 82       	std	Z+1, r1	; 0x01
    6ea6:	12 82       	std	Z+2, r1	; 0x02
    6ea8:	13 82       	std	Z+3, r1	; 0x03
    res->tv_nsec = SYSTEM_TASK_TIC_NS;
    6eaa:	80 e4       	ldi	r24, 0x40	; 64
    6eac:	92 e4       	ldi	r25, 0x42	; 66
    6eae:	af e0       	ldi	r26, 0x0F	; 15
    6eb0:	b0 e0       	ldi	r27, 0x00	; 0
    6eb2:	84 83       	std	Z+4, r24	; 0x04
    6eb4:	95 83       	std	Z+5, r25	; 0x05
    6eb6:	a6 83       	std	Z+6, r26	; 0x06
    6eb8:	b7 83       	std	Z+7, r27	; 0x07
    return(0);
    6eba:	80 e0       	ldi	r24, 0x00	; 0
    6ebc:	90 e0       	ldi	r25, 0x00	; 0
    6ebe:	08 95       	ret
/// @return -1 on error.
MEMSPACE
int clock_getres(clockid_t clk_id  __attribute__((unused)), struct timespec *res)
{
    if(clk_id)
        return(-1);
    6ec0:	8f ef       	ldi	r24, 0xFF	; 255
    6ec2:	9f ef       	ldi	r25, 0xFF	; 255
    res->tv_sec = 0;
    res->tv_nsec = SYSTEM_TASK_TIC_NS;
    return(0);
}
    6ec4:	08 95       	ret

00006ec6 <clock_settime>:
///
/// @return 0.
MEMSPACE
int clock_settime(clockid_t clk_id  __attribute__((unused)), const struct timespec *ts)
{
    if(clk_id)
    6ec6:	89 2b       	or	r24, r25
    6ec8:	19 f4       	brne	.+6      	; 0x6ed0 <clock_settime+0xa>
    6eca:	cb 01       	movw	r24, r22
    6ecc:	05 ce       	rjmp	.-1014   	; 0x6ad8 <clock_settime.part.2>
    6ece:	08 95       	ret
        return(-1);
    6ed0:	8f ef       	ldi	r24, 0xFF	; 255
    6ed2:	9f ef       	ldi	r25, 0xFF	; 255
            continue;
        break;
    }

    return(0);
}
    6ed4:	08 95       	ret

00006ed6 <IS_Leap>:
void print_dst_gmt()
{
    printf("DST START       GMT: %s\n", ctime_gm(&dst.start));
    printf("DST END         GMT: %s\n", ctime_gm(&dst.end));

}
    6ed6:	9c 01       	movw	r18, r24
    6ed8:	83 70       	andi	r24, 0x03	; 3
    6eda:	99 27       	eor	r25, r25
    6edc:	00 97       	sbiw	r24, 0x00	; 0
    6ede:	69 f4       	brne	.+26     	; 0x6efa <IS_Leap+0x24>
    6ee0:	2c 36       	cpi	r18, 0x6C	; 108
    6ee2:	47 e0       	ldi	r20, 0x07	; 7
    6ee4:	34 07       	cpc	r19, r20
    6ee6:	59 f0       	breq	.+22     	; 0x6efe <IS_Leap+0x28>
    6ee8:	51 e0       	ldi	r21, 0x01	; 1
    6eea:	40 e0       	ldi	r20, 0x00	; 0
    6eec:	24 33       	cpi	r18, 0x34	; 52
    6eee:	38 40       	sbci	r19, 0x08	; 8
    6ef0:	09 f4       	brne	.+2      	; 0x6ef4 <IS_Leap+0x1e>
    6ef2:	50 e0       	ldi	r21, 0x00	; 0
    6ef4:	85 2f       	mov	r24, r21
    6ef6:	94 2f       	mov	r25, r20
    6ef8:	08 95       	ret
    6efa:	80 e0       	ldi	r24, 0x00	; 0
    6efc:	90 e0       	ldi	r25, 0x00	; 0
    6efe:	08 95       	ret

00006f00 <tm_mon_to_ascii>:
    6f00:	8c 30       	cpi	r24, 0x0C	; 12
    6f02:	91 05       	cpc	r25, r1
    6f04:	40 f4       	brcc	.+16     	; 0x6f16 <tm_mon_to_ascii+0x16>
    6f06:	88 0f       	add	r24, r24
    6f08:	99 1f       	adc	r25, r25
    6f0a:	fc 01       	movw	r30, r24
    6f0c:	e5 5f       	subi	r30, 0xF5	; 245
    6f0e:	fe 4f       	sbci	r31, 0xFE	; 254
    6f10:	80 81       	ld	r24, Z
    6f12:	91 81       	ldd	r25, Z+1	; 0x01
    6f14:	08 95       	ret
    6f16:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <__Month+0x18>
    6f1a:	90 91 24 01 	lds	r25, 0x0124	; 0x800124 <__Month+0x19>
    6f1e:	08 95       	ret

00006f20 <Days_Per_Month>:
    6f20:	cf 93       	push	r28
    6f22:	df 93       	push	r29
    6f24:	8c 30       	cpi	r24, 0x0C	; 12
    6f26:	91 05       	cpc	r25, r1
    6f28:	24 f0       	brlt	.+8      	; 0x6f32 <Days_Per_Month+0x12>
    6f2a:	6f 5f       	subi	r22, 0xFF	; 255
    6f2c:	7f 4f       	sbci	r23, 0xFF	; 255
    6f2e:	0c 97       	sbiw	r24, 0x0c	; 12
    6f30:	f9 cf       	rjmp	.-14     	; 0x6f24 <Days_Per_Month+0x4>
    6f32:	97 ff       	sbrs	r25, 7
    6f34:	04 c0       	rjmp	.+8      	; 0x6f3e <Days_Per_Month+0x1e>
    6f36:	61 50       	subi	r22, 0x01	; 1
    6f38:	71 09       	sbc	r23, r1
    6f3a:	0c 96       	adiw	r24, 0x0c	; 12
    6f3c:	fa cf       	rjmp	.-12     	; 0x6f32 <Days_Per_Month+0x12>
    6f3e:	fc 01       	movw	r30, r24
    6f40:	ee 0f       	add	r30, r30
    6f42:	ff 1f       	adc	r31, r31
    6f44:	e8 57       	subi	r30, 0x78	; 120
    6f46:	fc 4f       	sbci	r31, 0xFC	; 252
    6f48:	c0 81       	ld	r28, Z
    6f4a:	d1 81       	ldd	r29, Z+1	; 0x01
    6f4c:	01 97       	sbiw	r24, 0x01	; 1
    6f4e:	29 f4       	brne	.+10     	; 0x6f5a <Days_Per_Month+0x3a>
    6f50:	cb 01       	movw	r24, r22
    6f52:	c1 df       	rcall	.-126    	; 0x6ed6 <IS_Leap>
    6f54:	89 2b       	or	r24, r25
    6f56:	09 f0       	breq	.+2      	; 0x6f5a <Days_Per_Month+0x3a>
    6f58:	21 96       	adiw	r28, 0x01	; 1
    6f5a:	ce 01       	movw	r24, r28
    6f5c:	df 91       	pop	r29
    6f5e:	cf 91       	pop	r28
    6f60:	08 95       	ret

00006f62 <time_to_tm>:
    6f62:	a0 e0       	ldi	r26, 0x00	; 0
    6f64:	b0 e0       	ldi	r27, 0x00	; 0
    6f66:	e7 eb       	ldi	r30, 0xB7	; 183
    6f68:	f7 e3       	ldi	r31, 0x37	; 55
    6f6a:	0c 94 a6 e8 	jmp	0x1d14c	; 0x1d14c <__prologue_saves__+0x4>
    6f6e:	e8 01       	movw	r28, r16
    6f70:	e6 e1       	ldi	r30, 0x16	; 22
    6f72:	d8 01       	movw	r26, r16
    6f74:	1d 92       	st	X+, r1
    6f76:	ea 95       	dec	r30
    6f78:	e9 f7       	brne	.-6      	; 0x6f74 <time_to_tm+0x12>
    6f7a:	61 15       	cp	r22, r1
    6f7c:	bd e5       	ldi	r27, 0x5D	; 93
    6f7e:	7b 07       	cpc	r23, r27
    6f80:	bd ef       	ldi	r27, 0xFD	; 253
    6f82:	8b 07       	cpc	r24, r27
    6f84:	bf ef       	ldi	r27, 0xFF	; 255
    6f86:	9b 07       	cpc	r25, r27
    6f88:	08 f0       	brcs	.+2      	; 0x6f8c <time_to_tm+0x2a>
    6f8a:	c0 c0       	rjmp	.+384    	; 0x710c <time_to_tm+0x1aa>
    6f8c:	6b 01       	movw	r12, r22
    6f8e:	7c 01       	movw	r14, r24
    6f90:	c2 1a       	sub	r12, r18
    6f92:	d3 0a       	sbc	r13, r19
    6f94:	e4 0a       	sbc	r14, r20
    6f96:	f5 0a       	sbc	r15, r21
    6f98:	46 01       	movw	r8, r12
    6f9a:	57 01       	movw	r10, r14
    6f9c:	e0 e8       	ldi	r30, 0x80	; 128
    6f9e:	ce 16       	cp	r12, r30
    6fa0:	ee ea       	ldi	r30, 0xAE	; 174
    6fa2:	de 06       	cpc	r13, r30
    6fa4:	ee ef       	ldi	r30, 0xFE	; 254
    6fa6:	ee 06       	cpc	r14, r30
    6fa8:	ef ef       	ldi	r30, 0xFF	; 255
    6faa:	fe 06       	cpc	r15, r30
    6fac:	50 f0       	brcs	.+20     	; 0x6fc2 <time_to_tm+0x60>
    6fae:	80 e8       	ldi	r24, 0x80	; 128
    6fb0:	88 0e       	add	r8, r24
    6fb2:	81 e5       	ldi	r24, 0x51	; 81
    6fb4:	98 1e       	adc	r9, r24
    6fb6:	81 e0       	ldi	r24, 0x01	; 1
    6fb8:	a8 1e       	adc	r10, r24
    6fba:	b1 1c       	adc	r11, r1
    6fbc:	01 e0       	ldi	r16, 0x01	; 1
    6fbe:	10 e0       	ldi	r17, 0x00	; 0
    6fc0:	02 c0       	rjmp	.+4      	; 0x6fc6 <time_to_tm+0x64>
    6fc2:	00 e0       	ldi	r16, 0x00	; 0
    6fc4:	10 e0       	ldi	r17, 0x00	; 0
    6fc6:	8c e3       	ldi	r24, 0x3C	; 60
    6fc8:	48 2e       	mov	r4, r24
    6fca:	51 2c       	mov	r5, r1
    6fcc:	61 2c       	mov	r6, r1
    6fce:	71 2c       	mov	r7, r1
    6fd0:	c5 01       	movw	r24, r10
    6fd2:	b4 01       	movw	r22, r8
    6fd4:	a3 01       	movw	r20, r6
    6fd6:	92 01       	movw	r18, r4
    6fd8:	0e 94 37 e8 	call	0x1d06e	; 0x1d06e <__udivmodsi4>
    6fdc:	79 83       	std	Y+1, r23	; 0x01
    6fde:	68 83       	st	Y, r22
    6fe0:	ca 01       	movw	r24, r20
    6fe2:	b9 01       	movw	r22, r18
    6fe4:	a3 01       	movw	r20, r6
    6fe6:	92 01       	movw	r18, r4
    6fe8:	0e 94 37 e8 	call	0x1d06e	; 0x1d06e <__udivmodsi4>
    6fec:	7b 83       	std	Y+3, r23	; 0x03
    6fee:	6a 83       	std	Y+2, r22	; 0x02
    6ff0:	c5 01       	movw	r24, r10
    6ff2:	b4 01       	movw	r22, r8
    6ff4:	20 e1       	ldi	r18, 0x10	; 16
    6ff6:	3e e0       	ldi	r19, 0x0E	; 14
    6ff8:	40 e0       	ldi	r20, 0x00	; 0
    6ffa:	50 e0       	ldi	r21, 0x00	; 0
    6ffc:	0e 94 37 e8 	call	0x1d06e	; 0x1d06e <__udivmodsi4>
    7000:	ca 01       	movw	r24, r20
    7002:	b9 01       	movw	r22, r18
    7004:	28 e1       	ldi	r18, 0x18	; 24
    7006:	30 e0       	ldi	r19, 0x00	; 0
    7008:	40 e0       	ldi	r20, 0x00	; 0
    700a:	50 e0       	ldi	r21, 0x00	; 0
    700c:	0e 94 37 e8 	call	0x1d06e	; 0x1d06e <__udivmodsi4>
    7010:	7d 83       	std	Y+5, r23	; 0x05
    7012:	6c 83       	std	Y+4, r22	; 0x04
    7014:	01 15       	cp	r16, r1
    7016:	11 05       	cpc	r17, r1
    7018:	89 f0       	breq	.+34     	; 0x703c <time_to_tm+0xda>
    701a:	85 e4       	ldi	r24, 0x45	; 69
    701c:	90 e0       	ldi	r25, 0x00	; 0
    701e:	9b 87       	std	Y+11, r25	; 0x0b
    7020:	8a 87       	std	Y+10, r24	; 0x0a
    7022:	8b e0       	ldi	r24, 0x0B	; 11
    7024:	90 e0       	ldi	r25, 0x00	; 0
    7026:	99 87       	std	Y+9, r25	; 0x09
    7028:	88 87       	std	Y+8, r24	; 0x08
    702a:	8f e1       	ldi	r24, 0x1F	; 31
    702c:	90 e0       	ldi	r25, 0x00	; 0
    702e:	9f 83       	std	Y+7, r25	; 0x07
    7030:	8e 83       	std	Y+6, r24	; 0x06
    7032:	83 e0       	ldi	r24, 0x03	; 3
    7034:	90 e0       	ldi	r25, 0x00	; 0
    7036:	9d 87       	std	Y+13, r25	; 0x0d
    7038:	8c 87       	std	Y+12, r24	; 0x0c
    703a:	65 c0       	rjmp	.+202    	; 0x7106 <time_to_tm+0x1a4>
    703c:	c5 01       	movw	r24, r10
    703e:	b4 01       	movw	r22, r8
    7040:	20 e8       	ldi	r18, 0x80	; 128
    7042:	31 e5       	ldi	r19, 0x51	; 81
    7044:	41 e0       	ldi	r20, 0x01	; 1
    7046:	50 e0       	ldi	r21, 0x00	; 0
    7048:	0e 94 37 e8 	call	0x1d06e	; 0x1d06e <__udivmodsi4>
    704c:	49 01       	movw	r8, r18
    704e:	5a 01       	movw	r10, r20
    7050:	ca 01       	movw	r24, r20
    7052:	b9 01       	movw	r22, r18
    7054:	6c 5f       	subi	r22, 0xFC	; 252
    7056:	7f 4f       	sbci	r23, 0xFF	; 255
    7058:	8f 4f       	sbci	r24, 0xFF	; 255
    705a:	9f 4f       	sbci	r25, 0xFF	; 255
    705c:	27 e0       	ldi	r18, 0x07	; 7
    705e:	30 e0       	ldi	r19, 0x00	; 0
    7060:	40 e0       	ldi	r20, 0x00	; 0
    7062:	50 e0       	ldi	r21, 0x00	; 0
    7064:	0e 94 59 e8 	call	0x1d0b2	; 0x1d0b2 <__divmodsi4>
    7068:	7d 87       	std	Y+13, r23	; 0x0d
    706a:	6c 87       	std	Y+12, r22	; 0x0c
    706c:	02 eb       	ldi	r16, 0xB2	; 178
    706e:	17 e0       	ldi	r17, 0x07	; 7
    7070:	c8 01       	movw	r24, r16
    7072:	31 df       	rcall	.-414    	; 0x6ed6 <IS_Leap>
    7074:	00 97       	sbiw	r24, 0x00	; 0
    7076:	19 f4       	brne	.+6      	; 0x707e <time_to_tm+0x11c>
    7078:	4d e6       	ldi	r20, 0x6D	; 109
    707a:	51 e0       	ldi	r21, 0x01	; 1
    707c:	02 c0       	rjmp	.+4      	; 0x7082 <time_to_tm+0x120>
    707e:	4e e6       	ldi	r20, 0x6E	; 110
    7080:	51 e0       	ldi	r21, 0x01	; 1
    7082:	05 2e       	mov	r0, r21
    7084:	00 0c       	add	r0, r0
    7086:	66 0b       	sbc	r22, r22
    7088:	77 0b       	sbc	r23, r23
    708a:	84 16       	cp	r8, r20
    708c:	95 06       	cpc	r9, r21
    708e:	a6 06       	cpc	r10, r22
    7090:	b7 06       	cpc	r11, r23
    7092:	3c f0       	brlt	.+14     	; 0x70a2 <time_to_tm+0x140>
    7094:	0f 5f       	subi	r16, 0xFF	; 255
    7096:	1f 4f       	sbci	r17, 0xFF	; 255
    7098:	84 1a       	sub	r8, r20
    709a:	95 0a       	sbc	r9, r21
    709c:	a6 0a       	sbc	r10, r22
    709e:	b7 0a       	sbc	r11, r23
    70a0:	e7 cf       	rjmp	.-50     	; 0x7070 <time_to_tm+0x10e>
    70a2:	0c 56       	subi	r16, 0x6C	; 108
    70a4:	17 40       	sbci	r17, 0x07	; 7
    70a6:	1b 87       	std	Y+11, r17	; 0x0b
    70a8:	0a 87       	std	Y+10, r16	; 0x0a
    70aa:	9f 86       	std	Y+15, r9	; 0x0f
    70ac:	8e 86       	std	Y+14, r8	; 0x0e
    70ae:	e8 e8       	ldi	r30, 0x88	; 136
    70b0:	f3 e0       	ldi	r31, 0x03	; 3
    70b2:	20 e0       	ldi	r18, 0x00	; 0
    70b4:	30 e0       	ldi	r19, 0x00	; 0
    70b6:	18 14       	cp	r1, r8
    70b8:	19 04       	cpc	r1, r9
    70ba:	1a 04       	cpc	r1, r10
    70bc:	1b 04       	cpc	r1, r11
    70be:	e4 f4       	brge	.+56     	; 0x70f8 <time_to_tm+0x196>
    70c0:	2c 30       	cpi	r18, 0x0C	; 12
    70c2:	31 05       	cpc	r19, r1
    70c4:	c9 f0       	breq	.+50     	; 0x70f8 <time_to_tm+0x196>
    70c6:	41 91       	ld	r20, Z+
    70c8:	51 91       	ld	r21, Z+
    70ca:	21 30       	cpi	r18, 0x01	; 1
    70cc:	31 05       	cpc	r19, r1
    70ce:	21 f4       	brne	.+8      	; 0x70d8 <time_to_tm+0x176>
    70d0:	00 97       	sbiw	r24, 0x00	; 0
    70d2:	11 f0       	breq	.+4      	; 0x70d8 <time_to_tm+0x176>
    70d4:	4f 5f       	subi	r20, 0xFF	; 255
    70d6:	5f 4f       	sbci	r21, 0xFF	; 255
    70d8:	05 2e       	mov	r0, r21
    70da:	00 0c       	add	r0, r0
    70dc:	66 0b       	sbc	r22, r22
    70de:	77 0b       	sbc	r23, r23
    70e0:	84 16       	cp	r8, r20
    70e2:	95 06       	cpc	r9, r21
    70e4:	a6 06       	cpc	r10, r22
    70e6:	b7 06       	cpc	r11, r23
    70e8:	3c f0       	brlt	.+14     	; 0x70f8 <time_to_tm+0x196>
    70ea:	84 1a       	sub	r8, r20
    70ec:	95 0a       	sbc	r9, r21
    70ee:	a6 0a       	sbc	r10, r22
    70f0:	b7 0a       	sbc	r11, r23
    70f2:	2f 5f       	subi	r18, 0xFF	; 255
    70f4:	3f 4f       	sbci	r19, 0xFF	; 255
    70f6:	df cf       	rjmp	.-66     	; 0x70b6 <time_to_tm+0x154>
    70f8:	39 87       	std	Y+9, r19	; 0x09
    70fa:	28 87       	std	Y+8, r18	; 0x08
    70fc:	af ef       	ldi	r26, 0xFF	; 255
    70fe:	8a 1a       	sub	r8, r26
    7100:	9a 0a       	sbc	r9, r26
    7102:	9f 82       	std	Y+7, r9	; 0x07
    7104:	8e 82       	std	Y+6, r8	; 0x06
    7106:	b6 01       	movw	r22, r12
    7108:	c7 01       	movw	r24, r14
    710a:	04 c0       	rjmp	.+8      	; 0x7114 <time_to_tm+0x1b2>
    710c:	6f ef       	ldi	r22, 0xFF	; 255
    710e:	7f ef       	ldi	r23, 0xFF	; 255
    7110:	8f ef       	ldi	r24, 0xFF	; 255
    7112:	9f ef       	ldi	r25, 0xFF	; 255
    7114:	cd b7       	in	r28, 0x3d	; 61
    7116:	de b7       	in	r29, 0x3e	; 62
    7118:	e0 e1       	ldi	r30, 0x10	; 16
    711a:	0c 94 c2 e8 	jmp	0x1d184	; 0x1d184 <__epilogue_restores__+0x4>

0000711e <gmtime_r>:
    711e:	0f 93       	push	r16
    7120:	1f 93       	push	r17
    7122:	cf 93       	push	r28
    7124:	df 93       	push	r29
    7126:	eb 01       	movw	r28, r22
    7128:	fc 01       	movw	r30, r24
    712a:	60 81       	ld	r22, Z
    712c:	71 81       	ldd	r23, Z+1	; 0x01
    712e:	82 81       	ldd	r24, Z+2	; 0x02
    7130:	93 81       	ldd	r25, Z+3	; 0x03
    7132:	8e 01       	movw	r16, r28
    7134:	20 e0       	ldi	r18, 0x00	; 0
    7136:	30 e0       	ldi	r19, 0x00	; 0
    7138:	a9 01       	movw	r20, r18
    713a:	13 df       	rcall	.-474    	; 0x6f62 <time_to_tm>
    713c:	ce 01       	movw	r24, r28
    713e:	df 91       	pop	r29
    7140:	cf 91       	pop	r28
    7142:	1f 91       	pop	r17
    7144:	0f 91       	pop	r16
    7146:	08 95       	ret

00007148 <gmtime>:
    7148:	26 ec       	ldi	r18, 0xC6	; 198
    714a:	37 e1       	ldi	r19, 0x17	; 23
    714c:	30 93 dd 17 	sts	0x17DD, r19	; 0x8017dd <p.3681+0x1>
    7150:	20 93 dc 17 	sts	0x17DC, r18	; 0x8017dc <p.3681>
    7154:	b9 01       	movw	r22, r18
    7156:	e3 df       	rcall	.-58     	; 0x711e <gmtime_r>
    7158:	86 ec       	ldi	r24, 0xC6	; 198
    715a:	97 e1       	ldi	r25, 0x17	; 23
    715c:	08 95       	ret

0000715e <gettimezone>:
    715e:	e0 e7       	ldi	r30, 0x70	; 112
    7160:	fa e1       	ldi	r31, 0x1A	; 26
    7162:	20 81       	ld	r18, Z
    7164:	31 81       	ldd	r19, Z+1	; 0x01
    7166:	dc 01       	movw	r26, r24
    7168:	2d 93       	st	X+, r18
    716a:	3c 93       	st	X, r19
    716c:	22 81       	ldd	r18, Z+2	; 0x02
    716e:	33 81       	ldd	r19, Z+3	; 0x03
    7170:	fc 01       	movw	r30, r24
    7172:	33 83       	std	Z+3, r19	; 0x03
    7174:	22 83       	std	Z+2, r18	; 0x02
    7176:	80 e0       	ldi	r24, 0x00	; 0
    7178:	90 e0       	ldi	r25, 0x00	; 0
    717a:	08 95       	ret

0000717c <settimezone>:
    717c:	cf 93       	push	r28
    717e:	df 93       	push	r29
    7180:	ec 01       	movw	r28, r24
    7182:	28 81       	ld	r18, Y
    7184:	39 81       	ldd	r19, Y+1	; 0x01
    7186:	e0 e7       	ldi	r30, 0x70	; 112
    7188:	fa e1       	ldi	r31, 0x1A	; 26
    718a:	31 83       	std	Z+1, r19	; 0x01
    718c:	20 83       	st	Z, r18
    718e:	8a 81       	ldd	r24, Y+2	; 0x02
    7190:	9b 81       	ldd	r25, Y+3	; 0x03
    7192:	93 83       	std	Z+3, r25	; 0x03
    7194:	82 83       	std	Z+2, r24	; 0x02
    7196:	80 e0       	ldi	r24, 0x00	; 0
    7198:	90 e0       	ldi	r25, 0x00	; 0
    719a:	df 91       	pop	r29
    719c:	cf 91       	pop	r28
    719e:	08 95       	ret

000071a0 <gettimeofday>:
    71a0:	a8 e0       	ldi	r26, 0x08	; 8
    71a2:	b0 e0       	ldi	r27, 0x00	; 0
    71a4:	e6 ed       	ldi	r30, 0xD6	; 214
    71a6:	f8 e3       	ldi	r31, 0x38	; 56
    71a8:	0c 94 b0 e8 	jmp	0x1d160	; 0x1d160 <__prologue_saves__+0x18>
    71ac:	8c 01       	movw	r16, r24
    71ae:	7b 01       	movw	r14, r22
    71b0:	be 01       	movw	r22, r28
    71b2:	6f 5f       	subi	r22, 0xFF	; 255
    71b4:	7f 4f       	sbci	r23, 0xFF	; 255
    71b6:	80 e0       	ldi	r24, 0x00	; 0
    71b8:	90 e0       	ldi	r25, 0x00	; 0
    71ba:	dc db       	rcall	.-2120   	; 0x6974 <clock_gettime>
    71bc:	89 81       	ldd	r24, Y+1	; 0x01
    71be:	9a 81       	ldd	r25, Y+2	; 0x02
    71c0:	ab 81       	ldd	r26, Y+3	; 0x03
    71c2:	bc 81       	ldd	r27, Y+4	; 0x04
    71c4:	f8 01       	movw	r30, r16
    71c6:	80 83       	st	Z, r24
    71c8:	91 83       	std	Z+1, r25	; 0x01
    71ca:	a2 83       	std	Z+2, r26	; 0x02
    71cc:	b3 83       	std	Z+3, r27	; 0x03
    71ce:	6d 81       	ldd	r22, Y+5	; 0x05
    71d0:	7e 81       	ldd	r23, Y+6	; 0x06
    71d2:	8f 81       	ldd	r24, Y+7	; 0x07
    71d4:	98 85       	ldd	r25, Y+8	; 0x08
    71d6:	28 ee       	ldi	r18, 0xE8	; 232
    71d8:	33 e0       	ldi	r19, 0x03	; 3
    71da:	40 e0       	ldi	r20, 0x00	; 0
    71dc:	50 e0       	ldi	r21, 0x00	; 0
    71de:	0e 94 59 e8 	call	0x1d0b2	; 0x1d0b2 <__divmodsi4>
    71e2:	f8 01       	movw	r30, r16
    71e4:	24 83       	std	Z+4, r18	; 0x04
    71e6:	35 83       	std	Z+5, r19	; 0x05
    71e8:	46 83       	std	Z+6, r20	; 0x06
    71ea:	57 83       	std	Z+7, r21	; 0x07
    71ec:	c7 01       	movw	r24, r14
    71ee:	b7 df       	rcall	.-146    	; 0x715e <gettimezone>
    71f0:	80 e0       	ldi	r24, 0x00	; 0
    71f2:	90 e0       	ldi	r25, 0x00	; 0
    71f4:	28 96       	adiw	r28, 0x08	; 8
    71f6:	e6 e0       	ldi	r30, 0x06	; 6
    71f8:	0c 94 cc e8 	jmp	0x1d198	; 0x1d198 <__epilogue_restores__+0x18>

000071fc <time>:
    71fc:	cf 93       	push	r28
    71fe:	df 93       	push	r29
    7200:	ec 01       	movw	r28, r24
    7202:	68 ea       	ldi	r22, 0xA8	; 168
    7204:	77 e1       	ldi	r23, 0x17	; 23
    7206:	80 e0       	ldi	r24, 0x00	; 0
    7208:	90 e0       	ldi	r25, 0x00	; 0
    720a:	b4 db       	rcall	.-2200   	; 0x6974 <clock_gettime>
    720c:	20 97       	sbiw	r28, 0x00	; 0
    720e:	61 f0       	breq	.+24     	; 0x7228 <time+0x2c>
    7210:	80 91 a8 17 	lds	r24, 0x17A8	; 0x8017a8 <ts.3759>
    7214:	90 91 a9 17 	lds	r25, 0x17A9	; 0x8017a9 <ts.3759+0x1>
    7218:	a0 91 aa 17 	lds	r26, 0x17AA	; 0x8017aa <ts.3759+0x2>
    721c:	b0 91 ab 17 	lds	r27, 0x17AB	; 0x8017ab <ts.3759+0x3>
    7220:	88 83       	st	Y, r24
    7222:	99 83       	std	Y+1, r25	; 0x01
    7224:	aa 83       	std	Y+2, r26	; 0x02
    7226:	bb 83       	std	Y+3, r27	; 0x03
    7228:	60 91 a8 17 	lds	r22, 0x17A8	; 0x8017a8 <ts.3759>
    722c:	70 91 a9 17 	lds	r23, 0x17A9	; 0x8017a9 <ts.3759+0x1>
    7230:	80 91 aa 17 	lds	r24, 0x17AA	; 0x8017aa <ts.3759+0x2>
    7234:	90 91 ab 17 	lds	r25, 0x17AB	; 0x8017ab <ts.3759+0x3>
    7238:	df 91       	pop	r29
    723a:	cf 91       	pop	r28
    723c:	08 95       	ret

0000723e <is_dst>:
    723e:	cf 92       	push	r12
    7240:	df 92       	push	r13
    7242:	ef 92       	push	r14
    7244:	ff 92       	push	r15
    7246:	6b 01       	movw	r12, r22
    7248:	7c 01       	movw	r14, r24
    724a:	05 d4       	rcall	.+2058   	; 0x7a56 <set_dst>
    724c:	80 91 74 1a 	lds	r24, 0x1A74	; 0x801a74 <dst>
    7250:	90 91 75 1a 	lds	r25, 0x1A75	; 0x801a75 <dst+0x1>
    7254:	a0 91 76 1a 	lds	r26, 0x1A76	; 0x801a76 <dst+0x2>
    7258:	b0 91 77 1a 	lds	r27, 0x1A77	; 0x801a77 <dst+0x3>
    725c:	c8 16       	cp	r12, r24
    725e:	d9 06       	cpc	r13, r25
    7260:	ea 06       	cpc	r14, r26
    7262:	fb 06       	cpc	r15, r27
    7264:	88 f0       	brcs	.+34     	; 0x7288 <is_dst+0x4a>
    7266:	81 e0       	ldi	r24, 0x01	; 1
    7268:	90 e0       	ldi	r25, 0x00	; 0
    726a:	40 91 78 1a 	lds	r20, 0x1A78	; 0x801a78 <dst+0x4>
    726e:	50 91 79 1a 	lds	r21, 0x1A79	; 0x801a79 <dst+0x5>
    7272:	60 91 7a 1a 	lds	r22, 0x1A7A	; 0x801a7a <dst+0x6>
    7276:	70 91 7b 1a 	lds	r23, 0x1A7B	; 0x801a7b <dst+0x7>
    727a:	4c 15       	cp	r20, r12
    727c:	5d 05       	cpc	r21, r13
    727e:	6e 05       	cpc	r22, r14
    7280:	7f 05       	cpc	r23, r15
    7282:	20 f4       	brcc	.+8      	; 0x728c <is_dst+0x4e>
    7284:	80 e0       	ldi	r24, 0x00	; 0
    7286:	02 c0       	rjmp	.+4      	; 0x728c <is_dst+0x4e>
    7288:	80 e0       	ldi	r24, 0x00	; 0
    728a:	90 e0       	ldi	r25, 0x00	; 0
    728c:	ff 90       	pop	r15
    728e:	ef 90       	pop	r14
    7290:	df 90       	pop	r13
    7292:	cf 90       	pop	r12
    7294:	08 95       	ret

00007296 <localtime_r>:
    7296:	4f 92       	push	r4
    7298:	5f 92       	push	r5
    729a:	6f 92       	push	r6
    729c:	7f 92       	push	r7
    729e:	af 92       	push	r10
    72a0:	bf 92       	push	r11
    72a2:	cf 92       	push	r12
    72a4:	df 92       	push	r13
    72a6:	ef 92       	push	r14
    72a8:	ff 92       	push	r15
    72aa:	0f 93       	push	r16
    72ac:	1f 93       	push	r17
    72ae:	cf 93       	push	r28
    72b0:	df 93       	push	r29
    72b2:	00 d0       	rcall	.+0      	; 0x72b4 <localtime_r+0x1e>
    72b4:	00 d0       	rcall	.+0      	; 0x72b6 <localtime_r+0x20>
    72b6:	cd b7       	in	r28, 0x3d	; 61
    72b8:	de b7       	in	r29, 0x3e	; 62
    72ba:	5b 01       	movw	r10, r22
    72bc:	fc 01       	movw	r30, r24
    72be:	40 80       	ld	r4, Z
    72c0:	51 80       	ldd	r5, Z+1	; 0x01
    72c2:	62 80       	ldd	r6, Z+2	; 0x02
    72c4:	73 80       	ldd	r7, Z+3	; 0x03
    72c6:	ce 01       	movw	r24, r28
    72c8:	01 96       	adiw	r24, 0x01	; 1
    72ca:	49 df       	rcall	.-366    	; 0x715e <gettimezone>
    72cc:	a9 81       	ldd	r26, Y+1	; 0x01
    72ce:	ba 81       	ldd	r27, Y+2	; 0x02
    72d0:	2c e3       	ldi	r18, 0x3C	; 60
    72d2:	30 e0       	ldi	r19, 0x00	; 0
    72d4:	0e 94 7e e8 	call	0x1d0fc	; 0x1d0fc <__usmulhisi3>
    72d8:	6b 01       	movw	r12, r22
    72da:	7c 01       	movw	r14, r24
    72dc:	c3 01       	movw	r24, r6
    72de:	b2 01       	movw	r22, r4
    72e0:	6c 19       	sub	r22, r12
    72e2:	7d 09       	sbc	r23, r13
    72e4:	8e 09       	sbc	r24, r14
    72e6:	9f 09       	sbc	r25, r15
    72e8:	aa df       	rcall	.-172    	; 0x723e <is_dst>
    72ea:	89 2b       	or	r24, r25
    72ec:	31 f0       	breq	.+12     	; 0x72fa <localtime_r+0x64>
    72ee:	f0 e1       	ldi	r31, 0x10	; 16
    72f0:	cf 1a       	sub	r12, r31
    72f2:	fe e0       	ldi	r31, 0x0E	; 14
    72f4:	df 0a       	sbc	r13, r31
    72f6:	e1 08       	sbc	r14, r1
    72f8:	f1 08       	sbc	r15, r1
    72fa:	85 01       	movw	r16, r10
    72fc:	a7 01       	movw	r20, r14
    72fe:	96 01       	movw	r18, r12
    7300:	c3 01       	movw	r24, r6
    7302:	b2 01       	movw	r22, r4
    7304:	2e de       	rcall	.-932    	; 0x6f62 <time_to_tm>
    7306:	c5 01       	movw	r24, r10
    7308:	0f 90       	pop	r0
    730a:	0f 90       	pop	r0
    730c:	0f 90       	pop	r0
    730e:	0f 90       	pop	r0
    7310:	df 91       	pop	r29
    7312:	cf 91       	pop	r28
    7314:	1f 91       	pop	r17
    7316:	0f 91       	pop	r16
    7318:	ff 90       	pop	r15
    731a:	ef 90       	pop	r14
    731c:	df 90       	pop	r13
    731e:	cf 90       	pop	r12
    7320:	bf 90       	pop	r11
    7322:	af 90       	pop	r10
    7324:	7f 90       	pop	r7
    7326:	6f 90       	pop	r6
    7328:	5f 90       	pop	r5
    732a:	4f 90       	pop	r4
    732c:	08 95       	ret

0000732e <localtime>:
    732e:	60 eb       	ldi	r22, 0xB0	; 176
    7330:	77 e1       	ldi	r23, 0x17	; 23
    7332:	b1 cf       	rjmp	.-158    	; 0x7296 <localtime_r>
    7334:	08 95       	ret

00007336 <normalize>:
    7336:	aa e0       	ldi	r26, 0x0A	; 10
    7338:	b0 e0       	ldi	r27, 0x00	; 0
    733a:	e1 ea       	ldi	r30, 0xA1	; 161
    733c:	f9 e3       	ldi	r31, 0x39	; 57
    733e:	0c 94 a4 e8 	jmp	0x1d148	; 0x1d148 <__prologue_saves__>
    7342:	7c 01       	movw	r14, r24
    7344:	7a 87       	std	Y+10, r23	; 0x0a
    7346:	69 87       	std	Y+9, r22	; 0x09
    7348:	f7 01       	movw	r30, r14
    734a:	80 81       	ld	r24, Z
    734c:	91 81       	ldd	r25, Z+1	; 0x01
    734e:	8c 33       	cpi	r24, 0x3C	; 60
    7350:	91 05       	cpc	r25, r1
    7352:	5c f0       	brlt	.+22     	; 0x736a <normalize+0x34>
    7354:	f7 01       	movw	r30, r14
    7356:	22 81       	ldd	r18, Z+2	; 0x02
    7358:	33 81       	ldd	r19, Z+3	; 0x03
    735a:	2f 5f       	subi	r18, 0xFF	; 255
    735c:	3f 4f       	sbci	r19, 0xFF	; 255
    735e:	33 83       	std	Z+3, r19	; 0x03
    7360:	22 83       	std	Z+2, r18	; 0x02
    7362:	cc 97       	sbiw	r24, 0x3c	; 60
    7364:	91 83       	std	Z+1, r25	; 0x01
    7366:	80 83       	st	Z, r24
    7368:	ef cf       	rjmp	.-34     	; 0x7348 <normalize+0x12>
    736a:	f7 01       	movw	r30, r14
    736c:	01 90       	ld	r0, Z+
    736e:	f0 81       	ld	r31, Z
    7370:	e0 2d       	mov	r30, r0
    7372:	fe 83       	std	Y+6, r31	; 0x06
    7374:	ed 83       	std	Y+5, r30	; 0x05
    7376:	f7 ff       	sbrs	r31, 7
    7378:	0d c0       	rjmp	.+26     	; 0x7394 <normalize+0x5e>
    737a:	f7 01       	movw	r30, r14
    737c:	82 81       	ldd	r24, Z+2	; 0x02
    737e:	93 81       	ldd	r25, Z+3	; 0x03
    7380:	01 97       	sbiw	r24, 0x01	; 1
    7382:	93 83       	std	Z+3, r25	; 0x03
    7384:	82 83       	std	Z+2, r24	; 0x02
    7386:	6d 81       	ldd	r22, Y+5	; 0x05
    7388:	7e 81       	ldd	r23, Y+6	; 0x06
    738a:	64 5c       	subi	r22, 0xC4	; 196
    738c:	7f 4f       	sbci	r23, 0xFF	; 255
    738e:	71 83       	std	Z+1, r23	; 0x01
    7390:	60 83       	st	Z, r22
    7392:	eb cf       	rjmp	.-42     	; 0x736a <normalize+0x34>
    7394:	f7 01       	movw	r30, r14
    7396:	82 81       	ldd	r24, Z+2	; 0x02
    7398:	93 81       	ldd	r25, Z+3	; 0x03
    739a:	8c 33       	cpi	r24, 0x3C	; 60
    739c:	91 05       	cpc	r25, r1
    739e:	5c f0       	brlt	.+22     	; 0x73b6 <normalize+0x80>
    73a0:	f7 01       	movw	r30, r14
    73a2:	24 81       	ldd	r18, Z+4	; 0x04
    73a4:	35 81       	ldd	r19, Z+5	; 0x05
    73a6:	2f 5f       	subi	r18, 0xFF	; 255
    73a8:	3f 4f       	sbci	r19, 0xFF	; 255
    73aa:	35 83       	std	Z+5, r19	; 0x05
    73ac:	24 83       	std	Z+4, r18	; 0x04
    73ae:	cc 97       	sbiw	r24, 0x3c	; 60
    73b0:	93 83       	std	Z+3, r25	; 0x03
    73b2:	82 83       	std	Z+2, r24	; 0x02
    73b4:	ef cf       	rjmp	.-34     	; 0x7394 <normalize+0x5e>
    73b6:	f7 01       	movw	r30, r14
    73b8:	22 80       	ldd	r2, Z+2	; 0x02
    73ba:	33 80       	ldd	r3, Z+3	; 0x03
    73bc:	37 fe       	sbrs	r3, 7
    73be:	0d c0       	rjmp	.+26     	; 0x73da <normalize+0xa4>
    73c0:	f7 01       	movw	r30, r14
    73c2:	84 81       	ldd	r24, Z+4	; 0x04
    73c4:	95 81       	ldd	r25, Z+5	; 0x05
    73c6:	01 97       	sbiw	r24, 0x01	; 1
    73c8:	95 83       	std	Z+5, r25	; 0x05
    73ca:	84 83       	std	Z+4, r24	; 0x04
    73cc:	fc e3       	ldi	r31, 0x3C	; 60
    73ce:	2f 0e       	add	r2, r31
    73d0:	31 1c       	adc	r3, r1
    73d2:	f7 01       	movw	r30, r14
    73d4:	33 82       	std	Z+3, r3	; 0x03
    73d6:	22 82       	std	Z+2, r2	; 0x02
    73d8:	ee cf       	rjmp	.-36     	; 0x73b6 <normalize+0x80>
    73da:	f7 01       	movw	r30, r14
    73dc:	84 81       	ldd	r24, Z+4	; 0x04
    73de:	95 81       	ldd	r25, Z+5	; 0x05
    73e0:	88 31       	cpi	r24, 0x18	; 24
    73e2:	91 05       	cpc	r25, r1
    73e4:	5c f0       	brlt	.+22     	; 0x73fc <normalize+0xc6>
    73e6:	f7 01       	movw	r30, r14
    73e8:	26 81       	ldd	r18, Z+6	; 0x06
    73ea:	37 81       	ldd	r19, Z+7	; 0x07
    73ec:	2f 5f       	subi	r18, 0xFF	; 255
    73ee:	3f 4f       	sbci	r19, 0xFF	; 255
    73f0:	37 83       	std	Z+7, r19	; 0x07
    73f2:	26 83       	std	Z+6, r18	; 0x06
    73f4:	48 97       	sbiw	r24, 0x18	; 24
    73f6:	95 83       	std	Z+5, r25	; 0x05
    73f8:	84 83       	std	Z+4, r24	; 0x04
    73fa:	ef cf       	rjmp	.-34     	; 0x73da <normalize+0xa4>
    73fc:	f7 01       	movw	r30, r14
    73fe:	04 81       	ldd	r16, Z+4	; 0x04
    7400:	15 81       	ldd	r17, Z+5	; 0x05
    7402:	17 ff       	sbrs	r17, 7
    7404:	0b c0       	rjmp	.+22     	; 0x741c <normalize+0xe6>
    7406:	f7 01       	movw	r30, r14
    7408:	86 81       	ldd	r24, Z+6	; 0x06
    740a:	97 81       	ldd	r25, Z+7	; 0x07
    740c:	01 97       	sbiw	r24, 0x01	; 1
    740e:	97 83       	std	Z+7, r25	; 0x07
    7410:	86 83       	std	Z+6, r24	; 0x06
    7412:	08 5e       	subi	r16, 0xE8	; 232
    7414:	1f 4f       	sbci	r17, 0xFF	; 255
    7416:	15 83       	std	Z+5, r17	; 0x05
    7418:	04 83       	std	Z+4, r16	; 0x04
    741a:	f0 cf       	rjmp	.-32     	; 0x73fc <normalize+0xc6>
    741c:	f7 01       	movw	r30, r14
    741e:	80 85       	ldd	r24, Z+8	; 0x08
    7420:	91 85       	ldd	r25, Z+9	; 0x09
    7422:	8c 30       	cpi	r24, 0x0C	; 12
    7424:	91 05       	cpc	r25, r1
    7426:	5c f0       	brlt	.+22     	; 0x743e <normalize+0x108>
    7428:	f7 01       	movw	r30, r14
    742a:	22 85       	ldd	r18, Z+10	; 0x0a
    742c:	33 85       	ldd	r19, Z+11	; 0x0b
    742e:	2f 5f       	subi	r18, 0xFF	; 255
    7430:	3f 4f       	sbci	r19, 0xFF	; 255
    7432:	33 87       	std	Z+11, r19	; 0x0b
    7434:	22 87       	std	Z+10, r18	; 0x0a
    7436:	0c 97       	sbiw	r24, 0x0c	; 12
    7438:	91 87       	std	Z+9, r25	; 0x09
    743a:	80 87       	std	Z+8, r24	; 0x08
    743c:	ef cf       	rjmp	.-34     	; 0x741c <normalize+0xe6>
    743e:	f7 01       	movw	r30, r14
    7440:	80 85       	ldd	r24, Z+8	; 0x08
    7442:	91 85       	ldd	r25, Z+9	; 0x09
    7444:	97 ff       	sbrs	r25, 7
    7446:	2d c0       	rjmp	.+90     	; 0x74a2 <normalize+0x16c>
    7448:	f7 01       	movw	r30, r14
    744a:	22 85       	ldd	r18, Z+10	; 0x0a
    744c:	33 85       	ldd	r19, Z+11	; 0x0b
    744e:	21 50       	subi	r18, 0x01	; 1
    7450:	31 09       	sbc	r19, r1
    7452:	33 87       	std	Z+11, r19	; 0x0b
    7454:	22 87       	std	Z+10, r18	; 0x0a
    7456:	0c 96       	adiw	r24, 0x0c	; 12
    7458:	91 87       	std	Z+9, r25	; 0x09
    745a:	80 87       	std	Z+8, r24	; 0x08
    745c:	f0 cf       	rjmp	.-32     	; 0x743e <normalize+0x108>
    745e:	f7 01       	movw	r30, r14
    7460:	c6 80       	ldd	r12, Z+6	; 0x06
    7462:	d7 80       	ldd	r13, Z+7	; 0x07
    7464:	a0 84       	ldd	r10, Z+8	; 0x08
    7466:	b1 84       	ldd	r11, Z+9	; 0x09
    7468:	b4 01       	movw	r22, r8
    746a:	c5 01       	movw	r24, r10
    746c:	59 dd       	rcall	.-1358   	; 0x6f20 <Days_Per_Month>
    746e:	8c 15       	cp	r24, r12
    7470:	9d 05       	cpc	r25, r13
    7472:	84 f5       	brge	.+96     	; 0x74d4 <normalize+0x19e>
    7474:	c8 1a       	sub	r12, r24
    7476:	d9 0a       	sbc	r13, r25
    7478:	f7 01       	movw	r30, r14
    747a:	d7 82       	std	Z+7, r13	; 0x07
    747c:	c6 82       	std	Z+6, r12	; 0x06
    747e:	c5 01       	movw	r24, r10
    7480:	01 96       	adiw	r24, 0x01	; 1
    7482:	91 87       	std	Z+9, r25	; 0x09
    7484:	80 87       	std	Z+8, r24	; 0x08
    7486:	0c 97       	sbiw	r24, 0x0c	; 12
    7488:	54 f3       	brlt	.-44     	; 0x745e <normalize+0x128>
    748a:	fb e0       	ldi	r31, 0x0B	; 11
    748c:	af 1a       	sub	r10, r31
    748e:	b1 08       	sbc	r11, r1
    7490:	f7 01       	movw	r30, r14
    7492:	b1 86       	std	Z+9, r11	; 0x09
    7494:	a0 86       	std	Z+8, r10	; 0x08
    7496:	ff ef       	ldi	r31, 0xFF	; 255
    7498:	8f 1a       	sub	r8, r31
    749a:	9f 0a       	sbc	r9, r31
    749c:	f7 01       	movw	r30, r14
    749e:	93 86       	std	Z+11, r9	; 0x0b
    74a0:	82 86       	std	Z+10, r8	; 0x0a
    74a2:	f7 01       	movw	r30, r14
    74a4:	82 84       	ldd	r8, Z+10	; 0x0a
    74a6:	93 84       	ldd	r9, Z+11	; 0x0b
    74a8:	da cf       	rjmp	.-76     	; 0x745e <normalize+0x128>
    74aa:	f7 01       	movw	r30, r14
    74ac:	80 85       	ldd	r24, Z+8	; 0x08
    74ae:	91 85       	ldd	r25, Z+9	; 0x09
    74b0:	9c 01       	movw	r18, r24
    74b2:	21 50       	subi	r18, 0x01	; 1
    74b4:	31 09       	sbc	r19, r1
    74b6:	37 fd       	sbrc	r19, 7
    74b8:	16 c0       	rjmp	.+44     	; 0x74e6 <normalize+0x1b0>
    74ba:	31 87       	std	Z+9, r19	; 0x09
    74bc:	20 87       	std	Z+8, r18	; 0x08
    74be:	f7 01       	movw	r30, r14
    74c0:	62 85       	ldd	r22, Z+10	; 0x0a
    74c2:	73 85       	ldd	r23, Z+11	; 0x0b
    74c4:	80 85       	ldd	r24, Z+8	; 0x08
    74c6:	91 85       	ldd	r25, Z+9	; 0x09
    74c8:	2b dd       	rcall	.-1450   	; 0x6f20 <Days_Per_Month>
    74ca:	88 0d       	add	r24, r8
    74cc:	99 1d       	adc	r25, r9
    74ce:	f7 01       	movw	r30, r14
    74d0:	97 83       	std	Z+7, r25	; 0x07
    74d2:	86 83       	std	Z+6, r24	; 0x06
    74d4:	f7 01       	movw	r30, r14
    74d6:	86 80       	ldd	r8, Z+6	; 0x06
    74d8:	97 80       	ldd	r9, Z+7	; 0x07
    74da:	a2 84       	ldd	r10, Z+10	; 0x0a
    74dc:	b3 84       	ldd	r11, Z+11	; 0x0b
    74de:	18 14       	cp	r1, r8
    74e0:	19 04       	cpc	r1, r9
    74e2:	1c f7       	brge	.-58     	; 0x74aa <normalize+0x174>
    74e4:	0b c0       	rjmp	.+22     	; 0x74fc <normalize+0x1c6>
    74e6:	0b 96       	adiw	r24, 0x0b	; 11
    74e8:	f7 01       	movw	r30, r14
    74ea:	91 87       	std	Z+9, r25	; 0x09
    74ec:	80 87       	std	Z+8, r24	; 0x08
    74ee:	f1 e0       	ldi	r31, 0x01	; 1
    74f0:	af 1a       	sub	r10, r31
    74f2:	b1 08       	sbc	r11, r1
    74f4:	f7 01       	movw	r30, r14
    74f6:	b3 86       	std	Z+11, r11	; 0x0b
    74f8:	a2 86       	std	Z+10, r10	; 0x0a
    74fa:	e1 cf       	rjmp	.-62     	; 0x74be <normalize+0x188>
    74fc:	a5 01       	movw	r20, r10
    74fe:	44 59       	subi	r20, 0x94	; 148
    7500:	58 4f       	sbci	r21, 0xF8	; 248
    7502:	58 87       	std	Y+8, r21	; 0x08
    7504:	4f 83       	std	Y+7, r20	; 0x07
    7506:	35 01       	movw	r6, r10
    7508:	56 e4       	ldi	r21, 0x46	; 70
    750a:	65 1a       	sub	r6, r21
    750c:	71 08       	sbc	r7, r1
    750e:	89 e8       	ldi	r24, 0x89	; 137
    7510:	68 16       	cp	r6, r24
    7512:	71 04       	cpc	r7, r1
    7514:	08 f0       	brcs	.+2      	; 0x7518 <normalize+0x1e2>
    7516:	9b c0       	rjmp	.+310    	; 0x764e <normalize+0x318>
    7518:	c0 84       	ldd	r12, Z+8	; 0x08
    751a:	d1 84       	ldd	r13, Z+9	; 0x09
    751c:	9c e0       	ldi	r25, 0x0C	; 12
    751e:	c9 16       	cp	r12, r25
    7520:	d1 04       	cpc	r13, r1
    7522:	08 f0       	brcs	.+2      	; 0x7526 <normalize+0x1f0>
    7524:	94 c0       	rjmp	.+296    	; 0x764e <normalize+0x318>
    7526:	24 01       	movw	r4, r8
    7528:	e1 e0       	ldi	r30, 0x01	; 1
    752a:	4e 1a       	sub	r4, r30
    752c:	51 08       	sbc	r5, r1
    752e:	6f 81       	ldd	r22, Y+7	; 0x07
    7530:	78 85       	ldd	r23, Y+8	; 0x08
    7532:	c6 01       	movw	r24, r12
    7534:	f5 dc       	rcall	.-1558   	; 0x6f20 <Days_Per_Month>
    7536:	48 16       	cp	r4, r24
    7538:	59 06       	cpc	r5, r25
    753a:	0c f0       	brlt	.+2      	; 0x753e <normalize+0x208>
    753c:	88 c0       	rjmp	.+272    	; 0x764e <normalize+0x318>
    753e:	08 31       	cpi	r16, 0x18	; 24
    7540:	11 05       	cpc	r17, r1
    7542:	0c f0       	brlt	.+2      	; 0x7546 <normalize+0x210>
    7544:	84 c0       	rjmp	.+264    	; 0x764e <normalize+0x318>
    7546:	fc e3       	ldi	r31, 0x3C	; 60
    7548:	2f 16       	cp	r2, r31
    754a:	31 04       	cpc	r3, r1
    754c:	0c f0       	brlt	.+2      	; 0x7550 <normalize+0x21a>
    754e:	7f c0       	rjmp	.+254    	; 0x764e <normalize+0x318>
    7550:	4d 81       	ldd	r20, Y+5	; 0x05
    7552:	5e 81       	ldd	r21, Y+6	; 0x06
    7554:	4c 33       	cpi	r20, 0x3C	; 60
    7556:	51 05       	cpc	r21, r1
    7558:	0c f0       	brlt	.+2      	; 0x755c <normalize+0x226>
    755a:	79 c0       	rjmp	.+242    	; 0x764e <normalize+0x318>
    755c:	2d e6       	ldi	r18, 0x6D	; 109
    755e:	31 e0       	ldi	r19, 0x01	; 1
    7560:	d3 01       	movw	r26, r6
    7562:	0e 94 7e e8 	call	0x1d0fc	; 0x1d0fc <__usmulhisi3>
    7566:	f6 01       	movw	r30, r12
    7568:	ee 0f       	add	r30, r30
    756a:	ff 1f       	adc	r31, r31
    756c:	e0 56       	subi	r30, 0x60	; 96
    756e:	fc 4f       	sbci	r31, 0xFC	; 252
    7570:	20 81       	ld	r18, Z
    7572:	31 81       	ldd	r19, Z+1	; 0x01
    7574:	dc 01       	movw	r26, r24
    7576:	cb 01       	movw	r24, r22
    7578:	82 0f       	add	r24, r18
    757a:	93 1f       	adc	r25, r19
    757c:	a1 1d       	adc	r26, r1
    757e:	b1 1d       	adc	r27, r1
    7580:	05 2c       	mov	r0, r5
    7582:	00 0c       	add	r0, r0
    7584:	66 08       	sbc	r6, r6
    7586:	77 08       	sbc	r7, r7
    7588:	48 0e       	add	r4, r24
    758a:	59 1e       	adc	r5, r25
    758c:	6a 1e       	adc	r6, r26
    758e:	7b 1e       	adc	r7, r27
    7590:	1a 14       	cp	r1, r10
    7592:	1b 04       	cpc	r1, r11
    7594:	1c f4       	brge	.+6      	; 0x759c <normalize+0x266>
    7596:	51 e0       	ldi	r21, 0x01	; 1
    7598:	a5 1a       	sub	r10, r21
    759a:	b1 08       	sbc	r11, r1
    759c:	45 01       	movw	r8, r10
    759e:	95 94       	asr	r9
    75a0:	87 94       	ror	r8
    75a2:	95 94       	asr	r9
    75a4:	87 94       	ror	r8
    75a6:	88 ec       	ldi	r24, 0xC8	; 200
    75a8:	a8 16       	cp	r10, r24
    75aa:	b1 04       	cpc	r11, r1
    75ac:	1c f0       	brlt	.+6      	; 0x75b4 <normalize+0x27e>
    75ae:	91 e0       	ldi	r25, 0x01	; 1
    75b0:	89 1a       	sub	r8, r25
    75b2:	91 08       	sbc	r9, r1
    75b4:	09 2c       	mov	r0, r9
    75b6:	00 0c       	add	r0, r0
    75b8:	aa 08       	sbc	r10, r10
    75ba:	bb 08       	sbc	r11, r11
    75bc:	84 0c       	add	r8, r4
    75be:	95 1c       	adc	r9, r5
    75c0:	a6 1c       	adc	r10, r6
    75c2:	b7 1c       	adc	r11, r7
    75c4:	24 01       	movw	r4, r8
    75c6:	35 01       	movw	r6, r10
    75c8:	e1 e1       	ldi	r30, 0x11	; 17
    75ca:	4e 1a       	sub	r4, r30
    75cc:	51 08       	sbc	r5, r1
    75ce:	61 08       	sbc	r6, r1
    75d0:	71 08       	sbc	r7, r1
    75d2:	f2 e0       	ldi	r31, 0x02	; 2
    75d4:	cf 16       	cp	r12, r31
    75d6:	d1 04       	cpc	r13, r1
    75d8:	64 f0       	brlt	.+24     	; 0x75f2 <normalize+0x2bc>
    75da:	8f 81       	ldd	r24, Y+7	; 0x07
    75dc:	98 85       	ldd	r25, Y+8	; 0x08
    75de:	7b dc       	rcall	.-1802   	; 0x6ed6 <IS_Leap>
    75e0:	89 2b       	or	r24, r25
    75e2:	39 f0       	breq	.+14     	; 0x75f2 <normalize+0x2bc>
    75e4:	24 01       	movw	r4, r8
    75e6:	35 01       	movw	r6, r10
    75e8:	40 e1       	ldi	r20, 0x10	; 16
    75ea:	44 1a       	sub	r4, r20
    75ec:	51 08       	sbc	r5, r1
    75ee:	61 08       	sbc	r6, r1
    75f0:	71 08       	sbc	r7, r1
    75f2:	a8 e1       	ldi	r26, 0x18	; 24
    75f4:	b0 e0       	ldi	r27, 0x00	; 0
    75f6:	a3 01       	movw	r20, r6
    75f8:	92 01       	movw	r18, r4
    75fa:	0e 94 84 e8 	call	0x1d108	; 0x1d108 <__muluhisi3>
    75fe:	01 2e       	mov	r0, r17
    7600:	00 0c       	add	r0, r0
    7602:	22 0b       	sbc	r18, r18
    7604:	33 0b       	sbc	r19, r19
    7606:	a9 01       	movw	r20, r18
    7608:	98 01       	movw	r18, r16
    760a:	26 0f       	add	r18, r22
    760c:	37 1f       	adc	r19, r23
    760e:	48 1f       	adc	r20, r24
    7610:	59 1f       	adc	r21, r25
    7612:	ac e3       	ldi	r26, 0x3C	; 60
    7614:	b0 e0       	ldi	r27, 0x00	; 0
    7616:	0e 94 84 e8 	call	0x1d108	; 0x1d108 <__muluhisi3>
    761a:	81 01       	movw	r16, r2
    761c:	03 2c       	mov	r0, r3
    761e:	00 0c       	add	r0, r0
    7620:	22 0b       	sbc	r18, r18
    7622:	33 0b       	sbc	r19, r19
    7624:	a9 01       	movw	r20, r18
    7626:	98 01       	movw	r18, r16
    7628:	26 0f       	add	r18, r22
    762a:	37 1f       	adc	r19, r23
    762c:	48 1f       	adc	r20, r24
    762e:	59 1f       	adc	r21, r25
    7630:	0e 94 84 e8 	call	0x1d108	; 0x1d108 <__muluhisi3>
    7634:	ed 81       	ldd	r30, Y+5	; 0x05
    7636:	fe 81       	ldd	r31, Y+6	; 0x06
    7638:	8f 01       	movw	r16, r30
    763a:	ff 0f       	add	r31, r31
    763c:	22 0b       	sbc	r18, r18
    763e:	33 0b       	sbc	r19, r19
    7640:	48 01       	movw	r8, r16
    7642:	59 01       	movw	r10, r18
    7644:	86 0e       	add	r8, r22
    7646:	97 1e       	adc	r9, r23
    7648:	a8 1e       	adc	r10, r24
    764a:	b9 1e       	adc	r11, r25
    764c:	04 c0       	rjmp	.+8      	; 0x7656 <normalize+0x320>
    764e:	88 24       	eor	r8, r8
    7650:	8a 94       	dec	r8
    7652:	98 2c       	mov	r9, r8
    7654:	54 01       	movw	r10, r8
    7656:	49 85       	ldd	r20, Y+9	; 0x09
    7658:	5a 85       	ldd	r21, Y+10	; 0x0a
    765a:	45 2b       	or	r20, r21
    765c:	e9 f0       	breq	.+58     	; 0x7698 <normalize+0x362>
    765e:	ce 01       	movw	r24, r28
    7660:	01 96       	adiw	r24, 0x01	; 1
    7662:	7d dd       	rcall	.-1286   	; 0x715e <gettimezone>
    7664:	a9 81       	ldd	r26, Y+1	; 0x01
    7666:	ba 81       	ldd	r27, Y+2	; 0x02
    7668:	2c e3       	ldi	r18, 0x3C	; 60
    766a:	30 e0       	ldi	r19, 0x00	; 0
    766c:	0e 94 7e e8 	call	0x1d0fc	; 0x1d0fc <__usmulhisi3>
    7670:	2b 01       	movw	r4, r22
    7672:	3c 01       	movw	r6, r24
    7674:	c5 01       	movw	r24, r10
    7676:	b4 01       	movw	r22, r8
    7678:	e2 dd       	rcall	.-1084   	; 0x723e <is_dst>
    767a:	89 2b       	or	r24, r25
    767c:	51 f0       	breq	.+20     	; 0x7692 <normalize+0x35c>
    767e:	50 e1       	ldi	r21, 0x10	; 16
    7680:	45 1a       	sub	r4, r21
    7682:	5e e0       	ldi	r21, 0x0E	; 14
    7684:	55 0a       	sbc	r5, r21
    7686:	61 08       	sbc	r6, r1
    7688:	71 08       	sbc	r7, r1
    768a:	cc 24       	eor	r12, r12
    768c:	c3 94       	inc	r12
    768e:	d1 2c       	mov	r13, r1
    7690:	08 c0       	rjmp	.+16     	; 0x76a2 <normalize+0x36c>
    7692:	c1 2c       	mov	r12, r1
    7694:	d1 2c       	mov	r13, r1
    7696:	05 c0       	rjmp	.+10     	; 0x76a2 <normalize+0x36c>
    7698:	c1 2c       	mov	r12, r1
    769a:	d1 2c       	mov	r13, r1
    769c:	41 2c       	mov	r4, r1
    769e:	51 2c       	mov	r5, r1
    76a0:	32 01       	movw	r6, r4
    76a2:	87 01       	movw	r16, r14
    76a4:	a3 01       	movw	r20, r6
    76a6:	92 01       	movw	r18, r4
    76a8:	c5 01       	movw	r24, r10
    76aa:	b4 01       	movw	r22, r8
    76ac:	5a dc       	rcall	.-1868   	; 0x6f62 <time_to_tm>
    76ae:	c1 14       	cp	r12, r1
    76b0:	d1 04       	cpc	r13, r1
    76b2:	29 f0       	breq	.+10     	; 0x76be <normalize+0x388>
    76b4:	21 e0       	ldi	r18, 0x01	; 1
    76b6:	30 e0       	ldi	r19, 0x00	; 0
    76b8:	f7 01       	movw	r30, r14
    76ba:	31 8b       	std	Z+17, r19	; 0x11
    76bc:	20 8b       	std	Z+16, r18	; 0x10
    76be:	2a 96       	adiw	r28, 0x0a	; 10
    76c0:	e2 e1       	ldi	r30, 0x12	; 18
    76c2:	0c 94 c0 e8 	jmp	0x1d180	; 0x1d180 <__epilogue_restores__>

000076c6 <timegm>:
    76c6:	60 e0       	ldi	r22, 0x00	; 0
    76c8:	70 e0       	ldi	r23, 0x00	; 0
    76ca:	35 ce       	rjmp	.-918    	; 0x7336 <normalize>
    76cc:	08 95       	ret

000076ce <setdate_r>:
    76ce:	cf 92       	push	r12
    76d0:	df 92       	push	r13
    76d2:	ef 92       	push	r14
    76d4:	ff 92       	push	r15
    76d6:	cf 93       	push	r28
    76d8:	df 93       	push	r29
    76da:	cd b7       	in	r28, 0x3d	; 61
    76dc:	de b7       	in	r29, 0x3e	; 62
    76de:	a5 97       	sbiw	r28, 0x25	; 37
    76e0:	0f b6       	in	r0, 0x3f	; 63
    76e2:	f8 94       	cli
    76e4:	de bf       	out	0x3e, r29	; 62
    76e6:	0f be       	out	0x3f, r0	; 63
    76e8:	cd bf       	out	0x3d, r28	; 61
    76ea:	9d a3       	std	Y+37, r25	; 0x25
    76ec:	8c a3       	std	Y+36, r24	; 0x24
    76ee:	1f 82       	std	Y+7, r1	; 0x07
    76f0:	1e 82       	std	Y+6, r1	; 0x06
    76f2:	19 86       	std	Y+9, r1	; 0x09
    76f4:	18 86       	std	Y+8, r1	; 0x08
    76f6:	1b 86       	std	Y+11, r1	; 0x0b
    76f8:	1a 86       	std	Y+10, r1	; 0x0a
    76fa:	1d 86       	std	Y+13, r1	; 0x0d
    76fc:	1c 86       	std	Y+12, r1	; 0x0c
    76fe:	1f 86       	std	Y+15, r1	; 0x0f
    7700:	1e 86       	std	Y+14, r1	; 0x0e
    7702:	19 8a       	std	Y+17, r1	; 0x11
    7704:	18 8a       	std	Y+16, r1	; 0x10
    7706:	8c a1       	ldd	r24, Y+36	; 0x24
    7708:	9d a1       	ldd	r25, Y+37	; 0x25
    770a:	fc 01       	movw	r30, r24
    770c:	20 81       	ld	r18, Z
    770e:	20 32       	cpi	r18, 0x20	; 32
    7710:	21 f4       	brne	.+8      	; 0x771a <setdate_r+0x4c>
    7712:	01 96       	adiw	r24, 0x01	; 1
    7714:	9d a3       	std	Y+37, r25	; 0x25
    7716:	8c a3       	std	Y+36, r24	; 0x24
    7718:	f6 cf       	rjmp	.-20     	; 0x7706 <setdate_r+0x38>
    771a:	4a e0       	ldi	r20, 0x0A	; 10
    771c:	50 e0       	ldi	r21, 0x00	; 0
    771e:	be 01       	movw	r22, r28
    7720:	6c 5d       	subi	r22, 0xDC	; 220
    7722:	7f 4f       	sbci	r23, 0xFF	; 255
    7724:	0e 94 37 48 	call	0x906e	; 0x906e <strtol>
    7728:	79 8b       	std	Y+17, r23	; 0x11
    772a:	68 8b       	std	Y+16, r22	; 0x10
    772c:	8c a1       	ldd	r24, Y+36	; 0x24
    772e:	9d a1       	ldd	r25, Y+37	; 0x25
    7730:	fc 01       	movw	r30, r24
    7732:	20 81       	ld	r18, Z
    7734:	20 32       	cpi	r18, 0x20	; 32
    7736:	21 f4       	brne	.+8      	; 0x7740 <setdate_r+0x72>
    7738:	01 96       	adiw	r24, 0x01	; 1
    773a:	9d a3       	std	Y+37, r25	; 0x25
    773c:	8c a3       	std	Y+36, r24	; 0x24
    773e:	f6 cf       	rjmp	.-20     	; 0x772c <setdate_r+0x5e>
    7740:	4a e0       	ldi	r20, 0x0A	; 10
    7742:	50 e0       	ldi	r21, 0x00	; 0
    7744:	be 01       	movw	r22, r28
    7746:	6c 5d       	subi	r22, 0xDC	; 220
    7748:	7f 4f       	sbci	r23, 0xFF	; 255
    774a:	0e 94 37 48 	call	0x906e	; 0x906e <strtol>
    774e:	7f 87       	std	Y+15, r23	; 0x0f
    7750:	6e 87       	std	Y+14, r22	; 0x0e
    7752:	8c a1       	ldd	r24, Y+36	; 0x24
    7754:	9d a1       	ldd	r25, Y+37	; 0x25
    7756:	fc 01       	movw	r30, r24
    7758:	20 81       	ld	r18, Z
    775a:	20 32       	cpi	r18, 0x20	; 32
    775c:	21 f4       	brne	.+8      	; 0x7766 <setdate_r+0x98>
    775e:	01 96       	adiw	r24, 0x01	; 1
    7760:	9d a3       	std	Y+37, r25	; 0x25
    7762:	8c a3       	std	Y+36, r24	; 0x24
    7764:	f6 cf       	rjmp	.-20     	; 0x7752 <setdate_r+0x84>
    7766:	4a e0       	ldi	r20, 0x0A	; 10
    7768:	50 e0       	ldi	r21, 0x00	; 0
    776a:	be 01       	movw	r22, r28
    776c:	6c 5d       	subi	r22, 0xDC	; 220
    776e:	7f 4f       	sbci	r23, 0xFF	; 255
    7770:	0e 94 37 48 	call	0x906e	; 0x906e <strtol>
    7774:	7d 87       	std	Y+13, r23	; 0x0d
    7776:	6c 87       	std	Y+12, r22	; 0x0c
    7778:	8c a1       	ldd	r24, Y+36	; 0x24
    777a:	9d a1       	ldd	r25, Y+37	; 0x25
    777c:	fc 01       	movw	r30, r24
    777e:	20 81       	ld	r18, Z
    7780:	20 32       	cpi	r18, 0x20	; 32
    7782:	21 f4       	brne	.+8      	; 0x778c <setdate_r+0xbe>
    7784:	01 96       	adiw	r24, 0x01	; 1
    7786:	9d a3       	std	Y+37, r25	; 0x25
    7788:	8c a3       	std	Y+36, r24	; 0x24
    778a:	f6 cf       	rjmp	.-20     	; 0x7778 <setdate_r+0xaa>
    778c:	4a e0       	ldi	r20, 0x0A	; 10
    778e:	50 e0       	ldi	r21, 0x00	; 0
    7790:	be 01       	movw	r22, r28
    7792:	6c 5d       	subi	r22, 0xDC	; 220
    7794:	7f 4f       	sbci	r23, 0xFF	; 255
    7796:	0e 94 37 48 	call	0x906e	; 0x906e <strtol>
    779a:	7b 87       	std	Y+11, r23	; 0x0b
    779c:	6a 87       	std	Y+10, r22	; 0x0a
    779e:	ec a1       	ldd	r30, Y+36	; 0x24
    77a0:	fd a1       	ldd	r31, Y+37	; 0x25
    77a2:	80 81       	ld	r24, Z
    77a4:	88 23       	and	r24, r24
    77a6:	39 f0       	breq	.+14     	; 0x77b6 <setdate_r+0xe8>
    77a8:	80 32       	cpi	r24, 0x20	; 32
    77aa:	11 f0       	breq	.+4      	; 0x77b0 <setdate_r+0xe2>
    77ac:	8a 33       	cpi	r24, 0x3A	; 58
    77ae:	19 f4       	brne	.+6      	; 0x77b6 <setdate_r+0xe8>
    77b0:	31 96       	adiw	r30, 0x01	; 1
    77b2:	fd a3       	std	Y+37, r31	; 0x25
    77b4:	ec a3       	std	Y+36, r30	; 0x24
    77b6:	4a e0       	ldi	r20, 0x0A	; 10
    77b8:	50 e0       	ldi	r21, 0x00	; 0
    77ba:	be 01       	movw	r22, r28
    77bc:	6c 5d       	subi	r22, 0xDC	; 220
    77be:	7f 4f       	sbci	r23, 0xFF	; 255
    77c0:	8c a1       	ldd	r24, Y+36	; 0x24
    77c2:	9d a1       	ldd	r25, Y+37	; 0x25
    77c4:	0e 94 37 48 	call	0x906e	; 0x906e <strtol>
    77c8:	79 87       	std	Y+9, r23	; 0x09
    77ca:	68 87       	std	Y+8, r22	; 0x08
    77cc:	ec a1       	ldd	r30, Y+36	; 0x24
    77ce:	fd a1       	ldd	r31, Y+37	; 0x25
    77d0:	80 81       	ld	r24, Z
    77d2:	88 23       	and	r24, r24
    77d4:	39 f0       	breq	.+14     	; 0x77e4 <setdate_r+0x116>
    77d6:	80 32       	cpi	r24, 0x20	; 32
    77d8:	11 f0       	breq	.+4      	; 0x77de <setdate_r+0x110>
    77da:	8a 33       	cpi	r24, 0x3A	; 58
    77dc:	19 f4       	brne	.+6      	; 0x77e4 <setdate_r+0x116>
    77de:	31 96       	adiw	r30, 0x01	; 1
    77e0:	fd a3       	std	Y+37, r31	; 0x25
    77e2:	ec a3       	std	Y+36, r30	; 0x24
    77e4:	4a e0       	ldi	r20, 0x0A	; 10
    77e6:	50 e0       	ldi	r21, 0x00	; 0
    77e8:	be 01       	movw	r22, r28
    77ea:	6c 5d       	subi	r22, 0xDC	; 220
    77ec:	7f 4f       	sbci	r23, 0xFF	; 255
    77ee:	8c a1       	ldd	r24, Y+36	; 0x24
    77f0:	9d a1       	ldd	r25, Y+37	; 0x25
    77f2:	0e 94 37 48 	call	0x906e	; 0x906e <strtol>
    77f6:	7f 83       	std	Y+7, r23	; 0x07
    77f8:	6e 83       	std	Y+6, r22	; 0x06
    77fa:	2e 85       	ldd	r18, Y+14	; 0x0e
    77fc:	3f 85       	ldd	r19, Y+15	; 0x0f
    77fe:	21 50       	subi	r18, 0x01	; 1
    7800:	31 09       	sbc	r19, r1
    7802:	3f 87       	std	Y+15, r19	; 0x0f
    7804:	2e 87       	std	Y+14, r18	; 0x0e
    7806:	88 89       	ldd	r24, Y+16	; 0x10
    7808:	99 89       	ldd	r25, Y+17	; 0x11
    780a:	ac 01       	movw	r20, r24
    780c:	42 5b       	subi	r20, 0xB2	; 178
    780e:	57 40       	sbci	r21, 0x07	; 7
    7810:	45 34       	cpi	r20, 0x45	; 69
    7812:	51 05       	cpc	r21, r1
    7814:	38 f0       	brcs	.+14     	; 0x7824 <setdate_r+0x156>
    7816:	ed b7       	in	r30, 0x3d	; 61
    7818:	fe b7       	in	r31, 0x3e	; 62
    781a:	95 83       	std	Z+5, r25	; 0x05
    781c:	84 83       	std	Z+4, r24	; 0x04
    781e:	8b e1       	ldi	r24, 0x1B	; 27
    7820:	97 e0       	ldi	r25, 0x07	; 7
    7822:	34 c0       	rjmp	.+104    	; 0x788c <setdate_r+0x1be>
    7824:	8c 56       	subi	r24, 0x6C	; 108
    7826:	97 40       	sbci	r25, 0x07	; 7
    7828:	99 8b       	std	Y+17, r25	; 0x11
    782a:	88 8b       	std	Y+16, r24	; 0x10
    782c:	2c 30       	cpi	r18, 0x0C	; 12
    782e:	31 05       	cpc	r19, r1
    7830:	38 f0       	brcs	.+14     	; 0x7840 <setdate_r+0x172>
    7832:	ed b7       	in	r30, 0x3d	; 61
    7834:	fe b7       	in	r31, 0x3e	; 62
    7836:	95 83       	std	Z+5, r25	; 0x05
    7838:	84 83       	std	Z+4, r24	; 0x04
    783a:	8a e0       	ldi	r24, 0x0A	; 10
    783c:	97 e0       	ldi	r25, 0x07	; 7
    783e:	26 c0       	rjmp	.+76     	; 0x788c <setdate_r+0x1be>
    7840:	8c 85       	ldd	r24, Y+12	; 0x0c
    7842:	9d 85       	ldd	r25, Y+13	; 0x0d
    7844:	9c 01       	movw	r18, r24
    7846:	21 50       	subi	r18, 0x01	; 1
    7848:	31 09       	sbc	r19, r1
    784a:	2f 31       	cpi	r18, 0x1F	; 31
    784c:	31 05       	cpc	r19, r1
    784e:	38 f0       	brcs	.+14     	; 0x785e <setdate_r+0x190>
    7850:	ed b7       	in	r30, 0x3d	; 61
    7852:	fe b7       	in	r31, 0x3e	; 62
    7854:	95 83       	std	Z+5, r25	; 0x05
    7856:	84 83       	std	Z+4, r24	; 0x04
    7858:	89 ef       	ldi	r24, 0xF9	; 249
    785a:	96 e0       	ldi	r25, 0x06	; 6
    785c:	17 c0       	rjmp	.+46     	; 0x788c <setdate_r+0x1be>
    785e:	8a 85       	ldd	r24, Y+10	; 0x0a
    7860:	9b 85       	ldd	r25, Y+11	; 0x0b
    7862:	88 31       	cpi	r24, 0x18	; 24
    7864:	91 05       	cpc	r25, r1
    7866:	38 f0       	brcs	.+14     	; 0x7876 <setdate_r+0x1a8>
    7868:	ed b7       	in	r30, 0x3d	; 61
    786a:	fe b7       	in	r31, 0x3e	; 62
    786c:	95 83       	std	Z+5, r25	; 0x05
    786e:	84 83       	std	Z+4, r24	; 0x04
    7870:	87 ee       	ldi	r24, 0xE7	; 231
    7872:	96 e0       	ldi	r25, 0x06	; 6
    7874:	0b c0       	rjmp	.+22     	; 0x788c <setdate_r+0x1be>
    7876:	88 85       	ldd	r24, Y+8	; 0x08
    7878:	99 85       	ldd	r25, Y+9	; 0x09
    787a:	8c 33       	cpi	r24, 0x3C	; 60
    787c:	91 05       	cpc	r25, r1
    787e:	68 f0       	brcs	.+26     	; 0x789a <setdate_r+0x1cc>
    7880:	ed b7       	in	r30, 0x3d	; 61
    7882:	fe b7       	in	r31, 0x3e	; 62
    7884:	95 83       	std	Z+5, r25	; 0x05
    7886:	84 83       	std	Z+4, r24	; 0x04
    7888:	86 ed       	ldi	r24, 0xD6	; 214
    788a:	96 e0       	ldi	r25, 0x06	; 6
    788c:	a0 e0       	ldi	r26, 0x00	; 0
    788e:	81 83       	std	Z+1, r24	; 0x01
    7890:	92 83       	std	Z+2, r25	; 0x02
    7892:	a3 83       	std	Z+3, r26	; 0x03
    7894:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
    7898:	25 c0       	rjmp	.+74     	; 0x78e4 <setdate_r+0x216>
    789a:	ce 01       	movw	r24, r28
    789c:	06 96       	adiw	r24, 0x06	; 6
    789e:	13 df       	rcall	.-474    	; 0x76c6 <timegm>
    78a0:	6b 01       	movw	r12, r22
    78a2:	7c 01       	movw	r14, r24
    78a4:	6c 8f       	std	Y+28, r22	; 0x1c
    78a6:	7d 8f       	std	Y+29, r23	; 0x1d
    78a8:	8e 8f       	std	Y+30, r24	; 0x1e
    78aa:	9f 8f       	std	Y+31, r25	; 0x1f
    78ac:	18 a2       	std	Y+32, r1	; 0x20
    78ae:	19 a2       	std	Y+33, r1	; 0x21
    78b0:	1a a2       	std	Y+34, r1	; 0x22
    78b2:	1b a2       	std	Y+35, r1	; 0x23
    78b4:	be 01       	movw	r22, r28
    78b6:	64 5e       	subi	r22, 0xE4	; 228
    78b8:	7f 4f       	sbci	r23, 0xFF	; 255
    78ba:	80 e0       	ldi	r24, 0x00	; 0
    78bc:	90 e0       	ldi	r25, 0x00	; 0
    78be:	03 db       	rcall	.-2554   	; 0x6ec6 <clock_settime>
    78c0:	b7 01       	movw	r22, r14
    78c2:	a6 01       	movw	r20, r12
    78c4:	81 e0       	ldi	r24, 0x01	; 1
    78c6:	90 e0       	ldi	r25, 0x00	; 0
    78c8:	0e 94 e3 31 	call	0x63c6	; 0x63c6 <rtc_init>
    78cc:	81 11       	cpse	r24, r1
    78ce:	0d c0       	rjmp	.+26     	; 0x78ea <setdate_r+0x21c>
    78d0:	8f eb       	ldi	r24, 0xBF	; 191
    78d2:	96 e0       	ldi	r25, 0x06	; 6
    78d4:	a0 e0       	ldi	r26, 0x00	; 0
    78d6:	ed b7       	in	r30, 0x3d	; 61
    78d8:	fe b7       	in	r31, 0x3e	; 62
    78da:	81 83       	std	Z+1, r24	; 0x01
    78dc:	92 83       	std	Z+2, r25	; 0x02
    78de:	a3 83       	std	Z+3, r26	; 0x03
    78e0:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
    78e4:	8f ef       	ldi	r24, 0xFF	; 255
    78e6:	9f ef       	ldi	r25, 0xFF	; 255
    78e8:	02 c0       	rjmp	.+4      	; 0x78ee <setdate_r+0x220>
    78ea:	80 e0       	ldi	r24, 0x00	; 0
    78ec:	90 e0       	ldi	r25, 0x00	; 0
    78ee:	a5 96       	adiw	r28, 0x25	; 37
    78f0:	0f b6       	in	r0, 0x3f	; 63
    78f2:	f8 94       	cli
    78f4:	de bf       	out	0x3e, r29	; 62
    78f6:	0f be       	out	0x3f, r0	; 63
    78f8:	cd bf       	out	0x3d, r28	; 61
    78fa:	df 91       	pop	r29
    78fc:	cf 91       	pop	r28
    78fe:	ff 90       	pop	r15
    7900:	ef 90       	pop	r14
    7902:	df 90       	pop	r13
    7904:	cf 90       	pop	r12
    7906:	08 95       	ret

00007908 <setdate>:
    7908:	ab e2       	ldi	r26, 0x2B	; 43
    790a:	b0 e0       	ldi	r27, 0x00	; 0
    790c:	ea e8       	ldi	r30, 0x8A	; 138
    790e:	fc e3       	ldi	r31, 0x3C	; 60
    7910:	0c 94 b4 e8 	jmp	0x1d168	; 0x1d168 <__prologue_saves__+0x20>
    7914:	8d e2       	ldi	r24, 0x2D	; 45
    7916:	97 e0       	ldi	r25, 0x07	; 7
    7918:	a0 e0       	ldi	r26, 0x00	; 0
    791a:	ed b7       	in	r30, 0x3d	; 61
    791c:	fe b7       	in	r31, 0x3e	; 62
    791e:	81 83       	std	Z+1, r24	; 0x01
    7920:	92 83       	std	Z+2, r25	; 0x02
    7922:	a3 83       	std	Z+3, r26	; 0x03
    7924:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
    7928:	40 91 bf 1c 	lds	r20, 0x1CBF	; 0x801cbf <__iob>
    792c:	50 91 c0 1c 	lds	r21, 0x1CC0	; 0x801cc0 <__iob+0x1>
    7930:	66 e2       	ldi	r22, 0x26	; 38
    7932:	70 e0       	ldi	r23, 0x00	; 0
    7934:	ce 01       	movw	r24, r28
    7936:	04 96       	adiw	r24, 0x04	; 4
    7938:	0e 94 6c 77 	call	0xeed8	; 0xeed8 <fgets>
    793c:	ce 01       	movw	r24, r28
    793e:	04 96       	adiw	r24, 0x04	; 4
    7940:	c6 de       	rcall	.-628    	; 0x76ce <setdate_r>
    7942:	ab 96       	adiw	r28, 0x2b	; 43
    7944:	e2 e0       	ldi	r30, 0x02	; 2
    7946:	0c 94 d0 e8 	jmp	0x1d1a0	; 0x1d1a0 <__epilogue_restores__+0x20>

0000794a <find_dst>:
    794a:	a8 e2       	ldi	r26, 0x28	; 40
    794c:	b0 e0       	ldi	r27, 0x00	; 0
    794e:	eb ea       	ldi	r30, 0xAB	; 171
    7950:	fc e3       	ldi	r31, 0x3C	; 60
    7952:	0c 94 a4 e8 	jmp	0x1d148	; 0x1d148 <__prologue_saves__>
    7956:	3c 01       	movw	r6, r24
    7958:	1a 01       	movw	r2, r20
    795a:	2b 01       	movw	r4, r22
    795c:	49 01       	movw	r8, r18
    795e:	1c a3       	std	Y+36, r17	; 0x24
    7960:	0b a3       	std	Y+35, r16	; 0x23
    7962:	de a2       	std	Y+38, r13	; 0x26
    7964:	cd a2       	std	Y+37, r12	; 0x25
    7966:	b8 a6       	std	Y+40, r11	; 0x28
    7968:	af a2       	std	Y+39, r10	; 0x27
    796a:	be 01       	movw	r22, r28
    796c:	61 5e       	subi	r22, 0xE1	; 225
    796e:	7f 4f       	sbci	r23, 0xFF	; 255
    7970:	ce 01       	movw	r24, r28
    7972:	47 96       	adiw	r24, 0x17	; 23
    7974:	15 dc       	rcall	.-2006   	; 0x71a0 <gettimeofday>
    7976:	af 8d       	ldd	r26, Y+31	; 0x1f
    7978:	b8 a1       	ldd	r27, Y+32	; 0x20
    797a:	2c e3       	ldi	r18, 0x3C	; 60
    797c:	30 e0       	ldi	r19, 0x00	; 0
    797e:	0e 94 7e e8 	call	0x1d0fc	; 0x1d0fc <__usmulhisi3>
    7982:	5b 01       	movw	r10, r22
    7984:	6c 01       	movw	r12, r24
    7986:	61 14       	cp	r6, r1
    7988:	71 04       	cpc	r7, r1
    798a:	31 f0       	breq	.+12     	; 0x7998 <find_dst+0x4e>
    798c:	20 e1       	ldi	r18, 0x10	; 16
    798e:	a2 1a       	sub	r10, r18
    7990:	2e e0       	ldi	r18, 0x0E	; 14
    7992:	b2 0a       	sbc	r11, r18
    7994:	c1 08       	sbc	r12, r1
    7996:	d1 08       	sbc	r13, r1
    7998:	81 14       	cp	r8, r1
    799a:	91 04       	cpc	r9, r1
    799c:	39 f0       	breq	.+14     	; 0x79ac <find_dst+0x62>
    799e:	4c e6       	ldi	r20, 0x6C	; 108
    79a0:	84 1a       	sub	r8, r20
    79a2:	47 e0       	ldi	r20, 0x07	; 7
    79a4:	94 0a       	sbc	r9, r20
    79a6:	9c 86       	std	Y+12, r9	; 0x0c
    79a8:	8b 86       	std	Y+11, r8	; 0x0b
    79aa:	11 c0       	rjmp	.+34     	; 0x79ce <find_dst+0x84>
    79ac:	21 14       	cp	r2, r1
    79ae:	31 04       	cpc	r3, r1
    79b0:	41 04       	cpc	r4, r1
    79b2:	51 04       	cpc	r5, r1
    79b4:	21 f4       	brne	.+8      	; 0x79be <find_dst+0x74>
    79b6:	2f 88       	ldd	r2, Y+23	; 0x17
    79b8:	38 8c       	ldd	r3, Y+24	; 0x18
    79ba:	49 8c       	ldd	r4, Y+25	; 0x19
    79bc:	5a 8c       	ldd	r5, Y+26	; 0x1a
    79be:	8e 01       	movw	r16, r28
    79c0:	0f 5f       	subi	r16, 0xFF	; 255
    79c2:	1f 4f       	sbci	r17, 0xFF	; 255
    79c4:	a6 01       	movw	r20, r12
    79c6:	95 01       	movw	r18, r10
    79c8:	c2 01       	movw	r24, r4
    79ca:	b1 01       	movw	r22, r2
    79cc:	ca da       	rcall	.-2668   	; 0x6f62 <time_to_tm>
    79ce:	8b a1       	ldd	r24, Y+35	; 0x23
    79d0:	9c a1       	ldd	r25, Y+36	; 0x24
    79d2:	01 97       	sbiw	r24, 0x01	; 1
    79d4:	9a 87       	std	Y+10, r25	; 0x0a
    79d6:	89 87       	std	Y+9, r24	; 0x09
    79d8:	81 e0       	ldi	r24, 0x01	; 1
    79da:	90 e0       	ldi	r25, 0x00	; 0
    79dc:	98 87       	std	Y+8, r25	; 0x08
    79de:	8f 83       	std	Y+7, r24	; 0x07
    79e0:	8f a1       	ldd	r24, Y+39	; 0x27
    79e2:	98 a5       	ldd	r25, Y+40	; 0x28
    79e4:	9e 83       	std	Y+6, r25	; 0x06
    79e6:	8d 83       	std	Y+5, r24	; 0x05
    79e8:	1c 82       	std	Y+4, r1	; 0x04
    79ea:	1b 82       	std	Y+3, r1	; 0x03
    79ec:	1a 82       	std	Y+2, r1	; 0x02
    79ee:	19 82       	std	Y+1, r1	; 0x01
    79f0:	ce 01       	movw	r24, r28
    79f2:	01 96       	adiw	r24, 0x01	; 1
    79f4:	68 de       	rcall	.-816    	; 0x76c6 <timegm>
    79f6:	45 01       	movw	r8, r10
    79f8:	56 01       	movw	r10, r12
    79fa:	86 0e       	add	r8, r22
    79fc:	97 1e       	adc	r9, r23
    79fe:	a8 1e       	adc	r10, r24
    7a00:	b9 1e       	adc	r11, r25
    7a02:	8e 01       	movw	r16, r28
    7a04:	0f 5f       	subi	r16, 0xFF	; 255
    7a06:	1f 4f       	sbci	r17, 0xFF	; 255
    7a08:	20 e0       	ldi	r18, 0x00	; 0
    7a0a:	30 e0       	ldi	r19, 0x00	; 0
    7a0c:	a9 01       	movw	r20, r18
    7a0e:	c5 01       	movw	r24, r10
    7a10:	b4 01       	movw	r22, r8
    7a12:	a7 da       	rcall	.-2738   	; 0x6f62 <time_to_tm>
    7a14:	2d 85       	ldd	r18, Y+13	; 0x0d
    7a16:	3e 85       	ldd	r19, Y+14	; 0x0e
    7a18:	e7 e0       	ldi	r30, 0x07	; 7
    7a1a:	f0 e0       	ldi	r31, 0x00	; 0
    7a1c:	c9 01       	movw	r24, r18
    7a1e:	bf 01       	movw	r22, r30
    7a20:	0e 94 24 e8 	call	0x1d048	; 0x1d048 <__divmodhi4>
    7a24:	4d a1       	ldd	r20, Y+37	; 0x25
    7a26:	5e a1       	ldd	r21, Y+38	; 0x26
    7a28:	48 17       	cp	r20, r24
    7a2a:	59 07       	cpc	r21, r25
    7a2c:	21 f4       	brne	.+8      	; 0x7a36 <find_dst+0xec>
    7a2e:	51 e0       	ldi	r21, 0x01	; 1
    7a30:	e5 1a       	sub	r14, r21
    7a32:	f1 08       	sbc	r15, r1
    7a34:	51 f0       	breq	.+20     	; 0x7a4a <find_dst+0x100>
    7a36:	80 e8       	ldi	r24, 0x80	; 128
    7a38:	88 0e       	add	r8, r24
    7a3a:	81 e5       	ldi	r24, 0x51	; 81
    7a3c:	98 1e       	adc	r9, r24
    7a3e:	81 e0       	ldi	r24, 0x01	; 1
    7a40:	a8 1e       	adc	r10, r24
    7a42:	b1 1c       	adc	r11, r1
    7a44:	2f 5f       	subi	r18, 0xFF	; 255
    7a46:	3f 4f       	sbci	r19, 0xFF	; 255
    7a48:	e9 cf       	rjmp	.-46     	; 0x7a1c <find_dst+0xd2>
    7a4a:	c5 01       	movw	r24, r10
    7a4c:	b4 01       	movw	r22, r8
    7a4e:	a8 96       	adiw	r28, 0x28	; 40
    7a50:	e2 e1       	ldi	r30, 0x12	; 18
    7a52:	0c 94 c0 e8 	jmp	0x1d180	; 0x1d180 <__epilogue_restores__>

00007a56 <set_dst>:
    7a56:	4f 92       	push	r4
    7a58:	5f 92       	push	r5
    7a5a:	6f 92       	push	r6
    7a5c:	7f 92       	push	r7
    7a5e:	af 92       	push	r10
    7a60:	bf 92       	push	r11
    7a62:	cf 92       	push	r12
    7a64:	df 92       	push	r13
    7a66:	ef 92       	push	r14
    7a68:	ff 92       	push	r15
    7a6a:	0f 93       	push	r16
    7a6c:	1f 93       	push	r17
    7a6e:	cf 93       	push	r28
    7a70:	df 93       	push	r29
    7a72:	cd b7       	in	r28, 0x3d	; 61
    7a74:	de b7       	in	r29, 0x3e	; 62
    7a76:	2c 97       	sbiw	r28, 0x0c	; 12
    7a78:	0f b6       	in	r0, 0x3f	; 63
    7a7a:	f8 94       	cli
    7a7c:	de bf       	out	0x3e, r29	; 62
    7a7e:	0f be       	out	0x3f, r0	; 63
    7a80:	cd bf       	out	0x3d, r28	; 61
    7a82:	2b 01       	movw	r4, r22
    7a84:	3c 01       	movw	r6, r24
    7a86:	67 2b       	or	r22, r23
    7a88:	68 2b       	or	r22, r24
    7a8a:	69 2b       	or	r22, r25
    7a8c:	51 f4       	brne	.+20     	; 0x7aa2 <set_dst+0x4c>
    7a8e:	be 01       	movw	r22, r28
    7a90:	67 5f       	subi	r22, 0xF7	; 247
    7a92:	7f 4f       	sbci	r23, 0xFF	; 255
    7a94:	ce 01       	movw	r24, r28
    7a96:	01 96       	adiw	r24, 0x01	; 1
    7a98:	83 db       	rcall	.-2298   	; 0x71a0 <gettimeofday>
    7a9a:	49 80       	ldd	r4, Y+1	; 0x01
    7a9c:	5a 80       	ldd	r5, Y+2	; 0x02
    7a9e:	6b 80       	ldd	r6, Y+3	; 0x03
    7aa0:	7c 80       	ldd	r7, Y+4	; 0x04
    7aa2:	80 91 7c 1a 	lds	r24, 0x1A7C	; 0x801a7c <dst+0x8>
    7aa6:	90 91 7d 1a 	lds	r25, 0x1A7D	; 0x801a7d <dst+0x9>
    7aaa:	a0 91 7e 1a 	lds	r26, 0x1A7E	; 0x801a7e <dst+0xa>
    7aae:	b0 91 7f 1a 	lds	r27, 0x1A7F	; 0x801a7f <dst+0xb>
    7ab2:	84 15       	cp	r24, r4
    7ab4:	95 05       	cpc	r25, r5
    7ab6:	a6 05       	cpc	r26, r6
    7ab8:	b7 05       	cpc	r27, r7
    7aba:	50 f0       	brcs	.+20     	; 0x7ad0 <set_dst+0x7a>
    7abc:	84 19       	sub	r24, r4
    7abe:	95 09       	sbc	r25, r5
    7ac0:	a6 09       	sbc	r26, r6
    7ac2:	b7 09       	sbc	r27, r7
    7ac4:	80 38       	cpi	r24, 0x80	; 128
    7ac6:	91 45       	sbci	r25, 0x51	; 81
    7ac8:	a1 40       	sbci	r26, 0x01	; 1
    7aca:	b1 05       	cpc	r27, r1
    7acc:	70 f4       	brcc	.+28     	; 0x7aea <set_dst+0x94>
    7ace:	42 c0       	rjmp	.+132    	; 0x7b54 <set_dst+0xfe>
    7ad0:	a3 01       	movw	r20, r6
    7ad2:	92 01       	movw	r18, r4
    7ad4:	28 1b       	sub	r18, r24
    7ad6:	39 0b       	sbc	r19, r25
    7ad8:	4a 0b       	sbc	r20, r26
    7ada:	5b 0b       	sbc	r21, r27
    7adc:	da 01       	movw	r26, r20
    7ade:	c9 01       	movw	r24, r18
    7ae0:	80 38       	cpi	r24, 0x80	; 128
    7ae2:	91 45       	sbci	r25, 0x51	; 81
    7ae4:	a1 40       	sbci	r26, 0x01	; 1
    7ae6:	b1 05       	cpc	r27, r1
    7ae8:	a8 f1       	brcs	.+106    	; 0x7b54 <set_dst+0xfe>
    7aea:	40 92 7c 1a 	sts	0x1A7C, r4	; 0x801a7c <dst+0x8>
    7aee:	50 92 7d 1a 	sts	0x1A7D, r5	; 0x801a7d <dst+0x9>
    7af2:	60 92 7e 1a 	sts	0x1A7E, r6	; 0x801a7e <dst+0xa>
    7af6:	70 92 7f 1a 	sts	0x1A7F, r7	; 0x801a7f <dst+0xb>
    7afa:	82 e0       	ldi	r24, 0x02	; 2
    7afc:	a8 2e       	mov	r10, r24
    7afe:	b1 2c       	mov	r11, r1
    7b00:	c1 2c       	mov	r12, r1
    7b02:	d1 2c       	mov	r13, r1
    7b04:	92 e0       	ldi	r25, 0x02	; 2
    7b06:	e9 2e       	mov	r14, r25
    7b08:	f1 2c       	mov	r15, r1
    7b0a:	03 e0       	ldi	r16, 0x03	; 3
    7b0c:	10 e0       	ldi	r17, 0x00	; 0
    7b0e:	20 e0       	ldi	r18, 0x00	; 0
    7b10:	30 e0       	ldi	r19, 0x00	; 0
    7b12:	b3 01       	movw	r22, r6
    7b14:	a2 01       	movw	r20, r4
    7b16:	80 e0       	ldi	r24, 0x00	; 0
    7b18:	90 e0       	ldi	r25, 0x00	; 0
    7b1a:	17 df       	rcall	.-466    	; 0x794a <find_dst>
    7b1c:	60 93 74 1a 	sts	0x1A74, r22	; 0x801a74 <dst>
    7b20:	70 93 75 1a 	sts	0x1A75, r23	; 0x801a75 <dst+0x1>
    7b24:	80 93 76 1a 	sts	0x1A76, r24	; 0x801a76 <dst+0x2>
    7b28:	90 93 77 1a 	sts	0x1A77, r25	; 0x801a77 <dst+0x3>
    7b2c:	ee 24       	eor	r14, r14
    7b2e:	e3 94       	inc	r14
    7b30:	f1 2c       	mov	r15, r1
    7b32:	0b e0       	ldi	r16, 0x0B	; 11
    7b34:	10 e0       	ldi	r17, 0x00	; 0
    7b36:	20 e0       	ldi	r18, 0x00	; 0
    7b38:	30 e0       	ldi	r19, 0x00	; 0
    7b3a:	b3 01       	movw	r22, r6
    7b3c:	a2 01       	movw	r20, r4
    7b3e:	81 e0       	ldi	r24, 0x01	; 1
    7b40:	90 e0       	ldi	r25, 0x00	; 0
    7b42:	03 df       	rcall	.-506    	; 0x794a <find_dst>
    7b44:	60 93 78 1a 	sts	0x1A78, r22	; 0x801a78 <dst+0x4>
    7b48:	70 93 79 1a 	sts	0x1A79, r23	; 0x801a79 <dst+0x5>
    7b4c:	80 93 7a 1a 	sts	0x1A7A, r24	; 0x801a7a <dst+0x6>
    7b50:	90 93 7b 1a 	sts	0x1A7B, r25	; 0x801a7b <dst+0x7>
    7b54:	2c 96       	adiw	r28, 0x0c	; 12
    7b56:	0f b6       	in	r0, 0x3f	; 63
    7b58:	f8 94       	cli
    7b5a:	de bf       	out	0x3e, r29	; 62
    7b5c:	0f be       	out	0x3f, r0	; 63
    7b5e:	cd bf       	out	0x3d, r28	; 61
    7b60:	df 91       	pop	r29
    7b62:	cf 91       	pop	r28
    7b64:	1f 91       	pop	r17
    7b66:	0f 91       	pop	r16
    7b68:	ff 90       	pop	r15
    7b6a:	ef 90       	pop	r14
    7b6c:	df 90       	pop	r13
    7b6e:	cf 90       	pop	r12
    7b70:	bf 90       	pop	r11
    7b72:	af 90       	pop	r10
    7b74:	7f 90       	pop	r7
    7b76:	6f 90       	pop	r6
    7b78:	5f 90       	pop	r5
    7b7a:	4f 90       	pop	r4
    7b7c:	08 95       	ret

00007b7e <asctime_r>:
    7b7e:	a5 e1       	ldi	r26, 0x15	; 21
    7b80:	b0 e0       	ldi	r27, 0x00	; 0
    7b82:	e5 ec       	ldi	r30, 0xC5	; 197
    7b84:	fd e3       	ldi	r31, 0x3D	; 61
    7b86:	0c 94 b2 e8 	jmp	0x1d164	; 0x1d164 <__prologue_saves__+0x1c>
    7b8a:	ec 01       	movw	r28, r24
    7b8c:	8b 01       	movw	r16, r22
    7b8e:	60 e0       	ldi	r22, 0x00	; 0
    7b90:	70 e0       	ldi	r23, 0x00	; 0
    7b92:	d1 db       	rcall	.-2142   	; 0x7336 <normalize>
    7b94:	80 e2       	ldi	r24, 0x20	; 32
    7b96:	f8 01       	movw	r30, r16
    7b98:	11 92       	st	Z+, r1
    7b9a:	8a 95       	dec	r24
    7b9c:	e9 f7       	brne	.-6      	; 0x7b98 <asctime_r+0x1a>
    7b9e:	8a 85       	ldd	r24, Y+10	; 0x0a
    7ba0:	9b 85       	ldd	r25, Y+11	; 0x0b
    7ba2:	84 59       	subi	r24, 0x94	; 148
    7ba4:	98 4f       	sbci	r25, 0xF8	; 248
    7ba6:	ed b7       	in	r30, 0x3d	; 61
    7ba8:	fe b7       	in	r31, 0x3e	; 62
    7baa:	95 8b       	std	Z+21, r25	; 0x15
    7bac:	84 8b       	std	Z+20, r24	; 0x14
    7bae:	88 81       	ld	r24, Y
    7bb0:	99 81       	ldd	r25, Y+1	; 0x01
    7bb2:	93 8b       	std	Z+19, r25	; 0x13
    7bb4:	82 8b       	std	Z+18, r24	; 0x12
    7bb6:	8a 81       	ldd	r24, Y+2	; 0x02
    7bb8:	9b 81       	ldd	r25, Y+3	; 0x03
    7bba:	91 8b       	std	Z+17, r25	; 0x11
    7bbc:	80 8b       	std	Z+16, r24	; 0x10
    7bbe:	8c 81       	ldd	r24, Y+4	; 0x04
    7bc0:	9d 81       	ldd	r25, Y+5	; 0x05
    7bc2:	97 87       	std	Z+15, r25	; 0x0f
    7bc4:	86 87       	std	Z+14, r24	; 0x0e
    7bc6:	8e 81       	ldd	r24, Y+6	; 0x06
    7bc8:	9f 81       	ldd	r25, Y+7	; 0x07
    7bca:	95 87       	std	Z+13, r25	; 0x0d
    7bcc:	84 87       	std	Z+12, r24	; 0x0c
    7bce:	e8 85       	ldd	r30, Y+8	; 0x08
    7bd0:	f9 85       	ldd	r31, Y+9	; 0x09
    7bd2:	ee 0f       	add	r30, r30
    7bd4:	ff 1f       	adc	r31, r31
    7bd6:	e5 5f       	subi	r30, 0xF5	; 245
    7bd8:	fe 4f       	sbci	r31, 0xFE	; 254
    7bda:	80 81       	ld	r24, Z
    7bdc:	91 81       	ldd	r25, Z+1	; 0x01
    7bde:	ed b7       	in	r30, 0x3d	; 61
    7be0:	fe b7       	in	r31, 0x3e	; 62
    7be2:	93 87       	std	Z+11, r25	; 0x0b
    7be4:	82 87       	std	Z+10, r24	; 0x0a
    7be6:	ec 85       	ldd	r30, Y+12	; 0x0c
    7be8:	fd 85       	ldd	r31, Y+13	; 0x0d
    7bea:	ee 0f       	add	r30, r30
    7bec:	ff 1f       	adc	r31, r31
    7bee:	eb 5d       	subi	r30, 0xDB	; 219
    7bf0:	fe 4f       	sbci	r31, 0xFE	; 254
    7bf2:	80 81       	ld	r24, Z
    7bf4:	91 81       	ldd	r25, Z+1	; 0x01
    7bf6:	ed b7       	in	r30, 0x3d	; 61
    7bf8:	fe b7       	in	r31, 0x3e	; 62
    7bfa:	91 87       	std	Z+9, r25	; 0x09
    7bfc:	80 87       	std	Z+8, r24	; 0x08
    7bfe:	8e e4       	ldi	r24, 0x4E	; 78
    7c00:	97 e0       	ldi	r25, 0x07	; 7
    7c02:	a0 e0       	ldi	r26, 0x00	; 0
    7c04:	85 83       	std	Z+5, r24	; 0x05
    7c06:	96 83       	std	Z+6, r25	; 0x06
    7c08:	a7 83       	std	Z+7, r26	; 0x07
    7c0a:	80 e2       	ldi	r24, 0x20	; 32
    7c0c:	90 e0       	ldi	r25, 0x00	; 0
    7c0e:	94 83       	std	Z+4, r25	; 0x04
    7c10:	83 83       	std	Z+3, r24	; 0x03
    7c12:	12 83       	std	Z+2, r17	; 0x02
    7c14:	01 83       	std	Z+1, r16	; 0x01
    7c16:	0e 94 d4 47 	call	0x8fa8	; 0x8fa8 <snprintf_P>
    7c1a:	c8 01       	movw	r24, r16
    7c1c:	cd b7       	in	r28, 0x3d	; 61
    7c1e:	de b7       	in	r29, 0x3e	; 62
    7c20:	65 96       	adiw	r28, 0x15	; 21
    7c22:	e4 e0       	ldi	r30, 0x04	; 4
    7c24:	0c 94 ce e8 	jmp	0x1d19c	; 0x1d19c <__epilogue_restores__+0x1c>

00007c28 <asctime>:
    7c28:	6e ef       	ldi	r22, 0xFE	; 254
    7c2a:	77 e1       	ldi	r23, 0x17	; 23
    7c2c:	a8 cf       	rjmp	.-176    	; 0x7b7e <asctime_r>
    7c2e:	08 95       	ret

00007c30 <ctime_gm>:
    7c30:	a6 e1       	ldi	r26, 0x16	; 22
    7c32:	b0 e0       	ldi	r27, 0x00	; 0
    7c34:	ee e1       	ldi	r30, 0x1E	; 30
    7c36:	fe e3       	ldi	r31, 0x3E	; 62
    7c38:	0c 94 b4 e8 	jmp	0x1d168	; 0x1d168 <__prologue_saves__+0x20>
    7c3c:	be 01       	movw	r22, r28
    7c3e:	6f 5f       	subi	r22, 0xFF	; 255
    7c40:	7f 4f       	sbci	r23, 0xFF	; 255
    7c42:	6d da       	rcall	.-2854   	; 0x711e <gmtime_r>
    7c44:	6e ed       	ldi	r22, 0xDE	; 222
    7c46:	77 e1       	ldi	r23, 0x17	; 23
    7c48:	9a df       	rcall	.-204    	; 0x7b7e <asctime_r>
    7c4a:	66 96       	adiw	r28, 0x16	; 22
    7c4c:	e2 e0       	ldi	r30, 0x02	; 2
    7c4e:	0c 94 d0 e8 	jmp	0x1d1a0	; 0x1d1a0 <__epilogue_restores__+0x20>

00007c52 <initialize_clock>:
/// @param[in] minwest: your time zone as minute west
///@return  void
///@see: clock_settime()
MEMSPACE
void initialize_clock(int minwest)
{
    7c52:	a5 e2       	ldi	r26, 0x25	; 37
    7c54:	b0 e0       	ldi	r27, 0x00	; 0
    7c56:	ef e2       	ldi	r30, 0x2F	; 47
    7c58:	fe e3       	ldi	r31, 0x3E	; 62
    7c5a:	0c 94 ae e8 	jmp	0x1d15c	; 0x1d15c <__prologue_saves__+0x14>
    7c5e:	8c 01       	movw	r16, r24
    tm_t tc;
    ts_t ts;
    tz_t tz;

#ifdef RTC_SUPPORT
    if(!rtc_init(0,0L))
    7c60:	40 e0       	ldi	r20, 0x00	; 0
    7c62:	50 e0       	ldi	r21, 0x00	; 0
    7c64:	ba 01       	movw	r22, r20
    7c66:	80 e0       	ldi	r24, 0x00	; 0
    7c68:	90 e0       	ldi	r25, 0x00	; 0
    7c6a:	0e 94 e3 31 	call	0x63c6	; 0x63c6 <rtc_init>
    7c6e:	81 11       	cpse	r24, r1
    7c70:	27 c0       	rjmp	.+78     	; 0x7cc0 <initialize_clock+0x6e>
    {
        printf("rtc uninitilized\n");
    7c72:	8d ea       	ldi	r24, 0xAD	; 173
    7c74:	96 e0       	ldi	r25, 0x06	; 6
    7c76:	a0 e0       	ldi	r26, 0x00	; 0
    7c78:	ed b7       	in	r30, 0x3d	; 61
    7c7a:	fe b7       	in	r31, 0x3e	; 62
    7c7c:	81 83       	std	Z+1, r24	; 0x01
    7c7e:	92 83       	std	Z+2, r25	; 0x02
    7c80:	a3 83       	std	Z+3, r26	; 0x03
    7c82:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
        printf("attempting rtc init\n");
    7c86:	88 e9       	ldi	r24, 0x98	; 152
    7c88:	96 e0       	ldi	r25, 0x06	; 6
    7c8a:	a0 e0       	ldi	r26, 0x00	; 0
    7c8c:	ed b7       	in	r30, 0x3d	; 61
    7c8e:	fe b7       	in	r31, 0x3e	; 62
    7c90:	81 83       	std	Z+1, r24	; 0x01
    7c92:	92 83       	std	Z+2, r25	; 0x02
    7c94:	a3 83       	std	Z+3, r26	; 0x03
    7c96:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
        if( !rtc_init(1, (time_t) 0) )
    7c9a:	40 e0       	ldi	r20, 0x00	; 0
    7c9c:	50 e0       	ldi	r21, 0x00	; 0
    7c9e:	ba 01       	movw	r22, r20
    7ca0:	81 e0       	ldi	r24, 0x01	; 1
    7ca2:	90 e0       	ldi	r25, 0x00	; 0
    7ca4:	0e 94 e3 31 	call	0x63c6	; 0x63c6 <rtc_init>
    7ca8:	81 11       	cpse	r24, r1
    7caa:	0a c0       	rjmp	.+20     	; 0x7cc0 <initialize_clock+0x6e>
        {
            printf("rtc force init failed\n");
    7cac:	81 e8       	ldi	r24, 0x81	; 129
    7cae:	96 e0       	ldi	r25, 0x06	; 6
    7cb0:	a0 e0       	ldi	r26, 0x00	; 0
    7cb2:	ed b7       	in	r30, 0x3d	; 61
    7cb4:	fe b7       	in	r31, 0x3e	; 62
    7cb6:	81 83       	std	Z+1, r24	; 0x01
    7cb8:	92 83       	std	Z+2, r25	; 0x02
    7cba:	a3 83       	std	Z+3, r26	; 0x03
    7cbc:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
        }
    }

    if(rtc_read(&tc))
    7cc0:	ce 01       	movw	r24, r28
    7cc2:	04 96       	adiw	r24, 0x04	; 4
    7cc4:	0e 94 49 31 	call	0x6292	; 0x6292 <rtc_read>
    7cc8:	88 23       	and	r24, r24
    7cca:	51 f0       	breq	.+20     	; 0x7ce0 <initialize_clock+0x8e>
    {
        seconds = timegm(&tc);
    7ccc:	ce 01       	movw	r24, r28
    7cce:	04 96       	adiw	r24, 0x04	; 4
    7cd0:	fa dc       	rcall	.-1548   	; 0x76c6 <timegm>
    7cd2:	6b 01       	movw	r12, r22
    7cd4:	7c 01       	movw	r14, r24
    }
#else
    printf("NO RTC\n");
    seconds = 0;
#endif                                        // RTC_SUPPORT
    if(!seconds)
    7cd6:	67 2b       	or	r22, r23
    7cd8:	68 2b       	or	r22, r24
    7cda:	69 2b       	or	r22, r25
    7cdc:	c1 f4       	brne	.+48     	; 0x7d0e <initialize_clock+0xbc>
    7cde:	0a c0       	rjmp	.+20     	; 0x7cf4 <initialize_clock+0xa2>
        seconds = timegm(&tc);
    }
    else
    {
        seconds = 0;
        printf("rtc read errorafter init\n");
    7ce0:	87 e6       	ldi	r24, 0x67	; 103
    7ce2:	96 e0       	ldi	r25, 0x06	; 6
    7ce4:	a0 e0       	ldi	r26, 0x00	; 0
    7ce6:	ed b7       	in	r30, 0x3d	; 61
    7ce8:	fe b7       	in	r31, 0x3e	; 62
    7cea:	81 83       	std	Z+1, r24	; 0x01
    7cec:	92 83       	std	Z+2, r25	; 0x02
    7cee:	a3 83       	std	Z+3, r26	; 0x03
    7cf0:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
#else
    printf("NO RTC\n");
    seconds = 0;
#endif                                        // RTC_SUPPORT
    if(!seconds)
        printf("use setdate command to change time\n");
    7cf4:	83 e4       	ldi	r24, 0x43	; 67
    7cf6:	96 e0       	ldi	r25, 0x06	; 6
    7cf8:	a0 e0       	ldi	r26, 0x00	; 0
    7cfa:	ed b7       	in	r30, 0x3d	; 61
    7cfc:	fe b7       	in	r31, 0x3e	; 62
    7cfe:	81 83       	std	Z+1, r24	; 0x01
    7d00:	92 83       	std	Z+2, r25	; 0x02
    7d02:	a3 83       	std	Z+3, r26	; 0x03
    7d04:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
    7d08:	c1 2c       	mov	r12, r1
    7d0a:	d1 2c       	mov	r13, r1
    7d0c:	76 01       	movw	r14, r12
    tz.tz_minuteswest = minwest;
    7d0e:	1b a3       	std	Y+35, r17	; 0x23
    7d10:	0a a3       	std	Y+34, r16	; 0x22
    tz.tz_dsttime = 0;
    7d12:	1d a2       	std	Y+37, r1	; 0x25
    7d14:	1c a2       	std	Y+36, r1	; 0x24
    settimezone( &tz );
    7d16:	ce 01       	movw	r24, r28
    7d18:	82 96       	adiw	r24, 0x22	; 34
    7d1a:	30 da       	rcall	.-2976   	; 0x717c <settimezone>

    ts.tv_sec = seconds;
    7d1c:	ca 8e       	std	Y+26, r12	; 0x1a
    7d1e:	db 8e       	std	Y+27, r13	; 0x1b
    7d20:	ec 8e       	std	Y+28, r14	; 0x1c
    7d22:	fd 8e       	std	Y+29, r15	; 0x1d
    ts.tv_nsec = 0L;
    7d24:	1e 8e       	std	Y+30, r1	; 0x1e
    7d26:	1f 8e       	std	Y+31, r1	; 0x1f
    7d28:	18 a2       	std	Y+32, r1	; 0x20
    7d2a:	19 a2       	std	Y+33, r1	; 0x21
    clock_settime(0, (ts_t *) &ts);
    7d2c:	be 01       	movw	r22, r28
    7d2e:	66 5e       	subi	r22, 0xE6	; 230
    7d30:	7f 4f       	sbci	r23, 0xFF	; 255
    7d32:	80 e0       	ldi	r24, 0x00	; 0
    7d34:	90 e0       	ldi	r25, 0x00	; 0
    7d36:	c7 d8       	rcall	.-3698   	; 0x6ec6 <clock_settime>
}
    7d38:	a5 96       	adiw	r28, 0x25	; 37
    7d3a:	e8 e0       	ldi	r30, 0x08	; 8
    7d3c:	0c 94 ca e8 	jmp	0x1d194	; 0x1d194 <__epilogue_restores__+0x14>

00007d40 <display_clock>:
/// @see: rtc_read
/// @see: timegm()
/// @see: ascitime()
MEMSPACE
void display_clock()
{
    7d40:	a9 e2       	ldi	r26, 0x29	; 41
    7d42:	b0 e0       	ldi	r27, 0x00	; 0
    7d44:	e6 ea       	ldi	r30, 0xA6	; 166
    7d46:	fe e3       	ldi	r31, 0x3E	; 62
    7d48:	0c 94 b4 e8 	jmp	0x1d168	; 0x1d168 <__prologue_saves__+0x20>
    time_t seconds;
    tm_t tc;
    ts_t ts;

#ifdef RTC_SUPPORT
    if(rtc_read(&tc))
    7d4c:	ce 01       	movw	r24, r28
    7d4e:	08 96       	adiw	r24, 0x08	; 8
    7d50:	0e 94 49 31 	call	0x6292	; 0x6292 <rtc_read>
    7d54:	88 23       	and	r24, r24
    7d56:	29 f1       	breq	.+74     	; 0x7da2 <display_clock+0x62>
    {
        seconds = timegm(&tc);
    7d58:	ce 01       	movw	r24, r28
    7d5a:	08 96       	adiw	r24, 0x08	; 8
    7d5c:	b4 dc       	rcall	.-1688   	; 0x76c6 <timegm>
    7d5e:	6e a3       	std	Y+38, r22	; 0x26
    7d60:	7f a3       	std	Y+39, r23	; 0x27
    7d62:	88 a7       	std	Y+40, r24	; 0x28
    7d64:	99 a7       	std	Y+41, r25	; 0x29
        printf("rtc seconds: %lu\n",seconds);
    7d66:	ed b7       	in	r30, 0x3d	; 61
    7d68:	fe b7       	in	r31, 0x3e	; 62
    7d6a:	64 83       	std	Z+4, r22	; 0x04
    7d6c:	75 83       	std	Z+5, r23	; 0x05
    7d6e:	86 83       	std	Z+6, r24	; 0x06
    7d70:	97 83       	std	Z+7, r25	; 0x07
    7d72:	81 e3       	ldi	r24, 0x31	; 49
    7d74:	96 e0       	ldi	r25, 0x06	; 6
    7d76:	a0 e0       	ldi	r26, 0x00	; 0
    7d78:	81 83       	std	Z+1, r24	; 0x01
    7d7a:	92 83       	std	Z+2, r25	; 0x02
    7d7c:	a3 83       	std	Z+3, r26	; 0x03
    7d7e:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
        printf("rtc time:    %s\n",asctime(&tc));
    7d82:	ce 01       	movw	r24, r28
    7d84:	08 96       	adiw	r24, 0x08	; 8
    7d86:	50 df       	rcall	.-352    	; 0x7c28 <asctime>
    7d88:	ed b7       	in	r30, 0x3d	; 61
    7d8a:	fe b7       	in	r31, 0x3e	; 62
    7d8c:	95 83       	std	Z+5, r25	; 0x05
    7d8e:	84 83       	std	Z+4, r24	; 0x04
    7d90:	80 e2       	ldi	r24, 0x20	; 32
    7d92:	96 e0       	ldi	r25, 0x06	; 6
    7d94:	a0 e0       	ldi	r26, 0x00	; 0
    7d96:	81 83       	std	Z+1, r24	; 0x01
    7d98:	92 83       	std	Z+2, r25	; 0x02
    7d9a:	a3 83       	std	Z+3, r26	; 0x03
    7d9c:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
    7da0:	0a c0       	rjmp	.+20     	; 0x7db6 <display_clock+0x76>
            (int) tc.tm_wday);
#endif
    }
    else
    {
        printf("RTC read failed\n");
    7da2:	8f e0       	ldi	r24, 0x0F	; 15
    7da4:	96 e0       	ldi	r25, 0x06	; 6
    7da6:	a0 e0       	ldi	r26, 0x00	; 0
    7da8:	ed b7       	in	r30, 0x3d	; 61
    7daa:	fe b7       	in	r31, 0x3e	; 62
    7dac:	81 83       	std	Z+1, r24	; 0x01
    7dae:	92 83       	std	Z+2, r25	; 0x02
    7db0:	a3 83       	std	Z+3, r26	; 0x03
    7db2:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
    }
#endif                                        // RTC_SUPPORT

    clock_gettime(0, (ts_t *) &ts);
    7db6:	be 01       	movw	r22, r28
    7db8:	62 5e       	subi	r22, 0xE2	; 226
    7dba:	7f 4f       	sbci	r23, 0xFF	; 255
    7dbc:	80 e0       	ldi	r24, 0x00	; 0
    7dbe:	90 e0       	ldi	r25, 0x00	; 0
    7dc0:	0e 94 ba 34 	call	0x6974	; 0x6974 <clock_gettime>
    seconds = ts.tv_sec;
    7dc4:	8e 8d       	ldd	r24, Y+30	; 0x1e
    7dc6:	9f 8d       	ldd	r25, Y+31	; 0x1f
    7dc8:	a8 a1       	ldd	r26, Y+32	; 0x20
    7dca:	b9 a1       	ldd	r27, Y+33	; 0x21
    7dcc:	8e a3       	std	Y+38, r24	; 0x26
    7dce:	9f a3       	std	Y+39, r25	; 0x27
    7dd0:	a8 a7       	std	Y+40, r26	; 0x28
    7dd2:	b9 a7       	std	Y+41, r27	; 0x29
    printf("clk seconds: %lu\n",seconds);
    7dd4:	ed b7       	in	r30, 0x3d	; 61
    7dd6:	fe b7       	in	r31, 0x3e	; 62
    7dd8:	84 83       	std	Z+4, r24	; 0x04
    7dda:	95 83       	std	Z+5, r25	; 0x05
    7ddc:	a6 83       	std	Z+6, r26	; 0x06
    7dde:	b7 83       	std	Z+7, r27	; 0x07
    7de0:	8d ef       	ldi	r24, 0xFD	; 253
    7de2:	95 e0       	ldi	r25, 0x05	; 5
    7de4:	a0 e0       	ldi	r26, 0x00	; 0
    7de6:	81 83       	std	Z+1, r24	; 0x01
    7de8:	92 83       	std	Z+2, r25	; 0x02
    7dea:	a3 83       	std	Z+3, r26	; 0x03
    7dec:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
    printf("clk time:    %s\n", asctime(gmtime(&seconds)));
    7df0:	ce 01       	movw	r24, r28
    7df2:	86 96       	adiw	r24, 0x26	; 38
    7df4:	a9 d9       	rcall	.-3246   	; 0x7148 <gmtime>
    7df6:	18 df       	rcall	.-464    	; 0x7c28 <asctime>
    7df8:	ed b7       	in	r30, 0x3d	; 61
    7dfa:	fe b7       	in	r31, 0x3e	; 62
    7dfc:	95 83       	std	Z+5, r25	; 0x05
    7dfe:	84 83       	std	Z+4, r24	; 0x04
    7e00:	8c ee       	ldi	r24, 0xEC	; 236
    7e02:	95 e0       	ldi	r25, 0x05	; 5
    7e04:	a0 e0       	ldi	r26, 0x00	; 0
    7e06:	81 83       	std	Z+1, r24	; 0x01
    7e08:	92 83       	std	Z+2, r25	; 0x02
    7e0a:	a3 83       	std	Z+3, r26	; 0x03
    7e0c:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
}
    7e10:	a9 96       	adiw	r28, 0x29	; 41
    7e12:	e2 e0       	ldi	r30, 0x02	; 2
    7e14:	0c 94 d0 e8 	jmp	0x1d1a0	; 0x1d1a0 <__epilogue_restores__+0x20>

00007e18 <_putc_buffer_fn>:
    va_start(va, format);
    _printf_fn(&fn, format, va);
    va_end(va);

    return ((int)fn.sent);
}
    7e18:	fc 01       	movw	r30, r24
    7e1a:	84 81       	ldd	r24, Z+4	; 0x04
    7e1c:	95 81       	ldd	r25, Z+5	; 0x05
    7e1e:	00 97       	sbiw	r24, 0x00	; 0
    7e20:	79 f0       	breq	.+30     	; 0x7e40 <_putc_buffer_fn+0x28>
    7e22:	66 23       	and	r22, r22
    7e24:	69 f0       	breq	.+26     	; 0x7e40 <_putc_buffer_fn+0x28>
    7e26:	01 97       	sbiw	r24, 0x01	; 1
    7e28:	95 83       	std	Z+5, r25	; 0x05
    7e2a:	84 83       	std	Z+4, r24	; 0x04
    7e2c:	86 81       	ldd	r24, Z+6	; 0x06
    7e2e:	97 81       	ldd	r25, Z+7	; 0x07
    7e30:	01 96       	adiw	r24, 0x01	; 1
    7e32:	97 83       	std	Z+7, r25	; 0x07
    7e34:	86 83       	std	Z+6, r24	; 0x06
    7e36:	a2 81       	ldd	r26, Z+2	; 0x02
    7e38:	b3 81       	ldd	r27, Z+3	; 0x03
    7e3a:	6d 93       	st	X+, r22
    7e3c:	b3 83       	std	Z+3, r27	; 0x03
    7e3e:	a2 83       	std	Z+2, r26	; 0x02
    7e40:	02 80       	ldd	r0, Z+2	; 0x02
    7e42:	f3 81       	ldd	r31, Z+3	; 0x03
    7e44:	e0 2d       	mov	r30, r0
    7e46:	10 82       	st	Z, r1
    7e48:	08 95       	ret

00007e4a <_putc_fn>:
    7e4a:	fc 01       	movw	r30, r24
    7e4c:	26 81       	ldd	r18, Z+6	; 0x06
    7e4e:	37 81       	ldd	r19, Z+7	; 0x07
    7e50:	2f 5f       	subi	r18, 0xFF	; 255
    7e52:	3f 4f       	sbci	r19, 0xFF	; 255
    7e54:	37 83       	std	Z+7, r19	; 0x07
    7e56:	26 83       	std	Z+6, r18	; 0x06
    7e58:	86 2f       	mov	r24, r22
    7e5a:	90 e0       	ldi	r25, 0x00	; 0
    7e5c:	0c 94 66 77 	jmp	0xeecc	; 0xeecc <putchar>
    7e60:	08 95       	ret

00007e62 <bin2num>:
    7e62:	a0 e0       	ldi	r26, 0x00	; 0
    7e64:	b0 e0       	ldi	r27, 0x00	; 0
    7e66:	e7 e3       	ldi	r30, 0x37	; 55
    7e68:	ff e3       	ldi	r31, 0x3F	; 63
    7e6a:	0c 94 ab e8 	jmp	0x1d156	; 0x1d156 <__prologue_saves__+0xe>
    7e6e:	ea 01       	movw	r28, r20
    7e70:	53 e0       	ldi	r21, 0x03	; 3
    7e72:	ee 0c       	add	r14, r14
    7e74:	ff 1c       	adc	r15, r15
    7e76:	5a 95       	dec	r21
    7e78:	e1 f7       	brne	.-8      	; 0x7e72 <bin2num+0x10>
    7e7a:	fc 01       	movw	r30, r24
    7e7c:	af 01       	movw	r20, r30
    7e7e:	48 1b       	sub	r20, r24
    7e80:	59 0b       	sbc	r21, r25
    7e82:	c4 17       	cp	r28, r20
    7e84:	d5 07       	cpc	r29, r21
    7e86:	14 f0       	brlt	.+4      	; 0x7e8c <bin2num+0x2a>
    7e88:	11 92       	st	Z+, r1
    7e8a:	f8 cf       	rjmp	.-16     	; 0x7e7c <bin2num+0x1a>
    7e8c:	41 e0       	ldi	r20, 0x01	; 1
    7e8e:	e4 1a       	sub	r14, r20
    7e90:	f1 08       	sbc	r15, r1
    7e92:	5b 01       	movw	r10, r22
    7e94:	42 e0       	ldi	r20, 0x02	; 2
    7e96:	a4 1a       	sub	r10, r20
    7e98:	b1 08       	sbc	r11, r1
    7e9a:	f7 fc       	sbrc	r15, 7
    7e9c:	3b c0       	rjmp	.+118    	; 0x7f14 <bin2num+0xb2>
    7e9e:	f7 01       	movw	r30, r14
    7ea0:	43 e0       	ldi	r20, 0x03	; 3
    7ea2:	f5 95       	asr	r31
    7ea4:	e7 95       	ror	r30
    7ea6:	4a 95       	dec	r20
    7ea8:	e1 f7       	brne	.-8      	; 0x7ea2 <bin2num+0x40>
    7eaa:	e0 0f       	add	r30, r16
    7eac:	f1 1f       	adc	r31, r17
    7eae:	40 81       	ld	r20, Z
    7eb0:	50 e0       	ldi	r21, 0x00	; 0
    7eb2:	f7 01       	movw	r30, r14
    7eb4:	e7 70       	andi	r30, 0x07	; 7
    7eb6:	ff 27       	eor	r31, r31
    7eb8:	02 c0       	rjmp	.+4      	; 0x7ebe <bin2num+0x5c>
    7eba:	55 95       	asr	r21
    7ebc:	47 95       	ror	r20
    7ebe:	ea 95       	dec	r30
    7ec0:	e2 f7       	brpl	.-8      	; 0x7eba <bin2num+0x58>
    7ec2:	41 70       	andi	r20, 0x01	; 1
    7ec4:	55 27       	eor	r21, r21
    7ec6:	dc 01       	movw	r26, r24
    7ec8:	e0 e0       	ldi	r30, 0x00	; 0
    7eca:	f0 e0       	ldi	r31, 0x00	; 0
    7ecc:	ec 17       	cp	r30, r28
    7ece:	fd 07       	cpc	r31, r29
    7ed0:	ec f4       	brge	.+58     	; 0x7f0c <bin2num+0xaa>
    7ed2:	ea 15       	cp	r30, r10
    7ed4:	fb 05       	cpc	r31, r11
    7ed6:	4c f0       	brlt	.+18     	; 0x7eea <bin2num+0x88>
    7ed8:	dc 01       	movw	r26, r24
    7eda:	ae 0f       	add	r26, r30
    7edc:	bf 1f       	adc	r27, r31
    7ede:	1c 92       	st	X, r1
    7ee0:	41 e0       	ldi	r20, 0x01	; 1
    7ee2:	e4 1a       	sub	r14, r20
    7ee4:	f1 08       	sbc	r15, r1
    7ee6:	ef 01       	movw	r28, r30
    7ee8:	d8 cf       	rjmp	.-80     	; 0x7e9a <bin2num+0x38>
    7eea:	9c 90       	ld	r9, X
    7eec:	99 0c       	add	r9, r9
    7eee:	94 2a       	or	r9, r20
    7ef0:	49 2d       	mov	r20, r9
    7ef2:	50 e0       	ldi	r21, 0x00	; 0
    7ef4:	42 17       	cp	r20, r18
    7ef6:	53 07       	cpc	r21, r19
    7ef8:	24 f0       	brlt	.+8      	; 0x7f02 <bin2num+0xa0>
    7efa:	92 1a       	sub	r9, r18
    7efc:	41 e0       	ldi	r20, 0x01	; 1
    7efe:	50 e0       	ldi	r21, 0x00	; 0
    7f00:	02 c0       	rjmp	.+4      	; 0x7f06 <bin2num+0xa4>
    7f02:	40 e0       	ldi	r20, 0x00	; 0
    7f04:	50 e0       	ldi	r21, 0x00	; 0
    7f06:	9d 92       	st	X+, r9
    7f08:	31 96       	adiw	r30, 0x01	; 1
    7f0a:	e0 cf       	rjmp	.-64     	; 0x7ecc <bin2num+0x6a>
    7f0c:	41 15       	cp	r20, r1
    7f0e:	51 05       	cpc	r21, r1
    7f10:	01 f7       	brne	.-64     	; 0x7ed2 <bin2num+0x70>
    7f12:	e2 cf       	rjmp	.-60     	; 0x7ed8 <bin2num+0x76>
    7f14:	fc 01       	movw	r30, r24
    7f16:	9f 01       	movw	r18, r30
    7f18:	28 1b       	sub	r18, r24
    7f1a:	39 0b       	sbc	r19, r25
    7f1c:	2c 17       	cp	r18, r28
    7f1e:	3d 07       	cpc	r19, r29
    7f20:	4c f4       	brge	.+18     	; 0x7f34 <bin2num+0xd2>
    7f22:	20 81       	ld	r18, Z
    7f24:	2a 30       	cpi	r18, 0x0A	; 10
    7f26:	10 f4       	brcc	.+4      	; 0x7f2c <bin2num+0xca>
    7f28:	20 5d       	subi	r18, 0xD0	; 208
    7f2a:	01 c0       	rjmp	.+2      	; 0x7f2e <bin2num+0xcc>
    7f2c:	29 5a       	subi	r18, 0xA9	; 169
    7f2e:	20 83       	st	Z, r18
    7f30:	31 96       	adiw	r30, 0x01	; 1
    7f32:	f1 cf       	rjmp	.-30     	; 0x7f16 <bin2num+0xb4>
    7f34:	9e 01       	movw	r18, r28
    7f36:	d7 ff       	sbrs	r29, 7
    7f38:	02 c0       	rjmp	.+4      	; 0x7f3e <bin2num+0xdc>
    7f3a:	20 e0       	ldi	r18, 0x00	; 0
    7f3c:	30 e0       	ldi	r19, 0x00	; 0
    7f3e:	c1 14       	cp	r12, r1
    7f40:	d1 04       	cpc	r13, r1
    7f42:	61 f0       	breq	.+24     	; 0x7f5c <bin2num+0xfa>
    7f44:	61 50       	subi	r22, 0x01	; 1
    7f46:	71 09       	sbc	r23, r1
    7f48:	26 17       	cp	r18, r22
    7f4a:	37 07       	cpc	r19, r23
    7f4c:	3c f4       	brge	.+14     	; 0x7f5c <bin2num+0xfa>
    7f4e:	fc 01       	movw	r30, r24
    7f50:	e2 0f       	add	r30, r18
    7f52:	f3 1f       	adc	r31, r19
    7f54:	c0 82       	st	Z, r12
    7f56:	21 96       	adiw	r28, 0x01	; 1
    7f58:	2f 5f       	subi	r18, 0xFF	; 255
    7f5a:	3f 4f       	sbci	r19, 0xFF	; 255
    7f5c:	fc 01       	movw	r30, r24
    7f5e:	e2 0f       	add	r30, r18
    7f60:	f3 1f       	adc	r31, r19
    7f62:	10 82       	st	Z, r1
    7f64:	0e 94 71 32 	call	0x64e2	; 0x64e2 <reverse>
    7f68:	ce 01       	movw	r24, r28
    7f6a:	cd b7       	in	r28, 0x3d	; 61
    7f6c:	de b7       	in	r29, 0x3e	; 62
    7f6e:	eb e0       	ldi	r30, 0x0B	; 11
    7f70:	0c 94 c7 e8 	jmp	0x1d18e	; 0x1d18e <__epilogue_restores__+0xe>

00007f74 <pch>:
    7f74:	fc 01       	movw	r30, r24
    7f76:	22 81       	ldd	r18, Z+2	; 0x02
    7f78:	33 81       	ldd	r19, Z+3	; 0x03
    7f7a:	44 81       	ldd	r20, Z+4	; 0x04
    7f7c:	55 81       	ldd	r21, Z+5	; 0x05
    7f7e:	80 81       	ld	r24, Z
    7f80:	91 81       	ldd	r25, Z+1	; 0x01
    7f82:	24 17       	cp	r18, r20
    7f84:	35 07       	cpc	r19, r21
    7f86:	54 f4       	brge	.+20     	; 0x7f9c <pch+0x28>
    7f88:	a9 01       	movw	r20, r18
    7f8a:	4f 5f       	subi	r20, 0xFF	; 255
    7f8c:	5f 4f       	sbci	r21, 0xFF	; 255
    7f8e:	53 83       	std	Z+3, r21	; 0x03
    7f90:	42 83       	std	Z+2, r20	; 0x02
    7f92:	dc 01       	movw	r26, r24
    7f94:	a2 0f       	add	r26, r18
    7f96:	b3 1f       	adc	r27, r19
    7f98:	6c 93       	st	X, r22
    7f9a:	04 c0       	rjmp	.+8      	; 0x7fa4 <pch+0x30>
    7f9c:	dc 01       	movw	r26, r24
    7f9e:	a2 0f       	add	r26, r18
    7fa0:	b3 1f       	adc	r27, r19
    7fa2:	1c 92       	st	X, r1
    7fa4:	82 81       	ldd	r24, Z+2	; 0x02
    7fa6:	93 81       	ldd	r25, Z+3	; 0x03
    7fa8:	08 95       	ret

00007faa <p_ntoa>:
    7faa:	af 92       	push	r10
    7fac:	cf 92       	push	r12
    7fae:	df 92       	push	r13
    7fb0:	ef 92       	push	r14
    7fb2:	ff 92       	push	r15
    7fb4:	0f 93       	push	r16
    7fb6:	1f 93       	push	r17
    7fb8:	cf 93       	push	r28
    7fba:	df 93       	push	r29
    7fbc:	dc 01       	movw	r26, r24
    7fbe:	eb 01       	movw	r28, r22
    7fc0:	fa 01       	movw	r30, r20
    7fc2:	b9 01       	movw	r22, r18
    7fc4:	98 01       	movw	r18, r16
    7fc6:	a6 01       	movw	r20, r12
    7fc8:	9a 2d       	mov	r25, r10
    7fca:	a5 fa       	bst	r10, 5
    7fcc:	cc 24       	eor	r12, r12
    7fce:	c0 f8       	bld	r12, 0
    7fd0:	a6 fc       	sbrc	r10, 6
    7fd2:	07 c0       	rjmp	.+14     	; 0x7fe2 <p_ntoa+0x38>
    7fd4:	a2 fc       	sbrc	r10, 2
    7fd6:	08 c0       	rjmp	.+16     	; 0x7fe8 <p_ntoa+0x3e>
    7fd8:	a4 fe       	sbrs	r10, 4
    7fda:	09 c0       	rjmp	.+18     	; 0x7fee <p_ntoa+0x44>
    7fdc:	00 e2       	ldi	r16, 0x20	; 32
    7fde:	10 e0       	ldi	r17, 0x00	; 0
    7fe0:	08 c0       	rjmp	.+16     	; 0x7ff2 <p_ntoa+0x48>
    7fe2:	0d e2       	ldi	r16, 0x2D	; 45
    7fe4:	10 e0       	ldi	r17, 0x00	; 0
    7fe6:	05 c0       	rjmp	.+10     	; 0x7ff2 <p_ntoa+0x48>
    7fe8:	0b e2       	ldi	r16, 0x2B	; 43
    7fea:	10 e0       	ldi	r17, 0x00	; 0
    7fec:	02 c0       	rjmp	.+4      	; 0x7ff2 <p_ntoa+0x48>
    7fee:	00 e0       	ldi	r16, 0x00	; 0
    7ff0:	10 e0       	ldi	r17, 0x00	; 0
    7ff2:	95 ff       	sbrs	r25, 5
    7ff4:	04 c0       	rjmp	.+8      	; 0x7ffe <p_ntoa+0x54>
    7ff6:	89 2f       	mov	r24, r25
    7ff8:	8a 70       	andi	r24, 0x0A	; 10
    7ffa:	09 f0       	breq	.+2      	; 0x7ffe <p_ntoa+0x54>
    7ffc:	c1 2c       	mov	r12, r1
    7ffe:	c0 fa       	bst	r12, 0
    8000:	95 f9       	bld	r25, 5
    8002:	89 2f       	mov	r24, r25
    8004:	82 70       	andi	r24, 0x02	; 2
    8006:	c8 2e       	mov	r12, r24
    8008:	91 fd       	sbrc	r25, 1
    800a:	02 c0       	rjmp	.+4      	; 0x8010 <p_ntoa+0x66>
    800c:	40 e0       	ldi	r20, 0x00	; 0
    800e:	50 e0       	ldi	r21, 0x00	; 0
    8010:	89 2f       	mov	r24, r25
    8012:	83 70       	andi	r24, 0x03	; 3
    8014:	11 f4       	brne	.+4      	; 0x801a <p_ntoa+0x70>
    8016:	41 e0       	ldi	r20, 0x01	; 1
    8018:	50 e0       	ldi	r21, 0x00	; 0
    801a:	90 ff       	sbrs	r25, 0
    801c:	0c c0       	rjmp	.+24     	; 0x8036 <p_ntoa+0x8c>
    801e:	95 fd       	sbrc	r25, 5
    8020:	05 c0       	rjmp	.+10     	; 0x802c <p_ntoa+0x82>
    8022:	c1 10       	cpse	r12, r1
    8024:	08 c0       	rjmp	.+16     	; 0x8036 <p_ntoa+0x8c>
    8026:	41 e0       	ldi	r20, 0x01	; 1
    8028:	50 e0       	ldi	r21, 0x00	; 0
    802a:	05 c0       	rjmp	.+10     	; 0x8036 <p_ntoa+0x8c>
    802c:	94 75       	andi	r25, 0x54	; 84
    802e:	a7 01       	movw	r20, r14
    8030:	11 f0       	breq	.+4      	; 0x8036 <p_ntoa+0x8c>
    8032:	41 50       	subi	r20, 0x01	; 1
    8034:	51 09       	sbc	r21, r1
    8036:	68 01       	movw	r12, r16
    8038:	7e 01       	movw	r14, r28
    803a:	8d 01       	movw	r16, r26
    803c:	cf 01       	movw	r24, r30
    803e:	11 df       	rcall	.-478    	; 0x7e62 <bin2num>
    8040:	df 91       	pop	r29
    8042:	cf 91       	pop	r28
    8044:	1f 91       	pop	r17
    8046:	0f 91       	pop	r16
    8048:	ff 90       	pop	r15
    804a:	ef 90       	pop	r14
    804c:	df 90       	pop	r13
    804e:	cf 90       	pop	r12
    8050:	af 90       	pop	r10
    8052:	08 95       	ret

00008054 <p_ftoa>:
    8054:	aa e0       	ldi	r26, 0x0A	; 10
    8056:	b0 e0       	ldi	r27, 0x00	; 0
    8058:	e0 e3       	ldi	r30, 0x30	; 48
    805a:	f0 e4       	ldi	r31, 0x40	; 64
    805c:	0c 94 a4 e8 	jmp	0x1d148	; 0x1d148 <__prologue_saves__>
    8060:	4b 01       	movw	r8, r22
    8062:	5c 01       	movw	r10, r24
    8064:	1a 01       	movw	r2, r20
    8066:	28 01       	movw	r4, r16
    8068:	c6 fa       	bst	r12, 6
    806a:	11 27       	eor	r17, r17
    806c:	10 f9       	bld	r17, 0
    806e:	5a 83       	std	Y+2, r21	; 0x02
    8070:	49 83       	std	Y+1, r20	; 0x01
    8072:	1c 82       	std	Y+4, r1	; 0x04
    8074:	1b 82       	std	Y+3, r1	; 0x03
    8076:	21 50       	subi	r18, 0x01	; 1
    8078:	31 09       	sbc	r19, r1
    807a:	3e 83       	std	Y+6, r19	; 0x06
    807c:	2d 83       	std	Y+5, r18	; 0x05
    807e:	fa 01       	movw	r30, r20
    8080:	10 82       	st	Z, r1
    8082:	20 e0       	ldi	r18, 0x00	; 0
    8084:	30 e0       	ldi	r19, 0x00	; 0
    8086:	a9 01       	movw	r20, r18
    8088:	0e 94 62 e9 	call	0x1d2c4	; 0x1d2c4 <__cmpsf2>
    808c:	87 ff       	sbrs	r24, 7
    808e:	05 c0       	rjmp	.+10     	; 0x809a <p_ftoa+0x46>
    8090:	b7 fa       	bst	r11, 7
    8092:	b0 94       	com	r11
    8094:	b7 f8       	bld	r11, 7
    8096:	b0 94       	com	r11
    8098:	11 e0       	ldi	r17, 0x01	; 1
    809a:	10 fb       	bst	r17, 0
    809c:	c6 f8       	bld	r12, 6
    809e:	c6 fe       	sbrs	r12, 6
    80a0:	02 c0       	rjmp	.+4      	; 0x80a6 <p_ftoa+0x52>
    80a2:	6d e2       	ldi	r22, 0x2D	; 45
    80a4:	07 c0       	rjmp	.+14     	; 0x80b4 <p_ftoa+0x60>
    80a6:	c2 fe       	sbrs	r12, 2
    80a8:	02 c0       	rjmp	.+4      	; 0x80ae <p_ftoa+0x5a>
    80aa:	6b e2       	ldi	r22, 0x2B	; 43
    80ac:	03 c0       	rjmp	.+6      	; 0x80b4 <p_ftoa+0x60>
    80ae:	c4 fe       	sbrs	r12, 4
    80b0:	04 c0       	rjmp	.+8      	; 0x80ba <p_ftoa+0x66>
    80b2:	60 e2       	ldi	r22, 0x20	; 32
    80b4:	ce 01       	movw	r24, r28
    80b6:	01 96       	adiw	r24, 0x01	; 1
    80b8:	5d df       	rcall	.-326    	; 0x7f74 <pch>
    80ba:	37 01       	movw	r6, r14
    80bc:	f7 fe       	sbrs	r15, 7
    80be:	02 c0       	rjmp	.+4      	; 0x80c4 <p_ftoa+0x70>
    80c0:	61 2c       	mov	r6, r1
    80c2:	71 2c       	mov	r7, r1
    80c4:	20 e0       	ldi	r18, 0x00	; 0
    80c6:	30 e0       	ldi	r19, 0x00	; 0
    80c8:	a9 01       	movw	r20, r18
    80ca:	c5 01       	movw	r24, r10
    80cc:	b4 01       	movw	r22, r8
    80ce:	0e 94 62 e9 	call	0x1d2c4	; 0x1d2c4 <__cmpsf2>
    80d2:	88 23       	and	r24, r24
    80d4:	d1 f1       	breq	.+116    	; 0x814a <p_ftoa+0xf6>
    80d6:	c1 fe       	sbrs	r12, 1
    80d8:	11 c0       	rjmp	.+34     	; 0x80fc <p_ftoa+0xa8>
    80da:	83 01       	movw	r16, r6
    80dc:	60 e0       	ldi	r22, 0x00	; 0
    80de:	70 e0       	ldi	r23, 0x00	; 0
    80e0:	80 e0       	ldi	r24, 0x00	; 0
    80e2:	9f e3       	ldi	r25, 0x3F	; 63
    80e4:	01 15       	cp	r16, r1
    80e6:	11 05       	cpc	r17, r1
    80e8:	69 f0       	breq	.+26     	; 0x8104 <p_ftoa+0xb0>
    80ea:	20 e0       	ldi	r18, 0x00	; 0
    80ec:	30 e0       	ldi	r19, 0x00	; 0
    80ee:	40 e2       	ldi	r20, 0x20	; 32
    80f0:	51 e4       	ldi	r21, 0x41	; 65
    80f2:	0e 94 66 e9 	call	0x1d2cc	; 0x1d2cc <__divsf3>
    80f6:	01 50       	subi	r16, 0x01	; 1
    80f8:	11 09       	sbc	r17, r1
    80fa:	f4 cf       	rjmp	.-24     	; 0x80e4 <p_ftoa+0x90>
    80fc:	60 e0       	ldi	r22, 0x00	; 0
    80fe:	70 e0       	ldi	r23, 0x00	; 0
    8100:	80 e0       	ldi	r24, 0x00	; 0
    8102:	9f e3       	ldi	r25, 0x3F	; 63
    8104:	9b 01       	movw	r18, r22
    8106:	ac 01       	movw	r20, r24
    8108:	c5 01       	movw	r24, r10
    810a:	b4 01       	movw	r22, r8
    810c:	0e 94 fe e8 	call	0x1d1fc	; 0x1d1fc <__addsf3>
    8110:	4b 01       	movw	r8, r22
    8112:	5c 01       	movw	r10, r24
    8114:	ee 24       	eor	r14, r14
    8116:	e3 94       	inc	r14
    8118:	f1 2c       	mov	r15, r1
    811a:	20 e0       	ldi	r18, 0x00	; 0
    811c:	30 e0       	ldi	r19, 0x00	; 0
    811e:	40 e2       	ldi	r20, 0x20	; 32
    8120:	51 e4       	ldi	r21, 0x41	; 65
    8122:	c5 01       	movw	r24, r10
    8124:	b4 01       	movw	r22, r8
    8126:	0e 94 b1 ea 	call	0x1d562	; 0x1d562 <__gesf2>
    812a:	87 fd       	sbrc	r24, 7
    812c:	11 c0       	rjmp	.+34     	; 0x8150 <p_ftoa+0xfc>
    812e:	ff ef       	ldi	r31, 0xFF	; 255
    8130:	ef 1a       	sub	r14, r31
    8132:	ff 0a       	sbc	r15, r31
    8134:	20 e0       	ldi	r18, 0x00	; 0
    8136:	30 e0       	ldi	r19, 0x00	; 0
    8138:	40 e2       	ldi	r20, 0x20	; 32
    813a:	51 e4       	ldi	r21, 0x41	; 65
    813c:	c5 01       	movw	r24, r10
    813e:	b4 01       	movw	r22, r8
    8140:	0e 94 66 e9 	call	0x1d2cc	; 0x1d2cc <__divsf3>
    8144:	4b 01       	movw	r8, r22
    8146:	5c 01       	movw	r10, r24
    8148:	e8 cf       	rjmp	.-48     	; 0x811a <p_ftoa+0xc6>
    814a:	ee 24       	eor	r14, r14
    814c:	e3 94       	inc	r14
    814e:	f1 2c       	mov	r15, r1
    8150:	8c 2d       	mov	r24, r12
    8152:	88 72       	andi	r24, 0x28	; 40
    8154:	80 32       	cpi	r24, 0x20	; 32
    8156:	c1 f4       	brne	.+48     	; 0x8188 <p_ftoa+0x134>
    8158:	82 01       	movw	r16, r4
    815a:	0e 19       	sub	r16, r14
    815c:	1f 09       	sbc	r17, r15
    815e:	8b 81       	ldd	r24, Y+3	; 0x03
    8160:	9c 81       	ldd	r25, Y+4	; 0x04
    8162:	08 1b       	sub	r16, r24
    8164:	19 0b       	sbc	r17, r25
    8166:	c1 fe       	sbrs	r12, 1
    8168:	07 c0       	rjmp	.+14     	; 0x8178 <p_ftoa+0x124>
    816a:	61 14       	cp	r6, r1
    816c:	71 04       	cpc	r7, r1
    816e:	21 f0       	breq	.+8      	; 0x8178 <p_ftoa+0x124>
    8170:	06 19       	sub	r16, r6
    8172:	17 09       	sbc	r17, r7
    8174:	01 50       	subi	r16, 0x01	; 1
    8176:	11 09       	sbc	r17, r1
    8178:	10 16       	cp	r1, r16
    817a:	11 06       	cpc	r1, r17
    817c:	2c f4       	brge	.+10     	; 0x8188 <p_ftoa+0x134>
    817e:	60 e3       	ldi	r22, 0x30	; 48
    8180:	ce 01       	movw	r24, r28
    8182:	01 96       	adiw	r24, 0x01	; 1
    8184:	f7 de       	rcall	.-530    	; 0x7f74 <pch>
    8186:	f6 cf       	rjmp	.-20     	; 0x8174 <p_ftoa+0x120>
    8188:	c5 01       	movw	r24, r10
    818a:	b4 01       	movw	r22, r8
    818c:	0e 94 ce e9 	call	0x1d39c	; 0x1d39c <__fixsfsi>
    8190:	6f 83       	std	Y+7, r22	; 0x07
    8192:	78 87       	std	Y+8, r23	; 0x08
    8194:	89 87       	std	Y+9, r24	; 0x09
    8196:	9a 87       	std	Y+10, r25	; 0x0a
    8198:	6f 81       	ldd	r22, Y+7	; 0x07
    819a:	60 5d       	subi	r22, 0xD0	; 208
    819c:	ce 01       	movw	r24, r28
    819e:	01 96       	adiw	r24, 0x01	; 1
    81a0:	e9 de       	rcall	.-558    	; 0x7f74 <pch>
    81a2:	2f 81       	ldd	r18, Y+7	; 0x07
    81a4:	38 85       	ldd	r19, Y+8	; 0x08
    81a6:	b9 01       	movw	r22, r18
    81a8:	33 0f       	add	r19, r19
    81aa:	88 0b       	sbc	r24, r24
    81ac:	99 0b       	sbc	r25, r25
    81ae:	0e 94 01 ea 	call	0x1d402	; 0x1d402 <__floatsisf>
    81b2:	9b 01       	movw	r18, r22
    81b4:	ac 01       	movw	r20, r24
    81b6:	c5 01       	movw	r24, r10
    81b8:	b4 01       	movw	r22, r8
    81ba:	0e 94 fd e8 	call	0x1d1fa	; 0x1d1fa <__subsf3>
    81be:	31 e0       	ldi	r19, 0x01	; 1
    81c0:	e3 1a       	sub	r14, r19
    81c2:	f1 08       	sbc	r15, r1
    81c4:	20 e0       	ldi	r18, 0x00	; 0
    81c6:	30 e0       	ldi	r19, 0x00	; 0
    81c8:	40 e2       	ldi	r20, 0x20	; 32
    81ca:	51 e4       	ldi	r21, 0x41	; 65
    81cc:	0e 94 b5 ea 	call	0x1d56a	; 0x1d56a <__mulsf3>
    81d0:	4b 01       	movw	r8, r22
    81d2:	5c 01       	movw	r10, r24
    81d4:	e1 14       	cp	r14, r1
    81d6:	f1 04       	cpc	r15, r1
    81d8:	b9 f6       	brne	.-82     	; 0x8188 <p_ftoa+0x134>
    81da:	c1 fc       	sbrc	r12, 1
    81dc:	10 c0       	rjmp	.+32     	; 0x81fe <p_ftoa+0x1aa>
    81de:	60 e0       	ldi	r22, 0x00	; 0
    81e0:	ce 01       	movw	r24, r28
    81e2:	01 96       	adiw	r24, 0x01	; 1
    81e4:	c7 de       	rcall	.-626    	; 0x7f74 <pch>
    81e6:	f1 01       	movw	r30, r2
    81e8:	01 90       	ld	r0, Z+
    81ea:	00 20       	and	r0, r0
    81ec:	e9 f7       	brne	.-6      	; 0x81e8 <p_ftoa+0x194>
    81ee:	31 97       	sbiw	r30, 0x01	; 1
    81f0:	cf 01       	movw	r24, r30
    81f2:	82 19       	sub	r24, r2
    81f4:	93 09       	sbc	r25, r3
    81f6:	2a 96       	adiw	r28, 0x0a	; 10
    81f8:	e2 e1       	ldi	r30, 0x12	; 18
    81fa:	0c 94 c0 e8 	jmp	0x1d180	; 0x1d180 <__epilogue_restores__>
    81fe:	61 14       	cp	r6, r1
    8200:	71 04       	cpc	r7, r1
    8202:	69 f3       	breq	.-38     	; 0x81de <p_ftoa+0x18a>
    8204:	6e e2       	ldi	r22, 0x2E	; 46
    8206:	ce 01       	movw	r24, r28
    8208:	01 96       	adiw	r24, 0x01	; 1
    820a:	b4 de       	rcall	.-664    	; 0x7f74 <pch>
    820c:	c5 01       	movw	r24, r10
    820e:	b4 01       	movw	r22, r8
    8210:	0e 94 ce e9 	call	0x1d39c	; 0x1d39c <__fixsfsi>
    8214:	6b 01       	movw	r12, r22
    8216:	7c 01       	movw	r14, r24
    8218:	07 2e       	mov	r0, r23
    821a:	00 0c       	add	r0, r0
    821c:	88 0b       	sbc	r24, r24
    821e:	99 0b       	sbc	r25, r25
    8220:	0e 94 01 ea 	call	0x1d402	; 0x1d402 <__floatsisf>
    8224:	9b 01       	movw	r18, r22
    8226:	ac 01       	movw	r20, r24
    8228:	c5 01       	movw	r24, r10
    822a:	b4 01       	movw	r22, r8
    822c:	0e 94 fd e8 	call	0x1d1fa	; 0x1d1fa <__subsf3>
    8230:	4b 01       	movw	r8, r22
    8232:	5c 01       	movw	r10, r24
    8234:	b6 01       	movw	r22, r12
    8236:	60 5d       	subi	r22, 0xD0	; 208
    8238:	7f 4f       	sbci	r23, 0xFF	; 255
    823a:	ce 01       	movw	r24, r28
    823c:	01 96       	adiw	r24, 0x01	; 1
    823e:	9a de       	rcall	.-716    	; 0x7f74 <pch>
    8240:	81 e0       	ldi	r24, 0x01	; 1
    8242:	68 1a       	sub	r6, r24
    8244:	71 08       	sbc	r7, r1
    8246:	20 e0       	ldi	r18, 0x00	; 0
    8248:	30 e0       	ldi	r19, 0x00	; 0
    824a:	40 e2       	ldi	r20, 0x20	; 32
    824c:	51 e4       	ldi	r21, 0x41	; 65
    824e:	c5 01       	movw	r24, r10
    8250:	b4 01       	movw	r22, r8
    8252:	0e 94 b5 ea 	call	0x1d56a	; 0x1d56a <__mulsf3>
    8256:	4b 01       	movw	r8, r22
    8258:	5c 01       	movw	r10, r24
    825a:	61 14       	cp	r6, r1
    825c:	71 04       	cpc	r7, r1
    825e:	b1 f6       	brne	.-84     	; 0x820c <p_ftoa+0x1b8>
    8260:	be cf       	rjmp	.-132    	; 0x81de <p_ftoa+0x18a>

00008262 <p_etoa>:
    8262:	a3 e1       	ldi	r26, 0x13	; 19
    8264:	b0 e0       	ldi	r27, 0x00	; 0
    8266:	e7 e3       	ldi	r30, 0x37	; 55
    8268:	f1 e4       	ldi	r31, 0x41	; 65
    826a:	0c 94 a4 e8 	jmp	0x1d148	; 0x1d148 <__prologue_saves__>
    826e:	4b 01       	movw	r8, r22
    8270:	5c 01       	movw	r10, r24
    8272:	59 8b       	std	Y+17, r21	; 0x11
    8274:	48 8b       	std	Y+16, r20	; 0x10
    8276:	1b 8b       	std	Y+19, r17	; 0x13
    8278:	0a 8b       	std	Y+18, r16	; 0x12
    827a:	3c 2c       	mov	r3, r12
    827c:	c6 fa       	bst	r12, 6
    827e:	11 27       	eor	r17, r17
    8280:	10 f9       	bld	r17, 0
    8282:	59 87       	std	Y+9, r21	; 0x09
    8284:	48 87       	std	Y+8, r20	; 0x08
    8286:	1b 86       	std	Y+11, r1	; 0x0b
    8288:	1a 86       	std	Y+10, r1	; 0x0a
    828a:	21 50       	subi	r18, 0x01	; 1
    828c:	31 09       	sbc	r19, r1
    828e:	3d 87       	std	Y+13, r19	; 0x0d
    8290:	2c 87       	std	Y+12, r18	; 0x0c
    8292:	fa 01       	movw	r30, r20
    8294:	10 82       	st	Z, r1
    8296:	20 e0       	ldi	r18, 0x00	; 0
    8298:	30 e0       	ldi	r19, 0x00	; 0
    829a:	a9 01       	movw	r20, r18
    829c:	0e 94 62 e9 	call	0x1d2c4	; 0x1d2c4 <__cmpsf2>
    82a0:	87 ff       	sbrs	r24, 7
    82a2:	05 c0       	rjmp	.+10     	; 0x82ae <p_etoa+0x4c>
    82a4:	b7 fa       	bst	r11, 7
    82a6:	b0 94       	com	r11
    82a8:	b7 f8       	bld	r11, 7
    82aa:	b0 94       	com	r11
    82ac:	11 e0       	ldi	r17, 0x01	; 1
    82ae:	10 fb       	bst	r17, 0
    82b0:	36 f8       	bld	r3, 6
    82b2:	36 fe       	sbrs	r3, 6
    82b4:	02 c0       	rjmp	.+4      	; 0x82ba <p_etoa+0x58>
    82b6:	6d e2       	ldi	r22, 0x2D	; 45
    82b8:	07 c0       	rjmp	.+14     	; 0x82c8 <p_etoa+0x66>
    82ba:	32 fe       	sbrs	r3, 2
    82bc:	02 c0       	rjmp	.+4      	; 0x82c2 <p_etoa+0x60>
    82be:	6b e2       	ldi	r22, 0x2B	; 43
    82c0:	03 c0       	rjmp	.+6      	; 0x82c8 <p_etoa+0x66>
    82c2:	34 fe       	sbrs	r3, 4
    82c4:	04 c0       	rjmp	.+8      	; 0x82ce <p_etoa+0x6c>
    82c6:	60 e2       	ldi	r22, 0x20	; 32
    82c8:	ce 01       	movw	r24, r28
    82ca:	08 96       	adiw	r24, 0x08	; 8
    82cc:	53 de       	rcall	.-858    	; 0x7f74 <pch>
    82ce:	37 01       	movw	r6, r14
    82d0:	f7 fe       	sbrs	r15, 7
    82d2:	02 c0       	rjmp	.+4      	; 0x82d8 <p_etoa+0x76>
    82d4:	61 2c       	mov	r6, r1
    82d6:	71 2c       	mov	r7, r1
    82d8:	1f 86       	std	Y+15, r1	; 0x0f
    82da:	1e 86       	std	Y+14, r1	; 0x0e
    82dc:	20 e0       	ldi	r18, 0x00	; 0
    82de:	30 e0       	ldi	r19, 0x00	; 0
    82e0:	a9 01       	movw	r20, r18
    82e2:	c5 01       	movw	r24, r10
    82e4:	b4 01       	movw	r22, r8
    82e6:	0e 94 62 e9 	call	0x1d2c4	; 0x1d2c4 <__cmpsf2>
    82ea:	f3 2d       	mov	r31, r3
    82ec:	f2 70       	andi	r31, 0x02	; 2
    82ee:	2f 2e       	mov	r2, r31
    82f0:	88 23       	and	r24, r24
    82f2:	09 f4       	brne	.+2      	; 0x82f6 <p_etoa+0x94>
    82f4:	70 c0       	rjmp	.+224    	; 0x83d6 <p_etoa+0x174>
    82f6:	ff 23       	and	r31, r31
    82f8:	b1 f0       	breq	.+44     	; 0x8326 <p_etoa+0xc4>
    82fa:	83 01       	movw	r16, r6
    82fc:	c1 2c       	mov	r12, r1
    82fe:	d1 2c       	mov	r13, r1
    8300:	e1 2c       	mov	r14, r1
    8302:	2f e3       	ldi	r18, 0x3F	; 63
    8304:	f2 2e       	mov	r15, r18
    8306:	01 15       	cp	r16, r1
    8308:	11 05       	cpc	r17, r1
    830a:	91 f0       	breq	.+36     	; 0x8330 <p_etoa+0xce>
    830c:	20 e0       	ldi	r18, 0x00	; 0
    830e:	30 e0       	ldi	r19, 0x00	; 0
    8310:	40 e2       	ldi	r20, 0x20	; 32
    8312:	51 e4       	ldi	r21, 0x41	; 65
    8314:	c7 01       	movw	r24, r14
    8316:	b6 01       	movw	r22, r12
    8318:	0e 94 66 e9 	call	0x1d2cc	; 0x1d2cc <__divsf3>
    831c:	6b 01       	movw	r12, r22
    831e:	7c 01       	movw	r14, r24
    8320:	01 50       	subi	r16, 0x01	; 1
    8322:	11 09       	sbc	r17, r1
    8324:	f0 cf       	rjmp	.-32     	; 0x8306 <p_etoa+0xa4>
    8326:	c1 2c       	mov	r12, r1
    8328:	d1 2c       	mov	r13, r1
    832a:	e1 2c       	mov	r14, r1
    832c:	9f e3       	ldi	r25, 0x3F	; 63
    832e:	f9 2e       	mov	r15, r25
    8330:	41 2c       	mov	r4, r1
    8332:	51 2c       	mov	r5, r1
    8334:	82 01       	movw	r16, r4
    8336:	01 50       	subi	r16, 0x01	; 1
    8338:	11 09       	sbc	r17, r1
    833a:	20 e0       	ldi	r18, 0x00	; 0
    833c:	30 e0       	ldi	r19, 0x00	; 0
    833e:	40 e8       	ldi	r20, 0x80	; 128
    8340:	5f e3       	ldi	r21, 0x3F	; 63
    8342:	c5 01       	movw	r24, r10
    8344:	b4 01       	movw	r22, r8
    8346:	0e 94 62 e9 	call	0x1d2c4	; 0x1d2c4 <__cmpsf2>
    834a:	87 ff       	sbrs	r24, 7
    834c:	0c c0       	rjmp	.+24     	; 0x8366 <p_etoa+0x104>
    834e:	20 e0       	ldi	r18, 0x00	; 0
    8350:	30 e0       	ldi	r19, 0x00	; 0
    8352:	40 e2       	ldi	r20, 0x20	; 32
    8354:	51 e4       	ldi	r21, 0x41	; 65
    8356:	c5 01       	movw	r24, r10
    8358:	b4 01       	movw	r22, r8
    835a:	0e 94 b5 ea 	call	0x1d56a	; 0x1d56a <__mulsf3>
    835e:	4b 01       	movw	r8, r22
    8360:	5c 01       	movw	r10, r24
    8362:	28 01       	movw	r4, r16
    8364:	e7 cf       	rjmp	.-50     	; 0x8334 <p_etoa+0xd2>
    8366:	82 01       	movw	r16, r4
    8368:	0f 5f       	subi	r16, 0xFF	; 255
    836a:	1f 4f       	sbci	r17, 0xFF	; 255
    836c:	20 e0       	ldi	r18, 0x00	; 0
    836e:	30 e0       	ldi	r19, 0x00	; 0
    8370:	40 e2       	ldi	r20, 0x20	; 32
    8372:	51 e4       	ldi	r21, 0x41	; 65
    8374:	c5 01       	movw	r24, r10
    8376:	b4 01       	movw	r22, r8
    8378:	0e 94 b1 ea 	call	0x1d562	; 0x1d562 <__gesf2>
    837c:	87 fd       	sbrc	r24, 7
    837e:	0c c0       	rjmp	.+24     	; 0x8398 <p_etoa+0x136>
    8380:	20 e0       	ldi	r18, 0x00	; 0
    8382:	30 e0       	ldi	r19, 0x00	; 0
    8384:	40 e2       	ldi	r20, 0x20	; 32
    8386:	51 e4       	ldi	r21, 0x41	; 65
    8388:	c5 01       	movw	r24, r10
    838a:	b4 01       	movw	r22, r8
    838c:	0e 94 66 e9 	call	0x1d2cc	; 0x1d2cc <__divsf3>
    8390:	4b 01       	movw	r8, r22
    8392:	5c 01       	movw	r10, r24
    8394:	28 01       	movw	r4, r16
    8396:	e7 cf       	rjmp	.-50     	; 0x8366 <p_etoa+0x104>
    8398:	a7 01       	movw	r20, r14
    839a:	96 01       	movw	r18, r12
    839c:	c5 01       	movw	r24, r10
    839e:	b4 01       	movw	r22, r8
    83a0:	0e 94 fe e8 	call	0x1d1fc	; 0x1d1fc <__addsf3>
    83a4:	4b 01       	movw	r8, r22
    83a6:	5c 01       	movw	r10, r24
    83a8:	82 01       	movw	r16, r4
    83aa:	2f ef       	ldi	r18, 0xFF	; 255
    83ac:	42 1a       	sub	r4, r18
    83ae:	52 0a       	sbc	r5, r18
    83b0:	20 e0       	ldi	r18, 0x00	; 0
    83b2:	30 e0       	ldi	r19, 0x00	; 0
    83b4:	40 e2       	ldi	r20, 0x20	; 32
    83b6:	51 e4       	ldi	r21, 0x41	; 65
    83b8:	0e 94 b1 ea 	call	0x1d562	; 0x1d562 <__gesf2>
    83bc:	87 fd       	sbrc	r24, 7
    83be:	09 c0       	rjmp	.+18     	; 0x83d2 <p_etoa+0x170>
    83c0:	20 e0       	ldi	r18, 0x00	; 0
    83c2:	30 e0       	ldi	r19, 0x00	; 0
    83c4:	40 e2       	ldi	r20, 0x20	; 32
    83c6:	51 e4       	ldi	r21, 0x41	; 65
    83c8:	c5 01       	movw	r24, r10
    83ca:	b4 01       	movw	r22, r8
    83cc:	0e 94 66 e9 	call	0x1d2cc	; 0x1d2cc <__divsf3>
    83d0:	e9 cf       	rjmp	.-46     	; 0x83a4 <p_etoa+0x142>
    83d2:	0e 87       	std	Y+14, r16	; 0x0e
    83d4:	1f 87       	std	Y+15, r17	; 0x0f
    83d6:	85 e6       	ldi	r24, 0x65	; 101
    83d8:	89 83       	std	Y+1, r24	; 0x01
    83da:	8e 85       	ldd	r24, Y+14	; 0x0e
    83dc:	9f 85       	ldd	r25, Y+15	; 0x0f
    83de:	97 ff       	sbrs	r25, 7
    83e0:	08 c0       	rjmp	.+16     	; 0x83f2 <p_etoa+0x190>
    83e2:	91 95       	neg	r25
    83e4:	81 95       	neg	r24
    83e6:	91 09       	sbc	r25, r1
    83e8:	9f 87       	std	Y+15, r25	; 0x0f
    83ea:	8e 87       	std	Y+14, r24	; 0x0e
    83ec:	8d e2       	ldi	r24, 0x2D	; 45
    83ee:	90 e0       	ldi	r25, 0x00	; 0
    83f0:	02 c0       	rjmp	.+4      	; 0x83f6 <p_etoa+0x194>
    83f2:	8b e2       	ldi	r24, 0x2B	; 43
    83f4:	90 e0       	ldi	r25, 0x00	; 0
    83f6:	6c 01       	movw	r12, r24
    83f8:	82 e0       	ldi	r24, 0x02	; 2
    83fa:	e8 2e       	mov	r14, r24
    83fc:	f1 2c       	mov	r15, r1
    83fe:	8e 01       	movw	r16, r28
    8400:	02 5f       	subi	r16, 0xF2	; 242
    8402:	1f 4f       	sbci	r17, 0xFF	; 255
    8404:	2a e0       	ldi	r18, 0x0A	; 10
    8406:	30 e0       	ldi	r19, 0x00	; 0
    8408:	42 e0       	ldi	r20, 0x02	; 2
    840a:	50 e0       	ldi	r21, 0x00	; 0
    840c:	65 e0       	ldi	r22, 0x05	; 5
    840e:	70 e0       	ldi	r23, 0x00	; 0
    8410:	ce 01       	movw	r24, r28
    8412:	02 96       	adiw	r24, 0x02	; 2
    8414:	26 dd       	rcall	.-1460   	; 0x7e62 <bin2num>
    8416:	9c 01       	movw	r18, r24
    8418:	93 2d       	mov	r25, r3
    841a:	98 72       	andi	r25, 0x28	; 40
    841c:	90 32       	cpi	r25, 0x20	; 32
    841e:	71 f0       	breq	.+28     	; 0x843c <p_etoa+0x1da>
    8420:	c5 01       	movw	r24, r10
    8422:	b4 01       	movw	r22, r8
    8424:	0e 94 ce e9 	call	0x1d39c	; 0x1d39c <__fixsfsi>
    8428:	6b 01       	movw	r12, r22
    842a:	7c 01       	movw	r14, r24
    842c:	60 e3       	ldi	r22, 0x30	; 48
    842e:	6c 0d       	add	r22, r12
    8430:	ce 01       	movw	r24, r28
    8432:	08 96       	adiw	r24, 0x08	; 8
    8434:	9f dd       	rcall	.-1218   	; 0x7f74 <pch>
    8436:	21 10       	cpse	r2, r1
    8438:	20 c0       	rjmp	.+64     	; 0x847a <p_etoa+0x218>
    843a:	63 c0       	rjmp	.+198    	; 0x8502 <p_etoa+0x2a0>
    843c:	8a 85       	ldd	r24, Y+10	; 0x0a
    843e:	9b 85       	ldd	r25, Y+11	; 0x0b
    8440:	0a 89       	ldd	r16, Y+18	; 0x12
    8442:	1b 89       	ldd	r17, Y+19	; 0x13
    8444:	08 1b       	sub	r16, r24
    8446:	19 0b       	sbc	r17, r25
    8448:	22 20       	and	r2, r2
    844a:	41 f0       	breq	.+16     	; 0x845c <p_etoa+0x1fa>
    844c:	61 14       	cp	r6, r1
    844e:	71 04       	cpc	r7, r1
    8450:	29 f0       	breq	.+10     	; 0x845c <p_etoa+0x1fa>
    8452:	06 19       	sub	r16, r6
    8454:	17 09       	sbc	r17, r7
    8456:	06 50       	subi	r16, 0x06	; 6
    8458:	11 09       	sbc	r17, r1
    845a:	02 c0       	rjmp	.+4      	; 0x8460 <p_etoa+0x1fe>
    845c:	05 50       	subi	r16, 0x05	; 5
    845e:	11 09       	sbc	r17, r1
    8460:	24 30       	cpi	r18, 0x04	; 4
    8462:	31 05       	cpc	r19, r1
    8464:	14 f0       	brlt	.+4      	; 0x846a <p_etoa+0x208>
    8466:	01 50       	subi	r16, 0x01	; 1
    8468:	11 09       	sbc	r17, r1
    846a:	10 16       	cp	r1, r16
    846c:	11 06       	cpc	r1, r17
    846e:	c4 f6       	brge	.-80     	; 0x8420 <p_etoa+0x1be>
    8470:	60 e3       	ldi	r22, 0x30	; 48
    8472:	ce 01       	movw	r24, r28
    8474:	08 96       	adiw	r24, 0x08	; 8
    8476:	7e dd       	rcall	.-1284   	; 0x7f74 <pch>
    8478:	f6 cf       	rjmp	.-20     	; 0x8466 <p_etoa+0x204>
    847a:	61 14       	cp	r6, r1
    847c:	71 04       	cpc	r7, r1
    847e:	09 f4       	brne	.+2      	; 0x8482 <p_etoa+0x220>
    8480:	40 c0       	rjmp	.+128    	; 0x8502 <p_etoa+0x2a0>
    8482:	b6 01       	movw	r22, r12
    8484:	dd 0c       	add	r13, r13
    8486:	88 0b       	sbc	r24, r24
    8488:	99 0b       	sbc	r25, r25
    848a:	0e 94 01 ea 	call	0x1d402	; 0x1d402 <__floatsisf>
    848e:	9b 01       	movw	r18, r22
    8490:	ac 01       	movw	r20, r24
    8492:	c5 01       	movw	r24, r10
    8494:	b4 01       	movw	r22, r8
    8496:	0e 94 fd e8 	call	0x1d1fa	; 0x1d1fa <__subsf3>
    849a:	20 e0       	ldi	r18, 0x00	; 0
    849c:	30 e0       	ldi	r19, 0x00	; 0
    849e:	40 e2       	ldi	r20, 0x20	; 32
    84a0:	51 e4       	ldi	r21, 0x41	; 65
    84a2:	0e 94 b5 ea 	call	0x1d56a	; 0x1d56a <__mulsf3>
    84a6:	4b 01       	movw	r8, r22
    84a8:	5c 01       	movw	r10, r24
    84aa:	6e e2       	ldi	r22, 0x2E	; 46
    84ac:	ce 01       	movw	r24, r28
    84ae:	08 96       	adiw	r24, 0x08	; 8
    84b0:	61 dd       	rcall	.-1342   	; 0x7f74 <pch>
    84b2:	c5 01       	movw	r24, r10
    84b4:	b4 01       	movw	r22, r8
    84b6:	0e 94 ce e9 	call	0x1d39c	; 0x1d39c <__fixsfsi>
    84ba:	6b 01       	movw	r12, r22
    84bc:	7c 01       	movw	r14, r24
    84be:	07 2e       	mov	r0, r23
    84c0:	00 0c       	add	r0, r0
    84c2:	88 0b       	sbc	r24, r24
    84c4:	99 0b       	sbc	r25, r25
    84c6:	0e 94 01 ea 	call	0x1d402	; 0x1d402 <__floatsisf>
    84ca:	9b 01       	movw	r18, r22
    84cc:	ac 01       	movw	r20, r24
    84ce:	c5 01       	movw	r24, r10
    84d0:	b4 01       	movw	r22, r8
    84d2:	0e 94 fd e8 	call	0x1d1fa	; 0x1d1fa <__subsf3>
    84d6:	4b 01       	movw	r8, r22
    84d8:	5c 01       	movw	r10, r24
    84da:	b6 01       	movw	r22, r12
    84dc:	60 5d       	subi	r22, 0xD0	; 208
    84de:	7f 4f       	sbci	r23, 0xFF	; 255
    84e0:	ce 01       	movw	r24, r28
    84e2:	08 96       	adiw	r24, 0x08	; 8
    84e4:	47 dd       	rcall	.-1394   	; 0x7f74 <pch>
    84e6:	20 e0       	ldi	r18, 0x00	; 0
    84e8:	30 e0       	ldi	r19, 0x00	; 0
    84ea:	40 e2       	ldi	r20, 0x20	; 32
    84ec:	51 e4       	ldi	r21, 0x41	; 65
    84ee:	c5 01       	movw	r24, r10
    84f0:	b4 01       	movw	r22, r8
    84f2:	0e 94 b5 ea 	call	0x1d56a	; 0x1d56a <__mulsf3>
    84f6:	4b 01       	movw	r8, r22
    84f8:	5c 01       	movw	r10, r24
    84fa:	31 e0       	ldi	r19, 0x01	; 1
    84fc:	63 1a       	sub	r6, r19
    84fe:	71 08       	sbc	r7, r1
    8500:	c1 f6       	brne	.-80     	; 0x84b2 <p_etoa+0x250>
    8502:	8e 01       	movw	r16, r28
    8504:	0f 5f       	subi	r16, 0xFF	; 255
    8506:	1f 4f       	sbci	r17, 0xFF	; 255
    8508:	f8 01       	movw	r30, r16
    850a:	61 91       	ld	r22, Z+
    850c:	8f 01       	movw	r16, r30
    850e:	ce 01       	movw	r24, r28
    8510:	08 96       	adiw	r24, 0x08	; 8
    8512:	66 23       	and	r22, r22
    8514:	11 f0       	breq	.+4      	; 0x851a <p_etoa+0x2b8>
    8516:	2e dd       	rcall	.-1444   	; 0x7f74 <pch>
    8518:	f7 cf       	rjmp	.-18     	; 0x8508 <p_etoa+0x2a6>
    851a:	2c dd       	rcall	.-1448   	; 0x7f74 <pch>
    851c:	e8 89       	ldd	r30, Y+16	; 0x10
    851e:	f9 89       	ldd	r31, Y+17	; 0x11
    8520:	01 90       	ld	r0, Z+
    8522:	00 20       	and	r0, r0
    8524:	e9 f7       	brne	.-6      	; 0x8520 <p_etoa+0x2be>
    8526:	cf 01       	movw	r24, r30
    8528:	01 97       	sbiw	r24, 0x01	; 1
    852a:	28 89       	ldd	r18, Y+16	; 0x10
    852c:	39 89       	ldd	r19, Y+17	; 0x11
    852e:	82 1b       	sub	r24, r18
    8530:	93 0b       	sbc	r25, r19
    8532:	63 96       	adiw	r28, 0x13	; 19
    8534:	e2 e1       	ldi	r30, 0x12	; 18
    8536:	0c 94 c0 e8 	jmp	0x1d180	; 0x1d180 <__epilogue_restores__>

0000853a <_puts_pad>:
    853a:	a0 e0       	ldi	r26, 0x00	; 0
    853c:	b0 e0       	ldi	r27, 0x00	; 0
    853e:	e3 ea       	ldi	r30, 0xA3	; 163
    8540:	f2 e4       	ldi	r31, 0x42	; 66
    8542:	0c 94 aa e8 	jmp	0x1d154	; 0x1d154 <__prologue_saves__+0xc>
    8546:	6c 01       	movw	r12, r24
    8548:	4b 01       	movw	r8, r22
    854a:	79 01       	movw	r14, r18
    854c:	24 17       	cp	r18, r20
    854e:	35 07       	cpc	r19, r21
    8550:	24 f4       	brge	.+8      	; 0x855a <_puts_pad+0x20>
    8552:	ea 01       	movw	r28, r20
    8554:	c2 1b       	sub	r28, r18
    8556:	d3 0b       	sbc	r29, r19
    8558:	02 c0       	rjmp	.+4      	; 0x855e <_puts_pad+0x24>
    855a:	c0 e0       	ldi	r28, 0x00	; 0
    855c:	d0 e0       	ldi	r29, 0x00	; 0
    855e:	01 15       	cp	r16, r1
    8560:	11 05       	cpc	r17, r1
    8562:	49 f4       	brne	.+18     	; 0x8576 <_puts_pad+0x3c>
    8564:	21 97       	sbiw	r28, 0x01	; 1
    8566:	38 f0       	brcs	.+14     	; 0x8576 <_puts_pad+0x3c>
    8568:	d6 01       	movw	r26, r12
    856a:	ed 91       	ld	r30, X+
    856c:	fc 91       	ld	r31, X
    856e:	60 e2       	ldi	r22, 0x20	; 32
    8570:	c6 01       	movw	r24, r12
    8572:	09 95       	icall
    8574:	f7 cf       	rjmp	.-18     	; 0x8564 <_puts_pad+0x2a>
    8576:	54 01       	movw	r10, r8
    8578:	f5 01       	movw	r30, r10
    857a:	61 91       	ld	r22, Z+
    857c:	5f 01       	movw	r10, r30
    857e:	66 23       	and	r22, r22
    8580:	61 f0       	breq	.+24     	; 0x859a <_puts_pad+0x60>
    8582:	e1 14       	cp	r14, r1
    8584:	f1 04       	cpc	r15, r1
    8586:	49 f0       	breq	.+18     	; 0x859a <_puts_pad+0x60>
    8588:	d6 01       	movw	r26, r12
    858a:	ed 91       	ld	r30, X+
    858c:	fc 91       	ld	r31, X
    858e:	c6 01       	movw	r24, r12
    8590:	09 95       	icall
    8592:	b1 e0       	ldi	r27, 0x01	; 1
    8594:	eb 1a       	sub	r14, r27
    8596:	f1 08       	sbc	r15, r1
    8598:	ef cf       	rjmp	.-34     	; 0x8578 <_puts_pad+0x3e>
    859a:	01 15       	cp	r16, r1
    859c:	11 05       	cpc	r17, r1
    859e:	51 f0       	breq	.+20     	; 0x85b4 <_puts_pad+0x7a>
    85a0:	20 97       	sbiw	r28, 0x00	; 0
    85a2:	41 f0       	breq	.+16     	; 0x85b4 <_puts_pad+0x7a>
    85a4:	d6 01       	movw	r26, r12
    85a6:	ed 91       	ld	r30, X+
    85a8:	fc 91       	ld	r31, X
    85aa:	60 e2       	ldi	r22, 0x20	; 32
    85ac:	c6 01       	movw	r24, r12
    85ae:	09 95       	icall
    85b0:	21 97       	sbiw	r28, 0x01	; 1
    85b2:	f6 cf       	rjmp	.-20     	; 0x85a0 <_puts_pad+0x66>
    85b4:	cd b7       	in	r28, 0x3d	; 61
    85b6:	de b7       	in	r29, 0x3e	; 62
    85b8:	ec e0       	ldi	r30, 0x0C	; 12
    85ba:	0c 94 c6 e8 	jmp	0x1d18c	; 0x1d18c <__epilogue_restores__+0xc>

000085be <_puts_pad_X>:
    85be:	2f 92       	push	r2
    85c0:	3f 92       	push	r3
    85c2:	4f 92       	push	r4
    85c4:	6f 92       	push	r6
    85c6:	7f 92       	push	r7
    85c8:	8f 92       	push	r8
    85ca:	cf 92       	push	r12
    85cc:	df 92       	push	r13
    85ce:	ef 92       	push	r14
    85d0:	ff 92       	push	r15
    85d2:	0f 93       	push	r16
    85d4:	1f 93       	push	r17
    85d6:	cf 93       	push	r28
    85d8:	df 93       	push	r29
    85da:	6c 01       	movw	r12, r24
    85dc:	3a 01       	movw	r6, r20
    85de:	86 2e       	mov	r8, r22
    85e0:	02 17       	cp	r16, r18
    85e2:	13 07       	cpc	r17, r19
    85e4:	24 f4       	brge	.+8      	; 0x85ee <_puts_pad_X+0x30>
    85e6:	e9 01       	movw	r28, r18
    85e8:	c0 1b       	sub	r28, r16
    85ea:	d1 0b       	sbc	r29, r17
    85ec:	02 c0       	rjmp	.+4      	; 0x85f2 <_puts_pad_X+0x34>
    85ee:	c0 e0       	ldi	r28, 0x00	; 0
    85f0:	d0 e0       	ldi	r29, 0x00	; 0
    85f2:	e1 14       	cp	r14, r1
    85f4:	f1 04       	cpc	r15, r1
    85f6:	49 f4       	brne	.+18     	; 0x860a <_puts_pad_X+0x4c>
    85f8:	21 97       	sbiw	r28, 0x01	; 1
    85fa:	38 f0       	brcs	.+14     	; 0x860a <_puts_pad_X+0x4c>
    85fc:	d6 01       	movw	r26, r12
    85fe:	ed 91       	ld	r30, X+
    8600:	fc 91       	ld	r31, X
    8602:	60 e2       	ldi	r22, 0x20	; 32
    8604:	c6 01       	movw	r24, r12
    8606:	09 95       	icall
    8608:	f7 cf       	rjmp	.-18     	; 0x85f8 <_puts_pad_X+0x3a>
    860a:	13 01       	movw	r2, r6
    860c:	48 2c       	mov	r4, r8
    860e:	20 0e       	add	r2, r16
    8610:	31 1e       	adc	r3, r17
    8612:	41 1c       	adc	r4, r1
    8614:	17 fd       	sbrc	r17, 7
    8616:	4a 94       	dec	r4
    8618:	f3 01       	movw	r30, r6
    861a:	58 2d       	mov	r21, r8
    861c:	0e 94 db e8 	call	0x1d1b6	; 0x1d1b6 <__xload_1>
    8620:	66 23       	and	r22, r22
    8622:	71 f0       	breq	.+28     	; 0x8640 <_puts_pad_X+0x82>
    8624:	62 14       	cp	r6, r2
    8626:	73 04       	cpc	r7, r3
    8628:	84 04       	cpc	r8, r4
    862a:	51 f0       	breq	.+20     	; 0x8640 <_puts_pad_X+0x82>
    862c:	d6 01       	movw	r26, r12
    862e:	ed 91       	ld	r30, X+
    8630:	fc 91       	ld	r31, X
    8632:	c6 01       	movw	r24, r12
    8634:	09 95       	icall
    8636:	bf ef       	ldi	r27, 0xFF	; 255
    8638:	6b 1a       	sub	r6, r27
    863a:	7b 0a       	sbc	r7, r27
    863c:	8b 0a       	sbc	r8, r27
    863e:	ec cf       	rjmp	.-40     	; 0x8618 <_puts_pad_X+0x5a>
    8640:	ef 28       	or	r14, r15
    8642:	51 f0       	breq	.+20     	; 0x8658 <_puts_pad_X+0x9a>
    8644:	20 97       	sbiw	r28, 0x00	; 0
    8646:	41 f0       	breq	.+16     	; 0x8658 <_puts_pad_X+0x9a>
    8648:	d6 01       	movw	r26, r12
    864a:	ed 91       	ld	r30, X+
    864c:	fc 91       	ld	r31, X
    864e:	60 e2       	ldi	r22, 0x20	; 32
    8650:	c6 01       	movw	r24, r12
    8652:	09 95       	icall
    8654:	21 97       	sbiw	r28, 0x01	; 1
    8656:	f6 cf       	rjmp	.-20     	; 0x8644 <_puts_pad_X+0x86>
    8658:	df 91       	pop	r29
    865a:	cf 91       	pop	r28
    865c:	1f 91       	pop	r17
    865e:	0f 91       	pop	r16
    8660:	ff 90       	pop	r15
    8662:	ef 90       	pop	r14
    8664:	df 90       	pop	r13
    8666:	cf 90       	pop	r12
    8668:	8f 90       	pop	r8
    866a:	7f 90       	pop	r7
    866c:	6f 90       	pop	r6
    866e:	4f 90       	pop	r4
    8670:	3f 90       	pop	r3
    8672:	2f 90       	pop	r2
    8674:	08 95       	ret

00008676 <strlen_X>:
    8676:	cf 92       	push	r12
    8678:	df 92       	push	r13
    867a:	ef 92       	push	r14
    867c:	9b 01       	movw	r18, r22
    867e:	48 2f       	mov	r20, r24
    8680:	80 e0       	ldi	r24, 0x00	; 0
    8682:	90 e0       	ldi	r25, 0x00	; 0
    8684:	2f 5f       	subi	r18, 0xFF	; 255
    8686:	3f 4f       	sbci	r19, 0xFF	; 255
    8688:	4f 4f       	sbci	r20, 0xFF	; 255
    868a:	69 01       	movw	r12, r18
    868c:	e4 2e       	mov	r14, r20
    868e:	51 e0       	ldi	r21, 0x01	; 1
    8690:	c5 1a       	sub	r12, r21
    8692:	d1 08       	sbc	r13, r1
    8694:	e1 08       	sbc	r14, r1
    8696:	f6 01       	movw	r30, r12
    8698:	5e 2d       	mov	r21, r14
    869a:	0e 94 db e8 	call	0x1d1b6	; 0x1d1b6 <__xload_1>
    869e:	66 23       	and	r22, r22
    86a0:	11 f0       	breq	.+4      	; 0x86a6 <strlen_X+0x30>
    86a2:	01 96       	adiw	r24, 0x01	; 1
    86a4:	ef cf       	rjmp	.-34     	; 0x8684 <strlen_X+0xe>
    86a6:	ef 90       	pop	r14
    86a8:	df 90       	pop	r13
    86aa:	cf 90       	pop	r12
    86ac:	08 95       	ret

000086ae <_printf_fn>:
    86ae:	ae e6       	ldi	r26, 0x6E	; 110
    86b0:	b0 e0       	ldi	r27, 0x00	; 0
    86b2:	ed e5       	ldi	r30, 0x5D	; 93
    86b4:	f3 e4       	ldi	r31, 0x43	; 67
    86b6:	0c 94 a4 e8 	jmp	0x1d148	; 0x1d148 <__prologue_saves__>
    86ba:	a5 96       	adiw	r28, 0x25	; 37
    86bc:	9f af       	std	Y+63, r25	; 0x3f
    86be:	8e af       	std	Y+62, r24	; 0x3e
    86c0:	a5 97       	sbiw	r28, 0x25	; 37
    86c2:	6a 01       	movw	r12, r20
    86c4:	e6 2e       	mov	r14, r22
    86c6:	19 01       	movw	r2, r18
    86c8:	a9 96       	adiw	r28, 0x29	; 41
    86ca:	1c ae       	std	Y+60, r1	; 0x3c
    86cc:	1d ae       	std	Y+61, r1	; 0x3d
    86ce:	1e ae       	std	Y+62, r1	; 0x3e
    86d0:	1f ae       	std	Y+63, r1	; 0x3f
    86d2:	a9 97       	sbiw	r28, 0x29	; 41
    86d4:	8a e1       	ldi	r24, 0x1A	; 26
    86d6:	94 e0       	ldi	r25, 0x04	; 4
    86d8:	9c 01       	movw	r18, r24
    86da:	40 e8       	ldi	r20, 0x80	; 128
    86dc:	ae 96       	adiw	r28, 0x2e	; 46
    86de:	2d af       	std	Y+61, r18	; 0x3d
    86e0:	3e af       	std	Y+62, r19	; 0x3e
    86e2:	4f af       	std	Y+63, r20	; 0x3f
    86e4:	ae 97       	sbiw	r28, 0x2e	; 46
    86e6:	ae 01       	movw	r20, r28
    86e8:	4f 5a       	subi	r20, 0xAF	; 175
    86ea:	5f 4f       	sbci	r21, 0xFF	; 255
    86ec:	67 96       	adiw	r28, 0x17	; 23
    86ee:	5f af       	std	Y+63, r21	; 0x3f
    86f0:	4e af       	std	Y+62, r20	; 0x3e
    86f2:	67 97       	sbiw	r28, 0x17	; 23
    86f4:	ce 01       	movw	r24, r28
    86f6:	8d 5b       	subi	r24, 0xBD	; 189
    86f8:	9f 4f       	sbci	r25, 0xFF	; 255
    86fa:	69 96       	adiw	r28, 0x19	; 25
    86fc:	9f af       	std	Y+63, r25	; 0x3f
    86fe:	8e af       	std	Y+62, r24	; 0x3e
    8700:	69 97       	sbiw	r28, 0x19	; 25
    8702:	de 01       	movw	r26, r28
    8704:	a5 5b       	subi	r26, 0xB5	; 181
    8706:	bf 4f       	sbci	r27, 0xFF	; 255
    8708:	6b 96       	adiw	r28, 0x1b	; 27
    870a:	bf af       	std	Y+63, r27	; 0x3f
    870c:	ae af       	std	Y+62, r26	; 0x3e
    870e:	6b 97       	sbiw	r28, 0x1b	; 27
    8710:	fe 01       	movw	r30, r28
    8712:	ed 5a       	subi	r30, 0xAD	; 173
    8714:	ff 4f       	sbci	r31, 0xFF	; 255
    8716:	6d 96       	adiw	r28, 0x1d	; 29
    8718:	ff af       	std	Y+63, r31	; 0x3f
    871a:	ee af       	std	Y+62, r30	; 0x3e
    871c:	6d 97       	sbiw	r28, 0x1d	; 29
    871e:	f6 01       	movw	r30, r12
    8720:	5e 2d       	mov	r21, r14
    8722:	0e 94 db e8 	call	0x1d1b6	; 0x1d1b6 <__xload_1>
    8726:	66 23       	and	r22, r22
    8728:	09 f4       	brne	.+2      	; 0x872c <_printf_fn+0x7e>
    872a:	13 c4       	rjmp	.+2086   	; 0x8f52 <_printf_fn+0x8a4>
    872c:	ae 2d       	mov	r26, r14
    872e:	c6 01       	movw	r24, r12
    8730:	01 96       	adiw	r24, 0x01	; 1
    8732:	a1 1d       	adc	r26, r1
    8734:	3c 01       	movw	r6, r24
    8736:	8a 2e       	mov	r8, r26
    8738:	65 32       	cpi	r22, 0x25	; 37
    873a:	51 f0       	breq	.+20     	; 0x8750 <_printf_fn+0xa2>
    873c:	a5 96       	adiw	r28, 0x25	; 37
    873e:	ae ad       	ldd	r26, Y+62	; 0x3e
    8740:	bf ad       	ldd	r27, Y+63	; 0x3f
    8742:	a5 97       	sbiw	r28, 0x25	; 37
    8744:	ed 91       	ld	r30, X+
    8746:	fc 91       	ld	r31, X
    8748:	11 97       	sbiw	r26, 0x01	; 1
    874a:	cd 01       	movw	r24, r26
    874c:	09 95       	icall
    874e:	d5 c3       	rjmp	.+1962   	; 0x8efa <_printf_fn+0x84c>
    8750:	91 2c       	mov	r9, r1
    8752:	f3 01       	movw	r30, r6
    8754:	58 2d       	mov	r21, r8
    8756:	0e 94 db e8 	call	0x1d1b6	; 0x1d1b6 <__xload_1>
    875a:	63 32       	cpi	r22, 0x23	; 35
    875c:	19 f4       	brne	.+6      	; 0x8764 <_printf_fn+0xb6>
    875e:	68 94       	set
    8760:	97 f8       	bld	r9, 7
    8762:	04 c0       	rjmp	.+8      	; 0x876c <_printf_fn+0xbe>
    8764:	6b 32       	cpi	r22, 0x2B	; 43
    8766:	39 f4       	brne	.+14     	; 0x8776 <_printf_fn+0xc8>
    8768:	68 94       	set
    876a:	92 f8       	bld	r9, 2
    876c:	bf ef       	ldi	r27, 0xFF	; 255
    876e:	6b 1a       	sub	r6, r27
    8770:	7b 0a       	sbc	r7, r27
    8772:	8b 0a       	sbc	r8, r27
    8774:	ee cf       	rjmp	.-36     	; 0x8752 <_printf_fn+0xa4>
    8776:	6d 32       	cpi	r22, 0x2D	; 45
    8778:	a9 f4       	brne	.+42     	; 0x87a4 <_printf_fn+0xf6>
    877a:	93 fc       	sbrc	r9, 3
    877c:	05 c0       	rjmp	.+10     	; 0x8788 <_printf_fn+0xda>
    877e:	6d 32       	cpi	r22, 0x2D	; 45
    8780:	19 f4       	brne	.+6      	; 0x8788 <_printf_fn+0xda>
    8782:	68 94       	set
    8784:	93 f8       	bld	r9, 3
    8786:	f2 cf       	rjmp	.-28     	; 0x876c <_printf_fn+0xbe>
    8788:	94 fc       	sbrc	r9, 4
    878a:	05 c0       	rjmp	.+10     	; 0x8796 <_printf_fn+0xe8>
    878c:	60 32       	cpi	r22, 0x20	; 32
    878e:	19 f4       	brne	.+6      	; 0x8796 <_printf_fn+0xe8>
    8790:	68 94       	set
    8792:	94 f8       	bld	r9, 4
    8794:	eb cf       	rjmp	.-42     	; 0x876c <_printf_fn+0xbe>
    8796:	95 fc       	sbrc	r9, 5
    8798:	e9 cf       	rjmp	.-46     	; 0x876c <_printf_fn+0xbe>
    879a:	60 33       	cpi	r22, 0x30	; 48
    879c:	39 f7       	brne	.-50     	; 0x876c <_printf_fn+0xbe>
    879e:	68 94       	set
    87a0:	95 f8       	bld	r9, 5
    87a2:	e4 cf       	rjmp	.-56     	; 0x876c <_printf_fn+0xbe>
    87a4:	86 2f       	mov	r24, r22
    87a6:	8f 7e       	andi	r24, 0xEF	; 239
    87a8:	80 32       	cpi	r24, 0x20	; 32
    87aa:	39 f3       	breq	.-50     	; 0x877a <_printf_fn+0xcc>
    87ac:	70 e0       	ldi	r23, 0x00	; 0
    87ae:	60 53       	subi	r22, 0x30	; 48
    87b0:	71 09       	sbc	r23, r1
    87b2:	6f 96       	adiw	r28, 0x1f	; 31
    87b4:	1f ae       	std	Y+63, r1	; 0x3f
    87b6:	1e ae       	std	Y+62, r1	; 0x3e
    87b8:	6f 97       	sbiw	r28, 0x1f	; 31
    87ba:	6a 30       	cpi	r22, 0x0A	; 10
    87bc:	71 05       	cpc	r23, r1
    87be:	10 f5       	brcc	.+68     	; 0x8804 <_printf_fn+0x156>
    87c0:	2a e0       	ldi	r18, 0x0A	; 10
    87c2:	f3 01       	movw	r30, r6
    87c4:	58 2d       	mov	r21, r8
    87c6:	0e 94 db e8 	call	0x1d1b6	; 0x1d1b6 <__xload_1>
    87ca:	70 e0       	ldi	r23, 0x00	; 0
    87cc:	cb 01       	movw	r24, r22
    87ce:	c0 97       	sbiw	r24, 0x30	; 48
    87d0:	0a 97       	sbiw	r24, 0x0a	; 10
    87d2:	b0 f4       	brcc	.+44     	; 0x8800 <_printf_fn+0x152>
    87d4:	ef ef       	ldi	r30, 0xFF	; 255
    87d6:	6e 1a       	sub	r6, r30
    87d8:	7e 0a       	sbc	r7, r30
    87da:	8e 0a       	sbc	r8, r30
    87dc:	6f 96       	adiw	r28, 0x1f	; 31
    87de:	4e ad       	ldd	r20, Y+62	; 0x3e
    87e0:	5f ad       	ldd	r21, Y+63	; 0x3f
    87e2:	6f 97       	sbiw	r28, 0x1f	; 31
    87e4:	24 9f       	mul	r18, r20
    87e6:	c0 01       	movw	r24, r0
    87e8:	25 9f       	mul	r18, r21
    87ea:	90 0d       	add	r25, r0
    87ec:	11 24       	eor	r1, r1
    87ee:	68 0f       	add	r22, r24
    87f0:	79 1f       	adc	r23, r25
    87f2:	cb 01       	movw	r24, r22
    87f4:	c0 97       	sbiw	r24, 0x30	; 48
    87f6:	6f 96       	adiw	r28, 0x1f	; 31
    87f8:	9f af       	std	Y+63, r25	; 0x3f
    87fa:	8e af       	std	Y+62, r24	; 0x3e
    87fc:	6f 97       	sbiw	r28, 0x1f	; 31
    87fe:	e1 cf       	rjmp	.-62     	; 0x87c2 <_printf_fn+0x114>
    8800:	68 94       	set
    8802:	90 f8       	bld	r9, 0
    8804:	f3 01       	movw	r30, r6
    8806:	58 2d       	mov	r21, r8
    8808:	0e 94 db e8 	call	0x1d1b6	; 0x1d1b6 <__xload_1>
    880c:	6e 32       	cpi	r22, 0x2E	; 46
    880e:	61 f5       	brne	.+88     	; 0x8868 <_printf_fn+0x1ba>
    8810:	9f ef       	ldi	r25, 0xFF	; 255
    8812:	69 1a       	sub	r6, r25
    8814:	79 0a       	sbc	r7, r25
    8816:	89 0a       	sbc	r8, r25
    8818:	a1 96       	adiw	r28, 0x21	; 33
    881a:	1f ae       	std	Y+63, r1	; 0x3f
    881c:	1e ae       	std	Y+62, r1	; 0x3e
    881e:	a1 97       	sbiw	r28, 0x21	; 33
    8820:	2a e0       	ldi	r18, 0x0A	; 10
    8822:	f3 01       	movw	r30, r6
    8824:	58 2d       	mov	r21, r8
    8826:	0e 94 db e8 	call	0x1d1b6	; 0x1d1b6 <__xload_1>
    882a:	70 e0       	ldi	r23, 0x00	; 0
    882c:	cb 01       	movw	r24, r22
    882e:	c0 97       	sbiw	r24, 0x30	; 48
    8830:	0a 97       	sbiw	r24, 0x0a	; 10
    8832:	b8 f4       	brcc	.+46     	; 0x8862 <_printf_fn+0x1b4>
    8834:	af ef       	ldi	r26, 0xFF	; 255
    8836:	6a 1a       	sub	r6, r26
    8838:	7a 0a       	sbc	r7, r26
    883a:	8a 0a       	sbc	r8, r26
    883c:	a1 96       	adiw	r28, 0x21	; 33
    883e:	ee ad       	ldd	r30, Y+62	; 0x3e
    8840:	ff ad       	ldd	r31, Y+63	; 0x3f
    8842:	a1 97       	sbiw	r28, 0x21	; 33
    8844:	2e 9f       	mul	r18, r30
    8846:	c0 01       	movw	r24, r0
    8848:	2f 9f       	mul	r18, r31
    884a:	90 0d       	add	r25, r0
    884c:	11 24       	eor	r1, r1
    884e:	68 0f       	add	r22, r24
    8850:	79 1f       	adc	r23, r25
    8852:	ab 01       	movw	r20, r22
    8854:	40 53       	subi	r20, 0x30	; 48
    8856:	51 09       	sbc	r21, r1
    8858:	a1 96       	adiw	r28, 0x21	; 33
    885a:	5f af       	std	Y+63, r21	; 0x3f
    885c:	4e af       	std	Y+62, r20	; 0x3e
    885e:	a1 97       	sbiw	r28, 0x21	; 33
    8860:	e0 cf       	rjmp	.-64     	; 0x8822 <_printf_fn+0x174>
    8862:	68 94       	set
    8864:	91 f8       	bld	r9, 1
    8866:	04 c0       	rjmp	.+8      	; 0x8870 <_printf_fn+0x1c2>
    8868:	a1 96       	adiw	r28, 0x21	; 33
    886a:	1f ae       	std	Y+63, r1	; 0x3f
    886c:	1e ae       	std	Y+62, r1	; 0x3e
    886e:	a1 97       	sbiw	r28, 0x21	; 33
    8870:	f3 01       	movw	r30, r6
    8872:	58 2d       	mov	r21, r8
    8874:	0e 94 db e8 	call	0x1d1b6	; 0x1d1b6 <__xload_1>
    8878:	69 34       	cpi	r22, 0x49	; 73
    887a:	91 f5       	brne	.+100    	; 0x88e0 <_printf_fn+0x232>
    887c:	5f ef       	ldi	r21, 0xFF	; 255
    887e:	65 1a       	sub	r6, r21
    8880:	75 0a       	sbc	r7, r21
    8882:	85 0a       	sbc	r8, r21
    8884:	41 2c       	mov	r4, r1
    8886:	51 2c       	mov	r5, r1
    8888:	2a e0       	ldi	r18, 0x0A	; 10
    888a:	f3 01       	movw	r30, r6
    888c:	58 2d       	mov	r21, r8
    888e:	0e 94 db e8 	call	0x1d1b6	; 0x1d1b6 <__xload_1>
    8892:	70 e0       	ldi	r23, 0x00	; 0
    8894:	cb 01       	movw	r24, r22
    8896:	c0 97       	sbiw	r24, 0x30	; 48
    8898:	0a 97       	sbiw	r24, 0x0a	; 10
    889a:	80 f4       	brcc	.+32     	; 0x88bc <_printf_fn+0x20e>
    889c:	8f ef       	ldi	r24, 0xFF	; 255
    889e:	68 1a       	sub	r6, r24
    88a0:	78 0a       	sbc	r7, r24
    88a2:	88 0a       	sbc	r8, r24
    88a4:	24 9d       	mul	r18, r4
    88a6:	c0 01       	movw	r24, r0
    88a8:	25 9d       	mul	r18, r5
    88aa:	90 0d       	add	r25, r0
    88ac:	11 24       	eor	r1, r1
    88ae:	68 0f       	add	r22, r24
    88b0:	79 1f       	adc	r23, r25
    88b2:	2b 01       	movw	r4, r22
    88b4:	90 e3       	ldi	r25, 0x30	; 48
    88b6:	49 1a       	sub	r4, r25
    88b8:	51 08       	sbc	r5, r1
    88ba:	e7 cf       	rjmp	.-50     	; 0x888a <_printf_fn+0x1dc>
    88bc:	41 14       	cp	r4, r1
    88be:	51 04       	cpc	r5, r1
    88c0:	09 f4       	brne	.+2      	; 0x88c4 <_printf_fn+0x216>
    88c2:	40 c0       	rjmp	.+128    	; 0x8944 <_printf_fn+0x296>
    88c4:	c2 01       	movw	r24, r4
    88c6:	87 70       	andi	r24, 0x07	; 7
    88c8:	99 27       	eor	r25, r25
    88ca:	89 2b       	or	r24, r25
    88cc:	c9 f5       	brne	.+114    	; 0x8940 <_printf_fn+0x292>
    88ce:	63 e0       	ldi	r22, 0x03	; 3
    88d0:	55 94       	asr	r5
    88d2:	47 94       	ror	r4
    88d4:	6a 95       	dec	r22
    88d6:	e1 f7       	brne	.-8      	; 0x88d0 <_printf_fn+0x222>
    88d8:	41 14       	cp	r4, r1
    88da:	51 04       	cpc	r5, r1
    88dc:	99 f1       	breq	.+102    	; 0x8944 <_printf_fn+0x296>
    88de:	21 c0       	rjmp	.+66     	; 0x8922 <_printf_fn+0x274>
    88e0:	68 36       	cpi	r22, 0x68	; 104
    88e2:	29 f4       	brne	.+10     	; 0x88ee <_printf_fn+0x240>
    88e4:	af ef       	ldi	r26, 0xFF	; 255
    88e6:	6a 1a       	sub	r6, r26
    88e8:	7a 0a       	sbc	r7, r26
    88ea:	8a 0a       	sbc	r8, r26
    88ec:	09 c3       	rjmp	.+1554   	; 0x8f00 <_printf_fn+0x852>
    88ee:	6c 36       	cpi	r22, 0x6C	; 108
    88f0:	09 f0       	breq	.+2      	; 0x88f4 <_printf_fn+0x246>
    88f2:	06 c3       	rjmp	.+1548   	; 0x8f00 <_printf_fn+0x852>
    88f4:	a8 2d       	mov	r26, r8
    88f6:	c3 01       	movw	r24, r6
    88f8:	01 96       	adiw	r24, 0x01	; 1
    88fa:	a1 1d       	adc	r26, r1
    88fc:	fc 01       	movw	r30, r24
    88fe:	5a 2f       	mov	r21, r26
    8900:	0e 94 db e8 	call	0x1d1b6	; 0x1d1b6 <__xload_1>
    8904:	6c 36       	cpi	r22, 0x6C	; 108
    8906:	31 f0       	breq	.+12     	; 0x8914 <_printf_fn+0x266>
    8908:	3c 01       	movw	r6, r24
    890a:	8a 2e       	mov	r8, r26
    890c:	54 e0       	ldi	r21, 0x04	; 4
    890e:	45 2e       	mov	r4, r21
    8910:	51 2c       	mov	r5, r1
    8912:	07 c0       	rjmp	.+14     	; 0x8922 <_printf_fn+0x274>
    8914:	b2 e0       	ldi	r27, 0x02	; 2
    8916:	6b 0e       	add	r6, r27
    8918:	71 1c       	adc	r7, r1
    891a:	81 1c       	adc	r8, r1
    891c:	48 e0       	ldi	r20, 0x08	; 8
    891e:	44 2e       	mov	r4, r20
    8920:	51 2c       	mov	r5, r1
    8922:	f3 01       	movw	r30, r6
    8924:	58 2d       	mov	r21, r8
    8926:	0e 94 db e8 	call	0x1d1b6	; 0x1d1b6 <__xload_1>
    892a:	e6 2f       	mov	r30, r22
    892c:	f0 e0       	ldi	r31, 0x00	; 0
    892e:	a3 96       	adiw	r28, 0x23	; 35
    8930:	ff af       	std	Y+63, r31	; 0x3f
    8932:	ee af       	std	Y+62, r30	; 0x3e
    8934:	a3 97       	sbiw	r28, 0x23	; 35
    8936:	e4 36       	cpi	r30, 0x64	; 100
    8938:	f1 05       	cpc	r31, r1
    893a:	09 f4       	brne	.+2      	; 0x893e <_printf_fn+0x290>
    893c:	e5 c2       	rjmp	.+1482   	; 0x8f08 <_printf_fn+0x85a>
    893e:	06 c0       	rjmp	.+12     	; 0x894c <_printf_fn+0x29e>
    8940:	41 2c       	mov	r4, r1
    8942:	51 2c       	mov	r5, r1
    8944:	a3 96       	adiw	r28, 0x23	; 35
    8946:	1f ae       	std	Y+63, r1	; 0x3f
    8948:	1e ae       	std	Y+62, r1	; 0x3e
    894a:	a3 97       	sbiw	r28, 0x23	; 35
    894c:	31 e0       	ldi	r19, 0x01	; 1
    894e:	20 e0       	ldi	r18, 0x00	; 0
    8950:	a3 96       	adiw	r28, 0x23	; 35
    8952:	4e ad       	ldd	r20, Y+62	; 0x3e
    8954:	5f ad       	ldd	r21, Y+63	; 0x3f
    8956:	a3 97       	sbiw	r28, 0x23	; 35
    8958:	44 34       	cpi	r20, 0x44	; 68
    895a:	51 05       	cpc	r21, r1
    895c:	09 f0       	breq	.+2      	; 0x8960 <_printf_fn+0x2b2>
    895e:	30 e0       	ldi	r19, 0x00	; 0
    8960:	83 2f       	mov	r24, r19
    8962:	92 2f       	mov	r25, r18
    8964:	a3 96       	adiw	r28, 0x23	; 35
    8966:	ee ad       	ldd	r30, Y+62	; 0x3e
    8968:	ff ad       	ldd	r31, Y+63	; 0x3f
    896a:	a3 97       	sbiw	r28, 0x23	; 35
    896c:	e2 54       	subi	r30, 0x42	; 66
    896e:	f1 09       	sbc	r31, r1
    8970:	e7 33       	cpi	r30, 0x37	; 55
    8972:	f1 05       	cpc	r31, r1
    8974:	08 f0       	brcs	.+2      	; 0x8978 <_printf_fn+0x2ca>
    8976:	57 c1       	rjmp	.+686    	; 0x8c26 <_printf_fn+0x578>
    8978:	ea 5b       	subi	r30, 0xBA	; 186
    897a:	ff 4f       	sbci	r31, 0xFF	; 255
    897c:	0c 94 75 e8 	jmp	0x1d0ea	; 0x1d0ea <__tablejump2__>
    8980:	32 e0       	ldi	r19, 0x02	; 2
    8982:	43 2e       	mov	r4, r19
    8984:	51 2c       	mov	r5, r1
    8986:	29 2d       	mov	r18, r9
    8988:	28 72       	andi	r18, 0x28	; 40
    898a:	28 32       	cpi	r18, 0x28	; 40
    898c:	11 f4       	brne	.+4      	; 0x8992 <_printf_fn+0x2e4>
    898e:	e8 94       	clt
    8990:	95 f8       	bld	r9, 5
    8992:	29 2d       	mov	r18, r9
    8994:	22 72       	andi	r18, 0x22	; 34
    8996:	22 32       	cpi	r18, 0x22	; 34
    8998:	11 f4       	brne	.+4      	; 0x899e <_printf_fn+0x2f0>
    899a:	e8 94       	clt
    899c:	95 f8       	bld	r9, 5
    899e:	29 2d       	mov	r18, r9
    89a0:	21 72       	andi	r18, 0x21	; 33
    89a2:	21 32       	cpi	r18, 0x21	; 33
    89a4:	79 f4       	brne	.+30     	; 0x89c4 <_printf_fn+0x316>
    89a6:	a1 96       	adiw	r28, 0x21	; 33
    89a8:	ae ad       	ldd	r26, Y+62	; 0x3e
    89aa:	bf ad       	ldd	r27, Y+63	; 0x3f
    89ac:	a1 97       	sbiw	r28, 0x21	; 33
    89ae:	6f 96       	adiw	r28, 0x1f	; 31
    89b0:	ee ad       	ldd	r30, Y+62	; 0x3e
    89b2:	ff ad       	ldd	r31, Y+63	; 0x3f
    89b4:	6f 97       	sbiw	r28, 0x1f	; 31
    89b6:	ae 17       	cp	r26, r30
    89b8:	bf 07       	cpc	r27, r31
    89ba:	24 f4       	brge	.+8      	; 0x89c4 <_printf_fn+0x316>
    89bc:	a1 96       	adiw	r28, 0x21	; 33
    89be:	ff af       	std	Y+63, r31	; 0x3f
    89c0:	ee af       	std	Y+62, r30	; 0x3e
    89c2:	a1 97       	sbiw	r28, 0x21	; 33
    89c4:	29 2d       	mov	r18, r9
    89c6:	23 72       	andi	r18, 0x23	; 35
    89c8:	23 32       	cpi	r18, 0x23	; 35
    89ca:	79 f4       	brne	.+30     	; 0x89ea <_printf_fn+0x33c>
    89cc:	a1 96       	adiw	r28, 0x21	; 33
    89ce:	2e ad       	ldd	r18, Y+62	; 0x3e
    89d0:	3f ad       	ldd	r19, Y+63	; 0x3f
    89d2:	a1 97       	sbiw	r28, 0x21	; 33
    89d4:	6f 96       	adiw	r28, 0x1f	; 31
    89d6:	4e ad       	ldd	r20, Y+62	; 0x3e
    89d8:	5f ad       	ldd	r21, Y+63	; 0x3f
    89da:	6f 97       	sbiw	r28, 0x1f	; 31
    89dc:	24 17       	cp	r18, r20
    89de:	35 07       	cpc	r19, r21
    89e0:	24 f4       	brge	.+8      	; 0x89ea <_printf_fn+0x33c>
    89e2:	a1 96       	adiw	r28, 0x21	; 33
    89e4:	5f af       	std	Y+63, r21	; 0x3f
    89e6:	4e af       	std	Y+62, r20	; 0x3e
    89e8:	a1 97       	sbiw	r28, 0x21	; 33
    89ea:	e8 94       	clt
    89ec:	94 f8       	bld	r9, 4
    89ee:	e8 94       	clt
    89f0:	92 f8       	bld	r9, 2
    89f2:	e8 94       	clt
    89f4:	96 f8       	bld	r9, 6
    89f6:	52 e0       	ldi	r21, 0x02	; 2
    89f8:	45 16       	cp	r4, r21
    89fa:	51 04       	cpc	r5, r1
    89fc:	f9 f4       	brne	.+62     	; 0x8a3c <_printf_fn+0x38e>
    89fe:	51 01       	movw	r10, r2
    8a00:	82 e0       	ldi	r24, 0x02	; 2
    8a02:	a8 0e       	add	r10, r24
    8a04:	b1 1c       	adc	r11, r1
    8a06:	d1 01       	movw	r26, r2
    8a08:	8d 91       	ld	r24, X+
    8a0a:	9c 91       	ld	r25, X
    8a0c:	65 96       	adiw	r28, 0x15	; 21
    8a0e:	9f af       	std	Y+63, r25	; 0x3f
    8a10:	8e af       	std	Y+62, r24	; 0x3e
    8a12:	65 97       	sbiw	r28, 0x15	; 21
    8a14:	a3 96       	adiw	r28, 0x23	; 35
    8a16:	ee ad       	ldd	r30, Y+62	; 0x3e
    8a18:	ff ad       	ldd	r31, Y+63	; 0x3f
    8a1a:	a3 97       	sbiw	r28, 0x23	; 35
    8a1c:	e4 34       	cpi	r30, 0x44	; 68
    8a1e:	f1 05       	cpc	r31, r1
    8a20:	09 f0       	breq	.+2      	; 0x8a24 <_printf_fn+0x376>
    8a22:	ac c0       	rjmp	.+344    	; 0x8b7c <_printf_fn+0x4ce>
    8a24:	97 ff       	sbrs	r25, 7
    8a26:	a7 c0       	rjmp	.+334    	; 0x8b76 <_printf_fn+0x4c8>
    8a28:	68 94       	set
    8a2a:	96 f8       	bld	r9, 6
    8a2c:	91 95       	neg	r25
    8a2e:	81 95       	neg	r24
    8a30:	91 09       	sbc	r25, r1
    8a32:	65 96       	adiw	r28, 0x15	; 21
    8a34:	9f af       	std	Y+63, r25	; 0x3f
    8a36:	8e af       	std	Y+62, r24	; 0x3e
    8a38:	65 97       	sbiw	r28, 0x15	; 21
    8a3a:	9d c0       	rjmp	.+314    	; 0x8b76 <_printf_fn+0x4c8>
    8a3c:	f4 e0       	ldi	r31, 0x04	; 4
    8a3e:	4f 16       	cp	r4, r31
    8a40:	51 04       	cpc	r5, r1
    8a42:	59 f5       	brne	.+86     	; 0x8a9a <_printf_fn+0x3ec>
    8a44:	51 01       	movw	r10, r2
    8a46:	24 e0       	ldi	r18, 0x04	; 4
    8a48:	a2 0e       	add	r10, r18
    8a4a:	b1 1c       	adc	r11, r1
    8a4c:	f1 01       	movw	r30, r2
    8a4e:	80 81       	ld	r24, Z
    8a50:	91 81       	ldd	r25, Z+1	; 0x01
    8a52:	a2 81       	ldd	r26, Z+2	; 0x02
    8a54:	b3 81       	ldd	r27, Z+3	; 0x03
    8a56:	2f 96       	adiw	r28, 0x0f	; 15
    8a58:	8c af       	std	Y+60, r24	; 0x3c
    8a5a:	9d af       	std	Y+61, r25	; 0x3d
    8a5c:	ae af       	std	Y+62, r26	; 0x3e
    8a5e:	bf af       	std	Y+63, r27	; 0x3f
    8a60:	2f 97       	sbiw	r28, 0x0f	; 15
    8a62:	a3 96       	adiw	r28, 0x23	; 35
    8a64:	2e ad       	ldd	r18, Y+62	; 0x3e
    8a66:	3f ad       	ldd	r19, Y+63	; 0x3f
    8a68:	a3 97       	sbiw	r28, 0x23	; 35
    8a6a:	24 34       	cpi	r18, 0x44	; 68
    8a6c:	31 05       	cpc	r19, r1
    8a6e:	09 f0       	breq	.+2      	; 0x8a72 <_printf_fn+0x3c4>
    8a70:	8f c0       	rjmp	.+286    	; 0x8b90 <_printf_fn+0x4e2>
    8a72:	b7 ff       	sbrs	r27, 7
    8a74:	8a c0       	rjmp	.+276    	; 0x8b8a <_printf_fn+0x4dc>
    8a76:	68 94       	set
    8a78:	96 f8       	bld	r9, 6
    8a7a:	b0 95       	com	r27
    8a7c:	a0 95       	com	r26
    8a7e:	90 95       	com	r25
    8a80:	81 95       	neg	r24
    8a82:	9f 4f       	sbci	r25, 0xFF	; 255
    8a84:	af 4f       	sbci	r26, 0xFF	; 255
    8a86:	bf 4f       	sbci	r27, 0xFF	; 255
    8a88:	2f 96       	adiw	r28, 0x0f	; 15
    8a8a:	8c af       	std	Y+60, r24	; 0x3c
    8a8c:	9d af       	std	Y+61, r25	; 0x3d
    8a8e:	ae af       	std	Y+62, r26	; 0x3e
    8a90:	bf af       	std	Y+63, r27	; 0x3f
    8a92:	2f 97       	sbiw	r28, 0x0f	; 15
    8a94:	7a c0       	rjmp	.+244    	; 0x8b8a <_printf_fn+0x4dc>
    8a96:	81 e0       	ldi	r24, 0x01	; 1
    8a98:	90 e0       	ldi	r25, 0x00	; 0
    8a9a:	51 01       	movw	r10, r2
    8a9c:	38 e0       	ldi	r19, 0x08	; 8
    8a9e:	43 16       	cp	r4, r19
    8aa0:	51 04       	cpc	r5, r1
    8aa2:	09 f0       	breq	.+2      	; 0x8aa6 <_printf_fn+0x3f8>
    8aa4:	7c c0       	rjmp	.+248    	; 0x8b9e <_printf_fn+0x4f0>
    8aa6:	48 e0       	ldi	r20, 0x08	; 8
    8aa8:	a4 0e       	add	r10, r20
    8aaa:	b1 1c       	adc	r11, r1
    8aac:	d1 01       	movw	r26, r2
    8aae:	fc 90       	ld	r15, X
    8ab0:	f1 01       	movw	r30, r2
    8ab2:	01 81       	ldd	r16, Z+1	; 0x01
    8ab4:	12 81       	ldd	r17, Z+2	; 0x02
    8ab6:	f3 81       	ldd	r31, Z+3	; 0x03
    8ab8:	aa 96       	adiw	r28, 0x2a	; 42
    8aba:	ff af       	std	Y+63, r31	; 0x3f
    8abc:	aa 97       	sbiw	r28, 0x2a	; 42
    8abe:	f1 01       	movw	r30, r2
    8ac0:	f4 81       	ldd	r31, Z+4	; 0x04
    8ac2:	ab 96       	adiw	r28, 0x2b	; 43
    8ac4:	ff af       	std	Y+63, r31	; 0x3f
    8ac6:	ab 97       	sbiw	r28, 0x2b	; 43
    8ac8:	f1 01       	movw	r30, r2
    8aca:	b5 81       	ldd	r27, Z+5	; 0x05
    8acc:	f6 81       	ldd	r31, Z+6	; 0x06
    8ace:	af 96       	adiw	r28, 0x2f	; 47
    8ad0:	ff af       	std	Y+63, r31	; 0x3f
    8ad2:	af 97       	sbiw	r28, 0x2f	; 47
    8ad4:	f1 01       	movw	r30, r2
    8ad6:	37 80       	ldd	r3, Z+7	; 0x07
    8ad8:	24 96       	adiw	r28, 0x04	; 4
    8ada:	ff ae       	std	Y+63, r15	; 0x3f
    8adc:	24 97       	sbiw	r28, 0x04	; 4
    8ade:	25 96       	adiw	r28, 0x05	; 5
    8ae0:	0f af       	std	Y+63, r16	; 0x3f
    8ae2:	25 97       	sbiw	r28, 0x05	; 5
    8ae4:	26 96       	adiw	r28, 0x06	; 6
    8ae6:	1f af       	std	Y+63, r17	; 0x3f
    8ae8:	26 97       	sbiw	r28, 0x06	; 6
    8aea:	aa 96       	adiw	r28, 0x2a	; 42
    8aec:	ff ad       	ldd	r31, Y+63	; 0x3f
    8aee:	aa 97       	sbiw	r28, 0x2a	; 42
    8af0:	27 96       	adiw	r28, 0x07	; 7
    8af2:	ff af       	std	Y+63, r31	; 0x3f
    8af4:	27 97       	sbiw	r28, 0x07	; 7
    8af6:	ab 96       	adiw	r28, 0x2b	; 43
    8af8:	ef ad       	ldd	r30, Y+63	; 0x3f
    8afa:	ab 97       	sbiw	r28, 0x2b	; 43
    8afc:	28 96       	adiw	r28, 0x08	; 8
    8afe:	ef af       	std	Y+63, r30	; 0x3f
    8b00:	28 97       	sbiw	r28, 0x08	; 8
    8b02:	29 96       	adiw	r28, 0x09	; 9
    8b04:	bf af       	std	Y+63, r27	; 0x3f
    8b06:	29 97       	sbiw	r28, 0x09	; 9
    8b08:	af 96       	adiw	r28, 0x2f	; 47
    8b0a:	ff ad       	ldd	r31, Y+63	; 0x3f
    8b0c:	af 97       	sbiw	r28, 0x2f	; 47
    8b0e:	2a 96       	adiw	r28, 0x0a	; 10
    8b10:	ff af       	std	Y+63, r31	; 0x3f
    8b12:	2a 97       	sbiw	r28, 0x0a	; 10
    8b14:	2b 96       	adiw	r28, 0x0b	; 11
    8b16:	3f ae       	std	Y+63, r3	; 0x3f
    8b18:	2b 97       	sbiw	r28, 0x0b	; 11
    8b1a:	89 2b       	or	r24, r25
    8b1c:	09 f4       	brne	.+2      	; 0x8b20 <_printf_fn+0x472>
    8b1e:	4a c0       	rjmp	.+148    	; 0x8bb4 <_printf_fn+0x506>
    8b20:	2f 2d       	mov	r18, r15
    8b22:	30 2f       	mov	r19, r16
    8b24:	41 2f       	mov	r20, r17
    8b26:	aa 96       	adiw	r28, 0x2a	; 42
    8b28:	5f ad       	ldd	r21, Y+63	; 0x3f
    8b2a:	aa 97       	sbiw	r28, 0x2a	; 42
    8b2c:	6e 2f       	mov	r22, r30
    8b2e:	7b 2f       	mov	r23, r27
    8b30:	8f 2f       	mov	r24, r31
    8b32:	93 2d       	mov	r25, r3
    8b34:	a0 e0       	ldi	r26, 0x00	; 0
    8b36:	0e 94 e2 e8 	call	0x1d1c4	; 0x1d1c4 <__cmpdi2_s8>
    8b3a:	e4 f5       	brge	.+120    	; 0x8bb4 <_printf_fn+0x506>
    8b3c:	68 94       	set
    8b3e:	96 f8       	bld	r9, 6
    8b40:	0e 94 94 e8 	call	0x1d128	; 0x1d128 <__negdi2>
    8b44:	24 96       	adiw	r28, 0x04	; 4
    8b46:	2f af       	std	Y+63, r18	; 0x3f
    8b48:	24 97       	sbiw	r28, 0x04	; 4
    8b4a:	25 96       	adiw	r28, 0x05	; 5
    8b4c:	3f af       	std	Y+63, r19	; 0x3f
    8b4e:	25 97       	sbiw	r28, 0x05	; 5
    8b50:	26 96       	adiw	r28, 0x06	; 6
    8b52:	4f af       	std	Y+63, r20	; 0x3f
    8b54:	26 97       	sbiw	r28, 0x06	; 6
    8b56:	27 96       	adiw	r28, 0x07	; 7
    8b58:	5f af       	std	Y+63, r21	; 0x3f
    8b5a:	27 97       	sbiw	r28, 0x07	; 7
    8b5c:	28 96       	adiw	r28, 0x08	; 8
    8b5e:	6f af       	std	Y+63, r22	; 0x3f
    8b60:	28 97       	sbiw	r28, 0x08	; 8
    8b62:	29 96       	adiw	r28, 0x09	; 9
    8b64:	7f af       	std	Y+63, r23	; 0x3f
    8b66:	29 97       	sbiw	r28, 0x09	; 9
    8b68:	2a 96       	adiw	r28, 0x0a	; 10
    8b6a:	8f af       	std	Y+63, r24	; 0x3f
    8b6c:	2a 97       	sbiw	r28, 0x0a	; 10
    8b6e:	2b 96       	adiw	r28, 0x0b	; 11
    8b70:	9f af       	std	Y+63, r25	; 0x3f
    8b72:	2b 97       	sbiw	r28, 0x0b	; 11
    8b74:	1f c0       	rjmp	.+62     	; 0x8bb4 <_printf_fn+0x506>
    8b76:	22 e0       	ldi	r18, 0x02	; 2
    8b78:	42 2e       	mov	r4, r18
    8b7a:	51 2c       	mov	r5, r1
    8b7c:	6c 96       	adiw	r28, 0x1c	; 28
    8b7e:	8f ad       	ldd	r24, Y+63	; 0x3f
    8b80:	6c 97       	sbiw	r28, 0x1c	; 28
    8b82:	6d 96       	adiw	r28, 0x1d	; 29
    8b84:	9f ad       	ldd	r25, Y+63	; 0x3f
    8b86:	6d 97       	sbiw	r28, 0x1d	; 29
    8b88:	1b c0       	rjmp	.+54     	; 0x8bc0 <_printf_fn+0x512>
    8b8a:	94 e0       	ldi	r25, 0x04	; 4
    8b8c:	49 2e       	mov	r4, r25
    8b8e:	51 2c       	mov	r5, r1
    8b90:	6a 96       	adiw	r28, 0x1a	; 26
    8b92:	8f ad       	ldd	r24, Y+63	; 0x3f
    8b94:	6a 97       	sbiw	r28, 0x1a	; 26
    8b96:	6b 96       	adiw	r28, 0x1b	; 27
    8b98:	9f ad       	ldd	r25, Y+63	; 0x3f
    8b9a:	6b 97       	sbiw	r28, 0x1b	; 27
    8b9c:	11 c0       	rjmp	.+34     	; 0x8bc0 <_printf_fn+0x512>
    8b9e:	66 96       	adiw	r28, 0x16	; 22
    8ba0:	8f ad       	ldd	r24, Y+63	; 0x3f
    8ba2:	66 97       	sbiw	r28, 0x16	; 22
    8ba4:	67 96       	adiw	r28, 0x17	; 23
    8ba6:	9f ad       	ldd	r25, Y+63	; 0x3f
    8ba8:	67 97       	sbiw	r28, 0x17	; 23
    8baa:	a3 96       	adiw	r28, 0x23	; 35
    8bac:	1f ae       	std	Y+63, r1	; 0x3f
    8bae:	1e ae       	std	Y+62, r1	; 0x3e
    8bb0:	a3 97       	sbiw	r28, 0x23	; 35
    8bb2:	06 c0       	rjmp	.+12     	; 0x8bc0 <_printf_fn+0x512>
    8bb4:	68 96       	adiw	r28, 0x18	; 24
    8bb6:	8f ad       	ldd	r24, Y+63	; 0x3f
    8bb8:	68 97       	sbiw	r28, 0x18	; 24
    8bba:	69 96       	adiw	r28, 0x19	; 25
    8bbc:	9f ad       	ldd	r25, Y+63	; 0x3f
    8bbe:	69 97       	sbiw	r28, 0x19	; 25
    8bc0:	2f ef       	ldi	r18, 0xFF	; 255
    8bc2:	62 1a       	sub	r6, r18
    8bc4:	72 0a       	sbc	r7, r18
    8bc6:	82 0a       	sbc	r8, r18
    8bc8:	15 01       	movw	r2, r10
    8bca:	33 c0       	rjmp	.+102    	; 0x8c32 <_printf_fn+0x584>
    8bcc:	91 fc       	sbrc	r9, 1
    8bce:	08 c0       	rjmp	.+16     	; 0x8be0 <_printf_fn+0x532>
    8bd0:	68 94       	set
    8bd2:	91 f8       	bld	r9, 1
    8bd4:	46 e0       	ldi	r20, 0x06	; 6
    8bd6:	50 e0       	ldi	r21, 0x00	; 0
    8bd8:	a1 96       	adiw	r28, 0x21	; 33
    8bda:	5f af       	std	Y+63, r21	; 0x3f
    8bdc:	4e af       	std	Y+62, r20	; 0x3e
    8bde:	a1 97       	sbiw	r28, 0x21	; 33
    8be0:	d1 01       	movw	r26, r2
    8be2:	8d 91       	ld	r24, X+
    8be4:	9d 91       	ld	r25, X+
    8be6:	0d 90       	ld	r0, X+
    8be8:	bc 91       	ld	r27, X
    8bea:	a0 2d       	mov	r26, r0
    8bec:	a9 96       	adiw	r28, 0x29	; 41
    8bee:	8c af       	std	Y+60, r24	; 0x3c
    8bf0:	9d af       	std	Y+61, r25	; 0x3d
    8bf2:	ae af       	std	Y+62, r26	; 0x3e
    8bf4:	bf af       	std	Y+63, r27	; 0x3f
    8bf6:	a9 97       	sbiw	r28, 0x29	; 41
    8bf8:	bf ef       	ldi	r27, 0xFF	; 255
    8bfa:	6b 1a       	sub	r6, r27
    8bfc:	7b 0a       	sbc	r7, r27
    8bfe:	8b 0a       	sbc	r8, r27
    8c00:	f1 01       	movw	r30, r2
    8c02:	34 96       	adiw	r30, 0x04	; 4
    8c04:	1f 01       	movw	r2, r30
    8c06:	0f c0       	rjmp	.+30     	; 0x8c26 <_printf_fn+0x578>
    8c08:	ff ef       	ldi	r31, 0xFF	; 255
    8c0a:	6f 1a       	sub	r6, r31
    8c0c:	7f 0a       	sbc	r7, r31
    8c0e:	8f 0a       	sbc	r8, r31
    8c10:	c5 c0       	rjmp	.+394    	; 0x8d9c <_printf_fn+0x6ee>
    8c12:	2f ef       	ldi	r18, 0xFF	; 255
    8c14:	62 1a       	sub	r6, r18
    8c16:	72 0a       	sbc	r7, r18
    8c18:	82 0a       	sbc	r8, r18
    8c1a:	11 c1       	rjmp	.+546    	; 0x8e3e <_printf_fn+0x790>
    8c1c:	3f ef       	ldi	r19, 0xFF	; 255
    8c1e:	63 1a       	sub	r6, r19
    8c20:	73 0a       	sbc	r7, r19
    8c22:	83 0a       	sbc	r8, r19
    8c24:	c8 c0       	rjmp	.+400    	; 0x8db6 <_printf_fn+0x708>
    8c26:	66 96       	adiw	r28, 0x16	; 22
    8c28:	8f ad       	ldd	r24, Y+63	; 0x3f
    8c2a:	66 97       	sbiw	r28, 0x16	; 22
    8c2c:	67 96       	adiw	r28, 0x17	; 23
    8c2e:	9f ad       	ldd	r25, Y+63	; 0x3f
    8c30:	67 97       	sbiw	r28, 0x17	; 23
    8c32:	a3 96       	adiw	r28, 0x23	; 35
    8c34:	ee ad       	ldd	r30, Y+62	; 0x3e
    8c36:	ff ad       	ldd	r31, Y+63	; 0x3f
    8c38:	a3 97       	sbiw	r28, 0x23	; 35
    8c3a:	e2 54       	subi	r30, 0x42	; 66
    8c3c:	f1 09       	sbc	r31, r1
    8c3e:	e7 33       	cpi	r30, 0x37	; 55
    8c40:	f1 05       	cpc	r31, r1
    8c42:	08 f0       	brcs	.+2      	; 0x8c46 <_printf_fn+0x598>
    8c44:	56 c1       	rjmp	.+684    	; 0x8ef2 <_printf_fn+0x844>
    8c46:	e3 58       	subi	r30, 0x83	; 131
    8c48:	ff 4f       	sbci	r31, 0xFF	; 255
    8c4a:	0c 94 75 e8 	jmp	0x1d0ea	; 0x1d0ea <__tablejump2__>
    8c4e:	e8 94       	clt
    8c50:	94 f8       	bld	r9, 4
    8c52:	e8 94       	clt
    8c54:	92 f8       	bld	r9, 2
    8c56:	a9 2c       	mov	r10, r9
    8c58:	b1 2c       	mov	r11, r1
    8c5a:	a1 96       	adiw	r28, 0x21	; 33
    8c5c:	ce ac       	ldd	r12, Y+62	; 0x3e
    8c5e:	df ac       	ldd	r13, Y+63	; 0x3f
    8c60:	a1 97       	sbiw	r28, 0x21	; 33
    8c62:	6f 96       	adiw	r28, 0x1f	; 31
    8c64:	ee ac       	ldd	r14, Y+62	; 0x3e
    8c66:	ff ac       	ldd	r15, Y+63	; 0x3f
    8c68:	6f 97       	sbiw	r28, 0x1f	; 31
    8c6a:	0a e0       	ldi	r16, 0x0A	; 10
    8c6c:	10 e0       	ldi	r17, 0x00	; 0
    8c6e:	19 c0       	rjmp	.+50     	; 0x8ca2 <_printf_fn+0x5f4>
    8c70:	a9 2c       	mov	r10, r9
    8c72:	b1 2c       	mov	r11, r1
    8c74:	a1 96       	adiw	r28, 0x21	; 33
    8c76:	ce ac       	ldd	r12, Y+62	; 0x3e
    8c78:	df ac       	ldd	r13, Y+63	; 0x3f
    8c7a:	a1 97       	sbiw	r28, 0x21	; 33
    8c7c:	6f 96       	adiw	r28, 0x1f	; 31
    8c7e:	ee ac       	ldd	r14, Y+62	; 0x3e
    8c80:	ff ac       	ldd	r15, Y+63	; 0x3f
    8c82:	6f 97       	sbiw	r28, 0x1f	; 31
    8c84:	02 e0       	ldi	r16, 0x02	; 2
    8c86:	10 e0       	ldi	r17, 0x00	; 0
    8c88:	0c c0       	rjmp	.+24     	; 0x8ca2 <_printf_fn+0x5f4>
    8c8a:	a9 2c       	mov	r10, r9
    8c8c:	b1 2c       	mov	r11, r1
    8c8e:	a1 96       	adiw	r28, 0x21	; 33
    8c90:	ce ac       	ldd	r12, Y+62	; 0x3e
    8c92:	df ac       	ldd	r13, Y+63	; 0x3f
    8c94:	a1 97       	sbiw	r28, 0x21	; 33
    8c96:	6f 96       	adiw	r28, 0x1f	; 31
    8c98:	ee ac       	ldd	r14, Y+62	; 0x3e
    8c9a:	ff ac       	ldd	r15, Y+63	; 0x3f
    8c9c:	6f 97       	sbiw	r28, 0x1f	; 31
    8c9e:	08 e0       	ldi	r16, 0x08	; 8
    8ca0:	10 e0       	ldi	r17, 0x00	; 0
    8ca2:	22 e4       	ldi	r18, 0x42	; 66
    8ca4:	30 e0       	ldi	r19, 0x00	; 0
    8ca6:	ae 01       	movw	r20, r28
    8ca8:	4f 5f       	subi	r20, 0xFF	; 255
    8caa:	5f 4f       	sbci	r21, 0xFF	; 255
    8cac:	b2 01       	movw	r22, r4
    8cae:	7d d9       	rcall	.-3334   	; 0x7faa <p_ntoa>
    8cb0:	34 c0       	rjmp	.+104    	; 0x8d1a <_printf_fn+0x66c>
    8cb2:	a9 2c       	mov	r10, r9
    8cb4:	b1 2c       	mov	r11, r1
    8cb6:	a1 96       	adiw	r28, 0x21	; 33
    8cb8:	ce ac       	ldd	r12, Y+62	; 0x3e
    8cba:	df ac       	ldd	r13, Y+63	; 0x3f
    8cbc:	a1 97       	sbiw	r28, 0x21	; 33
    8cbe:	6f 96       	adiw	r28, 0x1f	; 31
    8cc0:	ee ac       	ldd	r14, Y+62	; 0x3e
    8cc2:	ff ac       	ldd	r15, Y+63	; 0x3f
    8cc4:	6f 97       	sbiw	r28, 0x1f	; 31
    8cc6:	00 e1       	ldi	r16, 0x10	; 16
    8cc8:	10 e0       	ldi	r17, 0x00	; 0
    8cca:	22 e4       	ldi	r18, 0x42	; 66
    8ccc:	30 e0       	ldi	r19, 0x00	; 0
    8cce:	ae 01       	movw	r20, r28
    8cd0:	4f 5f       	subi	r20, 0xFF	; 255
    8cd2:	5f 4f       	sbci	r21, 0xFF	; 255
    8cd4:	b2 01       	movw	r22, r4
    8cd6:	69 d9       	rcall	.-3374   	; 0x7faa <p_ntoa>
    8cd8:	6c 01       	movw	r12, r24
    8cda:	a3 96       	adiw	r28, 0x23	; 35
    8cdc:	6e ad       	ldd	r22, Y+62	; 0x3e
    8cde:	7f ad       	ldd	r23, Y+63	; 0x3f
    8ce0:	a3 97       	sbiw	r28, 0x23	; 35
    8ce2:	67 7f       	andi	r22, 0xF7	; 247
    8ce4:	60 35       	cpi	r22, 0x50	; 80
    8ce6:	71 05       	cpc	r23, r1
    8ce8:	09 f0       	breq	.+2      	; 0x8cec <_printf_fn+0x63e>
    8cea:	3f c0       	rjmp	.+126    	; 0x8d6a <_printf_fn+0x6bc>
    8cec:	3a c0       	rjmp	.+116    	; 0x8d62 <_printf_fn+0x6b4>
    8cee:	c9 2c       	mov	r12, r9
    8cf0:	d1 2c       	mov	r13, r1
    8cf2:	a1 96       	adiw	r28, 0x21	; 33
    8cf4:	ee ac       	ldd	r14, Y+62	; 0x3e
    8cf6:	ff ac       	ldd	r15, Y+63	; 0x3f
    8cf8:	a1 97       	sbiw	r28, 0x21	; 33
    8cfa:	6f 96       	adiw	r28, 0x1f	; 31
    8cfc:	0e ad       	ldd	r16, Y+62	; 0x3e
    8cfe:	1f ad       	ldd	r17, Y+63	; 0x3f
    8d00:	6f 97       	sbiw	r28, 0x1f	; 31
    8d02:	22 e4       	ldi	r18, 0x42	; 66
    8d04:	30 e0       	ldi	r19, 0x00	; 0
    8d06:	ae 01       	movw	r20, r28
    8d08:	4f 5f       	subi	r20, 0xFF	; 255
    8d0a:	5f 4f       	sbci	r21, 0xFF	; 255
    8d0c:	a9 96       	adiw	r28, 0x29	; 41
    8d0e:	6c ad       	ldd	r22, Y+60	; 0x3c
    8d10:	7d ad       	ldd	r23, Y+61	; 0x3d
    8d12:	8e ad       	ldd	r24, Y+62	; 0x3e
    8d14:	9f ad       	ldd	r25, Y+63	; 0x3f
    8d16:	a9 97       	sbiw	r28, 0x29	; 41
    8d18:	9d d9       	rcall	.-3270   	; 0x8054 <p_ftoa>
    8d1a:	93 fa       	bst	r9, 3
    8d1c:	00 27       	eor	r16, r16
    8d1e:	00 f9       	bld	r16, 0
    8d20:	10 e0       	ldi	r17, 0x00	; 0
    8d22:	9c 01       	movw	r18, r24
    8d24:	27 c0       	rjmp	.+78     	; 0x8d74 <_printf_fn+0x6c6>
    8d26:	c9 2c       	mov	r12, r9
    8d28:	d1 2c       	mov	r13, r1
    8d2a:	a1 96       	adiw	r28, 0x21	; 33
    8d2c:	ee ac       	ldd	r14, Y+62	; 0x3e
    8d2e:	ff ac       	ldd	r15, Y+63	; 0x3f
    8d30:	a1 97       	sbiw	r28, 0x21	; 33
    8d32:	6f 96       	adiw	r28, 0x1f	; 31
    8d34:	0e ad       	ldd	r16, Y+62	; 0x3e
    8d36:	1f ad       	ldd	r17, Y+63	; 0x3f
    8d38:	6f 97       	sbiw	r28, 0x1f	; 31
    8d3a:	22 e4       	ldi	r18, 0x42	; 66
    8d3c:	30 e0       	ldi	r19, 0x00	; 0
    8d3e:	ae 01       	movw	r20, r28
    8d40:	4f 5f       	subi	r20, 0xFF	; 255
    8d42:	5f 4f       	sbci	r21, 0xFF	; 255
    8d44:	a9 96       	adiw	r28, 0x29	; 41
    8d46:	6c ad       	ldd	r22, Y+60	; 0x3c
    8d48:	7d ad       	ldd	r23, Y+61	; 0x3d
    8d4a:	8e ad       	ldd	r24, Y+62	; 0x3e
    8d4c:	9f ad       	ldd	r25, Y+63	; 0x3f
    8d4e:	a9 97       	sbiw	r28, 0x29	; 41
    8d50:	88 da       	rcall	.-2800   	; 0x8262 <p_etoa>
    8d52:	6c 01       	movw	r12, r24
    8d54:	a3 96       	adiw	r28, 0x23	; 35
    8d56:	4e ad       	ldd	r20, Y+62	; 0x3e
    8d58:	5f ad       	ldd	r21, Y+63	; 0x3f
    8d5a:	a3 97       	sbiw	r28, 0x23	; 35
    8d5c:	45 34       	cpi	r20, 0x45	; 69
    8d5e:	51 05       	cpc	r21, r1
    8d60:	21 f4       	brne	.+8      	; 0x8d6a <_printf_fn+0x6bc>
    8d62:	ce 01       	movw	r24, r28
    8d64:	01 96       	adiw	r24, 0x01	; 1
    8d66:	0e 94 8a 32 	call	0x6514	; 0x6514 <strupper>
    8d6a:	93 fa       	bst	r9, 3
    8d6c:	00 27       	eor	r16, r16
    8d6e:	00 f9       	bld	r16, 0
    8d70:	10 e0       	ldi	r17, 0x00	; 0
    8d72:	96 01       	movw	r18, r12
    8d74:	6f 96       	adiw	r28, 0x1f	; 31
    8d76:	4e ad       	ldd	r20, Y+62	; 0x3e
    8d78:	5f ad       	ldd	r21, Y+63	; 0x3f
    8d7a:	6f 97       	sbiw	r28, 0x1f	; 31
    8d7c:	be 01       	movw	r22, r28
    8d7e:	6f 5f       	subi	r22, 0xFF	; 255
    8d80:	7f 4f       	sbci	r23, 0xFF	; 255
    8d82:	a5 96       	adiw	r28, 0x25	; 37
    8d84:	8e ad       	ldd	r24, Y+62	; 0x3e
    8d86:	9f ad       	ldd	r25, Y+63	; 0x3f
    8d88:	a5 97       	sbiw	r28, 0x25	; 37
    8d8a:	d7 db       	rcall	.-2130   	; 0x853a <_puts_pad>
    8d8c:	b6 c0       	rjmp	.+364    	; 0x8efa <_printf_fn+0x84c>
    8d8e:	a3 96       	adiw	r28, 0x23	; 35
    8d90:	8e ad       	ldd	r24, Y+62	; 0x3e
    8d92:	9f ad       	ldd	r25, Y+63	; 0x3f
    8d94:	a3 97       	sbiw	r28, 0x23	; 35
    8d96:	83 37       	cpi	r24, 0x73	; 115
    8d98:	91 05       	cpc	r25, r1
    8d9a:	69 f4       	brne	.+26     	; 0x8db6 <_printf_fn+0x708>
    8d9c:	61 01       	movw	r12, r2
    8d9e:	92 e0       	ldi	r25, 0x02	; 2
    8da0:	c9 0e       	add	r12, r25
    8da2:	d1 1c       	adc	r13, r1
    8da4:	d1 01       	movw	r26, r2
    8da6:	6d 91       	ld	r22, X+
    8da8:	7c 91       	ld	r23, X
    8daa:	61 15       	cp	r22, r1
    8dac:	71 05       	cpc	r23, r1
    8dae:	91 f4       	brne	.+36     	; 0x8dd4 <_printf_fn+0x726>
    8db0:	6a e1       	ldi	r22, 0x1A	; 26
    8db2:	74 e0       	ldi	r23, 0x04	; 4
    8db4:	0f c0       	rjmp	.+30     	; 0x8dd4 <_printf_fn+0x726>
    8db6:	61 01       	movw	r12, r2
    8db8:	b2 e0       	ldi	r27, 0x02	; 2
    8dba:	cb 0e       	add	r12, r27
    8dbc:	d1 1c       	adc	r13, r1
    8dbe:	f1 01       	movw	r30, r2
    8dc0:	80 81       	ld	r24, Z
    8dc2:	60 96       	adiw	r28, 0x10	; 16
    8dc4:	8f af       	std	Y+63, r24	; 0x3f
    8dc6:	60 97       	sbiw	r28, 0x10	; 16
    8dc8:	61 96       	adiw	r28, 0x11	; 17
    8dca:	1f ae       	std	Y+63, r1	; 0x3f
    8dcc:	61 97       	sbiw	r28, 0x11	; 17
    8dce:	be 01       	movw	r22, r28
    8dd0:	61 5b       	subi	r22, 0xB1	; 177
    8dd2:	7f 4f       	sbci	r23, 0xFF	; 255
    8dd4:	fb 01       	movw	r30, r22
    8dd6:	01 90       	ld	r0, Z+
    8dd8:	00 20       	and	r0, r0
    8dda:	e9 f7       	brne	.-6      	; 0x8dd6 <_printf_fn+0x728>
    8ddc:	31 97       	sbiw	r30, 0x01	; 1
    8dde:	e6 1b       	sub	r30, r22
    8de0:	f7 0b       	sbc	r31, r23
    8de2:	a1 96       	adiw	r28, 0x21	; 33
    8de4:	2e ad       	ldd	r18, Y+62	; 0x3e
    8de6:	3f ad       	ldd	r19, Y+63	; 0x3f
    8de8:	a1 97       	sbiw	r28, 0x21	; 33
    8dea:	23 2b       	or	r18, r19
    8dec:	21 f4       	brne	.+8      	; 0x8df6 <_printf_fn+0x748>
    8dee:	a1 96       	adiw	r28, 0x21	; 33
    8df0:	ff af       	std	Y+63, r31	; 0x3f
    8df2:	ee af       	std	Y+62, r30	; 0x3e
    8df4:	a1 97       	sbiw	r28, 0x21	; 33
    8df6:	6f 96       	adiw	r28, 0x1f	; 31
    8df8:	4e ad       	ldd	r20, Y+62	; 0x3e
    8dfa:	5f ad       	ldd	r21, Y+63	; 0x3f
    8dfc:	6f 97       	sbiw	r28, 0x1f	; 31
    8dfe:	a1 96       	adiw	r28, 0x21	; 33
    8e00:	8e ad       	ldd	r24, Y+62	; 0x3e
    8e02:	9f ad       	ldd	r25, Y+63	; 0x3f
    8e04:	a1 97       	sbiw	r28, 0x21	; 33
    8e06:	48 17       	cp	r20, r24
    8e08:	59 07       	cpc	r21, r25
    8e0a:	3c f4       	brge	.+14     	; 0x8e1a <_printf_fn+0x76c>
    8e0c:	41 15       	cp	r20, r1
    8e0e:	51 05       	cpc	r21, r1
    8e10:	21 f0       	breq	.+8      	; 0x8e1a <_printf_fn+0x76c>
    8e12:	a1 96       	adiw	r28, 0x21	; 33
    8e14:	5f af       	std	Y+63, r21	; 0x3f
    8e16:	4e af       	std	Y+62, r20	; 0x3e
    8e18:	a1 97       	sbiw	r28, 0x21	; 33
    8e1a:	93 fa       	bst	r9, 3
    8e1c:	00 27       	eor	r16, r16
    8e1e:	00 f9       	bld	r16, 0
    8e20:	10 e0       	ldi	r17, 0x00	; 0
    8e22:	a1 96       	adiw	r28, 0x21	; 33
    8e24:	2e ad       	ldd	r18, Y+62	; 0x3e
    8e26:	3f ad       	ldd	r19, Y+63	; 0x3f
    8e28:	a1 97       	sbiw	r28, 0x21	; 33
    8e2a:	6f 96       	adiw	r28, 0x1f	; 31
    8e2c:	4e ad       	ldd	r20, Y+62	; 0x3e
    8e2e:	5f ad       	ldd	r21, Y+63	; 0x3f
    8e30:	6f 97       	sbiw	r28, 0x1f	; 31
    8e32:	a5 96       	adiw	r28, 0x25	; 37
    8e34:	8e ad       	ldd	r24, Y+62	; 0x3e
    8e36:	9f ad       	ldd	r25, Y+63	; 0x3f
    8e38:	a5 97       	sbiw	r28, 0x25	; 37
    8e3a:	7f db       	rcall	.-2306   	; 0x853a <_puts_pad>
    8e3c:	45 c0       	rjmp	.+138    	; 0x8ec8 <_printf_fn+0x81a>
    8e3e:	61 01       	movw	r12, r2
    8e40:	92 e0       	ldi	r25, 0x02	; 2
    8e42:	c9 0e       	add	r12, r25
    8e44:	d1 1c       	adc	r13, r1
    8e46:	d1 01       	movw	r26, r2
    8e48:	2d 90       	ld	r2, X+
    8e4a:	3c 90       	ld	r3, X
    8e4c:	41 2c       	mov	r4, r1
    8e4e:	21 14       	cp	r2, r1
    8e50:	31 04       	cpc	r3, r1
    8e52:	41 04       	cpc	r4, r1
    8e54:	29 f4       	brne	.+10     	; 0x8e60 <_printf_fn+0x7b2>
    8e56:	ae 96       	adiw	r28, 0x2e	; 46
    8e58:	2d ac       	ldd	r2, Y+61	; 0x3d
    8e5a:	3e ac       	ldd	r3, Y+62	; 0x3e
    8e5c:	4f ac       	ldd	r4, Y+63	; 0x3f
    8e5e:	ae 97       	sbiw	r28, 0x2e	; 46
    8e60:	84 2d       	mov	r24, r4
    8e62:	b1 01       	movw	r22, r2
    8e64:	08 dc       	rcall	.-2032   	; 0x8676 <strlen_X>
    8e66:	a1 96       	adiw	r28, 0x21	; 33
    8e68:	ee ad       	ldd	r30, Y+62	; 0x3e
    8e6a:	ff ad       	ldd	r31, Y+63	; 0x3f
    8e6c:	a1 97       	sbiw	r28, 0x21	; 33
    8e6e:	ef 2b       	or	r30, r31
    8e70:	31 f4       	brne	.+12     	; 0x8e7e <_printf_fn+0x7d0>
    8e72:	a0 96       	adiw	r28, 0x20	; 32
    8e74:	8f af       	std	Y+63, r24	; 0x3f
    8e76:	a0 97       	sbiw	r28, 0x20	; 32
    8e78:	a1 96       	adiw	r28, 0x21	; 33
    8e7a:	9f af       	std	Y+63, r25	; 0x3f
    8e7c:	a1 97       	sbiw	r28, 0x21	; 33
    8e7e:	6f 96       	adiw	r28, 0x1f	; 31
    8e80:	2e ad       	ldd	r18, Y+62	; 0x3e
    8e82:	3f ad       	ldd	r19, Y+63	; 0x3f
    8e84:	6f 97       	sbiw	r28, 0x1f	; 31
    8e86:	a1 96       	adiw	r28, 0x21	; 33
    8e88:	4e ad       	ldd	r20, Y+62	; 0x3e
    8e8a:	5f ad       	ldd	r21, Y+63	; 0x3f
    8e8c:	a1 97       	sbiw	r28, 0x21	; 33
    8e8e:	24 17       	cp	r18, r20
    8e90:	35 07       	cpc	r19, r21
    8e92:	3c f4       	brge	.+14     	; 0x8ea2 <_printf_fn+0x7f4>
    8e94:	21 15       	cp	r18, r1
    8e96:	31 05       	cpc	r19, r1
    8e98:	21 f0       	breq	.+8      	; 0x8ea2 <_printf_fn+0x7f4>
    8e9a:	a1 96       	adiw	r28, 0x21	; 33
    8e9c:	3f af       	std	Y+63, r19	; 0x3f
    8e9e:	2e af       	std	Y+62, r18	; 0x3e
    8ea0:	a1 97       	sbiw	r28, 0x21	; 33
    8ea2:	93 fa       	bst	r9, 3
    8ea4:	ee 24       	eor	r14, r14
    8ea6:	e0 f8       	bld	r14, 0
    8ea8:	f1 2c       	mov	r15, r1
    8eaa:	a1 96       	adiw	r28, 0x21	; 33
    8eac:	0e ad       	ldd	r16, Y+62	; 0x3e
    8eae:	1f ad       	ldd	r17, Y+63	; 0x3f
    8eb0:	a1 97       	sbiw	r28, 0x21	; 33
    8eb2:	6f 96       	adiw	r28, 0x1f	; 31
    8eb4:	2e ad       	ldd	r18, Y+62	; 0x3e
    8eb6:	3f ad       	ldd	r19, Y+63	; 0x3f
    8eb8:	6f 97       	sbiw	r28, 0x1f	; 31
    8eba:	64 2d       	mov	r22, r4
    8ebc:	a1 01       	movw	r20, r2
    8ebe:	a5 96       	adiw	r28, 0x25	; 37
    8ec0:	8e ad       	ldd	r24, Y+62	; 0x3e
    8ec2:	9f ad       	ldd	r25, Y+63	; 0x3f
    8ec4:	a5 97       	sbiw	r28, 0x25	; 37
    8ec6:	7b db       	rcall	.-2314   	; 0x85be <_puts_pad_X>
    8ec8:	16 01       	movw	r2, r12
    8eca:	17 c0       	rjmp	.+46     	; 0x8efa <_printf_fn+0x84c>
    8ecc:	f6 01       	movw	r30, r12
    8ece:	5e 2d       	mov	r21, r14
    8ed0:	0e 94 db e8 	call	0x1d1b6	; 0x1d1b6 <__xload_1>
    8ed4:	66 23       	and	r22, r22
    8ed6:	89 f0       	breq	.+34     	; 0x8efa <_printf_fn+0x84c>
    8ed8:	5f ef       	ldi	r21, 0xFF	; 255
    8eda:	c5 1a       	sub	r12, r21
    8edc:	d5 0a       	sbc	r13, r21
    8ede:	e5 0a       	sbc	r14, r21
    8ee0:	a5 96       	adiw	r28, 0x25	; 37
    8ee2:	ae ad       	ldd	r26, Y+62	; 0x3e
    8ee4:	bf ad       	ldd	r27, Y+63	; 0x3f
    8ee6:	a5 97       	sbiw	r28, 0x25	; 37
    8ee8:	ed 91       	ld	r30, X+
    8eea:	fc 91       	ld	r31, X
    8eec:	11 97       	sbiw	r26, 0x01	; 1
    8eee:	cd 01       	movw	r24, r26
    8ef0:	09 95       	icall
    8ef2:	6c 14       	cp	r6, r12
    8ef4:	7d 04       	cpc	r7, r13
    8ef6:	8e 04       	cpc	r8, r14
    8ef8:	48 f7       	brcc	.-46     	; 0x8ecc <_printf_fn+0x81e>
    8efa:	e8 2c       	mov	r14, r8
    8efc:	63 01       	movw	r12, r6
    8efe:	0f cc       	rjmp	.-2018   	; 0x871e <_printf_fn+0x70>
    8f00:	82 e0       	ldi	r24, 0x02	; 2
    8f02:	48 2e       	mov	r4, r24
    8f04:	51 2c       	mov	r5, r1
    8f06:	0d cd       	rjmp	.-1510   	; 0x8922 <_printf_fn+0x274>
    8f08:	f2 e0       	ldi	r31, 0x02	; 2
    8f0a:	4f 16       	cp	r4, r31
    8f0c:	51 04       	cpc	r5, r1
    8f0e:	61 f4       	brne	.+24     	; 0x8f28 <_printf_fn+0x87a>
    8f10:	51 01       	movw	r10, r2
    8f12:	b2 e0       	ldi	r27, 0x02	; 2
    8f14:	ab 0e       	add	r10, r27
    8f16:	b1 1c       	adc	r11, r1
    8f18:	f1 01       	movw	r30, r2
    8f1a:	80 81       	ld	r24, Z
    8f1c:	91 81       	ldd	r25, Z+1	; 0x01
    8f1e:	65 96       	adiw	r28, 0x15	; 21
    8f20:	9f af       	std	Y+63, r25	; 0x3f
    8f22:	8e af       	std	Y+62, r24	; 0x3e
    8f24:	65 97       	sbiw	r28, 0x15	; 21
    8f26:	7e cd       	rjmp	.-1284   	; 0x8a24 <_printf_fn+0x376>
    8f28:	f4 e0       	ldi	r31, 0x04	; 4
    8f2a:	4f 16       	cp	r4, r31
    8f2c:	51 04       	cpc	r5, r1
    8f2e:	09 f0       	breq	.+2      	; 0x8f32 <_printf_fn+0x884>
    8f30:	b2 cd       	rjmp	.-1180   	; 0x8a96 <_printf_fn+0x3e8>
    8f32:	51 01       	movw	r10, r2
    8f34:	24 e0       	ldi	r18, 0x04	; 4
    8f36:	a2 0e       	add	r10, r18
    8f38:	b1 1c       	adc	r11, r1
    8f3a:	f1 01       	movw	r30, r2
    8f3c:	80 81       	ld	r24, Z
    8f3e:	91 81       	ldd	r25, Z+1	; 0x01
    8f40:	a2 81       	ldd	r26, Z+2	; 0x02
    8f42:	b3 81       	ldd	r27, Z+3	; 0x03
    8f44:	2f 96       	adiw	r28, 0x0f	; 15
    8f46:	8c af       	std	Y+60, r24	; 0x3c
    8f48:	9d af       	std	Y+61, r25	; 0x3d
    8f4a:	ae af       	std	Y+62, r26	; 0x3e
    8f4c:	bf af       	std	Y+63, r27	; 0x3f
    8f4e:	2f 97       	sbiw	r28, 0x0f	; 15
    8f50:	90 cd       	rjmp	.-1248   	; 0x8a72 <_printf_fn+0x3c4>
    8f52:	c2 59       	subi	r28, 0x92	; 146
    8f54:	df 4f       	sbci	r29, 0xFF	; 255
    8f56:	e2 e1       	ldi	r30, 0x12	; 18
    8f58:	0c 94 c0 e8 	jmp	0x1d180	; 0x1d180 <__epilogue_restores__>

00008f5c <vsnprintf_P>:
    8f5c:	a8 e0       	ldi	r26, 0x08	; 8
    8f5e:	b0 e0       	ldi	r27, 0x00	; 0
    8f60:	e4 eb       	ldi	r30, 0xB4	; 180
    8f62:	f7 e4       	ldi	r31, 0x47	; 71
    8f64:	0c 94 b0 e8 	jmp	0x1d160	; 0x1d160 <__prologue_saves__+0x18>
    8f68:	7c 01       	movw	r14, r24
    8f6a:	cb 01       	movw	r24, r22
    8f6c:	64 2f       	mov	r22, r20
    8f6e:	a9 01       	movw	r20, r18
    8f70:	98 01       	movw	r18, r16
    8f72:	f7 01       	movw	r30, r14
    8f74:	10 82       	st	Z, r1
    8f76:	ec e0       	ldi	r30, 0x0C	; 12
    8f78:	ff e3       	ldi	r31, 0x3F	; 63
    8f7a:	fa 83       	std	Y+2, r31	; 0x02
    8f7c:	e9 83       	std	Y+1, r30	; 0x01
    8f7e:	9e 83       	std	Y+6, r25	; 0x06
    8f80:	8d 83       	std	Y+5, r24	; 0x05
    8f82:	18 86       	std	Y+8, r1	; 0x08
    8f84:	1f 82       	std	Y+7, r1	; 0x07
    8f86:	fc 82       	std	Y+4, r15	; 0x04
    8f88:	eb 82       	std	Y+3, r14	; 0x03
    8f8a:	ce 01       	movw	r24, r28
    8f8c:	01 96       	adiw	r24, 0x01	; 1
    8f8e:	8f db       	rcall	.-2274   	; 0x86ae <_printf_fn>
    8f90:	f7 01       	movw	r30, r14
    8f92:	01 90       	ld	r0, Z+
    8f94:	00 20       	and	r0, r0
    8f96:	e9 f7       	brne	.-6      	; 0x8f92 <vsnprintf_P+0x36>
    8f98:	cf 01       	movw	r24, r30
    8f9a:	01 97       	sbiw	r24, 0x01	; 1
    8f9c:	8e 19       	sub	r24, r14
    8f9e:	9f 09       	sbc	r25, r15
    8fa0:	28 96       	adiw	r28, 0x08	; 8
    8fa2:	e6 e0       	ldi	r30, 0x06	; 6
    8fa4:	0c 94 cc e8 	jmp	0x1d198	; 0x1d198 <__epilogue_restores__+0x18>

00008fa8 <snprintf_P>:
    8fa8:	a0 e0       	ldi	r26, 0x00	; 0
    8faa:	b0 e0       	ldi	r27, 0x00	; 0
    8fac:	ea ed       	ldi	r30, 0xDA	; 218
    8fae:	f7 e4       	ldi	r31, 0x47	; 71
    8fb0:	0c 94 b2 e8 	jmp	0x1d164	; 0x1d164 <__prologue_saves__+0x1c>
    8fb4:	8e 01       	movw	r16, r28
    8fb6:	02 5f       	subi	r16, 0xF2	; 242
    8fb8:	1f 4f       	sbci	r17, 0xFF	; 255
    8fba:	2b 85       	ldd	r18, Y+11	; 0x0b
    8fbc:	3c 85       	ldd	r19, Y+12	; 0x0c
    8fbe:	4d 85       	ldd	r20, Y+13	; 0x0d
    8fc0:	69 85       	ldd	r22, Y+9	; 0x09
    8fc2:	7a 85       	ldd	r23, Y+10	; 0x0a
    8fc4:	8f 81       	ldd	r24, Y+7	; 0x07
    8fc6:	98 85       	ldd	r25, Y+8	; 0x08
    8fc8:	c9 df       	rcall	.-110    	; 0x8f5c <vsnprintf_P>
    8fca:	e4 e0       	ldi	r30, 0x04	; 4
    8fcc:	0c 94 ce e8 	jmp	0x1d19c	; 0x1d19c <__epilogue_restores__+0x1c>

00008fd0 <sprintf_P>:
    8fd0:	a0 e0       	ldi	r26, 0x00	; 0
    8fd2:	b0 e0       	ldi	r27, 0x00	; 0
    8fd4:	ee ee       	ldi	r30, 0xEE	; 238
    8fd6:	f7 e4       	ldi	r31, 0x47	; 71
    8fd8:	0c 94 b2 e8 	jmp	0x1d164	; 0x1d164 <__prologue_saves__+0x1c>
    8fdc:	8e 01       	movw	r16, r28
    8fde:	04 5f       	subi	r16, 0xF4	; 244
    8fe0:	1f 4f       	sbci	r17, 0xFF	; 255
    8fe2:	29 85       	ldd	r18, Y+9	; 0x09
    8fe4:	3a 85       	ldd	r19, Y+10	; 0x0a
    8fe6:	4b 85       	ldd	r20, Y+11	; 0x0b
    8fe8:	60 e0       	ldi	r22, 0x00	; 0
    8fea:	74 e0       	ldi	r23, 0x04	; 4
    8fec:	8f 81       	ldd	r24, Y+7	; 0x07
    8fee:	98 85       	ldd	r25, Y+8	; 0x08
    8ff0:	b5 df       	rcall	.-150    	; 0x8f5c <vsnprintf_P>
    8ff2:	e4 e0       	ldi	r30, 0x04	; 4
    8ff4:	0c 94 ce e8 	jmp	0x1d19c	; 0x1d19c <__epilogue_restores__+0x1c>

00008ff8 <printf_P>:
/// @return size of printed string
/// TODO create a devprintf using an array of function prointers ?
MEMSPACE
int
printf_P(__memx const char *format, ...)
{
    8ff8:	a8 e0       	ldi	r26, 0x08	; 8
    8ffa:	b0 e0       	ldi	r27, 0x00	; 0
    8ffc:	e2 e0       	ldi	r30, 0x02	; 2
    8ffe:	f8 e4       	ldi	r31, 0x48	; 72
    9000:	0c 94 b4 e8 	jmp	0x1d168	; 0x1d168 <__prologue_saves__+0x20>
    9004:	9e 01       	movw	r18, r28
    9006:	23 5f       	subi	r18, 0xF3	; 243
    9008:	3f 4f       	sbci	r19, 0xFF	; 255
    900a:	f9 01       	movw	r30, r18
    900c:	41 91       	ld	r20, Z+
    900e:	51 91       	ld	r21, Z+
    9010:	61 91       	ld	r22, Z+
    9012:	9f 01       	movw	r18, r30
    printf_t fn;
    va_list va;

    fn.put = _putc_fn;
    9014:	85 e2       	ldi	r24, 0x25	; 37
    9016:	9f e3       	ldi	r25, 0x3F	; 63
    9018:	9a 83       	std	Y+2, r25	; 0x02
    901a:	89 83       	std	Y+1, r24	; 0x01
    fn.sent = 0;
    901c:	18 86       	std	Y+8, r1	; 0x08
    901e:	1f 82       	std	Y+7, r1	; 0x07

    va_start(va, format);
    _printf_fn(&fn, format, va);
    9020:	ce 01       	movw	r24, r28
    9022:	01 96       	adiw	r24, 0x01	; 1
    9024:	44 db       	rcall	.-2424   	; 0x86ae <_printf_fn>
    va_end(va);

    return ((int)fn.sent);
}
    9026:	8f 81       	ldd	r24, Y+7	; 0x07
    9028:	98 85       	ldd	r25, Y+8	; 0x08
    902a:	28 96       	adiw	r28, 0x08	; 8
    902c:	e2 e0       	ldi	r30, 0x02	; 2
    902e:	0c 94 d0 e8 	jmp	0x1d1a0	; 0x1d1a0 <__epilogue_restores__+0x20>

00009032 <atodigit>:
    if(sign)
        num = -num;
    if(endptr)
        *endptr = (char *) nptr;
    return(num);
}
    9032:	9c 01       	movw	r18, r24
    9034:	20 53       	subi	r18, 0x30	; 48
    9036:	31 09       	sbc	r19, r1
    9038:	2a 30       	cpi	r18, 0x0A	; 10
    903a:	31 05       	cpc	r19, r1
    903c:	10 f4       	brcc	.+4      	; 0x9042 <atodigit+0x10>
    903e:	c9 01       	movw	r24, r18
    9040:	10 c0       	rjmp	.+32     	; 0x9062 <atodigit+0x30>
    9042:	9c 01       	movw	r18, r24
    9044:	21 54       	subi	r18, 0x41	; 65
    9046:	31 09       	sbc	r19, r1
    9048:	26 30       	cpi	r18, 0x06	; 6
    904a:	31 05       	cpc	r19, r1
    904c:	10 f4       	brcc	.+4      	; 0x9052 <atodigit+0x20>
    904e:	c7 97       	sbiw	r24, 0x37	; 55
    9050:	08 c0       	rjmp	.+16     	; 0x9062 <atodigit+0x30>
    9052:	9c 01       	movw	r18, r24
    9054:	21 56       	subi	r18, 0x61	; 97
    9056:	31 09       	sbc	r19, r1
    9058:	26 30       	cpi	r18, 0x06	; 6
    905a:	31 05       	cpc	r19, r1
    905c:	28 f4       	brcc	.+10     	; 0x9068 <atodigit+0x36>
    905e:	87 55       	subi	r24, 0x57	; 87
    9060:	91 09       	sbc	r25, r1
    9062:	86 17       	cp	r24, r22
    9064:	97 07       	cpc	r25, r23
    9066:	14 f0       	brlt	.+4      	; 0x906c <atodigit+0x3a>
    9068:	8f ef       	ldi	r24, 0xFF	; 255
    906a:	9f ef       	ldi	r25, 0xFF	; 255
    906c:	08 95       	ret

0000906e <strtol>:
    906e:	a0 e0       	ldi	r26, 0x00	; 0
    9070:	b0 e0       	ldi	r27, 0x00	; 0
    9072:	ed e3       	ldi	r30, 0x3D	; 61
    9074:	f8 e4       	ldi	r31, 0x48	; 72
    9076:	0c 94 a4 e8 	jmp	0x1d148	; 0x1d148 <__prologue_saves__>
    907a:	2b 01       	movw	r4, r22
    907c:	8a 01       	movw	r16, r20
    907e:	ec 01       	movw	r28, r24
    9080:	28 81       	ld	r18, Y
    9082:	01 96       	adiw	r24, 0x01	; 1
    9084:	20 32       	cpi	r18, 0x20	; 32
    9086:	d9 f3       	breq	.-10     	; 0x907e <strtol+0x10>
    9088:	29 30       	cpi	r18, 0x09	; 9
    908a:	c9 f3       	breq	.-14     	; 0x907e <strtol+0x10>
    908c:	2d 32       	cpi	r18, 0x2D	; 45
    908e:	29 f4       	brne	.+10     	; 0x909a <strtol+0x2c>
    9090:	ec 01       	movw	r28, r24
    9092:	66 24       	eor	r6, r6
    9094:	63 94       	inc	r6
    9096:	71 2c       	mov	r7, r1
    9098:	05 c0       	rjmp	.+10     	; 0x90a4 <strtol+0x36>
    909a:	2b 32       	cpi	r18, 0x2B	; 43
    909c:	09 f4       	brne	.+2      	; 0x90a0 <strtol+0x32>
    909e:	ec 01       	movw	r28, r24
    90a0:	61 2c       	mov	r6, r1
    90a2:	71 2c       	mov	r7, r1
    90a4:	9e 01       	movw	r18, r28
    90a6:	2f 5f       	subi	r18, 0xFF	; 255
    90a8:	3f 4f       	sbci	r19, 0xFF	; 255
    90aa:	88 81       	ld	r24, Y
    90ac:	80 33       	cpi	r24, 0x30	; 48
    90ae:	11 f4       	brne	.+4      	; 0x90b4 <strtol+0x46>
    90b0:	e9 01       	movw	r28, r18
    90b2:	f8 cf       	rjmp	.-16     	; 0x90a4 <strtol+0x36>
    90b4:	c1 2c       	mov	r12, r1
    90b6:	d1 2c       	mov	r13, r1
    90b8:	76 01       	movw	r14, r12
    90ba:	48 01       	movw	r8, r16
    90bc:	01 2e       	mov	r0, r17
    90be:	00 0c       	add	r0, r0
    90c0:	aa 08       	sbc	r10, r10
    90c2:	bb 08       	sbc	r11, r11
    90c4:	3c 2e       	mov	r3, r28
    90c6:	2d 2e       	mov	r2, r29
    90c8:	89 91       	ld	r24, Y+
    90ca:	88 23       	and	r24, r24
    90cc:	31 f0       	breq	.+12     	; 0x90da <strtol+0x6c>
    90ce:	b8 01       	movw	r22, r16
    90d0:	90 e0       	ldi	r25, 0x00	; 0
    90d2:	af df       	rcall	.-162    	; 0x9032 <atodigit>
    90d4:	fc 01       	movw	r30, r24
    90d6:	97 ff       	sbrs	r25, 7
    90d8:	0c c0       	rjmp	.+24     	; 0x90f2 <strtol+0x84>
    90da:	61 14       	cp	r6, r1
    90dc:	71 04       	cpc	r7, r1
    90de:	c1 f0       	breq	.+48     	; 0x9110 <strtol+0xa2>
    90e0:	f0 94       	com	r15
    90e2:	e0 94       	com	r14
    90e4:	d0 94       	com	r13
    90e6:	c0 94       	com	r12
    90e8:	c1 1c       	adc	r12, r1
    90ea:	d1 1c       	adc	r13, r1
    90ec:	e1 1c       	adc	r14, r1
    90ee:	f1 1c       	adc	r15, r1
    90f0:	0f c0       	rjmp	.+30     	; 0x9110 <strtol+0xa2>
    90f2:	a5 01       	movw	r20, r10
    90f4:	94 01       	movw	r18, r8
    90f6:	c7 01       	movw	r24, r14
    90f8:	b6 01       	movw	r22, r12
    90fa:	0e 94 f5 e7 	call	0x1cfea	; 0x1cfea <__mulsi3>
    90fe:	6f 01       	movw	r12, r30
    9100:	ff 0f       	add	r31, r31
    9102:	ee 08       	sbc	r14, r14
    9104:	ff 08       	sbc	r15, r15
    9106:	c6 0e       	add	r12, r22
    9108:	d7 1e       	adc	r13, r23
    910a:	e8 1e       	adc	r14, r24
    910c:	f9 1e       	adc	r15, r25
    910e:	da cf       	rjmp	.-76     	; 0x90c4 <strtol+0x56>
    9110:	41 14       	cp	r4, r1
    9112:	51 04       	cpc	r5, r1
    9114:	19 f0       	breq	.+6      	; 0x911c <strtol+0xae>
    9116:	f2 01       	movw	r30, r4
    9118:	30 82       	st	Z, r3
    911a:	21 82       	std	Z+1, r2	; 0x01
    911c:	c7 01       	movw	r24, r14
    911e:	b6 01       	movw	r22, r12
    9120:	cd b7       	in	r28, 0x3d	; 61
    9122:	de b7       	in	r29, 0x3e	; 62
    9124:	e2 e1       	ldi	r30, 0x12	; 18
    9126:	0c 94 c0 e8 	jmp	0x1d180	; 0x1d180 <__epilogue_restores__>

0000912a <atoi>:
MEMSPACE
int
atoi(const char *str)
{
    unsigned long num;
    num = strtol(str, NULL, 10);
    912a:	4a e0       	ldi	r20, 0x0A	; 10
    912c:	50 e0       	ldi	r21, 0x00	; 0
    912e:	60 e0       	ldi	r22, 0x00	; 0
    9130:	70 e0       	ldi	r23, 0x00	; 0
    9132:	9d df       	rcall	.-198    	; 0x906e <strtol>
    return((int)num);
}
    9134:	cb 01       	movw	r24, r22
    9136:	08 95       	ret

00009138 <atol>:
MEMSPACE
long
atol(const char *str)
{
    unsigned long num;
    num = strtol(str, NULL, 10);
    9138:	4a e0       	ldi	r20, 0x0A	; 10
    913a:	50 e0       	ldi	r21, 0x00	; 0
    913c:	60 e0       	ldi	r22, 0x00	; 0
    913e:	70 e0       	ldi	r23, 0x00	; 0
    9140:	96 cf       	rjmp	.-212    	; 0x906e <strtol>
    return(num);
}
    9142:	08 95       	ret

00009144 <ld_dword>:
#endif
		if (res != FR_OK) ABORT(fs, res);
	}

	LEAVE_FF(fs, res);
}
    9144:	fc 01       	movw	r30, r24
    9146:	62 81       	ldd	r22, Z+2	; 0x02
    9148:	73 81       	ldd	r23, Z+3	; 0x03
    914a:	cb 01       	movw	r24, r22
    914c:	a0 e0       	ldi	r26, 0x00	; 0
    914e:	b0 e0       	ldi	r27, 0x00	; 0
    9150:	ba 2f       	mov	r27, r26
    9152:	a9 2f       	mov	r26, r25
    9154:	98 2f       	mov	r25, r24
    9156:	88 27       	eor	r24, r24
    9158:	21 81       	ldd	r18, Z+1	; 0x01
    915a:	82 2b       	or	r24, r18
    915c:	ba 2f       	mov	r27, r26
    915e:	a9 2f       	mov	r26, r25
    9160:	98 2f       	mov	r25, r24
    9162:	88 27       	eor	r24, r24
    9164:	20 81       	ld	r18, Z
    9166:	bc 01       	movw	r22, r24
    9168:	cd 01       	movw	r24, r26
    916a:	62 2b       	or	r22, r18
    916c:	08 95       	ret

0000916e <st_dword>:
    916e:	fc 01       	movw	r30, r24
    9170:	40 83       	st	Z, r20
    9172:	51 83       	std	Z+1, r21	; 0x01
    9174:	62 83       	std	Z+2, r22	; 0x02
    9176:	73 83       	std	Z+3, r23	; 0x03
    9178:	08 95       	ret

0000917a <mem_set>:
    917a:	48 0f       	add	r20, r24
    917c:	59 1f       	adc	r21, r25
    917e:	fc 01       	movw	r30, r24
    9180:	61 93       	st	Z+, r22
    9182:	cf 01       	movw	r24, r30
    9184:	e4 17       	cp	r30, r20
    9186:	f5 07       	cpc	r31, r21
    9188:	d1 f7       	brne	.-12     	; 0x917e <mem_set+0x4>
    918a:	08 95       	ret

0000918c <mem_cmp>:
    918c:	dc 01       	movw	r26, r24
    918e:	fb 01       	movw	r30, r22
    9190:	2d 91       	ld	r18, X+
    9192:	81 91       	ld	r24, Z+
    9194:	30 e0       	ldi	r19, 0x00	; 0
    9196:	b9 01       	movw	r22, r18
    9198:	68 1b       	sub	r22, r24
    919a:	71 09       	sbc	r23, r1
    919c:	cb 01       	movw	r24, r22
    919e:	41 50       	subi	r20, 0x01	; 1
    91a0:	51 09       	sbc	r21, r1
    91a2:	11 f0       	breq	.+4      	; 0x91a8 <mem_cmp+0x1c>
    91a4:	00 97       	sbiw	r24, 0x00	; 0
    91a6:	a1 f3       	breq	.-24     	; 0x9190 <mem_cmp+0x4>
    91a8:	08 95       	ret

000091aa <clst2sect>:
    91aa:	0f 93       	push	r16
    91ac:	1f 93       	push	r17
    91ae:	fc 01       	movw	r30, r24
    91b0:	9a 01       	movw	r18, r20
    91b2:	ab 01       	movw	r20, r22
    91b4:	22 50       	subi	r18, 0x02	; 2
    91b6:	31 09       	sbc	r19, r1
    91b8:	41 09       	sbc	r20, r1
    91ba:	51 09       	sbc	r21, r1
    91bc:	81 8d       	ldd	r24, Z+25	; 0x19
    91be:	92 8d       	ldd	r25, Z+26	; 0x1a
    91c0:	a3 8d       	ldd	r26, Z+27	; 0x1b
    91c2:	b4 8d       	ldd	r27, Z+28	; 0x1c
    91c4:	02 97       	sbiw	r24, 0x02	; 2
    91c6:	a1 09       	sbc	r26, r1
    91c8:	b1 09       	sbc	r27, r1
    91ca:	28 17       	cp	r18, r24
    91cc:	39 07       	cpc	r19, r25
    91ce:	4a 07       	cpc	r20, r26
    91d0:	5b 07       	cpc	r21, r27
    91d2:	68 f4       	brcc	.+26     	; 0x91ee <clst2sect+0x44>
    91d4:	a1 85       	ldd	r26, Z+9	; 0x09
    91d6:	b2 85       	ldd	r27, Z+10	; 0x0a
    91d8:	0e 94 84 e8 	call	0x1d108	; 0x1d108 <__muluhisi3>
    91dc:	05 a5       	ldd	r16, Z+45	; 0x2d
    91de:	16 a5       	ldd	r17, Z+46	; 0x2e
    91e0:	27 a5       	ldd	r18, Z+47	; 0x2f
    91e2:	30 a9       	ldd	r19, Z+48	; 0x30
    91e4:	60 0f       	add	r22, r16
    91e6:	71 1f       	adc	r23, r17
    91e8:	82 1f       	adc	r24, r18
    91ea:	93 1f       	adc	r25, r19
    91ec:	03 c0       	rjmp	.+6      	; 0x91f4 <clst2sect+0x4a>
    91ee:	60 e0       	ldi	r22, 0x00	; 0
    91f0:	70 e0       	ldi	r23, 0x00	; 0
    91f2:	cb 01       	movw	r24, r22
    91f4:	1f 91       	pop	r17
    91f6:	0f 91       	pop	r16
    91f8:	08 95       	ret

000091fa <clmt_clust>:
    91fa:	cf 93       	push	r28
    91fc:	df 93       	push	r29
    91fe:	fc 01       	movw	r30, r24
    9200:	c2 a1       	ldd	r28, Z+34	; 0x22
    9202:	d3 a1       	ldd	r29, Z+35	; 0x23
    9204:	24 96       	adiw	r28, 0x04	; 4
    9206:	cb 01       	movw	r24, r22
    9208:	ba 01       	movw	r22, r20
    920a:	29 e0       	ldi	r18, 0x09	; 9
    920c:	96 95       	lsr	r25
    920e:	87 95       	ror	r24
    9210:	77 95       	ror	r23
    9212:	67 95       	ror	r22
    9214:	2a 95       	dec	r18
    9216:	d1 f7       	brne	.-12     	; 0x920c <clmt_clust+0x12>
    9218:	01 90       	ld	r0, Z+
    921a:	f0 81       	ld	r31, Z
    921c:	e0 2d       	mov	r30, r0
    921e:	21 85       	ldd	r18, Z+9	; 0x09
    9220:	32 85       	ldd	r19, Z+10	; 0x0a
    9222:	40 e0       	ldi	r20, 0x00	; 0
    9224:	50 e0       	ldi	r21, 0x00	; 0
    9226:	0e 94 37 e8 	call	0x1d06e	; 0x1d06e <__udivmodsi4>
    922a:	88 81       	ld	r24, Y
    922c:	99 81       	ldd	r25, Y+1	; 0x01
    922e:	aa 81       	ldd	r26, Y+2	; 0x02
    9230:	bb 81       	ldd	r27, Y+3	; 0x03
    9232:	00 97       	sbiw	r24, 0x00	; 0
    9234:	a1 05       	cpc	r26, r1
    9236:	b1 05       	cpc	r27, r1
    9238:	b1 f0       	breq	.+44     	; 0x9266 <clmt_clust+0x6c>
    923a:	28 17       	cp	r18, r24
    923c:	39 07       	cpc	r19, r25
    923e:	4a 07       	cpc	r20, r26
    9240:	5b 07       	cpc	r21, r27
    9242:	30 f0       	brcs	.+12     	; 0x9250 <clmt_clust+0x56>
    9244:	28 1b       	sub	r18, r24
    9246:	39 0b       	sbc	r19, r25
    9248:	4a 0b       	sbc	r20, r26
    924a:	5b 0b       	sbc	r21, r27
    924c:	28 96       	adiw	r28, 0x08	; 8
    924e:	ed cf       	rjmp	.-38     	; 0x922a <clmt_clust+0x30>
    9250:	8c 81       	ldd	r24, Y+4	; 0x04
    9252:	9d 81       	ldd	r25, Y+5	; 0x05
    9254:	ae 81       	ldd	r26, Y+6	; 0x06
    9256:	bf 81       	ldd	r27, Y+7	; 0x07
    9258:	bc 01       	movw	r22, r24
    925a:	cd 01       	movw	r24, r26
    925c:	62 0f       	add	r22, r18
    925e:	73 1f       	adc	r23, r19
    9260:	84 1f       	adc	r24, r20
    9262:	95 1f       	adc	r25, r21
    9264:	03 c0       	rjmp	.+6      	; 0x926c <clmt_clust+0x72>
    9266:	60 e0       	ldi	r22, 0x00	; 0
    9268:	70 e0       	ldi	r23, 0x00	; 0
    926a:	cb 01       	movw	r24, r22
    926c:	df 91       	pop	r29
    926e:	cf 91       	pop	r28
    9270:	08 95       	ret

00009272 <sum_sfn>:
    9272:	fc 01       	movw	r30, r24
    9274:	9c 01       	movw	r18, r24
    9276:	25 5f       	subi	r18, 0xF5	; 245
    9278:	3f 4f       	sbci	r19, 0xFF	; 255
    927a:	80 e0       	ldi	r24, 0x00	; 0
    927c:	98 2f       	mov	r25, r24
    927e:	90 fb       	bst	r25, 0
    9280:	97 95       	ror	r25
    9282:	97 f9       	bld	r25, 7
    9284:	81 91       	ld	r24, Z+
    9286:	89 0f       	add	r24, r25
    9288:	e2 17       	cp	r30, r18
    928a:	f3 07       	cpc	r31, r19
    928c:	b9 f7       	brne	.-18     	; 0x927c <sum_sfn+0xa>
    928e:	08 95       	ret

00009290 <get_ldnumber>:
    9290:	cf 93       	push	r28
    9292:	df 93       	push	r29
    9294:	dc 01       	movw	r26, r24
    9296:	ed 91       	ld	r30, X+
    9298:	fc 91       	ld	r31, X
    929a:	11 97       	sbiw	r26, 0x01	; 1
    929c:	30 97       	sbiw	r30, 0x00	; 0
    929e:	f9 f0       	breq	.+62     	; 0x92de <get_ldnumber+0x4e>
    92a0:	9f 01       	movw	r18, r30
    92a2:	2f 5f       	subi	r18, 0xFF	; 255
    92a4:	3f 4f       	sbci	r19, 0xFF	; 255
    92a6:	e9 01       	movw	r28, r18
    92a8:	21 97       	sbiw	r28, 0x01	; 1
    92aa:	88 81       	ld	r24, Y
    92ac:	80 32       	cpi	r24, 0x20	; 32
    92ae:	18 f0       	brcs	.+6      	; 0x92b6 <get_ldnumber+0x26>
    92b0:	8a 33       	cpi	r24, 0x3A	; 58
    92b2:	b9 f7       	brne	.-18     	; 0x92a2 <get_ldnumber+0x12>
    92b4:	04 c0       	rjmp	.+8      	; 0x92be <get_ldnumber+0x2e>
    92b6:	80 91 1e 18 	lds	r24, 0x181E	; 0x80181e <CurrVol>
    92ba:	90 e0       	ldi	r25, 0x00	; 0
    92bc:	12 c0       	rjmp	.+36     	; 0x92e2 <get_ldnumber+0x52>
    92be:	90 81       	ld	r25, Z
    92c0:	80 ed       	ldi	r24, 0xD0	; 208
    92c2:	89 0f       	add	r24, r25
    92c4:	8a 30       	cpi	r24, 0x0A	; 10
    92c6:	58 f4       	brcc	.+22     	; 0x92de <get_ldnumber+0x4e>
    92c8:	32 96       	adiw	r30, 0x02	; 2
    92ca:	2e 17       	cp	r18, r30
    92cc:	3f 07       	cpc	r19, r31
    92ce:	39 f4       	brne	.+14     	; 0x92de <get_ldnumber+0x4e>
    92d0:	90 33       	cpi	r25, 0x30	; 48
    92d2:	29 f4       	brne	.+10     	; 0x92de <get_ldnumber+0x4e>
    92d4:	2d 93       	st	X+, r18
    92d6:	3c 93       	st	X, r19
    92d8:	80 e0       	ldi	r24, 0x00	; 0
    92da:	90 e0       	ldi	r25, 0x00	; 0
    92dc:	02 c0       	rjmp	.+4      	; 0x92e2 <get_ldnumber+0x52>
    92de:	8f ef       	ldi	r24, 0xFF	; 255
    92e0:	9f ef       	ldi	r25, 0xFF	; 255
    92e2:	df 91       	pop	r29
    92e4:	cf 91       	pop	r28
    92e6:	08 95       	ret

000092e8 <validate>:
    92e8:	0f 93       	push	r16
    92ea:	1f 93       	push	r17
    92ec:	cf 93       	push	r28
    92ee:	df 93       	push	r29
    92f0:	ec 01       	movw	r28, r24
    92f2:	8b 01       	movw	r16, r22
    92f4:	89 2b       	or	r24, r25
    92f6:	f9 f0       	breq	.+62     	; 0x9336 <validate+0x4e>
    92f8:	e8 81       	ld	r30, Y
    92fa:	f9 81       	ldd	r31, Y+1	; 0x01
    92fc:	30 97       	sbiw	r30, 0x00	; 0
    92fe:	d9 f0       	breq	.+54     	; 0x9336 <validate+0x4e>
    9300:	80 81       	ld	r24, Z
    9302:	88 23       	and	r24, r24
    9304:	c1 f0       	breq	.+48     	; 0x9336 <validate+0x4e>
    9306:	2a 81       	ldd	r18, Y+2	; 0x02
    9308:	3b 81       	ldd	r19, Y+3	; 0x03
    930a:	85 81       	ldd	r24, Z+5	; 0x05
    930c:	96 81       	ldd	r25, Z+6	; 0x06
    930e:	28 17       	cp	r18, r24
    9310:	39 07       	cpc	r19, r25
    9312:	89 f4       	brne	.+34     	; 0x9336 <validate+0x4e>
    9314:	81 81       	ldd	r24, Z+1	; 0x01
    9316:	0e 94 8a 6a 	call	0xd514	; 0xd514 <disk_status>
    931a:	80 fd       	sbrc	r24, 0
    931c:	0c c0       	rjmp	.+24     	; 0x9336 <validate+0x4e>
    931e:	28 81       	ld	r18, Y
    9320:	39 81       	ldd	r19, Y+1	; 0x01
    9322:	80 e0       	ldi	r24, 0x00	; 0
    9324:	90 e0       	ldi	r25, 0x00	; 0
    9326:	f8 01       	movw	r30, r16
    9328:	31 83       	std	Z+1, r19	; 0x01
    932a:	20 83       	st	Z, r18
    932c:	df 91       	pop	r29
    932e:	cf 91       	pop	r28
    9330:	1f 91       	pop	r17
    9332:	0f 91       	pop	r16
    9334:	08 95       	ret
    9336:	89 e0       	ldi	r24, 0x09	; 9
    9338:	90 e0       	ldi	r25, 0x00	; 0
    933a:	20 e0       	ldi	r18, 0x00	; 0
    933c:	30 e0       	ldi	r19, 0x00	; 0
    933e:	f3 cf       	rjmp	.-26     	; 0x9326 <validate+0x3e>

00009340 <get_fileinfo>:
    9340:	a8 e0       	ldi	r26, 0x08	; 8
    9342:	b0 e0       	ldi	r27, 0x00	; 0
    9344:	e6 ea       	ldi	r30, 0xA6	; 166
    9346:	f9 e4       	ldi	r31, 0x49	; 73
    9348:	0c 94 a4 e8 	jmp	0x1d148	; 0x1d148 <__prologue_saves__>
    934c:	fc 01       	movw	r30, r24
    934e:	01 90       	ld	r0, Z+
    9350:	f0 81       	ld	r31, Z
    9352:	e0 2d       	mov	r30, r0
    9354:	f8 87       	std	Y+8, r31	; 0x08
    9356:	ef 83       	std	Y+7, r30	; 0x07
    9358:	fb 01       	movw	r30, r22
    935a:	16 8a       	std	Z+22, r1	; 0x16
    935c:	fc 01       	movw	r30, r24
    935e:	06 89       	ldd	r16, Z+22	; 0x16
    9360:	17 89       	ldd	r17, Z+23	; 0x17
    9362:	20 8d       	ldd	r18, Z+24	; 0x18
    9364:	31 8d       	ldd	r19, Z+25	; 0x19
    9366:	01 15       	cp	r16, r1
    9368:	11 05       	cpc	r17, r1
    936a:	21 05       	cpc	r18, r1
    936c:	31 05       	cpc	r19, r1
    936e:	09 f4       	brne	.+2      	; 0x9372 <get_fileinfo+0x32>
    9370:	0d c1       	rjmp	.+538    	; 0x958c <get_fileinfo+0x24c>
    9372:	7e 83       	std	Y+6, r23	; 0x06
    9374:	6d 83       	std	Y+5, r22	; 0x05
    9376:	7c 01       	movw	r14, r24
    9378:	80 a5       	ldd	r24, Z+40	; 0x28
    937a:	91 a5       	ldd	r25, Z+41	; 0x29
    937c:	a2 a5       	ldd	r26, Z+42	; 0x2a
    937e:	b3 a5       	ldd	r27, Z+43	; 0x2b
    9380:	8f 3f       	cpi	r24, 0xFF	; 255
    9382:	9f 4f       	sbci	r25, 0xFF	; 255
    9384:	af 4f       	sbci	r26, 0xFF	; 255
    9386:	bf 4f       	sbci	r27, 0xFF	; 255
    9388:	09 f4       	brne	.+2      	; 0x938c <get_fileinfo+0x4c>
    938a:	6c c0       	rjmp	.+216    	; 0x9464 <get_fileinfo+0x124>
    938c:	a1 2c       	mov	r10, r1
    938e:	b1 2c       	mov	r11, r1
    9390:	c1 2c       	mov	r12, r1
    9392:	d1 2c       	mov	r13, r1
    9394:	00 e0       	ldi	r16, 0x00	; 0
    9396:	10 e0       	ldi	r17, 0x00	; 0
    9398:	66 24       	eor	r6, r6
    939a:	6a 94       	dec	r6
    939c:	71 2c       	mov	r7, r1
    939e:	ef 81       	ldd	r30, Y+7	; 0x07
    93a0:	f8 85       	ldd	r31, Y+8	; 0x08
    93a2:	83 85       	ldd	r24, Z+11	; 0x0b
    93a4:	94 85       	ldd	r25, Z+12	; 0x0c
    93a6:	fc 01       	movw	r30, r24
    93a8:	ea 0d       	add	r30, r10
    93aa:	fb 1d       	adc	r31, r11
    93ac:	80 81       	ld	r24, Z
    93ae:	91 81       	ldd	r25, Z+1	; 0x01
    93b0:	00 97       	sbiw	r24, 0x00	; 0
    93b2:	09 f4       	brne	.+2      	; 0x93b6 <get_fileinfo+0x76>
    93b4:	4d c0       	rjmp	.+154    	; 0x9450 <get_fileinfo+0x110>
    93b6:	c1 14       	cp	r12, r1
    93b8:	d1 04       	cpc	r13, r1
    93ba:	29 f4       	brne	.+10     	; 0x93c6 <get_fileinfo+0x86>
    93bc:	9c 01       	movw	r18, r24
    93be:	38 5d       	subi	r19, 0xD8	; 216
    93c0:	21 15       	cp	r18, r1
    93c2:	38 40       	sbci	r19, 0x08	; 8
    93c4:	f0 f1       	brcs	.+124    	; 0x9442 <get_fileinfo+0x102>
    93c6:	43 01       	movw	r8, r6
    93c8:	80 1a       	sub	r8, r16
    93ca:	91 0a       	sbc	r9, r17
    93cc:	a6 01       	movw	r20, r12
    93ce:	60 e0       	ldi	r22, 0x00	; 0
    93d0:	70 e0       	ldi	r23, 0x00	; 0
    93d2:	2a 01       	movw	r4, r20
    93d4:	33 24       	eor	r3, r3
    93d6:	22 24       	eor	r2, r2
    93d8:	a0 e0       	ldi	r26, 0x00	; 0
    93da:	b0 e0       	ldi	r27, 0x00	; 0
    93dc:	28 2a       	or	r2, r24
    93de:	39 2a       	or	r3, r25
    93e0:	4a 2a       	or	r4, r26
    93e2:	5b 2a       	or	r5, r27
    93e4:	c2 01       	movw	r24, r4
    93e6:	b1 01       	movw	r22, r2
    93e8:	45 eb       	ldi	r20, 0xB5	; 181
    93ea:	51 e0       	ldi	r21, 0x01	; 1
    93ec:	0e 94 e0 69 	call	0xd3c0	; 0xd3c0 <ff_uni2oem>
    93f0:	8f 3f       	cpi	r24, 0xFF	; 255
    93f2:	91 05       	cpc	r25, r1
    93f4:	89 f0       	breq	.+34     	; 0x9418 <get_fileinfo+0xd8>
    93f6:	80 f0       	brcs	.+32     	; 0x9418 <get_fileinfo+0xd8>
    93f8:	22 e0       	ldi	r18, 0x02	; 2
    93fa:	82 16       	cp	r8, r18
    93fc:	91 04       	cpc	r9, r1
    93fe:	c0 f0       	brcs	.+48     	; 0x9430 <get_fileinfo+0xf0>
    9400:	ed 81       	ldd	r30, Y+5	; 0x05
    9402:	fe 81       	ldd	r31, Y+6	; 0x06
    9404:	e0 0f       	add	r30, r16
    9406:	f1 1f       	adc	r31, r17
    9408:	96 8b       	std	Z+22, r25	; 0x16
    940a:	ed 81       	ldd	r30, Y+5	; 0x05
    940c:	fe 81       	ldd	r31, Y+6	; 0x06
    940e:	e0 0f       	add	r30, r16
    9410:	f1 1f       	adc	r31, r17
    9412:	87 8b       	std	Z+23, r24	; 0x17
    9414:	82 e0       	ldi	r24, 0x02	; 2
    9416:	0d c0       	rjmp	.+26     	; 0x9432 <get_fileinfo+0xf2>
    9418:	00 97       	sbiw	r24, 0x00	; 0
    941a:	51 f0       	breq	.+20     	; 0x9430 <get_fileinfo+0xf0>
    941c:	81 14       	cp	r8, r1
    941e:	91 04       	cpc	r9, r1
    9420:	39 f0       	breq	.+14     	; 0x9430 <get_fileinfo+0xf0>
    9422:	ed 81       	ldd	r30, Y+5	; 0x05
    9424:	fe 81       	ldd	r31, Y+6	; 0x06
    9426:	e0 0f       	add	r30, r16
    9428:	f1 1f       	adc	r31, r17
    942a:	86 8b       	std	Z+22, r24	; 0x16
    942c:	81 e0       	ldi	r24, 0x01	; 1
    942e:	01 c0       	rjmp	.+2      	; 0x9432 <get_fileinfo+0xf2>
    9430:	80 e0       	ldi	r24, 0x00	; 0
    9432:	28 2f       	mov	r18, r24
    9434:	30 e0       	ldi	r19, 0x00	; 0
    9436:	88 23       	and	r24, r24
    9438:	49 f0       	breq	.+18     	; 0x944c <get_fileinfo+0x10c>
    943a:	02 0f       	add	r16, r18
    943c:	13 1f       	adc	r17, r19
    943e:	80 e0       	ldi	r24, 0x00	; 0
    9440:	90 e0       	ldi	r25, 0x00	; 0
    9442:	32 e0       	ldi	r19, 0x02	; 2
    9444:	a3 0e       	add	r10, r19
    9446:	b1 1c       	adc	r11, r1
    9448:	6c 01       	movw	r12, r24
    944a:	a9 cf       	rjmp	.-174    	; 0x939e <get_fileinfo+0x5e>
    944c:	00 e0       	ldi	r16, 0x00	; 0
    944e:	10 e0       	ldi	r17, 0x00	; 0
    9450:	c1 14       	cp	r12, r1
    9452:	d1 04       	cpc	r13, r1
    9454:	11 f0       	breq	.+4      	; 0x945a <get_fileinfo+0x11a>
    9456:	00 e0       	ldi	r16, 0x00	; 0
    9458:	10 e0       	ldi	r17, 0x00	; 0
    945a:	ed 81       	ldd	r30, Y+5	; 0x05
    945c:	fe 81       	ldd	r31, Y+6	; 0x06
    945e:	e0 0f       	add	r30, r16
    9460:	f1 1f       	adc	r31, r17
    9462:	16 8a       	std	Z+22, r1	; 0x16
    9464:	80 e0       	ldi	r24, 0x00	; 0
    9466:	90 e0       	ldi	r25, 0x00	; 0
    9468:	20 e0       	ldi	r18, 0x00	; 0
    946a:	30 e0       	ldi	r19, 0x00	; 0
    946c:	6e e2       	ldi	r22, 0x2E	; 46
    946e:	a9 01       	movw	r20, r18
    9470:	4f 5f       	subi	r20, 0xFF	; 255
    9472:	5f 4f       	sbci	r21, 0xFF	; 255
    9474:	f7 01       	movw	r30, r14
    9476:	a2 8d       	ldd	r26, Z+26	; 0x1a
    9478:	b3 8d       	ldd	r27, Z+27	; 0x1b
    947a:	fd 01       	movw	r30, r26
    947c:	e2 0f       	add	r30, r18
    947e:	f3 1f       	adc	r31, r19
    9480:	20 81       	ld	r18, Z
    9482:	30 e0       	ldi	r19, 0x00	; 0
    9484:	20 32       	cpi	r18, 0x20	; 32
    9486:	31 05       	cpc	r19, r1
    9488:	b9 f0       	breq	.+46     	; 0x94b8 <get_fileinfo+0x178>
    948a:	25 30       	cpi	r18, 0x05	; 5
    948c:	31 05       	cpc	r19, r1
    948e:	11 f4       	brne	.+4      	; 0x9494 <get_fileinfo+0x154>
    9490:	25 ee       	ldi	r18, 0xE5	; 229
    9492:	30 e0       	ldi	r19, 0x00	; 0
    9494:	49 30       	cpi	r20, 0x09	; 9
    9496:	51 05       	cpc	r21, r1
    9498:	49 f4       	brne	.+18     	; 0x94ac <get_fileinfo+0x16c>
    949a:	8c 30       	cpi	r24, 0x0C	; 12
    949c:	91 05       	cpc	r25, r1
    949e:	30 f4       	brcc	.+12     	; 0x94ac <get_fileinfo+0x16c>
    94a0:	ed 81       	ldd	r30, Y+5	; 0x05
    94a2:	fe 81       	ldd	r31, Y+6	; 0x06
    94a4:	e8 0f       	add	r30, r24
    94a6:	f9 1f       	adc	r31, r25
    94a8:	61 87       	std	Z+9, r22	; 0x09
    94aa:	01 96       	adiw	r24, 0x01	; 1
    94ac:	ed 81       	ldd	r30, Y+5	; 0x05
    94ae:	fe 81       	ldd	r31, Y+6	; 0x06
    94b0:	e8 0f       	add	r30, r24
    94b2:	f9 1f       	adc	r31, r25
    94b4:	21 87       	std	Z+9, r18	; 0x09
    94b6:	01 96       	adiw	r24, 0x01	; 1
    94b8:	9a 01       	movw	r18, r20
    94ba:	4b 30       	cpi	r20, 0x0B	; 11
    94bc:	51 05       	cpc	r21, r1
    94be:	b9 f6       	brne	.-82     	; 0x946e <get_fileinfo+0x12e>
    94c0:	ed 81       	ldd	r30, Y+5	; 0x05
    94c2:	fe 81       	ldd	r31, Y+6	; 0x06
    94c4:	e8 0f       	add	r30, r24
    94c6:	f9 1f       	adc	r31, r25
    94c8:	11 86       	std	Z+9, r1	; 0x09
    94ca:	ed 81       	ldd	r30, Y+5	; 0x05
    94cc:	fe 81       	ldd	r31, Y+6	; 0x06
    94ce:	26 89       	ldd	r18, Z+22	; 0x16
    94d0:	21 11       	cpse	r18, r1
    94d2:	3a c0       	rjmp	.+116    	; 0x9548 <get_fileinfo+0x208>
    94d4:	89 2b       	or	r24, r25
    94d6:	31 f0       	breq	.+12     	; 0x94e4 <get_fileinfo+0x1a4>
    94d8:	df 01       	movw	r26, r30
    94da:	19 96       	adiw	r26, 0x09	; 9
    94dc:	58 e0       	ldi	r21, 0x08	; 8
    94de:	20 e0       	ldi	r18, 0x00	; 0
    94e0:	30 e0       	ldi	r19, 0x00	; 0
    94e2:	16 c0       	rjmp	.+44     	; 0x9510 <get_fileinfo+0x1d0>
    94e4:	8f e3       	ldi	r24, 0x3F	; 63
    94e6:	ed 81       	ldd	r30, Y+5	; 0x05
    94e8:	fe 81       	ldd	r31, Y+6	; 0x06
    94ea:	86 8b       	std	Z+22, r24	; 0x16
    94ec:	21 e0       	ldi	r18, 0x01	; 1
    94ee:	30 e0       	ldi	r19, 0x00	; 0
    94f0:	1c c0       	rjmp	.+56     	; 0x952a <get_fileinfo+0x1ea>
    94f2:	90 e0       	ldi	r25, 0x00	; 0
    94f4:	8e 32       	cpi	r24, 0x2E	; 46
    94f6:	91 05       	cpc	r25, r1
    94f8:	09 f4       	brne	.+2      	; 0x94fc <get_fileinfo+0x1bc>
    94fa:	50 e1       	ldi	r21, 0x10	; 16
    94fc:	bc 01       	movw	r22, r24
    94fe:	61 54       	subi	r22, 0x41	; 65
    9500:	71 09       	sbc	r23, r1
    9502:	6a 31       	cpi	r22, 0x1A	; 26
    9504:	71 05       	cpc	r23, r1
    9506:	40 f0       	brcs	.+16     	; 0x9518 <get_fileinfo+0x1d8>
    9508:	fd 01       	movw	r30, r26
    950a:	84 87       	std	Z+12, r24	; 0x0c
    950c:	2f 5f       	subi	r18, 0xFF	; 255
    950e:	3f 4f       	sbci	r19, 0xFF	; 255
    9510:	8d 91       	ld	r24, X+
    9512:	81 11       	cpse	r24, r1
    9514:	ee cf       	rjmp	.-36     	; 0x94f2 <get_fileinfo+0x1b2>
    9516:	09 c0       	rjmp	.+18     	; 0x952a <get_fileinfo+0x1ea>
    9518:	f7 01       	movw	r30, r14
    951a:	62 8d       	ldd	r22, Z+26	; 0x1a
    951c:	73 8d       	ldd	r23, Z+27	; 0x1b
    951e:	fb 01       	movw	r30, r22
    9520:	44 85       	ldd	r20, Z+12	; 0x0c
    9522:	45 23       	and	r20, r21
    9524:	89 f3       	breq	.-30     	; 0x9508 <get_fileinfo+0x1c8>
    9526:	80 96       	adiw	r24, 0x20	; 32
    9528:	ef cf       	rjmp	.-34     	; 0x9508 <get_fileinfo+0x1c8>
    952a:	ed 81       	ldd	r30, Y+5	; 0x05
    952c:	fe 81       	ldd	r31, Y+6	; 0x06
    952e:	e2 0f       	add	r30, r18
    9530:	f3 1f       	adc	r31, r19
    9532:	16 8a       	std	Z+22, r1	; 0x16
    9534:	f7 01       	movw	r30, r14
    9536:	82 8d       	ldd	r24, Z+26	; 0x1a
    9538:	93 8d       	ldd	r25, Z+27	; 0x1b
    953a:	fc 01       	movw	r30, r24
    953c:	84 85       	ldd	r24, Z+12	; 0x0c
    953e:	81 11       	cpse	r24, r1
    9540:	03 c0       	rjmp	.+6      	; 0x9548 <get_fileinfo+0x208>
    9542:	ed 81       	ldd	r30, Y+5	; 0x05
    9544:	fe 81       	ldd	r31, Y+6	; 0x06
    9546:	11 86       	std	Z+9, r1	; 0x09
    9548:	f7 01       	movw	r30, r14
    954a:	82 8d       	ldd	r24, Z+26	; 0x1a
    954c:	93 8d       	ldd	r25, Z+27	; 0x1b
    954e:	fc 01       	movw	r30, r24
    9550:	83 85       	ldd	r24, Z+11	; 0x0b
    9552:	ed 81       	ldd	r30, Y+5	; 0x05
    9554:	fe 81       	ldd	r31, Y+6	; 0x06
    9556:	80 87       	std	Z+8, r24	; 0x08
    9558:	f7 01       	movw	r30, r14
    955a:	02 8d       	ldd	r16, Z+26	; 0x1a
    955c:	13 8d       	ldd	r17, Z+27	; 0x1b
    955e:	c8 01       	movw	r24, r16
    9560:	4c 96       	adiw	r24, 0x1c	; 28
    9562:	f0 dd       	rcall	.-1056   	; 0x9144 <ld_dword>
    9564:	ed 81       	ldd	r30, Y+5	; 0x05
    9566:	fe 81       	ldd	r31, Y+6	; 0x06
    9568:	60 83       	st	Z, r22
    956a:	71 83       	std	Z+1, r23	; 0x01
    956c:	82 83       	std	Z+2, r24	; 0x02
    956e:	93 83       	std	Z+3, r25	; 0x03
    9570:	f8 01       	movw	r30, r16
    9572:	86 89       	ldd	r24, Z+22	; 0x16
    9574:	97 89       	ldd	r25, Z+23	; 0x17
    9576:	ed 81       	ldd	r30, Y+5	; 0x05
    9578:	fe 81       	ldd	r31, Y+6	; 0x06
    957a:	97 83       	std	Z+7, r25	; 0x07
    957c:	86 83       	std	Z+6, r24	; 0x06
    957e:	f8 01       	movw	r30, r16
    9580:	80 8d       	ldd	r24, Z+24	; 0x18
    9582:	91 8d       	ldd	r25, Z+25	; 0x19
    9584:	ed 81       	ldd	r30, Y+5	; 0x05
    9586:	fe 81       	ldd	r31, Y+6	; 0x06
    9588:	95 83       	std	Z+5, r25	; 0x05
    958a:	84 83       	std	Z+4, r24	; 0x04
    958c:	28 96       	adiw	r28, 0x08	; 8
    958e:	e2 e1       	ldi	r30, 0x12	; 18
    9590:	0c 94 c0 e8 	jmp	0x1d180	; 0x1d180 <__epilogue_restores__>

00009594 <mem_cpy.part.0>:
    9594:	fb 01       	movw	r30, r22
    9596:	48 0f       	add	r20, r24
    9598:	59 1f       	adc	r21, r25
    959a:	21 91       	ld	r18, Z+
    959c:	dc 01       	movw	r26, r24
    959e:	2d 93       	st	X+, r18
    95a0:	cd 01       	movw	r24, r26
    95a2:	a4 17       	cp	r26, r20
    95a4:	b5 07       	cpc	r27, r21
    95a6:	c9 f7       	brne	.-14     	; 0x959a <mem_cpy.part.0+0x6>
    95a8:	08 95       	ret

000095aa <ld_clust.isra.3>:
    95aa:	fb 01       	movw	r30, r22
    95ac:	42 8d       	ldd	r20, Z+26	; 0x1a
    95ae:	53 8d       	ldd	r21, Z+27	; 0x1b
    95b0:	60 e0       	ldi	r22, 0x00	; 0
    95b2:	70 e0       	ldi	r23, 0x00	; 0
    95b4:	83 30       	cpi	r24, 0x03	; 3
    95b6:	59 f4       	brne	.+22     	; 0x95ce <ld_clust.isra.3+0x24>
    95b8:	84 89       	ldd	r24, Z+20	; 0x14
    95ba:	95 89       	ldd	r25, Z+21	; 0x15
    95bc:	a0 e0       	ldi	r26, 0x00	; 0
    95be:	b0 e0       	ldi	r27, 0x00	; 0
    95c0:	dc 01       	movw	r26, r24
    95c2:	99 27       	eor	r25, r25
    95c4:	88 27       	eor	r24, r24
    95c6:	48 2b       	or	r20, r24
    95c8:	59 2b       	or	r21, r25
    95ca:	6a 2b       	or	r22, r26
    95cc:	7b 2b       	or	r23, r27
    95ce:	cb 01       	movw	r24, r22
    95d0:	ba 01       	movw	r22, r20
    95d2:	08 95       	ret

000095d4 <st_clust.isra.4>:
    95d4:	fb 01       	movw	r30, r22
    95d6:	22 8f       	std	Z+26, r18	; 0x1a
    95d8:	33 8f       	std	Z+27, r19	; 0x1b
    95da:	dc 01       	movw	r26, r24
    95dc:	8c 91       	ld	r24, X
    95de:	83 30       	cpi	r24, 0x03	; 3
    95e0:	29 f4       	brne	.+10     	; 0x95ec <st_clust.isra.4+0x18>
    95e2:	ca 01       	movw	r24, r20
    95e4:	aa 27       	eor	r26, r26
    95e6:	bb 27       	eor	r27, r27
    95e8:	84 8b       	std	Z+20, r24	; 0x14
    95ea:	95 8b       	std	Z+21, r25	; 0x15
    95ec:	08 95       	ret

000095ee <sync_window.part.5>:
    95ee:	8f 92       	push	r8
    95f0:	9f 92       	push	r9
    95f2:	af 92       	push	r10
    95f4:	bf 92       	push	r11
    95f6:	ef 92       	push	r14
    95f8:	ff 92       	push	r15
    95fa:	0f 93       	push	r16
    95fc:	1f 93       	push	r17
    95fe:	cf 93       	push	r28
    9600:	df 93       	push	r29
    9602:	ec 01       	movw	r28, r24
    9604:	7c 01       	movw	r14, r24
    9606:	45 e3       	ldi	r20, 0x35	; 53
    9608:	e4 0e       	add	r14, r20
    960a:	f1 1c       	adc	r15, r1
    960c:	29 a9       	ldd	r18, Y+49	; 0x31
    960e:	3a a9       	ldd	r19, Y+50	; 0x32
    9610:	4b a9       	ldd	r20, Y+51	; 0x33
    9612:	5c a9       	ldd	r21, Y+52	; 0x34
    9614:	01 e0       	ldi	r16, 0x01	; 1
    9616:	10 e0       	ldi	r17, 0x00	; 0
    9618:	b7 01       	movw	r22, r14
    961a:	89 81       	ldd	r24, Y+1	; 0x01
    961c:	0e 94 a6 6a 	call	0xd54c	; 0xd54c <disk_write>
    9620:	89 2b       	or	r24, r25
    9622:	41 f5       	brne	.+80     	; 0x9674 <sync_window.part.5+0x86>
    9624:	1b 82       	std	Y+3, r1	; 0x03
    9626:	09 a9       	ldd	r16, Y+49	; 0x31
    9628:	1a a9       	ldd	r17, Y+50	; 0x32
    962a:	2b a9       	ldd	r18, Y+51	; 0x33
    962c:	3c a9       	ldd	r19, Y+52	; 0x34
    962e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    9630:	9e 8d       	ldd	r25, Y+30	; 0x1e
    9632:	af 8d       	ldd	r26, Y+31	; 0x1f
    9634:	b8 a1       	ldd	r27, Y+32	; 0x20
    9636:	8d a0       	ldd	r8, Y+37	; 0x25
    9638:	9e a0       	ldd	r9, Y+38	; 0x26
    963a:	af a0       	ldd	r10, Y+39	; 0x27
    963c:	b8 a4       	ldd	r11, Y+40	; 0x28
    963e:	b9 01       	movw	r22, r18
    9640:	a8 01       	movw	r20, r16
    9642:	48 19       	sub	r20, r8
    9644:	59 09       	sbc	r21, r9
    9646:	6a 09       	sbc	r22, r10
    9648:	7b 09       	sbc	r23, r11
    964a:	48 17       	cp	r20, r24
    964c:	59 07       	cpc	r21, r25
    964e:	6a 07       	cpc	r22, r26
    9650:	7b 07       	cpc	r23, r27
    9652:	98 f4       	brcc	.+38     	; 0x967a <sync_window.part.5+0x8c>
    9654:	6a 81       	ldd	r22, Y+2	; 0x02
    9656:	62 30       	cpi	r22, 0x02	; 2
    9658:	81 f4       	brne	.+32     	; 0x967a <sync_window.part.5+0x8c>
    965a:	a9 01       	movw	r20, r18
    965c:	98 01       	movw	r18, r16
    965e:	28 0f       	add	r18, r24
    9660:	39 1f       	adc	r19, r25
    9662:	4a 1f       	adc	r20, r26
    9664:	5b 1f       	adc	r21, r27
    9666:	01 e0       	ldi	r16, 0x01	; 1
    9668:	10 e0       	ldi	r17, 0x00	; 0
    966a:	b7 01       	movw	r22, r14
    966c:	89 81       	ldd	r24, Y+1	; 0x01
    966e:	0e 94 a6 6a 	call	0xd54c	; 0xd54c <disk_write>
    9672:	03 c0       	rjmp	.+6      	; 0x967a <sync_window.part.5+0x8c>
    9674:	81 e0       	ldi	r24, 0x01	; 1
    9676:	90 e0       	ldi	r25, 0x00	; 0
    9678:	02 c0       	rjmp	.+4      	; 0x967e <sync_window.part.5+0x90>
    967a:	80 e0       	ldi	r24, 0x00	; 0
    967c:	90 e0       	ldi	r25, 0x00	; 0
    967e:	df 91       	pop	r29
    9680:	cf 91       	pop	r28
    9682:	1f 91       	pop	r17
    9684:	0f 91       	pop	r16
    9686:	ff 90       	pop	r15
    9688:	ef 90       	pop	r14
    968a:	bf 90       	pop	r11
    968c:	af 90       	pop	r10
    968e:	9f 90       	pop	r9
    9690:	8f 90       	pop	r8
    9692:	08 95       	ret

00009694 <sync_fs>:
    9694:	ef 92       	push	r14
    9696:	ff 92       	push	r15
    9698:	0f 93       	push	r16
    969a:	1f 93       	push	r17
    969c:	cf 93       	push	r28
    969e:	df 93       	push	r29
    96a0:	ec 01       	movw	r28, r24
    96a2:	8b 81       	ldd	r24, Y+3	; 0x03
    96a4:	81 11       	cpse	r24, r1
    96a6:	05 c0       	rjmp	.+10     	; 0x96b2 <sync_fs+0x1e>
    96a8:	88 81       	ld	r24, Y
    96aa:	83 30       	cpi	r24, 0x03	; 3
    96ac:	09 f0       	breq	.+2      	; 0x96b0 <sync_fs+0x1c>
    96ae:	52 c0       	rjmp	.+164    	; 0x9754 <sync_fs+0xc0>
    96b0:	06 c0       	rjmp	.+12     	; 0x96be <sync_fs+0x2a>
    96b2:	ce 01       	movw	r24, r28
    96b4:	9c df       	rcall	.-200    	; 0x95ee <sync_window.part.5>
    96b6:	00 97       	sbiw	r24, 0x00	; 0
    96b8:	09 f0       	breq	.+2      	; 0x96bc <sync_fs+0x28>
    96ba:	59 c0       	rjmp	.+178    	; 0x976e <sync_fs+0xda>
    96bc:	f5 cf       	rjmp	.-22     	; 0x96a8 <sync_fs+0x14>
    96be:	8c 81       	ldd	r24, Y+4	; 0x04
    96c0:	81 30       	cpi	r24, 0x01	; 1
    96c2:	09 f0       	breq	.+2      	; 0x96c6 <sync_fs+0x32>
    96c4:	47 c0       	rjmp	.+142    	; 0x9754 <sync_fs+0xc0>
    96c6:	40 e0       	ldi	r20, 0x00	; 0
    96c8:	52 e0       	ldi	r21, 0x02	; 2
    96ca:	60 e0       	ldi	r22, 0x00	; 0
    96cc:	70 e0       	ldi	r23, 0x00	; 0
    96ce:	7e 01       	movw	r14, r28
    96d0:	85 e3       	ldi	r24, 0x35	; 53
    96d2:	e8 0e       	add	r14, r24
    96d4:	f1 1c       	adc	r15, r1
    96d6:	c7 01       	movw	r24, r14
    96d8:	50 dd       	rcall	.-1376   	; 0x917a <mem_set>
    96da:	85 e5       	ldi	r24, 0x55	; 85
    96dc:	fe 01       	movw	r30, r28
    96de:	ed 5c       	subi	r30, 0xCD	; 205
    96e0:	fd 4f       	sbci	r31, 0xFD	; 253
    96e2:	80 83       	st	Z, r24
    96e4:	8a ea       	ldi	r24, 0xAA	; 170
    96e6:	31 96       	adiw	r30, 0x01	; 1
    96e8:	80 83       	st	Z, r24
    96ea:	82 e5       	ldi	r24, 0x52	; 82
    96ec:	8d ab       	std	Y+53, r24	; 0x35
    96ee:	8e ab       	std	Y+54, r24	; 0x36
    96f0:	81 e6       	ldi	r24, 0x61	; 97
    96f2:	8f ab       	std	Y+55, r24	; 0x37
    96f4:	91 e4       	ldi	r25, 0x41	; 65
    96f6:	98 af       	std	Y+56, r25	; 0x38
    96f8:	22 e7       	ldi	r18, 0x72	; 114
    96fa:	7b 97       	sbiw	r30, 0x1b	; 27
    96fc:	20 83       	st	Z, r18
    96fe:	31 96       	adiw	r30, 0x01	; 1
    9700:	20 83       	st	Z, r18
    9702:	31 96       	adiw	r30, 0x01	; 1
    9704:	90 83       	st	Z, r25
    9706:	31 96       	adiw	r30, 0x01	; 1
    9708:	80 83       	st	Z, r24
    970a:	49 89       	ldd	r20, Y+17	; 0x11
    970c:	5a 89       	ldd	r21, Y+18	; 0x12
    970e:	6b 89       	ldd	r22, Y+19	; 0x13
    9710:	7c 89       	ldd	r23, Y+20	; 0x14
    9712:	ce 01       	movw	r24, r28
    9714:	83 5e       	subi	r24, 0xE3	; 227
    9716:	9d 4f       	sbci	r25, 0xFD	; 253
    9718:	2a dd       	rcall	.-1452   	; 0x916e <st_dword>
    971a:	4d 85       	ldd	r20, Y+13	; 0x0d
    971c:	5e 85       	ldd	r21, Y+14	; 0x0e
    971e:	6f 85       	ldd	r22, Y+15	; 0x0f
    9720:	78 89       	ldd	r23, Y+16	; 0x10
    9722:	ce 01       	movw	r24, r28
    9724:	8f 5d       	subi	r24, 0xDF	; 223
    9726:	9d 4f       	sbci	r25, 0xFD	; 253
    9728:	22 dd       	rcall	.-1468   	; 0x916e <st_dword>
    972a:	89 a1       	ldd	r24, Y+33	; 0x21
    972c:	9a a1       	ldd	r25, Y+34	; 0x22
    972e:	ab a1       	ldd	r26, Y+35	; 0x23
    9730:	bc a1       	ldd	r27, Y+36	; 0x24
    9732:	9c 01       	movw	r18, r24
    9734:	ad 01       	movw	r20, r26
    9736:	2f 5f       	subi	r18, 0xFF	; 255
    9738:	3f 4f       	sbci	r19, 0xFF	; 255
    973a:	4f 4f       	sbci	r20, 0xFF	; 255
    973c:	5f 4f       	sbci	r21, 0xFF	; 255
    973e:	29 ab       	std	Y+49, r18	; 0x31
    9740:	3a ab       	std	Y+50, r19	; 0x32
    9742:	4b ab       	std	Y+51, r20	; 0x33
    9744:	5c ab       	std	Y+52, r21	; 0x34
    9746:	01 e0       	ldi	r16, 0x01	; 1
    9748:	10 e0       	ldi	r17, 0x00	; 0
    974a:	b7 01       	movw	r22, r14
    974c:	89 81       	ldd	r24, Y+1	; 0x01
    974e:	0e 94 a6 6a 	call	0xd54c	; 0xd54c <disk_write>
    9752:	1c 82       	std	Y+4, r1	; 0x04
    9754:	40 e0       	ldi	r20, 0x00	; 0
    9756:	50 e0       	ldi	r21, 0x00	; 0
    9758:	60 e0       	ldi	r22, 0x00	; 0
    975a:	89 81       	ldd	r24, Y+1	; 0x01
    975c:	0e 94 b6 6a 	call	0xd56c	; 0xd56c <disk_ioctl>
    9760:	31 e0       	ldi	r19, 0x01	; 1
    9762:	20 e0       	ldi	r18, 0x00	; 0
    9764:	89 2b       	or	r24, r25
    9766:	09 f4       	brne	.+2      	; 0x976a <sync_fs+0xd6>
    9768:	30 e0       	ldi	r19, 0x00	; 0
    976a:	83 2f       	mov	r24, r19
    976c:	92 2f       	mov	r25, r18
    976e:	cd b7       	in	r28, 0x3d	; 61
    9770:	de b7       	in	r29, 0x3e	; 62
    9772:	e6 e0       	ldi	r30, 0x06	; 6
    9774:	0c 94 cc e8 	jmp	0x1d198	; 0x1d198 <__epilogue_restores__+0x18>

00009778 <dir_clear>:
    9778:	4f 92       	push	r4
    977a:	5f 92       	push	r5
    977c:	6f 92       	push	r6
    977e:	7f 92       	push	r7
    9780:	af 92       	push	r10
    9782:	bf 92       	push	r11
    9784:	cf 92       	push	r12
    9786:	df 92       	push	r13
    9788:	ef 92       	push	r14
    978a:	ff 92       	push	r15
    978c:	0f 93       	push	r16
    978e:	1f 93       	push	r17
    9790:	cf 93       	push	r28
    9792:	df 93       	push	r29
    9794:	ec 01       	movw	r28, r24
    9796:	6a 01       	movw	r12, r20
    9798:	7b 01       	movw	r14, r22
    979a:	8b 81       	ldd	r24, Y+3	; 0x03
    979c:	81 11       	cpse	r24, r1
    979e:	28 c0       	rjmp	.+80     	; 0x97f0 <dir_clear+0x78>
    97a0:	b7 01       	movw	r22, r14
    97a2:	a6 01       	movw	r20, r12
    97a4:	ce 01       	movw	r24, r28
    97a6:	01 dd       	rcall	.-1534   	; 0x91aa <clst2sect>
    97a8:	2b 01       	movw	r4, r22
    97aa:	3c 01       	movw	r6, r24
    97ac:	69 ab       	std	Y+49, r22	; 0x31
    97ae:	7a ab       	std	Y+50, r23	; 0x32
    97b0:	8b ab       	std	Y+51, r24	; 0x33
    97b2:	9c ab       	std	Y+52, r25	; 0x34
    97b4:	5e 01       	movw	r10, r28
    97b6:	25 e3       	ldi	r18, 0x35	; 53
    97b8:	a2 0e       	add	r10, r18
    97ba:	b1 1c       	adc	r11, r1
    97bc:	40 e0       	ldi	r20, 0x00	; 0
    97be:	52 e0       	ldi	r21, 0x02	; 2
    97c0:	60 e0       	ldi	r22, 0x00	; 0
    97c2:	70 e0       	ldi	r23, 0x00	; 0
    97c4:	c5 01       	movw	r24, r10
    97c6:	d9 dc       	rcall	.-1614   	; 0x917a <mem_set>
    97c8:	09 85       	ldd	r16, Y+9	; 0x09
    97ca:	1a 85       	ldd	r17, Y+10	; 0x0a
    97cc:	c8 01       	movw	r24, r16
    97ce:	a0 e0       	ldi	r26, 0x00	; 0
    97d0:	b0 e0       	ldi	r27, 0x00	; 0
    97d2:	39 e0       	ldi	r19, 0x09	; 9
    97d4:	88 0f       	add	r24, r24
    97d6:	99 1f       	adc	r25, r25
    97d8:	aa 1f       	adc	r26, r26
    97da:	bb 1f       	adc	r27, r27
    97dc:	3a 95       	dec	r19
    97de:	d1 f7       	brne	.-12     	; 0x97d4 <dir_clear+0x5c>
    97e0:	81 15       	cp	r24, r1
    97e2:	98 40       	sbci	r25, 0x08	; 8
    97e4:	a1 05       	cpc	r26, r1
    97e6:	b1 05       	cpc	r27, r1
    97e8:	50 f0       	brcs	.+20     	; 0x97fe <dir_clear+0x86>
    97ea:	00 e0       	ldi	r16, 0x00	; 0
    97ec:	18 e0       	ldi	r17, 0x08	; 8
    97ee:	14 c0       	rjmp	.+40     	; 0x9818 <dir_clear+0xa0>
    97f0:	ce 01       	movw	r24, r28
    97f2:	fd de       	rcall	.-518    	; 0x95ee <sync_window.part.5>
    97f4:	89 2b       	or	r24, r25
    97f6:	a1 f2       	breq	.-88     	; 0x97a0 <dir_clear+0x28>
    97f8:	81 e0       	ldi	r24, 0x01	; 1
    97fa:	90 e0       	ldi	r25, 0x00	; 0
    97fc:	56 c0       	rjmp	.+172    	; 0x98aa <dir_clear+0x132>
    97fe:	10 2f       	mov	r17, r16
    9800:	00 27       	eor	r16, r16
    9802:	11 0f       	add	r17, r17
    9804:	09 c0       	rjmp	.+18     	; 0x9818 <dir_clear+0xa0>
    9806:	c8 01       	movw	r24, r16
    9808:	0e 94 da 69 	call	0xd3b4	; 0xd3b4 <ff_memalloc>
    980c:	6c 01       	movw	r12, r24
    980e:	00 97       	sbiw	r24, 0x00	; 0
    9810:	09 f0       	breq	.+2      	; 0x9814 <dir_clear+0x9c>
    9812:	40 c0       	rjmp	.+128    	; 0x9894 <dir_clear+0x11c>
    9814:	16 95       	lsr	r17
    9816:	07 95       	ror	r16
    9818:	01 30       	cpi	r16, 0x01	; 1
    981a:	82 e0       	ldi	r24, 0x02	; 2
    981c:	18 07       	cpc	r17, r24
    981e:	98 f7       	brcc	.-26     	; 0x9806 <dir_clear+0x8e>
    9820:	e1 2c       	mov	r14, r1
    9822:	f1 2c       	mov	r15, r1
    9824:	11 c0       	rjmp	.+34     	; 0x9848 <dir_clear+0xd0>
    9826:	01 e0       	ldi	r16, 0x01	; 1
    9828:	10 e0       	ldi	r17, 0x00	; 0
    982a:	a3 01       	movw	r20, r6
    982c:	92 01       	movw	r18, r4
    982e:	2e 0d       	add	r18, r14
    9830:	3f 1d       	adc	r19, r15
    9832:	41 1d       	adc	r20, r1
    9834:	51 1d       	adc	r21, r1
    9836:	b5 01       	movw	r22, r10
    9838:	89 81       	ldd	r24, Y+1	; 0x01
    983a:	0e 94 a6 6a 	call	0xd54c	; 0xd54c <disk_write>
    983e:	89 2b       	or	r24, r25
    9840:	01 f5       	brne	.+64     	; 0x9882 <dir_clear+0x10a>
    9842:	2f ef       	ldi	r18, 0xFF	; 255
    9844:	e2 1a       	sub	r14, r18
    9846:	f2 0a       	sbc	r15, r18
    9848:	89 85       	ldd	r24, Y+9	; 0x09
    984a:	9a 85       	ldd	r25, Y+10	; 0x0a
    984c:	e8 16       	cp	r14, r24
    984e:	f9 06       	cpc	r15, r25
    9850:	50 f3       	brcs	.-44     	; 0x9826 <dir_clear+0xae>
    9852:	17 c0       	rjmp	.+46     	; 0x9882 <dir_clear+0x10a>
    9854:	85 01       	movw	r16, r10
    9856:	a3 01       	movw	r20, r6
    9858:	92 01       	movw	r18, r4
    985a:	2e 0d       	add	r18, r14
    985c:	3f 1d       	adc	r19, r15
    985e:	41 1d       	adc	r20, r1
    9860:	51 1d       	adc	r21, r1
    9862:	b6 01       	movw	r22, r12
    9864:	89 81       	ldd	r24, Y+1	; 0x01
    9866:	0e 94 a6 6a 	call	0xd54c	; 0xd54c <disk_write>
    986a:	89 2b       	or	r24, r25
    986c:	39 f4       	brne	.+14     	; 0x987c <dir_clear+0x104>
    986e:	ea 0c       	add	r14, r10
    9870:	fb 1c       	adc	r15, r11
    9872:	89 85       	ldd	r24, Y+9	; 0x09
    9874:	9a 85       	ldd	r25, Y+10	; 0x0a
    9876:	e8 16       	cp	r14, r24
    9878:	f9 06       	cpc	r15, r25
    987a:	60 f3       	brcs	.-40     	; 0x9854 <dir_clear+0xdc>
    987c:	c6 01       	movw	r24, r12
    987e:	0e 94 dd 69 	call	0xd3ba	; 0xd3ba <ff_memfree>
    9882:	81 e0       	ldi	r24, 0x01	; 1
    9884:	90 e0       	ldi	r25, 0x00	; 0
    9886:	29 85       	ldd	r18, Y+9	; 0x09
    9888:	3a 85       	ldd	r19, Y+10	; 0x0a
    988a:	2e 15       	cp	r18, r14
    988c:	3f 05       	cpc	r19, r15
    988e:	69 f4       	brne	.+26     	; 0x98aa <dir_clear+0x132>
    9890:	80 e0       	ldi	r24, 0x00	; 0
    9892:	0b c0       	rjmp	.+22     	; 0x98aa <dir_clear+0x132>
    9894:	a8 01       	movw	r20, r16
    9896:	60 e0       	ldi	r22, 0x00	; 0
    9898:	70 e0       	ldi	r23, 0x00	; 0
    989a:	6f dc       	rcall	.-1826   	; 0x917a <mem_set>
    989c:	58 01       	movw	r10, r16
    989e:	ab 2c       	mov	r10, r11
    98a0:	bb 24       	eor	r11, r11
    98a2:	a6 94       	lsr	r10
    98a4:	e1 2c       	mov	r14, r1
    98a6:	f1 2c       	mov	r15, r1
    98a8:	e4 cf       	rjmp	.-56     	; 0x9872 <dir_clear+0xfa>
    98aa:	df 91       	pop	r29
    98ac:	cf 91       	pop	r28
    98ae:	1f 91       	pop	r17
    98b0:	0f 91       	pop	r16
    98b2:	ff 90       	pop	r15
    98b4:	ef 90       	pop	r14
    98b6:	df 90       	pop	r13
    98b8:	cf 90       	pop	r12
    98ba:	bf 90       	pop	r11
    98bc:	af 90       	pop	r10
    98be:	7f 90       	pop	r7
    98c0:	6f 90       	pop	r6
    98c2:	5f 90       	pop	r5
    98c4:	4f 90       	pop	r4
    98c6:	08 95       	ret

000098c8 <move_window>:
    98c8:	a0 e0       	ldi	r26, 0x00	; 0
    98ca:	b0 e0       	ldi	r27, 0x00	; 0
    98cc:	ea e6       	ldi	r30, 0x6A	; 106
    98ce:	fc e4       	ldi	r31, 0x4C	; 76
    98d0:	0c 94 ae e8 	jmp	0x1d15c	; 0x1d15c <__prologue_saves__+0x14>
    98d4:	ec 01       	movw	r28, r24
    98d6:	6a 01       	movw	r12, r20
    98d8:	7b 01       	movw	r14, r22
    98da:	89 a9       	ldd	r24, Y+49	; 0x31
    98dc:	9a a9       	ldd	r25, Y+50	; 0x32
    98de:	ab a9       	ldd	r26, Y+51	; 0x33
    98e0:	bc a9       	ldd	r27, Y+52	; 0x34
    98e2:	84 17       	cp	r24, r20
    98e4:	95 07       	cpc	r25, r21
    98e6:	a6 07       	cpc	r26, r22
    98e8:	b7 07       	cpc	r27, r23
    98ea:	11 f1       	breq	.+68     	; 0x9930 <move_window+0x68>
    98ec:	8b 81       	ldd	r24, Y+3	; 0x03
    98ee:	81 11       	cpse	r24, r1
    98f0:	13 c0       	rjmp	.+38     	; 0x9918 <move_window+0x50>
    98f2:	01 e0       	ldi	r16, 0x01	; 1
    98f4:	10 e0       	ldi	r17, 0x00	; 0
    98f6:	a7 01       	movw	r20, r14
    98f8:	96 01       	movw	r18, r12
    98fa:	be 01       	movw	r22, r28
    98fc:	6b 5c       	subi	r22, 0xCB	; 203
    98fe:	7f 4f       	sbci	r23, 0xFF	; 255
    9900:	89 81       	ldd	r24, Y+1	; 0x01
    9902:	0e 94 96 6a 	call	0xd52c	; 0xd52c <disk_read>
    9906:	89 2b       	or	r24, r25
    9908:	61 f0       	breq	.+24     	; 0x9922 <move_window+0x5a>
    990a:	81 e0       	ldi	r24, 0x01	; 1
    990c:	90 e0       	ldi	r25, 0x00	; 0
    990e:	cc 24       	eor	r12, r12
    9910:	ca 94       	dec	r12
    9912:	dc 2c       	mov	r13, r12
    9914:	76 01       	movw	r14, r12
    9916:	07 c0       	rjmp	.+14     	; 0x9926 <move_window+0x5e>
    9918:	ce 01       	movw	r24, r28
    991a:	69 de       	rcall	.-814    	; 0x95ee <sync_window.part.5>
    991c:	00 97       	sbiw	r24, 0x00	; 0
    991e:	51 f4       	brne	.+20     	; 0x9934 <move_window+0x6c>
    9920:	e8 cf       	rjmp	.-48     	; 0x98f2 <move_window+0x2a>
    9922:	80 e0       	ldi	r24, 0x00	; 0
    9924:	90 e0       	ldi	r25, 0x00	; 0
    9926:	c9 aa       	std	Y+49, r12	; 0x31
    9928:	da aa       	std	Y+50, r13	; 0x32
    992a:	eb aa       	std	Y+51, r14	; 0x33
    992c:	fc aa       	std	Y+52, r15	; 0x34
    992e:	02 c0       	rjmp	.+4      	; 0x9934 <move_window+0x6c>
    9930:	80 e0       	ldi	r24, 0x00	; 0
    9932:	90 e0       	ldi	r25, 0x00	; 0
    9934:	cd b7       	in	r28, 0x3d	; 61
    9936:	de b7       	in	r29, 0x3e	; 62
    9938:	e8 e0       	ldi	r30, 0x08	; 8
    993a:	0c 94 ca e8 	jmp	0x1d194	; 0x1d194 <__epilogue_restores__+0x14>

0000993e <check_fs>:
    993e:	cf 93       	push	r28
    9940:	df 93       	push	r29
    9942:	ec 01       	movw	r28, r24
    9944:	1b 82       	std	Y+3, r1	; 0x03
    9946:	8f ef       	ldi	r24, 0xFF	; 255
    9948:	9f ef       	ldi	r25, 0xFF	; 255
    994a:	dc 01       	movw	r26, r24
    994c:	89 ab       	std	Y+49, r24	; 0x31
    994e:	9a ab       	std	Y+50, r25	; 0x32
    9950:	ab ab       	std	Y+51, r26	; 0x33
    9952:	bc ab       	std	Y+52, r27	; 0x34
    9954:	ce 01       	movw	r24, r28
    9956:	b8 df       	rcall	.-144    	; 0x98c8 <move_window>
    9958:	89 2b       	or	r24, r25
    995a:	19 f5       	brne	.+70     	; 0x99a2 <check_fs+0x64>
    995c:	fe 01       	movw	r30, r28
    995e:	ed 5c       	subi	r30, 0xCD	; 205
    9960:	fd 4f       	sbci	r31, 0xFD	; 253
    9962:	80 81       	ld	r24, Z
    9964:	91 81       	ldd	r25, Z+1	; 0x01
    9966:	85 35       	cpi	r24, 0x55	; 85
    9968:	9a 4a       	sbci	r25, 0xAA	; 170
    996a:	f1 f4       	brne	.+60     	; 0x99a8 <check_fs+0x6a>
    996c:	8d a9       	ldd	r24, Y+53	; 0x35
    996e:	8b 3e       	cpi	r24, 0xEB	; 235
    9970:	19 f0       	breq	.+6      	; 0x9978 <check_fs+0x3a>
    9972:	88 5e       	subi	r24, 0xE8	; 232
    9974:	82 30       	cpi	r24, 0x02	; 2
    9976:	f0 f4       	brcc	.+60     	; 0x99b4 <check_fs+0x76>
    9978:	43 e0       	ldi	r20, 0x03	; 3
    997a:	50 e0       	ldi	r21, 0x00	; 0
    997c:	66 ec       	ldi	r22, 0xC6	; 198
    997e:	78 e0       	ldi	r23, 0x08	; 8
    9980:	ce 01       	movw	r24, r28
    9982:	85 59       	subi	r24, 0x95	; 149
    9984:	9f 4f       	sbci	r25, 0xFF	; 255
    9986:	02 dc       	rcall	.-2044   	; 0x918c <mem_cmp>
    9988:	89 2b       	or	r24, r25
    998a:	89 f0       	breq	.+34     	; 0x99ae <check_fs+0x70>
    998c:	45 e0       	ldi	r20, 0x05	; 5
    998e:	50 e0       	ldi	r21, 0x00	; 0
    9990:	61 e2       	ldi	r22, 0x21	; 33
    9992:	74 e0       	ldi	r23, 0x04	; 4
    9994:	ce 01       	movw	r24, r28
    9996:	89 57       	subi	r24, 0x79	; 121
    9998:	9f 4f       	sbci	r25, 0xFF	; 255
    999a:	f8 db       	rcall	.-2064   	; 0x918c <mem_cmp>
    999c:	89 2b       	or	r24, r25
    999e:	51 f4       	brne	.+20     	; 0x99b4 <check_fs+0x76>
    99a0:	06 c0       	rjmp	.+12     	; 0x99ae <check_fs+0x70>
    99a2:	84 e0       	ldi	r24, 0x04	; 4
    99a4:	90 e0       	ldi	r25, 0x00	; 0
    99a6:	08 c0       	rjmp	.+16     	; 0x99b8 <check_fs+0x7a>
    99a8:	83 e0       	ldi	r24, 0x03	; 3
    99aa:	90 e0       	ldi	r25, 0x00	; 0
    99ac:	05 c0       	rjmp	.+10     	; 0x99b8 <check_fs+0x7a>
    99ae:	80 e0       	ldi	r24, 0x00	; 0
    99b0:	90 e0       	ldi	r25, 0x00	; 0
    99b2:	02 c0       	rjmp	.+4      	; 0x99b8 <check_fs+0x7a>
    99b4:	82 e0       	ldi	r24, 0x02	; 2
    99b6:	90 e0       	ldi	r25, 0x00	; 0
    99b8:	df 91       	pop	r29
    99ba:	cf 91       	pop	r28
    99bc:	08 95       	ret

000099be <mount_volume>:
    99be:	a0 e2       	ldi	r26, 0x20	; 32
    99c0:	b0 e0       	ldi	r27, 0x00	; 0
    99c2:	e5 ee       	ldi	r30, 0xE5	; 229
    99c4:	fc e4       	ldi	r31, 0x4C	; 76
    99c6:	0c 94 a6 e8 	jmp	0x1d14c	; 0x1d14c <__prologue_saves__+0x4>
    99ca:	5b 01       	movw	r10, r22
    99cc:	f4 2e       	mov	r15, r20
    99ce:	db 01       	movw	r26, r22
    99d0:	1d 92       	st	X+, r1
    99d2:	1c 92       	st	X, r1
    99d4:	5d dc       	rcall	.-1862   	; 0x9290 <get_ldnumber>
    99d6:	6c 01       	movw	r12, r24
    99d8:	97 fd       	sbrc	r25, 7
    99da:	39 c2       	rjmp	.+1138   	; 0x9e4e <mount_volume+0x490>
    99dc:	fc 01       	movw	r30, r24
    99de:	ee 0f       	add	r30, r30
    99e0:	ff 1f       	adc	r31, r31
    99e2:	ef 5d       	subi	r30, 0xDF	; 223
    99e4:	f7 4e       	sbci	r31, 0xE7	; 231
    99e6:	00 81       	ld	r16, Z
    99e8:	11 81       	ldd	r17, Z+1	; 0x01
    99ea:	01 15       	cp	r16, r1
    99ec:	11 05       	cpc	r17, r1
    99ee:	09 f4       	brne	.+2      	; 0x99f2 <mount_volume+0x34>
    99f0:	31 c2       	rjmp	.+1122   	; 0x9e54 <mount_volume+0x496>
    99f2:	f5 01       	movw	r30, r10
    99f4:	11 83       	std	Z+1, r17	; 0x01
    99f6:	00 83       	st	Z, r16
    99f8:	ff 2d       	mov	r31, r15
    99fa:	fe 7f       	andi	r31, 0xFE	; 254
    99fc:	ff 2e       	mov	r15, r31
    99fe:	d8 01       	movw	r26, r16
    9a00:	8c 91       	ld	r24, X
    9a02:	88 23       	and	r24, r24
    9a04:	71 f0       	breq	.+28     	; 0x9a22 <mount_volume+0x64>
    9a06:	f8 01       	movw	r30, r16
    9a08:	81 81       	ldd	r24, Z+1	; 0x01
    9a0a:	0e 94 8a 6a 	call	0xd514	; 0xd514 <disk_status>
    9a0e:	80 fd       	sbrc	r24, 0
    9a10:	08 c0       	rjmp	.+16     	; 0x9a22 <mount_volume+0x64>
    9a12:	ff 20       	and	r15, r15
    9a14:	09 f4       	brne	.+2      	; 0x9a18 <mount_volume+0x5a>
    9a16:	21 c2       	rjmp	.+1090   	; 0x9e5a <mount_volume+0x49c>
    9a18:	82 ff       	sbrs	r24, 2
    9a1a:	1f c2       	rjmp	.+1086   	; 0x9e5a <mount_volume+0x49c>
    9a1c:	8a e0       	ldi	r24, 0x0A	; 10
    9a1e:	90 e0       	ldi	r25, 0x00	; 0
    9a20:	24 c2       	rjmp	.+1096   	; 0x9e6a <mount_volume+0x4ac>
    9a22:	d8 01       	movw	r26, r16
    9a24:	1c 92       	st	X, r1
    9a26:	f8 01       	movw	r30, r16
    9a28:	c1 82       	std	Z+1, r12	; 0x01
    9a2a:	8c 2d       	mov	r24, r12
    9a2c:	0e 94 90 6a 	call	0xd520	; 0xd520 <disk_initialize>
    9a30:	80 fd       	sbrc	r24, 0
    9a32:	16 c2       	rjmp	.+1068   	; 0x9e60 <mount_volume+0x4a2>
    9a34:	ff 20       	and	r15, r15
    9a36:	11 f0       	breq	.+4      	; 0x9a3c <mount_volume+0x7e>
    9a38:	82 fd       	sbrc	r24, 2
    9a3a:	f0 cf       	rjmp	.-32     	; 0x9a1c <mount_volume+0x5e>
    9a3c:	40 e0       	ldi	r20, 0x00	; 0
    9a3e:	50 e0       	ldi	r21, 0x00	; 0
    9a40:	ba 01       	movw	r22, r20
    9a42:	c8 01       	movw	r24, r16
    9a44:	7c df       	rcall	.-264    	; 0x993e <check_fs>
    9a46:	82 30       	cpi	r24, 0x02	; 2
    9a48:	91 05       	cpc	r25, r1
    9a4a:	b9 f5       	brne	.+110    	; 0x9aba <mount_volume+0xfc>
    9a4c:	68 01       	movw	r12, r16
    9a4e:	f5 e0       	ldi	r31, 0x05	; 5
    9a50:	cf 1a       	sub	r12, r31
    9a52:	fe ef       	ldi	r31, 0xFE	; 254
    9a54:	df 0a       	sbc	r13, r31
    9a56:	9e 01       	movw	r18, r28
    9a58:	2f 5f       	subi	r18, 0xFF	; 255
    9a5a:	3f 4f       	sbci	r19, 0xFF	; 255
    9a5c:	79 01       	movw	r14, r18
    9a5e:	48 01       	movw	r8, r16
    9a60:	35 ec       	ldi	r19, 0xC5	; 197
    9a62:	83 1a       	sub	r8, r19
    9a64:	3d ef       	ldi	r19, 0xFD	; 253
    9a66:	93 0a       	sbc	r9, r19
    9a68:	57 01       	movw	r10, r14
    9a6a:	c6 01       	movw	r24, r12
    9a6c:	6b db       	rcall	.-2346   	; 0x9144 <ld_dword>
    9a6e:	d5 01       	movw	r26, r10
    9a70:	6d 93       	st	X+, r22
    9a72:	7d 93       	st	X+, r23
    9a74:	8d 93       	st	X+, r24
    9a76:	9d 93       	st	X+, r25
    9a78:	5d 01       	movw	r10, r26
    9a7a:	b0 e1       	ldi	r27, 0x10	; 16
    9a7c:	cb 0e       	add	r12, r27
    9a7e:	d1 1c       	adc	r13, r1
    9a80:	c8 14       	cp	r12, r8
    9a82:	d9 04       	cpc	r13, r9
    9a84:	91 f7       	brne	.-28     	; 0x9a6a <mount_volume+0xac>
    9a86:	6e 01       	movw	r12, r28
    9a88:	e1 e1       	ldi	r30, 0x11	; 17
    9a8a:	ce 0e       	add	r12, r30
    9a8c:	d1 1c       	adc	r13, r1
    9a8e:	d7 01       	movw	r26, r14
    9a90:	4d 91       	ld	r20, X+
    9a92:	5d 91       	ld	r21, X+
    9a94:	6d 91       	ld	r22, X+
    9a96:	7d 91       	ld	r23, X+
    9a98:	7d 01       	movw	r14, r26
    9a9a:	41 15       	cp	r20, r1
    9a9c:	51 05       	cpc	r21, r1
    9a9e:	61 05       	cpc	r22, r1
    9aa0:	71 05       	cpc	r23, r1
    9aa2:	31 f0       	breq	.+12     	; 0x9ab0 <mount_volume+0xf2>
    9aa4:	c8 01       	movw	r24, r16
    9aa6:	4b df       	rcall	.-362    	; 0x993e <check_fs>
    9aa8:	82 30       	cpi	r24, 0x02	; 2
    9aaa:	91 05       	cpc	r25, r1
    9aac:	18 f4       	brcc	.+6      	; 0x9ab4 <mount_volume+0xf6>
    9aae:	05 c0       	rjmp	.+10     	; 0x9aba <mount_volume+0xfc>
    9ab0:	83 e0       	ldi	r24, 0x03	; 3
    9ab2:	90 e0       	ldi	r25, 0x00	; 0
    9ab4:	ce 14       	cp	r12, r14
    9ab6:	df 04       	cpc	r13, r15
    9ab8:	51 f7       	brne	.-44     	; 0x9a8e <mount_volume+0xd0>
    9aba:	84 30       	cpi	r24, 0x04	; 4
    9abc:	91 05       	cpc	r25, r1
    9abe:	09 f4       	brne	.+2      	; 0x9ac2 <mount_volume+0x104>
    9ac0:	d2 c1       	rjmp	.+932    	; 0x9e66 <mount_volume+0x4a8>
    9ac2:	02 97       	sbiw	r24, 0x02	; 2
    9ac4:	18 f0       	brcs	.+6      	; 0x9acc <mount_volume+0x10e>
    9ac6:	8d e0       	ldi	r24, 0x0D	; 13
    9ac8:	90 e0       	ldi	r25, 0x00	; 0
    9aca:	cf c1       	rjmp	.+926    	; 0x9e6a <mount_volume+0x4ac>
    9acc:	f8 01       	movw	r30, r16
    9ace:	e0 5c       	subi	r30, 0xC0	; 192
    9ad0:	ff 4f       	sbci	r31, 0xFF	; 255
    9ad2:	80 81       	ld	r24, Z
    9ad4:	91 81       	ldd	r25, Z+1	; 0x01
    9ad6:	81 15       	cp	r24, r1
    9ad8:	92 40       	sbci	r25, 0x02	; 2
    9ada:	a9 f7       	brne	.-22     	; 0x9ac6 <mount_volume+0x108>
    9adc:	3b 96       	adiw	r30, 0x0b	; 11
    9ade:	40 80       	ld	r4, Z
    9ae0:	51 80       	ldd	r5, Z+1	; 0x01
    9ae2:	41 14       	cp	r4, r1
    9ae4:	51 04       	cpc	r5, r1
    9ae6:	19 f0       	breq	.+6      	; 0x9aee <mount_volume+0x130>
    9ae8:	61 2c       	mov	r6, r1
    9aea:	71 2c       	mov	r7, r1
    9aec:	06 c0       	rjmp	.+12     	; 0x9afa <mount_volume+0x13c>
    9aee:	c8 01       	movw	r24, r16
    9af0:	87 5a       	subi	r24, 0xA7	; 167
    9af2:	9f 4f       	sbci	r25, 0xFF	; 255
    9af4:	27 db       	rcall	.-2482   	; 0x9144 <ld_dword>
    9af6:	2b 01       	movw	r4, r22
    9af8:	3c 01       	movw	r6, r24
    9afa:	f8 01       	movw	r30, r16
    9afc:	21 a9       	ldd	r18, Z+49	; 0x31
    9afe:	32 a9       	ldd	r19, Z+50	; 0x32
    9b00:	43 a9       	ldd	r20, Z+51	; 0x33
    9b02:	54 a9       	ldd	r21, Z+52	; 0x34
    9b04:	29 8b       	std	Y+17, r18	; 0x11
    9b06:	3a 8b       	std	Y+18, r19	; 0x12
    9b08:	4b 8b       	std	Y+19, r20	; 0x13
    9b0a:	5c 8b       	std	Y+20, r21	; 0x14
    9b0c:	45 8e       	std	Z+29, r4	; 0x1d
    9b0e:	56 8e       	std	Z+30, r5	; 0x1e
    9b10:	67 8e       	std	Z+31, r6	; 0x1f
    9b12:	70 a2       	std	Z+32, r7	; 0x20
    9b14:	eb 5b       	subi	r30, 0xBB	; 187
    9b16:	ff 4f       	sbci	r31, 0xFF	; 255
    9b18:	a0 80       	ld	r10, Z
    9b1a:	f8 01       	movw	r30, r16
    9b1c:	a2 82       	std	Z+2, r10	; 0x02
    9b1e:	8f ef       	ldi	r24, 0xFF	; 255
    9b20:	8a 0d       	add	r24, r10
    9b22:	82 30       	cpi	r24, 0x02	; 2
    9b24:	80 f6       	brcc	.-96     	; 0x9ac6 <mount_volume+0x108>
    9b26:	ee 5b       	subi	r30, 0xBE	; 190
    9b28:	ff 4f       	sbci	r31, 0xFF	; 255
    9b2a:	b0 80       	ld	r11, Z
    9b2c:	8b 2d       	mov	r24, r11
    9b2e:	90 e0       	ldi	r25, 0x00	; 0
    9b30:	f8 01       	movw	r30, r16
    9b32:	92 87       	std	Z+10, r25	; 0x0a
    9b34:	81 87       	std	Z+9, r24	; 0x09
    9b36:	00 97       	sbiw	r24, 0x00	; 0
    9b38:	31 f2       	breq	.-116    	; 0x9ac6 <mount_volume+0x108>
    9b3a:	9c 01       	movw	r18, r24
    9b3c:	21 50       	subi	r18, 0x01	; 1
    9b3e:	31 09       	sbc	r19, r1
    9b40:	82 23       	and	r24, r18
    9b42:	93 23       	and	r25, r19
    9b44:	89 2b       	or	r24, r25
    9b46:	09 f0       	breq	.+2      	; 0x9b4a <mount_volume+0x18c>
    9b48:	be cf       	rjmp	.-132    	; 0x9ac6 <mount_volume+0x108>
    9b4a:	ea 5b       	subi	r30, 0xBA	; 186
    9b4c:	ff 4f       	sbci	r31, 0xFF	; 255
    9b4e:	80 80       	ld	r8, Z
    9b50:	91 80       	ldd	r9, Z+1	; 0x01
    9b52:	f8 01       	movw	r30, r16
    9b54:	90 86       	std	Z+8, r9	; 0x08
    9b56:	87 82       	std	Z+7, r8	; 0x07
    9b58:	c4 01       	movw	r24, r8
    9b5a:	8f 70       	andi	r24, 0x0F	; 15
    9b5c:	99 27       	eor	r25, r25
    9b5e:	89 2b       	or	r24, r25
    9b60:	09 f0       	breq	.+2      	; 0x9b64 <mount_volume+0x1a6>
    9b62:	b1 cf       	rjmp	.-158    	; 0x9ac6 <mount_volume+0x108>
    9b64:	e8 5b       	subi	r30, 0xB8	; 184
    9b66:	ff 4f       	sbci	r31, 0xFF	; 255
    9b68:	80 81       	ld	r24, Z
    9b6a:	91 81       	ldd	r25, Z+1	; 0x01
    9b6c:	6c 01       	movw	r12, r24
    9b6e:	e1 2c       	mov	r14, r1
    9b70:	f1 2c       	mov	r15, r1
    9b72:	89 2b       	or	r24, r25
    9b74:	31 f4       	brne	.+12     	; 0x9b82 <mount_volume+0x1c4>
    9b76:	c8 01       	movw	r24, r16
    9b78:	8b 5a       	subi	r24, 0xAB	; 171
    9b7a:	9f 4f       	sbci	r25, 0xFF	; 255
    9b7c:	e3 da       	rcall	.-2618   	; 0x9144 <ld_dword>
    9b7e:	6b 01       	movw	r12, r22
    9b80:	7c 01       	movw	r14, r24
    9b82:	f8 01       	movw	r30, r16
    9b84:	ed 5b       	subi	r30, 0xBD	; 189
    9b86:	ff 4f       	sbci	r31, 0xFF	; 255
    9b88:	01 90       	ld	r0, Z+
    9b8a:	f0 81       	ld	r31, Z
    9b8c:	e0 2d       	mov	r30, r0
    9b8e:	30 97       	sbiw	r30, 0x00	; 0
    9b90:	09 f4       	brne	.+2      	; 0x9b94 <mount_volume+0x1d6>
    9b92:	99 cf       	rjmp	.-206    	; 0x9ac6 <mount_volume+0x108>
    9b94:	aa 2d       	mov	r26, r10
    9b96:	b0 e0       	ldi	r27, 0x00	; 0
    9b98:	a3 01       	movw	r20, r6
    9b9a:	92 01       	movw	r18, r4
    9b9c:	0e 94 84 e8 	call	0x1d108	; 0x1d108 <__muluhisi3>
    9ba0:	69 8f       	std	Y+25, r22	; 0x19
    9ba2:	7a 8f       	std	Y+26, r23	; 0x1a
    9ba4:	8b 8f       	std	Y+27, r24	; 0x1b
    9ba6:	9c 8f       	std	Y+28, r25	; 0x1c
    9ba8:	9f 01       	movw	r18, r30
    9baa:	40 e0       	ldi	r20, 0x00	; 0
    9bac:	50 e0       	ldi	r21, 0x00	; 0
    9bae:	2d 8f       	std	Y+29, r18	; 0x1d
    9bb0:	3e 8f       	std	Y+30, r19	; 0x1e
    9bb2:	4f 8f       	std	Y+31, r20	; 0x1f
    9bb4:	58 a3       	std	Y+32, r21	; 0x20
    9bb6:	c4 01       	movw	r24, r8
    9bb8:	f4 e0       	ldi	r31, 0x04	; 4
    9bba:	96 95       	lsr	r25
    9bbc:	87 95       	ror	r24
    9bbe:	fa 95       	dec	r31
    9bc0:	e1 f7       	brne	.-8      	; 0x9bba <mount_volume+0x1fc>
    9bc2:	28 0f       	add	r18, r24
    9bc4:	39 1f       	adc	r19, r25
    9bc6:	41 1d       	adc	r20, r1
    9bc8:	51 1d       	adc	r21, r1
    9bca:	da 01       	movw	r26, r20
    9bcc:	c9 01       	movw	r24, r18
    9bce:	29 8d       	ldd	r18, Y+25	; 0x19
    9bd0:	3a 8d       	ldd	r19, Y+26	; 0x1a
    9bd2:	4b 8d       	ldd	r20, Y+27	; 0x1b
    9bd4:	5c 8d       	ldd	r21, Y+28	; 0x1c
    9bd6:	28 0f       	add	r18, r24
    9bd8:	39 1f       	adc	r19, r25
    9bda:	4a 1f       	adc	r20, r26
    9bdc:	5b 1f       	adc	r21, r27
    9bde:	2d 8b       	std	Y+21, r18	; 0x15
    9be0:	3e 8b       	std	Y+22, r19	; 0x16
    9be2:	4f 8b       	std	Y+23, r20	; 0x17
    9be4:	58 8f       	std	Y+24, r21	; 0x18
    9be6:	c2 16       	cp	r12, r18
    9be8:	d3 06       	cpc	r13, r19
    9bea:	e4 06       	cpc	r14, r20
    9bec:	f5 06       	cpc	r15, r21
    9bee:	08 f4       	brcc	.+2      	; 0x9bf2 <mount_volume+0x234>
    9bf0:	6a cf       	rjmp	.-300    	; 0x9ac6 <mount_volume+0x108>
    9bf2:	c7 01       	movw	r24, r14
    9bf4:	b6 01       	movw	r22, r12
    9bf6:	62 1b       	sub	r22, r18
    9bf8:	73 0b       	sbc	r23, r19
    9bfa:	84 0b       	sbc	r24, r20
    9bfc:	95 0b       	sbc	r25, r21
    9bfe:	2b 2d       	mov	r18, r11
    9c00:	30 e0       	ldi	r19, 0x00	; 0
    9c02:	40 e0       	ldi	r20, 0x00	; 0
    9c04:	50 e0       	ldi	r21, 0x00	; 0
    9c06:	0e 94 37 e8 	call	0x1d06e	; 0x1d06e <__udivmodsi4>
    9c0a:	da 01       	movw	r26, r20
    9c0c:	c9 01       	movw	r24, r18
    9c0e:	01 97       	sbiw	r24, 0x01	; 1
    9c10:	a1 09       	sbc	r26, r1
    9c12:	b1 09       	sbc	r27, r1
    9c14:	85 3f       	cpi	r24, 0xF5	; 245
    9c16:	9f 4f       	sbci	r25, 0xFF	; 255
    9c18:	af 4f       	sbci	r26, 0xFF	; 255
    9c1a:	bf 40       	sbci	r27, 0x0F	; 15
    9c1c:	08 f0       	brcs	.+2      	; 0x9c20 <mount_volume+0x262>
    9c1e:	53 cf       	rjmp	.-346    	; 0x9ac6 <mount_volume+0x108>
    9c20:	26 3f       	cpi	r18, 0xF6	; 246
    9c22:	8f ef       	ldi	r24, 0xFF	; 255
    9c24:	38 07       	cpc	r19, r24
    9c26:	41 05       	cpc	r20, r1
    9c28:	51 05       	cpc	r21, r1
    9c2a:	50 f4       	brcc	.+20     	; 0x9c40 <mount_volume+0x282>
    9c2c:	26 3f       	cpi	r18, 0xF6	; 246
    9c2e:	9f e0       	ldi	r25, 0x0F	; 15
    9c30:	39 07       	cpc	r19, r25
    9c32:	41 05       	cpc	r20, r1
    9c34:	51 05       	cpc	r21, r1
    9c36:	40 f4       	brcc	.+16     	; 0x9c48 <mount_volume+0x28a>
    9c38:	aa 24       	eor	r10, r10
    9c3a:	a3 94       	inc	r10
    9c3c:	b1 2c       	mov	r11, r1
    9c3e:	07 c0       	rjmp	.+14     	; 0x9c4e <mount_volume+0x290>
    9c40:	73 e0       	ldi	r23, 0x03	; 3
    9c42:	a7 2e       	mov	r10, r23
    9c44:	b1 2c       	mov	r11, r1
    9c46:	03 c0       	rjmp	.+6      	; 0x9c4e <mount_volume+0x290>
    9c48:	62 e0       	ldi	r22, 0x02	; 2
    9c4a:	a6 2e       	mov	r10, r22
    9c4c:	b1 2c       	mov	r11, r1
    9c4e:	69 01       	movw	r12, r18
    9c50:	7a 01       	movw	r14, r20
    9c52:	a2 e0       	ldi	r26, 0x02	; 2
    9c54:	ca 0e       	add	r12, r26
    9c56:	d1 1c       	adc	r13, r1
    9c58:	e1 1c       	adc	r14, r1
    9c5a:	f1 1c       	adc	r15, r1
    9c5c:	f8 01       	movw	r30, r16
    9c5e:	c1 8e       	std	Z+25, r12	; 0x19
    9c60:	d2 8e       	std	Z+26, r13	; 0x1a
    9c62:	e3 8e       	std	Z+27, r14	; 0x1b
    9c64:	f4 8e       	std	Z+28, r15	; 0x1c
    9c66:	29 89       	ldd	r18, Y+17	; 0x11
    9c68:	3a 89       	ldd	r19, Y+18	; 0x12
    9c6a:	4b 89       	ldd	r20, Y+19	; 0x13
    9c6c:	5c 89       	ldd	r21, Y+20	; 0x14
    9c6e:	21 a3       	std	Z+33, r18	; 0x21
    9c70:	32 a3       	std	Z+34, r19	; 0x22
    9c72:	43 a3       	std	Z+35, r20	; 0x23
    9c74:	54 a3       	std	Z+36, r21	; 0x24
    9c76:	8d 8d       	ldd	r24, Y+29	; 0x1d
    9c78:	9e 8d       	ldd	r25, Y+30	; 0x1e
    9c7a:	af 8d       	ldd	r26, Y+31	; 0x1f
    9c7c:	b8 a1       	ldd	r27, Y+32	; 0x20
    9c7e:	28 0f       	add	r18, r24
    9c80:	39 1f       	adc	r19, r25
    9c82:	4a 1f       	adc	r20, r26
    9c84:	5b 1f       	adc	r21, r27
    9c86:	2d 8f       	std	Y+29, r18	; 0x1d
    9c88:	3e 8f       	std	Y+30, r19	; 0x1e
    9c8a:	4f 8f       	std	Y+31, r20	; 0x1f
    9c8c:	58 a3       	std	Y+32, r21	; 0x20
    9c8e:	25 a3       	std	Z+37, r18	; 0x25
    9c90:	36 a3       	std	Z+38, r19	; 0x26
    9c92:	47 a3       	std	Z+39, r20	; 0x27
    9c94:	50 a7       	std	Z+40, r21	; 0x28
    9c96:	49 89       	ldd	r20, Y+17	; 0x11
    9c98:	5a 89       	ldd	r21, Y+18	; 0x12
    9c9a:	6b 89       	ldd	r22, Y+19	; 0x13
    9c9c:	7c 89       	ldd	r23, Y+20	; 0x14
    9c9e:	8d 89       	ldd	r24, Y+21	; 0x15
    9ca0:	9e 89       	ldd	r25, Y+22	; 0x16
    9ca2:	af 89       	ldd	r26, Y+23	; 0x17
    9ca4:	b8 8d       	ldd	r27, Y+24	; 0x18
    9ca6:	48 0f       	add	r20, r24
    9ca8:	59 1f       	adc	r21, r25
    9caa:	6a 1f       	adc	r22, r26
    9cac:	7b 1f       	adc	r23, r27
    9cae:	45 a7       	std	Z+45, r20	; 0x2d
    9cb0:	56 a7       	std	Z+46, r21	; 0x2e
    9cb2:	67 a7       	std	Z+47, r22	; 0x2f
    9cb4:	70 ab       	std	Z+48, r23	; 0x30
    9cb6:	f3 e0       	ldi	r31, 0x03	; 3
    9cb8:	af 16       	cp	r10, r31
    9cba:	b1 04       	cpc	r11, r1
    9cbc:	e9 f4       	brne	.+58     	; 0x9cf8 <mount_volume+0x33a>
    9cbe:	f8 01       	movw	r30, r16
    9cc0:	e1 5a       	subi	r30, 0xA1	; 161
    9cc2:	ff 4f       	sbci	r31, 0xFF	; 255
    9cc4:	80 81       	ld	r24, Z
    9cc6:	91 81       	ldd	r25, Z+1	; 0x01
    9cc8:	89 2b       	or	r24, r25
    9cca:	09 f0       	breq	.+2      	; 0x9cce <mount_volume+0x310>
    9ccc:	fc ce       	rjmp	.-520    	; 0x9ac6 <mount_volume+0x108>
    9cce:	81 14       	cp	r8, r1
    9cd0:	91 04       	cpc	r9, r1
    9cd2:	09 f0       	breq	.+2      	; 0x9cd6 <mount_volume+0x318>
    9cd4:	f8 ce       	rjmp	.-528    	; 0x9ac6 <mount_volume+0x108>
    9cd6:	c8 01       	movw	r24, r16
    9cd8:	8f 59       	subi	r24, 0x9F	; 159
    9cda:	9f 4f       	sbci	r25, 0xFF	; 255
    9cdc:	33 da       	rcall	.-2970   	; 0x9144 <ld_dword>
    9cde:	f8 01       	movw	r30, r16
    9ce0:	61 a7       	std	Z+41, r22	; 0x29
    9ce2:	72 a7       	std	Z+42, r23	; 0x2a
    9ce4:	83 a7       	std	Z+43, r24	; 0x2b
    9ce6:	94 a7       	std	Z+44, r25	; 0x2c
    9ce8:	42 e0       	ldi	r20, 0x02	; 2
    9cea:	cc 0c       	add	r12, r12
    9cec:	dd 1c       	adc	r13, r13
    9cee:	ee 1c       	adc	r14, r14
    9cf0:	ff 1c       	adc	r15, r15
    9cf2:	4a 95       	dec	r20
    9cf4:	d1 f7       	brne	.-12     	; 0x9cea <mount_volume+0x32c>
    9cf6:	33 c0       	rjmp	.+102    	; 0x9d5e <mount_volume+0x3a0>
    9cf8:	81 14       	cp	r8, r1
    9cfa:	91 04       	cpc	r9, r1
    9cfc:	09 f4       	brne	.+2      	; 0x9d00 <mount_volume+0x342>
    9cfe:	e3 ce       	rjmp	.-570    	; 0x9ac6 <mount_volume+0x108>
    9d00:	8d 8d       	ldd	r24, Y+29	; 0x1d
    9d02:	9e 8d       	ldd	r25, Y+30	; 0x1e
    9d04:	af 8d       	ldd	r26, Y+31	; 0x1f
    9d06:	b8 a1       	ldd	r27, Y+32	; 0x20
    9d08:	29 8d       	ldd	r18, Y+25	; 0x19
    9d0a:	3a 8d       	ldd	r19, Y+26	; 0x1a
    9d0c:	4b 8d       	ldd	r20, Y+27	; 0x1b
    9d0e:	5c 8d       	ldd	r21, Y+28	; 0x1c
    9d10:	82 0f       	add	r24, r18
    9d12:	93 1f       	adc	r25, r19
    9d14:	a4 1f       	adc	r26, r20
    9d16:	b5 1f       	adc	r27, r21
    9d18:	f8 01       	movw	r30, r16
    9d1a:	81 a7       	std	Z+41, r24	; 0x29
    9d1c:	92 a7       	std	Z+42, r25	; 0x2a
    9d1e:	a3 a7       	std	Z+43, r26	; 0x2b
    9d20:	b4 a7       	std	Z+44, r27	; 0x2c
    9d22:	f2 e0       	ldi	r31, 0x02	; 2
    9d24:	af 16       	cp	r10, r31
    9d26:	b1 04       	cpc	r11, r1
    9d28:	29 f4       	brne	.+10     	; 0x9d34 <mount_volume+0x376>
    9d2a:	cc 0c       	add	r12, r12
    9d2c:	dd 1c       	adc	r13, r13
    9d2e:	ee 1c       	adc	r14, r14
    9d30:	ff 1c       	adc	r15, r15
    9d32:	15 c0       	rjmp	.+42     	; 0x9d5e <mount_volume+0x3a0>
    9d34:	a3 e0       	ldi	r26, 0x03	; 3
    9d36:	b0 e0       	ldi	r27, 0x00	; 0
    9d38:	a7 01       	movw	r20, r14
    9d3a:	96 01       	movw	r18, r12
    9d3c:	0e 94 84 e8 	call	0x1d108	; 0x1d108 <__muluhisi3>
    9d40:	dc 01       	movw	r26, r24
    9d42:	cb 01       	movw	r24, r22
    9d44:	b6 95       	lsr	r27
    9d46:	a7 95       	ror	r26
    9d48:	97 95       	ror	r25
    9d4a:	87 95       	ror	r24
    9d4c:	21 e0       	ldi	r18, 0x01	; 1
    9d4e:	c2 22       	and	r12, r18
    9d50:	dd 24       	eor	r13, r13
    9d52:	ee 24       	eor	r14, r14
    9d54:	ff 24       	eor	r15, r15
    9d56:	c8 0e       	add	r12, r24
    9d58:	d9 1e       	adc	r13, r25
    9d5a:	ea 1e       	adc	r14, r26
    9d5c:	fb 1e       	adc	r15, r27
    9d5e:	3f ef       	ldi	r19, 0xFF	; 255
    9d60:	c3 0e       	add	r12, r19
    9d62:	31 e0       	ldi	r19, 0x01	; 1
    9d64:	d3 1e       	adc	r13, r19
    9d66:	e1 1c       	adc	r14, r1
    9d68:	f1 1c       	adc	r15, r1
    9d6a:	89 e0       	ldi	r24, 0x09	; 9
    9d6c:	f6 94       	lsr	r15
    9d6e:	e7 94       	ror	r14
    9d70:	d7 94       	ror	r13
    9d72:	c7 94       	ror	r12
    9d74:	8a 95       	dec	r24
    9d76:	d1 f7       	brne	.-12     	; 0x9d6c <mount_volume+0x3ae>
    9d78:	4c 14       	cp	r4, r12
    9d7a:	5d 04       	cpc	r5, r13
    9d7c:	6e 04       	cpc	r6, r14
    9d7e:	7f 04       	cpc	r7, r15
    9d80:	08 f4       	brcc	.+2      	; 0x9d84 <mount_volume+0x3c6>
    9d82:	a1 ce       	rjmp	.-702    	; 0x9ac6 <mount_volume+0x108>
    9d84:	8f ef       	ldi	r24, 0xFF	; 255
    9d86:	9f ef       	ldi	r25, 0xFF	; 255
    9d88:	dc 01       	movw	r26, r24
    9d8a:	f8 01       	movw	r30, r16
    9d8c:	81 8b       	std	Z+17, r24	; 0x11
    9d8e:	92 8b       	std	Z+18, r25	; 0x12
    9d90:	a3 8b       	std	Z+19, r26	; 0x13
    9d92:	b4 8b       	std	Z+20, r27	; 0x14
    9d94:	85 87       	std	Z+13, r24	; 0x0d
    9d96:	96 87       	std	Z+14, r25	; 0x0e
    9d98:	a7 87       	std	Z+15, r26	; 0x0f
    9d9a:	b0 8b       	std	Z+16, r27	; 0x10
    9d9c:	80 e8       	ldi	r24, 0x80	; 128
    9d9e:	84 83       	std	Z+4, r24	; 0x04
    9da0:	f3 e0       	ldi	r31, 0x03	; 3
    9da2:	af 16       	cp	r10, r31
    9da4:	b1 04       	cpc	r11, r1
    9da6:	09 f0       	breq	.+2      	; 0x9daa <mount_volume+0x3ec>
    9da8:	3f c0       	rjmp	.+126    	; 0x9e28 <mount_volume+0x46a>
    9daa:	f8 01       	movw	r30, r16
    9dac:	eb 59       	subi	r30, 0x9B	; 155
    9dae:	ff 4f       	sbci	r31, 0xFF	; 255
    9db0:	80 81       	ld	r24, Z
    9db2:	91 81       	ldd	r25, Z+1	; 0x01
    9db4:	01 97       	sbiw	r24, 0x01	; 1
    9db6:	c1 f5       	brne	.+112    	; 0x9e28 <mount_volume+0x46a>
    9db8:	49 89       	ldd	r20, Y+17	; 0x11
    9dba:	5a 89       	ldd	r21, Y+18	; 0x12
    9dbc:	6b 89       	ldd	r22, Y+19	; 0x13
    9dbe:	7c 89       	ldd	r23, Y+20	; 0x14
    9dc0:	4f 5f       	subi	r20, 0xFF	; 255
    9dc2:	5f 4f       	sbci	r21, 0xFF	; 255
    9dc4:	6f 4f       	sbci	r22, 0xFF	; 255
    9dc6:	7f 4f       	sbci	r23, 0xFF	; 255
    9dc8:	c8 01       	movw	r24, r16
    9dca:	7e dd       	rcall	.-1284   	; 0x98c8 <move_window>
    9dcc:	89 2b       	or	r24, r25
    9dce:	61 f5       	brne	.+88     	; 0x9e28 <mount_volume+0x46a>
    9dd0:	f8 01       	movw	r30, r16
    9dd2:	14 82       	std	Z+4, r1	; 0x04
    9dd4:	ed 5c       	subi	r30, 0xCD	; 205
    9dd6:	fd 4f       	sbci	r31, 0xFD	; 253
    9dd8:	80 81       	ld	r24, Z
    9dda:	91 81       	ldd	r25, Z+1	; 0x01
    9ddc:	85 35       	cpi	r24, 0x55	; 85
    9dde:	9a 4a       	sbci	r25, 0xAA	; 170
    9de0:	19 f5       	brne	.+70     	; 0x9e28 <mount_volume+0x46a>
    9de2:	c8 01       	movw	r24, r16
    9de4:	c5 96       	adiw	r24, 0x35	; 53
    9de6:	ae d9       	rcall	.-3236   	; 0x9144 <ld_dword>
    9de8:	62 35       	cpi	r22, 0x52	; 82
    9dea:	72 45       	sbci	r23, 0x52	; 82
    9dec:	81 46       	sbci	r24, 0x61	; 97
    9dee:	91 44       	sbci	r25, 0x41	; 65
    9df0:	d9 f4       	brne	.+54     	; 0x9e28 <mount_volume+0x46a>
    9df2:	c8 01       	movw	r24, r16
    9df4:	87 5e       	subi	r24, 0xE7	; 231
    9df6:	9d 4f       	sbci	r25, 0xFD	; 253
    9df8:	a5 d9       	rcall	.-3254   	; 0x9144 <ld_dword>
    9dfa:	62 37       	cpi	r22, 0x72	; 114
    9dfc:	72 47       	sbci	r23, 0x72	; 114
    9dfe:	81 44       	sbci	r24, 0x41	; 65
    9e00:	91 46       	sbci	r25, 0x61	; 97
    9e02:	91 f4       	brne	.+36     	; 0x9e28 <mount_volume+0x46a>
    9e04:	c8 01       	movw	r24, r16
    9e06:	83 5e       	subi	r24, 0xE3	; 227
    9e08:	9d 4f       	sbci	r25, 0xFD	; 253
    9e0a:	9c d9       	rcall	.-3272   	; 0x9144 <ld_dword>
    9e0c:	f8 01       	movw	r30, r16
    9e0e:	61 8b       	std	Z+17, r22	; 0x11
    9e10:	72 8b       	std	Z+18, r23	; 0x12
    9e12:	83 8b       	std	Z+19, r24	; 0x13
    9e14:	94 8b       	std	Z+20, r25	; 0x14
    9e16:	c8 01       	movw	r24, r16
    9e18:	8f 5d       	subi	r24, 0xDF	; 223
    9e1a:	9d 4f       	sbci	r25, 0xFD	; 253
    9e1c:	93 d9       	rcall	.-3290   	; 0x9144 <ld_dword>
    9e1e:	f8 01       	movw	r30, r16
    9e20:	65 87       	std	Z+13, r22	; 0x0d
    9e22:	76 87       	std	Z+14, r23	; 0x0e
    9e24:	87 87       	std	Z+15, r24	; 0x0f
    9e26:	90 8b       	std	Z+16, r25	; 0x10
    9e28:	d8 01       	movw	r26, r16
    9e2a:	ac 92       	st	X, r10
    9e2c:	80 91 1f 18 	lds	r24, 0x181F	; 0x80181f <Fsid>
    9e30:	90 91 20 18 	lds	r25, 0x1820	; 0x801820 <Fsid+0x1>
    9e34:	01 96       	adiw	r24, 0x01	; 1
    9e36:	90 93 20 18 	sts	0x1820, r25	; 0x801820 <Fsid+0x1>
    9e3a:	80 93 1f 18 	sts	0x181F, r24	; 0x80181f <Fsid>
    9e3e:	f8 01       	movw	r30, r16
    9e40:	96 83       	std	Z+6, r25	; 0x06
    9e42:	85 83       	std	Z+5, r24	; 0x05
    9e44:	15 8a       	std	Z+21, r1	; 0x15
    9e46:	16 8a       	std	Z+22, r1	; 0x16
    9e48:	17 8a       	std	Z+23, r1	; 0x17
    9e4a:	10 8e       	std	Z+24, r1	; 0x18
    9e4c:	06 c0       	rjmp	.+12     	; 0x9e5a <mount_volume+0x49c>
    9e4e:	8b e0       	ldi	r24, 0x0B	; 11
    9e50:	90 e0       	ldi	r25, 0x00	; 0
    9e52:	0b c0       	rjmp	.+22     	; 0x9e6a <mount_volume+0x4ac>
    9e54:	8c e0       	ldi	r24, 0x0C	; 12
    9e56:	90 e0       	ldi	r25, 0x00	; 0
    9e58:	08 c0       	rjmp	.+16     	; 0x9e6a <mount_volume+0x4ac>
    9e5a:	80 e0       	ldi	r24, 0x00	; 0
    9e5c:	90 e0       	ldi	r25, 0x00	; 0
    9e5e:	05 c0       	rjmp	.+10     	; 0x9e6a <mount_volume+0x4ac>
    9e60:	83 e0       	ldi	r24, 0x03	; 3
    9e62:	90 e0       	ldi	r25, 0x00	; 0
    9e64:	02 c0       	rjmp	.+4      	; 0x9e6a <mount_volume+0x4ac>
    9e66:	81 e0       	ldi	r24, 0x01	; 1
    9e68:	90 e0       	ldi	r25, 0x00	; 0
    9e6a:	a0 96       	adiw	r28, 0x20	; 32
    9e6c:	e0 e1       	ldi	r30, 0x10	; 16
    9e6e:	0c 94 c2 e8 	jmp	0x1d184	; 0x1d184 <__epilogue_restores__+0x4>

00009e72 <put_fat>:
    9e72:	a6 e0       	ldi	r26, 0x06	; 6
    9e74:	b0 e0       	ldi	r27, 0x00	; 0
    9e76:	ef e3       	ldi	r30, 0x3F	; 63
    9e78:	ff e4       	ldi	r31, 0x4F	; 79
    9e7a:	0c 94 a4 e8 	jmp	0x1d148	; 0x1d148 <__prologue_saves__>
    9e7e:	42 30       	cpi	r20, 0x02	; 2
    9e80:	51 05       	cpc	r21, r1
    9e82:	61 05       	cpc	r22, r1
    9e84:	71 05       	cpc	r23, r1
    9e86:	08 f4       	brcc	.+2      	; 0x9e8a <put_fat+0x18>
    9e88:	e5 c0       	rjmp	.+458    	; 0xa054 <put_fat+0x1e2>
    9e8a:	fc 01       	movw	r30, r24
    9e8c:	c1 8c       	ldd	r12, Z+25	; 0x19
    9e8e:	d2 8c       	ldd	r13, Z+26	; 0x1a
    9e90:	e3 8c       	ldd	r14, Z+27	; 0x1b
    9e92:	f4 8c       	ldd	r15, Z+28	; 0x1c
    9e94:	4c 15       	cp	r20, r12
    9e96:	5d 05       	cpc	r21, r13
    9e98:	6e 05       	cpc	r22, r14
    9e9a:	7f 05       	cpc	r23, r15
    9e9c:	08 f0       	brcs	.+2      	; 0x9ea0 <put_fat+0x2e>
    9e9e:	da c0       	rjmp	.+436    	; 0xa054 <put_fat+0x1e2>
    9ea0:	28 01       	movw	r4, r16
    9ea2:	39 01       	movw	r6, r18
    9ea4:	6a 01       	movw	r12, r20
    9ea6:	7b 01       	movw	r14, r22
    9ea8:	9e 83       	std	Y+6, r25	; 0x06
    9eaa:	8d 83       	std	Y+5, r24	; 0x05
    9eac:	80 81       	ld	r24, Z
    9eae:	82 30       	cpi	r24, 0x02	; 2
    9eb0:	09 f4       	brne	.+2      	; 0x9eb4 <put_fat+0x42>
    9eb2:	73 c0       	rjmp	.+230    	; 0x9f9a <put_fat+0x128>
    9eb4:	83 30       	cpi	r24, 0x03	; 3
    9eb6:	09 f4       	brne	.+2      	; 0x9eba <put_fat+0x48>
    9eb8:	92 c0       	rjmp	.+292    	; 0x9fde <put_fat+0x16c>
    9eba:	81 30       	cpi	r24, 0x01	; 1
    9ebc:	09 f0       	breq	.+2      	; 0x9ec0 <put_fat+0x4e>
    9ebe:	ca c0       	rjmp	.+404    	; 0xa054 <put_fat+0x1e2>
    9ec0:	4a 01       	movw	r8, r20
    9ec2:	96 94       	lsr	r9
    9ec4:	87 94       	ror	r8
    9ec6:	84 0e       	add	r8, r20
    9ec8:	95 1e       	adc	r9, r21
    9eca:	c4 01       	movw	r24, r8
    9ecc:	89 2f       	mov	r24, r25
    9ece:	99 27       	eor	r25, r25
    9ed0:	86 95       	lsr	r24
    9ed2:	45 a1       	ldd	r20, Z+37	; 0x25
    9ed4:	56 a1       	ldd	r21, Z+38	; 0x26
    9ed6:	67 a1       	ldd	r22, Z+39	; 0x27
    9ed8:	70 a5       	ldd	r23, Z+40	; 0x28
    9eda:	48 0f       	add	r20, r24
    9edc:	59 1f       	adc	r21, r25
    9ede:	61 1d       	adc	r22, r1
    9ee0:	71 1d       	adc	r23, r1
    9ee2:	cf 01       	movw	r24, r30
    9ee4:	f1 dc       	rcall	.-1566   	; 0x98c8 <move_window>
    9ee6:	5c 01       	movw	r10, r24
    9ee8:	89 2b       	or	r24, r25
    9eea:	09 f0       	breq	.+2      	; 0x9eee <put_fat+0x7c>
    9eec:	b6 c0       	rjmp	.+364    	; 0xa05a <put_fat+0x1e8>
    9eee:	2d 80       	ldd	r2, Y+5	; 0x05
    9ef0:	3e 80       	ldd	r3, Y+6	; 0x06
    9ef2:	f5 e3       	ldi	r31, 0x35	; 53
    9ef4:	2f 0e       	add	r2, r31
    9ef6:	31 1c       	adc	r3, r1
    9ef8:	84 01       	movw	r16, r8
    9efa:	0f 5f       	subi	r16, 0xFF	; 255
    9efc:	1f 4f       	sbci	r17, 0xFF	; 255
    9efe:	21 e0       	ldi	r18, 0x01	; 1
    9f00:	92 22       	and	r9, r18
    9f02:	f1 01       	movw	r30, r2
    9f04:	e8 0d       	add	r30, r8
    9f06:	f9 1d       	adc	r31, r9
    9f08:	d7 01       	movw	r26, r14
    9f0a:	c6 01       	movw	r24, r12
    9f0c:	81 70       	andi	r24, 0x01	; 1
    9f0e:	99 27       	eor	r25, r25
    9f10:	aa 27       	eor	r26, r26
    9f12:	bb 27       	eor	r27, r27
    9f14:	89 83       	std	Y+1, r24	; 0x01
    9f16:	9a 83       	std	Y+2, r25	; 0x02
    9f18:	ab 83       	std	Y+3, r26	; 0x03
    9f1a:	bc 83       	std	Y+4, r27	; 0x04
    9f1c:	c0 fe       	sbrs	r12, 0
    9f1e:	09 c0       	rjmp	.+18     	; 0x9f32 <put_fat+0xc0>
    9f20:	80 81       	ld	r24, Z
    9f22:	28 2f       	mov	r18, r24
    9f24:	2f 70       	andi	r18, 0x0F	; 15
    9f26:	a0 e1       	ldi	r26, 0x10	; 16
    9f28:	4a 9e       	mul	r4, r26
    9f2a:	c0 01       	movw	r24, r0
    9f2c:	11 24       	eor	r1, r1
    9f2e:	82 2b       	or	r24, r18
    9f30:	01 c0       	rjmp	.+2      	; 0x9f34 <put_fat+0xc2>
    9f32:	84 2d       	mov	r24, r4
    9f34:	80 83       	st	Z, r24
    9f36:	81 e0       	ldi	r24, 0x01	; 1
    9f38:	ed 81       	ldd	r30, Y+5	; 0x05
    9f3a:	fe 81       	ldd	r31, Y+6	; 0x06
    9f3c:	83 83       	std	Z+3, r24	; 0x03
    9f3e:	45 a1       	ldd	r20, Z+37	; 0x25
    9f40:	56 a1       	ldd	r21, Z+38	; 0x26
    9f42:	67 a1       	ldd	r22, Z+39	; 0x27
    9f44:	70 a5       	ldd	r23, Z+40	; 0x28
    9f46:	c8 01       	movw	r24, r16
    9f48:	89 2f       	mov	r24, r25
    9f4a:	99 27       	eor	r25, r25
    9f4c:	86 95       	lsr	r24
    9f4e:	48 0f       	add	r20, r24
    9f50:	59 1f       	adc	r21, r25
    9f52:	61 1d       	adc	r22, r1
    9f54:	71 1d       	adc	r23, r1
    9f56:	cf 01       	movw	r24, r30
    9f58:	b7 dc       	rcall	.-1682   	; 0x98c8 <move_window>
    9f5a:	5c 01       	movw	r10, r24
    9f5c:	89 2b       	or	r24, r25
    9f5e:	09 f0       	breq	.+2      	; 0x9f62 <put_fat+0xf0>
    9f60:	7c c0       	rjmp	.+248    	; 0xa05a <put_fat+0x1e8>
    9f62:	11 70       	andi	r17, 0x01	; 1
    9f64:	f1 01       	movw	r30, r2
    9f66:	e0 0f       	add	r30, r16
    9f68:	f1 1f       	adc	r31, r17
    9f6a:	89 81       	ldd	r24, Y+1	; 0x01
    9f6c:	9a 81       	ldd	r25, Y+2	; 0x02
    9f6e:	ab 81       	ldd	r26, Y+3	; 0x03
    9f70:	bc 81       	ldd	r27, Y+4	; 0x04
    9f72:	89 2b       	or	r24, r25
    9f74:	8a 2b       	or	r24, r26
    9f76:	8b 2b       	or	r24, r27
    9f78:	41 f0       	breq	.+16     	; 0x9f8a <put_fat+0x118>
    9f7a:	54 e0       	ldi	r21, 0x04	; 4
    9f7c:	76 94       	lsr	r7
    9f7e:	67 94       	ror	r6
    9f80:	57 94       	ror	r5
    9f82:	47 94       	ror	r4
    9f84:	5a 95       	dec	r21
    9f86:	d1 f7       	brne	.-12     	; 0x9f7c <put_fat+0x10a>
    9f88:	06 c0       	rjmp	.+12     	; 0x9f96 <put_fat+0x124>
    9f8a:	00 81       	ld	r16, Z
    9f8c:	00 7f       	andi	r16, 0xF0	; 240
    9f8e:	85 2d       	mov	r24, r5
    9f90:	8f 70       	andi	r24, 0x0F	; 15
    9f92:	40 2e       	mov	r4, r16
    9f94:	48 2a       	or	r4, r24
    9f96:	40 82       	st	Z, r4
    9f98:	58 c0       	rjmp	.+176    	; 0xa04a <put_fat+0x1d8>
    9f9a:	77 27       	eor	r23, r23
    9f9c:	6f 2d       	mov	r22, r15
    9f9e:	5e 2d       	mov	r21, r14
    9fa0:	4d 2d       	mov	r20, r13
    9fa2:	ed 81       	ldd	r30, Y+5	; 0x05
    9fa4:	fe 81       	ldd	r31, Y+6	; 0x06
    9fa6:	85 a1       	ldd	r24, Z+37	; 0x25
    9fa8:	96 a1       	ldd	r25, Z+38	; 0x26
    9faa:	a7 a1       	ldd	r26, Z+39	; 0x27
    9fac:	b0 a5       	ldd	r27, Z+40	; 0x28
    9fae:	48 0f       	add	r20, r24
    9fb0:	59 1f       	adc	r21, r25
    9fb2:	6a 1f       	adc	r22, r26
    9fb4:	7b 1f       	adc	r23, r27
    9fb6:	cf 01       	movw	r24, r30
    9fb8:	87 dc       	rcall	.-1778   	; 0x98c8 <move_window>
    9fba:	5c 01       	movw	r10, r24
    9fbc:	89 2b       	or	r24, r25
    9fbe:	09 f0       	breq	.+2      	; 0x9fc2 <put_fat+0x150>
    9fc0:	4c c0       	rjmp	.+152    	; 0xa05a <put_fat+0x1e8>
    9fc2:	ed 81       	ldd	r30, Y+5	; 0x05
    9fc4:	fe 81       	ldd	r31, Y+6	; 0x06
    9fc6:	f5 96       	adiw	r30, 0x35	; 53
    9fc8:	cc 0c       	add	r12, r12
    9fca:	dd 1c       	adc	r13, r13
    9fcc:	e8 94       	clt
    9fce:	c0 f8       	bld	r12, 0
    9fd0:	21 e0       	ldi	r18, 0x01	; 1
    9fd2:	d2 22       	and	r13, r18
    9fd4:	ec 0d       	add	r30, r12
    9fd6:	fd 1d       	adc	r31, r13
    9fd8:	40 82       	st	Z, r4
    9fda:	51 82       	std	Z+1, r5	; 0x01
    9fdc:	36 c0       	rjmp	.+108    	; 0xa04a <put_fat+0x1d8>
    9fde:	ed 81       	ldd	r30, Y+5	; 0x05
    9fe0:	fe 81       	ldd	r31, Y+6	; 0x06
    9fe2:	85 a1       	ldd	r24, Z+37	; 0x25
    9fe4:	96 a1       	ldd	r25, Z+38	; 0x26
    9fe6:	a7 a1       	ldd	r26, Z+39	; 0x27
    9fe8:	b0 a5       	ldd	r27, Z+40	; 0x28
    9fea:	27 e0       	ldi	r18, 0x07	; 7
    9fec:	76 95       	lsr	r23
    9fee:	67 95       	ror	r22
    9ff0:	57 95       	ror	r21
    9ff2:	47 95       	ror	r20
    9ff4:	2a 95       	dec	r18
    9ff6:	d1 f7       	brne	.-12     	; 0x9fec <put_fat+0x17a>
    9ff8:	48 0f       	add	r20, r24
    9ffa:	59 1f       	adc	r21, r25
    9ffc:	6a 1f       	adc	r22, r26
    9ffe:	7b 1f       	adc	r23, r27
    a000:	cf 01       	movw	r24, r30
    a002:	62 dc       	rcall	.-1852   	; 0x98c8 <move_window>
    a004:	5c 01       	movw	r10, r24
    a006:	89 2b       	or	r24, r25
    a008:	41 f5       	brne	.+80     	; 0xa05a <put_fat+0x1e8>
    a00a:	4d 81       	ldd	r20, Y+5	; 0x05
    a00c:	5e 81       	ldd	r21, Y+6	; 0x06
    a00e:	4b 5c       	subi	r20, 0xCB	; 203
    a010:	5f 4f       	sbci	r21, 0xFF	; 255
    a012:	cc 0c       	add	r12, r12
    a014:	dd 1c       	adc	r13, r13
    a016:	cc 0c       	add	r12, r12
    a018:	dd 1c       	adc	r13, r13
    a01a:	fc ef       	ldi	r31, 0xFC	; 252
    a01c:	cf 22       	and	r12, r31
    a01e:	f1 e0       	ldi	r31, 0x01	; 1
    a020:	df 22       	and	r13, r31
    a022:	c4 0e       	add	r12, r20
    a024:	d5 1e       	adc	r13, r21
    a026:	c6 01       	movw	r24, r12
    a028:	8d d8       	rcall	.-3814   	; 0x9144 <ld_dword>
    a02a:	2f e0       	ldi	r18, 0x0F	; 15
    a02c:	72 22       	and	r7, r18
    a02e:	dc 01       	movw	r26, r24
    a030:	cb 01       	movw	r24, r22
    a032:	88 27       	eor	r24, r24
    a034:	99 27       	eor	r25, r25
    a036:	aa 27       	eor	r26, r26
    a038:	b0 7f       	andi	r27, 0xF0	; 240
    a03a:	b3 01       	movw	r22, r6
    a03c:	a2 01       	movw	r20, r4
    a03e:	48 2b       	or	r20, r24
    a040:	59 2b       	or	r21, r25
    a042:	6a 2b       	or	r22, r26
    a044:	7b 2b       	or	r23, r27
    a046:	c6 01       	movw	r24, r12
    a048:	92 d8       	rcall	.-3804   	; 0x916e <st_dword>
    a04a:	81 e0       	ldi	r24, 0x01	; 1
    a04c:	ed 81       	ldd	r30, Y+5	; 0x05
    a04e:	fe 81       	ldd	r31, Y+6	; 0x06
    a050:	83 83       	std	Z+3, r24	; 0x03
    a052:	03 c0       	rjmp	.+6      	; 0xa05a <put_fat+0x1e8>
    a054:	82 e0       	ldi	r24, 0x02	; 2
    a056:	a8 2e       	mov	r10, r24
    a058:	b1 2c       	mov	r11, r1
    a05a:	c5 01       	movw	r24, r10
    a05c:	26 96       	adiw	r28, 0x06	; 6
    a05e:	e2 e1       	ldi	r30, 0x12	; 18
    a060:	0c 94 c0 e8 	jmp	0x1d180	; 0x1d180 <__epilogue_restores__>

0000a064 <get_fat.isra.9>:
    a064:	a0 e0       	ldi	r26, 0x00	; 0
    a066:	b0 e0       	ldi	r27, 0x00	; 0
    a068:	e8 e3       	ldi	r30, 0x38	; 56
    a06a:	f0 e5       	ldi	r31, 0x50	; 80
    a06c:	0c 94 ac e8 	jmp	0x1d158	; 0x1d158 <__prologue_saves__+0x10>
    a070:	42 30       	cpi	r20, 0x02	; 2
    a072:	51 05       	cpc	r21, r1
    a074:	61 05       	cpc	r22, r1
    a076:	71 05       	cpc	r23, r1
    a078:	08 f4       	brcc	.+2      	; 0xa07c <get_fat.isra.9+0x18>
    a07a:	9f c0       	rjmp	.+318    	; 0xa1ba <get_fat.isra.9+0x156>
    a07c:	fc 01       	movw	r30, r24
    a07e:	01 8d       	ldd	r16, Z+25	; 0x19
    a080:	12 8d       	ldd	r17, Z+26	; 0x1a
    a082:	23 8d       	ldd	r18, Z+27	; 0x1b
    a084:	34 8d       	ldd	r19, Z+28	; 0x1c
    a086:	40 17       	cp	r20, r16
    a088:	51 07       	cpc	r21, r17
    a08a:	62 07       	cpc	r22, r18
    a08c:	73 07       	cpc	r23, r19
    a08e:	08 f0       	brcs	.+2      	; 0xa092 <get_fat.isra.9+0x2e>
    a090:	94 c0       	rjmp	.+296    	; 0xa1ba <get_fat.isra.9+0x156>
    a092:	6a 01       	movw	r12, r20
    a094:	7b 01       	movw	r14, r22
    a096:	8c 01       	movw	r16, r24
    a098:	80 81       	ld	r24, Z
    a09a:	82 30       	cpi	r24, 0x02	; 2
    a09c:	09 f4       	brne	.+2      	; 0xa0a0 <get_fat.isra.9+0x3c>
    a09e:	4b c0       	rjmp	.+150    	; 0xa136 <get_fat.isra.9+0xd2>
    a0a0:	83 30       	cpi	r24, 0x03	; 3
    a0a2:	09 f4       	brne	.+2      	; 0xa0a6 <get_fat.isra.9+0x42>
    a0a4:	67 c0       	rjmp	.+206    	; 0xa174 <get_fat.isra.9+0x110>
    a0a6:	81 30       	cpi	r24, 0x01	; 1
    a0a8:	09 f0       	breq	.+2      	; 0xa0ac <get_fat.isra.9+0x48>
    a0aa:	87 c0       	rjmp	.+270    	; 0xa1ba <get_fat.isra.9+0x156>
    a0ac:	ea 01       	movw	r28, r20
    a0ae:	d6 95       	lsr	r29
    a0b0:	c7 95       	ror	r28
    a0b2:	cc 0d       	add	r28, r12
    a0b4:	dd 1d       	adc	r29, r13
    a0b6:	ce 01       	movw	r24, r28
    a0b8:	89 2f       	mov	r24, r25
    a0ba:	99 27       	eor	r25, r25
    a0bc:	86 95       	lsr	r24
    a0be:	45 a1       	ldd	r20, Z+37	; 0x25
    a0c0:	56 a1       	ldd	r21, Z+38	; 0x26
    a0c2:	67 a1       	ldd	r22, Z+39	; 0x27
    a0c4:	70 a5       	ldd	r23, Z+40	; 0x28
    a0c6:	48 0f       	add	r20, r24
    a0c8:	59 1f       	adc	r21, r25
    a0ca:	61 1d       	adc	r22, r1
    a0cc:	71 1d       	adc	r23, r1
    a0ce:	cf 01       	movw	r24, r30
    a0d0:	fb db       	rcall	.-2058   	; 0x98c8 <move_window>
    a0d2:	89 2b       	or	r24, r25
    a0d4:	21 f0       	breq	.+8      	; 0xa0de <get_fat.isra.9+0x7a>
    a0d6:	6f ef       	ldi	r22, 0xFF	; 255
    a0d8:	7f ef       	ldi	r23, 0xFF	; 255
    a0da:	cb 01       	movw	r24, r22
    a0dc:	72 c0       	rjmp	.+228    	; 0xa1c2 <get_fat.isra.9+0x15e>
    a0de:	5e 01       	movw	r10, r28
    a0e0:	ff ef       	ldi	r31, 0xFF	; 255
    a0e2:	af 1a       	sub	r10, r31
    a0e4:	bf 0a       	sbc	r11, r31
    a0e6:	d1 70       	andi	r29, 0x01	; 1
    a0e8:	c0 0f       	add	r28, r16
    a0ea:	d1 1f       	adc	r29, r17
    a0ec:	cd a9       	ldd	r28, Y+53	; 0x35
    a0ee:	c5 01       	movw	r24, r10
    a0f0:	89 2f       	mov	r24, r25
    a0f2:	99 27       	eor	r25, r25
    a0f4:	86 95       	lsr	r24
    a0f6:	f8 01       	movw	r30, r16
    a0f8:	45 a1       	ldd	r20, Z+37	; 0x25
    a0fa:	56 a1       	ldd	r21, Z+38	; 0x26
    a0fc:	67 a1       	ldd	r22, Z+39	; 0x27
    a0fe:	70 a5       	ldd	r23, Z+40	; 0x28
    a100:	48 0f       	add	r20, r24
    a102:	59 1f       	adc	r21, r25
    a104:	61 1d       	adc	r22, r1
    a106:	71 1d       	adc	r23, r1
    a108:	c8 01       	movw	r24, r16
    a10a:	de db       	rcall	.-2116   	; 0x98c8 <move_window>
    a10c:	89 2b       	or	r24, r25
    a10e:	19 f7       	brne	.-58     	; 0xa0d6 <get_fat.isra.9+0x72>
    a110:	f1 e0       	ldi	r31, 0x01	; 1
    a112:	bf 22       	and	r11, r31
    a114:	f8 01       	movw	r30, r16
    a116:	ea 0d       	add	r30, r10
    a118:	fb 1d       	adc	r31, r11
    a11a:	85 a9       	ldd	r24, Z+53	; 0x35
    a11c:	6c 2f       	mov	r22, r28
    a11e:	70 e0       	ldi	r23, 0x00	; 0
    a120:	78 2b       	or	r23, r24
    a122:	c0 fe       	sbrs	r12, 0
    a124:	06 c0       	rjmp	.+12     	; 0xa132 <get_fat.isra.9+0xce>
    a126:	54 e0       	ldi	r21, 0x04	; 4
    a128:	76 95       	lsr	r23
    a12a:	67 95       	ror	r22
    a12c:	5a 95       	dec	r21
    a12e:	e1 f7       	brne	.-8      	; 0xa128 <get_fat.isra.9+0xc4>
    a130:	1e c0       	rjmp	.+60     	; 0xa16e <get_fat.isra.9+0x10a>
    a132:	7f 70       	andi	r23, 0x0F	; 15
    a134:	1c c0       	rjmp	.+56     	; 0xa16e <get_fat.isra.9+0x10a>
    a136:	77 27       	eor	r23, r23
    a138:	6f 2d       	mov	r22, r15
    a13a:	5e 2d       	mov	r21, r14
    a13c:	4d 2d       	mov	r20, r13
    a13e:	85 a1       	ldd	r24, Z+37	; 0x25
    a140:	96 a1       	ldd	r25, Z+38	; 0x26
    a142:	a7 a1       	ldd	r26, Z+39	; 0x27
    a144:	b0 a5       	ldd	r27, Z+40	; 0x28
    a146:	48 0f       	add	r20, r24
    a148:	59 1f       	adc	r21, r25
    a14a:	6a 1f       	adc	r22, r26
    a14c:	7b 1f       	adc	r23, r27
    a14e:	cf 01       	movw	r24, r30
    a150:	bb db       	rcall	.-2186   	; 0x98c8 <move_window>
    a152:	89 2b       	or	r24, r25
    a154:	09 f0       	breq	.+2      	; 0xa158 <get_fat.isra.9+0xf4>
    a156:	bf cf       	rjmp	.-130    	; 0xa0d6 <get_fat.isra.9+0x72>
    a158:	cc 0c       	add	r12, r12
    a15a:	dd 1c       	adc	r13, r13
    a15c:	e8 94       	clt
    a15e:	c0 f8       	bld	r12, 0
    a160:	f1 e0       	ldi	r31, 0x01	; 1
    a162:	df 22       	and	r13, r31
    a164:	f8 01       	movw	r30, r16
    a166:	ec 0d       	add	r30, r12
    a168:	fd 1d       	adc	r31, r13
    a16a:	65 a9       	ldd	r22, Z+53	; 0x35
    a16c:	76 a9       	ldd	r23, Z+54	; 0x36
    a16e:	80 e0       	ldi	r24, 0x00	; 0
    a170:	90 e0       	ldi	r25, 0x00	; 0
    a172:	27 c0       	rjmp	.+78     	; 0xa1c2 <get_fat.isra.9+0x15e>
    a174:	85 a1       	ldd	r24, Z+37	; 0x25
    a176:	96 a1       	ldd	r25, Z+38	; 0x26
    a178:	a7 a1       	ldd	r26, Z+39	; 0x27
    a17a:	b0 a5       	ldd	r27, Z+40	; 0x28
    a17c:	27 e0       	ldi	r18, 0x07	; 7
    a17e:	76 95       	lsr	r23
    a180:	67 95       	ror	r22
    a182:	57 95       	ror	r21
    a184:	47 95       	ror	r20
    a186:	2a 95       	dec	r18
    a188:	d1 f7       	brne	.-12     	; 0xa17e <get_fat.isra.9+0x11a>
    a18a:	48 0f       	add	r20, r24
    a18c:	59 1f       	adc	r21, r25
    a18e:	6a 1f       	adc	r22, r26
    a190:	7b 1f       	adc	r23, r27
    a192:	cf 01       	movw	r24, r30
    a194:	99 db       	rcall	.-2254   	; 0x98c8 <move_window>
    a196:	89 2b       	or	r24, r25
    a198:	09 f0       	breq	.+2      	; 0xa19c <get_fat.isra.9+0x138>
    a19a:	9d cf       	rjmp	.-198    	; 0xa0d6 <get_fat.isra.9+0x72>
    a19c:	0b 5c       	subi	r16, 0xCB	; 203
    a19e:	1f 4f       	sbci	r17, 0xFF	; 255
    a1a0:	cc 0c       	add	r12, r12
    a1a2:	dd 1c       	adc	r13, r13
    a1a4:	cc 0c       	add	r12, r12
    a1a6:	dd 1c       	adc	r13, r13
    a1a8:	c6 01       	movw	r24, r12
    a1aa:	8c 7f       	andi	r24, 0xFC	; 252
    a1ac:	91 70       	andi	r25, 0x01	; 1
    a1ae:	80 0f       	add	r24, r16
    a1b0:	91 1f       	adc	r25, r17
    a1b2:	0e 94 a2 48 	call	0x9144	; 0x9144 <ld_dword>
    a1b6:	9f 70       	andi	r25, 0x0F	; 15
    a1b8:	04 c0       	rjmp	.+8      	; 0xa1c2 <get_fat.isra.9+0x15e>
    a1ba:	61 e0       	ldi	r22, 0x01	; 1
    a1bc:	70 e0       	ldi	r23, 0x00	; 0
    a1be:	80 e0       	ldi	r24, 0x00	; 0
    a1c0:	90 e0       	ldi	r25, 0x00	; 0
    a1c2:	cd b7       	in	r28, 0x3d	; 61
    a1c4:	de b7       	in	r29, 0x3e	; 62
    a1c6:	ea e0       	ldi	r30, 0x0A	; 10
    a1c8:	0c 94 c8 e8 	jmp	0x1d190	; 0x1d190 <__epilogue_restores__+0x10>

0000a1cc <dir_sdi>:
    a1cc:	a0 e0       	ldi	r26, 0x00	; 0
    a1ce:	b0 e0       	ldi	r27, 0x00	; 0
    a1d0:	ec ee       	ldi	r30, 0xEC	; 236
    a1d2:	f0 e5       	ldi	r31, 0x50	; 80
    a1d4:	0c 94 a6 e8 	jmp	0x1d14c	; 0x1d14c <__prologue_saves__+0x4>
    a1d8:	ec 01       	movw	r28, r24
    a1da:	6a 01       	movw	r12, r20
    a1dc:	7b 01       	movw	r14, r22
    a1de:	41 15       	cp	r20, r1
    a1e0:	51 05       	cpc	r21, r1
    a1e2:	80 e2       	ldi	r24, 0x20	; 32
    a1e4:	68 07       	cpc	r22, r24
    a1e6:	71 05       	cpc	r23, r1
    a1e8:	18 f0       	brcs	.+6      	; 0xa1f0 <dir_sdi+0x24>
    a1ea:	82 e0       	ldi	r24, 0x02	; 2
    a1ec:	90 e0       	ldi	r25, 0x00	; 0
    a1ee:	aa c0       	rjmp	.+340    	; 0xa344 <dir_sdi+0x178>
    a1f0:	db 01       	movw	r26, r22
    a1f2:	ca 01       	movw	r24, r20
    a1f4:	8f 71       	andi	r24, 0x1F	; 31
    a1f6:	99 27       	eor	r25, r25
    a1f8:	aa 27       	eor	r26, r26
    a1fa:	bb 27       	eor	r27, r27
    a1fc:	89 2b       	or	r24, r25
    a1fe:	8a 2b       	or	r24, r26
    a200:	8b 2b       	or	r24, r27
    a202:	99 f7       	brne	.-26     	; 0xa1ea <dir_sdi+0x1e>
    a204:	08 81       	ld	r16, Y
    a206:	19 81       	ldd	r17, Y+1	; 0x01
    a208:	4e 87       	std	Y+14, r20	; 0x0e
    a20a:	5f 87       	std	Y+15, r21	; 0x0f
    a20c:	68 8b       	std	Y+16, r22	; 0x10
    a20e:	79 8b       	std	Y+17, r23	; 0x11
    a210:	8e 80       	ldd	r8, Y+6	; 0x06
    a212:	9f 80       	ldd	r9, Y+7	; 0x07
    a214:	a8 84       	ldd	r10, Y+8	; 0x08
    a216:	b9 84       	ldd	r11, Y+9	; 0x09
    a218:	81 14       	cp	r8, r1
    a21a:	91 04       	cpc	r9, r1
    a21c:	a1 04       	cpc	r10, r1
    a21e:	b1 04       	cpc	r11, r1
    a220:	51 f5       	brne	.+84     	; 0xa276 <dir_sdi+0xaa>
    a222:	f8 01       	movw	r30, r16
    a224:	80 81       	ld	r24, Z
    a226:	83 30       	cpi	r24, 0x03	; 3
    a228:	40 f0       	brcs	.+16     	; 0xa23a <dir_sdi+0x6e>
    a22a:	81 a5       	ldd	r24, Z+41	; 0x29
    a22c:	92 a5       	ldd	r25, Z+42	; 0x2a
    a22e:	a3 a5       	ldd	r26, Z+43	; 0x2b
    a230:	b4 a5       	ldd	r27, Z+44	; 0x2c
    a232:	00 97       	sbiw	r24, 0x00	; 0
    a234:	a1 05       	cpc	r26, r1
    a236:	b1 05       	cpc	r27, r1
    a238:	e1 f4       	brne	.+56     	; 0xa272 <dir_sdi+0xa6>
    a23a:	f8 01       	movw	r30, r16
    a23c:	87 81       	ldd	r24, Z+7	; 0x07
    a23e:	90 85       	ldd	r25, Z+8	; 0x08
    a240:	a0 e0       	ldi	r26, 0x00	; 0
    a242:	b0 e0       	ldi	r27, 0x00	; 0
    a244:	b7 01       	movw	r22, r14
    a246:	a6 01       	movw	r20, r12
    a248:	25 e0       	ldi	r18, 0x05	; 5
    a24a:	76 95       	lsr	r23
    a24c:	67 95       	ror	r22
    a24e:	57 95       	ror	r21
    a250:	47 95       	ror	r20
    a252:	2a 95       	dec	r18
    a254:	d1 f7       	brne	.-12     	; 0xa24a <dir_sdi+0x7e>
    a256:	48 17       	cp	r20, r24
    a258:	59 07       	cpc	r21, r25
    a25a:	6a 07       	cpc	r22, r26
    a25c:	7b 07       	cpc	r23, r27
    a25e:	28 f6       	brcc	.-118    	; 0xa1ea <dir_sdi+0x1e>
    a260:	81 a5       	ldd	r24, Z+41	; 0x29
    a262:	92 a5       	ldd	r25, Z+42	; 0x2a
    a264:	a3 a5       	ldd	r26, Z+43	; 0x2b
    a266:	b4 a5       	ldd	r27, Z+44	; 0x2c
    a268:	8e 8b       	std	Y+22, r24	; 0x16
    a26a:	9f 8b       	std	Y+23, r25	; 0x17
    a26c:	a8 8f       	std	Y+24, r26	; 0x18
    a26e:	b9 8f       	std	Y+25, r27	; 0x19
    a270:	3e c0       	rjmp	.+124    	; 0xa2ee <dir_sdi+0x122>
    a272:	4c 01       	movw	r8, r24
    a274:	5d 01       	movw	r10, r26
    a276:	f8 01       	movw	r30, r16
    a278:	41 84       	ldd	r4, Z+9	; 0x09
    a27a:	52 84       	ldd	r5, Z+10	; 0x0a
    a27c:	61 2c       	mov	r6, r1
    a27e:	71 2c       	mov	r7, r1
    a280:	39 e0       	ldi	r19, 0x09	; 9
    a282:	44 0c       	add	r4, r4
    a284:	55 1c       	adc	r5, r5
    a286:	66 1c       	adc	r6, r6
    a288:	77 1c       	adc	r7, r7
    a28a:	3a 95       	dec	r19
    a28c:	d1 f7       	brne	.-12     	; 0xa282 <dir_sdi+0xb6>
    a28e:	b5 01       	movw	r22, r10
    a290:	a4 01       	movw	r20, r8
    a292:	c4 14       	cp	r12, r4
    a294:	d5 04       	cpc	r13, r5
    a296:	e6 04       	cpc	r14, r6
    a298:	f7 04       	cpc	r15, r7
    a29a:	10 f1       	brcs	.+68     	; 0xa2e0 <dir_sdi+0x114>
    a29c:	88 81       	ld	r24, Y
    a29e:	99 81       	ldd	r25, Y+1	; 0x01
    a2a0:	e1 de       	rcall	.-574    	; 0xa064 <get_fat.isra.9>
    a2a2:	4b 01       	movw	r8, r22
    a2a4:	5c 01       	movw	r10, r24
    a2a6:	6f 3f       	cpi	r22, 0xFF	; 255
    a2a8:	7f 4f       	sbci	r23, 0xFF	; 255
    a2aa:	8f 4f       	sbci	r24, 0xFF	; 255
    a2ac:	9f 4f       	sbci	r25, 0xFF	; 255
    a2ae:	09 f4       	brne	.+2      	; 0xa2b2 <dir_sdi+0xe6>
    a2b0:	47 c0       	rjmp	.+142    	; 0xa340 <dir_sdi+0x174>
    a2b2:	82 e0       	ldi	r24, 0x02	; 2
    a2b4:	88 16       	cp	r8, r24
    a2b6:	91 04       	cpc	r9, r1
    a2b8:	a1 04       	cpc	r10, r1
    a2ba:	b1 04       	cpc	r11, r1
    a2bc:	08 f4       	brcc	.+2      	; 0xa2c0 <dir_sdi+0xf4>
    a2be:	95 cf       	rjmp	.-214    	; 0xa1ea <dir_sdi+0x1e>
    a2c0:	f8 01       	movw	r30, r16
    a2c2:	81 8d       	ldd	r24, Z+25	; 0x19
    a2c4:	92 8d       	ldd	r25, Z+26	; 0x1a
    a2c6:	a3 8d       	ldd	r26, Z+27	; 0x1b
    a2c8:	b4 8d       	ldd	r27, Z+28	; 0x1c
    a2ca:	88 16       	cp	r8, r24
    a2cc:	99 06       	cpc	r9, r25
    a2ce:	aa 06       	cpc	r10, r26
    a2d0:	bb 06       	cpc	r11, r27
    a2d2:	08 f0       	brcs	.+2      	; 0xa2d6 <dir_sdi+0x10a>
    a2d4:	8a cf       	rjmp	.-236    	; 0xa1ea <dir_sdi+0x1e>
    a2d6:	c4 18       	sub	r12, r4
    a2d8:	d5 08       	sbc	r13, r5
    a2da:	e6 08       	sbc	r14, r6
    a2dc:	f7 08       	sbc	r15, r7
    a2de:	d7 cf       	rjmp	.-82     	; 0xa28e <dir_sdi+0xc2>
    a2e0:	c8 01       	movw	r24, r16
    a2e2:	0e 94 d5 48 	call	0x91aa	; 0x91aa <clst2sect>
    a2e6:	6e 8b       	std	Y+22, r22	; 0x16
    a2e8:	7f 8b       	std	Y+23, r23	; 0x17
    a2ea:	88 8f       	std	Y+24, r24	; 0x18
    a2ec:	99 8f       	std	Y+25, r25	; 0x19
    a2ee:	8a 8a       	std	Y+18, r8	; 0x12
    a2f0:	9b 8a       	std	Y+19, r9	; 0x13
    a2f2:	ac 8a       	std	Y+20, r10	; 0x14
    a2f4:	bd 8a       	std	Y+21, r11	; 0x15
    a2f6:	8e 89       	ldd	r24, Y+22	; 0x16
    a2f8:	9f 89       	ldd	r25, Y+23	; 0x17
    a2fa:	a8 8d       	ldd	r26, Y+24	; 0x18
    a2fc:	b9 8d       	ldd	r27, Y+25	; 0x19
    a2fe:	00 97       	sbiw	r24, 0x00	; 0
    a300:	a1 05       	cpc	r26, r1
    a302:	b1 05       	cpc	r27, r1
    a304:	09 f4       	brne	.+2      	; 0xa308 <dir_sdi+0x13c>
    a306:	71 cf       	rjmp	.-286    	; 0xa1ea <dir_sdi+0x1e>
    a308:	b7 01       	movw	r22, r14
    a30a:	a6 01       	movw	r20, r12
    a30c:	29 e0       	ldi	r18, 0x09	; 9
    a30e:	76 95       	lsr	r23
    a310:	67 95       	ror	r22
    a312:	57 95       	ror	r21
    a314:	47 95       	ror	r20
    a316:	2a 95       	dec	r18
    a318:	d1 f7       	brne	.-12     	; 0xa30e <dir_sdi+0x142>
    a31a:	84 0f       	add	r24, r20
    a31c:	95 1f       	adc	r25, r21
    a31e:	a6 1f       	adc	r26, r22
    a320:	b7 1f       	adc	r27, r23
    a322:	8e 8b       	std	Y+22, r24	; 0x16
    a324:	9f 8b       	std	Y+23, r25	; 0x17
    a326:	a8 8f       	std	Y+24, r26	; 0x18
    a328:	b9 8f       	std	Y+25, r27	; 0x19
    a32a:	0b 5c       	subi	r16, 0xCB	; 203
    a32c:	1f 4f       	sbci	r17, 0xFF	; 255
    a32e:	f1 e0       	ldi	r31, 0x01	; 1
    a330:	df 22       	and	r13, r31
    a332:	c0 0e       	add	r12, r16
    a334:	d1 1e       	adc	r13, r17
    a336:	db 8e       	std	Y+27, r13	; 0x1b
    a338:	ca 8e       	std	Y+26, r12	; 0x1a
    a33a:	80 e0       	ldi	r24, 0x00	; 0
    a33c:	90 e0       	ldi	r25, 0x00	; 0
    a33e:	02 c0       	rjmp	.+4      	; 0xa344 <dir_sdi+0x178>
    a340:	81 e0       	ldi	r24, 0x01	; 1
    a342:	90 e0       	ldi	r25, 0x00	; 0
    a344:	cd b7       	in	r28, 0x3d	; 61
    a346:	de b7       	in	r29, 0x3e	; 62
    a348:	e0 e1       	ldi	r30, 0x10	; 16
    a34a:	0c 94 c2 e8 	jmp	0x1d184	; 0x1d184 <__epilogue_restores__+0x4>

0000a34e <create_chain>:
    a34e:	a0 e0       	ldi	r26, 0x00	; 0
    a350:	b0 e0       	ldi	r27, 0x00	; 0
    a352:	ed ea       	ldi	r30, 0xAD	; 173
    a354:	f1 e5       	ldi	r31, 0x51	; 81
    a356:	0c 94 a6 e8 	jmp	0x1d14c	; 0x1d14c <__prologue_saves__+0x4>
    a35a:	8c 01       	movw	r16, r24
    a35c:	2a 01       	movw	r4, r20
    a35e:	3b 01       	movw	r6, r22
    a360:	fc 01       	movw	r30, r24
    a362:	c0 81       	ld	r28, Z
    a364:	d1 81       	ldd	r29, Z+1	; 0x01
    a366:	41 15       	cp	r20, r1
    a368:	51 05       	cpc	r21, r1
    a36a:	61 05       	cpc	r22, r1
    a36c:	71 05       	cpc	r23, r1
    a36e:	99 f4       	brne	.+38     	; 0xa396 <create_chain+0x48>
    a370:	8d 84       	ldd	r8, Y+13	; 0x0d
    a372:	9e 84       	ldd	r9, Y+14	; 0x0e
    a374:	af 84       	ldd	r10, Y+15	; 0x0f
    a376:	b8 88       	ldd	r11, Y+16	; 0x10
    a378:	81 14       	cp	r8, r1
    a37a:	91 04       	cpc	r9, r1
    a37c:	a1 04       	cpc	r10, r1
    a37e:	b1 04       	cpc	r11, r1
    a380:	51 f1       	breq	.+84     	; 0xa3d6 <create_chain+0x88>
    a382:	89 8d       	ldd	r24, Y+25	; 0x19
    a384:	9a 8d       	ldd	r25, Y+26	; 0x1a
    a386:	ab 8d       	ldd	r26, Y+27	; 0x1b
    a388:	bc 8d       	ldd	r27, Y+28	; 0x1c
    a38a:	88 16       	cp	r8, r24
    a38c:	99 06       	cpc	r9, r25
    a38e:	aa 06       	cpc	r10, r26
    a390:	bb 06       	cpc	r11, r27
    a392:	28 f1       	brcs	.+74     	; 0xa3de <create_chain+0x90>
    a394:	20 c0       	rjmp	.+64     	; 0xa3d6 <create_chain+0x88>
    a396:	ce 01       	movw	r24, r28
    a398:	65 de       	rcall	.-822    	; 0xa064 <get_fat.isra.9>
    a39a:	62 30       	cpi	r22, 0x02	; 2
    a39c:	71 05       	cpc	r23, r1
    a39e:	81 05       	cpc	r24, r1
    a3a0:	91 05       	cpc	r25, r1
    a3a2:	08 f4       	brcc	.+2      	; 0xa3a6 <create_chain+0x58>
    a3a4:	ea c0       	rjmp	.+468    	; 0xa57a <create_chain+0x22c>
    a3a6:	6f 3f       	cpi	r22, 0xFF	; 255
    a3a8:	ff ef       	ldi	r31, 0xFF	; 255
    a3aa:	7f 07       	cpc	r23, r31
    a3ac:	8f 07       	cpc	r24, r31
    a3ae:	9f 07       	cpc	r25, r31
    a3b0:	29 f4       	brne	.+10     	; 0xa3bc <create_chain+0x6e>
    a3b2:	4f ef       	ldi	r20, 0xFF	; 255
    a3b4:	3f ef       	ldi	r19, 0xFF	; 255
    a3b6:	2f ef       	ldi	r18, 0xFF	; 255
    a3b8:	9f ef       	ldi	r25, 0xFF	; 255
    a3ba:	e7 c0       	rjmp	.+462    	; 0xa58a <create_chain+0x23c>
    a3bc:	c9 8c       	ldd	r12, Y+25	; 0x19
    a3be:	da 8c       	ldd	r13, Y+26	; 0x1a
    a3c0:	eb 8c       	ldd	r14, Y+27	; 0x1b
    a3c2:	fc 8c       	ldd	r15, Y+28	; 0x1c
    a3c4:	6c 15       	cp	r22, r12
    a3c6:	7d 05       	cpc	r23, r13
    a3c8:	8e 05       	cpc	r24, r14
    a3ca:	9f 05       	cpc	r25, r15
    a3cc:	08 f4       	brcc	.+2      	; 0xa3d0 <create_chain+0x82>
    a3ce:	da c0       	rjmp	.+436    	; 0xa584 <create_chain+0x236>
    a3d0:	53 01       	movw	r10, r6
    a3d2:	42 01       	movw	r8, r4
    a3d4:	04 c0       	rjmp	.+8      	; 0xa3de <create_chain+0x90>
    a3d6:	81 2c       	mov	r8, r1
    a3d8:	91 2c       	mov	r9, r1
    a3da:	54 01       	movw	r10, r8
    a3dc:	83 94       	inc	r8
    a3de:	89 89       	ldd	r24, Y+17	; 0x11
    a3e0:	9a 89       	ldd	r25, Y+18	; 0x12
    a3e2:	ab 89       	ldd	r26, Y+19	; 0x13
    a3e4:	bc 89       	ldd	r27, Y+20	; 0x14
    a3e6:	89 2b       	or	r24, r25
    a3e8:	8a 2b       	or	r24, r26
    a3ea:	8b 2b       	or	r24, r27
    a3ec:	11 f4       	brne	.+4      	; 0xa3f2 <create_chain+0xa4>
    a3ee:	40 e0       	ldi	r20, 0x00	; 0
    a3f0:	c5 c0       	rjmp	.+394    	; 0xa57c <create_chain+0x22e>
    a3f2:	84 14       	cp	r8, r4
    a3f4:	95 04       	cpc	r9, r5
    a3f6:	a6 04       	cpc	r10, r6
    a3f8:	b7 04       	cpc	r11, r7
    a3fa:	09 f0       	breq	.+2      	; 0xa3fe <create_chain+0xb0>
    a3fc:	46 c0       	rjmp	.+140    	; 0xa48a <create_chain+0x13c>
    a3fe:	75 01       	movw	r14, r10
    a400:	64 01       	movw	r12, r8
    a402:	2f ef       	ldi	r18, 0xFF	; 255
    a404:	c2 1a       	sub	r12, r18
    a406:	d2 0a       	sbc	r13, r18
    a408:	e2 0a       	sbc	r14, r18
    a40a:	f2 0a       	sbc	r15, r18
    a40c:	89 8d       	ldd	r24, Y+25	; 0x19
    a40e:	9a 8d       	ldd	r25, Y+26	; 0x1a
    a410:	ab 8d       	ldd	r26, Y+27	; 0x1b
    a412:	bc 8d       	ldd	r27, Y+28	; 0x1c
    a414:	c8 16       	cp	r12, r24
    a416:	d9 06       	cpc	r13, r25
    a418:	ea 06       	cpc	r14, r26
    a41a:	fb 06       	cpc	r15, r27
    a41c:	28 f0       	brcs	.+10     	; 0xa428 <create_chain+0xda>
    a41e:	92 e0       	ldi	r25, 0x02	; 2
    a420:	c9 2e       	mov	r12, r25
    a422:	d1 2c       	mov	r13, r1
    a424:	e1 2c       	mov	r14, r1
    a426:	f1 2c       	mov	r15, r1
    a428:	b7 01       	movw	r22, r14
    a42a:	a6 01       	movw	r20, r12
    a42c:	f8 01       	movw	r30, r16
    a42e:	80 81       	ld	r24, Z
    a430:	91 81       	ldd	r25, Z+1	; 0x01
    a432:	18 de       	rcall	.-976    	; 0xa064 <get_fat.isra.9>
    a434:	61 30       	cpi	r22, 0x01	; 1
    a436:	71 05       	cpc	r23, r1
    a438:	81 05       	cpc	r24, r1
    a43a:	91 05       	cpc	r25, r1
    a43c:	09 f4       	brne	.+2      	; 0xa440 <create_chain+0xf2>
    a43e:	9d c0       	rjmp	.+314    	; 0xa57a <create_chain+0x22c>
    a440:	6f 3f       	cpi	r22, 0xFF	; 255
    a442:	ff ef       	ldi	r31, 0xFF	; 255
    a444:	7f 07       	cpc	r23, r31
    a446:	8f 07       	cpc	r24, r31
    a448:	9f 07       	cpc	r25, r31
    a44a:	09 f4       	brne	.+2      	; 0xa44e <create_chain+0x100>
    a44c:	b2 cf       	rjmp	.-156    	; 0xa3b2 <create_chain+0x64>
    a44e:	67 2b       	or	r22, r23
    a450:	68 2b       	or	r22, r24
    a452:	69 2b       	or	r22, r25
    a454:	a9 f0       	breq	.+42     	; 0xa480 <create_chain+0x132>
    a456:	8d 85       	ldd	r24, Y+13	; 0x0d
    a458:	9e 85       	ldd	r25, Y+14	; 0x0e
    a45a:	af 85       	ldd	r26, Y+15	; 0x0f
    a45c:	b8 89       	ldd	r27, Y+16	; 0x10
    a45e:	82 30       	cpi	r24, 0x02	; 2
    a460:	91 05       	cpc	r25, r1
    a462:	a1 05       	cpc	r26, r1
    a464:	b1 05       	cpc	r27, r1
    a466:	88 f0       	brcs	.+34     	; 0xa48a <create_chain+0x13c>
    a468:	49 8d       	ldd	r20, Y+25	; 0x19
    a46a:	5a 8d       	ldd	r21, Y+26	; 0x1a
    a46c:	6b 8d       	ldd	r22, Y+27	; 0x1b
    a46e:	7c 8d       	ldd	r23, Y+28	; 0x1c
    a470:	84 17       	cp	r24, r20
    a472:	95 07       	cpc	r25, r21
    a474:	a6 07       	cpc	r26, r22
    a476:	b7 07       	cpc	r27, r23
    a478:	40 f4       	brcc	.+16     	; 0xa48a <create_chain+0x13c>
    a47a:	4c 01       	movw	r8, r24
    a47c:	5d 01       	movw	r10, r26
    a47e:	05 c0       	rjmp	.+10     	; 0xa48a <create_chain+0x13c>
    a480:	c1 14       	cp	r12, r1
    a482:	d1 04       	cpc	r13, r1
    a484:	e1 04       	cpc	r14, r1
    a486:	f1 04       	cpc	r15, r1
    a488:	c9 f5       	brne	.+114    	; 0xa4fc <create_chain+0x1ae>
    a48a:	75 01       	movw	r14, r10
    a48c:	64 01       	movw	r12, r8
    a48e:	2f ef       	ldi	r18, 0xFF	; 255
    a490:	c2 1a       	sub	r12, r18
    a492:	d2 0a       	sbc	r13, r18
    a494:	e2 0a       	sbc	r14, r18
    a496:	f2 0a       	sbc	r15, r18
    a498:	89 8d       	ldd	r24, Y+25	; 0x19
    a49a:	9a 8d       	ldd	r25, Y+26	; 0x1a
    a49c:	ab 8d       	ldd	r26, Y+27	; 0x1b
    a49e:	bc 8d       	ldd	r27, Y+28	; 0x1c
    a4a0:	c8 16       	cp	r12, r24
    a4a2:	d9 06       	cpc	r13, r25
    a4a4:	ea 06       	cpc	r14, r26
    a4a6:	fb 06       	cpc	r15, r27
    a4a8:	60 f0       	brcs	.+24     	; 0xa4c2 <create_chain+0x174>
    a4aa:	82 e0       	ldi	r24, 0x02	; 2
    a4ac:	88 16       	cp	r8, r24
    a4ae:	91 04       	cpc	r9, r1
    a4b0:	a1 04       	cpc	r10, r1
    a4b2:	b1 04       	cpc	r11, r1
    a4b4:	08 f4       	brcc	.+2      	; 0xa4b8 <create_chain+0x16a>
    a4b6:	9b cf       	rjmp	.-202    	; 0xa3ee <create_chain+0xa0>
    a4b8:	82 e0       	ldi	r24, 0x02	; 2
    a4ba:	c8 2e       	mov	r12, r24
    a4bc:	d1 2c       	mov	r13, r1
    a4be:	e1 2c       	mov	r14, r1
    a4c0:	f1 2c       	mov	r15, r1
    a4c2:	b7 01       	movw	r22, r14
    a4c4:	a6 01       	movw	r20, r12
    a4c6:	f8 01       	movw	r30, r16
    a4c8:	80 81       	ld	r24, Z
    a4ca:	91 81       	ldd	r25, Z+1	; 0x01
    a4cc:	cb dd       	rcall	.-1130   	; 0xa064 <get_fat.isra.9>
    a4ce:	61 15       	cp	r22, r1
    a4d0:	71 05       	cpc	r23, r1
    a4d2:	81 05       	cpc	r24, r1
    a4d4:	91 05       	cpc	r25, r1
    a4d6:	91 f0       	breq	.+36     	; 0xa4fc <create_chain+0x1ae>
    a4d8:	61 30       	cpi	r22, 0x01	; 1
    a4da:	71 05       	cpc	r23, r1
    a4dc:	81 05       	cpc	r24, r1
    a4de:	91 05       	cpc	r25, r1
    a4e0:	09 f4       	brne	.+2      	; 0xa4e4 <create_chain+0x196>
    a4e2:	4b c0       	rjmp	.+150    	; 0xa57a <create_chain+0x22c>
    a4e4:	6f 3f       	cpi	r22, 0xFF	; 255
    a4e6:	7f 4f       	sbci	r23, 0xFF	; 255
    a4e8:	8f 4f       	sbci	r24, 0xFF	; 255
    a4ea:	9f 4f       	sbci	r25, 0xFF	; 255
    a4ec:	09 f4       	brne	.+2      	; 0xa4f0 <create_chain+0x1a2>
    a4ee:	61 cf       	rjmp	.-318    	; 0xa3b2 <create_chain+0x64>
    a4f0:	c8 14       	cp	r12, r8
    a4f2:	d9 04       	cpc	r13, r9
    a4f4:	ea 04       	cpc	r14, r10
    a4f6:	fb 04       	cpc	r15, r11
    a4f8:	51 f6       	brne	.-108    	; 0xa48e <create_chain+0x140>
    a4fa:	79 cf       	rjmp	.-270    	; 0xa3ee <create_chain+0xa0>
    a4fc:	0f ef       	ldi	r16, 0xFF	; 255
    a4fe:	1f ef       	ldi	r17, 0xFF	; 255
    a500:	98 01       	movw	r18, r16
    a502:	b7 01       	movw	r22, r14
    a504:	a6 01       	movw	r20, r12
    a506:	ce 01       	movw	r24, r28
    a508:	b4 dc       	rcall	.-1688   	; 0x9e72 <put_fat>
    a50a:	00 97       	sbiw	r24, 0x00	; 0
    a50c:	99 f5       	brne	.+102    	; 0xa574 <create_chain+0x226>
    a50e:	41 14       	cp	r4, r1
    a510:	51 04       	cpc	r5, r1
    a512:	61 04       	cpc	r6, r1
    a514:	71 04       	cpc	r7, r1
    a516:	e9 f4       	brne	.+58     	; 0xa552 <create_chain+0x204>
    a518:	cd 86       	std	Y+13, r12	; 0x0d
    a51a:	de 86       	std	Y+14, r13	; 0x0e
    a51c:	ef 86       	std	Y+15, r14	; 0x0f
    a51e:	f8 8a       	std	Y+16, r15	; 0x10
    a520:	89 89       	ldd	r24, Y+17	; 0x11
    a522:	9a 89       	ldd	r25, Y+18	; 0x12
    a524:	ab 89       	ldd	r26, Y+19	; 0x13
    a526:	bc 89       	ldd	r27, Y+20	; 0x14
    a528:	49 8d       	ldd	r20, Y+25	; 0x19
    a52a:	5a 8d       	ldd	r21, Y+26	; 0x1a
    a52c:	6b 8d       	ldd	r22, Y+27	; 0x1b
    a52e:	7c 8d       	ldd	r23, Y+28	; 0x1c
    a530:	42 50       	subi	r20, 0x02	; 2
    a532:	51 09       	sbc	r21, r1
    a534:	61 09       	sbc	r22, r1
    a536:	71 09       	sbc	r23, r1
    a538:	48 17       	cp	r20, r24
    a53a:	59 07       	cpc	r21, r25
    a53c:	6a 07       	cpc	r22, r26
    a53e:	7b 07       	cpc	r23, r27
    a540:	88 f0       	brcs	.+34     	; 0xa564 <create_chain+0x216>
    a542:	01 97       	sbiw	r24, 0x01	; 1
    a544:	a1 09       	sbc	r26, r1
    a546:	b1 09       	sbc	r27, r1
    a548:	89 8b       	std	Y+17, r24	; 0x11
    a54a:	9a 8b       	std	Y+18, r25	; 0x12
    a54c:	ab 8b       	std	Y+19, r26	; 0x13
    a54e:	bc 8b       	std	Y+20, r27	; 0x14
    a550:	09 c0       	rjmp	.+18     	; 0xa564 <create_chain+0x216>
    a552:	97 01       	movw	r18, r14
    a554:	86 01       	movw	r16, r12
    a556:	b3 01       	movw	r22, r6
    a558:	a2 01       	movw	r20, r4
    a55a:	ce 01       	movw	r24, r28
    a55c:	8a dc       	rcall	.-1772   	; 0x9e72 <put_fat>
    a55e:	00 97       	sbiw	r24, 0x00	; 0
    a560:	d9 f2       	breq	.-74     	; 0xa518 <create_chain+0x1ca>
    a562:	08 c0       	rjmp	.+16     	; 0xa574 <create_chain+0x226>
    a564:	8c 81       	ldd	r24, Y+4	; 0x04
    a566:	81 60       	ori	r24, 0x01	; 1
    a568:	8c 83       	std	Y+4, r24	; 0x04
    a56a:	4c 2d       	mov	r20, r12
    a56c:	3d 2d       	mov	r19, r13
    a56e:	2e 2d       	mov	r18, r14
    a570:	9f 2d       	mov	r25, r15
    a572:	0b c0       	rjmp	.+22     	; 0xa58a <create_chain+0x23c>
    a574:	01 97       	sbiw	r24, 0x01	; 1
    a576:	09 f4       	brne	.+2      	; 0xa57a <create_chain+0x22c>
    a578:	1c cf       	rjmp	.-456    	; 0xa3b2 <create_chain+0x64>
    a57a:	41 e0       	ldi	r20, 0x01	; 1
    a57c:	30 e0       	ldi	r19, 0x00	; 0
    a57e:	20 e0       	ldi	r18, 0x00	; 0
    a580:	90 e0       	ldi	r25, 0x00	; 0
    a582:	03 c0       	rjmp	.+6      	; 0xa58a <create_chain+0x23c>
    a584:	46 2f       	mov	r20, r22
    a586:	37 2f       	mov	r19, r23
    a588:	28 2f       	mov	r18, r24
    a58a:	64 2f       	mov	r22, r20
    a58c:	73 2f       	mov	r23, r19
    a58e:	82 2f       	mov	r24, r18
    a590:	cd b7       	in	r28, 0x3d	; 61
    a592:	de b7       	in	r29, 0x3e	; 62
    a594:	e0 e1       	ldi	r30, 0x10	; 16
    a596:	0c 94 c2 e8 	jmp	0x1d184	; 0x1d184 <__epilogue_restores__+0x4>

0000a59a <remove_chain>:
    a59a:	4f 92       	push	r4
    a59c:	5f 92       	push	r5
    a59e:	6f 92       	push	r6
    a5a0:	7f 92       	push	r7
    a5a2:	af 92       	push	r10
    a5a4:	bf 92       	push	r11
    a5a6:	cf 92       	push	r12
    a5a8:	df 92       	push	r13
    a5aa:	ef 92       	push	r14
    a5ac:	ff 92       	push	r15
    a5ae:	0f 93       	push	r16
    a5b0:	1f 93       	push	r17
    a5b2:	cf 93       	push	r28
    a5b4:	df 93       	push	r29
    a5b6:	5c 01       	movw	r10, r24
    a5b8:	6a 01       	movw	r12, r20
    a5ba:	7b 01       	movw	r14, r22
    a5bc:	b9 01       	movw	r22, r18
    a5be:	a8 01       	movw	r20, r16
    a5c0:	22 e0       	ldi	r18, 0x02	; 2
    a5c2:	c2 16       	cp	r12, r18
    a5c4:	d1 04       	cpc	r13, r1
    a5c6:	e1 04       	cpc	r14, r1
    a5c8:	f1 04       	cpc	r15, r1
    a5ca:	10 f4       	brcc	.+4      	; 0xa5d0 <remove_chain+0x36>
    a5cc:	22 e0       	ldi	r18, 0x02	; 2
    a5ce:	27 c0       	rjmp	.+78     	; 0xa61e <remove_chain+0x84>
    a5d0:	fc 01       	movw	r30, r24
    a5d2:	c0 81       	ld	r28, Z
    a5d4:	d1 81       	ldd	r29, Z+1	; 0x01
    a5d6:	89 8d       	ldd	r24, Y+25	; 0x19
    a5d8:	9a 8d       	ldd	r25, Y+26	; 0x1a
    a5da:	ab 8d       	ldd	r26, Y+27	; 0x1b
    a5dc:	bc 8d       	ldd	r27, Y+28	; 0x1c
    a5de:	c8 16       	cp	r12, r24
    a5e0:	d9 06       	cpc	r13, r25
    a5e2:	ea 06       	cpc	r14, r26
    a5e4:	fb 06       	cpc	r15, r27
    a5e6:	90 f7       	brcc	.-28     	; 0xa5cc <remove_chain+0x32>
    a5e8:	41 15       	cp	r20, r1
    a5ea:	51 05       	cpc	r21, r1
    a5ec:	61 05       	cpc	r22, r1
    a5ee:	71 05       	cpc	r23, r1
    a5f0:	41 f0       	breq	.+16     	; 0xa602 <remove_chain+0x68>
    a5f2:	0f ef       	ldi	r16, 0xFF	; 255
    a5f4:	1f ef       	ldi	r17, 0xFF	; 255
    a5f6:	98 01       	movw	r18, r16
    a5f8:	ce 01       	movw	r24, r28
    a5fa:	3b dc       	rcall	.-1930   	; 0x9e72 <put_fat>
    a5fc:	00 97       	sbiw	r24, 0x00	; 0
    a5fe:	09 f0       	breq	.+2      	; 0xa602 <remove_chain+0x68>
    a600:	4c c0       	rjmp	.+152    	; 0xa69a <remove_chain+0x100>
    a602:	b7 01       	movw	r22, r14
    a604:	a6 01       	movw	r20, r12
    a606:	f5 01       	movw	r30, r10
    a608:	80 81       	ld	r24, Z
    a60a:	91 81       	ldd	r25, Z+1	; 0x01
    a60c:	2b dd       	rcall	.-1450   	; 0xa064 <get_fat.isra.9>
    a60e:	2b 01       	movw	r4, r22
    a610:	3c 01       	movw	r6, r24
    a612:	61 15       	cp	r22, r1
    a614:	71 05       	cpc	r23, r1
    a616:	81 05       	cpc	r24, r1
    a618:	91 05       	cpc	r25, r1
    a61a:	19 f4       	brne	.+6      	; 0xa622 <remove_chain+0x88>
    a61c:	20 e0       	ldi	r18, 0x00	; 0
    a61e:	90 e0       	ldi	r25, 0x00	; 0
    a620:	3d c0       	rjmp	.+122    	; 0xa69c <remove_chain+0x102>
    a622:	61 30       	cpi	r22, 0x01	; 1
    a624:	71 05       	cpc	r23, r1
    a626:	81 05       	cpc	r24, r1
    a628:	91 05       	cpc	r25, r1
    a62a:	81 f2       	breq	.-96     	; 0xa5cc <remove_chain+0x32>
    a62c:	6f 3f       	cpi	r22, 0xFF	; 255
    a62e:	7f 4f       	sbci	r23, 0xFF	; 255
    a630:	8f 4f       	sbci	r24, 0xFF	; 255
    a632:	9f 4f       	sbci	r25, 0xFF	; 255
    a634:	81 f1       	breq	.+96     	; 0xa696 <remove_chain+0xfc>
    a636:	00 e0       	ldi	r16, 0x00	; 0
    a638:	10 e0       	ldi	r17, 0x00	; 0
    a63a:	98 01       	movw	r18, r16
    a63c:	b7 01       	movw	r22, r14
    a63e:	a6 01       	movw	r20, r12
    a640:	ce 01       	movw	r24, r28
    a642:	17 dc       	rcall	.-2002   	; 0x9e72 <put_fat>
    a644:	00 97       	sbiw	r24, 0x00	; 0
    a646:	49 f5       	brne	.+82     	; 0xa69a <remove_chain+0x100>
    a648:	89 89       	ldd	r24, Y+17	; 0x11
    a64a:	9a 89       	ldd	r25, Y+18	; 0x12
    a64c:	ab 89       	ldd	r26, Y+19	; 0x13
    a64e:	bc 89       	ldd	r27, Y+20	; 0x14
    a650:	49 8d       	ldd	r20, Y+25	; 0x19
    a652:	5a 8d       	ldd	r21, Y+26	; 0x1a
    a654:	6b 8d       	ldd	r22, Y+27	; 0x1b
    a656:	7c 8d       	ldd	r23, Y+28	; 0x1c
    a658:	6a 01       	movw	r12, r20
    a65a:	7b 01       	movw	r14, r22
    a65c:	e2 e0       	ldi	r30, 0x02	; 2
    a65e:	ce 1a       	sub	r12, r30
    a660:	d1 08       	sbc	r13, r1
    a662:	e1 08       	sbc	r14, r1
    a664:	f1 08       	sbc	r15, r1
    a666:	8c 15       	cp	r24, r12
    a668:	9d 05       	cpc	r25, r13
    a66a:	ae 05       	cpc	r26, r14
    a66c:	bf 05       	cpc	r27, r15
    a66e:	50 f4       	brcc	.+20     	; 0xa684 <remove_chain+0xea>
    a670:	01 96       	adiw	r24, 0x01	; 1
    a672:	a1 1d       	adc	r26, r1
    a674:	b1 1d       	adc	r27, r1
    a676:	89 8b       	std	Y+17, r24	; 0x11
    a678:	9a 8b       	std	Y+18, r25	; 0x12
    a67a:	ab 8b       	std	Y+19, r26	; 0x13
    a67c:	bc 8b       	std	Y+20, r27	; 0x14
    a67e:	8c 81       	ldd	r24, Y+4	; 0x04
    a680:	81 60       	ori	r24, 0x01	; 1
    a682:	8c 83       	std	Y+4, r24	; 0x04
    a684:	73 01       	movw	r14, r6
    a686:	62 01       	movw	r12, r4
    a688:	44 16       	cp	r4, r20
    a68a:	55 06       	cpc	r5, r21
    a68c:	66 06       	cpc	r6, r22
    a68e:	77 06       	cpc	r7, r23
    a690:	08 f4       	brcc	.+2      	; 0xa694 <remove_chain+0xfa>
    a692:	b7 cf       	rjmp	.-146    	; 0xa602 <remove_chain+0x68>
    a694:	c3 cf       	rjmp	.-122    	; 0xa61c <remove_chain+0x82>
    a696:	21 e0       	ldi	r18, 0x01	; 1
    a698:	c2 cf       	rjmp	.-124    	; 0xa61e <remove_chain+0x84>
    a69a:	28 2f       	mov	r18, r24
    a69c:	82 2f       	mov	r24, r18
    a69e:	df 91       	pop	r29
    a6a0:	cf 91       	pop	r28
    a6a2:	1f 91       	pop	r17
    a6a4:	0f 91       	pop	r16
    a6a6:	ff 90       	pop	r15
    a6a8:	ef 90       	pop	r14
    a6aa:	df 90       	pop	r13
    a6ac:	cf 90       	pop	r12
    a6ae:	bf 90       	pop	r11
    a6b0:	af 90       	pop	r10
    a6b2:	7f 90       	pop	r7
    a6b4:	6f 90       	pop	r6
    a6b6:	5f 90       	pop	r5
    a6b8:	4f 90       	pop	r4
    a6ba:	08 95       	ret

0000a6bc <dir_next>:
    a6bc:	4f 92       	push	r4
    a6be:	5f 92       	push	r5
    a6c0:	6f 92       	push	r6
    a6c2:	7f 92       	push	r7
    a6c4:	af 92       	push	r10
    a6c6:	bf 92       	push	r11
    a6c8:	cf 92       	push	r12
    a6ca:	df 92       	push	r13
    a6cc:	ef 92       	push	r14
    a6ce:	ff 92       	push	r15
    a6d0:	0f 93       	push	r16
    a6d2:	1f 93       	push	r17
    a6d4:	cf 93       	push	r28
    a6d6:	df 93       	push	r29
    a6d8:	ec 01       	movw	r28, r24
    a6da:	08 81       	ld	r16, Y
    a6dc:	19 81       	ldd	r17, Y+1	; 0x01
    a6de:	ce 84       	ldd	r12, Y+14	; 0x0e
    a6e0:	df 84       	ldd	r13, Y+15	; 0x0f
    a6e2:	e8 88       	ldd	r14, Y+16	; 0x10
    a6e4:	f9 88       	ldd	r15, Y+17	; 0x11
    a6e6:	80 e2       	ldi	r24, 0x20	; 32
    a6e8:	c8 0e       	add	r12, r24
    a6ea:	d1 1c       	adc	r13, r1
    a6ec:	e1 1c       	adc	r14, r1
    a6ee:	f1 1c       	adc	r15, r1
    a6f0:	c1 14       	cp	r12, r1
    a6f2:	d1 04       	cpc	r13, r1
    a6f4:	e0 e2       	ldi	r30, 0x20	; 32
    a6f6:	ee 06       	cpc	r14, r30
    a6f8:	f1 04       	cpc	r15, r1
    a6fa:	20 f0       	brcs	.+8      	; 0xa704 <dir_next+0x48>
    a6fc:	1e 8a       	std	Y+22, r1	; 0x16
    a6fe:	1f 8a       	std	Y+23, r1	; 0x17
    a700:	18 8e       	std	Y+24, r1	; 0x18
    a702:	19 8e       	std	Y+25, r1	; 0x19
    a704:	8e 89       	ldd	r24, Y+22	; 0x16
    a706:	9f 89       	ldd	r25, Y+23	; 0x17
    a708:	a8 8d       	ldd	r26, Y+24	; 0x18
    a70a:	b9 8d       	ldd	r27, Y+25	; 0x19
    a70c:	00 97       	sbiw	r24, 0x00	; 0
    a70e:	a1 05       	cpc	r26, r1
    a710:	b1 05       	cpc	r27, r1
    a712:	09 f4       	brne	.+2      	; 0xa716 <dir_next+0x5a>
    a714:	a7 c0       	rjmp	.+334    	; 0xa864 <dir_next+0x1a8>
    a716:	5b 01       	movw	r10, r22
    a718:	b7 01       	movw	r22, r14
    a71a:	a6 01       	movw	r20, r12
    a71c:	51 70       	andi	r21, 0x01	; 1
    a71e:	66 27       	eor	r22, r22
    a720:	77 27       	eor	r23, r23
    a722:	45 2b       	or	r20, r21
    a724:	46 2b       	or	r20, r22
    a726:	47 2b       	or	r20, r23
    a728:	09 f0       	breq	.+2      	; 0xa72c <dir_next+0x70>
    a72a:	8d c0       	rjmp	.+282    	; 0xa846 <dir_next+0x18a>
    a72c:	01 96       	adiw	r24, 0x01	; 1
    a72e:	a1 1d       	adc	r26, r1
    a730:	b1 1d       	adc	r27, r1
    a732:	8e 8b       	std	Y+22, r24	; 0x16
    a734:	9f 8b       	std	Y+23, r25	; 0x17
    a736:	a8 8f       	std	Y+24, r26	; 0x18
    a738:	b9 8f       	std	Y+25, r27	; 0x19
    a73a:	4a 89       	ldd	r20, Y+18	; 0x12
    a73c:	5b 89       	ldd	r21, Y+19	; 0x13
    a73e:	6c 89       	ldd	r22, Y+20	; 0x14
    a740:	7d 89       	ldd	r23, Y+21	; 0x15
    a742:	f8 01       	movw	r30, r16
    a744:	41 15       	cp	r20, r1
    a746:	51 05       	cpc	r21, r1
    a748:	61 05       	cpc	r22, r1
    a74a:	71 05       	cpc	r23, r1
    a74c:	c1 f4       	brne	.+48     	; 0xa77e <dir_next+0xc2>
    a74e:	87 81       	ldd	r24, Z+7	; 0x07
    a750:	90 85       	ldd	r25, Z+8	; 0x08
    a752:	a0 e0       	ldi	r26, 0x00	; 0
    a754:	b0 e0       	ldi	r27, 0x00	; 0
    a756:	b7 01       	movw	r22, r14
    a758:	a6 01       	movw	r20, r12
    a75a:	35 e0       	ldi	r19, 0x05	; 5
    a75c:	76 95       	lsr	r23
    a75e:	67 95       	ror	r22
    a760:	57 95       	ror	r21
    a762:	47 95       	ror	r20
    a764:	3a 95       	dec	r19
    a766:	d1 f7       	brne	.-12     	; 0xa75c <dir_next+0xa0>
    a768:	48 17       	cp	r20, r24
    a76a:	59 07       	cpc	r21, r25
    a76c:	6a 07       	cpc	r22, r26
    a76e:	7b 07       	cpc	r23, r27
    a770:	08 f4       	brcc	.+2      	; 0xa774 <dir_next+0xb8>
    a772:	69 c0       	rjmp	.+210    	; 0xa846 <dir_next+0x18a>
    a774:	1e 8a       	std	Y+22, r1	; 0x16
    a776:	1f 8a       	std	Y+23, r1	; 0x17
    a778:	18 8e       	std	Y+24, r1	; 0x18
    a77a:	19 8e       	std	Y+25, r1	; 0x19
    a77c:	73 c0       	rjmp	.+230    	; 0xa864 <dir_next+0x1a8>
    a77e:	81 85       	ldd	r24, Z+9	; 0x09
    a780:	92 85       	ldd	r25, Z+10	; 0x0a
    a782:	01 97       	sbiw	r24, 0x01	; 1
    a784:	a0 e0       	ldi	r26, 0x00	; 0
    a786:	b0 e0       	ldi	r27, 0x00	; 0
    a788:	26 01       	movw	r4, r12
    a78a:	37 01       	movw	r6, r14
    a78c:	29 e0       	ldi	r18, 0x09	; 9
    a78e:	76 94       	lsr	r7
    a790:	67 94       	ror	r6
    a792:	57 94       	ror	r5
    a794:	47 94       	ror	r4
    a796:	2a 95       	dec	r18
    a798:	d1 f7       	brne	.-12     	; 0xa78e <dir_next+0xd2>
    a79a:	84 21       	and	r24, r4
    a79c:	95 21       	and	r25, r5
    a79e:	a6 21       	and	r26, r6
    a7a0:	b7 21       	and	r27, r7
    a7a2:	89 2b       	or	r24, r25
    a7a4:	8a 2b       	or	r24, r26
    a7a6:	8b 2b       	or	r24, r27
    a7a8:	09 f0       	breq	.+2      	; 0xa7ac <dir_next+0xf0>
    a7aa:	4d c0       	rjmp	.+154    	; 0xa846 <dir_next+0x18a>
    a7ac:	c8 01       	movw	r24, r16
    a7ae:	5a dc       	rcall	.-1868   	; 0xa064 <get_fat.isra.9>
    a7b0:	2b 01       	movw	r4, r22
    a7b2:	3c 01       	movw	r6, r24
    a7b4:	62 30       	cpi	r22, 0x02	; 2
    a7b6:	71 05       	cpc	r23, r1
    a7b8:	81 05       	cpc	r24, r1
    a7ba:	91 05       	cpc	r25, r1
    a7bc:	18 f4       	brcc	.+6      	; 0xa7c4 <dir_next+0x108>
    a7be:	82 e0       	ldi	r24, 0x02	; 2
    a7c0:	90 e0       	ldi	r25, 0x00	; 0
    a7c2:	55 c0       	rjmp	.+170    	; 0xa86e <dir_next+0x1b2>
    a7c4:	8f ef       	ldi	r24, 0xFF	; 255
    a7c6:	48 16       	cp	r4, r24
    a7c8:	58 06       	cpc	r5, r24
    a7ca:	68 06       	cpc	r6, r24
    a7cc:	78 06       	cpc	r7, r24
    a7ce:	19 f4       	brne	.+6      	; 0xa7d6 <dir_next+0x11a>
    a7d0:	81 e0       	ldi	r24, 0x01	; 1
    a7d2:	90 e0       	ldi	r25, 0x00	; 0
    a7d4:	4c c0       	rjmp	.+152    	; 0xa86e <dir_next+0x1b2>
    a7d6:	f8 01       	movw	r30, r16
    a7d8:	81 8d       	ldd	r24, Z+25	; 0x19
    a7da:	92 8d       	ldd	r25, Z+26	; 0x1a
    a7dc:	a3 8d       	ldd	r26, Z+27	; 0x1b
    a7de:	b4 8d       	ldd	r27, Z+28	; 0x1c
    a7e0:	48 16       	cp	r4, r24
    a7e2:	59 06       	cpc	r5, r25
    a7e4:	6a 06       	cpc	r6, r26
    a7e6:	7b 06       	cpc	r7, r27
    a7e8:	08 f1       	brcs	.+66     	; 0xa82c <dir_next+0x170>
    a7ea:	ab 28       	or	r10, r11
    a7ec:	19 f2       	breq	.-122    	; 0xa774 <dir_next+0xb8>
    a7ee:	4a 89       	ldd	r20, Y+18	; 0x12
    a7f0:	5b 89       	ldd	r21, Y+19	; 0x13
    a7f2:	6c 89       	ldd	r22, Y+20	; 0x14
    a7f4:	7d 89       	ldd	r23, Y+21	; 0x15
    a7f6:	ce 01       	movw	r24, r28
    a7f8:	aa dd       	rcall	.-1196   	; 0xa34e <create_chain>
    a7fa:	2b 01       	movw	r4, r22
    a7fc:	3c 01       	movw	r6, r24
    a7fe:	61 15       	cp	r22, r1
    a800:	71 05       	cpc	r23, r1
    a802:	81 05       	cpc	r24, r1
    a804:	91 05       	cpc	r25, r1
    a806:	89 f1       	breq	.+98     	; 0xa86a <dir_next+0x1ae>
    a808:	61 30       	cpi	r22, 0x01	; 1
    a80a:	71 05       	cpc	r23, r1
    a80c:	81 05       	cpc	r24, r1
    a80e:	91 05       	cpc	r25, r1
    a810:	b1 f2       	breq	.-84     	; 0xa7be <dir_next+0x102>
    a812:	8f ef       	ldi	r24, 0xFF	; 255
    a814:	48 16       	cp	r4, r24
    a816:	58 06       	cpc	r5, r24
    a818:	68 06       	cpc	r6, r24
    a81a:	78 06       	cpc	r7, r24
    a81c:	c9 f2       	breq	.-78     	; 0xa7d0 <dir_next+0x114>
    a81e:	b3 01       	movw	r22, r6
    a820:	a2 01       	movw	r20, r4
    a822:	c8 01       	movw	r24, r16
    a824:	0e 94 bc 4b 	call	0x9778	; 0x9778 <dir_clear>
    a828:	89 2b       	or	r24, r25
    a82a:	91 f6       	brne	.-92     	; 0xa7d0 <dir_next+0x114>
    a82c:	4a 8a       	std	Y+18, r4	; 0x12
    a82e:	5b 8a       	std	Y+19, r5	; 0x13
    a830:	6c 8a       	std	Y+20, r6	; 0x14
    a832:	7d 8a       	std	Y+21, r7	; 0x15
    a834:	b3 01       	movw	r22, r6
    a836:	a2 01       	movw	r20, r4
    a838:	c8 01       	movw	r24, r16
    a83a:	0e 94 d5 48 	call	0x91aa	; 0x91aa <clst2sect>
    a83e:	6e 8b       	std	Y+22, r22	; 0x16
    a840:	7f 8b       	std	Y+23, r23	; 0x17
    a842:	88 8f       	std	Y+24, r24	; 0x18
    a844:	99 8f       	std	Y+25, r25	; 0x19
    a846:	ce 86       	std	Y+14, r12	; 0x0e
    a848:	df 86       	std	Y+15, r13	; 0x0f
    a84a:	e8 8a       	std	Y+16, r14	; 0x10
    a84c:	f9 8a       	std	Y+17, r15	; 0x11
    a84e:	0b 5c       	subi	r16, 0xCB	; 203
    a850:	1f 4f       	sbci	r17, 0xFF	; 255
    a852:	e1 e0       	ldi	r30, 0x01	; 1
    a854:	de 22       	and	r13, r30
    a856:	c0 0e       	add	r12, r16
    a858:	d1 1e       	adc	r13, r17
    a85a:	db 8e       	std	Y+27, r13	; 0x1b
    a85c:	ca 8e       	std	Y+26, r12	; 0x1a
    a85e:	80 e0       	ldi	r24, 0x00	; 0
    a860:	90 e0       	ldi	r25, 0x00	; 0
    a862:	05 c0       	rjmp	.+10     	; 0xa86e <dir_next+0x1b2>
    a864:	84 e0       	ldi	r24, 0x04	; 4
    a866:	90 e0       	ldi	r25, 0x00	; 0
    a868:	02 c0       	rjmp	.+4      	; 0xa86e <dir_next+0x1b2>
    a86a:	87 e0       	ldi	r24, 0x07	; 7
    a86c:	90 e0       	ldi	r25, 0x00	; 0
    a86e:	df 91       	pop	r29
    a870:	cf 91       	pop	r28
    a872:	1f 91       	pop	r17
    a874:	0f 91       	pop	r16
    a876:	ff 90       	pop	r15
    a878:	ef 90       	pop	r14
    a87a:	df 90       	pop	r13
    a87c:	cf 90       	pop	r12
    a87e:	bf 90       	pop	r11
    a880:	af 90       	pop	r10
    a882:	7f 90       	pop	r7
    a884:	6f 90       	pop	r6
    a886:	5f 90       	pop	r5
    a888:	4f 90       	pop	r4
    a88a:	08 95       	ret

0000a88c <dir_alloc>:
    a88c:	a0 e0       	ldi	r26, 0x00	; 0
    a88e:	b0 e0       	ldi	r27, 0x00	; 0
    a890:	ec e4       	ldi	r30, 0x4C	; 76
    a892:	f4 e5       	ldi	r31, 0x54	; 84
    a894:	0c 94 ae e8 	jmp	0x1d15c	; 0x1d15c <__prologue_saves__+0x14>
    a898:	ec 01       	movw	r28, r24
    a89a:	6b 01       	movw	r12, r22
    a89c:	e8 80       	ld	r14, Y
    a89e:	f9 80       	ldd	r15, Y+1	; 0x01
    a8a0:	40 e0       	ldi	r20, 0x00	; 0
    a8a2:	50 e0       	ldi	r21, 0x00	; 0
    a8a4:	ba 01       	movw	r22, r20
    a8a6:	92 dc       	rcall	.-1756   	; 0xa1cc <dir_sdi>
    a8a8:	00 97       	sbiw	r24, 0x00	; 0
    a8aa:	f9 f4       	brne	.+62     	; 0xa8ea <dir_alloc+0x5e>
    a8ac:	00 e0       	ldi	r16, 0x00	; 0
    a8ae:	10 e0       	ldi	r17, 0x00	; 0
    a8b0:	4e 89       	ldd	r20, Y+22	; 0x16
    a8b2:	5f 89       	ldd	r21, Y+23	; 0x17
    a8b4:	68 8d       	ldd	r22, Y+24	; 0x18
    a8b6:	79 8d       	ldd	r23, Y+25	; 0x19
    a8b8:	c7 01       	movw	r24, r14
    a8ba:	06 d8       	rcall	.-4084   	; 0x98c8 <move_window>
    a8bc:	00 97       	sbiw	r24, 0x00	; 0
    a8be:	a9 f4       	brne	.+42     	; 0xa8ea <dir_alloc+0x5e>
    a8c0:	ea 8d       	ldd	r30, Y+26	; 0x1a
    a8c2:	fb 8d       	ldd	r31, Y+27	; 0x1b
    a8c4:	20 81       	ld	r18, Z
    a8c6:	25 3e       	cpi	r18, 0xE5	; 229
    a8c8:	11 f0       	breq	.+4      	; 0xa8ce <dir_alloc+0x42>
    a8ca:	21 11       	cpse	r18, r1
    a8cc:	06 c0       	rjmp	.+12     	; 0xa8da <dir_alloc+0x4e>
    a8ce:	0f 5f       	subi	r16, 0xFF	; 255
    a8d0:	1f 4f       	sbci	r17, 0xFF	; 255
    a8d2:	0c 15       	cp	r16, r12
    a8d4:	1d 05       	cpc	r17, r13
    a8d6:	19 f4       	brne	.+6      	; 0xa8de <dir_alloc+0x52>
    a8d8:	0d c0       	rjmp	.+26     	; 0xa8f4 <dir_alloc+0x68>
    a8da:	00 e0       	ldi	r16, 0x00	; 0
    a8dc:	10 e0       	ldi	r17, 0x00	; 0
    a8de:	61 e0       	ldi	r22, 0x01	; 1
    a8e0:	70 e0       	ldi	r23, 0x00	; 0
    a8e2:	ce 01       	movw	r24, r28
    a8e4:	eb de       	rcall	.-554    	; 0xa6bc <dir_next>
    a8e6:	00 97       	sbiw	r24, 0x00	; 0
    a8e8:	19 f3       	breq	.-58     	; 0xa8b0 <dir_alloc+0x24>
    a8ea:	84 30       	cpi	r24, 0x04	; 4
    a8ec:	91 05       	cpc	r25, r1
    a8ee:	11 f4       	brne	.+4      	; 0xa8f4 <dir_alloc+0x68>
    a8f0:	87 e0       	ldi	r24, 0x07	; 7
    a8f2:	90 e0       	ldi	r25, 0x00	; 0
    a8f4:	cd b7       	in	r28, 0x3d	; 61
    a8f6:	de b7       	in	r29, 0x3e	; 62
    a8f8:	e8 e0       	ldi	r30, 0x08	; 8
    a8fa:	0c 94 ca e8 	jmp	0x1d194	; 0x1d194 <__epilogue_restores__+0x14>

0000a8fe <dir_read>:
    a8fe:	a0 e0       	ldi	r26, 0x00	; 0
    a900:	b0 e0       	ldi	r27, 0x00	; 0
    a902:	e5 e8       	ldi	r30, 0x85	; 133
    a904:	f4 e5       	ldi	r31, 0x54	; 84
    a906:	0c 94 aa e8 	jmp	0x1d154	; 0x1d154 <__prologue_saves__+0xc>
    a90a:	ec 01       	movw	r28, r24
    a90c:	7b 01       	movw	r14, r22
    a90e:	a8 80       	ld	r10, Y
    a910:	b9 80       	ldd	r11, Y+1	; 0x01
    a912:	dd 24       	eor	r13, r13
    a914:	da 94       	dec	r13
    a916:	1f ef       	ldi	r17, 0xFF	; 255
    a918:	84 e0       	ldi	r24, 0x04	; 4
    a91a:	90 e0       	ldi	r25, 0x00	; 0
    a91c:	fd e0       	ldi	r31, 0x0D	; 13
    a91e:	cf 2e       	mov	r12, r31
    a920:	4e 89       	ldd	r20, Y+22	; 0x16
    a922:	5f 89       	ldd	r21, Y+23	; 0x17
    a924:	68 8d       	ldd	r22, Y+24	; 0x18
    a926:	79 8d       	ldd	r23, Y+25	; 0x19
    a928:	41 15       	cp	r20, r1
    a92a:	51 05       	cpc	r21, r1
    a92c:	61 05       	cpc	r22, r1
    a92e:	71 05       	cpc	r23, r1
    a930:	09 f4       	brne	.+2      	; 0xa934 <dir_read+0x36>
    a932:	9a c0       	rjmp	.+308    	; 0xaa68 <dir_read+0x16a>
    a934:	c5 01       	movw	r24, r10
    a936:	0e 94 64 4c 	call	0x98c8	; 0x98c8 <move_window>
    a93a:	00 97       	sbiw	r24, 0x00	; 0
    a93c:	09 f0       	breq	.+2      	; 0xa940 <dir_read+0x42>
    a93e:	96 c0       	rjmp	.+300    	; 0xaa6c <dir_read+0x16e>
    a940:	8a 8c       	ldd	r8, Y+26	; 0x1a
    a942:	9b 8c       	ldd	r9, Y+27	; 0x1b
    a944:	f4 01       	movw	r30, r8
    a946:	00 81       	ld	r16, Z
    a948:	00 23       	and	r16, r16
    a94a:	09 f4       	brne	.+2      	; 0xa94e <dir_read+0x50>
    a94c:	97 c0       	rjmp	.+302    	; 0xaa7c <dir_read+0x17e>
    a94e:	83 85       	ldd	r24, Z+11	; 0x0b
    a950:	8f 73       	andi	r24, 0x3F	; 63
    a952:	8c 83       	std	Y+4, r24	; 0x04
    a954:	05 3e       	cpi	r16, 0xE5	; 229
    a956:	09 f4       	brne	.+2      	; 0xa95a <dir_read+0x5c>
    a958:	7e c0       	rjmp	.+252    	; 0xaa56 <dir_read+0x158>
    a95a:	0e 32       	cpi	r16, 0x2E	; 46
    a95c:	09 f4       	brne	.+2      	; 0xa960 <dir_read+0x62>
    a95e:	7b c0       	rjmp	.+246    	; 0xaa56 <dir_read+0x158>
    a960:	21 e0       	ldi	r18, 0x01	; 1
    a962:	30 e0       	ldi	r19, 0x00	; 0
    a964:	98 2f       	mov	r25, r24
    a966:	9f 71       	andi	r25, 0x1F	; 31
    a968:	98 30       	cpi	r25, 0x08	; 8
    a96a:	11 f0       	breq	.+4      	; 0xa970 <dir_read+0x72>
    a96c:	20 e0       	ldi	r18, 0x00	; 0
    a96e:	30 e0       	ldi	r19, 0x00	; 0
    a970:	2e 15       	cp	r18, r14
    a972:	3f 05       	cpc	r19, r15
    a974:	09 f0       	breq	.+2      	; 0xa978 <dir_read+0x7a>
    a976:	6f c0       	rjmp	.+222    	; 0xaa56 <dir_read+0x158>
    a978:	8f 30       	cpi	r24, 0x0F	; 15
    a97a:	09 f0       	breq	.+2      	; 0xa97e <dir_read+0x80>
    a97c:	5c c0       	rjmp	.+184    	; 0xaa36 <dir_read+0x138>
    a97e:	06 ff       	sbrs	r16, 6
    a980:	0c c0       	rjmp	.+24     	; 0xa99a <dir_read+0x9c>
    a982:	f4 01       	movw	r30, r8
    a984:	85 85       	ldd	r24, Z+13	; 0x0d
    a986:	0f 7b       	andi	r16, 0xBF	; 191
    a988:	4e 85       	ldd	r20, Y+14	; 0x0e
    a98a:	5f 85       	ldd	r21, Y+15	; 0x0f
    a98c:	68 89       	ldd	r22, Y+16	; 0x10
    a98e:	79 89       	ldd	r23, Y+17	; 0x11
    a990:	48 a7       	std	Y+40, r20	; 0x28
    a992:	59 a7       	std	Y+41, r21	; 0x29
    a994:	6a a7       	std	Y+42, r22	; 0x2a
    a996:	7b a7       	std	Y+43, r23	; 0x2b
    a998:	03 c0       	rjmp	.+6      	; 0xa9a0 <dir_read+0xa2>
    a99a:	10 13       	cpse	r17, r16
    a99c:	5c c0       	rjmp	.+184    	; 0xaa56 <dir_read+0x158>
    a99e:	8d 2d       	mov	r24, r13
    a9a0:	f4 01       	movw	r30, r8
    a9a2:	d5 84       	ldd	r13, Z+13	; 0x0d
    a9a4:	d8 12       	cpse	r13, r24
    a9a6:	56 c0       	rjmp	.+172    	; 0xaa54 <dir_read+0x156>
    a9a8:	82 8d       	ldd	r24, Z+26	; 0x1a
    a9aa:	93 8d       	ldd	r25, Z+27	; 0x1b
    a9ac:	89 2b       	or	r24, r25
    a9ae:	09 f0       	breq	.+2      	; 0xa9b2 <dir_read+0xb4>
    a9b0:	52 c0       	rjmp	.+164    	; 0xaa56 <dir_read+0x158>
    a9b2:	f5 01       	movw	r30, r10
    a9b4:	63 85       	ldd	r22, Z+11	; 0x0b
    a9b6:	74 85       	ldd	r23, Z+12	; 0x0c
    a9b8:	f4 01       	movw	r30, r8
    a9ba:	80 81       	ld	r24, Z
    a9bc:	90 e0       	ldi	r25, 0x00	; 0
    a9be:	8f 7b       	andi	r24, 0xBF	; 191
    a9c0:	01 97       	sbiw	r24, 0x01	; 1
    a9c2:	c8 9e       	mul	r12, r24
    a9c4:	90 01       	movw	r18, r0
    a9c6:	c9 9e       	mul	r12, r25
    a9c8:	30 0d       	add	r19, r0
    a9ca:	11 24       	eor	r1, r1
    a9cc:	ab ee       	ldi	r26, 0xEB	; 235
    a9ce:	b4 e0       	ldi	r27, 0x04	; 4
    a9d0:	81 e0       	ldi	r24, 0x01	; 1
    a9d2:	90 e0       	ldi	r25, 0x00	; 0
    a9d4:	4d 91       	ld	r20, X+
    a9d6:	f4 01       	movw	r30, r8
    a9d8:	e4 0f       	add	r30, r20
    a9da:	f1 1d       	adc	r31, r1
    a9dc:	40 81       	ld	r20, Z
    a9de:	51 81       	ldd	r21, Z+1	; 0x01
    a9e0:	00 97       	sbiw	r24, 0x00	; 0
    a9e2:	81 f0       	breq	.+32     	; 0xaa04 <dir_read+0x106>
    a9e4:	2f 3f       	cpi	r18, 0xFF	; 255
    a9e6:	31 05       	cpc	r19, r1
    a9e8:	09 f0       	breq	.+2      	; 0xa9ec <dir_read+0xee>
    a9ea:	a8 f5       	brcc	.+106    	; 0xaa56 <dir_read+0x158>
    a9ec:	c9 01       	movw	r24, r18
    a9ee:	88 0f       	add	r24, r24
    a9f0:	99 1f       	adc	r25, r25
    a9f2:	86 0f       	add	r24, r22
    a9f4:	97 1f       	adc	r25, r23
    a9f6:	fc 01       	movw	r30, r24
    a9f8:	51 83       	std	Z+1, r21	; 0x01
    a9fa:	40 83       	st	Z, r20
    a9fc:	ca 01       	movw	r24, r20
    a9fe:	2f 5f       	subi	r18, 0xFF	; 255
    aa00:	3f 4f       	sbci	r19, 0xFF	; 255
    aa02:	03 c0       	rjmp	.+6      	; 0xaa0a <dir_read+0x10c>
    aa04:	4f 3f       	cpi	r20, 0xFF	; 255
    aa06:	5f 4f       	sbci	r21, 0xFF	; 255
    aa08:	31 f5       	brne	.+76     	; 0xaa56 <dir_read+0x158>
    aa0a:	44 e0       	ldi	r20, 0x04	; 4
    aa0c:	a8 3f       	cpi	r26, 0xF8	; 248
    aa0e:	b4 07       	cpc	r27, r20
    aa10:	09 f7       	brne	.-62     	; 0xa9d4 <dir_read+0xd6>
    aa12:	f4 01       	movw	r30, r8
    aa14:	40 81       	ld	r20, Z
    aa16:	46 ff       	sbrs	r20, 6
    aa18:	2e c0       	rjmp	.+92     	; 0xaa76 <dir_read+0x178>
    aa1a:	89 2b       	or	r24, r25
    aa1c:	61 f1       	breq	.+88     	; 0xaa76 <dir_read+0x178>
    aa1e:	2f 3f       	cpi	r18, 0xFF	; 255
    aa20:	31 05       	cpc	r19, r1
    aa22:	09 f0       	breq	.+2      	; 0xaa26 <dir_read+0x128>
    aa24:	c0 f4       	brcc	.+48     	; 0xaa56 <dir_read+0x158>
    aa26:	22 0f       	add	r18, r18
    aa28:	33 1f       	adc	r19, r19
    aa2a:	fb 01       	movw	r30, r22
    aa2c:	e2 0f       	add	r30, r18
    aa2e:	f3 1f       	adc	r31, r19
    aa30:	11 82       	std	Z+1, r1	; 0x01
    aa32:	10 82       	st	Z, r1
    aa34:	20 c0       	rjmp	.+64     	; 0xaa76 <dir_read+0x178>
    aa36:	11 11       	cpse	r17, r1
    aa38:	05 c0       	rjmp	.+10     	; 0xaa44 <dir_read+0x146>
    aa3a:	c4 01       	movw	r24, r8
    aa3c:	0e 94 39 49 	call	0x9272	; 0x9272 <sum_sfn>
    aa40:	d8 16       	cp	r13, r24
    aa42:	f9 f0       	breq	.+62     	; 0xaa82 <dir_read+0x184>
    aa44:	8f ef       	ldi	r24, 0xFF	; 255
    aa46:	9f ef       	ldi	r25, 0xFF	; 255
    aa48:	dc 01       	movw	r26, r24
    aa4a:	88 a7       	std	Y+40, r24	; 0x28
    aa4c:	99 a7       	std	Y+41, r25	; 0x29
    aa4e:	aa a7       	std	Y+42, r26	; 0x2a
    aa50:	bb a7       	std	Y+43, r27	; 0x2b
    aa52:	17 c0       	rjmp	.+46     	; 0xaa82 <dir_read+0x184>
    aa54:	d8 2e       	mov	r13, r24
    aa56:	1f ef       	ldi	r17, 0xFF	; 255
    aa58:	60 e0       	ldi	r22, 0x00	; 0
    aa5a:	70 e0       	ldi	r23, 0x00	; 0
    aa5c:	ce 01       	movw	r24, r28
    aa5e:	2e de       	rcall	.-932    	; 0xa6bc <dir_next>
    aa60:	00 97       	sbiw	r24, 0x00	; 0
    aa62:	09 f4       	brne	.+2      	; 0xaa66 <dir_read+0x168>
    aa64:	5d cf       	rjmp	.-326    	; 0xa920 <dir_read+0x22>
    aa66:	02 c0       	rjmp	.+4      	; 0xaa6c <dir_read+0x16e>
    aa68:	00 97       	sbiw	r24, 0x00	; 0
    aa6a:	59 f0       	breq	.+22     	; 0xaa82 <dir_read+0x184>
    aa6c:	1e 8a       	std	Y+22, r1	; 0x16
    aa6e:	1f 8a       	std	Y+23, r1	; 0x17
    aa70:	18 8e       	std	Y+24, r1	; 0x18
    aa72:	19 8e       	std	Y+25, r1	; 0x19
    aa74:	08 c0       	rjmp	.+16     	; 0xaa86 <dir_read+0x188>
    aa76:	1f ef       	ldi	r17, 0xFF	; 255
    aa78:	10 0f       	add	r17, r16
    aa7a:	ee cf       	rjmp	.-36     	; 0xaa58 <dir_read+0x15a>
    aa7c:	84 e0       	ldi	r24, 0x04	; 4
    aa7e:	90 e0       	ldi	r25, 0x00	; 0
    aa80:	f5 cf       	rjmp	.-22     	; 0xaa6c <dir_read+0x16e>
    aa82:	80 e0       	ldi	r24, 0x00	; 0
    aa84:	90 e0       	ldi	r25, 0x00	; 0
    aa86:	cd b7       	in	r28, 0x3d	; 61
    aa88:	de b7       	in	r29, 0x3e	; 62
    aa8a:	ec e0       	ldi	r30, 0x0C	; 12
    aa8c:	0c 94 c6 e8 	jmp	0x1d18c	; 0x1d18c <__epilogue_restores__+0xc>

0000aa90 <dir_remove>:
    aa90:	a0 e0       	ldi	r26, 0x00	; 0
    aa92:	b0 e0       	ldi	r27, 0x00	; 0
    aa94:	ee e4       	ldi	r30, 0x4E	; 78
    aa96:	f5 e5       	ldi	r31, 0x55	; 85
    aa98:	0c 94 ac e8 	jmp	0x1d158	; 0x1d158 <__prologue_saves__+0x10>
    aa9c:	ec 01       	movw	r28, r24
    aa9e:	08 81       	ld	r16, Y
    aaa0:	19 81       	ldd	r17, Y+1	; 0x01
    aaa2:	ce 84       	ldd	r12, Y+14	; 0x0e
    aaa4:	df 84       	ldd	r13, Y+15	; 0x0f
    aaa6:	e8 88       	ldd	r14, Y+16	; 0x10
    aaa8:	f9 88       	ldd	r15, Y+17	; 0x11
    aaaa:	48 a5       	ldd	r20, Y+40	; 0x28
    aaac:	59 a5       	ldd	r21, Y+41	; 0x29
    aaae:	6a a5       	ldd	r22, Y+42	; 0x2a
    aab0:	7b a5       	ldd	r23, Y+43	; 0x2b
    aab2:	4f 3f       	cpi	r20, 0xFF	; 255
    aab4:	8f ef       	ldi	r24, 0xFF	; 255
    aab6:	58 07       	cpc	r21, r24
    aab8:	68 07       	cpc	r22, r24
    aaba:	78 07       	cpc	r23, r24
    aabc:	29 f4       	brne	.+10     	; 0xaac8 <dir_remove+0x38>
    aabe:	85 ee       	ldi	r24, 0xE5	; 229
    aac0:	b8 2e       	mov	r11, r24
    aac2:	aa 24       	eor	r10, r10
    aac4:	a3 94       	inc	r10
    aac6:	19 c0       	rjmp	.+50     	; 0xaafa <dir_remove+0x6a>
    aac8:	ce 01       	movw	r24, r28
    aaca:	80 db       	rcall	.-2304   	; 0xa1cc <dir_sdi>
    aacc:	00 97       	sbiw	r24, 0x00	; 0
    aace:	19 f5       	brne	.+70     	; 0xab16 <dir_remove+0x86>
    aad0:	f6 cf       	rjmp	.-20     	; 0xaabe <dir_remove+0x2e>
    aad2:	ea 8d       	ldd	r30, Y+26	; 0x1a
    aad4:	fb 8d       	ldd	r31, Y+27	; 0x1b
    aad6:	b0 82       	st	Z, r11
    aad8:	f8 01       	movw	r30, r16
    aada:	a3 82       	std	Z+3, r10	; 0x03
    aadc:	4e 85       	ldd	r20, Y+14	; 0x0e
    aade:	5f 85       	ldd	r21, Y+15	; 0x0f
    aae0:	68 89       	ldd	r22, Y+16	; 0x10
    aae2:	79 89       	ldd	r23, Y+17	; 0x11
    aae4:	4c 15       	cp	r20, r12
    aae6:	5d 05       	cpc	r21, r13
    aae8:	6e 05       	cpc	r22, r14
    aaea:	7f 05       	cpc	r23, r15
    aaec:	a0 f4       	brcc	.+40     	; 0xab16 <dir_remove+0x86>
    aaee:	60 e0       	ldi	r22, 0x00	; 0
    aaf0:	70 e0       	ldi	r23, 0x00	; 0
    aaf2:	ce 01       	movw	r24, r28
    aaf4:	e3 dd       	rcall	.-1082   	; 0xa6bc <dir_next>
    aaf6:	00 97       	sbiw	r24, 0x00	; 0
    aaf8:	49 f4       	brne	.+18     	; 0xab0c <dir_remove+0x7c>
    aafa:	4e 89       	ldd	r20, Y+22	; 0x16
    aafc:	5f 89       	ldd	r21, Y+23	; 0x17
    aafe:	68 8d       	ldd	r22, Y+24	; 0x18
    ab00:	79 8d       	ldd	r23, Y+25	; 0x19
    ab02:	c8 01       	movw	r24, r16
    ab04:	0e 94 64 4c 	call	0x98c8	; 0x98c8 <move_window>
    ab08:	00 97       	sbiw	r24, 0x00	; 0
    ab0a:	19 f3       	breq	.-58     	; 0xaad2 <dir_remove+0x42>
    ab0c:	84 30       	cpi	r24, 0x04	; 4
    ab0e:	91 05       	cpc	r25, r1
    ab10:	11 f4       	brne	.+4      	; 0xab16 <dir_remove+0x86>
    ab12:	82 e0       	ldi	r24, 0x02	; 2
    ab14:	90 e0       	ldi	r25, 0x00	; 0
    ab16:	cd b7       	in	r28, 0x3d	; 61
    ab18:	de b7       	in	r29, 0x3e	; 62
    ab1a:	ea e0       	ldi	r30, 0x0A	; 10
    ab1c:	0c 94 c8 e8 	jmp	0x1d190	; 0x1d190 <__epilogue_restores__+0x10>

0000ab20 <dir_find>:
    ab20:	ac e0       	ldi	r26, 0x0C	; 12
    ab22:	b0 e0       	ldi	r27, 0x00	; 0
    ab24:	e6 e9       	ldi	r30, 0x96	; 150
    ab26:	f5 e5       	ldi	r31, 0x55	; 85
    ab28:	0c 94 a4 e8 	jmp	0x1d148	; 0x1d148 <__prologue_saves__>
    ab2c:	9c 87       	std	Y+12, r25	; 0x0c
    ab2e:	8b 87       	std	Y+11, r24	; 0x0b
    ab30:	fc 01       	movw	r30, r24
    ab32:	01 90       	ld	r0, Z+
    ab34:	f0 81       	ld	r31, Z
    ab36:	e0 2d       	mov	r30, r0
    ab38:	fc 83       	std	Y+4, r31	; 0x04
    ab3a:	eb 83       	std	Y+3, r30	; 0x03
    ab3c:	40 e0       	ldi	r20, 0x00	; 0
    ab3e:	50 e0       	ldi	r21, 0x00	; 0
    ab40:	ba 01       	movw	r22, r20
    ab42:	44 db       	rcall	.-2424   	; 0xa1cc <dir_sdi>
    ab44:	00 97       	sbiw	r24, 0x00	; 0
    ab46:	09 f0       	breq	.+2      	; 0xab4a <dir_find+0x2a>
    ab48:	e7 c0       	rjmp	.+462    	; 0xad18 <dir_find+0x1f8>
    ab4a:	8f ef       	ldi	r24, 0xFF	; 255
    ab4c:	9f ef       	ldi	r25, 0xFF	; 255
    ab4e:	dc 01       	movw	r26, r24
    ab50:	eb 85       	ldd	r30, Y+11	; 0x0b
    ab52:	fc 85       	ldd	r31, Y+12	; 0x0c
    ab54:	80 a7       	std	Z+40, r24	; 0x28
    ab56:	91 a7       	std	Z+41, r25	; 0x29
    ab58:	a2 a7       	std	Z+42, r26	; 0x2a
    ab5a:	b3 a7       	std	Z+43, r27	; 0x2b
    ab5c:	0f ef       	ldi	r16, 0xFF	; 255
    ab5e:	1f ef       	ldi	r17, 0xFF	; 255
    ab60:	44 24       	eor	r4, r4
    ab62:	4a 94       	dec	r4
    ab64:	54 2c       	mov	r5, r4
    ab66:	32 01       	movw	r6, r4
    ab68:	7c 96       	adiw	r30, 0x1c	; 28
    ab6a:	fa 87       	std	Y+10, r31	; 0x0a
    ab6c:	e9 87       	std	Y+9, r30	; 0x09
    ab6e:	eb 85       	ldd	r30, Y+11	; 0x0b
    ab70:	fc 85       	ldd	r31, Y+12	; 0x0c
    ab72:	46 89       	ldd	r20, Z+22	; 0x16
    ab74:	57 89       	ldd	r21, Z+23	; 0x17
    ab76:	60 8d       	ldd	r22, Z+24	; 0x18
    ab78:	71 8d       	ldd	r23, Z+25	; 0x19
    ab7a:	8b 81       	ldd	r24, Y+3	; 0x03
    ab7c:	9c 81       	ldd	r25, Y+4	; 0x04
    ab7e:	0e 94 64 4c 	call	0x98c8	; 0x98c8 <move_window>
    ab82:	00 97       	sbiw	r24, 0x00	; 0
    ab84:	09 f0       	breq	.+2      	; 0xab88 <dir_find+0x68>
    ab86:	c8 c0       	rjmp	.+400    	; 0xad18 <dir_find+0x1f8>
    ab88:	eb 85       	ldd	r30, Y+11	; 0x0b
    ab8a:	fc 85       	ldd	r31, Y+12	; 0x0c
    ab8c:	e2 8c       	ldd	r14, Z+26	; 0x1a
    ab8e:	f3 8c       	ldd	r15, Z+27	; 0x1b
    ab90:	f7 01       	movw	r30, r14
    ab92:	d0 80       	ld	r13, Z
    ab94:	dd 20       	and	r13, r13
    ab96:	09 f4       	brne	.+2      	; 0xab9a <dir_find+0x7a>
    ab98:	c1 c0       	rjmp	.+386    	; 0xad1c <dir_find+0x1fc>
    ab9a:	93 85       	ldd	r25, Z+11	; 0x0b
    ab9c:	89 2f       	mov	r24, r25
    ab9e:	8f 73       	andi	r24, 0x3F	; 63
    aba0:	eb 85       	ldd	r30, Y+11	; 0x0b
    aba2:	fc 85       	ldd	r31, Y+12	; 0x0c
    aba4:	84 83       	std	Z+4, r24	; 0x04
    aba6:	f5 ee       	ldi	r31, 0xE5	; 229
    aba8:	df 16       	cp	r13, r31
    abaa:	09 f4       	brne	.+2      	; 0xabae <dir_find+0x8e>
    abac:	a6 c0       	rjmp	.+332    	; 0xacfa <dir_find+0x1da>
    abae:	93 ff       	sbrs	r25, 3
    abb0:	04 c0       	rjmp	.+8      	; 0xabba <dir_find+0x9a>
    abb2:	8f 30       	cpi	r24, 0x0F	; 15
    abb4:	09 f0       	breq	.+2      	; 0xabb8 <dir_find+0x98>
    abb6:	a1 c0       	rjmp	.+322    	; 0xacfa <dir_find+0x1da>
    abb8:	03 c0       	rjmp	.+6      	; 0xabc0 <dir_find+0xa0>
    abba:	8f 30       	cpi	r24, 0x0F	; 15
    abbc:	09 f0       	breq	.+2      	; 0xabc0 <dir_find+0xa0>
    abbe:	88 c0       	rjmp	.+272    	; 0xacd0 <dir_find+0x1b0>
    abc0:	eb 85       	ldd	r30, Y+11	; 0x0b
    abc2:	fc 85       	ldd	r31, Y+12	; 0x0c
    abc4:	87 a1       	ldd	r24, Z+39	; 0x27
    abc6:	86 fd       	sbrc	r24, 6
    abc8:	9f c0       	rjmp	.+318    	; 0xad08 <dir_find+0x1e8>
    abca:	d6 fe       	sbrs	r13, 6
    abcc:	10 c0       	rjmp	.+32     	; 0xabee <dir_find+0xce>
    abce:	f7 01       	movw	r30, r14
    abd0:	05 85       	ldd	r16, Z+13	; 0x0d
    abd2:	fd 2d       	mov	r31, r13
    abd4:	ff 7b       	andi	r31, 0xBF	; 191
    abd6:	df 2e       	mov	r13, r31
    abd8:	eb 85       	ldd	r30, Y+11	; 0x0b
    abda:	fc 85       	ldd	r31, Y+12	; 0x0c
    abdc:	86 85       	ldd	r24, Z+14	; 0x0e
    abde:	97 85       	ldd	r25, Z+15	; 0x0f
    abe0:	a0 89       	ldd	r26, Z+16	; 0x10
    abe2:	b1 89       	ldd	r27, Z+17	; 0x11
    abe4:	80 a7       	std	Z+40, r24	; 0x28
    abe6:	91 a7       	std	Z+41, r25	; 0x29
    abe8:	a2 a7       	std	Z+42, r26	; 0x2a
    abea:	b3 a7       	std	Z+43, r27	; 0x2b
    abec:	02 c0       	rjmp	.+4      	; 0xabf2 <dir_find+0xd2>
    abee:	1d 11       	cpse	r17, r13
    abf0:	8a c0       	rjmp	.+276    	; 0xad06 <dir_find+0x1e6>
    abf2:	f7 01       	movw	r30, r14
    abf4:	c5 84       	ldd	r12, Z+13	; 0x0d
    abf6:	c0 12       	cpse	r12, r16
    abf8:	86 c0       	rjmp	.+268    	; 0xad06 <dir_find+0x1e6>
    abfa:	82 8d       	ldd	r24, Z+26	; 0x1a
    abfc:	93 8d       	ldd	r25, Z+27	; 0x1b
    abfe:	89 2b       	or	r24, r25
    ac00:	09 f0       	breq	.+2      	; 0xac04 <dir_find+0xe4>
    ac02:	91 c0       	rjmp	.+290    	; 0xad26 <dir_find+0x206>
    ac04:	eb 81       	ldd	r30, Y+3	; 0x03
    ac06:	fc 81       	ldd	r31, Y+4	; 0x04
    ac08:	03 84       	ldd	r0, Z+11	; 0x0b
    ac0a:	f4 85       	ldd	r31, Z+12	; 0x0c
    ac0c:	e0 2d       	mov	r30, r0
    ac0e:	fe 83       	std	Y+6, r31	; 0x06
    ac10:	ed 83       	std	Y+5, r30	; 0x05
    ac12:	f7 01       	movw	r30, r14
    ac14:	80 81       	ld	r24, Z
    ac16:	8f 73       	andi	r24, 0x3F	; 63
    ac18:	90 e0       	ldi	r25, 0x00	; 0
    ac1a:	01 97       	sbiw	r24, 0x01	; 1
    ac1c:	fd e0       	ldi	r31, 0x0D	; 13
    ac1e:	f8 9f       	mul	r31, r24
    ac20:	80 01       	movw	r16, r0
    ac22:	f9 9f       	mul	r31, r25
    ac24:	10 0d       	add	r17, r0
    ac26:	11 24       	eor	r1, r1
    ac28:	2b ee       	ldi	r18, 0xEB	; 235
    ac2a:	34 e0       	ldi	r19, 0x04	; 4
    ac2c:	3a 83       	std	Y+2, r19	; 0x02
    ac2e:	29 83       	std	Y+1, r18	; 0x01
    ac30:	81 e0       	ldi	r24, 0x01	; 1
    ac32:	90 e0       	ldi	r25, 0x00	; 0
    ac34:	e9 81       	ldd	r30, Y+1	; 0x01
    ac36:	fa 81       	ldd	r31, Y+2	; 0x02
    ac38:	21 91       	ld	r18, Z+
    ac3a:	fa 83       	std	Y+2, r31	; 0x02
    ac3c:	e9 83       	std	Y+1, r30	; 0x01
    ac3e:	f7 01       	movw	r30, r14
    ac40:	e2 0f       	add	r30, r18
    ac42:	f1 1d       	adc	r31, r1
    ac44:	20 80       	ld	r2, Z
    ac46:	31 80       	ldd	r3, Z+1	; 0x01
    ac48:	00 97       	sbiw	r24, 0x00	; 0
    ac4a:	39 f1       	breq	.+78     	; 0xac9a <dir_find+0x17a>
    ac4c:	0f 3f       	cpi	r16, 0xFF	; 255
    ac4e:	11 05       	cpc	r17, r1
    ac50:	11 f0       	breq	.+4      	; 0xac56 <dir_find+0x136>
    ac52:	08 f0       	brcs	.+2      	; 0xac56 <dir_find+0x136>
    ac54:	68 c0       	rjmp	.+208    	; 0xad26 <dir_find+0x206>
    ac56:	b1 01       	movw	r22, r2
    ac58:	80 e0       	ldi	r24, 0x00	; 0
    ac5a:	90 e0       	ldi	r25, 0x00	; 0
    ac5c:	0e 94 28 6a 	call	0xd450	; 0xd450 <ff_wtoupper>
    ac60:	4b 01       	movw	r8, r22
    ac62:	5c 01       	movw	r10, r24
    ac64:	98 01       	movw	r18, r16
    ac66:	2f 5f       	subi	r18, 0xFF	; 255
    ac68:	3f 4f       	sbci	r19, 0xFF	; 255
    ac6a:	38 87       	std	Y+8, r19	; 0x08
    ac6c:	2f 83       	std	Y+7, r18	; 0x07
    ac6e:	00 0f       	add	r16, r16
    ac70:	11 1f       	adc	r17, r17
    ac72:	ed 81       	ldd	r30, Y+5	; 0x05
    ac74:	fe 81       	ldd	r31, Y+6	; 0x06
    ac76:	e0 0f       	add	r30, r16
    ac78:	f1 1f       	adc	r31, r17
    ac7a:	60 81       	ld	r22, Z
    ac7c:	71 81       	ldd	r23, Z+1	; 0x01
    ac7e:	80 e0       	ldi	r24, 0x00	; 0
    ac80:	90 e0       	ldi	r25, 0x00	; 0
    ac82:	0e 94 28 6a 	call	0xd450	; 0xd450 <ff_wtoupper>
    ac86:	86 16       	cp	r8, r22
    ac88:	97 06       	cpc	r9, r23
    ac8a:	a8 06       	cpc	r10, r24
    ac8c:	b9 06       	cpc	r11, r25
    ac8e:	09 f0       	breq	.+2      	; 0xac92 <dir_find+0x172>
    ac90:	4a c0       	rjmp	.+148    	; 0xad26 <dir_find+0x206>
    ac92:	c1 01       	movw	r24, r2
    ac94:	0f 81       	ldd	r16, Y+7	; 0x07
    ac96:	18 85       	ldd	r17, Y+8	; 0x08
    ac98:	05 c0       	rjmp	.+10     	; 0xaca4 <dir_find+0x184>
    ac9a:	3f ef       	ldi	r19, 0xFF	; 255
    ac9c:	23 16       	cp	r2, r19
    ac9e:	33 06       	cpc	r3, r19
    aca0:	09 f0       	breq	.+2      	; 0xaca4 <dir_find+0x184>
    aca2:	41 c0       	rjmp	.+130    	; 0xad26 <dir_find+0x206>
    aca4:	e9 81       	ldd	r30, Y+1	; 0x01
    aca6:	fa 81       	ldd	r31, Y+2	; 0x02
    aca8:	e8 5f       	subi	r30, 0xF8	; 248
    acaa:	f4 40       	sbci	r31, 0x04	; 4
    acac:	19 f6       	brne	.-122    	; 0xac34 <dir_find+0x114>
    acae:	f7 01       	movw	r30, r14
    acb0:	20 81       	ld	r18, Z
    acb2:	26 ff       	sbrs	r18, 6
    acb4:	3a c0       	rjmp	.+116    	; 0xad2a <dir_find+0x20a>
    acb6:	89 2b       	or	r24, r25
    acb8:	c1 f1       	breq	.+112    	; 0xad2a <dir_find+0x20a>
    acba:	00 0f       	add	r16, r16
    acbc:	11 1f       	adc	r17, r17
    acbe:	ed 81       	ldd	r30, Y+5	; 0x05
    acc0:	fe 81       	ldd	r31, Y+6	; 0x06
    acc2:	e0 0f       	add	r30, r16
    acc4:	f1 1f       	adc	r31, r17
    acc6:	80 81       	ld	r24, Z
    acc8:	91 81       	ldd	r25, Z+1	; 0x01
    acca:	89 2b       	or	r24, r25
    accc:	71 f1       	breq	.+92     	; 0xad2a <dir_find+0x20a>
    acce:	2b c0       	rjmp	.+86     	; 0xad26 <dir_find+0x206>
    acd0:	11 11       	cpse	r17, r1
    acd2:	05 c0       	rjmp	.+10     	; 0xacde <dir_find+0x1be>
    acd4:	c7 01       	movw	r24, r14
    acd6:	0e 94 39 49 	call	0x9272	; 0x9272 <sum_sfn>
    acda:	08 17       	cp	r16, r24
    acdc:	09 f1       	breq	.+66     	; 0xad20 <dir_find+0x200>
    acde:	eb 85       	ldd	r30, Y+11	; 0x0b
    ace0:	fc 85       	ldd	r31, Y+12	; 0x0c
    ace2:	87 a1       	ldd	r24, Z+39	; 0x27
    ace4:	80 fd       	sbrc	r24, 0
    ace6:	09 c0       	rjmp	.+18     	; 0xacfa <dir_find+0x1da>
    ace8:	4b e0       	ldi	r20, 0x0B	; 11
    acea:	50 e0       	ldi	r21, 0x00	; 0
    acec:	69 85       	ldd	r22, Y+9	; 0x09
    acee:	7a 85       	ldd	r23, Y+10	; 0x0a
    acf0:	c7 01       	movw	r24, r14
    acf2:	0e 94 c6 48 	call	0x918c	; 0x918c <mem_cmp>
    acf6:	89 2b       	or	r24, r25
    acf8:	99 f0       	breq	.+38     	; 0xad20 <dir_find+0x200>
    acfa:	eb 85       	ldd	r30, Y+11	; 0x0b
    acfc:	fc 85       	ldd	r31, Y+12	; 0x0c
    acfe:	40 a6       	std	Z+40, r4	; 0x28
    ad00:	51 a6       	std	Z+41, r5	; 0x29
    ad02:	62 a6       	std	Z+42, r6	; 0x2a
    ad04:	73 a6       	std	Z+43, r7	; 0x2b
    ad06:	1f ef       	ldi	r17, 0xFF	; 255
    ad08:	60 e0       	ldi	r22, 0x00	; 0
    ad0a:	70 e0       	ldi	r23, 0x00	; 0
    ad0c:	8b 85       	ldd	r24, Y+11	; 0x0b
    ad0e:	9c 85       	ldd	r25, Y+12	; 0x0c
    ad10:	d5 dc       	rcall	.-1622   	; 0xa6bc <dir_next>
    ad12:	00 97       	sbiw	r24, 0x00	; 0
    ad14:	09 f4       	brne	.+2      	; 0xad18 <dir_find+0x1f8>
    ad16:	2b cf       	rjmp	.-426    	; 0xab6e <dir_find+0x4e>
    ad18:	28 2f       	mov	r18, r24
    ad1a:	0b c0       	rjmp	.+22     	; 0xad32 <dir_find+0x212>
    ad1c:	24 e0       	ldi	r18, 0x04	; 4
    ad1e:	01 c0       	rjmp	.+2      	; 0xad22 <dir_find+0x202>
    ad20:	20 e0       	ldi	r18, 0x00	; 0
    ad22:	90 e0       	ldi	r25, 0x00	; 0
    ad24:	06 c0       	rjmp	.+12     	; 0xad32 <dir_find+0x212>
    ad26:	0c 2d       	mov	r16, r12
    ad28:	ee cf       	rjmp	.-36     	; 0xad06 <dir_find+0x1e6>
    ad2a:	1f ef       	ldi	r17, 0xFF	; 255
    ad2c:	1d 0d       	add	r17, r13
    ad2e:	0c 2d       	mov	r16, r12
    ad30:	eb cf       	rjmp	.-42     	; 0xad08 <dir_find+0x1e8>
    ad32:	82 2f       	mov	r24, r18
    ad34:	2c 96       	adiw	r28, 0x0c	; 12
    ad36:	e2 e1       	ldi	r30, 0x12	; 18
    ad38:	0c 94 c0 e8 	jmp	0x1d180	; 0x1d180 <__epilogue_restores__>

0000ad3c <dir_register>:
    ad3c:	a6 e1       	ldi	r26, 0x16	; 22
    ad3e:	b0 e0       	ldi	r27, 0x00	; 0
    ad40:	e4 ea       	ldi	r30, 0xA4	; 164
    ad42:	f6 e5       	ldi	r31, 0x56	; 86
    ad44:	0c 94 a4 e8 	jmp	0x1d148	; 0x1d148 <__prologue_saves__>
    ad48:	fc 01       	movw	r30, r24
    ad4a:	27 a1       	ldd	r18, Z+39	; 0x27
    ad4c:	20 7a       	andi	r18, 0xA0	; 160
    ad4e:	09 f0       	breq	.+2      	; 0xad52 <dir_register+0x16>
    ad50:	53 c1       	rjmp	.+678    	; 0xaff8 <dir_register+0x2bc>
    ad52:	c0 80       	ld	r12, Z
    ad54:	d1 80       	ldd	r13, Z+1	; 0x01
    ad56:	f6 01       	movw	r30, r12
    ad58:	a3 85       	ldd	r26, Z+11	; 0x0b
    ad5a:	b4 85       	ldd	r27, Z+12	; 0x0c
    ad5c:	81 2c       	mov	r8, r1
    ad5e:	91 2c       	mov	r9, r1
    ad60:	2d 91       	ld	r18, X+
    ad62:	3d 91       	ld	r19, X+
    ad64:	23 2b       	or	r18, r19
    ad66:	21 f0       	breq	.+8      	; 0xad70 <dir_register+0x34>
    ad68:	ff ef       	ldi	r31, 0xFF	; 255
    ad6a:	8f 1a       	sub	r8, r31
    ad6c:	9f 0a       	sbc	r9, r31
    ad6e:	f8 cf       	rjmp	.-16     	; 0xad60 <dir_register+0x24>
    ad70:	8c 01       	movw	r16, r24
    ad72:	5c 01       	movw	r10, r24
    ad74:	2c e1       	ldi	r18, 0x1C	; 28
    ad76:	a2 0e       	add	r10, r18
    ad78:	b1 1c       	adc	r11, r1
    ad7a:	4c e0       	ldi	r20, 0x0C	; 12
    ad7c:	50 e0       	ldi	r21, 0x00	; 0
    ad7e:	b5 01       	movw	r22, r10
    ad80:	ce 01       	movw	r24, r28
    ad82:	01 96       	adiw	r24, 0x01	; 1
    ad84:	0e 94 ca 4a 	call	0x9594	; 0x9594 <mem_cpy.part.0>
    ad88:	8c 85       	ldd	r24, Y+12	; 0x0c
    ad8a:	80 ff       	sbrs	r24, 0
    ad8c:	94 c0       	rjmp	.+296    	; 0xaeb6 <dir_register+0x17a>
    ad8e:	80 e4       	ldi	r24, 0x40	; 64
    ad90:	f8 01       	movw	r30, r16
    ad92:	87 a3       	std	Z+39, r24	; 0x27
    ad94:	41 2c       	mov	r4, r1
    ad96:	51 2c       	mov	r5, r1
    ad98:	32 01       	movw	r6, r4
    ad9a:	43 94       	inc	r4
    ad9c:	72 01       	movw	r14, r4
    ad9e:	f6 01       	movw	r30, r12
    ada0:	23 84       	ldd	r2, Z+11	; 0x0b
    ada2:	34 84       	ldd	r3, Z+12	; 0x0c
    ada4:	4b e0       	ldi	r20, 0x0B	; 11
    ada6:	50 e0       	ldi	r21, 0x00	; 0
    ada8:	be 01       	movw	r22, r28
    adaa:	6f 5f       	subi	r22, 0xFF	; 255
    adac:	7f 4f       	sbci	r23, 0xFF	; 255
    adae:	c5 01       	movw	r24, r10
    adb0:	0e 94 ca 4a 	call	0x9594	; 0x9594 <mem_cpy.part.0>
    adb4:	f6 e0       	ldi	r31, 0x06	; 6
    adb6:	4f 16       	cp	r4, r31
    adb8:	51 04       	cpc	r5, r1
    adba:	18 f1       	brcs	.+70     	; 0xae02 <dir_register+0xc6>
    adbc:	f1 01       	movw	r30, r2
    adbe:	b3 01       	movw	r22, r6
    adc0:	a2 01       	movw	r20, r4
    adc2:	81 91       	ld	r24, Z+
    adc4:	91 91       	ld	r25, Z+
    adc6:	00 97       	sbiw	r24, 0x00	; 0
    adc8:	d9 f0       	breq	.+54     	; 0xae00 <dir_register+0xc4>
    adca:	20 e1       	ldi	r18, 0x10	; 16
    adcc:	30 e0       	ldi	r19, 0x00	; 0
    adce:	44 0f       	add	r20, r20
    add0:	55 1f       	adc	r21, r21
    add2:	66 1f       	adc	r22, r22
    add4:	77 1f       	adc	r23, r23
    add6:	dc 01       	movw	r26, r24
    add8:	a1 70       	andi	r26, 0x01	; 1
    adda:	bb 27       	eor	r27, r27
    addc:	4a 0f       	add	r20, r26
    adde:	5b 1f       	adc	r21, r27
    ade0:	61 1d       	adc	r22, r1
    ade2:	71 1d       	adc	r23, r1
    ade4:	96 95       	lsr	r25
    ade6:	87 95       	ror	r24
    ade8:	60 ff       	sbrs	r22, 0
    adea:	06 c0       	rjmp	.+12     	; 0xadf8 <dir_register+0xbc>
    adec:	a1 e2       	ldi	r26, 0x21	; 33
    adee:	4a 27       	eor	r20, r26
    adf0:	a0 e1       	ldi	r26, 0x10	; 16
    adf2:	5a 27       	eor	r21, r26
    adf4:	a1 e0       	ldi	r26, 0x01	; 1
    adf6:	6a 27       	eor	r22, r26
    adf8:	21 50       	subi	r18, 0x01	; 1
    adfa:	31 09       	sbc	r19, r1
    adfc:	41 f7       	brne	.-48     	; 0xadce <dir_register+0x92>
    adfe:	e1 cf       	rjmp	.-62     	; 0xadc2 <dir_register+0x86>
    ae00:	7a 01       	movw	r14, r20
    ae02:	fe 01       	movw	r30, r28
    ae04:	75 96       	adiw	r30, 0x15	; 21
    ae06:	27 e0       	ldi	r18, 0x07	; 7
    ae08:	30 e0       	ldi	r19, 0x00	; 0
    ae0a:	9e 2d       	mov	r25, r14
    ae0c:	9f 70       	andi	r25, 0x0F	; 15
    ae0e:	80 e3       	ldi	r24, 0x30	; 48
    ae10:	89 0f       	add	r24, r25
    ae12:	8a 33       	cpi	r24, 0x3A	; 58
    ae14:	10 f0       	brcs	.+4      	; 0xae1a <dir_register+0xde>
    ae16:	87 e3       	ldi	r24, 0x37	; 55
    ae18:	89 0f       	add	r24, r25
    ae1a:	21 50       	subi	r18, 0x01	; 1
    ae1c:	31 09       	sbc	r19, r1
    ae1e:	82 93       	st	-Z, r24
    ae20:	a4 e0       	ldi	r26, 0x04	; 4
    ae22:	f6 94       	lsr	r15
    ae24:	e7 94       	ror	r14
    ae26:	aa 95       	dec	r26
    ae28:	e1 f7       	brne	.-8      	; 0xae22 <dir_register+0xe6>
    ae2a:	e1 14       	cp	r14, r1
    ae2c:	f1 04       	cpc	r15, r1
    ae2e:	69 f7       	brne	.-38     	; 0xae0a <dir_register+0xce>
    ae30:	ed e0       	ldi	r30, 0x0D	; 13
    ae32:	f0 e0       	ldi	r31, 0x00	; 0
    ae34:	ec 0f       	add	r30, r28
    ae36:	fd 1f       	adc	r31, r29
    ae38:	e2 0f       	add	r30, r18
    ae3a:	f3 1f       	adc	r31, r19
    ae3c:	4e e7       	ldi	r20, 0x7E	; 126
    ae3e:	40 83       	st	Z, r20
    ae40:	f5 01       	movw	r30, r10
    ae42:	80 e0       	ldi	r24, 0x00	; 0
    ae44:	90 e0       	ldi	r25, 0x00	; 0
    ae46:	28 17       	cp	r18, r24
    ae48:	39 07       	cpc	r19, r25
    ae4a:	29 f0       	breq	.+10     	; 0xae56 <dir_register+0x11a>
    ae4c:	41 91       	ld	r20, Z+
    ae4e:	40 32       	cpi	r20, 0x20	; 32
    ae50:	11 f0       	breq	.+4      	; 0xae56 <dir_register+0x11a>
    ae52:	01 96       	adiw	r24, 0x01	; 1
    ae54:	f8 cf       	rjmp	.-16     	; 0xae46 <dir_register+0x10a>
    ae56:	f5 01       	movw	r30, r10
    ae58:	e8 0f       	add	r30, r24
    ae5a:	f9 1f       	adc	r31, r25
    ae5c:	28 30       	cpi	r18, 0x08	; 8
    ae5e:	31 05       	cpc	r19, r1
    ae60:	50 f4       	brcc	.+20     	; 0xae76 <dir_register+0x13a>
    ae62:	ad e0       	ldi	r26, 0x0D	; 13
    ae64:	b0 e0       	ldi	r27, 0x00	; 0
    ae66:	ac 0f       	add	r26, r28
    ae68:	bd 1f       	adc	r27, r29
    ae6a:	a2 0f       	add	r26, r18
    ae6c:	b3 1f       	adc	r27, r19
    ae6e:	8c 91       	ld	r24, X
    ae70:	2f 5f       	subi	r18, 0xFF	; 255
    ae72:	3f 4f       	sbci	r19, 0xFF	; 255
    ae74:	01 c0       	rjmp	.+2      	; 0xae78 <dir_register+0x13c>
    ae76:	80 e2       	ldi	r24, 0x20	; 32
    ae78:	81 93       	st	Z+, r24
    ae7a:	cf 01       	movw	r24, r30
    ae7c:	8a 19       	sub	r24, r10
    ae7e:	9b 09       	sbc	r25, r11
    ae80:	08 97       	sbiw	r24, 0x08	; 8
    ae82:	60 f3       	brcs	.-40     	; 0xae5c <dir_register+0x120>
    ae84:	c8 01       	movw	r24, r16
    ae86:	4c de       	rcall	.-872    	; 0xab20 <dir_find>
    ae88:	00 97       	sbiw	r24, 0x00	; 0
    ae8a:	71 f4       	brne	.+28     	; 0xaea8 <dir_register+0x16c>
    ae8c:	8f ef       	ldi	r24, 0xFF	; 255
    ae8e:	48 1a       	sub	r4, r24
    ae90:	58 0a       	sbc	r5, r24
    ae92:	68 0a       	sbc	r6, r24
    ae94:	78 0a       	sbc	r7, r24
    ae96:	94 e6       	ldi	r25, 0x64	; 100
    ae98:	49 16       	cp	r4, r25
    ae9a:	51 04       	cpc	r5, r1
    ae9c:	61 04       	cpc	r6, r1
    ae9e:	71 04       	cpc	r7, r1
    aea0:	09 f0       	breq	.+2      	; 0xaea4 <dir_register+0x168>
    aea2:	7c cf       	rjmp	.-264    	; 0xad9c <dir_register+0x60>
    aea4:	27 e0       	ldi	r18, 0x07	; 7
    aea6:	a9 c0       	rjmp	.+338    	; 0xaffa <dir_register+0x2be>
    aea8:	84 30       	cpi	r24, 0x04	; 4
    aeaa:	91 05       	cpc	r25, r1
    aeac:	09 f0       	breq	.+2      	; 0xaeb0 <dir_register+0x174>
    aeae:	ce c0       	rjmp	.+412    	; 0xb04c <dir_register+0x310>
    aeb0:	8c 85       	ldd	r24, Y+12	; 0x0c
    aeb2:	f8 01       	movw	r30, r16
    aeb4:	87 a3       	std	Z+39, r24	; 0x27
    aeb6:	8c 85       	ldd	r24, Y+12	; 0x0c
    aeb8:	81 ff       	sbrs	r24, 1
    aeba:	0b c0       	rjmp	.+22     	; 0xaed2 <dir_register+0x196>
    aebc:	c4 01       	movw	r24, r8
    aebe:	0c 96       	adiw	r24, 0x0c	; 12
    aec0:	6d e0       	ldi	r22, 0x0D	; 13
    aec2:	70 e0       	ldi	r23, 0x00	; 0
    aec4:	0e 94 10 e8 	call	0x1d020	; 0x1d020 <__udivmodhi4>
    aec8:	7b 01       	movw	r14, r22
    aeca:	ff ef       	ldi	r31, 0xFF	; 255
    aecc:	ef 1a       	sub	r14, r31
    aece:	ff 0a       	sbc	r15, r31
    aed0:	03 c0       	rjmp	.+6      	; 0xaed8 <dir_register+0x19c>
    aed2:	ee 24       	eor	r14, r14
    aed4:	e3 94       	inc	r14
    aed6:	f1 2c       	mov	r15, r1
    aed8:	b7 01       	movw	r22, r14
    aeda:	c8 01       	movw	r24, r16
    aedc:	d7 dc       	rcall	.-1618   	; 0xa88c <dir_alloc>
    aede:	00 97       	sbiw	r24, 0x00	; 0
    aee0:	09 f0       	breq	.+2      	; 0xaee4 <dir_register+0x1a8>
    aee2:	b4 c0       	rjmp	.+360    	; 0xb04c <dir_register+0x310>
    aee4:	21 e0       	ldi	r18, 0x01	; 1
    aee6:	e2 1a       	sub	r14, r18
    aee8:	f1 08       	sbc	r15, r1
    aeea:	09 f4       	brne	.+2      	; 0xaeee <dir_register+0x1b2>
    aeec:	88 c0       	rjmp	.+272    	; 0xaffe <dir_register+0x2c2>
    aeee:	f8 01       	movw	r30, r16
    aef0:	46 85       	ldd	r20, Z+14	; 0x0e
    aef2:	57 85       	ldd	r21, Z+15	; 0x0f
    aef4:	60 89       	ldd	r22, Z+16	; 0x10
    aef6:	71 89       	ldd	r23, Z+17	; 0x11
    aef8:	c7 01       	movw	r24, r14
    aefa:	e5 e0       	ldi	r30, 0x05	; 5
    aefc:	88 0f       	add	r24, r24
    aefe:	99 1f       	adc	r25, r25
    af00:	ea 95       	dec	r30
    af02:	e1 f7       	brne	.-8      	; 0xaefc <dir_register+0x1c0>
    af04:	48 1b       	sub	r20, r24
    af06:	59 0b       	sbc	r21, r25
    af08:	61 09       	sbc	r22, r1
    af0a:	71 09       	sbc	r23, r1
    af0c:	c8 01       	movw	r24, r16
    af0e:	5e d9       	rcall	.-3396   	; 0xa1cc <dir_sdi>
    af10:	00 97       	sbiw	r24, 0x00	; 0
    af12:	09 f0       	breq	.+2      	; 0xaf16 <dir_register+0x1da>
    af14:	9b c0       	rjmp	.+310    	; 0xb04c <dir_register+0x310>
    af16:	c5 01       	movw	r24, r10
    af18:	0e 94 39 49 	call	0x9272	; 0x9272 <sum_sfn>
    af1c:	68 2e       	mov	r6, r24
    af1e:	5f e0       	ldi	r21, 0x0F	; 15
    af20:	35 2e       	mov	r3, r21
    af22:	6d e0       	ldi	r22, 0x0D	; 13
    af24:	46 2e       	mov	r4, r22
    af26:	78 ef       	ldi	r23, 0xF8	; 248
    af28:	87 2e       	mov	r8, r23
    af2a:	74 e0       	ldi	r23, 0x04	; 4
    af2c:	97 2e       	mov	r9, r23
    af2e:	55 24       	eor	r5, r5
    af30:	53 94       	inc	r5
    af32:	f8 01       	movw	r30, r16
    af34:	46 89       	ldd	r20, Z+22	; 0x16
    af36:	57 89       	ldd	r21, Z+23	; 0x17
    af38:	60 8d       	ldd	r22, Z+24	; 0x18
    af3a:	71 8d       	ldd	r23, Z+25	; 0x19
    af3c:	c6 01       	movw	r24, r12
    af3e:	0e 94 64 4c 	call	0x98c8	; 0x98c8 <move_window>
    af42:	00 97       	sbiw	r24, 0x00	; 0
    af44:	09 f0       	breq	.+2      	; 0xaf48 <dir_register+0x20c>
    af46:	82 c0       	rjmp	.+260    	; 0xb04c <dir_register+0x310>
    af48:	f6 01       	movw	r30, r12
    af4a:	63 85       	ldd	r22, Z+11	; 0x0b
    af4c:	74 85       	ldd	r23, Z+12	; 0x0c
    af4e:	f8 01       	movw	r30, r16
    af50:	02 8c       	ldd	r0, Z+26	; 0x1a
    af52:	f3 8d       	ldd	r31, Z+27	; 0x1b
    af54:	e0 2d       	mov	r30, r0
    af56:	fe 8b       	std	Y+22, r31	; 0x16
    af58:	ed 8b       	std	Y+21, r30	; 0x15
    af5a:	7e 2c       	mov	r7, r14
    af5c:	65 86       	std	Z+13, r6	; 0x0d
    af5e:	33 86       	std	Z+11, r3	; 0x0b
    af60:	14 86       	std	Z+12, r1	; 0x0c
    af62:	12 8e       	std	Z+26, r1	; 0x1a
    af64:	13 8e       	std	Z+27, r1	; 0x1b
    af66:	97 01       	movw	r18, r14
    af68:	33 27       	eor	r19, r19
    af6a:	21 50       	subi	r18, 0x01	; 1
    af6c:	31 09       	sbc	r19, r1
    af6e:	42 9e       	mul	r4, r18
    af70:	c0 01       	movw	r24, r0
    af72:	43 9e       	mul	r4, r19
    af74:	90 0d       	add	r25, r0
    af76:	11 24       	eor	r1, r1
    af78:	ab ee       	ldi	r26, 0xEB	; 235
    af7a:	b4 e0       	ldi	r27, 0x04	; 4
    af7c:	20 e0       	ldi	r18, 0x00	; 0
    af7e:	30 e0       	ldi	r19, 0x00	; 0
    af80:	2f 3f       	cpi	r18, 0xFF	; 255
    af82:	ff ef       	ldi	r31, 0xFF	; 255
    af84:	3f 07       	cpc	r19, r31
    af86:	49 f0       	breq	.+18     	; 0xaf9a <dir_register+0x25e>
    af88:	9c 01       	movw	r18, r24
    af8a:	22 0f       	add	r18, r18
    af8c:	33 1f       	adc	r19, r19
    af8e:	26 0f       	add	r18, r22
    af90:	37 1f       	adc	r19, r23
    af92:	f9 01       	movw	r30, r18
    af94:	20 81       	ld	r18, Z
    af96:	31 81       	ldd	r19, Z+1	; 0x01
    af98:	01 96       	adiw	r24, 0x01	; 1
    af9a:	4d 91       	ld	r20, X+
    af9c:	ed 89       	ldd	r30, Y+21	; 0x15
    af9e:	fe 89       	ldd	r31, Y+22	; 0x16
    afa0:	e4 0f       	add	r30, r20
    afa2:	f1 1d       	adc	r31, r1
    afa4:	20 83       	st	Z, r18
    afa6:	31 83       	std	Z+1, r19	; 0x01
    afa8:	21 15       	cp	r18, r1
    afaa:	31 05       	cpc	r19, r1
    afac:	11 f4       	brne	.+4      	; 0xafb2 <dir_register+0x276>
    afae:	2f ef       	ldi	r18, 0xFF	; 255
    afb0:	3f ef       	ldi	r19, 0xFF	; 255
    afb2:	8a 16       	cp	r8, r26
    afb4:	9b 06       	cpc	r9, r27
    afb6:	21 f7       	brne	.-56     	; 0xaf80 <dir_register+0x244>
    afb8:	2f 3f       	cpi	r18, 0xFF	; 255
    afba:	3f 4f       	sbci	r19, 0xFF	; 255
    afbc:	49 f0       	breq	.+18     	; 0xafd0 <dir_register+0x294>
    afbe:	88 0f       	add	r24, r24
    afc0:	99 1f       	adc	r25, r25
    afc2:	db 01       	movw	r26, r22
    afc4:	a8 0f       	add	r26, r24
    afc6:	b9 1f       	adc	r27, r25
    afc8:	8d 91       	ld	r24, X+
    afca:	9c 91       	ld	r25, X
    afcc:	89 2b       	or	r24, r25
    afce:	19 f4       	brne	.+6      	; 0xafd6 <dir_register+0x29a>
    afd0:	27 2d       	mov	r18, r7
    afd2:	20 64       	ori	r18, 0x40	; 64
    afd4:	72 2e       	mov	r7, r18
    afd6:	ed 89       	ldd	r30, Y+21	; 0x15
    afd8:	fe 89       	ldd	r31, Y+22	; 0x16
    afda:	70 82       	st	Z, r7
    afdc:	f6 01       	movw	r30, r12
    afde:	53 82       	std	Z+3, r5	; 0x03
    afe0:	60 e0       	ldi	r22, 0x00	; 0
    afe2:	70 e0       	ldi	r23, 0x00	; 0
    afe4:	c8 01       	movw	r24, r16
    afe6:	6a db       	rcall	.-2348   	; 0xa6bc <dir_next>
    afe8:	00 97       	sbiw	r24, 0x00	; 0
    afea:	81 f5       	brne	.+96     	; 0xb04c <dir_register+0x310>
    afec:	f1 e0       	ldi	r31, 0x01	; 1
    afee:	ef 1a       	sub	r14, r31
    aff0:	f1 08       	sbc	r15, r1
    aff2:	09 f0       	breq	.+2      	; 0xaff6 <dir_register+0x2ba>
    aff4:	9e cf       	rjmp	.-196    	; 0xaf32 <dir_register+0x1f6>
    aff6:	03 c0       	rjmp	.+6      	; 0xaffe <dir_register+0x2c2>
    aff8:	26 e0       	ldi	r18, 0x06	; 6
    affa:	90 e0       	ldi	r25, 0x00	; 0
    affc:	28 c0       	rjmp	.+80     	; 0xb04e <dir_register+0x312>
    affe:	f8 01       	movw	r30, r16
    b000:	46 89       	ldd	r20, Z+22	; 0x16
    b002:	57 89       	ldd	r21, Z+23	; 0x17
    b004:	60 8d       	ldd	r22, Z+24	; 0x18
    b006:	71 8d       	ldd	r23, Z+25	; 0x19
    b008:	c6 01       	movw	r24, r12
    b00a:	0e 94 64 4c 	call	0x98c8	; 0x98c8 <move_window>
    b00e:	00 97       	sbiw	r24, 0x00	; 0
    b010:	e9 f4       	brne	.+58     	; 0xb04c <dir_register+0x310>
    b012:	40 e2       	ldi	r20, 0x20	; 32
    b014:	50 e0       	ldi	r21, 0x00	; 0
    b016:	60 e0       	ldi	r22, 0x00	; 0
    b018:	70 e0       	ldi	r23, 0x00	; 0
    b01a:	f8 01       	movw	r30, r16
    b01c:	82 8d       	ldd	r24, Z+26	; 0x1a
    b01e:	93 8d       	ldd	r25, Z+27	; 0x1b
    b020:	0e 94 bd 48 	call	0x917a	; 0x917a <mem_set>
    b024:	4b e0       	ldi	r20, 0x0B	; 11
    b026:	50 e0       	ldi	r21, 0x00	; 0
    b028:	b5 01       	movw	r22, r10
    b02a:	f8 01       	movw	r30, r16
    b02c:	82 8d       	ldd	r24, Z+26	; 0x1a
    b02e:	93 8d       	ldd	r25, Z+27	; 0x1b
    b030:	0e 94 ca 4a 	call	0x9594	; 0x9594 <mem_cpy.part.0>
    b034:	f8 01       	movw	r30, r16
    b036:	22 8d       	ldd	r18, Z+26	; 0x1a
    b038:	33 8d       	ldd	r19, Z+27	; 0x1b
    b03a:	87 a1       	ldd	r24, Z+39	; 0x27
    b03c:	88 71       	andi	r24, 0x18	; 24
    b03e:	f9 01       	movw	r30, r18
    b040:	84 87       	std	Z+12, r24	; 0x0c
    b042:	81 e0       	ldi	r24, 0x01	; 1
    b044:	f6 01       	movw	r30, r12
    b046:	83 83       	std	Z+3, r24	; 0x03
    b048:	20 e0       	ldi	r18, 0x00	; 0
    b04a:	d7 cf       	rjmp	.-82     	; 0xaffa <dir_register+0x2be>
    b04c:	28 2f       	mov	r18, r24
    b04e:	82 2f       	mov	r24, r18
    b050:	66 96       	adiw	r28, 0x16	; 22
    b052:	e2 e1       	ldi	r30, 0x12	; 18
    b054:	0c 94 c0 e8 	jmp	0x1d180	; 0x1d180 <__epilogue_restores__>

0000b058 <follow_path>:
    b058:	a8 e0       	ldi	r26, 0x08	; 8
    b05a:	b0 e0       	ldi	r27, 0x00	; 0
    b05c:	e2 e3       	ldi	r30, 0x32	; 50
    b05e:	f8 e5       	ldi	r31, 0x58	; 88
    b060:	0c 94 a4 e8 	jmp	0x1d148	; 0x1d148 <__prologue_saves__>
    b064:	8c 01       	movw	r16, r24
    b066:	78 87       	std	Y+8, r23	; 0x08
    b068:	6f 83       	std	Y+7, r22	; 0x07
    b06a:	dc 01       	movw	r26, r24
    b06c:	0d 90       	ld	r0, X+
    b06e:	bc 91       	ld	r27, X
    b070:	a0 2d       	mov	r26, r0
    b072:	ba 83       	std	Y+2, r27	; 0x02
    b074:	a9 83       	std	Y+1, r26	; 0x01
    b076:	fb 01       	movw	r30, r22
    b078:	80 81       	ld	r24, Z
    b07a:	8f 32       	cpi	r24, 0x2F	; 47
    b07c:	11 f0       	breq	.+4      	; 0xb082 <follow_path+0x2a>
    b07e:	8c 35       	cpi	r24, 0x5C	; 92
    b080:	19 f4       	brne	.+6      	; 0xb088 <follow_path+0x30>
    b082:	2f 81       	ldd	r18, Y+7	; 0x07
    b084:	38 85       	ldd	r19, Y+8	; 0x08
    b086:	0c c0       	rjmp	.+24     	; 0xb0a0 <follow_path+0x48>
    b088:	e9 81       	ldd	r30, Y+1	; 0x01
    b08a:	fa 81       	ldd	r31, Y+2	; 0x02
    b08c:	85 89       	ldd	r24, Z+21	; 0x15
    b08e:	96 89       	ldd	r25, Z+22	; 0x16
    b090:	a7 89       	ldd	r26, Z+23	; 0x17
    b092:	b0 8d       	ldd	r27, Z+24	; 0x18
    b094:	f8 01       	movw	r30, r16
    b096:	86 83       	std	Z+6, r24	; 0x06
    b098:	97 83       	std	Z+7, r25	; 0x07
    b09a:	a0 87       	std	Z+8, r26	; 0x08
    b09c:	b1 87       	std	Z+9, r27	; 0x09
    b09e:	0f c0       	rjmp	.+30     	; 0xb0be <follow_path+0x66>
    b0a0:	38 87       	std	Y+8, r19	; 0x08
    b0a2:	2f 83       	std	Y+7, r18	; 0x07
    b0a4:	d9 01       	movw	r26, r18
    b0a6:	8c 91       	ld	r24, X
    b0a8:	2f 5f       	subi	r18, 0xFF	; 255
    b0aa:	3f 4f       	sbci	r19, 0xFF	; 255
    b0ac:	8f 32       	cpi	r24, 0x2F	; 47
    b0ae:	c1 f3       	breq	.-16     	; 0xb0a0 <follow_path+0x48>
    b0b0:	8c 35       	cpi	r24, 0x5C	; 92
    b0b2:	b1 f3       	breq	.-20     	; 0xb0a0 <follow_path+0x48>
    b0b4:	f8 01       	movw	r30, r16
    b0b6:	16 82       	std	Z+6, r1	; 0x06
    b0b8:	17 82       	std	Z+7, r1	; 0x07
    b0ba:	10 86       	std	Z+8, r1	; 0x08
    b0bc:	11 86       	std	Z+9, r1	; 0x09
    b0be:	af 81       	ldd	r26, Y+7	; 0x07
    b0c0:	b8 85       	ldd	r27, Y+8	; 0x08
    b0c2:	8c 91       	ld	r24, X
    b0c4:	80 32       	cpi	r24, 0x20	; 32
    b0c6:	58 f0       	brcs	.+22     	; 0xb0de <follow_path+0x86>
    b0c8:	f8 01       	movw	r30, r16
    b0ca:	7c 96       	adiw	r30, 0x1c	; 28
    b0cc:	fc 83       	std	Y+4, r31	; 0x04
    b0ce:	eb 83       	std	Y+3, r30	; 0x03
    b0d0:	29 81       	ldd	r18, Y+1	; 0x01
    b0d2:	3a 81       	ldd	r19, Y+2	; 0x02
    b0d4:	2b 5c       	subi	r18, 0xCB	; 203
    b0d6:	3f 4f       	sbci	r19, 0xFF	; 255
    b0d8:	3e 83       	std	Y+6, r19	; 0x06
    b0da:	2d 83       	std	Y+5, r18	; 0x05
    b0dc:	76 c0       	rjmp	.+236    	; 0xb1ca <follow_path+0x172>
    b0de:	80 e8       	ldi	r24, 0x80	; 128
    b0e0:	f8 01       	movw	r30, r16
    b0e2:	87 a3       	std	Z+39, r24	; 0x27
    b0e4:	40 e0       	ldi	r20, 0x00	; 0
    b0e6:	50 e0       	ldi	r21, 0x00	; 0
    b0e8:	ba 01       	movw	r22, r20
    b0ea:	c8 01       	movw	r24, r16
    b0ec:	6f d8       	rcall	.-3874   	; 0xa1cc <dir_sdi>
    b0ee:	ec c1       	rjmp	.+984    	; 0xb4c8 <follow_path+0x470>
    b0f0:	65 eb       	ldi	r22, 0xB5	; 181
    b0f2:	71 e0       	ldi	r23, 0x01	; 1
    b0f4:	0e 94 13 6a 	call	0xd426	; 0xd426 <ff_oem2uni>
    b0f8:	00 97       	sbiw	r24, 0x00	; 0
    b0fa:	09 f4       	brne	.+2      	; 0xb0fe <follow_path+0xa6>
    b0fc:	b8 c1       	rjmp	.+880    	; 0xb46e <follow_path+0x416>
    b0fe:	80 32       	cpi	r24, 0x20	; 32
    b100:	91 05       	cpc	r25, r1
    b102:	30 f1       	brcs	.+76     	; 0xb150 <follow_path+0xf8>
    b104:	8f 32       	cpi	r24, 0x2F	; 47
    b106:	91 05       	cpc	r25, r1
    b108:	09 f4       	brne	.+2      	; 0xb10c <follow_path+0xb4>
    b10a:	6b c0       	rjmp	.+214    	; 0xb1e2 <follow_path+0x18a>
    b10c:	8c 35       	cpi	r24, 0x5C	; 92
    b10e:	91 05       	cpc	r25, r1
    b110:	09 f4       	brne	.+2      	; 0xb114 <follow_path+0xbc>
    b112:	67 c0       	rjmp	.+206    	; 0xb1e2 <follow_path+0x18a>
    b114:	80 38       	cpi	r24, 0x80	; 128
    b116:	91 05       	cpc	r25, r1
    b118:	28 f4       	brcc	.+10     	; 0xb124 <follow_path+0xcc>
    b11a:	e7 e2       	ldi	r30, 0x27	; 39
    b11c:	f4 e0       	ldi	r31, 0x04	; 4
    b11e:	21 91       	ld	r18, Z+
    b120:	21 11       	cpse	r18, r1
    b122:	61 c0       	rjmp	.+194    	; 0xb1e6 <follow_path+0x18e>
    b124:	ef 81       	ldd	r30, Y+7	; 0x07
    b126:	f8 85       	ldd	r31, Y+8	; 0x08
    b128:	ef 3f       	cpi	r30, 0xFF	; 255
    b12a:	f1 05       	cpc	r31, r1
    b12c:	09 f4       	brne	.+2      	; 0xb130 <follow_path+0xd8>
    b12e:	9f c1       	rjmp	.+830    	; 0xb46e <follow_path+0x416>
    b130:	31 96       	adiw	r30, 0x01	; 1
    b132:	f8 87       	std	Y+8, r31	; 0x08
    b134:	ef 83       	std	Y+7, r30	; 0x07
    b136:	d6 01       	movw	r26, r12
    b138:	8d 93       	st	X+, r24
    b13a:	9d 93       	st	X+, r25
    b13c:	6d 01       	movw	r12, r26
    b13e:	bf ef       	ldi	r27, 0xFF	; 255
    b140:	eb 1a       	sub	r14, r27
    b142:	fb 0a       	sbc	r15, r27
    b144:	f7 01       	movw	r30, r14
    b146:	31 97       	sbiw	r30, 0x01	; 1
    b148:	80 81       	ld	r24, Z
    b14a:	90 e0       	ldi	r25, 0x00	; 0
    b14c:	00 97       	sbiw	r24, 0x00	; 0
    b14e:	81 f6       	brne	.-96     	; 0xb0f0 <follow_path+0x98>
    b150:	74 e0       	ldi	r23, 0x04	; 4
    b152:	37 2e       	mov	r3, r23
    b154:	2f 81       	ldd	r18, Y+7	; 0x07
    b156:	38 85       	ldd	r19, Y+8	; 0x08
    b158:	22 0f       	add	r18, r18
    b15a:	33 1f       	adc	r19, r19
    b15c:	8f 81       	ldd	r24, Y+7	; 0x07
    b15e:	98 85       	ldd	r25, Y+8	; 0x08
    b160:	01 97       	sbiw	r24, 0x01	; 1
    b162:	09 f0       	breq	.+2      	; 0xb166 <follow_path+0x10e>
    b164:	51 c0       	rjmp	.+162    	; 0xb208 <follow_path+0x1b0>
    b166:	d5 01       	movw	r26, r10
    b168:	8d 91       	ld	r24, X+
    b16a:	9c 91       	ld	r25, X
    b16c:	8e 97       	sbiw	r24, 0x2e	; 46
    b16e:	09 f0       	breq	.+2      	; 0xb172 <follow_path+0x11a>
    b170:	57 c0       	rjmp	.+174    	; 0xb220 <follow_path+0x1c8>
    b172:	f9 01       	movw	r30, r18
    b174:	ea 0d       	add	r30, r10
    b176:	fb 1d       	adc	r31, r11
    b178:	11 82       	std	Z+1, r1	; 0x01
    b17a:	10 82       	st	Z, r1
    b17c:	f8 01       	movw	r30, r16
    b17e:	7c 96       	adiw	r30, 0x1c	; 28
    b180:	80 e0       	ldi	r24, 0x00	; 0
    b182:	90 e0       	ldi	r25, 0x00	; 0
    b184:	2f 81       	ldd	r18, Y+7	; 0x07
    b186:	38 85       	ldd	r19, Y+8	; 0x08
    b188:	82 17       	cp	r24, r18
    b18a:	93 07       	cpc	r25, r19
    b18c:	08 f0       	brcs	.+2      	; 0xb190 <follow_path+0x138>
    b18e:	4c c0       	rjmp	.+152    	; 0xb228 <follow_path+0x1d0>
    b190:	2e e2       	ldi	r18, 0x2E	; 46
    b192:	21 93       	st	Z+, r18
    b194:	01 96       	adiw	r24, 0x01	; 1
    b196:	8b 30       	cpi	r24, 0x0B	; 11
    b198:	91 05       	cpc	r25, r1
    b19a:	a1 f7       	brne	.-24     	; 0xb184 <follow_path+0x12c>
    b19c:	83 2d       	mov	r24, r3
    b19e:	80 62       	ori	r24, 0x20	; 32
    b1a0:	f8 01       	movw	r30, r16
    b1a2:	87 a3       	std	Z+39, r24	; 0x27
    b1a4:	c8 01       	movw	r24, r16
    b1a6:	bc dc       	rcall	.-1672   	; 0xab20 <dir_find>
    b1a8:	f8 01       	movw	r30, r16
    b1aa:	27 a1       	ldd	r18, Z+39	; 0x27
    b1ac:	00 97       	sbiw	r24, 0x00	; 0
    b1ae:	09 f4       	brne	.+2      	; 0xb1b2 <follow_path+0x15a>
    b1b0:	6a c1       	rjmp	.+724    	; 0xb486 <follow_path+0x42e>
    b1b2:	84 30       	cpi	r24, 0x04	; 4
    b1b4:	91 05       	cpc	r25, r1
    b1b6:	09 f0       	breq	.+2      	; 0xb1ba <follow_path+0x162>
    b1b8:	87 c1       	rjmp	.+782    	; 0xb4c8 <follow_path+0x470>
    b1ba:	32 2f       	mov	r19, r18
    b1bc:	34 70       	andi	r19, 0x04	; 4
    b1be:	25 ff       	sbrs	r18, 5
    b1c0:	5f c1       	rjmp	.+702    	; 0xb480 <follow_path+0x428>
    b1c2:	31 11       	cpse	r19, r1
    b1c4:	57 c1       	rjmp	.+686    	; 0xb474 <follow_path+0x41c>
    b1c6:	f8 86       	std	Y+8, r15	; 0x08
    b1c8:	ef 82       	std	Y+7, r14	; 0x07
    b1ca:	d8 01       	movw	r26, r16
    b1cc:	ed 91       	ld	r30, X+
    b1ce:	fc 91       	ld	r31, X
    b1d0:	a3 84       	ldd	r10, Z+11	; 0x0b
    b1d2:	b4 84       	ldd	r11, Z+12	; 0x0c
    b1d4:	45 01       	movw	r8, r10
    b1d6:	65 01       	movw	r12, r10
    b1d8:	ef 80       	ldd	r14, Y+7	; 0x07
    b1da:	f8 84       	ldd	r15, Y+8	; 0x08
    b1dc:	18 86       	std	Y+8, r1	; 0x08
    b1de:	1f 82       	std	Y+7, r1	; 0x07
    b1e0:	ae cf       	rjmp	.-164    	; 0xb13e <follow_path+0xe6>
    b1e2:	97 01       	movw	r18, r14
    b1e4:	06 c0       	rjmp	.+12     	; 0xb1f2 <follow_path+0x19a>
    b1e6:	30 e0       	ldi	r19, 0x00	; 0
    b1e8:	82 17       	cp	r24, r18
    b1ea:	93 07       	cpc	r25, r19
    b1ec:	09 f0       	breq	.+2      	; 0xb1f0 <follow_path+0x198>
    b1ee:	97 cf       	rjmp	.-210    	; 0xb11e <follow_path+0xc6>
    b1f0:	3e c1       	rjmp	.+636    	; 0xb46e <follow_path+0x416>
    b1f2:	79 01       	movw	r14, r18
    b1f4:	f9 01       	movw	r30, r18
    b1f6:	80 81       	ld	r24, Z
    b1f8:	2f 5f       	subi	r18, 0xFF	; 255
    b1fa:	3f 4f       	sbci	r19, 0xFF	; 255
    b1fc:	8f 32       	cpi	r24, 0x2F	; 47
    b1fe:	c9 f3       	breq	.-14     	; 0xb1f2 <follow_path+0x19a>
    b200:	8c 35       	cpi	r24, 0x5C	; 92
    b202:	b9 f3       	breq	.-18     	; 0xb1f2 <follow_path+0x19a>
    b204:	31 2c       	mov	r3, r1
    b206:	a6 cf       	rjmp	.-180    	; 0xb154 <follow_path+0xfc>
    b208:	ef 81       	ldd	r30, Y+7	; 0x07
    b20a:	f8 85       	ldd	r31, Y+8	; 0x08
    b20c:	32 97       	sbiw	r30, 0x02	; 2
    b20e:	41 f4       	brne	.+16     	; 0xb220 <follow_path+0x1c8>
    b210:	f5 01       	movw	r30, r10
    b212:	82 81       	ldd	r24, Z+2	; 0x02
    b214:	93 81       	ldd	r25, Z+3	; 0x03
    b216:	8e 97       	sbiw	r24, 0x2e	; 46
    b218:	19 f4       	brne	.+6      	; 0xb220 <follow_path+0x1c8>
    b21a:	80 81       	ld	r24, Z
    b21c:	91 81       	ldd	r25, Z+1	; 0x01
    b21e:	a6 cf       	rjmp	.-180    	; 0xb16c <follow_path+0x114>
    b220:	f9 01       	movw	r30, r18
    b222:	ea 0d       	add	r30, r10
    b224:	fb 1d       	adc	r31, r11
    b226:	0d c0       	rjmp	.+26     	; 0xb242 <follow_path+0x1ea>
    b228:	20 e2       	ldi	r18, 0x20	; 32
    b22a:	b3 cf       	rjmp	.-154    	; 0xb192 <follow_path+0x13a>
    b22c:	92 91       	ld	r25, -Z
    b22e:	82 91       	ld	r24, -Z
    b230:	80 32       	cpi	r24, 0x20	; 32
    b232:	91 05       	cpc	r25, r1
    b234:	59 f4       	brne	.+22     	; 0xb24c <follow_path+0x1f4>
    b236:	2f 81       	ldd	r18, Y+7	; 0x07
    b238:	38 85       	ldd	r19, Y+8	; 0x08
    b23a:	21 50       	subi	r18, 0x01	; 1
    b23c:	31 09       	sbc	r19, r1
    b23e:	38 87       	std	Y+8, r19	; 0x08
    b240:	2f 83       	std	Y+7, r18	; 0x07
    b242:	8f 81       	ldd	r24, Y+7	; 0x07
    b244:	98 85       	ldd	r25, Y+8	; 0x08
    b246:	89 2b       	or	r24, r25
    b248:	89 f7       	brne	.-30     	; 0xb22c <follow_path+0x1d4>
    b24a:	02 c0       	rjmp	.+4      	; 0xb250 <follow_path+0x1f8>
    b24c:	8e 97       	sbiw	r24, 0x2e	; 46
    b24e:	99 f3       	breq	.-26     	; 0xb236 <follow_path+0x1de>
    b250:	ef 81       	ldd	r30, Y+7	; 0x07
    b252:	f8 85       	ldd	r31, Y+8	; 0x08
    b254:	ee 0f       	add	r30, r30
    b256:	ff 1f       	adc	r31, r31
    b258:	ea 0d       	add	r30, r10
    b25a:	fb 1d       	adc	r31, r11
    b25c:	11 82       	std	Z+1, r1	; 0x01
    b25e:	10 82       	st	Z, r1
    b260:	af 81       	ldd	r26, Y+7	; 0x07
    b262:	b8 85       	ldd	r27, Y+8	; 0x08
    b264:	ab 2b       	or	r26, r27
    b266:	09 f4       	brne	.+2      	; 0xb26a <follow_path+0x212>
    b268:	02 c1       	rjmp	.+516    	; 0xb46e <follow_path+0x416>
    b26a:	61 2c       	mov	r6, r1
    b26c:	71 2c       	mov	r7, r1
    b26e:	d4 01       	movw	r26, r8
    b270:	8d 91       	ld	r24, X+
    b272:	9d 91       	ld	r25, X+
    b274:	4d 01       	movw	r8, r26
    b276:	80 32       	cpi	r24, 0x20	; 32
    b278:	91 05       	cpc	r25, r1
    b27a:	21 f4       	brne	.+8      	; 0xb284 <follow_path+0x22c>
    b27c:	bf ef       	ldi	r27, 0xFF	; 255
    b27e:	6b 1a       	sub	r6, r27
    b280:	7b 0a       	sbc	r7, r27
    b282:	f5 cf       	rjmp	.-22     	; 0xb26e <follow_path+0x216>
    b284:	61 14       	cp	r6, r1
    b286:	71 04       	cpc	r7, r1
    b288:	11 f4       	brne	.+4      	; 0xb28e <follow_path+0x236>
    b28a:	8e 97       	sbiw	r24, 0x2e	; 46
    b28c:	61 f4       	brne	.+24     	; 0xb2a6 <follow_path+0x24e>
    b28e:	b3 2d       	mov	r27, r3
    b290:	b3 60       	ori	r27, 0x03	; 3
    b292:	3b 2e       	mov	r3, r27
    b294:	08 c0       	rjmp	.+16     	; 0xb2a6 <follow_path+0x24e>
    b296:	2f 81       	ldd	r18, Y+7	; 0x07
    b298:	38 85       	ldd	r19, Y+8	; 0x08
    b29a:	21 50       	subi	r18, 0x01	; 1
    b29c:	31 09       	sbc	r19, r1
    b29e:	38 87       	std	Y+8, r19	; 0x08
    b2a0:	2f 83       	std	Y+7, r18	; 0x07
    b2a2:	23 2b       	or	r18, r19
    b2a4:	21 f0       	breq	.+8      	; 0xb2ae <follow_path+0x256>
    b2a6:	92 91       	ld	r25, -Z
    b2a8:	82 91       	ld	r24, -Z
    b2aa:	8e 97       	sbiw	r24, 0x2e	; 46
    b2ac:	a1 f7       	brne	.-24     	; 0xb296 <follow_path+0x23e>
    b2ae:	4b e0       	ldi	r20, 0x0B	; 11
    b2b0:	50 e0       	ldi	r21, 0x00	; 0
    b2b2:	60 e2       	ldi	r22, 0x20	; 32
    b2b4:	70 e0       	ldi	r23, 0x00	; 0
    b2b6:	8b 81       	ldd	r24, Y+3	; 0x03
    b2b8:	9c 81       	ldd	r25, Y+4	; 0x04
    b2ba:	0e 94 bd 48 	call	0x917a	; 0x917a <mem_set>
    b2be:	48 e0       	ldi	r20, 0x08	; 8
    b2c0:	84 2e       	mov	r8, r20
    b2c2:	91 2c       	mov	r9, r1
    b2c4:	c1 2c       	mov	r12, r1
    b2c6:	d1 2c       	mov	r13, r1
    b2c8:	21 2c       	mov	r2, r1
    b2ca:	23 01       	movw	r4, r6
    b2cc:	3f ef       	ldi	r19, 0xFF	; 255
    b2ce:	43 1a       	sub	r4, r19
    b2d0:	53 0a       	sbc	r5, r19
    b2d2:	66 0c       	add	r6, r6
    b2d4:	77 1c       	adc	r7, r7
    b2d6:	f5 01       	movw	r30, r10
    b2d8:	e6 0d       	add	r30, r6
    b2da:	f7 1d       	adc	r31, r7
    b2dc:	80 81       	ld	r24, Z
    b2de:	91 81       	ldd	r25, Z+1	; 0x01
    b2e0:	00 97       	sbiw	r24, 0x00	; 0
    b2e2:	09 f4       	brne	.+2      	; 0xb2e6 <follow_path+0x28e>
    b2e4:	9e c0       	rjmp	.+316    	; 0xb422 <follow_path+0x3ca>
    b2e6:	80 32       	cpi	r24, 0x20	; 32
    b2e8:	91 05       	cpc	r25, r1
    b2ea:	41 f0       	breq	.+16     	; 0xb2fc <follow_path+0x2a4>
    b2ec:	8e 32       	cpi	r24, 0x2E	; 46
    b2ee:	91 05       	cpc	r25, r1
    b2f0:	51 f4       	brne	.+20     	; 0xb306 <follow_path+0x2ae>
    b2f2:	8f 81       	ldd	r24, Y+7	; 0x07
    b2f4:	98 85       	ldd	r25, Y+8	; 0x08
    b2f6:	84 15       	cp	r24, r4
    b2f8:	95 05       	cpc	r25, r5
    b2fa:	71 f0       	breq	.+28     	; 0xb318 <follow_path+0x2c0>
    b2fc:	93 2d       	mov	r25, r3
    b2fe:	93 60       	ori	r25, 0x03	; 3
    b300:	39 2e       	mov	r3, r25
    b302:	32 01       	movw	r6, r4
    b304:	e2 cf       	rjmp	.-60     	; 0xb2ca <follow_path+0x272>
    b306:	c8 14       	cp	r12, r8
    b308:	d9 04       	cpc	r13, r9
    b30a:	50 f4       	brcc	.+20     	; 0xb320 <follow_path+0x2c8>
    b30c:	af 81       	ldd	r26, Y+7	; 0x07
    b30e:	b8 85       	ldd	r27, Y+8	; 0x08
    b310:	a4 15       	cp	r26, r4
    b312:	b5 05       	cpc	r27, r5
    b314:	49 f5       	brne	.+82     	; 0xb368 <follow_path+0x310>
    b316:	d2 c0       	rjmp	.+420    	; 0xb4bc <follow_path+0x464>
    b318:	c8 14       	cp	r12, r8
    b31a:	d9 04       	cpc	r13, r9
    b31c:	08 f4       	brcc	.+2      	; 0xb320 <follow_path+0x2c8>
    b31e:	ce c0       	rjmp	.+412    	; 0xb4bc <follow_path+0x464>
    b320:	bb e0       	ldi	r27, 0x0B	; 11
    b322:	8b 16       	cp	r8, r27
    b324:	91 04       	cpc	r9, r1
    b326:	39 f4       	brne	.+14     	; 0xb336 <follow_path+0x2de>
    b328:	e3 2d       	mov	r30, r3
    b32a:	e3 60       	ori	r30, 0x03	; 3
    b32c:	3e 2e       	mov	r3, r30
    b32e:	2b e0       	ldi	r18, 0x0B	; 11
    b330:	82 2e       	mov	r8, r18
    b332:	91 2c       	mov	r9, r1
    b334:	76 c0       	rjmp	.+236    	; 0xb422 <follow_path+0x3ca>
    b336:	2f 81       	ldd	r18, Y+7	; 0x07
    b338:	38 85       	ldd	r19, Y+8	; 0x08
    b33a:	24 15       	cp	r18, r4
    b33c:	35 05       	cpc	r19, r5
    b33e:	49 f0       	breq	.+18     	; 0xb352 <follow_path+0x2fa>
    b340:	33 2d       	mov	r19, r3
    b342:	33 60       	ori	r19, 0x03	; 3
    b344:	33 2e       	mov	r3, r19
    b346:	8f 81       	ldd	r24, Y+7	; 0x07
    b348:	98 85       	ldd	r25, Y+8	; 0x08
    b34a:	84 15       	cp	r24, r4
    b34c:	95 05       	cpc	r25, r5
    b34e:	08 f4       	brcc	.+2      	; 0xb352 <follow_path+0x2fa>
    b350:	68 c0       	rjmp	.+208    	; 0xb422 <follow_path+0x3ca>
    b352:	22 0c       	add	r2, r2
    b354:	22 0c       	add	r2, r2
    b356:	4f 80       	ldd	r4, Y+7	; 0x07
    b358:	58 84       	ldd	r5, Y+8	; 0x08
    b35a:	8b e0       	ldi	r24, 0x0B	; 11
    b35c:	88 2e       	mov	r8, r24
    b35e:	91 2c       	mov	r9, r1
    b360:	98 e0       	ldi	r25, 0x08	; 8
    b362:	c9 2e       	mov	r12, r25
    b364:	d1 2c       	mov	r13, r1
    b366:	cd cf       	rjmp	.-102    	; 0xb302 <follow_path+0x2aa>
    b368:	80 38       	cpi	r24, 0x80	; 128
    b36a:	91 05       	cpc	r25, r1
    b36c:	70 f1       	brcs	.+92     	; 0xb3ca <follow_path+0x372>
    b36e:	a3 2d       	mov	r26, r3
    b370:	a2 60       	ori	r26, 0x02	; 2
    b372:	7a 2e       	mov	r7, r26
    b374:	bc 01       	movw	r22, r24
    b376:	80 e0       	ldi	r24, 0x00	; 0
    b378:	90 e0       	ldi	r25, 0x00	; 0
    b37a:	45 eb       	ldi	r20, 0xB5	; 181
    b37c:	51 e0       	ldi	r21, 0x01	; 1
    b37e:	0e 94 e0 69 	call	0xd3c0	; 0xd3c0 <ff_uni2oem>
    b382:	87 ff       	sbrs	r24, 7
    b384:	08 c0       	rjmp	.+16     	; 0xb396 <follow_path+0x33e>
    b386:	8f 77       	andi	r24, 0x7F	; 127
    b388:	99 27       	eor	r25, r25
    b38a:	fc 01       	movw	r30, r24
    b38c:	e5 59       	subi	r30, 0x95	; 149
    b38e:	fb 4f       	sbci	r31, 0xFB	; 251
    b390:	80 81       	ld	r24, Z
    b392:	90 e0       	ldi	r25, 0x00	; 0
    b394:	17 c0       	rjmp	.+46     	; 0xb3c4 <follow_path+0x36c>
    b396:	8f 3f       	cpi	r24, 0xFF	; 255
    b398:	91 05       	cpc	r25, r1
    b39a:	a1 f0       	breq	.+40     	; 0xb3c4 <follow_path+0x36c>
    b39c:	98 f0       	brcs	.+38     	; 0xb3c4 <follow_path+0x36c>
    b39e:	94 01       	movw	r18, r8
    b3a0:	21 50       	subi	r18, 0x01	; 1
    b3a2:	31 09       	sbc	r19, r1
    b3a4:	c2 16       	cp	r12, r18
    b3a6:	d3 06       	cpc	r13, r19
    b3a8:	28 f0       	brcs	.+10     	; 0xb3b4 <follow_path+0x35c>
    b3aa:	b3 2d       	mov	r27, r3
    b3ac:	b3 60       	ori	r27, 0x03	; 3
    b3ae:	3b 2e       	mov	r3, r27
    b3b0:	64 01       	movw	r12, r8
    b3b2:	a7 cf       	rjmp	.-178    	; 0xb302 <follow_path+0x2aa>
    b3b4:	f8 01       	movw	r30, r16
    b3b6:	ec 0d       	add	r30, r12
    b3b8:	fd 1d       	adc	r31, r13
    b3ba:	94 8f       	std	Z+28, r25	; 0x1c
    b3bc:	f6 01       	movw	r30, r12
    b3be:	31 96       	adiw	r30, 0x01	; 1
    b3c0:	6f 01       	movw	r12, r30
    b3c2:	26 c0       	rjmp	.+76     	; 0xb410 <follow_path+0x3b8>
    b3c4:	00 97       	sbiw	r24, 0x00	; 0
    b3c6:	59 f0       	breq	.+22     	; 0xb3de <follow_path+0x386>
    b3c8:	01 c0       	rjmp	.+2      	; 0xb3cc <follow_path+0x374>
    b3ca:	73 2c       	mov	r7, r3
    b3cc:	e0 e3       	ldi	r30, 0x30	; 48
    b3ce:	f4 e0       	ldi	r31, 0x04	; 4
    b3d0:	21 91       	ld	r18, Z+
    b3d2:	22 23       	and	r18, r18
    b3d4:	51 f0       	breq	.+20     	; 0xb3ea <follow_path+0x392>
    b3d6:	30 e0       	ldi	r19, 0x00	; 0
    b3d8:	82 17       	cp	r24, r18
    b3da:	93 07       	cpc	r25, r19
    b3dc:	c9 f7       	brne	.-14     	; 0xb3d0 <follow_path+0x378>
    b3de:	f7 2d       	mov	r31, r7
    b3e0:	f3 60       	ori	r31, 0x03	; 3
    b3e2:	7f 2e       	mov	r7, r31
    b3e4:	8f e5       	ldi	r24, 0x5F	; 95
    b3e6:	90 e0       	ldi	r25, 0x00	; 0
    b3e8:	13 c0       	rjmp	.+38     	; 0xb410 <follow_path+0x3b8>
    b3ea:	9c 01       	movw	r18, r24
    b3ec:	21 54       	subi	r18, 0x41	; 65
    b3ee:	31 09       	sbc	r19, r1
    b3f0:	2a 31       	cpi	r18, 0x1A	; 26
    b3f2:	31 05       	cpc	r19, r1
    b3f4:	18 f4       	brcc	.+6      	; 0xb3fc <follow_path+0x3a4>
    b3f6:	22 2d       	mov	r18, r2
    b3f8:	22 60       	ori	r18, 0x02	; 2
    b3fa:	22 2e       	mov	r2, r18
    b3fc:	9c 01       	movw	r18, r24
    b3fe:	21 56       	subi	r18, 0x61	; 97
    b400:	31 09       	sbc	r19, r1
    b402:	2a 31       	cpi	r18, 0x1A	; 26
    b404:	31 05       	cpc	r19, r1
    b406:	20 f4       	brcc	.+8      	; 0xb410 <follow_path+0x3b8>
    b408:	32 2d       	mov	r19, r2
    b40a:	31 60       	ori	r19, 0x01	; 1
    b40c:	23 2e       	mov	r2, r19
    b40e:	80 97       	sbiw	r24, 0x20	; 32
    b410:	f8 01       	movw	r30, r16
    b412:	ec 0d       	add	r30, r12
    b414:	fd 1d       	adc	r31, r13
    b416:	84 8f       	std	Z+28, r24	; 0x1c
    b418:	c6 01       	movw	r24, r12
    b41a:	01 96       	adiw	r24, 0x01	; 1
    b41c:	6c 01       	movw	r12, r24
    b41e:	37 2c       	mov	r3, r7
    b420:	70 cf       	rjmp	.-288    	; 0xb302 <follow_path+0x2aa>
    b422:	f8 01       	movw	r30, r16
    b424:	84 8d       	ldd	r24, Z+28	; 0x1c
    b426:	85 3e       	cpi	r24, 0xE5	; 229
    b428:	11 f4       	brne	.+4      	; 0xb42e <follow_path+0x3d6>
    b42a:	25 e0       	ldi	r18, 0x05	; 5
    b42c:	24 8f       	std	Z+28, r18	; 0x1c
    b42e:	38 e0       	ldi	r19, 0x08	; 8
    b430:	83 16       	cp	r8, r19
    b432:	91 04       	cpc	r9, r1
    b434:	11 f4       	brne	.+4      	; 0xb43a <follow_path+0x3e2>
    b436:	22 0c       	add	r2, r2
    b438:	22 0c       	add	r2, r2
    b43a:	82 2d       	mov	r24, r2
    b43c:	8c 70       	andi	r24, 0x0C	; 12
    b43e:	8c 30       	cpi	r24, 0x0C	; 12
    b440:	21 f0       	breq	.+8      	; 0xb44a <follow_path+0x3f2>
    b442:	82 2d       	mov	r24, r2
    b444:	83 70       	andi	r24, 0x03	; 3
    b446:	83 30       	cpi	r24, 0x03	; 3
    b448:	19 f4       	brne	.+6      	; 0xb450 <follow_path+0x3f8>
    b44a:	83 2d       	mov	r24, r3
    b44c:	82 60       	ori	r24, 0x02	; 2
    b44e:	38 2e       	mov	r3, r24
    b450:	31 fc       	sbrc	r3, 1
    b452:	0a c0       	rjmp	.+20     	; 0xb468 <follow_path+0x410>
    b454:	20 fe       	sbrs	r2, 0
    b456:	03 c0       	rjmp	.+6      	; 0xb45e <follow_path+0x406>
    b458:	93 2d       	mov	r25, r3
    b45a:	90 61       	ori	r25, 0x10	; 16
    b45c:	39 2e       	mov	r3, r25
    b45e:	22 fe       	sbrs	r2, 2
    b460:	03 c0       	rjmp	.+6      	; 0xb468 <follow_path+0x410>
    b462:	a3 2d       	mov	r26, r3
    b464:	a8 60       	ori	r26, 0x08	; 8
    b466:	3a 2e       	mov	r3, r26
    b468:	f8 01       	movw	r30, r16
    b46a:	37 a2       	std	Z+39, r3	; 0x27
    b46c:	9b ce       	rjmp	.-714    	; 0xb1a4 <follow_path+0x14c>
    b46e:	86 e0       	ldi	r24, 0x06	; 6
    b470:	90 e0       	ldi	r25, 0x00	; 0
    b472:	2a c0       	rjmp	.+84     	; 0xb4c8 <follow_path+0x470>
    b474:	80 e8       	ldi	r24, 0x80	; 128
    b476:	f8 01       	movw	r30, r16
    b478:	87 a3       	std	Z+39, r24	; 0x27
    b47a:	80 e0       	ldi	r24, 0x00	; 0
    b47c:	90 e0       	ldi	r25, 0x00	; 0
    b47e:	24 c0       	rjmp	.+72     	; 0xb4c8 <follow_path+0x470>
    b480:	33 23       	and	r19, r19
    b482:	c9 f0       	breq	.+50     	; 0xb4b6 <follow_path+0x45e>
    b484:	21 c0       	rjmp	.+66     	; 0xb4c8 <follow_path+0x470>
    b486:	22 fd       	sbrc	r18, 2
    b488:	1f c0       	rjmp	.+62     	; 0xb4c8 <follow_path+0x470>
    b48a:	f8 01       	movw	r30, r16
    b48c:	84 81       	ldd	r24, Z+4	; 0x04
    b48e:	84 ff       	sbrs	r24, 4
    b490:	12 c0       	rjmp	.+36     	; 0xb4b6 <follow_path+0x45e>
    b492:	66 85       	ldd	r22, Z+14	; 0x0e
    b494:	77 85       	ldd	r23, Z+15	; 0x0f
    b496:	71 70       	andi	r23, 0x01	; 1
    b498:	2d 81       	ldd	r18, Y+5	; 0x05
    b49a:	3e 81       	ldd	r19, Y+6	; 0x06
    b49c:	62 0f       	add	r22, r18
    b49e:	73 1f       	adc	r23, r19
    b4a0:	a9 81       	ldd	r26, Y+1	; 0x01
    b4a2:	ba 81       	ldd	r27, Y+2	; 0x02
    b4a4:	8c 91       	ld	r24, X
    b4a6:	0e 94 d5 4a 	call	0x95aa	; 0x95aa <ld_clust.isra.3>
    b4aa:	f8 01       	movw	r30, r16
    b4ac:	66 83       	std	Z+6, r22	; 0x06
    b4ae:	77 83       	std	Z+7, r23	; 0x07
    b4b0:	80 87       	std	Z+8, r24	; 0x08
    b4b2:	91 87       	std	Z+9, r25	; 0x09
    b4b4:	88 ce       	rjmp	.-752    	; 0xb1c6 <follow_path+0x16e>
    b4b6:	85 e0       	ldi	r24, 0x05	; 5
    b4b8:	90 e0       	ldi	r25, 0x00	; 0
    b4ba:	06 c0       	rjmp	.+12     	; 0xb4c8 <follow_path+0x470>
    b4bc:	fb e0       	ldi	r31, 0x0B	; 11
    b4be:	8f 16       	cp	r8, r31
    b4c0:	91 04       	cpc	r9, r1
    b4c2:	09 f0       	breq	.+2      	; 0xb4c6 <follow_path+0x46e>
    b4c4:	46 cf       	rjmp	.-372    	; 0xb352 <follow_path+0x2fa>
    b4c6:	30 cf       	rjmp	.-416    	; 0xb328 <follow_path+0x2d0>
    b4c8:	28 96       	adiw	r28, 0x08	; 8
    b4ca:	e2 e1       	ldi	r30, 0x12	; 18
    b4cc:	0c 94 c0 e8 	jmp	0x1d180	; 0x1d180 <__epilogue_restores__>

0000b4d0 <f_mount>:
    b4d0:	a6 e0       	ldi	r26, 0x06	; 6
    b4d2:	b0 e0       	ldi	r27, 0x00	; 0
    b4d4:	ee e6       	ldi	r30, 0x6E	; 110
    b4d6:	fa e5       	ldi	r31, 0x5A	; 90
    b4d8:	0c 94 b3 e8 	jmp	0x1d166	; 0x1d166 <__prologue_saves__+0x1e>
    b4dc:	9c 83       	std	Y+4, r25	; 0x04
    b4de:	8b 83       	std	Y+3, r24	; 0x03
    b4e0:	7e 83       	std	Y+6, r23	; 0x06
    b4e2:	6d 83       	std	Y+5, r22	; 0x05
    b4e4:	14 2f       	mov	r17, r20
    b4e6:	7a 83       	std	Y+2, r23	; 0x02
    b4e8:	69 83       	std	Y+1, r22	; 0x01
    b4ea:	ce 01       	movw	r24, r28
    b4ec:	01 96       	adiw	r24, 0x01	; 1
    b4ee:	0e 94 48 49 	call	0x9290	; 0x9290 <get_ldnumber>
    b4f2:	97 fd       	sbrc	r25, 7
    b4f4:	20 c0       	rjmp	.+64     	; 0xb536 <f_mount+0x66>
    b4f6:	88 0f       	add	r24, r24
    b4f8:	99 1f       	adc	r25, r25
    b4fa:	fc 01       	movw	r30, r24
    b4fc:	ef 5d       	subi	r30, 0xDF	; 223
    b4fe:	f7 4e       	sbci	r31, 0xE7	; 231
    b500:	01 90       	ld	r0, Z+
    b502:	f0 81       	ld	r31, Z
    b504:	e0 2d       	mov	r30, r0
    b506:	30 97       	sbiw	r30, 0x00	; 0
    b508:	09 f0       	breq	.+2      	; 0xb50c <f_mount+0x3c>
    b50a:	10 82       	st	Z, r1
    b50c:	eb 81       	ldd	r30, Y+3	; 0x03
    b50e:	fc 81       	ldd	r31, Y+4	; 0x04
    b510:	30 97       	sbiw	r30, 0x00	; 0
    b512:	09 f0       	breq	.+2      	; 0xb516 <f_mount+0x46>
    b514:	10 82       	st	Z, r1
    b516:	dc 01       	movw	r26, r24
    b518:	af 5d       	subi	r26, 0xDF	; 223
    b51a:	b7 4e       	sbci	r27, 0xE7	; 231
    b51c:	ed 93       	st	X+, r30
    b51e:	fc 93       	st	X, r31
    b520:	11 23       	and	r17, r17
    b522:	61 f0       	breq	.+24     	; 0xb53c <f_mount+0x6c>
    b524:	40 e0       	ldi	r20, 0x00	; 0
    b526:	be 01       	movw	r22, r28
    b528:	6d 5f       	subi	r22, 0xFD	; 253
    b52a:	7f 4f       	sbci	r23, 0xFF	; 255
    b52c:	ce 01       	movw	r24, r28
    b52e:	05 96       	adiw	r24, 0x05	; 5
    b530:	0e 94 df 4c 	call	0x99be	; 0x99be <mount_volume>
    b534:	05 c0       	rjmp	.+10     	; 0xb540 <f_mount+0x70>
    b536:	8b e0       	ldi	r24, 0x0B	; 11
    b538:	90 e0       	ldi	r25, 0x00	; 0
    b53a:	02 c0       	rjmp	.+4      	; 0xb540 <f_mount+0x70>
    b53c:	80 e0       	ldi	r24, 0x00	; 0
    b53e:	90 e0       	ldi	r25, 0x00	; 0
    b540:	26 96       	adiw	r28, 0x06	; 6
    b542:	e3 e0       	ldi	r30, 0x03	; 3
    b544:	0c 94 cf e8 	jmp	0x1d19e	; 0x1d19e <__epilogue_restores__+0x1e>

0000b548 <f_open>:
    b548:	a6 e3       	ldi	r26, 0x36	; 54
    b54a:	b0 e0       	ldi	r27, 0x00	; 0
    b54c:	ea ea       	ldi	r30, 0xAA	; 170
    b54e:	fa e5       	ldi	r31, 0x5A	; 90
    b550:	0c 94 a4 e8 	jmp	0x1d148	; 0x1d148 <__prologue_saves__>
    b554:	7a ab       	std	Y+50, r23	; 0x32
    b556:	69 ab       	std	Y+49, r22	; 0x31
    b558:	00 97       	sbiw	r24, 0x00	; 0
    b55a:	09 f4       	brne	.+2      	; 0xb55e <f_open+0x16>
    b55c:	93 c1       	rjmp	.+806    	; 0xb884 <f_open+0x33c>
    b55e:	74 2e       	mov	r7, r20
    b560:	7c 01       	movw	r14, r24
    b562:	24 2f       	mov	r18, r20
    b564:	2f 73       	andi	r18, 0x3F	; 63
    b566:	32 2e       	mov	r3, r18
    b568:	42 2f       	mov	r20, r18
    b56a:	be 01       	movw	r22, r28
    b56c:	61 5d       	subi	r22, 0xD1	; 209
    b56e:	7f 4f       	sbci	r23, 0xFF	; 255
    b570:	ce 01       	movw	r24, r28
    b572:	c1 96       	adiw	r24, 0x31	; 49
    b574:	0e 94 df 4c 	call	0x99be	; 0x99be <mount_volume>
    b578:	00 97       	sbiw	r24, 0x00	; 0
    b57a:	09 f0       	breq	.+2      	; 0xb57e <f_open+0x36>
    b57c:	7d c1       	rjmp	.+762    	; 0xb878 <f_open+0x330>
    b57e:	8f a5       	ldd	r24, Y+47	; 0x2f
    b580:	98 a9       	ldd	r25, Y+48	; 0x30
    b582:	9a 83       	std	Y+2, r25	; 0x02
    b584:	89 83       	std	Y+1, r24	; 0x01
    b586:	80 e0       	ldi	r24, 0x00	; 0
    b588:	92 e0       	ldi	r25, 0x02	; 2
    b58a:	0e 94 da 69 	call	0xd3b4	; 0xd3b4 <ff_memalloc>
    b58e:	5c 01       	movw	r10, r24
    b590:	00 97       	sbiw	r24, 0x00	; 0
    b592:	09 f4       	brne	.+2      	; 0xb596 <f_open+0x4e>
    b594:	79 c1       	rjmp	.+754    	; 0xb888 <f_open+0x340>
    b596:	ef a5       	ldd	r30, Y+47	; 0x2f
    b598:	f8 a9       	ldd	r31, Y+48	; 0x30
    b59a:	94 87       	std	Z+12, r25	; 0x0c
    b59c:	83 87       	std	Z+11, r24	; 0x0b
    b59e:	69 a9       	ldd	r22, Y+49	; 0x31
    b5a0:	7a a9       	ldd	r23, Y+50	; 0x32
    b5a2:	ce 01       	movw	r24, r28
    b5a4:	01 96       	adiw	r24, 0x01	; 1
    b5a6:	58 dd       	rcall	.-1360   	; 0xb058 <follow_path>
    b5a8:	8c 01       	movw	r16, r24
    b5aa:	89 2b       	or	r24, r25
    b5ac:	29 f4       	brne	.+10     	; 0xb5b8 <f_open+0x70>
    b5ae:	88 a5       	ldd	r24, Y+40	; 0x28
    b5b0:	87 ff       	sbrs	r24, 7
    b5b2:	02 c0       	rjmp	.+4      	; 0xb5b8 <f_open+0x70>
    b5b4:	06 e0       	ldi	r16, 0x06	; 6
    b5b6:	10 e0       	ldi	r17, 0x00	; 0
    b5b8:	87 2d       	mov	r24, r7
    b5ba:	8c 71       	andi	r24, 0x1C	; 28
    b5bc:	09 f4       	brne	.+2      	; 0xb5c0 <f_open+0x78>
    b5be:	75 c0       	rjmp	.+234    	; 0xb6aa <f_open+0x162>
    b5c0:	01 15       	cp	r16, r1
    b5c2:	11 05       	cpc	r17, r1
    b5c4:	79 f0       	breq	.+30     	; 0xb5e4 <f_open+0x9c>
    b5c6:	04 30       	cpi	r16, 0x04	; 4
    b5c8:	11 05       	cpc	r17, r1
    b5ca:	09 f0       	breq	.+2      	; 0xb5ce <f_open+0x86>
    b5cc:	6d c1       	rjmp	.+730    	; 0xb8a8 <f_open+0x360>
    b5ce:	ce 01       	movw	r24, r28
    b5d0:	01 96       	adiw	r24, 0x01	; 1
    b5d2:	b4 db       	rcall	.-2200   	; 0xad3c <dir_register>
    b5d4:	8c 01       	movw	r16, r24
    b5d6:	89 2b       	or	r24, r25
    b5d8:	09 f0       	breq	.+2      	; 0xb5dc <f_open+0x94>
    b5da:	66 c1       	rjmp	.+716    	; 0xb8a8 <f_open+0x360>
    b5dc:	33 2d       	mov	r19, r3
    b5de:	38 60       	ori	r19, 0x08	; 8
    b5e0:	33 2e       	mov	r3, r19
    b5e2:	06 c0       	rjmp	.+12     	; 0xb5f0 <f_open+0xa8>
    b5e4:	8d 81       	ldd	r24, Y+5	; 0x05
    b5e6:	81 71       	andi	r24, 0x11	; 17
    b5e8:	09 f0       	breq	.+2      	; 0xb5ec <f_open+0xa4>
    b5ea:	5c c1       	rjmp	.+696    	; 0xb8a4 <f_open+0x35c>
    b5ec:	72 fc       	sbrc	r7, 2
    b5ee:	51 c1       	rjmp	.+674    	; 0xb892 <f_open+0x34a>
    b5f0:	33 fe       	sbrs	r3, 3
    b5f2:	6b c0       	rjmp	.+214    	; 0xb6ca <f_open+0x182>
    b5f4:	0b 8d       	ldd	r16, Y+27	; 0x1b
    b5f6:	1c 8d       	ldd	r17, Y+28	; 0x1c
    b5f8:	ef a5       	ldd	r30, Y+47	; 0x2f
    b5fa:	f8 a9       	ldd	r31, Y+48	; 0x30
    b5fc:	b8 01       	movw	r22, r16
    b5fe:	80 81       	ld	r24, Z
    b600:	0e 94 d5 4a 	call	0x95aa	; 0x95aa <ld_clust.isra.3>
    b604:	2b 01       	movw	r4, r22
    b606:	3c 01       	movw	r6, r24
    b608:	0e 94 cb 71 	call	0xe396	; 0xe396 <get_fattime>
    b60c:	ab 01       	movw	r20, r22
    b60e:	bc 01       	movw	r22, r24
    b610:	c8 01       	movw	r24, r16
    b612:	0e 96       	adiw	r24, 0x0e	; 14
    b614:	0e 94 b7 48 	call	0x916e	; 0x916e <st_dword>
    b618:	eb 8d       	ldd	r30, Y+27	; 0x1b
    b61a:	fc 8d       	ldd	r31, Y+28	; 0x1c
    b61c:	80 e2       	ldi	r24, 0x20	; 32
    b61e:	83 87       	std	Z+11, r24	; 0x0b
    b620:	af a5       	ldd	r26, Y+47	; 0x2f
    b622:	b8 a9       	ldd	r27, Y+48	; 0x30
    b624:	eb 8d       	ldd	r30, Y+27	; 0x1b
    b626:	fc 8d       	ldd	r31, Y+28	; 0x1c
    b628:	12 8e       	std	Z+26, r1	; 0x1a
    b62a:	13 8e       	std	Z+27, r1	; 0x1b
    b62c:	8c 91       	ld	r24, X
    b62e:	83 30       	cpi	r24, 0x03	; 3
    b630:	11 f4       	brne	.+4      	; 0xb636 <f_open+0xee>
    b632:	14 8a       	std	Z+20, r1	; 0x14
    b634:	15 8a       	std	Z+21, r1	; 0x15
    b636:	eb 8d       	ldd	r30, Y+27	; 0x1b
    b638:	fc 8d       	ldd	r31, Y+28	; 0x1c
    b63a:	14 8e       	std	Z+28, r1	; 0x1c
    b63c:	15 8e       	std	Z+29, r1	; 0x1d
    b63e:	16 8e       	std	Z+30, r1	; 0x1e
    b640:	17 8e       	std	Z+31, r1	; 0x1f
    b642:	81 e0       	ldi	r24, 0x01	; 1
    b644:	fd 01       	movw	r30, r26
    b646:	83 83       	std	Z+3, r24	; 0x03
    b648:	41 14       	cp	r4, r1
    b64a:	51 04       	cpc	r5, r1
    b64c:	61 04       	cpc	r6, r1
    b64e:	71 04       	cpc	r7, r1
    b650:	c9 f1       	breq	.+114    	; 0xb6c4 <f_open+0x17c>
    b652:	21 a9       	ldd	r18, Z+49	; 0x31
    b654:	32 a9       	ldd	r19, Z+50	; 0x32
    b656:	43 a9       	ldd	r20, Z+51	; 0x33
    b658:	54 a9       	ldd	r21, Z+52	; 0x34
    b65a:	2b ab       	std	Y+51, r18	; 0x33
    b65c:	3c ab       	std	Y+52, r19	; 0x34
    b65e:	4d ab       	std	Y+53, r20	; 0x35
    b660:	5e ab       	std	Y+54, r21	; 0x36
    b662:	00 e0       	ldi	r16, 0x00	; 0
    b664:	10 e0       	ldi	r17, 0x00	; 0
    b666:	98 01       	movw	r18, r16
    b668:	b3 01       	movw	r22, r6
    b66a:	a2 01       	movw	r20, r4
    b66c:	ce 01       	movw	r24, r28
    b66e:	01 96       	adiw	r24, 0x01	; 1
    b670:	0e 94 cd 52 	call	0xa59a	; 0xa59a <remove_chain>
    b674:	8c 01       	movw	r16, r24
    b676:	89 2b       	or	r24, r25
    b678:	09 f0       	breq	.+2      	; 0xb67c <f_open+0x134>
    b67a:	16 c1       	rjmp	.+556    	; 0xb8a8 <f_open+0x360>
    b67c:	4b a9       	ldd	r20, Y+51	; 0x33
    b67e:	5c a9       	ldd	r21, Y+52	; 0x34
    b680:	6d a9       	ldd	r22, Y+53	; 0x35
    b682:	7e a9       	ldd	r23, Y+54	; 0x36
    b684:	8f a5       	ldd	r24, Y+47	; 0x2f
    b686:	98 a9       	ldd	r25, Y+48	; 0x30
    b688:	0e 94 64 4c 	call	0x98c8	; 0x98c8 <move_window>
    b68c:	8c 01       	movw	r16, r24
    b68e:	ef a5       	ldd	r30, Y+47	; 0x2f
    b690:	f8 a9       	ldd	r31, Y+48	; 0x30
    b692:	21 e0       	ldi	r18, 0x01	; 1
    b694:	42 1a       	sub	r4, r18
    b696:	51 08       	sbc	r5, r1
    b698:	61 08       	sbc	r6, r1
    b69a:	71 08       	sbc	r7, r1
    b69c:	45 86       	std	Z+13, r4	; 0x0d
    b69e:	56 86       	std	Z+14, r5	; 0x0e
    b6a0:	67 86       	std	Z+15, r6	; 0x0f
    b6a2:	70 8a       	std	Z+16, r7	; 0x10
    b6a4:	89 2b       	or	r24, r25
    b6a6:	61 f0       	breq	.+24     	; 0xb6c0 <f_open+0x178>
    b6a8:	ff c0       	rjmp	.+510    	; 0xb8a8 <f_open+0x360>
    b6aa:	01 15       	cp	r16, r1
    b6ac:	11 05       	cpc	r17, r1
    b6ae:	09 f0       	breq	.+2      	; 0xb6b2 <f_open+0x16a>
    b6b0:	fb c0       	rjmp	.+502    	; 0xb8a8 <f_open+0x360>
    b6b2:	8d 81       	ldd	r24, Y+5	; 0x05
    b6b4:	84 fd       	sbrc	r24, 4
    b6b6:	f3 c0       	rjmp	.+486    	; 0xb89e <f_open+0x356>
    b6b8:	71 fe       	sbrs	r7, 1
    b6ba:	02 c0       	rjmp	.+4      	; 0xb6c0 <f_open+0x178>
    b6bc:	80 fd       	sbrc	r24, 0
    b6be:	f2 c0       	rjmp	.+484    	; 0xb8a4 <f_open+0x35c>
    b6c0:	33 fe       	sbrs	r3, 3
    b6c2:	03 c0       	rjmp	.+6      	; 0xb6ca <f_open+0x182>
    b6c4:	33 2d       	mov	r19, r3
    b6c6:	30 64       	ori	r19, 0x40	; 64
    b6c8:	33 2e       	mov	r3, r19
    b6ca:	0f a5       	ldd	r16, Y+47	; 0x2f
    b6cc:	18 a9       	ldd	r17, Y+48	; 0x30
    b6ce:	f8 01       	movw	r30, r16
    b6d0:	81 a9       	ldd	r24, Z+49	; 0x31
    b6d2:	92 a9       	ldd	r25, Z+50	; 0x32
    b6d4:	a3 a9       	ldd	r26, Z+51	; 0x33
    b6d6:	b4 a9       	ldd	r27, Z+52	; 0x34
    b6d8:	f7 01       	movw	r30, r14
    b6da:	84 8f       	std	Z+28, r24	; 0x1c
    b6dc:	95 8f       	std	Z+29, r25	; 0x1d
    b6de:	a6 8f       	std	Z+30, r26	; 0x1e
    b6e0:	b7 8f       	std	Z+31, r27	; 0x1f
    b6e2:	6b 8c       	ldd	r6, Y+27	; 0x1b
    b6e4:	7c 8c       	ldd	r7, Y+28	; 0x1c
    b6e6:	71 a2       	std	Z+33, r7	; 0x21
    b6e8:	60 a2       	std	Z+32, r6	; 0x20
    b6ea:	b3 01       	movw	r22, r6
    b6ec:	f8 01       	movw	r30, r16
    b6ee:	80 81       	ld	r24, Z
    b6f0:	0e 94 d5 4a 	call	0x95aa	; 0x95aa <ld_clust.isra.3>
    b6f4:	f7 01       	movw	r30, r14
    b6f6:	66 83       	std	Z+6, r22	; 0x06
    b6f8:	77 83       	std	Z+7, r23	; 0x07
    b6fa:	80 87       	std	Z+8, r24	; 0x08
    b6fc:	91 87       	std	Z+9, r25	; 0x09
    b6fe:	c3 01       	movw	r24, r6
    b700:	4c 96       	adiw	r24, 0x1c	; 28
    b702:	0e 94 a2 48 	call	0x9144	; 0x9144 <ld_dword>
    b706:	f7 01       	movw	r30, r14
    b708:	62 87       	std	Z+10, r22	; 0x0a
    b70a:	73 87       	std	Z+11, r23	; 0x0b
    b70c:	84 87       	std	Z+12, r24	; 0x0c
    b70e:	95 87       	std	Z+13, r25	; 0x0d
    b710:	13 a2       	std	Z+35, r1	; 0x23
    b712:	12 a2       	std	Z+34, r1	; 0x22
    b714:	11 83       	std	Z+1, r17	; 0x01
    b716:	00 83       	st	Z, r16
    b718:	f8 01       	movw	r30, r16
    b71a:	85 81       	ldd	r24, Z+5	; 0x05
    b71c:	96 81       	ldd	r25, Z+6	; 0x06
    b71e:	f7 01       	movw	r30, r14
    b720:	93 83       	std	Z+3, r25	; 0x03
    b722:	82 83       	std	Z+2, r24	; 0x02
    b724:	36 86       	std	Z+14, r3	; 0x0e
    b726:	17 86       	std	Z+15, r1	; 0x0f
    b728:	10 8e       	std	Z+24, r1	; 0x18
    b72a:	11 8e       	std	Z+25, r1	; 0x19
    b72c:	12 8e       	std	Z+26, r1	; 0x1a
    b72e:	13 8e       	std	Z+27, r1	; 0x1b
    b730:	10 8a       	std	Z+16, r1	; 0x10
    b732:	11 8a       	std	Z+17, r1	; 0x11
    b734:	12 8a       	std	Z+18, r1	; 0x12
    b736:	13 8a       	std	Z+19, r1	; 0x13
    b738:	67 01       	movw	r12, r14
    b73a:	f4 e2       	ldi	r31, 0x24	; 36
    b73c:	cf 0e       	add	r12, r31
    b73e:	d1 1c       	adc	r13, r1
    b740:	40 e0       	ldi	r20, 0x00	; 0
    b742:	52 e0       	ldi	r21, 0x02	; 2
    b744:	60 e0       	ldi	r22, 0x00	; 0
    b746:	70 e0       	ldi	r23, 0x00	; 0
    b748:	c6 01       	movw	r24, r12
    b74a:	0e 94 bd 48 	call	0x917a	; 0x917a <mem_set>
    b74e:	35 fc       	sbrc	r3, 5
    b750:	03 c0       	rjmp	.+6      	; 0xb758 <f_open+0x210>
    b752:	00 e0       	ldi	r16, 0x00	; 0
    b754:	10 e0       	ldi	r17, 0x00	; 0
    b756:	89 c0       	rjmp	.+274    	; 0xb86a <f_open+0x322>
    b758:	f7 01       	movw	r30, r14
    b75a:	62 84       	ldd	r6, Z+10	; 0x0a
    b75c:	73 84       	ldd	r7, Z+11	; 0x0b
    b75e:	84 84       	ldd	r8, Z+12	; 0x0c
    b760:	95 84       	ldd	r9, Z+13	; 0x0d
    b762:	61 14       	cp	r6, r1
    b764:	71 04       	cpc	r7, r1
    b766:	81 04       	cpc	r8, r1
    b768:	91 04       	cpc	r9, r1
    b76a:	99 f3       	breq	.-26     	; 0xb752 <f_open+0x20a>
    b76c:	60 8a       	std	Z+16, r6	; 0x10
    b76e:	71 8a       	std	Z+17, r7	; 0x11
    b770:	82 8a       	std	Z+18, r8	; 0x12
    b772:	93 8a       	std	Z+19, r9	; 0x13
    b774:	ef a5       	ldd	r30, Y+47	; 0x2f
    b776:	f8 a9       	ldd	r31, Y+48	; 0x30
    b778:	21 84       	ldd	r2, Z+9	; 0x09
    b77a:	32 84       	ldd	r3, Z+10	; 0x0a
    b77c:	c1 01       	movw	r24, r2
    b77e:	a0 e0       	ldi	r26, 0x00	; 0
    b780:	b0 e0       	ldi	r27, 0x00	; 0
    b782:	1c 01       	movw	r2, r24
    b784:	2d 01       	movw	r4, r26
    b786:	59 e0       	ldi	r21, 0x09	; 9
    b788:	22 0c       	add	r2, r2
    b78a:	33 1c       	adc	r3, r3
    b78c:	44 1c       	adc	r4, r4
    b78e:	55 1c       	adc	r5, r5
    b790:	5a 95       	dec	r21
    b792:	d1 f7       	brne	.-12     	; 0xb788 <f_open+0x240>
    b794:	f7 01       	movw	r30, r14
    b796:	46 81       	ldd	r20, Z+6	; 0x06
    b798:	57 81       	ldd	r21, Z+7	; 0x07
    b79a:	60 85       	ldd	r22, Z+8	; 0x08
    b79c:	71 85       	ldd	r23, Z+9	; 0x09
    b79e:	26 14       	cp	r2, r6
    b7a0:	37 04       	cpc	r3, r7
    b7a2:	48 04       	cpc	r4, r8
    b7a4:	59 04       	cpc	r5, r9
    b7a6:	f0 f4       	brcc	.+60     	; 0xb7e4 <f_open+0x29c>
    b7a8:	f7 01       	movw	r30, r14
    b7aa:	80 81       	ld	r24, Z
    b7ac:	91 81       	ldd	r25, Z+1	; 0x01
    b7ae:	0e 94 32 50 	call	0xa064	; 0xa064 <get_fat.isra.9>
    b7b2:	ab 01       	movw	r20, r22
    b7b4:	bc 01       	movw	r22, r24
    b7b6:	d4 01       	movw	r26, r8
    b7b8:	c3 01       	movw	r24, r6
    b7ba:	82 19       	sub	r24, r2
    b7bc:	93 09       	sbc	r25, r3
    b7be:	a4 09       	sbc	r26, r4
    b7c0:	b5 09       	sbc	r27, r5
    b7c2:	3c 01       	movw	r6, r24
    b7c4:	4d 01       	movw	r8, r26
    b7c6:	42 30       	cpi	r20, 0x02	; 2
    b7c8:	51 05       	cpc	r21, r1
    b7ca:	61 05       	cpc	r22, r1
    b7cc:	71 05       	cpc	r23, r1
    b7ce:	08 f4       	brcc	.+2      	; 0xb7d2 <f_open+0x28a>
    b7d0:	63 c0       	rjmp	.+198    	; 0xb898 <f_open+0x350>
    b7d2:	4f 3f       	cpi	r20, 0xFF	; 255
    b7d4:	ff ef       	ldi	r31, 0xFF	; 255
    b7d6:	5f 07       	cpc	r21, r31
    b7d8:	6f 07       	cpc	r22, r31
    b7da:	7f 07       	cpc	r23, r31
    b7dc:	01 f7       	brne	.-64     	; 0xb79e <f_open+0x256>
    b7de:	01 e0       	ldi	r16, 0x01	; 1
    b7e0:	10 e0       	ldi	r17, 0x00	; 0
    b7e2:	02 c0       	rjmp	.+4      	; 0xb7e8 <f_open+0x2a0>
    b7e4:	00 e0       	ldi	r16, 0x00	; 0
    b7e6:	10 e0       	ldi	r17, 0x00	; 0
    b7e8:	f7 01       	movw	r30, r14
    b7ea:	44 8b       	std	Z+20, r20	; 0x14
    b7ec:	55 8b       	std	Z+21, r21	; 0x15
    b7ee:	66 8b       	std	Z+22, r22	; 0x16
    b7f0:	77 8b       	std	Z+23, r23	; 0x17
    b7f2:	01 15       	cp	r16, r1
    b7f4:	11 05       	cpc	r17, r1
    b7f6:	c9 f5       	brne	.+114    	; 0xb86a <f_open+0x322>
    b7f8:	d4 01       	movw	r26, r8
    b7fa:	c3 01       	movw	r24, r6
    b7fc:	91 70       	andi	r25, 0x01	; 1
    b7fe:	aa 27       	eor	r26, r26
    b800:	bb 27       	eor	r27, r27
    b802:	89 2b       	or	r24, r25
    b804:	8a 2b       	or	r24, r26
    b806:	8b 2b       	or	r24, r27
    b808:	09 f4       	brne	.+2      	; 0xb80c <f_open+0x2c4>
    b80a:	a3 cf       	rjmp	.-186    	; 0xb752 <f_open+0x20a>
    b80c:	4f a4       	ldd	r4, Y+47	; 0x2f
    b80e:	58 a8       	ldd	r5, Y+48	; 0x30
    b810:	c2 01       	movw	r24, r4
    b812:	0e 94 d5 48 	call	0x91aa	; 0x91aa <clst2sect>
    b816:	61 15       	cp	r22, r1
    b818:	71 05       	cpc	r23, r1
    b81a:	81 05       	cpc	r24, r1
    b81c:	91 05       	cpc	r25, r1
    b81e:	19 f1       	breq	.+70     	; 0xb866 <f_open+0x31e>
    b820:	94 01       	movw	r18, r8
    b822:	83 01       	movw	r16, r6
    b824:	49 e0       	ldi	r20, 0x09	; 9
    b826:	36 95       	lsr	r19
    b828:	27 95       	ror	r18
    b82a:	17 95       	ror	r17
    b82c:	07 95       	ror	r16
    b82e:	4a 95       	dec	r20
    b830:	d1 f7       	brne	.-12     	; 0xb826 <f_open+0x2de>
    b832:	a9 01       	movw	r20, r18
    b834:	98 01       	movw	r18, r16
    b836:	26 0f       	add	r18, r22
    b838:	37 1f       	adc	r19, r23
    b83a:	48 1f       	adc	r20, r24
    b83c:	59 1f       	adc	r21, r25
    b83e:	f7 01       	movw	r30, r14
    b840:	20 8f       	std	Z+24, r18	; 0x18
    b842:	31 8f       	std	Z+25, r19	; 0x19
    b844:	42 8f       	std	Z+26, r20	; 0x1a
    b846:	53 8f       	std	Z+27, r21	; 0x1b
    b848:	01 e0       	ldi	r16, 0x01	; 1
    b84a:	10 e0       	ldi	r17, 0x00	; 0
    b84c:	b6 01       	movw	r22, r12
    b84e:	f2 01       	movw	r30, r4
    b850:	81 81       	ldd	r24, Z+1	; 0x01
    b852:	0e 94 96 6a 	call	0xd52c	; 0xd52c <disk_read>
    b856:	31 e0       	ldi	r19, 0x01	; 1
    b858:	20 e0       	ldi	r18, 0x00	; 0
    b85a:	89 2b       	or	r24, r25
    b85c:	09 f4       	brne	.+2      	; 0xb860 <f_open+0x318>
    b85e:	30 e0       	ldi	r19, 0x00	; 0
    b860:	03 2f       	mov	r16, r19
    b862:	12 2f       	mov	r17, r18
    b864:	02 c0       	rjmp	.+4      	; 0xb86a <f_open+0x322>
    b866:	02 e0       	ldi	r16, 0x02	; 2
    b868:	10 e0       	ldi	r17, 0x00	; 0
    b86a:	c5 01       	movw	r24, r10
    b86c:	0e 94 dd 69 	call	0xd3ba	; 0xd3ba <ff_memfree>
    b870:	01 15       	cp	r16, r1
    b872:	11 05       	cpc	r17, r1
    b874:	59 f0       	breq	.+22     	; 0xb88c <f_open+0x344>
    b876:	01 c0       	rjmp	.+2      	; 0xb87a <f_open+0x332>
    b878:	8c 01       	movw	r16, r24
    b87a:	f7 01       	movw	r30, r14
    b87c:	11 82       	std	Z+1, r1	; 0x01
    b87e:	10 82       	st	Z, r1
    b880:	c8 01       	movw	r24, r16
    b882:	16 c0       	rjmp	.+44     	; 0xb8b0 <f_open+0x368>
    b884:	89 e0       	ldi	r24, 0x09	; 9
    b886:	03 c0       	rjmp	.+6      	; 0xb88e <f_open+0x346>
    b888:	81 e1       	ldi	r24, 0x11	; 17
    b88a:	01 c0       	rjmp	.+2      	; 0xb88e <f_open+0x346>
    b88c:	80 e0       	ldi	r24, 0x00	; 0
    b88e:	90 e0       	ldi	r25, 0x00	; 0
    b890:	0f c0       	rjmp	.+30     	; 0xb8b0 <f_open+0x368>
    b892:	08 e0       	ldi	r16, 0x08	; 8
    b894:	10 e0       	ldi	r17, 0x00	; 0
    b896:	08 c0       	rjmp	.+16     	; 0xb8a8 <f_open+0x360>
    b898:	02 e0       	ldi	r16, 0x02	; 2
    b89a:	10 e0       	ldi	r17, 0x00	; 0
    b89c:	a5 cf       	rjmp	.-182    	; 0xb7e8 <f_open+0x2a0>
    b89e:	04 e0       	ldi	r16, 0x04	; 4
    b8a0:	10 e0       	ldi	r17, 0x00	; 0
    b8a2:	02 c0       	rjmp	.+4      	; 0xb8a8 <f_open+0x360>
    b8a4:	07 e0       	ldi	r16, 0x07	; 7
    b8a6:	10 e0       	ldi	r17, 0x00	; 0
    b8a8:	c5 01       	movw	r24, r10
    b8aa:	0e 94 dd 69 	call	0xd3ba	; 0xd3ba <ff_memfree>
    b8ae:	e5 cf       	rjmp	.-54     	; 0xb87a <f_open+0x332>
    b8b0:	e6 96       	adiw	r28, 0x36	; 54
    b8b2:	e2 e1       	ldi	r30, 0x12	; 18
    b8b4:	0c 94 c0 e8 	jmp	0x1d180	; 0x1d180 <__epilogue_restores__>

0000b8b8 <f_read>:
    b8b8:	a6 e0       	ldi	r26, 0x06	; 6
    b8ba:	b0 e0       	ldi	r27, 0x00	; 0
    b8bc:	e2 e6       	ldi	r30, 0x62	; 98
    b8be:	fc e5       	ldi	r31, 0x5C	; 92
    b8c0:	0c 94 a4 e8 	jmp	0x1d148	; 0x1d148 <__prologue_saves__>
    b8c4:	7c 01       	movw	r14, r24
    b8c6:	4b 01       	movw	r8, r22
    b8c8:	5a 01       	movw	r10, r20
    b8ca:	3e 83       	std	Y+6, r19	; 0x06
    b8cc:	2d 83       	std	Y+5, r18	; 0x05
    b8ce:	f9 01       	movw	r30, r18
    b8d0:	11 82       	std	Z+1, r1	; 0x01
    b8d2:	10 82       	st	Z, r1
    b8d4:	be 01       	movw	r22, r28
    b8d6:	6f 5f       	subi	r22, 0xFF	; 255
    b8d8:	7f 4f       	sbci	r23, 0xFF	; 255
    b8da:	0e 94 74 49 	call	0x92e8	; 0x92e8 <validate>
    b8de:	00 97       	sbiw	r24, 0x00	; 0
    b8e0:	09 f0       	breq	.+2      	; 0xb8e4 <f_read+0x2c>
    b8e2:	31 c1       	rjmp	.+610    	; 0xbb46 <f_read+0x28e>
    b8e4:	f7 01       	movw	r30, r14
    b8e6:	87 85       	ldd	r24, Z+15	; 0x0f
    b8e8:	90 e0       	ldi	r25, 0x00	; 0
    b8ea:	00 97       	sbiw	r24, 0x00	; 0
    b8ec:	09 f0       	breq	.+2      	; 0xb8f0 <f_read+0x38>
    b8ee:	2b c1       	rjmp	.+598    	; 0xbb46 <f_read+0x28e>
    b8f0:	86 85       	ldd	r24, Z+14	; 0x0e
    b8f2:	80 ff       	sbrs	r24, 0
    b8f4:	26 c1       	rjmp	.+588    	; 0xbb42 <f_read+0x28a>
    b8f6:	82 85       	ldd	r24, Z+10	; 0x0a
    b8f8:	93 85       	ldd	r25, Z+11	; 0x0b
    b8fa:	a4 85       	ldd	r26, Z+12	; 0x0c
    b8fc:	b5 85       	ldd	r27, Z+13	; 0x0d
    b8fe:	40 89       	ldd	r20, Z+16	; 0x10
    b900:	51 89       	ldd	r21, Z+17	; 0x11
    b902:	62 89       	ldd	r22, Z+18	; 0x12
    b904:	73 89       	ldd	r23, Z+19	; 0x13
    b906:	84 1b       	sub	r24, r20
    b908:	95 0b       	sbc	r25, r21
    b90a:	a6 0b       	sbc	r26, r22
    b90c:	b7 0b       	sbc	r27, r23
    b90e:	a5 01       	movw	r20, r10
    b910:	60 e0       	ldi	r22, 0x00	; 0
    b912:	70 e0       	ldi	r23, 0x00	; 0
    b914:	84 17       	cp	r24, r20
    b916:	95 07       	cpc	r25, r21
    b918:	a6 07       	cpc	r26, r22
    b91a:	b7 07       	cpc	r27, r23
    b91c:	08 f4       	brcc	.+2      	; 0xb920 <f_read+0x68>
    b91e:	5c 01       	movw	r10, r24
    b920:	17 01       	movw	r2, r14
    b922:	f4 e2       	ldi	r31, 0x24	; 36
    b924:	2f 0e       	add	r2, r31
    b926:	31 1c       	adc	r3, r1
    b928:	a1 14       	cp	r10, r1
    b92a:	b1 04       	cpc	r11, r1
    b92c:	09 f4       	brne	.+2      	; 0xb930 <f_read+0x78>
    b92e:	07 c1       	rjmp	.+526    	; 0xbb3e <f_read+0x286>
    b930:	f7 01       	movw	r30, r14
    b932:	40 89       	ldd	r20, Z+16	; 0x10
    b934:	51 89       	ldd	r21, Z+17	; 0x11
    b936:	62 89       	ldd	r22, Z+18	; 0x12
    b938:	73 89       	ldd	r23, Z+19	; 0x13
    b93a:	db 01       	movw	r26, r22
    b93c:	ca 01       	movw	r24, r20
    b93e:	91 70       	andi	r25, 0x01	; 1
    b940:	aa 27       	eor	r26, r26
    b942:	bb 27       	eor	r27, r27
    b944:	89 2b       	or	r24, r25
    b946:	8a 2b       	or	r24, r26
    b948:	8b 2b       	or	r24, r27
    b94a:	09 f0       	breq	.+2      	; 0xb94e <f_read+0x96>
    b94c:	cb c0       	rjmp	.+406    	; 0xbae4 <f_read+0x22c>
    b94e:	e9 81       	ldd	r30, Y+1	; 0x01
    b950:	fa 81       	ldd	r31, Y+2	; 0x02
    b952:	01 85       	ldd	r16, Z+9	; 0x09
    b954:	12 85       	ldd	r17, Z+10	; 0x0a
    b956:	01 50       	subi	r16, 0x01	; 1
    b958:	11 09       	sbc	r17, r1
    b95a:	db 01       	movw	r26, r22
    b95c:	ca 01       	movw	r24, r20
    b95e:	e9 e0       	ldi	r30, 0x09	; 9
    b960:	b6 95       	lsr	r27
    b962:	a7 95       	ror	r26
    b964:	97 95       	ror	r25
    b966:	87 95       	ror	r24
    b968:	ea 95       	dec	r30
    b96a:	d1 f7       	brne	.-12     	; 0xb960 <f_read+0xa8>
    b96c:	08 23       	and	r16, r24
    b96e:	19 23       	and	r17, r25
    b970:	01 15       	cp	r16, r1
    b972:	11 05       	cpc	r17, r1
    b974:	91 f5       	brne	.+100    	; 0xb9da <f_read+0x122>
    b976:	f7 01       	movw	r30, r14
    b978:	41 15       	cp	r20, r1
    b97a:	51 05       	cpc	r21, r1
    b97c:	61 05       	cpc	r22, r1
    b97e:	71 05       	cpc	r23, r1
    b980:	29 f4       	brne	.+10     	; 0xb98c <f_read+0xd4>
    b982:	66 81       	ldd	r22, Z+6	; 0x06
    b984:	77 81       	ldd	r23, Z+7	; 0x07
    b986:	80 85       	ldd	r24, Z+8	; 0x08
    b988:	91 85       	ldd	r25, Z+9	; 0x09
    b98a:	11 c0       	rjmp	.+34     	; 0xb9ae <f_read+0xf6>
    b98c:	82 a1       	ldd	r24, Z+34	; 0x22
    b98e:	93 a1       	ldd	r25, Z+35	; 0x23
    b990:	89 2b       	or	r24, r25
    b992:	21 f0       	breq	.+8      	; 0xb99c <f_read+0xe4>
    b994:	c7 01       	movw	r24, r14
    b996:	0e 94 fd 48 	call	0x91fa	; 0x91fa <clmt_clust>
    b99a:	09 c0       	rjmp	.+18     	; 0xb9ae <f_read+0xf6>
    b99c:	f7 01       	movw	r30, r14
    b99e:	44 89       	ldd	r20, Z+20	; 0x14
    b9a0:	55 89       	ldd	r21, Z+21	; 0x15
    b9a2:	66 89       	ldd	r22, Z+22	; 0x16
    b9a4:	77 89       	ldd	r23, Z+23	; 0x17
    b9a6:	80 81       	ld	r24, Z
    b9a8:	91 81       	ldd	r25, Z+1	; 0x01
    b9aa:	0e 94 32 50 	call	0xa064	; 0xa064 <get_fat.isra.9>
    b9ae:	62 30       	cpi	r22, 0x02	; 2
    b9b0:	71 05       	cpc	r23, r1
    b9b2:	81 05       	cpc	r24, r1
    b9b4:	91 05       	cpc	r25, r1
    b9b6:	10 f4       	brcc	.+4      	; 0xb9bc <f_read+0x104>
    b9b8:	82 e0       	ldi	r24, 0x02	; 2
    b9ba:	07 c0       	rjmp	.+14     	; 0xb9ca <f_read+0x112>
    b9bc:	6f 3f       	cpi	r22, 0xFF	; 255
    b9be:	ff ef       	ldi	r31, 0xFF	; 255
    b9c0:	7f 07       	cpc	r23, r31
    b9c2:	8f 07       	cpc	r24, r31
    b9c4:	9f 07       	cpc	r25, r31
    b9c6:	21 f4       	brne	.+8      	; 0xb9d0 <f_read+0x118>
    b9c8:	81 e0       	ldi	r24, 0x01	; 1
    b9ca:	f7 01       	movw	r30, r14
    b9cc:	87 87       	std	Z+15, r24	; 0x0f
    b9ce:	ba c0       	rjmp	.+372    	; 0xbb44 <f_read+0x28c>
    b9d0:	f7 01       	movw	r30, r14
    b9d2:	64 8b       	std	Z+20, r22	; 0x14
    b9d4:	75 8b       	std	Z+21, r23	; 0x15
    b9d6:	86 8b       	std	Z+22, r24	; 0x16
    b9d8:	97 8b       	std	Z+23, r25	; 0x17
    b9da:	89 81       	ldd	r24, Y+1	; 0x01
    b9dc:	9a 81       	ldd	r25, Y+2	; 0x02
    b9de:	9c 83       	std	Y+4, r25	; 0x04
    b9e0:	8b 83       	std	Y+3, r24	; 0x03
    b9e2:	f7 01       	movw	r30, r14
    b9e4:	44 89       	ldd	r20, Z+20	; 0x14
    b9e6:	55 89       	ldd	r21, Z+21	; 0x15
    b9e8:	66 89       	ldd	r22, Z+22	; 0x16
    b9ea:	77 89       	ldd	r23, Z+23	; 0x17
    b9ec:	0e 94 d5 48 	call	0x91aa	; 0x91aa <clst2sect>
    b9f0:	61 15       	cp	r22, r1
    b9f2:	71 05       	cpc	r23, r1
    b9f4:	81 05       	cpc	r24, r1
    b9f6:	91 05       	cpc	r25, r1
    b9f8:	f9 f2       	breq	.-66     	; 0xb9b8 <f_read+0x100>
    b9fa:	2b 01       	movw	r4, r22
    b9fc:	3c 01       	movw	r6, r24
    b9fe:	40 0e       	add	r4, r16
    ba00:	51 1e       	adc	r5, r17
    ba02:	61 1c       	adc	r6, r1
    ba04:	71 1c       	adc	r7, r1
    ba06:	65 01       	movw	r12, r10
    ba08:	cd 2c       	mov	r12, r13
    ba0a:	dd 24       	eor	r13, r13
    ba0c:	c6 94       	lsr	r12
    ba0e:	c1 14       	cp	r12, r1
    ba10:	d1 04       	cpc	r13, r1
    ba12:	d1 f1       	breq	.+116    	; 0xba88 <f_read+0x1d0>
    ba14:	eb 81       	ldd	r30, Y+3	; 0x03
    ba16:	fc 81       	ldd	r31, Y+4	; 0x04
    ba18:	81 85       	ldd	r24, Z+9	; 0x09
    ba1a:	92 85       	ldd	r25, Z+10	; 0x0a
    ba1c:	98 01       	movw	r18, r16
    ba1e:	2c 0d       	add	r18, r12
    ba20:	3d 1d       	adc	r19, r13
    ba22:	82 17       	cp	r24, r18
    ba24:	93 07       	cpc	r25, r19
    ba26:	18 f4       	brcc	.+6      	; 0xba2e <f_read+0x176>
    ba28:	6c 01       	movw	r12, r24
    ba2a:	c0 1a       	sub	r12, r16
    ba2c:	d1 0a       	sbc	r13, r17
    ba2e:	86 01       	movw	r16, r12
    ba30:	a3 01       	movw	r20, r6
    ba32:	92 01       	movw	r18, r4
    ba34:	b4 01       	movw	r22, r8
    ba36:	eb 81       	ldd	r30, Y+3	; 0x03
    ba38:	fc 81       	ldd	r31, Y+4	; 0x04
    ba3a:	81 81       	ldd	r24, Z+1	; 0x01
    ba3c:	0e 94 96 6a 	call	0xd52c	; 0xd52c <disk_read>
    ba40:	89 2b       	or	r24, r25
    ba42:	11 f6       	brne	.-124    	; 0xb9c8 <f_read+0x110>
    ba44:	f7 01       	movw	r30, r14
    ba46:	86 85       	ldd	r24, Z+14	; 0x0e
    ba48:	87 ff       	sbrs	r24, 7
    ba4a:	1a c0       	rjmp	.+52     	; 0xba80 <f_read+0x1c8>
    ba4c:	80 8d       	ldd	r24, Z+24	; 0x18
    ba4e:	91 8d       	ldd	r25, Z+25	; 0x19
    ba50:	a2 8d       	ldd	r26, Z+26	; 0x1a
    ba52:	b3 8d       	ldd	r27, Z+27	; 0x1b
    ba54:	84 19       	sub	r24, r4
    ba56:	95 09       	sbc	r25, r5
    ba58:	a6 09       	sbc	r26, r6
    ba5a:	b7 09       	sbc	r27, r7
    ba5c:	a6 01       	movw	r20, r12
    ba5e:	60 e0       	ldi	r22, 0x00	; 0
    ba60:	70 e0       	ldi	r23, 0x00	; 0
    ba62:	84 17       	cp	r24, r20
    ba64:	95 07       	cpc	r25, r21
    ba66:	a6 07       	cpc	r26, r22
    ba68:	b7 07       	cpc	r27, r23
    ba6a:	50 f4       	brcc	.+20     	; 0xba80 <f_read+0x1c8>
    ba6c:	98 2f       	mov	r25, r24
    ba6e:	88 27       	eor	r24, r24
    ba70:	99 0f       	add	r25, r25
    ba72:	40 e0       	ldi	r20, 0x00	; 0
    ba74:	52 e0       	ldi	r21, 0x02	; 2
    ba76:	b1 01       	movw	r22, r2
    ba78:	88 0d       	add	r24, r8
    ba7a:	99 1d       	adc	r25, r9
    ba7c:	0e 94 ca 4a 	call	0x9594	; 0x9594 <mem_cpy.part.0>
    ba80:	dc 2c       	mov	r13, r12
    ba82:	cc 24       	eor	r12, r12
    ba84:	dd 0c       	add	r13, r13
    ba86:	41 c0       	rjmp	.+130    	; 0xbb0a <f_read+0x252>
    ba88:	f7 01       	movw	r30, r14
    ba8a:	20 8d       	ldd	r18, Z+24	; 0x18
    ba8c:	31 8d       	ldd	r19, Z+25	; 0x19
    ba8e:	42 8d       	ldd	r20, Z+26	; 0x1a
    ba90:	53 8d       	ldd	r21, Z+27	; 0x1b
    ba92:	42 16       	cp	r4, r18
    ba94:	53 06       	cpc	r5, r19
    ba96:	64 06       	cpc	r6, r20
    ba98:	75 06       	cpc	r7, r21
    ba9a:	f9 f0       	breq	.+62     	; 0xbada <f_read+0x222>
    ba9c:	86 85       	ldd	r24, Z+14	; 0x0e
    ba9e:	87 ff       	sbrs	r24, 7
    baa0:	0f c0       	rjmp	.+30     	; 0xbac0 <f_read+0x208>
    baa2:	01 e0       	ldi	r16, 0x01	; 1
    baa4:	10 e0       	ldi	r17, 0x00	; 0
    baa6:	b1 01       	movw	r22, r2
    baa8:	eb 81       	ldd	r30, Y+3	; 0x03
    baaa:	fc 81       	ldd	r31, Y+4	; 0x04
    baac:	81 81       	ldd	r24, Z+1	; 0x01
    baae:	0e 94 a6 6a 	call	0xd54c	; 0xd54c <disk_write>
    bab2:	89 2b       	or	r24, r25
    bab4:	09 f0       	breq	.+2      	; 0xbab8 <f_read+0x200>
    bab6:	88 cf       	rjmp	.-240    	; 0xb9c8 <f_read+0x110>
    bab8:	f7 01       	movw	r30, r14
    baba:	86 85       	ldd	r24, Z+14	; 0x0e
    babc:	8f 77       	andi	r24, 0x7F	; 127
    babe:	86 87       	std	Z+14, r24	; 0x0e
    bac0:	e9 81       	ldd	r30, Y+1	; 0x01
    bac2:	fa 81       	ldd	r31, Y+2	; 0x02
    bac4:	01 e0       	ldi	r16, 0x01	; 1
    bac6:	10 e0       	ldi	r17, 0x00	; 0
    bac8:	a3 01       	movw	r20, r6
    baca:	92 01       	movw	r18, r4
    bacc:	b1 01       	movw	r22, r2
    bace:	81 81       	ldd	r24, Z+1	; 0x01
    bad0:	0e 94 96 6a 	call	0xd52c	; 0xd52c <disk_read>
    bad4:	89 2b       	or	r24, r25
    bad6:	09 f0       	breq	.+2      	; 0xbada <f_read+0x222>
    bad8:	77 cf       	rjmp	.-274    	; 0xb9c8 <f_read+0x110>
    bada:	f7 01       	movw	r30, r14
    badc:	40 8e       	std	Z+24, r4	; 0x18
    bade:	51 8e       	std	Z+25, r5	; 0x19
    bae0:	62 8e       	std	Z+26, r6	; 0x1a
    bae2:	73 8e       	std	Z+27, r7	; 0x1b
    bae4:	f7 01       	movw	r30, r14
    bae6:	60 89       	ldd	r22, Z+16	; 0x10
    bae8:	71 89       	ldd	r23, Z+17	; 0x11
    baea:	71 70       	andi	r23, 0x01	; 1
    baec:	80 e0       	ldi	r24, 0x00	; 0
    baee:	92 e0       	ldi	r25, 0x02	; 2
    baf0:	86 1b       	sub	r24, r22
    baf2:	97 0b       	sbc	r25, r23
    baf4:	65 01       	movw	r12, r10
    baf6:	8a 15       	cp	r24, r10
    baf8:	9b 05       	cpc	r25, r11
    bafa:	08 f4       	brcc	.+2      	; 0xbafe <f_read+0x246>
    bafc:	6c 01       	movw	r12, r24
    bafe:	62 0d       	add	r22, r2
    bb00:	73 1d       	adc	r23, r3
    bb02:	a6 01       	movw	r20, r12
    bb04:	c4 01       	movw	r24, r8
    bb06:	0e 94 ca 4a 	call	0x9594	; 0x9594 <mem_cpy.part.0>
    bb0a:	ac 18       	sub	r10, r12
    bb0c:	bd 08       	sbc	r11, r13
    bb0e:	ed 81       	ldd	r30, Y+5	; 0x05
    bb10:	fe 81       	ldd	r31, Y+6	; 0x06
    bb12:	80 81       	ld	r24, Z
    bb14:	91 81       	ldd	r25, Z+1	; 0x01
    bb16:	8c 0d       	add	r24, r12
    bb18:	9d 1d       	adc	r25, r13
    bb1a:	91 83       	std	Z+1, r25	; 0x01
    bb1c:	80 83       	st	Z, r24
    bb1e:	8c 0c       	add	r8, r12
    bb20:	9d 1c       	adc	r9, r13
    bb22:	f7 01       	movw	r30, r14
    bb24:	80 89       	ldd	r24, Z+16	; 0x10
    bb26:	91 89       	ldd	r25, Z+17	; 0x11
    bb28:	a2 89       	ldd	r26, Z+18	; 0x12
    bb2a:	b3 89       	ldd	r27, Z+19	; 0x13
    bb2c:	8c 0d       	add	r24, r12
    bb2e:	9d 1d       	adc	r25, r13
    bb30:	a1 1d       	adc	r26, r1
    bb32:	b1 1d       	adc	r27, r1
    bb34:	80 8b       	std	Z+16, r24	; 0x10
    bb36:	91 8b       	std	Z+17, r25	; 0x11
    bb38:	a2 8b       	std	Z+18, r26	; 0x12
    bb3a:	b3 8b       	std	Z+19, r27	; 0x13
    bb3c:	f5 ce       	rjmp	.-534    	; 0xb928 <f_read+0x70>
    bb3e:	80 e0       	ldi	r24, 0x00	; 0
    bb40:	01 c0       	rjmp	.+2      	; 0xbb44 <f_read+0x28c>
    bb42:	87 e0       	ldi	r24, 0x07	; 7
    bb44:	90 e0       	ldi	r25, 0x00	; 0
    bb46:	26 96       	adiw	r28, 0x06	; 6
    bb48:	e2 e1       	ldi	r30, 0x12	; 18
    bb4a:	0c 94 c0 e8 	jmp	0x1d180	; 0x1d180 <__epilogue_restores__>

0000bb4e <f_write>:
    bb4e:	a8 e0       	ldi	r26, 0x08	; 8
    bb50:	b0 e0       	ldi	r27, 0x00	; 0
    bb52:	ed ea       	ldi	r30, 0xAD	; 173
    bb54:	fd e5       	ldi	r31, 0x5D	; 93
    bb56:	0c 94 a4 e8 	jmp	0x1d148	; 0x1d148 <__prologue_saves__>
    bb5a:	7c 01       	movw	r14, r24
    bb5c:	3b 01       	movw	r6, r22
    bb5e:	5a 01       	movw	r10, r20
    bb60:	38 87       	std	Y+8, r19	; 0x08
    bb62:	2f 83       	std	Y+7, r18	; 0x07
    bb64:	f9 01       	movw	r30, r18
    bb66:	11 82       	std	Z+1, r1	; 0x01
    bb68:	10 82       	st	Z, r1
    bb6a:	be 01       	movw	r22, r28
    bb6c:	6f 5f       	subi	r22, 0xFF	; 255
    bb6e:	7f 4f       	sbci	r23, 0xFF	; 255
    bb70:	0e 94 74 49 	call	0x92e8	; 0x92e8 <validate>
    bb74:	00 97       	sbiw	r24, 0x00	; 0
    bb76:	09 f0       	breq	.+2      	; 0xbb7a <f_write+0x2c>
    bb78:	7d c1       	rjmp	.+762    	; 0xbe74 <f_write+0x326>
    bb7a:	f7 01       	movw	r30, r14
    bb7c:	87 85       	ldd	r24, Z+15	; 0x0f
    bb7e:	90 e0       	ldi	r25, 0x00	; 0
    bb80:	00 97       	sbiw	r24, 0x00	; 0
    bb82:	09 f0       	breq	.+2      	; 0xbb86 <f_write+0x38>
    bb84:	77 c1       	rjmp	.+750    	; 0xbe74 <f_write+0x326>
    bb86:	86 85       	ldd	r24, Z+14	; 0x0e
    bb88:	81 ff       	sbrs	r24, 1
    bb8a:	72 c1       	rjmp	.+740    	; 0xbe70 <f_write+0x322>
    bb8c:	80 89       	ldd	r24, Z+16	; 0x10
    bb8e:	91 89       	ldd	r25, Z+17	; 0x11
    bb90:	a2 89       	ldd	r26, Z+18	; 0x12
    bb92:	b3 89       	ldd	r27, Z+19	; 0x13
    bb94:	ac 01       	movw	r20, r24
    bb96:	bd 01       	movw	r22, r26
    bb98:	4a 0d       	add	r20, r10
    bb9a:	5b 1d       	adc	r21, r11
    bb9c:	61 1d       	adc	r22, r1
    bb9e:	71 1d       	adc	r23, r1
    bba0:	48 17       	cp	r20, r24
    bba2:	59 07       	cpc	r21, r25
    bba4:	6a 07       	cpc	r22, r26
    bba6:	7b 07       	cpc	r23, r27
    bba8:	18 f4       	brcc	.+6      	; 0xbbb0 <f_write+0x62>
    bbaa:	5c 01       	movw	r10, r24
    bbac:	a0 94       	com	r10
    bbae:	b0 94       	com	r11
    bbb0:	97 01       	movw	r18, r14
    bbb2:	2c 5d       	subi	r18, 0xDC	; 220
    bbb4:	3f 4f       	sbci	r19, 0xFF	; 255
    bbb6:	3e 83       	std	Y+6, r19	; 0x06
    bbb8:	2d 83       	std	Y+5, r18	; 0x05
    bbba:	a1 14       	cp	r10, r1
    bbbc:	b1 04       	cpc	r11, r1
    bbbe:	09 f4       	brne	.+2      	; 0xbbc2 <f_write+0x74>
    bbc0:	4d c0       	rjmp	.+154    	; 0xbc5c <f_write+0x10e>
    bbc2:	f7 01       	movw	r30, r14
    bbc4:	40 89       	ldd	r20, Z+16	; 0x10
    bbc6:	51 89       	ldd	r21, Z+17	; 0x11
    bbc8:	62 89       	ldd	r22, Z+18	; 0x12
    bbca:	73 89       	ldd	r23, Z+19	; 0x13
    bbcc:	db 01       	movw	r26, r22
    bbce:	ca 01       	movw	r24, r20
    bbd0:	91 70       	andi	r25, 0x01	; 1
    bbd2:	aa 27       	eor	r26, r26
    bbd4:	bb 27       	eor	r27, r27
    bbd6:	89 2b       	or	r24, r25
    bbd8:	8a 2b       	or	r24, r26
    bbda:	8b 2b       	or	r24, r27
    bbdc:	09 f0       	breq	.+2      	; 0xbbe0 <f_write+0x92>
    bbde:	05 c1       	rjmp	.+522    	; 0xbdea <f_write+0x29c>
    bbe0:	e9 81       	ldd	r30, Y+1	; 0x01
    bbe2:	fa 81       	ldd	r31, Y+2	; 0x02
    bbe4:	81 84       	ldd	r8, Z+9	; 0x09
    bbe6:	92 84       	ldd	r9, Z+10	; 0x0a
    bbe8:	f1 e0       	ldi	r31, 0x01	; 1
    bbea:	8f 1a       	sub	r8, r31
    bbec:	91 08       	sbc	r9, r1
    bbee:	db 01       	movw	r26, r22
    bbf0:	ca 01       	movw	r24, r20
    bbf2:	e9 e0       	ldi	r30, 0x09	; 9
    bbf4:	b6 95       	lsr	r27
    bbf6:	a7 95       	ror	r26
    bbf8:	97 95       	ror	r25
    bbfa:	87 95       	ror	r24
    bbfc:	ea 95       	dec	r30
    bbfe:	d1 f7       	brne	.-12     	; 0xbbf4 <f_write+0xa6>
    bc00:	88 22       	and	r8, r24
    bc02:	99 22       	and	r9, r25
    bc04:	81 14       	cp	r8, r1
    bc06:	91 04       	cpc	r9, r1
    bc08:	09 f0       	breq	.+2      	; 0xbc0c <f_write+0xbe>
    bc0a:	51 c0       	rjmp	.+162    	; 0xbcae <f_write+0x160>
    bc0c:	f7 01       	movw	r30, r14
    bc0e:	41 15       	cp	r20, r1
    bc10:	51 05       	cpc	r21, r1
    bc12:	61 05       	cpc	r22, r1
    bc14:	71 05       	cpc	r23, r1
    bc16:	69 f4       	brne	.+26     	; 0xbc32 <f_write+0xe4>
    bc18:	66 81       	ldd	r22, Z+6	; 0x06
    bc1a:	77 81       	ldd	r23, Z+7	; 0x07
    bc1c:	80 85       	ldd	r24, Z+8	; 0x08
    bc1e:	91 85       	ldd	r25, Z+9	; 0x09
    bc20:	61 15       	cp	r22, r1
    bc22:	71 05       	cpc	r23, r1
    bc24:	81 05       	cpc	r24, r1
    bc26:	91 05       	cpc	r25, r1
    bc28:	f9 f4       	brne	.+62     	; 0xbc68 <f_write+0x11a>
    bc2a:	40 e0       	ldi	r20, 0x00	; 0
    bc2c:	50 e0       	ldi	r21, 0x00	; 0
    bc2e:	ba 01       	movw	r22, r20
    bc30:	0d c0       	rjmp	.+26     	; 0xbc4c <f_write+0xfe>
    bc32:	82 a1       	ldd	r24, Z+34	; 0x22
    bc34:	93 a1       	ldd	r25, Z+35	; 0x23
    bc36:	89 2b       	or	r24, r25
    bc38:	21 f0       	breq	.+8      	; 0xbc42 <f_write+0xf4>
    bc3a:	c7 01       	movw	r24, r14
    bc3c:	0e 94 fd 48 	call	0x91fa	; 0x91fa <clmt_clust>
    bc40:	08 c0       	rjmp	.+16     	; 0xbc52 <f_write+0x104>
    bc42:	f7 01       	movw	r30, r14
    bc44:	44 89       	ldd	r20, Z+20	; 0x14
    bc46:	55 89       	ldd	r21, Z+21	; 0x15
    bc48:	66 89       	ldd	r22, Z+22	; 0x16
    bc4a:	77 89       	ldd	r23, Z+23	; 0x17
    bc4c:	c7 01       	movw	r24, r14
    bc4e:	0e 94 a7 51 	call	0xa34e	; 0xa34e <create_chain>
    bc52:	61 15       	cp	r22, r1
    bc54:	71 05       	cpc	r23, r1
    bc56:	81 05       	cpc	r24, r1
    bc58:	91 05       	cpc	r25, r1
    bc5a:	31 f4       	brne	.+12     	; 0xbc68 <f_write+0x11a>
    bc5c:	f7 01       	movw	r30, r14
    bc5e:	86 85       	ldd	r24, Z+14	; 0x0e
    bc60:	80 64       	ori	r24, 0x40	; 64
    bc62:	86 87       	std	Z+14, r24	; 0x0e
    bc64:	80 e0       	ldi	r24, 0x00	; 0
    bc66:	05 c1       	rjmp	.+522    	; 0xbe72 <f_write+0x324>
    bc68:	61 30       	cpi	r22, 0x01	; 1
    bc6a:	71 05       	cpc	r23, r1
    bc6c:	81 05       	cpc	r24, r1
    bc6e:	91 05       	cpc	r25, r1
    bc70:	11 f4       	brne	.+4      	; 0xbc76 <f_write+0x128>
    bc72:	82 e0       	ldi	r24, 0x02	; 2
    bc74:	07 c0       	rjmp	.+14     	; 0xbc84 <f_write+0x136>
    bc76:	6f 3f       	cpi	r22, 0xFF	; 255
    bc78:	ff ef       	ldi	r31, 0xFF	; 255
    bc7a:	7f 07       	cpc	r23, r31
    bc7c:	8f 07       	cpc	r24, r31
    bc7e:	9f 07       	cpc	r25, r31
    bc80:	21 f4       	brne	.+8      	; 0xbc8a <f_write+0x13c>
    bc82:	81 e0       	ldi	r24, 0x01	; 1
    bc84:	f7 01       	movw	r30, r14
    bc86:	87 87       	std	Z+15, r24	; 0x0f
    bc88:	f4 c0       	rjmp	.+488    	; 0xbe72 <f_write+0x324>
    bc8a:	f7 01       	movw	r30, r14
    bc8c:	64 8b       	std	Z+20, r22	; 0x14
    bc8e:	75 8b       	std	Z+21, r23	; 0x15
    bc90:	86 8b       	std	Z+22, r24	; 0x16
    bc92:	97 8b       	std	Z+23, r25	; 0x17
    bc94:	06 81       	ldd	r16, Z+6	; 0x06
    bc96:	17 81       	ldd	r17, Z+7	; 0x07
    bc98:	20 85       	ldd	r18, Z+8	; 0x08
    bc9a:	31 85       	ldd	r19, Z+9	; 0x09
    bc9c:	01 15       	cp	r16, r1
    bc9e:	11 05       	cpc	r17, r1
    bca0:	21 05       	cpc	r18, r1
    bca2:	31 05       	cpc	r19, r1
    bca4:	21 f4       	brne	.+8      	; 0xbcae <f_write+0x160>
    bca6:	66 83       	std	Z+6, r22	; 0x06
    bca8:	77 83       	std	Z+7, r23	; 0x07
    bcaa:	80 87       	std	Z+8, r24	; 0x08
    bcac:	91 87       	std	Z+9, r25	; 0x09
    bcae:	f7 01       	movw	r30, r14
    bcb0:	86 85       	ldd	r24, Z+14	; 0x0e
    bcb2:	87 ff       	sbrs	r24, 7
    bcb4:	13 c0       	rjmp	.+38     	; 0xbcdc <f_write+0x18e>
    bcb6:	20 8d       	ldd	r18, Z+24	; 0x18
    bcb8:	31 8d       	ldd	r19, Z+25	; 0x19
    bcba:	42 8d       	ldd	r20, Z+26	; 0x1a
    bcbc:	53 8d       	ldd	r21, Z+27	; 0x1b
    bcbe:	e9 81       	ldd	r30, Y+1	; 0x01
    bcc0:	fa 81       	ldd	r31, Y+2	; 0x02
    bcc2:	01 e0       	ldi	r16, 0x01	; 1
    bcc4:	10 e0       	ldi	r17, 0x00	; 0
    bcc6:	6d 81       	ldd	r22, Y+5	; 0x05
    bcc8:	7e 81       	ldd	r23, Y+6	; 0x06
    bcca:	81 81       	ldd	r24, Z+1	; 0x01
    bccc:	0e 94 a6 6a 	call	0xd54c	; 0xd54c <disk_write>
    bcd0:	89 2b       	or	r24, r25
    bcd2:	b9 f6       	brne	.-82     	; 0xbc82 <f_write+0x134>
    bcd4:	f7 01       	movw	r30, r14
    bcd6:	86 85       	ldd	r24, Z+14	; 0x0e
    bcd8:	8f 77       	andi	r24, 0x7F	; 127
    bcda:	86 87       	std	Z+14, r24	; 0x0e
    bcdc:	29 81       	ldd	r18, Y+1	; 0x01
    bcde:	3a 81       	ldd	r19, Y+2	; 0x02
    bce0:	3c 83       	std	Y+4, r19	; 0x04
    bce2:	2b 83       	std	Y+3, r18	; 0x03
    bce4:	f7 01       	movw	r30, r14
    bce6:	44 89       	ldd	r20, Z+20	; 0x14
    bce8:	55 89       	ldd	r21, Z+21	; 0x15
    bcea:	66 89       	ldd	r22, Z+22	; 0x16
    bcec:	77 89       	ldd	r23, Z+23	; 0x17
    bcee:	c9 01       	movw	r24, r18
    bcf0:	0e 94 d5 48 	call	0x91aa	; 0x91aa <clst2sect>
    bcf4:	61 15       	cp	r22, r1
    bcf6:	71 05       	cpc	r23, r1
    bcf8:	81 05       	cpc	r24, r1
    bcfa:	91 05       	cpc	r25, r1
    bcfc:	09 f4       	brne	.+2      	; 0xbd00 <f_write+0x1b2>
    bcfe:	b9 cf       	rjmp	.-142    	; 0xbc72 <f_write+0x124>
    bd00:	1b 01       	movw	r2, r22
    bd02:	2c 01       	movw	r4, r24
    bd04:	28 0c       	add	r2, r8
    bd06:	39 1c       	adc	r3, r9
    bd08:	41 1c       	adc	r4, r1
    bd0a:	51 1c       	adc	r5, r1
    bd0c:	65 01       	movw	r12, r10
    bd0e:	cd 2c       	mov	r12, r13
    bd10:	dd 24       	eor	r13, r13
    bd12:	c6 94       	lsr	r12
    bd14:	c1 14       	cp	r12, r1
    bd16:	d1 04       	cpc	r13, r1
    bd18:	f1 f1       	breq	.+124    	; 0xbd96 <f_write+0x248>
    bd1a:	eb 81       	ldd	r30, Y+3	; 0x03
    bd1c:	fc 81       	ldd	r31, Y+4	; 0x04
    bd1e:	81 85       	ldd	r24, Z+9	; 0x09
    bd20:	92 85       	ldd	r25, Z+10	; 0x0a
    bd22:	94 01       	movw	r18, r8
    bd24:	2c 0d       	add	r18, r12
    bd26:	3d 1d       	adc	r19, r13
    bd28:	82 17       	cp	r24, r18
    bd2a:	93 07       	cpc	r25, r19
    bd2c:	18 f4       	brcc	.+6      	; 0xbd34 <f_write+0x1e6>
    bd2e:	6c 01       	movw	r12, r24
    bd30:	c8 18       	sub	r12, r8
    bd32:	d9 08       	sbc	r13, r9
    bd34:	86 01       	movw	r16, r12
    bd36:	a2 01       	movw	r20, r4
    bd38:	91 01       	movw	r18, r2
    bd3a:	b3 01       	movw	r22, r6
    bd3c:	eb 81       	ldd	r30, Y+3	; 0x03
    bd3e:	fc 81       	ldd	r31, Y+4	; 0x04
    bd40:	81 81       	ldd	r24, Z+1	; 0x01
    bd42:	0e 94 a6 6a 	call	0xd54c	; 0xd54c <disk_write>
    bd46:	89 2b       	or	r24, r25
    bd48:	09 f0       	breq	.+2      	; 0xbd4c <f_write+0x1fe>
    bd4a:	9b cf       	rjmp	.-202    	; 0xbc82 <f_write+0x134>
    bd4c:	f7 01       	movw	r30, r14
    bd4e:	80 8d       	ldd	r24, Z+24	; 0x18
    bd50:	91 8d       	ldd	r25, Z+25	; 0x19
    bd52:	a2 8d       	ldd	r26, Z+26	; 0x1a
    bd54:	b3 8d       	ldd	r27, Z+27	; 0x1b
    bd56:	82 19       	sub	r24, r2
    bd58:	93 09       	sbc	r25, r3
    bd5a:	a4 09       	sbc	r26, r4
    bd5c:	b5 09       	sbc	r27, r5
    bd5e:	a6 01       	movw	r20, r12
    bd60:	60 e0       	ldi	r22, 0x00	; 0
    bd62:	70 e0       	ldi	r23, 0x00	; 0
    bd64:	84 17       	cp	r24, r20
    bd66:	95 07       	cpc	r25, r21
    bd68:	a6 07       	cpc	r26, r22
    bd6a:	b7 07       	cpc	r27, r23
    bd6c:	80 f4       	brcc	.+32     	; 0xbd8e <f_write+0x240>
    bd6e:	98 2f       	mov	r25, r24
    bd70:	88 27       	eor	r24, r24
    bd72:	99 0f       	add	r25, r25
    bd74:	b3 01       	movw	r22, r6
    bd76:	68 0f       	add	r22, r24
    bd78:	79 1f       	adc	r23, r25
    bd7a:	40 e0       	ldi	r20, 0x00	; 0
    bd7c:	52 e0       	ldi	r21, 0x02	; 2
    bd7e:	8d 81       	ldd	r24, Y+5	; 0x05
    bd80:	9e 81       	ldd	r25, Y+6	; 0x06
    bd82:	0e 94 ca 4a 	call	0x9594	; 0x9594 <mem_cpy.part.0>
    bd86:	f7 01       	movw	r30, r14
    bd88:	86 85       	ldd	r24, Z+14	; 0x0e
    bd8a:	8f 77       	andi	r24, 0x7F	; 127
    bd8c:	86 87       	std	Z+14, r24	; 0x0e
    bd8e:	dc 2c       	mov	r13, r12
    bd90:	cc 24       	eor	r12, r12
    bd92:	dd 0c       	add	r13, r13
    bd94:	43 c0       	rjmp	.+134    	; 0xbe1c <f_write+0x2ce>
    bd96:	f7 01       	movw	r30, r14
    bd98:	80 8d       	ldd	r24, Z+24	; 0x18
    bd9a:	91 8d       	ldd	r25, Z+25	; 0x19
    bd9c:	a2 8d       	ldd	r26, Z+26	; 0x1a
    bd9e:	b3 8d       	ldd	r27, Z+27	; 0x1b
    bda0:	28 16       	cp	r2, r24
    bda2:	39 06       	cpc	r3, r25
    bda4:	4a 06       	cpc	r4, r26
    bda6:	5b 06       	cpc	r5, r27
    bda8:	d9 f0       	breq	.+54     	; 0xbde0 <f_write+0x292>
    bdaa:	40 89       	ldd	r20, Z+16	; 0x10
    bdac:	51 89       	ldd	r21, Z+17	; 0x11
    bdae:	62 89       	ldd	r22, Z+18	; 0x12
    bdb0:	73 89       	ldd	r23, Z+19	; 0x13
    bdb2:	82 85       	ldd	r24, Z+10	; 0x0a
    bdb4:	93 85       	ldd	r25, Z+11	; 0x0b
    bdb6:	a4 85       	ldd	r26, Z+12	; 0x0c
    bdb8:	b5 85       	ldd	r27, Z+13	; 0x0d
    bdba:	48 17       	cp	r20, r24
    bdbc:	59 07       	cpc	r21, r25
    bdbe:	6a 07       	cpc	r22, r26
    bdc0:	7b 07       	cpc	r23, r27
    bdc2:	70 f4       	brcc	.+28     	; 0xbde0 <f_write+0x292>
    bdc4:	01 e0       	ldi	r16, 0x01	; 1
    bdc6:	10 e0       	ldi	r17, 0x00	; 0
    bdc8:	a2 01       	movw	r20, r4
    bdca:	91 01       	movw	r18, r2
    bdcc:	6d 81       	ldd	r22, Y+5	; 0x05
    bdce:	7e 81       	ldd	r23, Y+6	; 0x06
    bdd0:	eb 81       	ldd	r30, Y+3	; 0x03
    bdd2:	fc 81       	ldd	r31, Y+4	; 0x04
    bdd4:	81 81       	ldd	r24, Z+1	; 0x01
    bdd6:	0e 94 96 6a 	call	0xd52c	; 0xd52c <disk_read>
    bdda:	89 2b       	or	r24, r25
    bddc:	09 f0       	breq	.+2      	; 0xbde0 <f_write+0x292>
    bdde:	51 cf       	rjmp	.-350    	; 0xbc82 <f_write+0x134>
    bde0:	f7 01       	movw	r30, r14
    bde2:	20 8e       	std	Z+24, r2	; 0x18
    bde4:	31 8e       	std	Z+25, r3	; 0x19
    bde6:	42 8e       	std	Z+26, r4	; 0x1a
    bde8:	53 8e       	std	Z+27, r5	; 0x1b
    bdea:	f7 01       	movw	r30, r14
    bdec:	80 89       	ldd	r24, Z+16	; 0x10
    bdee:	91 89       	ldd	r25, Z+17	; 0x11
    bdf0:	91 70       	andi	r25, 0x01	; 1
    bdf2:	20 e0       	ldi	r18, 0x00	; 0
    bdf4:	32 e0       	ldi	r19, 0x02	; 2
    bdf6:	28 1b       	sub	r18, r24
    bdf8:	39 0b       	sbc	r19, r25
    bdfa:	65 01       	movw	r12, r10
    bdfc:	2a 15       	cp	r18, r10
    bdfe:	3b 05       	cpc	r19, r11
    be00:	08 f4       	brcc	.+2      	; 0xbe04 <f_write+0x2b6>
    be02:	69 01       	movw	r12, r18
    be04:	a6 01       	movw	r20, r12
    be06:	b3 01       	movw	r22, r6
    be08:	2d 81       	ldd	r18, Y+5	; 0x05
    be0a:	3e 81       	ldd	r19, Y+6	; 0x06
    be0c:	82 0f       	add	r24, r18
    be0e:	93 1f       	adc	r25, r19
    be10:	0e 94 ca 4a 	call	0x9594	; 0x9594 <mem_cpy.part.0>
    be14:	f7 01       	movw	r30, r14
    be16:	86 85       	ldd	r24, Z+14	; 0x0e
    be18:	80 68       	ori	r24, 0x80	; 128
    be1a:	86 87       	std	Z+14, r24	; 0x0e
    be1c:	ac 18       	sub	r10, r12
    be1e:	bd 08       	sbc	r11, r13
    be20:	ef 81       	ldd	r30, Y+7	; 0x07
    be22:	f8 85       	ldd	r31, Y+8	; 0x08
    be24:	80 81       	ld	r24, Z
    be26:	91 81       	ldd	r25, Z+1	; 0x01
    be28:	8c 0d       	add	r24, r12
    be2a:	9d 1d       	adc	r25, r13
    be2c:	91 83       	std	Z+1, r25	; 0x01
    be2e:	80 83       	st	Z, r24
    be30:	6c 0c       	add	r6, r12
    be32:	7d 1c       	adc	r7, r13
    be34:	f7 01       	movw	r30, r14
    be36:	80 89       	ldd	r24, Z+16	; 0x10
    be38:	91 89       	ldd	r25, Z+17	; 0x11
    be3a:	a2 89       	ldd	r26, Z+18	; 0x12
    be3c:	b3 89       	ldd	r27, Z+19	; 0x13
    be3e:	8c 0d       	add	r24, r12
    be40:	9d 1d       	adc	r25, r13
    be42:	a1 1d       	adc	r26, r1
    be44:	b1 1d       	adc	r27, r1
    be46:	80 8b       	std	Z+16, r24	; 0x10
    be48:	91 8b       	std	Z+17, r25	; 0x11
    be4a:	a2 8b       	std	Z+18, r26	; 0x12
    be4c:	b3 8b       	std	Z+19, r27	; 0x13
    be4e:	42 85       	ldd	r20, Z+10	; 0x0a
    be50:	53 85       	ldd	r21, Z+11	; 0x0b
    be52:	64 85       	ldd	r22, Z+12	; 0x0c
    be54:	75 85       	ldd	r23, Z+13	; 0x0d
    be56:	48 17       	cp	r20, r24
    be58:	59 07       	cpc	r21, r25
    be5a:	6a 07       	cpc	r22, r26
    be5c:	7b 07       	cpc	r23, r27
    be5e:	10 f4       	brcc	.+4      	; 0xbe64 <f_write+0x316>
    be60:	ac 01       	movw	r20, r24
    be62:	bd 01       	movw	r22, r26
    be64:	f7 01       	movw	r30, r14
    be66:	42 87       	std	Z+10, r20	; 0x0a
    be68:	53 87       	std	Z+11, r21	; 0x0b
    be6a:	64 87       	std	Z+12, r22	; 0x0c
    be6c:	75 87       	std	Z+13, r23	; 0x0d
    be6e:	a5 ce       	rjmp	.-694    	; 0xbbba <f_write+0x6c>
    be70:	87 e0       	ldi	r24, 0x07	; 7
    be72:	90 e0       	ldi	r25, 0x00	; 0
    be74:	28 96       	adiw	r28, 0x08	; 8
    be76:	e2 e1       	ldi	r30, 0x12	; 18
    be78:	0c 94 c0 e8 	jmp	0x1d180	; 0x1d180 <__epilogue_restores__>

0000be7c <f_sync>:
    be7c:	8f 92       	push	r8
    be7e:	9f 92       	push	r9
    be80:	af 92       	push	r10
    be82:	bf 92       	push	r11
    be84:	ef 92       	push	r14
    be86:	ff 92       	push	r15
    be88:	0f 93       	push	r16
    be8a:	1f 93       	push	r17
    be8c:	cf 93       	push	r28
    be8e:	df 93       	push	r29
    be90:	00 d0       	rcall	.+0      	; 0xbe92 <f_sync+0x16>
    be92:	cd b7       	in	r28, 0x3d	; 61
    be94:	de b7       	in	r29, 0x3e	; 62
    be96:	7c 01       	movw	r14, r24
    be98:	be 01       	movw	r22, r28
    be9a:	6f 5f       	subi	r22, 0xFF	; 255
    be9c:	7f 4f       	sbci	r23, 0xFF	; 255
    be9e:	0e 94 74 49 	call	0x92e8	; 0x92e8 <validate>
    bea2:	00 97       	sbiw	r24, 0x00	; 0
    bea4:	09 f0       	breq	.+2      	; 0xbea8 <f_sync+0x2c>
    bea6:	5d c0       	rjmp	.+186    	; 0xbf62 <f_sync+0xe6>
    bea8:	f7 01       	movw	r30, r14
    beaa:	86 85       	ldd	r24, Z+14	; 0x0e
    beac:	86 ff       	sbrs	r24, 6
    beae:	55 c0       	rjmp	.+170    	; 0xbf5a <f_sync+0xde>
    beb0:	87 ff       	sbrs	r24, 7
    beb2:	15 c0       	rjmp	.+42     	; 0xbede <f_sync+0x62>
    beb4:	20 8d       	ldd	r18, Z+24	; 0x18
    beb6:	31 8d       	ldd	r19, Z+25	; 0x19
    beb8:	42 8d       	ldd	r20, Z+26	; 0x1a
    beba:	53 8d       	ldd	r21, Z+27	; 0x1b
    bebc:	e9 81       	ldd	r30, Y+1	; 0x01
    bebe:	fa 81       	ldd	r31, Y+2	; 0x02
    bec0:	01 e0       	ldi	r16, 0x01	; 1
    bec2:	10 e0       	ldi	r17, 0x00	; 0
    bec4:	b7 01       	movw	r22, r14
    bec6:	6c 5d       	subi	r22, 0xDC	; 220
    bec8:	7f 4f       	sbci	r23, 0xFF	; 255
    beca:	81 81       	ldd	r24, Z+1	; 0x01
    becc:	0e 94 a6 6a 	call	0xd54c	; 0xd54c <disk_write>
    bed0:	89 2b       	or	r24, r25
    bed2:	09 f0       	breq	.+2      	; 0xbed6 <f_sync+0x5a>
    bed4:	44 c0       	rjmp	.+136    	; 0xbf5e <f_sync+0xe2>
    bed6:	f7 01       	movw	r30, r14
    bed8:	86 85       	ldd	r24, Z+14	; 0x0e
    beda:	8f 77       	andi	r24, 0x7F	; 127
    bedc:	86 87       	std	Z+14, r24	; 0x0e
    bede:	0e 94 cb 71 	call	0xe396	; 0xe396 <get_fattime>
    bee2:	4b 01       	movw	r8, r22
    bee4:	5c 01       	movw	r10, r24
    bee6:	f7 01       	movw	r30, r14
    bee8:	44 8d       	ldd	r20, Z+28	; 0x1c
    beea:	55 8d       	ldd	r21, Z+29	; 0x1d
    beec:	66 8d       	ldd	r22, Z+30	; 0x1e
    beee:	77 8d       	ldd	r23, Z+31	; 0x1f
    bef0:	89 81       	ldd	r24, Y+1	; 0x01
    bef2:	9a 81       	ldd	r25, Y+2	; 0x02
    bef4:	0e 94 64 4c 	call	0x98c8	; 0x98c8 <move_window>
    bef8:	00 97       	sbiw	r24, 0x00	; 0
    befa:	99 f5       	brne	.+102    	; 0xbf62 <f_sync+0xe6>
    befc:	f7 01       	movw	r30, r14
    befe:	00 a1       	ldd	r16, Z+32	; 0x20
    bf00:	11 a1       	ldd	r17, Z+33	; 0x21
    bf02:	f8 01       	movw	r30, r16
    bf04:	83 85       	ldd	r24, Z+11	; 0x0b
    bf06:	80 62       	ori	r24, 0x20	; 32
    bf08:	83 87       	std	Z+11, r24	; 0x0b
    bf0a:	f7 01       	movw	r30, r14
    bf0c:	26 81       	ldd	r18, Z+6	; 0x06
    bf0e:	37 81       	ldd	r19, Z+7	; 0x07
    bf10:	40 85       	ldd	r20, Z+8	; 0x08
    bf12:	51 85       	ldd	r21, Z+9	; 0x09
    bf14:	b8 01       	movw	r22, r16
    bf16:	80 81       	ld	r24, Z
    bf18:	91 81       	ldd	r25, Z+1	; 0x01
    bf1a:	0e 94 ea 4a 	call	0x95d4	; 0x95d4 <st_clust.isra.4>
    bf1e:	f7 01       	movw	r30, r14
    bf20:	42 85       	ldd	r20, Z+10	; 0x0a
    bf22:	53 85       	ldd	r21, Z+11	; 0x0b
    bf24:	64 85       	ldd	r22, Z+12	; 0x0c
    bf26:	75 85       	ldd	r23, Z+13	; 0x0d
    bf28:	c8 01       	movw	r24, r16
    bf2a:	4c 96       	adiw	r24, 0x1c	; 28
    bf2c:	0e 94 b7 48 	call	0x916e	; 0x916e <st_dword>
    bf30:	b5 01       	movw	r22, r10
    bf32:	a4 01       	movw	r20, r8
    bf34:	c8 01       	movw	r24, r16
    bf36:	46 96       	adiw	r24, 0x16	; 22
    bf38:	0e 94 b7 48 	call	0x916e	; 0x916e <st_dword>
    bf3c:	f8 01       	movw	r30, r16
    bf3e:	12 8a       	std	Z+18, r1	; 0x12
    bf40:	13 8a       	std	Z+19, r1	; 0x13
    bf42:	89 81       	ldd	r24, Y+1	; 0x01
    bf44:	9a 81       	ldd	r25, Y+2	; 0x02
    bf46:	21 e0       	ldi	r18, 0x01	; 1
    bf48:	fc 01       	movw	r30, r24
    bf4a:	23 83       	std	Z+3, r18	; 0x03
    bf4c:	0e 94 4a 4b 	call	0x9694	; 0x9694 <sync_fs>
    bf50:	f7 01       	movw	r30, r14
    bf52:	26 85       	ldd	r18, Z+14	; 0x0e
    bf54:	2f 7b       	andi	r18, 0xBF	; 191
    bf56:	26 87       	std	Z+14, r18	; 0x0e
    bf58:	04 c0       	rjmp	.+8      	; 0xbf62 <f_sync+0xe6>
    bf5a:	80 e0       	ldi	r24, 0x00	; 0
    bf5c:	01 c0       	rjmp	.+2      	; 0xbf60 <f_sync+0xe4>
    bf5e:	81 e0       	ldi	r24, 0x01	; 1
    bf60:	90 e0       	ldi	r25, 0x00	; 0
    bf62:	0f 90       	pop	r0
    bf64:	0f 90       	pop	r0
    bf66:	df 91       	pop	r29
    bf68:	cf 91       	pop	r28
    bf6a:	1f 91       	pop	r17
    bf6c:	0f 91       	pop	r16
    bf6e:	ff 90       	pop	r15
    bf70:	ef 90       	pop	r14
    bf72:	bf 90       	pop	r11
    bf74:	af 90       	pop	r10
    bf76:	9f 90       	pop	r9
    bf78:	8f 90       	pop	r8
    bf7a:	08 95       	ret

0000bf7c <f_close>:
    bf7c:	a2 e0       	ldi	r26, 0x02	; 2
    bf7e:	b0 e0       	ldi	r27, 0x00	; 0
    bf80:	e4 ec       	ldi	r30, 0xC4	; 196
    bf82:	ff e5       	ldi	r31, 0x5F	; 95
    bf84:	0c 94 b2 e8 	jmp	0x1d164	; 0x1d164 <__prologue_saves__+0x1c>
    bf88:	8c 01       	movw	r16, r24
    bf8a:	78 df       	rcall	.-272    	; 0xbe7c <f_sync>
    bf8c:	00 97       	sbiw	r24, 0x00	; 0
    bf8e:	59 f4       	brne	.+22     	; 0xbfa6 <f_close+0x2a>
    bf90:	be 01       	movw	r22, r28
    bf92:	6f 5f       	subi	r22, 0xFF	; 255
    bf94:	7f 4f       	sbci	r23, 0xFF	; 255
    bf96:	c8 01       	movw	r24, r16
    bf98:	0e 94 74 49 	call	0x92e8	; 0x92e8 <validate>
    bf9c:	00 97       	sbiw	r24, 0x00	; 0
    bf9e:	19 f4       	brne	.+6      	; 0xbfa6 <f_close+0x2a>
    bfa0:	f8 01       	movw	r30, r16
    bfa2:	11 82       	std	Z+1, r1	; 0x01
    bfa4:	10 82       	st	Z, r1
    bfa6:	22 96       	adiw	r28, 0x02	; 2
    bfa8:	e4 e0       	ldi	r30, 0x04	; 4
    bfaa:	0c 94 ce e8 	jmp	0x1d19c	; 0x1d19c <__epilogue_restores__+0x1c>

0000bfae <f_chdir>:
    bfae:	a2 e3       	ldi	r26, 0x32	; 50
    bfb0:	b0 e0       	ldi	r27, 0x00	; 0
    bfb2:	ed ed       	ldi	r30, 0xDD	; 221
    bfb4:	ff e5       	ldi	r31, 0x5F	; 95
    bfb6:	0c 94 ae e8 	jmp	0x1d15c	; 0x1d15c <__prologue_saves__+0x14>
    bfba:	9a ab       	std	Y+50, r25	; 0x32
    bfbc:	89 ab       	std	Y+49, r24	; 0x31
    bfbe:	40 e0       	ldi	r20, 0x00	; 0
    bfc0:	be 01       	movw	r22, r28
    bfc2:	61 5d       	subi	r22, 0xD1	; 209
    bfc4:	7f 4f       	sbci	r23, 0xFF	; 255
    bfc6:	ce 01       	movw	r24, r28
    bfc8:	c1 96       	adiw	r24, 0x31	; 49
    bfca:	0e 94 df 4c 	call	0x99be	; 0x99be <mount_volume>
    bfce:	00 97       	sbiw	r24, 0x00	; 0
    bfd0:	09 f0       	breq	.+2      	; 0xbfd4 <f_chdir+0x26>
    bfd2:	44 c0       	rjmp	.+136    	; 0xc05c <f_chdir+0xae>
    bfd4:	8f a5       	ldd	r24, Y+47	; 0x2f
    bfd6:	98 a9       	ldd	r25, Y+48	; 0x30
    bfd8:	9a 83       	std	Y+2, r25	; 0x02
    bfda:	89 83       	std	Y+1, r24	; 0x01
    bfdc:	80 e0       	ldi	r24, 0x00	; 0
    bfde:	92 e0       	ldi	r25, 0x02	; 2
    bfe0:	0e 94 da 69 	call	0xd3b4	; 0xd3b4 <ff_memalloc>
    bfe4:	7c 01       	movw	r14, r24
    bfe6:	00 97       	sbiw	r24, 0x00	; 0
    bfe8:	a9 f1       	breq	.+106    	; 0xc054 <f_chdir+0xa6>
    bfea:	ef a5       	ldd	r30, Y+47	; 0x2f
    bfec:	f8 a9       	ldd	r31, Y+48	; 0x30
    bfee:	94 87       	std	Z+12, r25	; 0x0c
    bff0:	83 87       	std	Z+11, r24	; 0x0b
    bff2:	69 a9       	ldd	r22, Y+49	; 0x31
    bff4:	7a a9       	ldd	r23, Y+50	; 0x32
    bff6:	ce 01       	movw	r24, r28
    bff8:	01 96       	adiw	r24, 0x01	; 1
    bffa:	2e d8       	rcall	.-4004   	; 0xb058 <follow_path>
    bffc:	8c 01       	movw	r16, r24
    bffe:	89 2b       	or	r24, r25
    c000:	09 f5       	brne	.+66     	; 0xc044 <f_chdir+0x96>
    c002:	88 a5       	ldd	r24, Y+40	; 0x28
    c004:	87 ff       	sbrs	r24, 7
    c006:	0b c0       	rjmp	.+22     	; 0xc01e <f_chdir+0x70>
    c008:	ef a5       	ldd	r30, Y+47	; 0x2f
    c00a:	f8 a9       	ldd	r31, Y+48	; 0x30
    c00c:	8f 81       	ldd	r24, Y+7	; 0x07
    c00e:	98 85       	ldd	r25, Y+8	; 0x08
    c010:	a9 85       	ldd	r26, Y+9	; 0x09
    c012:	ba 85       	ldd	r27, Y+10	; 0x0a
    c014:	85 8b       	std	Z+21, r24	; 0x15
    c016:	96 8b       	std	Z+22, r25	; 0x16
    c018:	a7 8b       	std	Z+23, r26	; 0x17
    c01a:	b0 8f       	std	Z+24, r27	; 0x18
    c01c:	13 c0       	rjmp	.+38     	; 0xc044 <f_chdir+0x96>
    c01e:	8d 81       	ldd	r24, Y+5	; 0x05
    c020:	84 ff       	sbrs	r24, 4
    c022:	0e c0       	rjmp	.+28     	; 0xc040 <f_chdir+0x92>
    c024:	cf a4       	ldd	r12, Y+47	; 0x2f
    c026:	d8 a8       	ldd	r13, Y+48	; 0x30
    c028:	6b 8d       	ldd	r22, Y+27	; 0x1b
    c02a:	7c 8d       	ldd	r23, Y+28	; 0x1c
    c02c:	f6 01       	movw	r30, r12
    c02e:	80 81       	ld	r24, Z
    c030:	0e 94 d5 4a 	call	0x95aa	; 0x95aa <ld_clust.isra.3>
    c034:	f6 01       	movw	r30, r12
    c036:	65 8b       	std	Z+21, r22	; 0x15
    c038:	76 8b       	std	Z+22, r23	; 0x16
    c03a:	87 8b       	std	Z+23, r24	; 0x17
    c03c:	90 8f       	std	Z+24, r25	; 0x18
    c03e:	02 c0       	rjmp	.+4      	; 0xc044 <f_chdir+0x96>
    c040:	05 e0       	ldi	r16, 0x05	; 5
    c042:	10 e0       	ldi	r17, 0x00	; 0
    c044:	c7 01       	movw	r24, r14
    c046:	0e 94 dd 69 	call	0xd3ba	; 0xd3ba <ff_memfree>
    c04a:	04 30       	cpi	r16, 0x04	; 4
    c04c:	11 05       	cpc	r17, r1
    c04e:	29 f4       	brne	.+10     	; 0xc05a <f_chdir+0xac>
    c050:	85 e0       	ldi	r24, 0x05	; 5
    c052:	01 c0       	rjmp	.+2      	; 0xc056 <f_chdir+0xa8>
    c054:	81 e1       	ldi	r24, 0x11	; 17
    c056:	90 e0       	ldi	r25, 0x00	; 0
    c058:	01 c0       	rjmp	.+2      	; 0xc05c <f_chdir+0xae>
    c05a:	c8 01       	movw	r24, r16
    c05c:	e2 96       	adiw	r28, 0x32	; 50
    c05e:	e8 e0       	ldi	r30, 0x08	; 8
    c060:	0c 94 ca e8 	jmp	0x1d194	; 0x1d194 <__epilogue_restores__+0x14>

0000c064 <f_getcwd>:
    c064:	a8 e4       	ldi	r26, 0x48	; 72
    c066:	b1 e0       	ldi	r27, 0x01	; 1
    c068:	e8 e3       	ldi	r30, 0x38	; 56
    c06a:	f0 e6       	ldi	r31, 0x60	; 96
    c06c:	0c 94 a4 e8 	jmp	0x1d148	; 0x1d148 <__prologue_saves__>
    c070:	c9 5b       	subi	r28, 0xB9	; 185
    c072:	de 4f       	sbci	r29, 0xFE	; 254
    c074:	99 83       	std	Y+1, r25	; 0x01
    c076:	88 83       	st	Y, r24
    c078:	c7 54       	subi	r28, 0x47	; 71
    c07a:	d1 40       	sbci	r29, 0x01	; 1
    c07c:	4b 01       	movw	r8, r22
    c07e:	7c 01       	movw	r14, r24
    c080:	fc 01       	movw	r30, r24
    c082:	10 82       	st	Z, r1
    c084:	40 e0       	ldi	r20, 0x00	; 0
    c086:	be 01       	movw	r22, r28
    c088:	6b 5b       	subi	r22, 0xBB	; 187
    c08a:	7e 4f       	sbci	r23, 0xFE	; 254
    c08c:	ce 01       	movw	r24, r28
    c08e:	89 5b       	subi	r24, 0xB9	; 185
    c090:	9e 4f       	sbci	r25, 0xFE	; 254
    c092:	0e 94 df 4c 	call	0x99be	; 0x99be <mount_volume>
    c096:	1c 01       	movw	r2, r24
    c098:	89 2b       	or	r24, r25
    c09a:	09 f0       	breq	.+2      	; 0xc09e <f_getcwd+0x3a>
    c09c:	03 c1       	rjmp	.+518    	; 0xc2a4 <f_getcwd+0x240>
    c09e:	cb 5b       	subi	r28, 0xBB	; 187
    c0a0:	de 4f       	sbci	r29, 0xFE	; 254
    c0a2:	88 81       	ld	r24, Y
    c0a4:	99 81       	ldd	r25, Y+1	; 0x01
    c0a6:	c5 54       	subi	r28, 0x45	; 69
    c0a8:	d1 40       	sbci	r29, 0x01	; 1
    c0aa:	c9 5e       	subi	r28, 0xE9	; 233
    c0ac:	de 4f       	sbci	r29, 0xFE	; 254
    c0ae:	99 83       	std	Y+1, r25	; 0x01
    c0b0:	88 83       	st	Y, r24
    c0b2:	c7 51       	subi	r28, 0x17	; 23
    c0b4:	d1 40       	sbci	r29, 0x01	; 1
    c0b6:	80 e0       	ldi	r24, 0x00	; 0
    c0b8:	92 e0       	ldi	r25, 0x02	; 2
    c0ba:	0e 94 da 69 	call	0xd3b4	; 0xd3b4 <ff_memalloc>
    c0be:	5c 01       	movw	r10, r24
    c0c0:	00 97       	sbiw	r24, 0x00	; 0
    c0c2:	09 f4       	brne	.+2      	; 0xc0c6 <f_getcwd+0x62>
    c0c4:	f3 c0       	rjmp	.+486    	; 0xc2ac <f_getcwd+0x248>
    c0c6:	cb 5b       	subi	r28, 0xBB	; 187
    c0c8:	de 4f       	sbci	r29, 0xFE	; 254
    c0ca:	e8 81       	ld	r30, Y
    c0cc:	f9 81       	ldd	r31, Y+1	; 0x01
    c0ce:	c5 54       	subi	r28, 0x45	; 69
    c0d0:	d1 40       	sbci	r29, 0x01	; 1
    c0d2:	94 87       	std	Z+12, r25	; 0x0c
    c0d4:	83 87       	std	Z+11, r24	; 0x0b
    c0d6:	85 89       	ldd	r24, Z+21	; 0x15
    c0d8:	96 89       	ldd	r25, Z+22	; 0x16
    c0da:	a7 89       	ldd	r26, Z+23	; 0x17
    c0dc:	b0 8d       	ldd	r27, Z+24	; 0x18
    c0de:	c3 5e       	subi	r28, 0xE3	; 227
    c0e0:	de 4f       	sbci	r29, 0xFE	; 254
    c0e2:	88 83       	st	Y, r24
    c0e4:	99 83       	std	Y+1, r25	; 0x01
    c0e6:	aa 83       	std	Y+2, r26	; 0x02
    c0e8:	bb 83       	std	Y+3, r27	; 0x03
    c0ea:	cd 51       	subi	r28, 0x1D	; 29
    c0ec:	d1 40       	sbci	r29, 0x01	; 1
    c0ee:	84 01       	movw	r16, r8
    c0f0:	ce 01       	movw	r24, r28
    c0f2:	01 96       	adiw	r24, 0x01	; 1
    c0f4:	6c 01       	movw	r12, r24
    c0f6:	c3 5e       	subi	r28, 0xE3	; 227
    c0f8:	de 4f       	sbci	r29, 0xFE	; 254
    c0fa:	48 80       	ld	r4, Y
    c0fc:	59 80       	ldd	r5, Y+1	; 0x01
    c0fe:	6a 80       	ldd	r6, Y+2	; 0x02
    c100:	7b 80       	ldd	r7, Y+3	; 0x03
    c102:	cd 51       	subi	r28, 0x1D	; 29
    c104:	d1 40       	sbci	r29, 0x01	; 1
    c106:	41 14       	cp	r4, r1
    c108:	51 04       	cpc	r5, r1
    c10a:	61 04       	cpc	r6, r1
    c10c:	71 04       	cpc	r7, r1
    c10e:	09 f4       	brne	.+2      	; 0xc112 <f_getcwd+0xae>
    c110:	a3 c0       	rjmp	.+326    	; 0xc258 <f_getcwd+0x1f4>
    c112:	40 e2       	ldi	r20, 0x20	; 32
    c114:	50 e0       	ldi	r21, 0x00	; 0
    c116:	60 e0       	ldi	r22, 0x00	; 0
    c118:	70 e0       	ldi	r23, 0x00	; 0
    c11a:	ce 01       	movw	r24, r28
    c11c:	89 5e       	subi	r24, 0xE9	; 233
    c11e:	9e 4f       	sbci	r25, 0xFE	; 254
    c120:	0e 94 e6 50 	call	0xa1cc	; 0xa1cc <dir_sdi>
    c124:	00 97       	sbiw	r24, 0x00	; 0
    c126:	09 f0       	breq	.+2      	; 0xc12a <f_getcwd+0xc6>
    c128:	c6 c0       	rjmp	.+396    	; 0xc2b6 <f_getcwd+0x252>
    c12a:	c3 5d       	subi	r28, 0xD3	; 211
    c12c:	de 4f       	sbci	r29, 0xFE	; 254
    c12e:	48 81       	ld	r20, Y
    c130:	59 81       	ldd	r21, Y+1	; 0x01
    c132:	6a 81       	ldd	r22, Y+2	; 0x02
    c134:	7b 81       	ldd	r23, Y+3	; 0x03
    c136:	cd 52       	subi	r28, 0x2D	; 45
    c138:	d1 40       	sbci	r29, 0x01	; 1
    c13a:	cb 5b       	subi	r28, 0xBB	; 187
    c13c:	de 4f       	sbci	r29, 0xFE	; 254
    c13e:	88 81       	ld	r24, Y
    c140:	99 81       	ldd	r25, Y+1	; 0x01
    c142:	c5 54       	subi	r28, 0x45	; 69
    c144:	d1 40       	sbci	r29, 0x01	; 1
    c146:	0e 94 64 4c 	call	0x98c8	; 0x98c8 <move_window>
    c14a:	00 97       	sbiw	r24, 0x00	; 0
    c14c:	09 f0       	breq	.+2      	; 0xc150 <f_getcwd+0xec>
    c14e:	b3 c0       	rjmp	.+358    	; 0xc2b6 <f_getcwd+0x252>
    c150:	cf 5c       	subi	r28, 0xCF	; 207
    c152:	de 4f       	sbci	r29, 0xFE	; 254
    c154:	68 81       	ld	r22, Y
    c156:	79 81       	ldd	r23, Y+1	; 0x01
    c158:	c1 53       	subi	r28, 0x31	; 49
    c15a:	d1 40       	sbci	r29, 0x01	; 1
    c15c:	cb 5b       	subi	r28, 0xBB	; 187
    c15e:	de 4f       	sbci	r29, 0xFE	; 254
    c160:	e8 81       	ld	r30, Y
    c162:	f9 81       	ldd	r31, Y+1	; 0x01
    c164:	c5 54       	subi	r28, 0x45	; 69
    c166:	d1 40       	sbci	r29, 0x01	; 1
    c168:	80 81       	ld	r24, Z
    c16a:	0e 94 d5 4a 	call	0x95aa	; 0x95aa <ld_clust.isra.3>
    c16e:	c3 5e       	subi	r28, 0xE3	; 227
    c170:	de 4f       	sbci	r29, 0xFE	; 254
    c172:	68 83       	st	Y, r22
    c174:	79 83       	std	Y+1, r23	; 0x01
    c176:	8a 83       	std	Y+2, r24	; 0x02
    c178:	9b 83       	std	Y+3, r25	; 0x03
    c17a:	cd 51       	subi	r28, 0x1D	; 29
    c17c:	d1 40       	sbci	r29, 0x01	; 1
    c17e:	40 e0       	ldi	r20, 0x00	; 0
    c180:	50 e0       	ldi	r21, 0x00	; 0
    c182:	ba 01       	movw	r22, r20
    c184:	ce 01       	movw	r24, r28
    c186:	89 5e       	subi	r24, 0xE9	; 233
    c188:	9e 4f       	sbci	r25, 0xFE	; 254
    c18a:	0e 94 e6 50 	call	0xa1cc	; 0xa1cc <dir_sdi>
    c18e:	00 97       	sbiw	r24, 0x00	; 0
    c190:	09 f0       	breq	.+2      	; 0xc194 <f_getcwd+0x130>
    c192:	91 c0       	rjmp	.+290    	; 0xc2b6 <f_getcwd+0x252>
    c194:	60 e0       	ldi	r22, 0x00	; 0
    c196:	70 e0       	ldi	r23, 0x00	; 0
    c198:	ce 01       	movw	r24, r28
    c19a:	89 5e       	subi	r24, 0xE9	; 233
    c19c:	9e 4f       	sbci	r25, 0xFE	; 254
    c19e:	0e 94 7f 54 	call	0xa8fe	; 0xa8fe <dir_read>
    c1a2:	00 97       	sbiw	r24, 0x00	; 0
    c1a4:	09 f0       	breq	.+2      	; 0xc1a8 <f_getcwd+0x144>
    c1a6:	89 c0       	rjmp	.+274    	; 0xc2ba <f_getcwd+0x256>
    c1a8:	cf 5c       	subi	r28, 0xCF	; 207
    c1aa:	de 4f       	sbci	r29, 0xFE	; 254
    c1ac:	68 81       	ld	r22, Y
    c1ae:	79 81       	ldd	r23, Y+1	; 0x01
    c1b0:	c1 53       	subi	r28, 0x31	; 49
    c1b2:	d1 40       	sbci	r29, 0x01	; 1
    c1b4:	cb 5b       	subi	r28, 0xBB	; 187
    c1b6:	de 4f       	sbci	r29, 0xFE	; 254
    c1b8:	e8 81       	ld	r30, Y
    c1ba:	f9 81       	ldd	r31, Y+1	; 0x01
    c1bc:	c5 54       	subi	r28, 0x45	; 69
    c1be:	d1 40       	sbci	r29, 0x01	; 1
    c1c0:	80 81       	ld	r24, Z
    c1c2:	0e 94 d5 4a 	call	0x95aa	; 0x95aa <ld_clust.isra.3>
    c1c6:	46 16       	cp	r4, r22
    c1c8:	57 06       	cpc	r5, r23
    c1ca:	68 06       	cpc	r6, r24
    c1cc:	79 06       	cpc	r7, r25
    c1ce:	41 f4       	brne	.+16     	; 0xc1e0 <f_getcwd+0x17c>
    c1d0:	b6 01       	movw	r22, r12
    c1d2:	ce 01       	movw	r24, r28
    c1d4:	89 5e       	subi	r24, 0xE9	; 233
    c1d6:	9e 4f       	sbci	r25, 0xFE	; 254
    c1d8:	0e 94 a0 49 	call	0x9340	; 0x9340 <get_fileinfo>
    c1dc:	f6 01       	movw	r30, r12
    c1de:	0a c0       	rjmp	.+20     	; 0xc1f4 <f_getcwd+0x190>
    c1e0:	60 e0       	ldi	r22, 0x00	; 0
    c1e2:	70 e0       	ldi	r23, 0x00	; 0
    c1e4:	ce 01       	movw	r24, r28
    c1e6:	89 5e       	subi	r24, 0xE9	; 233
    c1e8:	9e 4f       	sbci	r25, 0xFE	; 254
    c1ea:	0e 94 5e 53 	call	0xa6bc	; 0xa6bc <dir_next>
    c1ee:	00 97       	sbiw	r24, 0x00	; 0
    c1f0:	89 f2       	breq	.-94     	; 0xc194 <f_getcwd+0x130>
    c1f2:	63 c0       	rjmp	.+198    	; 0xc2ba <f_getcwd+0x256>
    c1f4:	cf 01       	movw	r24, r30
    c1f6:	8c 19       	sub	r24, r12
    c1f8:	9d 09       	sbc	r25, r13
    c1fa:	31 96       	adiw	r30, 0x01	; 1
    c1fc:	25 89       	ldd	r18, Z+21	; 0x15
    c1fe:	21 11       	cpse	r18, r1
    c200:	f9 cf       	rjmp	.-14     	; 0xc1f4 <f_getcwd+0x190>
    c202:	9c 01       	movw	r18, r24
    c204:	2f 5f       	subi	r18, 0xFF	; 255
    c206:	3f 4f       	sbci	r19, 0xFF	; 255
    c208:	02 17       	cp	r16, r18
    c20a:	13 07       	cpc	r17, r19
    c20c:	08 f4       	brcc	.+2      	; 0xc210 <f_getcwd+0x1ac>
    c20e:	51 c0       	rjmp	.+162    	; 0xc2b2 <f_getcwd+0x24e>
    c210:	f6 01       	movw	r30, r12
    c212:	e8 0f       	add	r30, r24
    c214:	f9 1f       	adc	r31, r25
    c216:	98 01       	movw	r18, r16
    c218:	ce 16       	cp	r12, r30
    c21a:	df 06       	cpc	r13, r31
    c21c:	71 f0       	breq	.+28     	; 0xc23a <f_getcwd+0x1d6>
    c21e:	21 50       	subi	r18, 0x01	; 1
    c220:	31 09       	sbc	r19, r1
    c222:	45 89       	ldd	r20, Z+21	; 0x15
    c224:	c9 5b       	subi	r28, 0xB9	; 185
    c226:	de 4f       	sbci	r29, 0xFE	; 254
    c228:	a8 81       	ld	r26, Y
    c22a:	b9 81       	ldd	r27, Y+1	; 0x01
    c22c:	c7 54       	subi	r28, 0x47	; 71
    c22e:	d1 40       	sbci	r29, 0x01	; 1
    c230:	a2 0f       	add	r26, r18
    c232:	b3 1f       	adc	r27, r19
    c234:	4c 93       	st	X, r20
    c236:	31 97       	sbiw	r30, 0x01	; 1
    c238:	ef cf       	rjmp	.-34     	; 0xc218 <f_getcwd+0x1b4>
    c23a:	80 95       	com	r24
    c23c:	90 95       	com	r25
    c23e:	08 0f       	add	r16, r24
    c240:	19 1f       	adc	r17, r25
    c242:	c9 5b       	subi	r28, 0xB9	; 185
    c244:	de 4f       	sbci	r29, 0xFE	; 254
    c246:	e8 81       	ld	r30, Y
    c248:	f9 81       	ldd	r31, Y+1	; 0x01
    c24a:	c7 54       	subi	r28, 0x47	; 71
    c24c:	d1 40       	sbci	r29, 0x01	; 1
    c24e:	e0 0f       	add	r30, r16
    c250:	f1 1f       	adc	r31, r17
    c252:	9f e2       	ldi	r25, 0x2F	; 47
    c254:	90 83       	st	Z, r25
    c256:	4f cf       	rjmp	.-354    	; 0xc0f6 <f_getcwd+0x92>
    c258:	08 15       	cp	r16, r8
    c25a:	19 05       	cpc	r17, r9
    c25c:	61 f4       	brne	.+24     	; 0xc276 <f_getcwd+0x212>
    c25e:	01 50       	subi	r16, 0x01	; 1
    c260:	11 09       	sbc	r17, r1
    c262:	c9 5b       	subi	r28, 0xB9	; 185
    c264:	de 4f       	sbci	r29, 0xFE	; 254
    c266:	e8 81       	ld	r30, Y
    c268:	f9 81       	ldd	r31, Y+1	; 0x01
    c26a:	c7 54       	subi	r28, 0x47	; 71
    c26c:	d1 40       	sbci	r29, 0x01	; 1
    c26e:	e0 0f       	add	r30, r16
    c270:	f1 1f       	adc	r31, r17
    c272:	8f e2       	ldi	r24, 0x2F	; 47
    c274:	80 83       	st	Z, r24
    c276:	ef ef       	ldi	r30, 0xFF	; 255
    c278:	ee 1a       	sub	r14, r30
    c27a:	fe 0a       	sbc	r15, r30
    c27c:	c9 5b       	subi	r28, 0xB9	; 185
    c27e:	de 4f       	sbci	r29, 0xFE	; 254
    c280:	e8 81       	ld	r30, Y
    c282:	f9 81       	ldd	r31, Y+1	; 0x01
    c284:	c7 54       	subi	r28, 0x47	; 71
    c286:	d1 40       	sbci	r29, 0x01	; 1
    c288:	e0 0f       	add	r30, r16
    c28a:	f1 1f       	adc	r31, r17
    c28c:	80 81       	ld	r24, Z
    c28e:	f7 01       	movw	r30, r14
    c290:	31 97       	sbiw	r30, 0x01	; 1
    c292:	80 83       	st	Z, r24
    c294:	0f 5f       	subi	r16, 0xFF	; 255
    c296:	1f 4f       	sbci	r17, 0xFF	; 255
    c298:	08 15       	cp	r16, r8
    c29a:	19 05       	cpc	r17, r9
    c29c:	60 f3       	brcs	.-40     	; 0xc276 <f_getcwd+0x212>
    c29e:	c5 01       	movw	r24, r10
    c2a0:	0e 94 dd 69 	call	0xd3ba	; 0xd3ba <ff_memfree>
    c2a4:	f7 01       	movw	r30, r14
    c2a6:	10 82       	st	Z, r1
    c2a8:	c1 01       	movw	r24, r2
    c2aa:	0d c0       	rjmp	.+26     	; 0xc2c6 <f_getcwd+0x262>
    c2ac:	81 e1       	ldi	r24, 0x11	; 17
    c2ae:	90 e0       	ldi	r25, 0x00	; 0
    c2b0:	0a c0       	rjmp	.+20     	; 0xc2c6 <f_getcwd+0x262>
    c2b2:	81 e1       	ldi	r24, 0x11	; 17
    c2b4:	90 e0       	ldi	r25, 0x00	; 0
    c2b6:	1c 01       	movw	r2, r24
    c2b8:	f2 cf       	rjmp	.-28     	; 0xc29e <f_getcwd+0x23a>
    c2ba:	84 30       	cpi	r24, 0x04	; 4
    c2bc:	91 05       	cpc	r25, r1
    c2be:	d9 f7       	brne	.-10     	; 0xc2b6 <f_getcwd+0x252>
    c2c0:	82 e0       	ldi	r24, 0x02	; 2
    c2c2:	90 e0       	ldi	r25, 0x00	; 0
    c2c4:	f8 cf       	rjmp	.-16     	; 0xc2b6 <f_getcwd+0x252>
    c2c6:	c8 5b       	subi	r28, 0xB8	; 184
    c2c8:	de 4f       	sbci	r29, 0xFE	; 254
    c2ca:	e2 e1       	ldi	r30, 0x12	; 18
    c2cc:	0c 94 c0 e8 	jmp	0x1d180	; 0x1d180 <__epilogue_restores__>

0000c2d0 <f_lseek>:
    c2d0:	aa e0       	ldi	r26, 0x0A	; 10
    c2d2:	b0 e0       	ldi	r27, 0x00	; 0
    c2d4:	ee e6       	ldi	r30, 0x6E	; 110
    c2d6:	f1 e6       	ldi	r31, 0x61	; 97
    c2d8:	0c 94 a4 e8 	jmp	0x1d148	; 0x1d148 <__prologue_saves__>
    c2dc:	1c 01       	movw	r2, r24
    c2de:	6a 01       	movw	r12, r20
    c2e0:	7b 01       	movw	r14, r22
    c2e2:	be 01       	movw	r22, r28
    c2e4:	6f 5f       	subi	r22, 0xFF	; 255
    c2e6:	7f 4f       	sbci	r23, 0xFF	; 255
    c2e8:	0e 94 74 49 	call	0x92e8	; 0x92e8 <validate>
    c2ec:	00 97       	sbiw	r24, 0x00	; 0
    c2ee:	09 f0       	breq	.+2      	; 0xc2f2 <f_lseek+0x22>
    c2f0:	a6 c2       	rjmp	.+1356   	; 0xc83e <f_lseek+0x56e>
    c2f2:	f1 01       	movw	r30, r2
    c2f4:	87 85       	ldd	r24, Z+15	; 0x0f
    c2f6:	90 e0       	ldi	r25, 0x00	; 0
    c2f8:	00 97       	sbiw	r24, 0x00	; 0
    c2fa:	09 f0       	breq	.+2      	; 0xc2fe <f_lseek+0x2e>
    c2fc:	a0 c2       	rjmp	.+1344   	; 0xc83e <f_lseek+0x56e>
    c2fe:	22 a1       	ldd	r18, Z+34	; 0x22
    c300:	33 a1       	ldd	r19, Z+35	; 0x23
    c302:	21 15       	cp	r18, r1
    c304:	31 05       	cpc	r19, r1
    c306:	09 f4       	brne	.+2      	; 0xc30a <f_lseek+0x3a>
    c308:	2d c1       	rjmp	.+602    	; 0xc564 <f_lseek+0x294>
    c30a:	ff ef       	ldi	r31, 0xFF	; 255
    c30c:	cf 16       	cp	r12, r31
    c30e:	df 06       	cpc	r13, r31
    c310:	ef 06       	cpc	r14, r31
    c312:	ff 06       	cpc	r15, r31
    c314:	09 f0       	breq	.+2      	; 0xc318 <f_lseek+0x48>
    c316:	9a c0       	rjmp	.+308    	; 0xc44c <f_lseek+0x17c>
    c318:	89 01       	movw	r16, r18
    c31a:	0c 5f       	subi	r16, 0xFC	; 252
    c31c:	1f 4f       	sbci	r17, 0xFF	; 255
    c31e:	d9 01       	movw	r26, r18
    c320:	4d 91       	ld	r20, X+
    c322:	5d 91       	ld	r21, X+
    c324:	6d 91       	ld	r22, X+
    c326:	7c 91       	ld	r23, X
    c328:	4f 83       	std	Y+7, r20	; 0x07
    c32a:	58 87       	std	Y+8, r21	; 0x08
    c32c:	69 87       	std	Y+9, r22	; 0x09
    c32e:	7a 87       	std	Y+10, r23	; 0x0a
    c330:	f1 01       	movw	r30, r2
    c332:	86 80       	ldd	r8, Z+6	; 0x06
    c334:	97 80       	ldd	r9, Z+7	; 0x07
    c336:	a0 84       	ldd	r10, Z+8	; 0x08
    c338:	b1 84       	ldd	r11, Z+9	; 0x09
    c33a:	52 e0       	ldi	r21, 0x02	; 2
    c33c:	c5 2e       	mov	r12, r21
    c33e:	d1 2c       	mov	r13, r1
    c340:	e1 2c       	mov	r14, r1
    c342:	f1 2c       	mov	r15, r1
    c344:	81 14       	cp	r8, r1
    c346:	91 04       	cpc	r9, r1
    c348:	a1 04       	cpc	r10, r1
    c34a:	b1 04       	cpc	r11, r1
    c34c:	09 f4       	brne	.+2      	; 0xc350 <f_lseek+0x80>
    c34e:	65 c0       	rjmp	.+202    	; 0xc41a <f_lseek+0x14a>
    c350:	24 01       	movw	r4, r8
    c352:	35 01       	movw	r6, r10
    c354:	1b 82       	std	Y+3, r1	; 0x03
    c356:	1c 82       	std	Y+4, r1	; 0x04
    c358:	1d 82       	std	Y+5, r1	; 0x05
    c35a:	1e 82       	std	Y+6, r1	; 0x06
    c35c:	2b 81       	ldd	r18, Y+3	; 0x03
    c35e:	3c 81       	ldd	r19, Y+4	; 0x04
    c360:	4d 81       	ldd	r20, Y+5	; 0x05
    c362:	5e 81       	ldd	r21, Y+6	; 0x06
    c364:	2f 5f       	subi	r18, 0xFF	; 255
    c366:	3f 4f       	sbci	r19, 0xFF	; 255
    c368:	4f 4f       	sbci	r20, 0xFF	; 255
    c36a:	5f 4f       	sbci	r21, 0xFF	; 255
    c36c:	2b 83       	std	Y+3, r18	; 0x03
    c36e:	3c 83       	std	Y+4, r19	; 0x04
    c370:	4d 83       	std	Y+5, r20	; 0x05
    c372:	5e 83       	std	Y+6, r21	; 0x06
    c374:	b3 01       	movw	r22, r6
    c376:	a2 01       	movw	r20, r4
    c378:	d1 01       	movw	r26, r2
    c37a:	8d 91       	ld	r24, X+
    c37c:	9c 91       	ld	r25, X
    c37e:	0e 94 32 50 	call	0xa064	; 0xa064 <get_fat.isra.9>
    c382:	62 30       	cpi	r22, 0x02	; 2
    c384:	71 05       	cpc	r23, r1
    c386:	81 05       	cpc	r24, r1
    c388:	91 05       	cpc	r25, r1
    c38a:	10 f4       	brcc	.+4      	; 0xc390 <f_lseek+0xc0>
    c38c:	82 e0       	ldi	r24, 0x02	; 2
    c38e:	07 c0       	rjmp	.+14     	; 0xc39e <f_lseek+0xce>
    c390:	6f 3f       	cpi	r22, 0xFF	; 255
    c392:	ff ef       	ldi	r31, 0xFF	; 255
    c394:	7f 07       	cpc	r23, r31
    c396:	8f 07       	cpc	r24, r31
    c398:	9f 07       	cpc	r25, r31
    c39a:	29 f4       	brne	.+10     	; 0xc3a6 <f_lseek+0xd6>
    c39c:	81 e0       	ldi	r24, 0x01	; 1
    c39e:	f1 01       	movw	r30, r2
    c3a0:	87 87       	std	Z+15, r24	; 0x0f
    c3a2:	90 e0       	ldi	r25, 0x00	; 0
    c3a4:	4c c2       	rjmp	.+1176   	; 0xc83e <f_lseek+0x56e>
    c3a6:	a3 01       	movw	r20, r6
    c3a8:	92 01       	movw	r18, r4
    c3aa:	2f 5f       	subi	r18, 0xFF	; 255
    c3ac:	3f 4f       	sbci	r19, 0xFF	; 255
    c3ae:	4f 4f       	sbci	r20, 0xFF	; 255
    c3b0:	5f 4f       	sbci	r21, 0xFF	; 255
    c3b2:	2b 01       	movw	r4, r22
    c3b4:	3c 01       	movw	r6, r24
    c3b6:	62 17       	cp	r22, r18
    c3b8:	73 07       	cpc	r23, r19
    c3ba:	84 07       	cpc	r24, r20
    c3bc:	95 07       	cpc	r25, r21
    c3be:	71 f2       	breq	.-100    	; 0xc35c <f_lseek+0x8c>
    c3c0:	f2 e0       	ldi	r31, 0x02	; 2
    c3c2:	cf 0e       	add	r12, r31
    c3c4:	d1 1c       	adc	r13, r1
    c3c6:	e1 1c       	adc	r14, r1
    c3c8:	f1 1c       	adc	r15, r1
    c3ca:	2f 81       	ldd	r18, Y+7	; 0x07
    c3cc:	38 85       	ldd	r19, Y+8	; 0x08
    c3ce:	49 85       	ldd	r20, Y+9	; 0x09
    c3d0:	5a 85       	ldd	r21, Y+10	; 0x0a
    c3d2:	2c 15       	cp	r18, r12
    c3d4:	3d 05       	cpc	r19, r13
    c3d6:	4e 05       	cpc	r20, r14
    c3d8:	5f 05       	cpc	r21, r15
    c3da:	88 f0       	brcs	.+34     	; 0xc3fe <f_lseek+0x12e>
    c3dc:	2b 81       	ldd	r18, Y+3	; 0x03
    c3de:	3c 81       	ldd	r19, Y+4	; 0x04
    c3e0:	4d 81       	ldd	r20, Y+5	; 0x05
    c3e2:	5e 81       	ldd	r21, Y+6	; 0x06
    c3e4:	d8 01       	movw	r26, r16
    c3e6:	2d 93       	st	X+, r18
    c3e8:	3d 93       	st	X+, r19
    c3ea:	4d 93       	st	X+, r20
    c3ec:	5c 93       	st	X, r21
    c3ee:	13 97       	sbiw	r26, 0x03	; 3
    c3f0:	f8 01       	movw	r30, r16
    c3f2:	84 82       	std	Z+4, r8	; 0x04
    c3f4:	95 82       	std	Z+5, r9	; 0x05
    c3f6:	a6 82       	std	Z+6, r10	; 0x06
    c3f8:	b7 82       	std	Z+7, r11	; 0x07
    c3fa:	08 5f       	subi	r16, 0xF8	; 248
    c3fc:	1f 4f       	sbci	r17, 0xFF	; 255
    c3fe:	e9 81       	ldd	r30, Y+1	; 0x01
    c400:	fa 81       	ldd	r31, Y+2	; 0x02
    c402:	81 8c       	ldd	r8, Z+25	; 0x19
    c404:	92 8c       	ldd	r9, Z+26	; 0x1a
    c406:	a3 8c       	ldd	r10, Z+27	; 0x1b
    c408:	b4 8c       	ldd	r11, Z+28	; 0x1c
    c40a:	68 15       	cp	r22, r8
    c40c:	79 05       	cpc	r23, r9
    c40e:	8a 05       	cpc	r24, r10
    c410:	9b 05       	cpc	r25, r11
    c412:	18 f4       	brcc	.+6      	; 0xc41a <f_lseek+0x14a>
    c414:	4b 01       	movw	r8, r22
    c416:	5c 01       	movw	r10, r24
    c418:	9b cf       	rjmp	.-202    	; 0xc350 <f_lseek+0x80>
    c41a:	f1 01       	movw	r30, r2
    c41c:	a2 a1       	ldd	r26, Z+34	; 0x22
    c41e:	b3 a1       	ldd	r27, Z+35	; 0x23
    c420:	cd 92       	st	X+, r12
    c422:	dd 92       	st	X+, r13
    c424:	ed 92       	st	X+, r14
    c426:	fc 92       	st	X, r15
    c428:	13 97       	sbiw	r26, 0x03	; 3
    c42a:	2f 81       	ldd	r18, Y+7	; 0x07
    c42c:	38 85       	ldd	r19, Y+8	; 0x08
    c42e:	49 85       	ldd	r20, Y+9	; 0x09
    c430:	5a 85       	ldd	r21, Y+10	; 0x0a
    c432:	2c 15       	cp	r18, r12
    c434:	3d 05       	cpc	r19, r13
    c436:	4e 05       	cpc	r20, r14
    c438:	5f 05       	cpc	r21, r15
    c43a:	08 f4       	brcc	.+2      	; 0xc43e <f_lseek+0x16e>
    c43c:	f7 c1       	rjmp	.+1006   	; 0xc82c <f_lseek+0x55c>
    c43e:	d8 01       	movw	r26, r16
    c440:	1d 92       	st	X+, r1
    c442:	1d 92       	st	X+, r1
    c444:	1d 92       	st	X+, r1
    c446:	1c 92       	st	X, r1
    c448:	13 97       	sbiw	r26, 0x03	; 3
    c44a:	ee c1       	rjmp	.+988    	; 0xc828 <f_lseek+0x558>
    c44c:	f1 01       	movw	r30, r2
    c44e:	82 85       	ldd	r24, Z+10	; 0x0a
    c450:	93 85       	ldd	r25, Z+11	; 0x0b
    c452:	a4 85       	ldd	r26, Z+12	; 0x0c
    c454:	b5 85       	ldd	r27, Z+13	; 0x0d
    c456:	46 01       	movw	r8, r12
    c458:	57 01       	movw	r10, r14
    c45a:	8c 15       	cp	r24, r12
    c45c:	9d 05       	cpc	r25, r13
    c45e:	ae 05       	cpc	r26, r14
    c460:	bf 05       	cpc	r27, r15
    c462:	10 f4       	brcc	.+4      	; 0xc468 <f_lseek+0x198>
    c464:	4c 01       	movw	r8, r24
    c466:	5d 01       	movw	r10, r26
    c468:	f1 01       	movw	r30, r2
    c46a:	80 8a       	std	Z+16, r8	; 0x10
    c46c:	91 8a       	std	Z+17, r9	; 0x11
    c46e:	a2 8a       	std	Z+18, r10	; 0x12
    c470:	b3 8a       	std	Z+19, r11	; 0x13
    c472:	81 14       	cp	r8, r1
    c474:	91 04       	cpc	r9, r1
    c476:	a1 04       	cpc	r10, r1
    c478:	b1 04       	cpc	r11, r1
    c47a:	09 f4       	brne	.+2      	; 0xc47e <f_lseek+0x1ae>
    c47c:	d5 c1       	rjmp	.+938    	; 0xc828 <f_lseek+0x558>
    c47e:	24 01       	movw	r4, r8
    c480:	35 01       	movw	r6, r10
    c482:	f1 e0       	ldi	r31, 0x01	; 1
    c484:	4f 1a       	sub	r4, r31
    c486:	51 08       	sbc	r5, r1
    c488:	61 08       	sbc	r6, r1
    c48a:	71 08       	sbc	r7, r1
    c48c:	b3 01       	movw	r22, r6
    c48e:	a2 01       	movw	r20, r4
    c490:	c1 01       	movw	r24, r2
    c492:	0e 94 fd 48 	call	0x91fa	; 0x91fa <clmt_clust>
    c496:	ab 01       	movw	r20, r22
    c498:	bc 01       	movw	r22, r24
    c49a:	f1 01       	movw	r30, r2
    c49c:	44 8b       	std	Z+20, r20	; 0x14
    c49e:	55 8b       	std	Z+21, r21	; 0x15
    c4a0:	66 8b       	std	Z+22, r22	; 0x16
    c4a2:	77 8b       	std	Z+23, r23	; 0x17
    c4a4:	e9 80       	ldd	r14, Y+1	; 0x01
    c4a6:	fa 80       	ldd	r15, Y+2	; 0x02
    c4a8:	c7 01       	movw	r24, r14
    c4aa:	0e 94 d5 48 	call	0x91aa	; 0x91aa <clst2sect>
    c4ae:	61 15       	cp	r22, r1
    c4b0:	71 05       	cpc	r23, r1
    c4b2:	81 05       	cpc	r24, r1
    c4b4:	91 05       	cpc	r25, r1
    c4b6:	09 f4       	brne	.+2      	; 0xc4ba <f_lseek+0x1ea>
    c4b8:	69 cf       	rjmp	.-302    	; 0xc38c <f_lseek+0xbc>
    c4ba:	95 01       	movw	r18, r10
    c4bc:	84 01       	movw	r16, r8
    c4be:	11 70       	andi	r17, 0x01	; 1
    c4c0:	22 27       	eor	r18, r18
    c4c2:	33 27       	eor	r19, r19
    c4c4:	01 15       	cp	r16, r1
    c4c6:	11 05       	cpc	r17, r1
    c4c8:	21 05       	cpc	r18, r1
    c4ca:	31 05       	cpc	r19, r1
    c4cc:	09 f4       	brne	.+2      	; 0xc4d0 <f_lseek+0x200>
    c4ce:	ac c1       	rjmp	.+856    	; 0xc828 <f_lseek+0x558>
    c4d0:	f7 01       	movw	r30, r14
    c4d2:	81 84       	ldd	r8, Z+9	; 0x09
    c4d4:	92 84       	ldd	r9, Z+10	; 0x0a
    c4d6:	f1 e0       	ldi	r31, 0x01	; 1
    c4d8:	8f 1a       	sub	r8, r31
    c4da:	91 08       	sbc	r9, r1
    c4dc:	a1 2c       	mov	r10, r1
    c4de:	b1 2c       	mov	r11, r1
    c4e0:	49 e0       	ldi	r20, 0x09	; 9
    c4e2:	76 94       	lsr	r7
    c4e4:	67 94       	ror	r6
    c4e6:	57 94       	ror	r5
    c4e8:	47 94       	ror	r4
    c4ea:	4a 95       	dec	r20
    c4ec:	d1 f7       	brne	.-12     	; 0xc4e2 <f_lseek+0x212>
    c4ee:	48 20       	and	r4, r8
    c4f0:	59 20       	and	r5, r9
    c4f2:	6a 20       	and	r6, r10
    c4f4:	7b 20       	and	r7, r11
    c4f6:	53 01       	movw	r10, r6
    c4f8:	42 01       	movw	r8, r4
    c4fa:	86 0e       	add	r8, r22
    c4fc:	97 1e       	adc	r9, r23
    c4fe:	a8 1e       	adc	r10, r24
    c500:	b9 1e       	adc	r11, r25
    c502:	f1 01       	movw	r30, r2
    c504:	20 8d       	ldd	r18, Z+24	; 0x18
    c506:	31 8d       	ldd	r19, Z+25	; 0x19
    c508:	42 8d       	ldd	r20, Z+26	; 0x1a
    c50a:	53 8d       	ldd	r21, Z+27	; 0x1b
    c50c:	82 16       	cp	r8, r18
    c50e:	93 06       	cpc	r9, r19
    c510:	a4 06       	cpc	r10, r20
    c512:	b5 06       	cpc	r11, r21
    c514:	09 f4       	brne	.+2      	; 0xc518 <f_lseek+0x248>
    c516:	88 c1       	rjmp	.+784    	; 0xc828 <f_lseek+0x558>
    c518:	86 85       	ldd	r24, Z+14	; 0x0e
    c51a:	b1 01       	movw	r22, r2
    c51c:	6c 5d       	subi	r22, 0xDC	; 220
    c51e:	7f 4f       	sbci	r23, 0xFF	; 255
    c520:	6b 01       	movw	r12, r22
    c522:	87 ff       	sbrs	r24, 7
    c524:	0d c0       	rjmp	.+26     	; 0xc540 <f_lseek+0x270>
    c526:	01 e0       	ldi	r16, 0x01	; 1
    c528:	10 e0       	ldi	r17, 0x00	; 0
    c52a:	f7 01       	movw	r30, r14
    c52c:	81 81       	ldd	r24, Z+1	; 0x01
    c52e:	0e 94 a6 6a 	call	0xd54c	; 0xd54c <disk_write>
    c532:	89 2b       	or	r24, r25
    c534:	09 f0       	breq	.+2      	; 0xc538 <f_lseek+0x268>
    c536:	32 cf       	rjmp	.-412    	; 0xc39c <f_lseek+0xcc>
    c538:	f1 01       	movw	r30, r2
    c53a:	86 85       	ldd	r24, Z+14	; 0x0e
    c53c:	8f 77       	andi	r24, 0x7F	; 127
    c53e:	86 87       	std	Z+14, r24	; 0x0e
    c540:	e9 81       	ldd	r30, Y+1	; 0x01
    c542:	fa 81       	ldd	r31, Y+2	; 0x02
    c544:	01 e0       	ldi	r16, 0x01	; 1
    c546:	10 e0       	ldi	r17, 0x00	; 0
    c548:	a5 01       	movw	r20, r10
    c54a:	94 01       	movw	r18, r8
    c54c:	b6 01       	movw	r22, r12
    c54e:	81 81       	ldd	r24, Z+1	; 0x01
    c550:	ed d7       	rcall	.+4058   	; 0xd52c <disk_read>
    c552:	89 2b       	or	r24, r25
    c554:	09 f0       	breq	.+2      	; 0xc558 <f_lseek+0x288>
    c556:	22 cf       	rjmp	.-444    	; 0xc39c <f_lseek+0xcc>
    c558:	f1 01       	movw	r30, r2
    c55a:	80 8e       	std	Z+24, r8	; 0x18
    c55c:	91 8e       	std	Z+25, r9	; 0x19
    c55e:	a2 8e       	std	Z+26, r10	; 0x1a
    c560:	b3 8e       	std	Z+27, r11	; 0x1b
    c562:	62 c1       	rjmp	.+708    	; 0xc828 <f_lseek+0x558>
    c564:	f1 01       	movw	r30, r2
    c566:	82 85       	ldd	r24, Z+10	; 0x0a
    c568:	93 85       	ldd	r25, Z+11	; 0x0b
    c56a:	a4 85       	ldd	r26, Z+12	; 0x0c
    c56c:	b5 85       	ldd	r27, Z+13	; 0x0d
    c56e:	8c 15       	cp	r24, r12
    c570:	9d 05       	cpc	r25, r13
    c572:	ae 05       	cpc	r26, r14
    c574:	bf 05       	cpc	r27, r15
    c576:	28 f4       	brcc	.+10     	; 0xc582 <f_lseek+0x2b2>
    c578:	26 85       	ldd	r18, Z+14	; 0x0e
    c57a:	21 fd       	sbrc	r18, 1
    c57c:	02 c0       	rjmp	.+4      	; 0xc582 <f_lseek+0x2b2>
    c57e:	6c 01       	movw	r12, r24
    c580:	7d 01       	movw	r14, r26
    c582:	f1 01       	movw	r30, r2
    c584:	40 88       	ldd	r4, Z+16	; 0x10
    c586:	51 88       	ldd	r5, Z+17	; 0x11
    c588:	62 88       	ldd	r6, Z+18	; 0x12
    c58a:	73 88       	ldd	r7, Z+19	; 0x13
    c58c:	10 8a       	std	Z+16, r1	; 0x10
    c58e:	11 8a       	std	Z+17, r1	; 0x11
    c590:	12 8a       	std	Z+18, r1	; 0x12
    c592:	13 8a       	std	Z+19, r1	; 0x13
    c594:	c1 14       	cp	r12, r1
    c596:	d1 04       	cpc	r13, r1
    c598:	e1 04       	cpc	r14, r1
    c59a:	f1 04       	cpc	r15, r1
    c59c:	09 f4       	brne	.+2      	; 0xc5a0 <f_lseek+0x2d0>
    c59e:	48 c1       	rjmp	.+656    	; 0xc830 <f_lseek+0x560>
    c5a0:	e9 81       	ldd	r30, Y+1	; 0x01
    c5a2:	fa 81       	ldd	r31, Y+2	; 0x02
    c5a4:	81 84       	ldd	r8, Z+9	; 0x09
    c5a6:	92 84       	ldd	r9, Z+10	; 0x0a
    c5a8:	a1 2c       	mov	r10, r1
    c5aa:	b1 2c       	mov	r11, r1
    c5ac:	39 e0       	ldi	r19, 0x09	; 9
    c5ae:	88 0c       	add	r8, r8
    c5b0:	99 1c       	adc	r9, r9
    c5b2:	aa 1c       	adc	r10, r10
    c5b4:	bb 1c       	adc	r11, r11
    c5b6:	3a 95       	dec	r19
    c5b8:	d1 f7       	brne	.-12     	; 0xc5ae <f_lseek+0x2de>
    c5ba:	41 14       	cp	r4, r1
    c5bc:	51 04       	cpc	r5, r1
    c5be:	61 04       	cpc	r6, r1
    c5c0:	71 04       	cpc	r7, r1
    c5c2:	d9 f1       	breq	.+118    	; 0xc63a <f_lseek+0x36a>
    c5c4:	f1 e0       	ldi	r31, 0x01	; 1
    c5c6:	4f 1a       	sub	r4, r31
    c5c8:	51 08       	sbc	r5, r1
    c5ca:	61 08       	sbc	r6, r1
    c5cc:	71 08       	sbc	r7, r1
    c5ce:	c7 01       	movw	r24, r14
    c5d0:	b6 01       	movw	r22, r12
    c5d2:	61 50       	subi	r22, 0x01	; 1
    c5d4:	71 09       	sbc	r23, r1
    c5d6:	81 09       	sbc	r24, r1
    c5d8:	91 09       	sbc	r25, r1
    c5da:	a5 01       	movw	r20, r10
    c5dc:	94 01       	movw	r18, r8
    c5de:	0e 94 37 e8 	call	0x1d06e	; 0x1d06e <__udivmodsi4>
    c5e2:	2b 83       	std	Y+3, r18	; 0x03
    c5e4:	3c 83       	std	Y+4, r19	; 0x04
    c5e6:	4d 83       	std	Y+5, r20	; 0x05
    c5e8:	5e 83       	std	Y+6, r21	; 0x06
    c5ea:	c3 01       	movw	r24, r6
    c5ec:	b2 01       	movw	r22, r4
    c5ee:	a5 01       	movw	r20, r10
    c5f0:	94 01       	movw	r18, r8
    c5f2:	0e 94 37 e8 	call	0x1d06e	; 0x1d06e <__udivmodsi4>
    c5f6:	6b 81       	ldd	r22, Y+3	; 0x03
    c5f8:	7c 81       	ldd	r23, Y+4	; 0x04
    c5fa:	8d 81       	ldd	r24, Y+5	; 0x05
    c5fc:	9e 81       	ldd	r25, Y+6	; 0x06
    c5fe:	62 17       	cp	r22, r18
    c600:	73 07       	cpc	r23, r19
    c602:	84 07       	cpc	r24, r20
    c604:	95 07       	cpc	r25, r21
    c606:	c8 f0       	brcs	.+50     	; 0xc63a <f_lseek+0x36a>
    c608:	88 27       	eor	r24, r24
    c60a:	99 27       	eor	r25, r25
    c60c:	dc 01       	movw	r26, r24
    c60e:	88 19       	sub	r24, r8
    c610:	99 09       	sbc	r25, r9
    c612:	aa 09       	sbc	r26, r10
    c614:	bb 09       	sbc	r27, r11
    c616:	48 22       	and	r4, r24
    c618:	59 22       	and	r5, r25
    c61a:	6a 22       	and	r6, r26
    c61c:	7b 22       	and	r7, r27
    c61e:	f1 01       	movw	r30, r2
    c620:	40 8a       	std	Z+16, r4	; 0x10
    c622:	51 8a       	std	Z+17, r5	; 0x11
    c624:	62 8a       	std	Z+18, r6	; 0x12
    c626:	73 8a       	std	Z+19, r7	; 0x13
    c628:	c4 18       	sub	r12, r4
    c62a:	d5 08       	sbc	r13, r5
    c62c:	e6 08       	sbc	r14, r6
    c62e:	f7 08       	sbc	r15, r7
    c630:	44 89       	ldd	r20, Z+20	; 0x14
    c632:	55 89       	ldd	r21, Z+21	; 0x15
    c634:	66 89       	ldd	r22, Z+22	; 0x16
    c636:	77 89       	ldd	r23, Z+23	; 0x17
    c638:	29 c0       	rjmp	.+82     	; 0xc68c <f_lseek+0x3bc>
    c63a:	f1 01       	movw	r30, r2
    c63c:	46 81       	ldd	r20, Z+6	; 0x06
    c63e:	57 81       	ldd	r21, Z+7	; 0x07
    c640:	60 85       	ldd	r22, Z+8	; 0x08
    c642:	71 85       	ldd	r23, Z+9	; 0x09
    c644:	41 15       	cp	r20, r1
    c646:	51 05       	cpc	r21, r1
    c648:	61 05       	cpc	r22, r1
    c64a:	71 05       	cpc	r23, r1
    c64c:	d1 f4       	brne	.+52     	; 0xc682 <f_lseek+0x3b2>
    c64e:	40 e0       	ldi	r20, 0x00	; 0
    c650:	50 e0       	ldi	r21, 0x00	; 0
    c652:	ba 01       	movw	r22, r20
    c654:	c1 01       	movw	r24, r2
    c656:	0e 94 a7 51 	call	0xa34e	; 0xa34e <create_chain>
    c65a:	ab 01       	movw	r20, r22
    c65c:	bc 01       	movw	r22, r24
    c65e:	41 30       	cpi	r20, 0x01	; 1
    c660:	51 05       	cpc	r21, r1
    c662:	61 05       	cpc	r22, r1
    c664:	71 05       	cpc	r23, r1
    c666:	09 f4       	brne	.+2      	; 0xc66a <f_lseek+0x39a>
    c668:	91 ce       	rjmp	.-734    	; 0xc38c <f_lseek+0xbc>
    c66a:	4f 3f       	cpi	r20, 0xFF	; 255
    c66c:	ff ef       	ldi	r31, 0xFF	; 255
    c66e:	5f 07       	cpc	r21, r31
    c670:	6f 07       	cpc	r22, r31
    c672:	7f 07       	cpc	r23, r31
    c674:	09 f4       	brne	.+2      	; 0xc678 <f_lseek+0x3a8>
    c676:	92 ce       	rjmp	.-732    	; 0xc39c <f_lseek+0xcc>
    c678:	f1 01       	movw	r30, r2
    c67a:	46 83       	std	Z+6, r20	; 0x06
    c67c:	57 83       	std	Z+7, r21	; 0x07
    c67e:	60 87       	std	Z+8, r22	; 0x08
    c680:	71 87       	std	Z+9, r23	; 0x09
    c682:	f1 01       	movw	r30, r2
    c684:	44 8b       	std	Z+20, r20	; 0x14
    c686:	55 8b       	std	Z+21, r21	; 0x15
    c688:	66 8b       	std	Z+22, r22	; 0x16
    c68a:	77 8b       	std	Z+23, r23	; 0x17
    c68c:	41 15       	cp	r20, r1
    c68e:	51 05       	cpc	r21, r1
    c690:	61 05       	cpc	r22, r1
    c692:	71 05       	cpc	r23, r1
    c694:	09 f0       	breq	.+2      	; 0xc698 <f_lseek+0x3c8>
    c696:	40 c0       	rjmp	.+128    	; 0xc718 <f_lseek+0x448>
    c698:	c1 2c       	mov	r12, r1
    c69a:	d1 2c       	mov	r13, r1
    c69c:	76 01       	movw	r14, r12
    c69e:	79 c0       	rjmp	.+242    	; 0xc792 <f_lseek+0x4c2>
    c6a0:	c8 18       	sub	r12, r8
    c6a2:	d9 08       	sbc	r13, r9
    c6a4:	ea 08       	sbc	r14, r10
    c6a6:	fb 08       	sbc	r15, r11
    c6a8:	f1 01       	movw	r30, r2
    c6aa:	80 89       	ldd	r24, Z+16	; 0x10
    c6ac:	91 89       	ldd	r25, Z+17	; 0x11
    c6ae:	a2 89       	ldd	r26, Z+18	; 0x12
    c6b0:	b3 89       	ldd	r27, Z+19	; 0x13
    c6b2:	88 0d       	add	r24, r8
    c6b4:	99 1d       	adc	r25, r9
    c6b6:	aa 1d       	adc	r26, r10
    c6b8:	bb 1d       	adc	r27, r11
    c6ba:	80 8b       	std	Z+16, r24	; 0x10
    c6bc:	91 8b       	std	Z+17, r25	; 0x11
    c6be:	a2 8b       	std	Z+18, r26	; 0x12
    c6c0:	b3 8b       	std	Z+19, r27	; 0x13
    c6c2:	86 85       	ldd	r24, Z+14	; 0x0e
    c6c4:	81 ff       	sbrs	r24, 1
    c6c6:	2f c0       	rjmp	.+94     	; 0xc726 <f_lseek+0x456>
    c6c8:	c1 01       	movw	r24, r2
    c6ca:	0e 94 a7 51 	call	0xa34e	; 0xa34e <create_chain>
    c6ce:	ab 01       	movw	r20, r22
    c6d0:	bc 01       	movw	r22, r24
    c6d2:	41 15       	cp	r20, r1
    c6d4:	51 05       	cpc	r21, r1
    c6d6:	61 05       	cpc	r22, r1
    c6d8:	71 05       	cpc	r23, r1
    c6da:	61 f1       	breq	.+88     	; 0xc734 <f_lseek+0x464>
    c6dc:	4f 3f       	cpi	r20, 0xFF	; 255
    c6de:	bf ef       	ldi	r27, 0xFF	; 255
    c6e0:	5b 07       	cpc	r21, r27
    c6e2:	6b 07       	cpc	r22, r27
    c6e4:	7b 07       	cpc	r23, r27
    c6e6:	09 f4       	brne	.+2      	; 0xc6ea <f_lseek+0x41a>
    c6e8:	59 ce       	rjmp	.-846    	; 0xc39c <f_lseek+0xcc>
    c6ea:	42 30       	cpi	r20, 0x02	; 2
    c6ec:	51 05       	cpc	r21, r1
    c6ee:	61 05       	cpc	r22, r1
    c6f0:	71 05       	cpc	r23, r1
    c6f2:	08 f4       	brcc	.+2      	; 0xc6f6 <f_lseek+0x426>
    c6f4:	4b ce       	rjmp	.-874    	; 0xc38c <f_lseek+0xbc>
    c6f6:	e9 81       	ldd	r30, Y+1	; 0x01
    c6f8:	fa 81       	ldd	r31, Y+2	; 0x02
    c6fa:	81 8d       	ldd	r24, Z+25	; 0x19
    c6fc:	92 8d       	ldd	r25, Z+26	; 0x1a
    c6fe:	a3 8d       	ldd	r26, Z+27	; 0x1b
    c700:	b4 8d       	ldd	r27, Z+28	; 0x1c
    c702:	48 17       	cp	r20, r24
    c704:	59 07       	cpc	r21, r25
    c706:	6a 07       	cpc	r22, r26
    c708:	7b 07       	cpc	r23, r27
    c70a:	08 f0       	brcs	.+2      	; 0xc70e <f_lseek+0x43e>
    c70c:	3f ce       	rjmp	.-898    	; 0xc38c <f_lseek+0xbc>
    c70e:	f1 01       	movw	r30, r2
    c710:	44 8b       	std	Z+20, r20	; 0x14
    c712:	55 8b       	std	Z+21, r21	; 0x15
    c714:	66 8b       	std	Z+22, r22	; 0x16
    c716:	77 8b       	std	Z+23, r23	; 0x17
    c718:	8c 14       	cp	r8, r12
    c71a:	9d 04       	cpc	r9, r13
    c71c:	ae 04       	cpc	r10, r14
    c71e:	bf 04       	cpc	r11, r15
    c720:	08 f4       	brcc	.+2      	; 0xc724 <f_lseek+0x454>
    c722:	be cf       	rjmp	.-132    	; 0xc6a0 <f_lseek+0x3d0>
    c724:	0a c0       	rjmp	.+20     	; 0xc73a <f_lseek+0x46a>
    c726:	80 81       	ld	r24, Z
    c728:	91 81       	ldd	r25, Z+1	; 0x01
    c72a:	0e 94 32 50 	call	0xa064	; 0xa064 <get_fat.isra.9>
    c72e:	ab 01       	movw	r20, r22
    c730:	bc 01       	movw	r22, r24
    c732:	d4 cf       	rjmp	.-88     	; 0xc6dc <f_lseek+0x40c>
    c734:	c1 2c       	mov	r12, r1
    c736:	d1 2c       	mov	r13, r1
    c738:	76 01       	movw	r14, r12
    c73a:	f1 01       	movw	r30, r2
    c73c:	80 89       	ldd	r24, Z+16	; 0x10
    c73e:	91 89       	ldd	r25, Z+17	; 0x11
    c740:	a2 89       	ldd	r26, Z+18	; 0x12
    c742:	b3 89       	ldd	r27, Z+19	; 0x13
    c744:	8c 0d       	add	r24, r12
    c746:	9d 1d       	adc	r25, r13
    c748:	ae 1d       	adc	r26, r14
    c74a:	bf 1d       	adc	r27, r15
    c74c:	80 8b       	std	Z+16, r24	; 0x10
    c74e:	91 8b       	std	Z+17, r25	; 0x11
    c750:	a2 8b       	std	Z+18, r26	; 0x12
    c752:	b3 8b       	std	Z+19, r27	; 0x13
    c754:	d7 01       	movw	r26, r14
    c756:	c6 01       	movw	r24, r12
    c758:	91 70       	andi	r25, 0x01	; 1
    c75a:	aa 27       	eor	r26, r26
    c75c:	bb 27       	eor	r27, r27
    c75e:	89 2b       	or	r24, r25
    c760:	8a 2b       	or	r24, r26
    c762:	8b 2b       	or	r24, r27
    c764:	09 f4       	brne	.+2      	; 0xc768 <f_lseek+0x498>
    c766:	98 cf       	rjmp	.-208    	; 0xc698 <f_lseek+0x3c8>
    c768:	89 81       	ldd	r24, Y+1	; 0x01
    c76a:	9a 81       	ldd	r25, Y+2	; 0x02
    c76c:	0e 94 d5 48 	call	0x91aa	; 0x91aa <clst2sect>
    c770:	61 15       	cp	r22, r1
    c772:	71 05       	cpc	r23, r1
    c774:	81 05       	cpc	r24, r1
    c776:	91 05       	cpc	r25, r1
    c778:	09 f4       	brne	.+2      	; 0xc77c <f_lseek+0x4ac>
    c77a:	08 ce       	rjmp	.-1008   	; 0xc38c <f_lseek+0xbc>
    c77c:	29 e0       	ldi	r18, 0x09	; 9
    c77e:	f6 94       	lsr	r15
    c780:	e7 94       	ror	r14
    c782:	d7 94       	ror	r13
    c784:	c7 94       	ror	r12
    c786:	2a 95       	dec	r18
    c788:	d1 f7       	brne	.-12     	; 0xc77e <f_lseek+0x4ae>
    c78a:	c6 0e       	add	r12, r22
    c78c:	d7 1e       	adc	r13, r23
    c78e:	e8 1e       	adc	r14, r24
    c790:	f9 1e       	adc	r15, r25
    c792:	f1 01       	movw	r30, r2
    c794:	80 89       	ldd	r24, Z+16	; 0x10
    c796:	91 89       	ldd	r25, Z+17	; 0x11
    c798:	a2 89       	ldd	r26, Z+18	; 0x12
    c79a:	b3 89       	ldd	r27, Z+19	; 0x13
    c79c:	42 85       	ldd	r20, Z+10	; 0x0a
    c79e:	53 85       	ldd	r21, Z+11	; 0x0b
    c7a0:	64 85       	ldd	r22, Z+12	; 0x0c
    c7a2:	75 85       	ldd	r23, Z+13	; 0x0d
    c7a4:	48 17       	cp	r20, r24
    c7a6:	59 07       	cpc	r21, r25
    c7a8:	6a 07       	cpc	r22, r26
    c7aa:	7b 07       	cpc	r23, r27
    c7ac:	38 f4       	brcc	.+14     	; 0xc7bc <f_lseek+0x4ec>
    c7ae:	82 87       	std	Z+10, r24	; 0x0a
    c7b0:	93 87       	std	Z+11, r25	; 0x0b
    c7b2:	a4 87       	std	Z+12, r26	; 0x0c
    c7b4:	b5 87       	std	Z+13, r27	; 0x0d
    c7b6:	26 85       	ldd	r18, Z+14	; 0x0e
    c7b8:	20 64       	ori	r18, 0x40	; 64
    c7ba:	26 87       	std	Z+14, r18	; 0x0e
    c7bc:	91 70       	andi	r25, 0x01	; 1
    c7be:	aa 27       	eor	r26, r26
    c7c0:	bb 27       	eor	r27, r27
    c7c2:	89 2b       	or	r24, r25
    c7c4:	8a 2b       	or	r24, r26
    c7c6:	8b 2b       	or	r24, r27
    c7c8:	79 f1       	breq	.+94     	; 0xc828 <f_lseek+0x558>
    c7ca:	f1 01       	movw	r30, r2
    c7cc:	20 8d       	ldd	r18, Z+24	; 0x18
    c7ce:	31 8d       	ldd	r19, Z+25	; 0x19
    c7d0:	42 8d       	ldd	r20, Z+26	; 0x1a
    c7d2:	53 8d       	ldd	r21, Z+27	; 0x1b
    c7d4:	2c 15       	cp	r18, r12
    c7d6:	3d 05       	cpc	r19, r13
    c7d8:	4e 05       	cpc	r20, r14
    c7da:	5f 05       	cpc	r21, r15
    c7dc:	29 f1       	breq	.+74     	; 0xc828 <f_lseek+0x558>
    c7de:	86 85       	ldd	r24, Z+14	; 0x0e
    c7e0:	b1 01       	movw	r22, r2
    c7e2:	6c 5d       	subi	r22, 0xDC	; 220
    c7e4:	7f 4f       	sbci	r23, 0xFF	; 255
    c7e6:	5b 01       	movw	r10, r22
    c7e8:	87 ff       	sbrs	r24, 7
    c7ea:	0d c0       	rjmp	.+26     	; 0xc806 <f_lseek+0x536>
    c7ec:	e9 81       	ldd	r30, Y+1	; 0x01
    c7ee:	fa 81       	ldd	r31, Y+2	; 0x02
    c7f0:	01 e0       	ldi	r16, 0x01	; 1
    c7f2:	10 e0       	ldi	r17, 0x00	; 0
    c7f4:	81 81       	ldd	r24, Z+1	; 0x01
    c7f6:	aa d6       	rcall	.+3412   	; 0xd54c <disk_write>
    c7f8:	89 2b       	or	r24, r25
    c7fa:	09 f0       	breq	.+2      	; 0xc7fe <f_lseek+0x52e>
    c7fc:	cf cd       	rjmp	.-1122   	; 0xc39c <f_lseek+0xcc>
    c7fe:	f1 01       	movw	r30, r2
    c800:	86 85       	ldd	r24, Z+14	; 0x0e
    c802:	8f 77       	andi	r24, 0x7F	; 127
    c804:	86 87       	std	Z+14, r24	; 0x0e
    c806:	e9 81       	ldd	r30, Y+1	; 0x01
    c808:	fa 81       	ldd	r31, Y+2	; 0x02
    c80a:	01 e0       	ldi	r16, 0x01	; 1
    c80c:	10 e0       	ldi	r17, 0x00	; 0
    c80e:	a7 01       	movw	r20, r14
    c810:	96 01       	movw	r18, r12
    c812:	b5 01       	movw	r22, r10
    c814:	81 81       	ldd	r24, Z+1	; 0x01
    c816:	8a d6       	rcall	.+3348   	; 0xd52c <disk_read>
    c818:	89 2b       	or	r24, r25
    c81a:	09 f0       	breq	.+2      	; 0xc81e <f_lseek+0x54e>
    c81c:	bf cd       	rjmp	.-1154   	; 0xc39c <f_lseek+0xcc>
    c81e:	f1 01       	movw	r30, r2
    c820:	c0 8e       	std	Z+24, r12	; 0x18
    c822:	d1 8e       	std	Z+25, r13	; 0x19
    c824:	e2 8e       	std	Z+26, r14	; 0x1a
    c826:	f3 8e       	std	Z+27, r15	; 0x1b
    c828:	80 e0       	ldi	r24, 0x00	; 0
    c82a:	bb cd       	rjmp	.-1162   	; 0xc3a2 <f_lseek+0xd2>
    c82c:	81 e1       	ldi	r24, 0x11	; 17
    c82e:	b9 cd       	rjmp	.-1166   	; 0xc3a2 <f_lseek+0xd2>
    c830:	80 e0       	ldi	r24, 0x00	; 0
    c832:	90 e0       	ldi	r25, 0x00	; 0
    c834:	dc 01       	movw	r26, r24
    c836:	c1 2c       	mov	r12, r1
    c838:	d1 2c       	mov	r13, r1
    c83a:	76 01       	movw	r14, r12
    c83c:	bf cf       	rjmp	.-130    	; 0xc7bc <f_lseek+0x4ec>
    c83e:	2a 96       	adiw	r28, 0x0a	; 10
    c840:	e2 e1       	ldi	r30, 0x12	; 18
    c842:	0c 94 c0 e8 	jmp	0x1d180	; 0x1d180 <__epilogue_restores__>

0000c846 <f_opendir>:
    c846:	a4 e0       	ldi	r26, 0x04	; 4
    c848:	b0 e0       	ldi	r27, 0x00	; 0
    c84a:	e9 e2       	ldi	r30, 0x29	; 41
    c84c:	f4 e6       	ldi	r31, 0x64	; 100
    c84e:	0c 94 ae e8 	jmp	0x1d15c	; 0x1d15c <__prologue_saves__+0x14>
    c852:	7c 83       	std	Y+4, r23	; 0x04
    c854:	6b 83       	std	Y+3, r22	; 0x03
    c856:	00 97       	sbiw	r24, 0x00	; 0
    c858:	09 f4       	brne	.+2      	; 0xc85c <f_opendir+0x16>
    c85a:	48 c0       	rjmp	.+144    	; 0xc8ec <f_opendir+0xa6>
    c85c:	8c 01       	movw	r16, r24
    c85e:	40 e0       	ldi	r20, 0x00	; 0
    c860:	be 01       	movw	r22, r28
    c862:	6f 5f       	subi	r22, 0xFF	; 255
    c864:	7f 4f       	sbci	r23, 0xFF	; 255
    c866:	ce 01       	movw	r24, r28
    c868:	03 96       	adiw	r24, 0x03	; 3
    c86a:	0e 94 df 4c 	call	0x99be	; 0x99be <mount_volume>
    c86e:	7c 01       	movw	r14, r24
    c870:	89 2b       	or	r24, r25
    c872:	b9 f5       	brne	.+110    	; 0xc8e2 <f_opendir+0x9c>
    c874:	89 81       	ldd	r24, Y+1	; 0x01
    c876:	9a 81       	ldd	r25, Y+2	; 0x02
    c878:	f8 01       	movw	r30, r16
    c87a:	91 83       	std	Z+1, r25	; 0x01
    c87c:	80 83       	st	Z, r24
    c87e:	80 e0       	ldi	r24, 0x00	; 0
    c880:	92 e0       	ldi	r25, 0x02	; 2
    c882:	98 d5       	rcall	.+2864   	; 0xd3b4 <ff_memalloc>
    c884:	6c 01       	movw	r12, r24
    c886:	00 97       	sbiw	r24, 0x00	; 0
    c888:	99 f1       	breq	.+102    	; 0xc8f0 <f_opendir+0xaa>
    c88a:	e9 81       	ldd	r30, Y+1	; 0x01
    c88c:	fa 81       	ldd	r31, Y+2	; 0x02
    c88e:	94 87       	std	Z+12, r25	; 0x0c
    c890:	83 87       	std	Z+11, r24	; 0x0b
    c892:	6b 81       	ldd	r22, Y+3	; 0x03
    c894:	7c 81       	ldd	r23, Y+4	; 0x04
    c896:	c8 01       	movw	r24, r16
    c898:	0e 94 2c 58 	call	0xb058	; 0xb058 <follow_path>
    c89c:	7c 01       	movw	r14, r24
    c89e:	89 2b       	or	r24, r25
    c8a0:	b9 f4       	brne	.+46     	; 0xc8d0 <f_opendir+0x8a>
    c8a2:	f8 01       	movw	r30, r16
    c8a4:	87 a1       	ldd	r24, Z+39	; 0x27
    c8a6:	87 fd       	sbrc	r24, 7
    c8a8:	28 c0       	rjmp	.+80     	; 0xc8fa <f_opendir+0xb4>
    c8aa:	84 81       	ldd	r24, Z+4	; 0x04
    c8ac:	84 ff       	sbrs	r24, 4
    c8ae:	0d c0       	rjmp	.+26     	; 0xc8ca <f_opendir+0x84>
    c8b0:	62 8d       	ldd	r22, Z+26	; 0x1a
    c8b2:	73 8d       	ldd	r23, Z+27	; 0x1b
    c8b4:	e9 81       	ldd	r30, Y+1	; 0x01
    c8b6:	fa 81       	ldd	r31, Y+2	; 0x02
    c8b8:	80 81       	ld	r24, Z
    c8ba:	0e 94 d5 4a 	call	0x95aa	; 0x95aa <ld_clust.isra.3>
    c8be:	f8 01       	movw	r30, r16
    c8c0:	66 83       	std	Z+6, r22	; 0x06
    c8c2:	77 83       	std	Z+7, r23	; 0x07
    c8c4:	80 87       	std	Z+8, r24	; 0x08
    c8c6:	91 87       	std	Z+9, r25	; 0x09
    c8c8:	18 c0       	rjmp	.+48     	; 0xc8fa <f_opendir+0xb4>
    c8ca:	95 e0       	ldi	r25, 0x05	; 5
    c8cc:	e9 2e       	mov	r14, r25
    c8ce:	f1 2c       	mov	r15, r1
    c8d0:	c6 01       	movw	r24, r12
    c8d2:	73 d5       	rcall	.+2790   	; 0xd3ba <ff_memfree>
    c8d4:	f4 e0       	ldi	r31, 0x04	; 4
    c8d6:	ef 16       	cp	r14, r31
    c8d8:	f1 04       	cpc	r15, r1
    c8da:	f1 f0       	breq	.+60     	; 0xc918 <f_opendir+0xd2>
    c8dc:	e1 14       	cp	r14, r1
    c8de:	f1 04       	cpc	r15, r1
    c8e0:	49 f0       	breq	.+18     	; 0xc8f4 <f_opendir+0xae>
    c8e2:	f8 01       	movw	r30, r16
    c8e4:	11 82       	std	Z+1, r1	; 0x01
    c8e6:	10 82       	st	Z, r1
    c8e8:	c7 01       	movw	r24, r14
    c8ea:	1a c0       	rjmp	.+52     	; 0xc920 <f_opendir+0xda>
    c8ec:	89 e0       	ldi	r24, 0x09	; 9
    c8ee:	03 c0       	rjmp	.+6      	; 0xc8f6 <f_opendir+0xb0>
    c8f0:	81 e1       	ldi	r24, 0x11	; 17
    c8f2:	01 c0       	rjmp	.+2      	; 0xc8f6 <f_opendir+0xb0>
    c8f4:	80 e0       	ldi	r24, 0x00	; 0
    c8f6:	90 e0       	ldi	r25, 0x00	; 0
    c8f8:	13 c0       	rjmp	.+38     	; 0xc920 <f_opendir+0xda>
    c8fa:	e9 81       	ldd	r30, Y+1	; 0x01
    c8fc:	fa 81       	ldd	r31, Y+2	; 0x02
    c8fe:	85 81       	ldd	r24, Z+5	; 0x05
    c900:	96 81       	ldd	r25, Z+6	; 0x06
    c902:	f8 01       	movw	r30, r16
    c904:	93 83       	std	Z+3, r25	; 0x03
    c906:	82 83       	std	Z+2, r24	; 0x02
    c908:	40 e0       	ldi	r20, 0x00	; 0
    c90a:	50 e0       	ldi	r21, 0x00	; 0
    c90c:	ba 01       	movw	r22, r20
    c90e:	c8 01       	movw	r24, r16
    c910:	0e 94 e6 50 	call	0xa1cc	; 0xa1cc <dir_sdi>
    c914:	7c 01       	movw	r14, r24
    c916:	dc cf       	rjmp	.-72     	; 0xc8d0 <f_opendir+0x8a>
    c918:	85 e0       	ldi	r24, 0x05	; 5
    c91a:	e8 2e       	mov	r14, r24
    c91c:	f1 2c       	mov	r15, r1
    c91e:	e1 cf       	rjmp	.-62     	; 0xc8e2 <f_opendir+0x9c>
    c920:	24 96       	adiw	r28, 0x04	; 4
    c922:	e8 e0       	ldi	r30, 0x08	; 8
    c924:	0c 94 ca e8 	jmp	0x1d194	; 0x1d194 <__epilogue_restores__+0x14>

0000c928 <f_closedir>:
    c928:	a2 e0       	ldi	r26, 0x02	; 2
    c92a:	b0 e0       	ldi	r27, 0x00	; 0
    c92c:	ea e9       	ldi	r30, 0x9A	; 154
    c92e:	f4 e6       	ldi	r31, 0x64	; 100
    c930:	0c 94 b2 e8 	jmp	0x1d164	; 0x1d164 <__prologue_saves__+0x1c>
    c934:	8c 01       	movw	r16, r24
    c936:	be 01       	movw	r22, r28
    c938:	6f 5f       	subi	r22, 0xFF	; 255
    c93a:	7f 4f       	sbci	r23, 0xFF	; 255
    c93c:	0e 94 74 49 	call	0x92e8	; 0x92e8 <validate>
    c940:	00 97       	sbiw	r24, 0x00	; 0
    c942:	19 f4       	brne	.+6      	; 0xc94a <f_closedir+0x22>
    c944:	f8 01       	movw	r30, r16
    c946:	11 82       	std	Z+1, r1	; 0x01
    c948:	10 82       	st	Z, r1
    c94a:	22 96       	adiw	r28, 0x02	; 2
    c94c:	e4 e0       	ldi	r30, 0x04	; 4
    c94e:	0c 94 ce e8 	jmp	0x1d19c	; 0x1d19c <__epilogue_restores__+0x1c>

0000c952 <f_readdir>:
    c952:	a2 e0       	ldi	r26, 0x02	; 2
    c954:	b0 e0       	ldi	r27, 0x00	; 0
    c956:	ef ea       	ldi	r30, 0xAF	; 175
    c958:	f4 e6       	ldi	r31, 0x64	; 100
    c95a:	0c 94 ac e8 	jmp	0x1d158	; 0x1d158 <__prologue_saves__+0x10>
    c95e:	7c 01       	movw	r14, r24
    c960:	5b 01       	movw	r10, r22
    c962:	be 01       	movw	r22, r28
    c964:	6f 5f       	subi	r22, 0xFF	; 255
    c966:	7f 4f       	sbci	r23, 0xFF	; 255
    c968:	0e 94 74 49 	call	0x92e8	; 0x92e8 <validate>
    c96c:	00 97       	sbiw	r24, 0x00	; 0
    c96e:	89 f5       	brne	.+98     	; 0xc9d2 <f_readdir+0x80>
    c970:	a1 14       	cp	r10, r1
    c972:	b1 04       	cpc	r11, r1
    c974:	39 f4       	brne	.+14     	; 0xc984 <f_readdir+0x32>
    c976:	40 e0       	ldi	r20, 0x00	; 0
    c978:	50 e0       	ldi	r21, 0x00	; 0
    c97a:	ba 01       	movw	r22, r20
    c97c:	c7 01       	movw	r24, r14
    c97e:	0e 94 e6 50 	call	0xa1cc	; 0xa1cc <dir_sdi>
    c982:	27 c0       	rjmp	.+78     	; 0xc9d2 <f_readdir+0x80>
    c984:	80 e0       	ldi	r24, 0x00	; 0
    c986:	92 e0       	ldi	r25, 0x02	; 2
    c988:	15 d5       	rcall	.+2602   	; 0xd3b4 <ff_memalloc>
    c98a:	6c 01       	movw	r12, r24
    c98c:	00 97       	sbiw	r24, 0x00	; 0
    c98e:	f9 f0       	breq	.+62     	; 0xc9ce <f_readdir+0x7c>
    c990:	e9 81       	ldd	r30, Y+1	; 0x01
    c992:	fa 81       	ldd	r31, Y+2	; 0x02
    c994:	94 87       	std	Z+12, r25	; 0x0c
    c996:	83 87       	std	Z+11, r24	; 0x0b
    c998:	60 e0       	ldi	r22, 0x00	; 0
    c99a:	70 e0       	ldi	r23, 0x00	; 0
    c99c:	c7 01       	movw	r24, r14
    c99e:	0e 94 7f 54 	call	0xa8fe	; 0xa8fe <dir_read>
    c9a2:	8c 01       	movw	r16, r24
    c9a4:	8b 7f       	andi	r24, 0xFB	; 251
    c9a6:	89 2b       	or	r24, r25
    c9a8:	71 f4       	brne	.+28     	; 0xc9c6 <f_readdir+0x74>
    c9aa:	b5 01       	movw	r22, r10
    c9ac:	c7 01       	movw	r24, r14
    c9ae:	0e 94 a0 49 	call	0x9340	; 0x9340 <get_fileinfo>
    c9b2:	60 e0       	ldi	r22, 0x00	; 0
    c9b4:	70 e0       	ldi	r23, 0x00	; 0
    c9b6:	c7 01       	movw	r24, r14
    c9b8:	0e 94 5e 53 	call	0xa6bc	; 0xa6bc <dir_next>
    c9bc:	8c 01       	movw	r16, r24
    c9be:	04 97       	sbiw	r24, 0x04	; 4
    c9c0:	11 f4       	brne	.+4      	; 0xc9c6 <f_readdir+0x74>
    c9c2:	00 e0       	ldi	r16, 0x00	; 0
    c9c4:	10 e0       	ldi	r17, 0x00	; 0
    c9c6:	c6 01       	movw	r24, r12
    c9c8:	f8 d4       	rcall	.+2544   	; 0xd3ba <ff_memfree>
    c9ca:	c8 01       	movw	r24, r16
    c9cc:	02 c0       	rjmp	.+4      	; 0xc9d2 <f_readdir+0x80>
    c9ce:	81 e1       	ldi	r24, 0x11	; 17
    c9d0:	90 e0       	ldi	r25, 0x00	; 0
    c9d2:	22 96       	adiw	r28, 0x02	; 2
    c9d4:	ea e0       	ldi	r30, 0x0A	; 10
    c9d6:	0c 94 c8 e8 	jmp	0x1d190	; 0x1d190 <__epilogue_restores__+0x10>

0000c9da <f_stat>:
    c9da:	a0 e3       	ldi	r26, 0x30	; 48
    c9dc:	b0 e0       	ldi	r27, 0x00	; 0
    c9de:	e3 ef       	ldi	r30, 0xF3	; 243
    c9e0:	f4 e6       	ldi	r31, 0x64	; 100
    c9e2:	0c 94 ae e8 	jmp	0x1d15c	; 0x1d15c <__prologue_saves__+0x14>
    c9e6:	98 ab       	std	Y+48, r25	; 0x30
    c9e8:	8f a7       	std	Y+47, r24	; 0x2f
    c9ea:	6b 01       	movw	r12, r22
    c9ec:	40 e0       	ldi	r20, 0x00	; 0
    c9ee:	be 01       	movw	r22, r28
    c9f0:	6f 5f       	subi	r22, 0xFF	; 255
    c9f2:	7f 4f       	sbci	r23, 0xFF	; 255
    c9f4:	ce 01       	movw	r24, r28
    c9f6:	8f 96       	adiw	r24, 0x2f	; 47
    c9f8:	0e 94 df 4c 	call	0x99be	; 0x99be <mount_volume>
    c9fc:	00 97       	sbiw	r24, 0x00	; 0
    c9fe:	39 f5       	brne	.+78     	; 0xca4e <f_stat+0x74>
    ca00:	80 e0       	ldi	r24, 0x00	; 0
    ca02:	92 e0       	ldi	r25, 0x02	; 2
    ca04:	d7 d4       	rcall	.+2478   	; 0xd3b4 <ff_memalloc>
    ca06:	7c 01       	movw	r14, r24
    ca08:	00 97       	sbiw	r24, 0x00	; 0
    ca0a:	f9 f0       	breq	.+62     	; 0xca4a <f_stat+0x70>
    ca0c:	e9 81       	ldd	r30, Y+1	; 0x01
    ca0e:	fa 81       	ldd	r31, Y+2	; 0x02
    ca10:	94 87       	std	Z+12, r25	; 0x0c
    ca12:	83 87       	std	Z+11, r24	; 0x0b
    ca14:	6f a5       	ldd	r22, Y+47	; 0x2f
    ca16:	78 a9       	ldd	r23, Y+48	; 0x30
    ca18:	ce 01       	movw	r24, r28
    ca1a:	01 96       	adiw	r24, 0x01	; 1
    ca1c:	0e 94 2c 58 	call	0xb058	; 0xb058 <follow_path>
    ca20:	8c 01       	movw	r16, r24
    ca22:	89 2b       	or	r24, r25
    ca24:	71 f4       	brne	.+28     	; 0xca42 <f_stat+0x68>
    ca26:	88 a5       	ldd	r24, Y+40	; 0x28
    ca28:	87 fd       	sbrc	r24, 7
    ca2a:	09 c0       	rjmp	.+18     	; 0xca3e <f_stat+0x64>
    ca2c:	c1 14       	cp	r12, r1
    ca2e:	d1 04       	cpc	r13, r1
    ca30:	41 f0       	breq	.+16     	; 0xca42 <f_stat+0x68>
    ca32:	b6 01       	movw	r22, r12
    ca34:	ce 01       	movw	r24, r28
    ca36:	01 96       	adiw	r24, 0x01	; 1
    ca38:	0e 94 a0 49 	call	0x9340	; 0x9340 <get_fileinfo>
    ca3c:	02 c0       	rjmp	.+4      	; 0xca42 <f_stat+0x68>
    ca3e:	06 e0       	ldi	r16, 0x06	; 6
    ca40:	10 e0       	ldi	r17, 0x00	; 0
    ca42:	c7 01       	movw	r24, r14
    ca44:	ba d4       	rcall	.+2420   	; 0xd3ba <ff_memfree>
    ca46:	c8 01       	movw	r24, r16
    ca48:	02 c0       	rjmp	.+4      	; 0xca4e <f_stat+0x74>
    ca4a:	81 e1       	ldi	r24, 0x11	; 17
    ca4c:	90 e0       	ldi	r25, 0x00	; 0
    ca4e:	e0 96       	adiw	r28, 0x30	; 48
    ca50:	e8 e0       	ldi	r30, 0x08	; 8
    ca52:	0c 94 ca e8 	jmp	0x1d194	; 0x1d194 <__epilogue_restores__+0x14>

0000ca56 <f_getfree>:
    ca56:	aa e0       	ldi	r26, 0x0A	; 10
    ca58:	b0 e0       	ldi	r27, 0x00	; 0
    ca5a:	e1 e3       	ldi	r30, 0x31	; 49
    ca5c:	f5 e6       	ldi	r31, 0x65	; 101
    ca5e:	0c 94 a4 e8 	jmp	0x1d148	; 0x1d148 <__prologue_saves__>
    ca62:	9c 83       	std	Y+4, r25	; 0x04
    ca64:	8b 83       	std	Y+3, r24	; 0x03
    ca66:	7e 83       	std	Y+6, r23	; 0x06
    ca68:	6d 83       	std	Y+5, r22	; 0x05
    ca6a:	7a 01       	movw	r14, r20
    ca6c:	40 e0       	ldi	r20, 0x00	; 0
    ca6e:	be 01       	movw	r22, r28
    ca70:	6f 5f       	subi	r22, 0xFF	; 255
    ca72:	7f 4f       	sbci	r23, 0xFF	; 255
    ca74:	ce 01       	movw	r24, r28
    ca76:	03 96       	adiw	r24, 0x03	; 3
    ca78:	0e 94 df 4c 	call	0x99be	; 0x99be <mount_volume>
    ca7c:	8c 01       	movw	r16, r24
    ca7e:	89 2b       	or	r24, r25
    ca80:	09 f0       	breq	.+2      	; 0xca84 <f_getfree+0x2e>
    ca82:	c4 c0       	rjmp	.+392    	; 0xcc0c <f_getfree+0x1b6>
    ca84:	69 80       	ldd	r6, Y+1	; 0x01
    ca86:	7a 80       	ldd	r7, Y+2	; 0x02
    ca88:	d7 01       	movw	r26, r14
    ca8a:	6d 92       	st	X+, r6
    ca8c:	7c 92       	st	X, r7
    ca8e:	f3 01       	movw	r30, r6
    ca90:	81 89       	ldd	r24, Z+17	; 0x11
    ca92:	92 89       	ldd	r25, Z+18	; 0x12
    ca94:	a3 89       	ldd	r26, Z+19	; 0x13
    ca96:	b4 89       	ldd	r27, Z+20	; 0x14
    ca98:	81 8c       	ldd	r8, Z+25	; 0x19
    ca9a:	92 8c       	ldd	r9, Z+26	; 0x1a
    ca9c:	a3 8c       	ldd	r10, Z+27	; 0x1b
    ca9e:	b4 8c       	ldd	r11, Z+28	; 0x1c
    caa0:	b5 01       	movw	r22, r10
    caa2:	a4 01       	movw	r20, r8
    caa4:	42 50       	subi	r20, 0x02	; 2
    caa6:	51 09       	sbc	r21, r1
    caa8:	61 09       	sbc	r22, r1
    caaa:	71 09       	sbc	r23, r1
    caac:	48 17       	cp	r20, r24
    caae:	59 07       	cpc	r21, r25
    cab0:	6a 07       	cpc	r22, r26
    cab2:	7b 07       	cpc	r23, r27
    cab4:	38 f0       	brcs	.+14     	; 0xcac4 <f_getfree+0x6e>
    cab6:	ed 81       	ldd	r30, Y+5	; 0x05
    cab8:	fe 81       	ldd	r31, Y+6	; 0x06
    caba:	80 83       	st	Z, r24
    cabc:	91 83       	std	Z+1, r25	; 0x01
    cabe:	a2 83       	std	Z+2, r26	; 0x02
    cac0:	b3 83       	std	Z+3, r27	; 0x03
    cac2:	a4 c0       	rjmp	.+328    	; 0xcc0c <f_getfree+0x1b6>
    cac4:	80 81       	ld	r24, Z
    cac6:	81 30       	cpi	r24, 0x01	; 1
    cac8:	a1 f5       	brne	.+104    	; 0xcb32 <f_getfree+0xdc>
    caca:	82 e0       	ldi	r24, 0x02	; 2
    cacc:	88 2e       	mov	r8, r24
    cace:	91 2c       	mov	r9, r1
    cad0:	a1 2c       	mov	r10, r1
    cad2:	b1 2c       	mov	r11, r1
    cad4:	c1 2c       	mov	r12, r1
    cad6:	d1 2c       	mov	r13, r1
    cad8:	76 01       	movw	r14, r12
    cada:	b5 01       	movw	r22, r10
    cadc:	a4 01       	movw	r20, r8
    cade:	c3 01       	movw	r24, r6
    cae0:	0e 94 32 50 	call	0xa064	; 0xa064 <get_fat.isra.9>
    cae4:	6f 3f       	cpi	r22, 0xFF	; 255
    cae6:	bf ef       	ldi	r27, 0xFF	; 255
    cae8:	7b 07       	cpc	r23, r27
    caea:	8b 07       	cpc	r24, r27
    caec:	9b 07       	cpc	r25, r27
    caee:	09 f4       	brne	.+2      	; 0xcaf2 <f_getfree+0x9c>
    caf0:	76 c0       	rjmp	.+236    	; 0xcbde <f_getfree+0x188>
    caf2:	61 30       	cpi	r22, 0x01	; 1
    caf4:	71 05       	cpc	r23, r1
    caf6:	81 05       	cpc	r24, r1
    caf8:	91 05       	cpc	r25, r1
    cafa:	09 f4       	brne	.+2      	; 0xcafe <f_getfree+0xa8>
    cafc:	73 c0       	rjmp	.+230    	; 0xcbe4 <f_getfree+0x18e>
    cafe:	67 2b       	or	r22, r23
    cb00:	68 2b       	or	r22, r24
    cb02:	69 2b       	or	r22, r25
    cb04:	29 f4       	brne	.+10     	; 0xcb10 <f_getfree+0xba>
    cb06:	ef ef       	ldi	r30, 0xFF	; 255
    cb08:	ce 1a       	sub	r12, r30
    cb0a:	de 0a       	sbc	r13, r30
    cb0c:	ee 0a       	sbc	r14, r30
    cb0e:	fe 0a       	sbc	r15, r30
    cb10:	ff ef       	ldi	r31, 0xFF	; 255
    cb12:	8f 1a       	sub	r8, r31
    cb14:	9f 0a       	sbc	r9, r31
    cb16:	af 0a       	sbc	r10, r31
    cb18:	bf 0a       	sbc	r11, r31
    cb1a:	e9 81       	ldd	r30, Y+1	; 0x01
    cb1c:	fa 81       	ldd	r31, Y+2	; 0x02
    cb1e:	81 8d       	ldd	r24, Z+25	; 0x19
    cb20:	92 8d       	ldd	r25, Z+26	; 0x1a
    cb22:	a3 8d       	ldd	r26, Z+27	; 0x1b
    cb24:	b4 8d       	ldd	r27, Z+28	; 0x1c
    cb26:	88 16       	cp	r8, r24
    cb28:	99 06       	cpc	r9, r25
    cb2a:	aa 06       	cpc	r10, r26
    cb2c:	bb 06       	cpc	r11, r27
    cb2e:	a8 f2       	brcs	.-86     	; 0xcada <f_getfree+0x84>
    cb30:	5d c0       	rjmp	.+186    	; 0xcbec <f_getfree+0x196>
    cb32:	f3 01       	movw	r30, r6
    cb34:	45 a0       	ldd	r4, Z+37	; 0x25
    cb36:	56 a0       	ldd	r5, Z+38	; 0x26
    cb38:	67 a0       	ldd	r6, Z+39	; 0x27
    cb3a:	70 a4       	ldd	r7, Z+40	; 0x28
    cb3c:	21 2c       	mov	r2, r1
    cb3e:	31 2c       	mov	r3, r1
    cb40:	c1 2c       	mov	r12, r1
    cb42:	d1 2c       	mov	r13, r1
    cb44:	76 01       	movw	r14, r12
    cb46:	21 14       	cp	r2, r1
    cb48:	31 04       	cpc	r3, r1
    cb4a:	b1 f4       	brne	.+44     	; 0xcb78 <f_getfree+0x122>
    cb4c:	d3 01       	movw	r26, r6
    cb4e:	c2 01       	movw	r24, r4
    cb50:	01 96       	adiw	r24, 0x01	; 1
    cb52:	a1 1d       	adc	r26, r1
    cb54:	b1 1d       	adc	r27, r1
    cb56:	8f 83       	std	Y+7, r24	; 0x07
    cb58:	98 87       	std	Y+8, r25	; 0x08
    cb5a:	a9 87       	std	Y+9, r26	; 0x09
    cb5c:	ba 87       	std	Y+10, r27	; 0x0a
    cb5e:	b3 01       	movw	r22, r6
    cb60:	a2 01       	movw	r20, r4
    cb62:	89 81       	ldd	r24, Y+1	; 0x01
    cb64:	9a 81       	ldd	r25, Y+2	; 0x02
    cb66:	0e 94 64 4c 	call	0x98c8	; 0x98c8 <move_window>
    cb6a:	00 97       	sbiw	r24, 0x00	; 0
    cb6c:	09 f0       	breq	.+2      	; 0xcb70 <f_getfree+0x11a>
    cb6e:	3d c0       	rjmp	.+122    	; 0xcbea <f_getfree+0x194>
    cb70:	4f 80       	ldd	r4, Y+7	; 0x07
    cb72:	58 84       	ldd	r5, Y+8	; 0x08
    cb74:	69 84       	ldd	r6, Y+9	; 0x09
    cb76:	7a 84       	ldd	r7, Y+10	; 0x0a
    cb78:	e9 81       	ldd	r30, Y+1	; 0x01
    cb7a:	fa 81       	ldd	r31, Y+2	; 0x02
    cb7c:	80 81       	ld	r24, Z
    cb7e:	82 30       	cpi	r24, 0x02	; 2
    cb80:	79 f4       	brne	.+30     	; 0xcba0 <f_getfree+0x14a>
    cb82:	e2 0d       	add	r30, r2
    cb84:	f3 1d       	adc	r31, r3
    cb86:	85 a9       	ldd	r24, Z+53	; 0x35
    cb88:	96 a9       	ldd	r25, Z+54	; 0x36
    cb8a:	89 2b       	or	r24, r25
    cb8c:	29 f4       	brne	.+10     	; 0xcb98 <f_getfree+0x142>
    cb8e:	9f ef       	ldi	r25, 0xFF	; 255
    cb90:	c9 1a       	sub	r12, r25
    cb92:	d9 0a       	sbc	r13, r25
    cb94:	e9 0a       	sbc	r14, r25
    cb96:	f9 0a       	sbc	r15, r25
    cb98:	a2 e0       	ldi	r26, 0x02	; 2
    cb9a:	2a 0e       	add	r2, r26
    cb9c:	31 1c       	adc	r3, r1
    cb9e:	15 c0       	rjmp	.+42     	; 0xcbca <f_getfree+0x174>
    cba0:	cf 01       	movw	r24, r30
    cba2:	c5 96       	adiw	r24, 0x35	; 53
    cba4:	82 0d       	add	r24, r2
    cba6:	93 1d       	adc	r25, r3
    cba8:	0e 94 a2 48 	call	0x9144	; 0x9144 <ld_dword>
    cbac:	dc 01       	movw	r26, r24
    cbae:	cb 01       	movw	r24, r22
    cbb0:	bf 70       	andi	r27, 0x0F	; 15
    cbb2:	89 2b       	or	r24, r25
    cbb4:	8a 2b       	or	r24, r26
    cbb6:	8b 2b       	or	r24, r27
    cbb8:	29 f4       	brne	.+10     	; 0xcbc4 <f_getfree+0x16e>
    cbba:	bf ef       	ldi	r27, 0xFF	; 255
    cbbc:	cb 1a       	sub	r12, r27
    cbbe:	db 0a       	sbc	r13, r27
    cbc0:	eb 0a       	sbc	r14, r27
    cbc2:	fb 0a       	sbc	r15, r27
    cbc4:	e4 e0       	ldi	r30, 0x04	; 4
    cbc6:	2e 0e       	add	r2, r30
    cbc8:	31 1c       	adc	r3, r1
    cbca:	f1 e0       	ldi	r31, 0x01	; 1
    cbcc:	3f 22       	and	r3, r31
    cbce:	21 e0       	ldi	r18, 0x01	; 1
    cbd0:	82 1a       	sub	r8, r18
    cbd2:	91 08       	sbc	r9, r1
    cbd4:	a1 08       	sbc	r10, r1
    cbd6:	b1 08       	sbc	r11, r1
    cbd8:	09 f0       	breq	.+2      	; 0xcbdc <f_getfree+0x186>
    cbda:	b5 cf       	rjmp	.-150    	; 0xcb46 <f_getfree+0xf0>
    cbdc:	07 c0       	rjmp	.+14     	; 0xcbec <f_getfree+0x196>
    cbde:	01 e0       	ldi	r16, 0x01	; 1
    cbe0:	10 e0       	ldi	r17, 0x00	; 0
    cbe2:	04 c0       	rjmp	.+8      	; 0xcbec <f_getfree+0x196>
    cbe4:	02 e0       	ldi	r16, 0x02	; 2
    cbe6:	10 e0       	ldi	r17, 0x00	; 0
    cbe8:	01 c0       	rjmp	.+2      	; 0xcbec <f_getfree+0x196>
    cbea:	8c 01       	movw	r16, r24
    cbec:	ad 81       	ldd	r26, Y+5	; 0x05
    cbee:	be 81       	ldd	r27, Y+6	; 0x06
    cbf0:	cd 92       	st	X+, r12
    cbf2:	dd 92       	st	X+, r13
    cbf4:	ed 92       	st	X+, r14
    cbf6:	fc 92       	st	X, r15
    cbf8:	13 97       	sbiw	r26, 0x03	; 3
    cbfa:	e9 81       	ldd	r30, Y+1	; 0x01
    cbfc:	fa 81       	ldd	r31, Y+2	; 0x02
    cbfe:	c1 8a       	std	Z+17, r12	; 0x11
    cc00:	d2 8a       	std	Z+18, r13	; 0x12
    cc02:	e3 8a       	std	Z+19, r14	; 0x13
    cc04:	f4 8a       	std	Z+20, r15	; 0x14
    cc06:	84 81       	ldd	r24, Z+4	; 0x04
    cc08:	81 60       	ori	r24, 0x01	; 1
    cc0a:	84 83       	std	Z+4, r24	; 0x04
    cc0c:	c8 01       	movw	r24, r16
    cc0e:	2a 96       	adiw	r28, 0x0a	; 10
    cc10:	e2 e1       	ldi	r30, 0x12	; 18
    cc12:	0c 94 c0 e8 	jmp	0x1d180	; 0x1d180 <__epilogue_restores__>

0000cc16 <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
    cc16:	a0 e6       	ldi	r26, 0x60	; 96
    cc18:	b0 e0       	ldi	r27, 0x00	; 0
    cc1a:	e1 e1       	ldi	r30, 0x11	; 17
    cc1c:	f6 e6       	ldi	r31, 0x66	; 102
    cc1e:	0c 94 ab e8 	jmp	0x1d156	; 0x1d156 <__prologue_saves__+0xe>
    cc22:	a1 96       	adiw	r28, 0x21	; 33
    cc24:	9f af       	std	Y+63, r25	; 0x3f
    cc26:	8e af       	std	Y+62, r24	; 0x3e
    cc28:	a1 97       	sbiw	r28, 0x21	; 33
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = mount_volume(&path, &fs, FA_WRITE);
    cc2a:	42 e0       	ldi	r20, 0x02	; 2
    cc2c:	be 01       	movw	r22, r28
    cc2e:	63 5a       	subi	r22, 0xA3	; 163
    cc30:	7f 4f       	sbci	r23, 0xFF	; 255
    cc32:	ce 01       	movw	r24, r28
    cc34:	81 5a       	subi	r24, 0xA1	; 161
    cc36:	9f 4f       	sbci	r25, 0xFF	; 255
    cc38:	0e 94 df 4c 	call	0x99be	; 0x99be <mount_volume>
	if (res == FR_OK) {
    cc3c:	00 97       	sbiw	r24, 0x00	; 0
    cc3e:	09 f0       	breq	.+2      	; 0xcc42 <f_unlink+0x2c>
    cc40:	8c c0       	rjmp	.+280    	; 0xcd5a <f_unlink+0x144>
		dj.obj.fs = fs;
    cc42:	6f 96       	adiw	r28, 0x1f	; 31
    cc44:	8e ad       	ldd	r24, Y+62	; 0x3e
    cc46:	9f ad       	ldd	r25, Y+63	; 0x3f
    cc48:	6f 97       	sbiw	r28, 0x1f	; 31
    cc4a:	98 ab       	std	Y+48, r25	; 0x30
    cc4c:	8f a7       	std	Y+47, r24	; 0x2f
		INIT_NAMBUF(fs);
    cc4e:	80 e0       	ldi	r24, 0x00	; 0
    cc50:	92 e0       	ldi	r25, 0x02	; 2
    cc52:	b0 d3       	rcall	.+1888   	; 0xd3b4 <ff_memalloc>
    cc54:	5c 01       	movw	r10, r24
    cc56:	00 97       	sbiw	r24, 0x00	; 0
    cc58:	09 f4       	brne	.+2      	; 0xcc5c <f_unlink+0x46>
    cc5a:	49 c0       	rjmp	.+146    	; 0xccee <f_unlink+0xd8>
    cc5c:	6f 96       	adiw	r28, 0x1f	; 31
    cc5e:	ee ad       	ldd	r30, Y+62	; 0x3e
    cc60:	ff ad       	ldd	r31, Y+63	; 0x3f
    cc62:	6f 97       	sbiw	r28, 0x1f	; 31
    cc64:	94 87       	std	Z+12, r25	; 0x0c
    cc66:	83 87       	std	Z+11, r24	; 0x0b
		res = follow_path(&dj, path);		/* Follow the file path */
    cc68:	a1 96       	adiw	r28, 0x21	; 33
    cc6a:	6e ad       	ldd	r22, Y+62	; 0x3e
    cc6c:	7f ad       	ldd	r23, Y+63	; 0x3f
    cc6e:	a1 97       	sbiw	r28, 0x21	; 33
    cc70:	ce 01       	movw	r24, r28
    cc72:	8f 96       	adiw	r24, 0x2f	; 47
    cc74:	0e 94 2c 58 	call	0xb058	; 0xb058 <follow_path>
    cc78:	8c 01       	movw	r16, r24
		if (FF_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
    cc7a:	89 2b       	or	r24, r25
    cc7c:	a1 f5       	brne	.+104    	; 0xcce6 <f_unlink+0xd0>
    cc7e:	67 96       	adiw	r28, 0x17	; 23
    cc80:	8f ad       	ldd	r24, Y+63	; 0x3f
    cc82:	67 97       	sbiw	r28, 0x17	; 23
    cc84:	85 fd       	sbrc	r24, 5
    cc86:	36 c0       	rjmp	.+108    	; 0xccf4 <f_unlink+0xde>
		}
#if FF_FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
#endif
		if (res == FR_OK) {					/* The object is accessible */
			if (dj.fn[NSFLAG] & NS_NONAME) {
    cc88:	87 fd       	sbrc	r24, 7
    cc8a:	34 c0       	rjmp	.+104    	; 0xccf4 <f_unlink+0xde>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
			} else {
				if (dj.obj.attr & AM_RDO) {
    cc8c:	9b a8       	ldd	r9, Y+51	; 0x33
    cc8e:	90 fc       	sbrc	r9, 0
    cc90:	40 c0       	rjmp	.+128    	; 0xcd12 <f_unlink+0xfc>
					init_alloc_info(fs, &obj);
					dclst = obj.sclust;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
    cc92:	6f 96       	adiw	r28, 0x1f	; 31
    cc94:	0e ad       	ldd	r16, Y+62	; 0x3e
    cc96:	1f ad       	ldd	r17, Y+63	; 0x3f
    cc98:	6f 97       	sbiw	r28, 0x1f	; 31
    cc9a:	2b 96       	adiw	r28, 0x0b	; 11
    cc9c:	6e ad       	ldd	r22, Y+62	; 0x3e
    cc9e:	7f ad       	ldd	r23, Y+63	; 0x3f
    cca0:	2b 97       	sbiw	r28, 0x0b	; 11
    cca2:	f8 01       	movw	r30, r16
    cca4:	80 81       	ld	r24, Z
    cca6:	0e 94 d5 4a 	call	0x95aa	; 0x95aa <ld_clust.isra.3>
    ccaa:	6b 01       	movw	r12, r22
    ccac:	7c 01       	movw	r14, r24
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
    ccae:	94 fe       	sbrs	r9, 4
    ccb0:	33 c0       	rjmp	.+102    	; 0xcd18 <f_unlink+0x102>
#if FF_FS_RPATH != 0
					if (dclst == fs->cdir) {		 	/* Is it the current directory? */
    ccb2:	f8 01       	movw	r30, r16
    ccb4:	85 89       	ldd	r24, Z+21	; 0x15
    ccb6:	96 89       	ldd	r25, Z+22	; 0x16
    ccb8:	a7 89       	ldd	r26, Z+23	; 0x17
    ccba:	b0 8d       	ldd	r27, Z+24	; 0x18
    ccbc:	c8 16       	cp	r12, r24
    ccbe:	d9 06       	cpc	r13, r25
    ccc0:	ea 06       	cpc	r14, r26
    ccc2:	fb 06       	cpc	r15, r27
    ccc4:	31 f1       	breq	.+76     	; 0xcd12 <f_unlink+0xfc>
						res = FR_DENIED;
					} else
#endif
					{
						sdj.obj.fs = fs;				/* Open the sub-directory */
    ccc6:	1a 83       	std	Y+2, r17	; 0x02
    ccc8:	09 83       	std	Y+1, r16	; 0x01
						sdj.obj.sclust = dclst;
    ccca:	cf 82       	std	Y+7, r12	; 0x07
    cccc:	d8 86       	std	Y+8, r13	; 0x08
    ccce:	e9 86       	std	Y+9, r14	; 0x09
    ccd0:	fa 86       	std	Y+10, r15	; 0x0a
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
    ccd2:	40 e0       	ldi	r20, 0x00	; 0
    ccd4:	50 e0       	ldi	r21, 0x00	; 0
    ccd6:	ba 01       	movw	r22, r20
    ccd8:	ce 01       	movw	r24, r28
    ccda:	01 96       	adiw	r24, 0x01	; 1
    ccdc:	0e 94 e6 50 	call	0xa1cc	; 0xa1cc <dir_sdi>
    cce0:	8c 01       	movw	r16, r24
						if (res == FR_OK) {
    cce2:	89 2b       	or	r24, r25
    cce4:	51 f0       	breq	.+20     	; 0xccfa <f_unlink+0xe4>
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
			}
		}
		FREE_NAMBUF();
    cce6:	c5 01       	movw	r24, r10
    cce8:	68 d3       	rcall	.+1744   	; 0xd3ba <ff_memfree>
    ccea:	c8 01       	movw	r24, r16
    ccec:	36 c0       	rjmp	.+108    	; 0xcd5a <f_unlink+0x144>

	/* Get logical drive */
	res = mount_volume(&path, &fs, FA_WRITE);
	if (res == FR_OK) {
		dj.obj.fs = fs;
		INIT_NAMBUF(fs);
    ccee:	81 e1       	ldi	r24, 0x11	; 17
    ccf0:	90 e0       	ldi	r25, 0x00	; 0
    ccf2:	33 c0       	rjmp	.+102    	; 0xcd5a <f_unlink+0x144>
#if FF_FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
#endif
		if (res == FR_OK) {					/* The object is accessible */
			if (dj.fn[NSFLAG] & NS_NONAME) {
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
    ccf4:	06 e0       	ldi	r16, 0x06	; 6
    ccf6:	10 e0       	ldi	r17, 0x00	; 0
    ccf8:	f6 cf       	rjmp	.-20     	; 0xcce6 <f_unlink+0xd0>
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
						if (res == FR_OK) {
							res = DIR_READ_FILE(&sdj);			/* Test if the directory is empty */
    ccfa:	60 e0       	ldi	r22, 0x00	; 0
    ccfc:	70 e0       	ldi	r23, 0x00	; 0
    ccfe:	ce 01       	movw	r24, r28
    cd00:	01 96       	adiw	r24, 0x01	; 1
    cd02:	0e 94 7f 54 	call	0xa8fe	; 0xa8fe <dir_read>
    cd06:	8c 01       	movw	r16, r24
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
    cd08:	00 97       	sbiw	r24, 0x00	; 0
    cd0a:	19 f0       	breq	.+6      	; 0xcd12 <f_unlink+0xfc>
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
    cd0c:	04 97       	sbiw	r24, 0x04	; 4
    cd0e:	21 f0       	breq	.+8      	; 0xcd18 <f_unlink+0x102>
    cd10:	ea cf       	rjmp	.-44     	; 0xcce6 <f_unlink+0xd0>
					dclst = ld_clust(fs, dj.dir);
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
#if FF_FS_RPATH != 0
					if (dclst == fs->cdir) {		 	/* Is it the current directory? */
						res = FR_DENIED;
    cd12:	07 e0       	ldi	r16, 0x07	; 7
    cd14:	10 e0       	ldi	r17, 0x00	; 0
    cd16:	e7 cf       	rjmp	.-50     	; 0xcce6 <f_unlink+0xd0>
						}
					}
				}
			}
			if (res == FR_OK) {
				res = dir_remove(&dj);			/* Remove the directory entry */
    cd18:	ce 01       	movw	r24, r28
    cd1a:	8f 96       	adiw	r24, 0x2f	; 47
    cd1c:	0e 94 48 55 	call	0xaa90	; 0xaa90 <dir_remove>
    cd20:	8c 01       	movw	r16, r24
				if (res == FR_OK && dclst != 0) {	/* Remove the cluster chain if exist */
    cd22:	89 2b       	or	r24, r25
    cd24:	01 f7       	brne	.-64     	; 0xcce6 <f_unlink+0xd0>
    cd26:	c1 14       	cp	r12, r1
    cd28:	d1 04       	cpc	r13, r1
    cd2a:	e1 04       	cpc	r14, r1
    cd2c:	f1 04       	cpc	r15, r1
    cd2e:	41 f4       	brne	.+16     	; 0xcd40 <f_unlink+0x12a>
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
    cd30:	6f 96       	adiw	r28, 0x1f	; 31
    cd32:	8e ad       	ldd	r24, Y+62	; 0x3e
    cd34:	9f ad       	ldd	r25, Y+63	; 0x3f
    cd36:	6f 97       	sbiw	r28, 0x1f	; 31
    cd38:	0e 94 4a 4b 	call	0x9694	; 0x9694 <sync_fs>
    cd3c:	8c 01       	movw	r16, r24
    cd3e:	d3 cf       	rjmp	.-90     	; 0xcce6 <f_unlink+0xd0>
				res = dir_remove(&dj);			/* Remove the directory entry */
				if (res == FR_OK && dclst != 0) {	/* Remove the cluster chain if exist */
#if FF_FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
    cd40:	00 e0       	ldi	r16, 0x00	; 0
    cd42:	10 e0       	ldi	r17, 0x00	; 0
    cd44:	98 01       	movw	r18, r16
    cd46:	b7 01       	movw	r22, r14
    cd48:	a6 01       	movw	r20, r12
    cd4a:	ce 01       	movw	r24, r28
    cd4c:	8f 96       	adiw	r24, 0x2f	; 47
    cd4e:	0e 94 cd 52 	call	0xa59a	; 0xa59a <remove_chain>
    cd52:	8c 01       	movw	r16, r24
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
    cd54:	89 2b       	or	r24, r25
    cd56:	39 f6       	brne	.-114    	; 0xcce6 <f_unlink+0xd0>
    cd58:	eb cf       	rjmp	.-42     	; 0xcd30 <f_unlink+0x11a>
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
}
    cd5a:	c0 5a       	subi	r28, 0xA0	; 160
    cd5c:	df 4f       	sbci	r29, 0xFF	; 255
    cd5e:	eb e0       	ldi	r30, 0x0B	; 11
    cd60:	0c 94 c7 e8 	jmp	0x1d18e	; 0x1d18e <__epilogue_restores__+0xe>

0000cd64 <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
    cd64:	a0 e4       	ldi	r26, 0x40	; 64
    cd66:	b0 e0       	ldi	r27, 0x00	; 0
    cd68:	e8 eb       	ldi	r30, 0xB8	; 184
    cd6a:	f6 e6       	ldi	r31, 0x66	; 102
    cd6c:	0c 94 a6 e8 	jmp	0x1d14c	; 0x1d14c <__prologue_saves__+0x4>
    cd70:	21 96       	adiw	r28, 0x01	; 1
    cd72:	9f af       	std	Y+63, r25	; 0x3f
    cd74:	8e af       	std	Y+62, r24	; 0x3e
    cd76:	21 97       	sbiw	r28, 0x01	; 1
	FATFS *fs;
	DWORD dcl, pcl, tm;
	DEF_NAMBUF


	res = mount_volume(&path, &fs, FA_WRITE);	/* Get logical drive */
    cd78:	42 e0       	ldi	r20, 0x02	; 2
    cd7a:	be 01       	movw	r22, r28
    cd7c:	63 5c       	subi	r22, 0xC3	; 195
    cd7e:	7f 4f       	sbci	r23, 0xFF	; 255
    cd80:	ce 01       	movw	r24, r28
    cd82:	cf 96       	adiw	r24, 0x3f	; 63
    cd84:	0e 94 df 4c 	call	0x99be	; 0x99be <mount_volume>
	if (res == FR_OK) {
    cd88:	00 97       	sbiw	r24, 0x00	; 0
    cd8a:	09 f0       	breq	.+2      	; 0xcd8e <f_mkdir+0x2a>
    cd8c:	d6 c0       	rjmp	.+428    	; 0xcf3a <f_mkdir+0x1d6>
		dj.obj.fs = fs;
    cd8e:	8d ad       	ldd	r24, Y+61	; 0x3d
    cd90:	9e ad       	ldd	r25, Y+62	; 0x3e
    cd92:	9a 83       	std	Y+2, r25	; 0x02
    cd94:	89 83       	std	Y+1, r24	; 0x01
		INIT_NAMBUF(fs);
    cd96:	80 e0       	ldi	r24, 0x00	; 0
    cd98:	92 e0       	ldi	r25, 0x02	; 2
    cd9a:	0c d3       	rcall	.+1560   	; 0xd3b4 <ff_memalloc>
    cd9c:	6c 01       	movw	r12, r24
    cd9e:	00 97       	sbiw	r24, 0x00	; 0
    cda0:	e9 f0       	breq	.+58     	; 0xcddc <f_mkdir+0x78>
    cda2:	ed ad       	ldd	r30, Y+61	; 0x3d
    cda4:	fe ad       	ldd	r31, Y+62	; 0x3e
    cda6:	94 87       	std	Z+12, r25	; 0x0c
    cda8:	83 87       	std	Z+11, r24	; 0x0b
		res = follow_path(&dj, path);			/* Follow the file path */
    cdaa:	21 96       	adiw	r28, 0x01	; 1
    cdac:	6e ad       	ldd	r22, Y+62	; 0x3e
    cdae:	7f ad       	ldd	r23, Y+63	; 0x3f
    cdb0:	21 97       	sbiw	r28, 0x01	; 1
    cdb2:	ce 01       	movw	r24, r28
    cdb4:	01 96       	adiw	r24, 0x01	; 1
    cdb6:	0e 94 2c 58 	call	0xb058	; 0xb058 <follow_path>
    cdba:	7c 01       	movw	r14, r24
		if (res == FR_OK) res = FR_EXIST;		/* Name collision? */
    cdbc:	89 2b       	or	r24, r25
    cdbe:	89 f0       	breq	.+34     	; 0xcde2 <f_mkdir+0x7e>
		if (FF_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {	/* Invalid name? */
    cdc0:	84 e0       	ldi	r24, 0x04	; 4
    cdc2:	e8 16       	cp	r14, r24
    cdc4:	f1 04       	cpc	r15, r1
    cdc6:	31 f4       	brne	.+12     	; 0xcdd4 <f_mkdir+0x70>
    cdc8:	88 a5       	ldd	r24, Y+40	; 0x28
    cdca:	85 ff       	sbrs	r24, 5
    cdcc:	0e c0       	rjmp	.+28     	; 0xcdea <f_mkdir+0x86>
			res = FR_INVALID_NAME;
    cdce:	26 e0       	ldi	r18, 0x06	; 6
    cdd0:	e2 2e       	mov	r14, r18
    cdd2:	f1 2c       	mov	r15, r1
				}
			} else {
				remove_chain(&sobj, dcl, 0);		/* Could not register, remove the allocated cluster */
			}
		}
		FREE_NAMBUF();
    cdd4:	c6 01       	movw	r24, r12
    cdd6:	f1 d2       	rcall	.+1506   	; 0xd3ba <ff_memfree>
    cdd8:	c7 01       	movw	r24, r14
    cdda:	af c0       	rjmp	.+350    	; 0xcf3a <f_mkdir+0x1d6>


	res = mount_volume(&path, &fs, FA_WRITE);	/* Get logical drive */
	if (res == FR_OK) {
		dj.obj.fs = fs;
		INIT_NAMBUF(fs);
    cddc:	81 e1       	ldi	r24, 0x11	; 17
    cdde:	90 e0       	ldi	r25, 0x00	; 0
    cde0:	ac c0       	rjmp	.+344    	; 0xcf3a <f_mkdir+0x1d6>
		res = follow_path(&dj, path);			/* Follow the file path */
		if (res == FR_OK) res = FR_EXIST;		/* Name collision? */
    cde2:	38 e0       	ldi	r19, 0x08	; 8
    cde4:	e3 2e       	mov	r14, r19
    cde6:	f1 2c       	mov	r15, r1
    cde8:	f5 cf       	rjmp	.-22     	; 0xcdd4 <f_mkdir+0x70>
		if (FF_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {	/* Invalid name? */
			res = FR_INVALID_NAME;
		}
		if (res == FR_NO_FILE) {				/* It is clear to create a new directory */
			sobj.fs = fs;						/* New object id to create a new chain */
    cdea:	8d ad       	ldd	r24, Y+61	; 0x3d
    cdec:	9e ad       	ldd	r25, Y+62	; 0x3e
    cdee:	98 ab       	std	Y+48, r25	; 0x30
    cdf0:	8f a7       	std	Y+47, r24	; 0x2f
			dcl = create_chain(&sobj, 0);		/* Allocate a cluster for the new directory */
    cdf2:	40 e0       	ldi	r20, 0x00	; 0
    cdf4:	50 e0       	ldi	r21, 0x00	; 0
    cdf6:	ba 01       	movw	r22, r20
    cdf8:	ce 01       	movw	r24, r28
    cdfa:	8f 96       	adiw	r24, 0x2f	; 47
    cdfc:	0e 94 a7 51 	call	0xa34e	; 0xa34e <create_chain>
    ce00:	4b 01       	movw	r8, r22
    ce02:	5c 01       	movw	r10, r24
			res = FR_OK;
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster? */
    ce04:	67 2b       	or	r22, r23
    ce06:	68 2b       	or	r22, r24
    ce08:	69 2b       	or	r22, r25
    ce0a:	09 f1       	breq	.+66     	; 0xce4e <f_mkdir+0xea>
			if (dcl == 1) res = FR_INT_ERR;		/* Any insanity? */
    ce0c:	e1 e0       	ldi	r30, 0x01	; 1
    ce0e:	8e 16       	cp	r8, r30
    ce10:	91 04       	cpc	r9, r1
    ce12:	a1 04       	cpc	r10, r1
    ce14:	b1 04       	cpc	r11, r1
    ce16:	61 f0       	breq	.+24     	; 0xce30 <f_mkdir+0xcc>
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;	/* Disk error? */
    ce18:	ff ef       	ldi	r31, 0xFF	; 255
    ce1a:	8f 16       	cp	r8, r31
    ce1c:	9f 06       	cpc	r9, r31
    ce1e:	af 06       	cpc	r10, r31
    ce20:	bf 06       	cpc	r11, r31
    ce22:	d9 f4       	brne	.+54     	; 0xce5a <f_mkdir+0xf6>
			tm = GET_FATTIME();
    ce24:	0e 94 cb 71 	call	0xe396	; 0xe396 <get_fattime>
    ce28:	ee 24       	eor	r14, r14
    ce2a:	e3 94       	inc	r14
    ce2c:	f1 2c       	mov	r15, r1
    ce2e:	05 c0       	rjmp	.+10     	; 0xce3a <f_mkdir+0xd6>
    ce30:	0e 94 cb 71 	call	0xe396	; 0xe396 <get_fattime>
		if (res == FR_NO_FILE) {				/* It is clear to create a new directory */
			sobj.fs = fs;						/* New object id to create a new chain */
			dcl = create_chain(&sobj, 0);		/* Allocate a cluster for the new directory */
			res = FR_OK;
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster? */
			if (dcl == 1) res = FR_INT_ERR;		/* Any insanity? */
    ce34:	92 e0       	ldi	r25, 0x02	; 2
    ce36:	e9 2e       	mov	r14, r25
    ce38:	f1 2c       	mov	r15, r1
				}
				if (res == FR_OK) {
					res = sync_fs(fs);
				}
			} else {
				remove_chain(&sobj, dcl, 0);		/* Could not register, remove the allocated cluster */
    ce3a:	00 e0       	ldi	r16, 0x00	; 0
    ce3c:	10 e0       	ldi	r17, 0x00	; 0
    ce3e:	98 01       	movw	r18, r16
    ce40:	b5 01       	movw	r22, r10
    ce42:	a4 01       	movw	r20, r8
    ce44:	ce 01       	movw	r24, r28
    ce46:	8f 96       	adiw	r24, 0x2f	; 47
    ce48:	0e 94 cd 52 	call	0xa59a	; 0xa59a <remove_chain>
    ce4c:	c3 cf       	rjmp	.-122    	; 0xcdd4 <f_mkdir+0x70>
			dcl = create_chain(&sobj, 0);		/* Allocate a cluster for the new directory */
			res = FR_OK;
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster? */
			if (dcl == 1) res = FR_INT_ERR;		/* Any insanity? */
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;	/* Disk error? */
			tm = GET_FATTIME();
    ce4e:	0e 94 cb 71 	call	0xe396	; 0xe396 <get_fattime>
		}
		if (res == FR_NO_FILE) {				/* It is clear to create a new directory */
			sobj.fs = fs;						/* New object id to create a new chain */
			dcl = create_chain(&sobj, 0);		/* Allocate a cluster for the new directory */
			res = FR_OK;
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster? */
    ce52:	87 e0       	ldi	r24, 0x07	; 7
    ce54:	e8 2e       	mov	r14, r24
    ce56:	f1 2c       	mov	r15, r1
    ce58:	f0 cf       	rjmp	.-32     	; 0xce3a <f_mkdir+0xd6>
			if (dcl == 1) res = FR_INT_ERR;		/* Any insanity? */
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;	/* Disk error? */
			tm = GET_FATTIME();
    ce5a:	0e 94 cb 71 	call	0xe396	; 0xe396 <get_fattime>
    ce5e:	2b 01       	movw	r4, r22
    ce60:	3c 01       	movw	r6, r24
			if (res == FR_OK) {
				res = dir_clear(fs, dcl);		/* Clean up the new table */
    ce62:	b5 01       	movw	r22, r10
    ce64:	a4 01       	movw	r20, r8
    ce66:	8d ad       	ldd	r24, Y+61	; 0x3d
    ce68:	9e ad       	ldd	r25, Y+62	; 0x3e
    ce6a:	0e 94 bc 4b 	call	0x9778	; 0x9778 <dir_clear>
    ce6e:	7c 01       	movw	r14, r24
				if (res == FR_OK) {
    ce70:	89 2b       	or	r24, r25
    ce72:	19 f7       	brne	.-58     	; 0xce3a <f_mkdir+0xd6>
					if (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) {	/* Create dot entries (FAT only) */
						mem_set(fs->win + DIR_Name, ' ', 11);	/* Create "." entry */
    ce74:	8d ad       	ldd	r24, Y+61	; 0x3d
    ce76:	9e ad       	ldd	r25, Y+62	; 0x3e
    ce78:	4b e0       	ldi	r20, 0x0B	; 11
    ce7a:	50 e0       	ldi	r21, 0x00	; 0
    ce7c:	60 e2       	ldi	r22, 0x20	; 32
    ce7e:	70 e0       	ldi	r23, 0x00	; 0
    ce80:	c5 96       	adiw	r24, 0x35	; 53
    ce82:	0e 94 bd 48 	call	0x917a	; 0x917a <mem_set>
						fs->win[DIR_Name] = '.';
    ce86:	8d ad       	ldd	r24, Y+61	; 0x3d
    ce88:	9e ad       	ldd	r25, Y+62	; 0x3e
    ce8a:	1e e2       	ldi	r17, 0x2E	; 46
    ce8c:	fc 01       	movw	r30, r24
    ce8e:	15 ab       	std	Z+53, r17	; 0x35
						fs->win[DIR_Attr] = AM_DIR;
    ce90:	e0 5c       	subi	r30, 0xC0	; 192
    ce92:	ff 4f       	sbci	r31, 0xFF	; 255
    ce94:	20 e1       	ldi	r18, 0x10	; 16
    ce96:	20 83       	st	Z, r18
						st_dword(fs->win + DIR_ModTime, tm);
    ce98:	b3 01       	movw	r22, r6
    ce9a:	a2 01       	movw	r20, r4
    ce9c:	85 5b       	subi	r24, 0xB5	; 181
    ce9e:	9f 4f       	sbci	r25, 0xFF	; 255
    cea0:	0e 94 b7 48 	call	0x916e	; 0x916e <st_dword>
						st_clust(fs, fs->win, dcl);
    cea4:	8d ad       	ldd	r24, Y+61	; 0x3d
    cea6:	9e ad       	ldd	r25, Y+62	; 0x3e
    cea8:	bc 01       	movw	r22, r24
    ceaa:	6b 5c       	subi	r22, 0xCB	; 203
    ceac:	7f 4f       	sbci	r23, 0xFF	; 255
    ceae:	a5 01       	movw	r20, r10
    ceb0:	94 01       	movw	r18, r8
    ceb2:	0e 94 ea 4a 	call	0x95d4	; 0x95d4 <st_clust.isra.4>
						mem_cpy(fs->win + SZDIRE, fs->win, SZDIRE); /* Create ".." entry */
    ceb6:	8d ad       	ldd	r24, Y+61	; 0x3d
    ceb8:	9e ad       	ldd	r25, Y+62	; 0x3e
    ceba:	bc 01       	movw	r22, r24
    cebc:	6b 5c       	subi	r22, 0xCB	; 203
    cebe:	7f 4f       	sbci	r23, 0xFF	; 255
    cec0:	40 e2       	ldi	r20, 0x20	; 32
    cec2:	50 e0       	ldi	r21, 0x00	; 0
    cec4:	8b 5a       	subi	r24, 0xAB	; 171
    cec6:	9f 4f       	sbci	r25, 0xFF	; 255
    cec8:	0e 94 ca 4a 	call	0x9594	; 0x9594 <mem_cpy.part.0>
						fs->win[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
    cecc:	8d ad       	ldd	r24, Y+61	; 0x3d
    cece:	9e ad       	ldd	r25, Y+62	; 0x3e
    ced0:	fc 01       	movw	r30, r24
    ced2:	ea 5a       	subi	r30, 0xAA	; 170
    ced4:	ff 4f       	sbci	r31, 0xFF	; 255
    ced6:	10 83       	st	Z, r17
						st_clust(fs, fs->win + SZDIRE, pcl);
    ced8:	2f 81       	ldd	r18, Y+7	; 0x07
    ceda:	38 85       	ldd	r19, Y+8	; 0x08
    cedc:	49 85       	ldd	r20, Y+9	; 0x09
    cede:	5a 85       	ldd	r21, Y+10	; 0x0a
    cee0:	bc 01       	movw	r22, r24
    cee2:	6b 5a       	subi	r22, 0xAB	; 171
    cee4:	7f 4f       	sbci	r23, 0xFF	; 255
    cee6:	0e 94 ea 4a 	call	0x95d4	; 0x95d4 <st_clust.isra.4>
						fs->wflag = 1;
    ceea:	ed ad       	ldd	r30, Y+61	; 0x3d
    ceec:	fe ad       	ldd	r31, Y+62	; 0x3e
    ceee:	81 e0       	ldi	r24, 0x01	; 1
    cef0:	83 83       	std	Z+3, r24	; 0x03
					}
					res = dir_register(&dj);	/* Register the object to the parent directoy */
    cef2:	ce 01       	movw	r24, r28
    cef4:	01 96       	adiw	r24, 0x01	; 1
    cef6:	0e 94 9e 56 	call	0xad3c	; 0xad3c <dir_register>
    cefa:	7c 01       	movw	r14, r24
				}
			}
			if (res == FR_OK) {
    cefc:	89 2b       	or	r24, r25
    cefe:	09 f0       	breq	.+2      	; 0xcf02 <f_mkdir+0x19e>
    cf00:	9c cf       	rjmp	.-200    	; 0xce3a <f_mkdir+0xd6>
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
					res = store_xdir(&dj);
				} else
#endif
				{
					st_dword(dj.dir + DIR_ModTime, tm);	/* Created time */
    cf02:	8b 8d       	ldd	r24, Y+27	; 0x1b
    cf04:	9c 8d       	ldd	r25, Y+28	; 0x1c
    cf06:	b3 01       	movw	r22, r6
    cf08:	a2 01       	movw	r20, r4
    cf0a:	46 96       	adiw	r24, 0x16	; 22
    cf0c:	0e 94 b7 48 	call	0x916e	; 0x916e <st_dword>
					st_clust(fs, dj.dir, dcl);			/* Table start cluster */
    cf10:	6b 8d       	ldd	r22, Y+27	; 0x1b
    cf12:	7c 8d       	ldd	r23, Y+28	; 0x1c
    cf14:	a5 01       	movw	r20, r10
    cf16:	94 01       	movw	r18, r8
    cf18:	8d ad       	ldd	r24, Y+61	; 0x3d
    cf1a:	9e ad       	ldd	r25, Y+62	; 0x3e
    cf1c:	0e 94 ea 4a 	call	0x95d4	; 0x95d4 <st_clust.isra.4>
					dj.dir[DIR_Attr] = AM_DIR;			/* Attribute */
    cf20:	eb 8d       	ldd	r30, Y+27	; 0x1b
    cf22:	fc 8d       	ldd	r31, Y+28	; 0x1c
    cf24:	80 e1       	ldi	r24, 0x10	; 16
    cf26:	83 87       	std	Z+11, r24	; 0x0b
					fs->wflag = 1;
    cf28:	8d ad       	ldd	r24, Y+61	; 0x3d
    cf2a:	9e ad       	ldd	r25, Y+62	; 0x3e
    cf2c:	21 e0       	ldi	r18, 0x01	; 1
    cf2e:	fc 01       	movw	r30, r24
    cf30:	23 83       	std	Z+3, r18	; 0x03
				}
				if (res == FR_OK) {
					res = sync_fs(fs);
    cf32:	0e 94 4a 4b 	call	0x9694	; 0x9694 <sync_fs>
    cf36:	7c 01       	movw	r14, r24
    cf38:	4d cf       	rjmp	.-358    	; 0xcdd4 <f_mkdir+0x70>
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
}
    cf3a:	c0 5c       	subi	r28, 0xC0	; 192
    cf3c:	df 4f       	sbci	r29, 0xFF	; 255
    cf3e:	e0 e1       	ldi	r30, 0x10	; 16
    cf40:	0c 94 c2 e8 	jmp	0x1d184	; 0x1d184 <__epilogue_restores__+0x4>

0000cf44 <f_rename>:

FRESULT f_rename (
	const TCHAR* path_old,	/* Pointer to the object name to be renamed */
	const TCHAR* path_new	/* Pointer to the new name */
)
{
    cf44:	a2 e8       	ldi	r26, 0x82	; 130
    cf46:	b0 e0       	ldi	r27, 0x00	; 0
    cf48:	e8 ea       	ldi	r30, 0xA8	; 168
    cf4a:	f7 e6       	ldi	r31, 0x67	; 103
    cf4c:	0c 94 ad e8 	jmp	0x1d15a	; 0x1d15a <__prologue_saves__+0x12>
    cf50:	c1 58       	subi	r28, 0x81	; 129
    cf52:	df 4f       	sbci	r29, 0xFF	; 255
    cf54:	99 83       	std	Y+1, r25	; 0x01
    cf56:	88 83       	st	Y, r24
    cf58:	cf 57       	subi	r28, 0x7F	; 127
    cf5a:	d0 40       	sbci	r29, 0x00	; 0
    cf5c:	cf 57       	subi	r28, 0x7F	; 127
    cf5e:	df 4f       	sbci	r29, 0xFF	; 255
    cf60:	79 83       	std	Y+1, r23	; 0x01
    cf62:	68 83       	st	Y, r22
    cf64:	c1 58       	subi	r28, 0x81	; 129
    cf66:	d0 40       	sbci	r29, 0x00	; 0
	BYTE buf[FF_FS_EXFAT ? SZDIRE * 2 : SZDIRE], *dir;
	LBA_t sect;
	DEF_NAMBUF


	get_ldnumber(&path_new);						/* Snip the drive number of new name off */
    cf68:	ce 01       	movw	r24, r28
    cf6a:	8f 57       	subi	r24, 0x7F	; 127
    cf6c:	9f 4f       	sbci	r25, 0xFF	; 255
    cf6e:	0e 94 48 49 	call	0x9290	; 0x9290 <get_ldnumber>
	res = mount_volume(&path_old, &fs, FA_WRITE);	/* Get logical drive of the old object */
    cf72:	42 e0       	ldi	r20, 0x02	; 2
    cf74:	be 01       	movw	r22, r28
    cf76:	63 58       	subi	r22, 0x83	; 131
    cf78:	7f 4f       	sbci	r23, 0xFF	; 255
    cf7a:	ce 01       	movw	r24, r28
    cf7c:	81 58       	subi	r24, 0x81	; 129
    cf7e:	9f 4f       	sbci	r25, 0xFF	; 255
    cf80:	0e 94 df 4c 	call	0x99be	; 0x99be <mount_volume>
	if (res == FR_OK) {
    cf84:	00 97       	sbiw	r24, 0x00	; 0
    cf86:	09 f0       	breq	.+2      	; 0xcf8a <f_rename+0x46>
    cf88:	ed c0       	rjmp	.+474    	; 0xd164 <f_rename+0x220>
		djo.obj.fs = fs;
    cf8a:	ef 96       	adiw	r28, 0x3f	; 63
    cf8c:	8e ad       	ldd	r24, Y+62	; 0x3e
    cf8e:	9f ad       	ldd	r25, Y+63	; 0x3f
    cf90:	ef 97       	sbiw	r28, 0x3f	; 63
    cf92:	98 ab       	std	Y+48, r25	; 0x30
    cf94:	8f a7       	std	Y+47, r24	; 0x2f
		INIT_NAMBUF(fs);
    cf96:	80 e0       	ldi	r24, 0x00	; 0
    cf98:	92 e0       	ldi	r25, 0x02	; 2
    cf9a:	0c d2       	rcall	.+1048   	; 0xd3b4 <ff_memalloc>
    cf9c:	6c 01       	movw	r12, r24
    cf9e:	00 97       	sbiw	r24, 0x00	; 0
    cfa0:	f1 f0       	breq	.+60     	; 0xcfde <f_rename+0x9a>
    cfa2:	ef 96       	adiw	r28, 0x3f	; 63
    cfa4:	ee ad       	ldd	r30, Y+62	; 0x3e
    cfa6:	ff ad       	ldd	r31, Y+63	; 0x3f
    cfa8:	ef 97       	sbiw	r28, 0x3f	; 63
    cfaa:	94 87       	std	Z+12, r25	; 0x0c
    cfac:	83 87       	std	Z+11, r24	; 0x0b
		res = follow_path(&djo, path_old);		/* Check old object */
    cfae:	c1 58       	subi	r28, 0x81	; 129
    cfb0:	df 4f       	sbci	r29, 0xFF	; 255
    cfb2:	68 81       	ld	r22, Y
    cfb4:	79 81       	ldd	r23, Y+1	; 0x01
    cfb6:	cf 57       	subi	r28, 0x7F	; 127
    cfb8:	d0 40       	sbci	r29, 0x00	; 0
    cfba:	ce 01       	movw	r24, r28
    cfbc:	8f 96       	adiw	r24, 0x2f	; 47
    cfbe:	0e 94 2c 58 	call	0xb058	; 0xb058 <follow_path>
    cfc2:	8c 01       	movw	r16, r24
		if (res == FR_OK && (djo.fn[NSFLAG] & (NS_DOT | NS_NONAME))) res = FR_INVALID_NAME;	/* Check validity of name */
    cfc4:	89 2b       	or	r24, r25
    cfc6:	39 f4       	brne	.+14     	; 0xcfd6 <f_rename+0x92>
    cfc8:	67 96       	adiw	r28, 0x17	; 23
    cfca:	8f ad       	ldd	r24, Y+63	; 0x3f
    cfcc:	67 97       	sbiw	r28, 0x17	; 23
    cfce:	80 7a       	andi	r24, 0xA0	; 160
    cfd0:	49 f0       	breq	.+18     	; 0xcfe4 <f_rename+0xa0>
    cfd2:	06 e0       	ldi	r16, 0x06	; 6
    cfd4:	10 e0       	ldi	r17, 0x00	; 0
					res = sync_fs(fs);
				}
			}
/* End of the critical section */
		}
		FREE_NAMBUF();
    cfd6:	c6 01       	movw	r24, r12
    cfd8:	f0 d1       	rcall	.+992    	; 0xd3ba <ff_memfree>
    cfda:	c8 01       	movw	r24, r16
    cfdc:	c3 c0       	rjmp	.+390    	; 0xd164 <f_rename+0x220>

	get_ldnumber(&path_new);						/* Snip the drive number of new name off */
	res = mount_volume(&path_old, &fs, FA_WRITE);	/* Get logical drive of the old object */
	if (res == FR_OK) {
		djo.obj.fs = fs;
		INIT_NAMBUF(fs);
    cfde:	81 e1       	ldi	r24, 0x11	; 17
    cfe0:	90 e0       	ldi	r25, 0x00	; 0
    cfe2:	c0 c0       	rjmp	.+384    	; 0xd164 <f_rename+0x220>
    cfe4:	2b 96       	adiw	r28, 0x0b	; 11
    cfe6:	6e ad       	ldd	r22, Y+62	; 0x3e
    cfe8:	7f ad       	ldd	r23, Y+63	; 0x3f
    cfea:	2b 97       	sbiw	r28, 0x0b	; 11
    cfec:	40 e2       	ldi	r20, 0x20	; 32
    cfee:	50 e0       	ldi	r21, 0x00	; 0
    cff0:	ce 01       	movw	r24, r28
    cff2:	83 5a       	subi	r24, 0xA3	; 163
    cff4:	9f 4f       	sbci	r25, 0xFF	; 255
    cff6:	0e 94 ca 4a 	call	0x9594	; 0x9594 <mem_cpy.part.0>
    cffa:	4e e2       	ldi	r20, 0x2E	; 46
    cffc:	50 e0       	ldi	r21, 0x00	; 0
    cffe:	be 01       	movw	r22, r28
    d000:	61 5d       	subi	r22, 0xD1	; 209
    d002:	7f 4f       	sbci	r23, 0xFF	; 255
    d004:	ce 01       	movw	r24, r28
    d006:	01 96       	adiw	r24, 0x01	; 1
    d008:	0e 94 ca 4a 	call	0x9594	; 0x9594 <mem_cpy.part.0>
			} else
#endif
			{	/* At FAT/FAT32 volume */
				mem_cpy(buf, djo.dir, SZDIRE);			/* Save directory entry of the object */
				mem_cpy(&djn, &djo, sizeof (DIR));		/* Duplicate the directory object */
				res = follow_path(&djn, path_new);		/* Make sure if new object name is not in use */
    d00c:	cf 57       	subi	r28, 0x7F	; 127
    d00e:	df 4f       	sbci	r29, 0xFF	; 255
    d010:	68 81       	ld	r22, Y
    d012:	79 81       	ldd	r23, Y+1	; 0x01
    d014:	c1 58       	subi	r28, 0x81	; 129
    d016:	d0 40       	sbci	r29, 0x00	; 0
    d018:	ce 01       	movw	r24, r28
    d01a:	01 96       	adiw	r24, 0x01	; 1
    d01c:	0e 94 2c 58 	call	0xb058	; 0xb058 <follow_path>
    d020:	8c 01       	movw	r16, r24
				if (res == FR_OK) {						/* Is new name already in use by any other object? */
    d022:	89 2b       	or	r24, r25
    d024:	f9 f4       	brne	.+62     	; 0xd064 <f_rename+0x120>
					res = (djn.obj.sclust == djo.obj.sclust && djn.dptr == djo.dptr) ? FR_NO_FILE : FR_EXIST;
    d026:	4f 81       	ldd	r20, Y+7	; 0x07
    d028:	58 85       	ldd	r21, Y+8	; 0x08
    d02a:	69 85       	ldd	r22, Y+9	; 0x09
    d02c:	7a 85       	ldd	r23, Y+10	; 0x0a
    d02e:	8d a9       	ldd	r24, Y+53	; 0x35
    d030:	9e a9       	ldd	r25, Y+54	; 0x36
    d032:	af a9       	ldd	r26, Y+55	; 0x37
    d034:	b8 ad       	ldd	r27, Y+56	; 0x38
    d036:	48 17       	cp	r20, r24
    d038:	59 07       	cpc	r21, r25
    d03a:	6a 07       	cpc	r22, r26
    d03c:	7b 07       	cpc	r23, r27
    d03e:	09 f0       	breq	.+2      	; 0xd042 <f_rename+0xfe>
    d040:	8b c0       	rjmp	.+278    	; 0xd158 <f_rename+0x214>
    d042:	4f 85       	ldd	r20, Y+15	; 0x0f
    d044:	58 89       	ldd	r21, Y+16	; 0x10
    d046:	69 89       	ldd	r22, Y+17	; 0x11
    d048:	7a 89       	ldd	r23, Y+18	; 0x12
    d04a:	21 96       	adiw	r28, 0x01	; 1
    d04c:	8c ad       	ldd	r24, Y+60	; 0x3c
    d04e:	9d ad       	ldd	r25, Y+61	; 0x3d
    d050:	ae ad       	ldd	r26, Y+62	; 0x3e
    d052:	bf ad       	ldd	r27, Y+63	; 0x3f
    d054:	21 97       	sbiw	r28, 0x01	; 1
    d056:	48 17       	cp	r20, r24
    d058:	59 07       	cpc	r21, r25
    d05a:	6a 07       	cpc	r22, r26
    d05c:	7b 07       	cpc	r23, r27
    d05e:	09 f0       	breq	.+2      	; 0xd062 <f_rename+0x11e>
    d060:	7b c0       	rjmp	.+246    	; 0xd158 <f_rename+0x214>
    d062:	04 c0       	rjmp	.+8      	; 0xd06c <f_rename+0x128>
				}
				if (res == FR_NO_FILE) { 				/* It is a valid path and no name collision */
    d064:	04 30       	cpi	r16, 0x04	; 4
    d066:	11 05       	cpc	r17, r1
    d068:	09 f0       	breq	.+2      	; 0xd06c <f_rename+0x128>
    d06a:	b5 cf       	rjmp	.-150    	; 0xcfd6 <f_rename+0x92>
					res = dir_register(&djn);			/* Register the new entry */
    d06c:	ce 01       	movw	r24, r28
    d06e:	01 96       	adiw	r24, 0x01	; 1
    d070:	0e 94 9e 56 	call	0xad3c	; 0xad3c <dir_register>
    d074:	8c 01       	movw	r16, r24
					if (res == FR_OK) {
    d076:	89 2b       	or	r24, r25
    d078:	09 f0       	breq	.+2      	; 0xd07c <f_rename+0x138>
    d07a:	ad cf       	rjmp	.-166    	; 0xcfd6 <f_rename+0x92>
						dir = djn.dir;					/* Copy directory entry of the object except name */
    d07c:	0b 8d       	ldd	r16, Y+27	; 0x1b
    d07e:	1c 8d       	ldd	r17, Y+28	; 0x1c
    d080:	6d e5       	ldi	r22, 0x5D	; 93
    d082:	70 e0       	ldi	r23, 0x00	; 0
    d084:	6c 0f       	add	r22, r28
    d086:	7d 1f       	adc	r23, r29
    d088:	63 5f       	subi	r22, 0xF3	; 243
    d08a:	7f 4f       	sbci	r23, 0xFF	; 255
    d08c:	43 e1       	ldi	r20, 0x13	; 19
    d08e:	50 e0       	ldi	r21, 0x00	; 0
    d090:	c8 01       	movw	r24, r16
    d092:	0d 96       	adiw	r24, 0x0d	; 13
    d094:	0e 94 ca 4a 	call	0x9594	; 0x9594 <mem_cpy.part.0>
						mem_cpy(dir + 13, buf + 13, SZDIRE - 13);
						dir[DIR_Attr] = buf[DIR_Attr];
    d098:	a9 96       	adiw	r28, 0x29	; 41
    d09a:	8f ad       	ldd	r24, Y+63	; 0x3f
    d09c:	a9 97       	sbiw	r28, 0x29	; 41
						if (!(dir[DIR_Attr] & AM_DIR)) dir[DIR_Attr] |= AM_ARC;	/* Set archive attribute if it is a file */
    d09e:	84 ff       	sbrs	r24, 4
    d0a0:	80 62       	ori	r24, 0x20	; 32
    d0a2:	f8 01       	movw	r30, r16
    d0a4:	83 87       	std	Z+11, r24	; 0x0b
						fs->wflag = 1;
    d0a6:	ef 96       	adiw	r28, 0x3f	; 63
    d0a8:	ee ac       	ldd	r14, Y+62	; 0x3e
    d0aa:	ff ac       	ldd	r15, Y+63	; 0x3f
    d0ac:	ef 97       	sbiw	r28, 0x3f	; 63
    d0ae:	bb 24       	eor	r11, r11
    d0b0:	b3 94       	inc	r11
    d0b2:	f7 01       	movw	r30, r14
    d0b4:	b3 82       	std	Z+3, r11	; 0x03
						if ((dir[DIR_Attr] & AM_DIR) && djo.obj.sclust != djn.obj.sclust) {	/* Update .. entry in the sub-directory if needed */
    d0b6:	f8 01       	movw	r30, r16
    d0b8:	83 85       	ldd	r24, Z+11	; 0x0b
    d0ba:	84 ff       	sbrs	r24, 4
    d0bc:	3d c0       	rjmp	.+122    	; 0xd138 <f_rename+0x1f4>
    d0be:	4d a9       	ldd	r20, Y+53	; 0x35
    d0c0:	5e a9       	ldd	r21, Y+54	; 0x36
    d0c2:	6f a9       	ldd	r22, Y+55	; 0x37
    d0c4:	78 ad       	ldd	r23, Y+56	; 0x38
    d0c6:	8f 81       	ldd	r24, Y+7	; 0x07
    d0c8:	98 85       	ldd	r25, Y+8	; 0x08
    d0ca:	a9 85       	ldd	r26, Y+9	; 0x09
    d0cc:	ba 85       	ldd	r27, Y+10	; 0x0a
    d0ce:	48 17       	cp	r20, r24
    d0d0:	59 07       	cpc	r21, r25
    d0d2:	6a 07       	cpc	r22, r26
    d0d4:	7b 07       	cpc	r23, r27
    d0d6:	81 f1       	breq	.+96     	; 0xd138 <f_rename+0x1f4>
							sect = clst2sect(fs, ld_clust(fs, dir));
    d0d8:	b8 01       	movw	r22, r16
    d0da:	f7 01       	movw	r30, r14
    d0dc:	80 81       	ld	r24, Z
    d0de:	0e 94 d5 4a 	call	0x95aa	; 0x95aa <ld_clust.isra.3>
    d0e2:	ab 01       	movw	r20, r22
    d0e4:	bc 01       	movw	r22, r24
    d0e6:	c7 01       	movw	r24, r14
    d0e8:	0e 94 d5 48 	call	0x91aa	; 0x91aa <clst2sect>
    d0ec:	ab 01       	movw	r20, r22
    d0ee:	bc 01       	movw	r22, r24
							if (sect == 0) {
    d0f0:	41 15       	cp	r20, r1
    d0f2:	51 05       	cpc	r21, r1
    d0f4:	61 05       	cpc	r22, r1
    d0f6:	71 05       	cpc	r23, r1
    d0f8:	91 f1       	breq	.+100    	; 0xd15e <f_rename+0x21a>
								res = FR_INT_ERR;
							} else {
/* Start of critical section where an interruption can cause a cross-link */
								res = move_window(fs, sect);
    d0fa:	c7 01       	movw	r24, r14
    d0fc:	0e 94 64 4c 	call	0x98c8	; 0x98c8 <move_window>
    d100:	8c 01       	movw	r16, r24
								dir = fs->win + SZDIRE * 1;	/* Ptr to .. entry */
								if (res == FR_OK && dir[1] == '.') {
    d102:	89 2b       	or	r24, r25
    d104:	09 f0       	breq	.+2      	; 0xd108 <f_rename+0x1c4>
    d106:	67 cf       	rjmp	.-306    	; 0xcfd6 <f_rename+0x92>
							if (sect == 0) {
								res = FR_INT_ERR;
							} else {
/* Start of critical section where an interruption can cause a cross-link */
								res = move_window(fs, sect);
								dir = fs->win + SZDIRE * 1;	/* Ptr to .. entry */
    d108:	ef 96       	adiw	r28, 0x3f	; 63
    d10a:	8e ad       	ldd	r24, Y+62	; 0x3e
    d10c:	9f ad       	ldd	r25, Y+63	; 0x3f
    d10e:	ef 97       	sbiw	r28, 0x3f	; 63
								if (res == FR_OK && dir[1] == '.') {
    d110:	fc 01       	movw	r30, r24
    d112:	ea 5a       	subi	r30, 0xAA	; 170
    d114:	ff 4f       	sbci	r31, 0xFF	; 255
    d116:	20 81       	ld	r18, Z
    d118:	2e 32       	cpi	r18, 0x2E	; 46
    d11a:	71 f4       	brne	.+28     	; 0xd138 <f_rename+0x1f4>
									st_clust(fs, dir, djn.obj.sclust);
    d11c:	2f 81       	ldd	r18, Y+7	; 0x07
    d11e:	38 85       	ldd	r19, Y+8	; 0x08
    d120:	49 85       	ldd	r20, Y+9	; 0x09
    d122:	5a 85       	ldd	r21, Y+10	; 0x0a
							if (sect == 0) {
								res = FR_INT_ERR;
							} else {
/* Start of critical section where an interruption can cause a cross-link */
								res = move_window(fs, sect);
								dir = fs->win + SZDIRE * 1;	/* Ptr to .. entry */
    d124:	bc 01       	movw	r22, r24
    d126:	6b 5a       	subi	r22, 0xAB	; 171
    d128:	7f 4f       	sbci	r23, 0xFF	; 255
								if (res == FR_OK && dir[1] == '.') {
									st_clust(fs, dir, djn.obj.sclust);
    d12a:	0e 94 ea 4a 	call	0x95d4	; 0x95d4 <st_clust.isra.4>
									fs->wflag = 1;
    d12e:	ef 96       	adiw	r28, 0x3f	; 63
    d130:	ee ad       	ldd	r30, Y+62	; 0x3e
    d132:	ff ad       	ldd	r31, Y+63	; 0x3f
    d134:	ef 97       	sbiw	r28, 0x3f	; 63
    d136:	b3 82       	std	Z+3, r11	; 0x03
						}
					}
				}
			}
			if (res == FR_OK) {
				res = dir_remove(&djo);		/* Remove old entry */
    d138:	ce 01       	movw	r24, r28
    d13a:	8f 96       	adiw	r24, 0x2f	; 47
    d13c:	0e 94 48 55 	call	0xaa90	; 0xaa90 <dir_remove>
    d140:	8c 01       	movw	r16, r24
				if (res == FR_OK) {
    d142:	89 2b       	or	r24, r25
    d144:	09 f0       	breq	.+2      	; 0xd148 <f_rename+0x204>
    d146:	47 cf       	rjmp	.-370    	; 0xcfd6 <f_rename+0x92>
					res = sync_fs(fs);
    d148:	ef 96       	adiw	r28, 0x3f	; 63
    d14a:	8e ad       	ldd	r24, Y+62	; 0x3e
    d14c:	9f ad       	ldd	r25, Y+63	; 0x3f
    d14e:	ef 97       	sbiw	r28, 0x3f	; 63
    d150:	0e 94 4a 4b 	call	0x9694	; 0x9694 <sync_fs>
    d154:	8c 01       	movw	r16, r24
    d156:	3f cf       	rjmp	.-386    	; 0xcfd6 <f_rename+0x92>
    d158:	08 e0       	ldi	r16, 0x08	; 8
    d15a:	10 e0       	ldi	r17, 0x00	; 0
    d15c:	3c cf       	rjmp	.-392    	; 0xcfd6 <f_rename+0x92>
						if (!(dir[DIR_Attr] & AM_DIR)) dir[DIR_Attr] |= AM_ARC;	/* Set archive attribute if it is a file */
						fs->wflag = 1;
						if ((dir[DIR_Attr] & AM_DIR) && djo.obj.sclust != djn.obj.sclust) {	/* Update .. entry in the sub-directory if needed */
							sect = clst2sect(fs, ld_clust(fs, dir));
							if (sect == 0) {
								res = FR_INT_ERR;
    d15e:	02 e0       	ldi	r16, 0x02	; 2
    d160:	10 e0       	ldi	r17, 0x00	; 0
    d162:	39 cf       	rjmp	.-398    	; 0xcfd6 <f_rename+0x92>
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
}
    d164:	ce 57       	subi	r28, 0x7E	; 126
    d166:	df 4f       	sbci	r29, 0xFF	; 255
    d168:	e9 e0       	ldi	r30, 0x09	; 9
    d16a:	0c 94 c9 e8 	jmp	0x1d192	; 0x1d192 <__epilogue_restores__+0x12>

0000d16e <f_chmod>:
FRESULT f_chmod (
	const TCHAR* path,	/* Pointer to the file path */
	BYTE attr,			/* Attribute bits */
	BYTE mask			/* Attribute mask to change */
)
{
    d16e:	a2 e3       	ldi	r26, 0x32	; 50
    d170:	b0 e0       	ldi	r27, 0x00	; 0
    d172:	ed eb       	ldi	r30, 0xBD	; 189
    d174:	f8 e6       	ldi	r31, 0x68	; 104
    d176:	0c 94 ae e8 	jmp	0x1d15c	; 0x1d15c <__prologue_saves__+0x14>
    d17a:	9a ab       	std	Y+50, r25	; 0x32
    d17c:	89 ab       	std	Y+49, r24	; 0x31
    d17e:	e6 2e       	mov	r14, r22
    d180:	f4 2e       	mov	r15, r20
	DIR dj;
	FATFS *fs;
	DEF_NAMBUF


	res = mount_volume(&path, &fs, FA_WRITE);	/* Get logical drive */
    d182:	42 e0       	ldi	r20, 0x02	; 2
    d184:	be 01       	movw	r22, r28
    d186:	61 5d       	subi	r22, 0xD1	; 209
    d188:	7f 4f       	sbci	r23, 0xFF	; 255
    d18a:	ce 01       	movw	r24, r28
    d18c:	c1 96       	adiw	r24, 0x31	; 49
    d18e:	0e 94 df 4c 	call	0x99be	; 0x99be <mount_volume>
	if (res == FR_OK) {
    d192:	00 97       	sbiw	r24, 0x00	; 0
    d194:	a9 f5       	brne	.+106    	; 0xd200 <f_chmod+0x92>
		dj.obj.fs = fs;
    d196:	8f a5       	ldd	r24, Y+47	; 0x2f
    d198:	98 a9       	ldd	r25, Y+48	; 0x30
    d19a:	9a 83       	std	Y+2, r25	; 0x02
    d19c:	89 83       	std	Y+1, r24	; 0x01
		INIT_NAMBUF(fs);
    d19e:	80 e0       	ldi	r24, 0x00	; 0
    d1a0:	92 e0       	ldi	r25, 0x02	; 2
    d1a2:	08 d1       	rcall	.+528    	; 0xd3b4 <ff_memalloc>
    d1a4:	6c 01       	movw	r12, r24
    d1a6:	00 97       	sbiw	r24, 0x00	; 0
    d1a8:	b1 f0       	breq	.+44     	; 0xd1d6 <f_chmod+0x68>
    d1aa:	ef a5       	ldd	r30, Y+47	; 0x2f
    d1ac:	f8 a9       	ldd	r31, Y+48	; 0x30
    d1ae:	94 87       	std	Z+12, r25	; 0x0c
    d1b0:	83 87       	std	Z+11, r24	; 0x0b
		res = follow_path(&dj, path);	/* Follow the file path */
    d1b2:	69 a9       	ldd	r22, Y+49	; 0x31
    d1b4:	7a a9       	ldd	r23, Y+50	; 0x32
    d1b6:	ce 01       	movw	r24, r28
    d1b8:	01 96       	adiw	r24, 0x01	; 1
    d1ba:	0e 94 2c 58 	call	0xb058	; 0xb058 <follow_path>
    d1be:	8c 01       	movw	r16, r24
		if (res == FR_OK && (dj.fn[NSFLAG] & (NS_DOT | NS_NONAME))) res = FR_INVALID_NAME;	/* Check object validity */
    d1c0:	89 2b       	or	r24, r25
    d1c2:	29 f4       	brne	.+10     	; 0xd1ce <f_chmod+0x60>
    d1c4:	88 a5       	ldd	r24, Y+40	; 0x28
    d1c6:	80 7a       	andi	r24, 0xA0	; 160
    d1c8:	49 f0       	breq	.+18     	; 0xd1dc <f_chmod+0x6e>
    d1ca:	06 e0       	ldi	r16, 0x06	; 6
    d1cc:	10 e0       	ldi	r17, 0x00	; 0
			}
			if (res == FR_OK) {
				res = sync_fs(fs);
			}
		}
		FREE_NAMBUF();
    d1ce:	c6 01       	movw	r24, r12
    d1d0:	f4 d0       	rcall	.+488    	; 0xd3ba <ff_memfree>
    d1d2:	c8 01       	movw	r24, r16
    d1d4:	15 c0       	rjmp	.+42     	; 0xd200 <f_chmod+0x92>


	res = mount_volume(&path, &fs, FA_WRITE);	/* Get logical drive */
	if (res == FR_OK) {
		dj.obj.fs = fs;
		INIT_NAMBUF(fs);
    d1d6:	81 e1       	ldi	r24, 0x11	; 17
    d1d8:	90 e0       	ldi	r25, 0x00	; 0
    d1da:	12 c0       	rjmp	.+36     	; 0xd200 <f_chmod+0x92>
				fs->dirbuf[XDIR_Attr] = (attr & mask) | (fs->dirbuf[XDIR_Attr] & (BYTE)~mask);	/* Apply attribute change */
				res = store_xdir(&dj);
			} else
#endif
			{
				dj.dir[DIR_Attr] = (attr & mask) | (dj.dir[DIR_Attr] & (BYTE)~mask);	/* Apply attribute change */
    d1dc:	eb 8d       	ldd	r30, Y+27	; 0x1b
    d1de:	fc 8d       	ldd	r31, Y+28	; 0x1c
    d1e0:	83 85       	ldd	r24, Z+11	; 0x0b
    d1e2:	6e 2d       	mov	r22, r14
    d1e4:	68 27       	eor	r22, r24
    d1e6:	6f 21       	and	r22, r15
    d1e8:	67 72       	andi	r22, 0x27	; 39
    d1ea:	68 27       	eor	r22, r24
    d1ec:	63 87       	std	Z+11, r22	; 0x0b
				fs->wflag = 1;
    d1ee:	8f a5       	ldd	r24, Y+47	; 0x2f
    d1f0:	98 a9       	ldd	r25, Y+48	; 0x30
    d1f2:	21 e0       	ldi	r18, 0x01	; 1
    d1f4:	fc 01       	movw	r30, r24
    d1f6:	23 83       	std	Z+3, r18	; 0x03
			}
			if (res == FR_OK) {
				res = sync_fs(fs);
    d1f8:	0e 94 4a 4b 	call	0x9694	; 0x9694 <sync_fs>
    d1fc:	8c 01       	movw	r16, r24
    d1fe:	e7 cf       	rjmp	.-50     	; 0xd1ce <f_chmod+0x60>
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
}
    d200:	e2 96       	adiw	r28, 0x32	; 50
    d202:	e8 e0       	ldi	r30, 0x08	; 8
    d204:	0c 94 ca e8 	jmp	0x1d194	; 0x1d194 <__epilogue_restores__+0x14>

0000d208 <f_utime>:

FRESULT f_utime (
	const TCHAR* path,	/* Pointer to the file/directory name */
	const FILINFO* fno	/* Pointer to the timestamp to be set */
)
{
    d208:	a2 e3       	ldi	r26, 0x32	; 50
    d20a:	b0 e0       	ldi	r27, 0x00	; 0
    d20c:	ea e0       	ldi	r30, 0x0A	; 10
    d20e:	f9 e6       	ldi	r31, 0x69	; 105
    d210:	0c 94 ae e8 	jmp	0x1d15c	; 0x1d15c <__prologue_saves__+0x14>
    d214:	9a ab       	std	Y+50, r25	; 0x32
    d216:	89 ab       	std	Y+49, r24	; 0x31
    d218:	6b 01       	movw	r12, r22
	DIR dj;
	FATFS *fs;
	DEF_NAMBUF


	res = mount_volume(&path, &fs, FA_WRITE);	/* Get logical drive */
    d21a:	42 e0       	ldi	r20, 0x02	; 2
    d21c:	be 01       	movw	r22, r28
    d21e:	61 5d       	subi	r22, 0xD1	; 209
    d220:	7f 4f       	sbci	r23, 0xFF	; 255
    d222:	ce 01       	movw	r24, r28
    d224:	c1 96       	adiw	r24, 0x31	; 49
    d226:	0e 94 df 4c 	call	0x99be	; 0x99be <mount_volume>
	if (res == FR_OK) {
    d22a:	00 97       	sbiw	r24, 0x00	; 0
    d22c:	09 f0       	breq	.+2      	; 0xd230 <f_utime+0x28>
    d22e:	41 c0       	rjmp	.+130    	; 0xd2b2 <f_utime+0xaa>
		dj.obj.fs = fs;
    d230:	8f a5       	ldd	r24, Y+47	; 0x2f
    d232:	98 a9       	ldd	r25, Y+48	; 0x30
    d234:	9a 83       	std	Y+2, r25	; 0x02
    d236:	89 83       	std	Y+1, r24	; 0x01
		INIT_NAMBUF(fs);
    d238:	80 e0       	ldi	r24, 0x00	; 0
    d23a:	92 e0       	ldi	r25, 0x02	; 2
    d23c:	bb d0       	rcall	.+374    	; 0xd3b4 <ff_memalloc>
    d23e:	7c 01       	movw	r14, r24
    d240:	00 97       	sbiw	r24, 0x00	; 0
    d242:	b1 f0       	breq	.+44     	; 0xd270 <f_utime+0x68>
    d244:	ef a5       	ldd	r30, Y+47	; 0x2f
    d246:	f8 a9       	ldd	r31, Y+48	; 0x30
    d248:	94 87       	std	Z+12, r25	; 0x0c
    d24a:	83 87       	std	Z+11, r24	; 0x0b
		res = follow_path(&dj, path);	/* Follow the file path */
    d24c:	69 a9       	ldd	r22, Y+49	; 0x31
    d24e:	7a a9       	ldd	r23, Y+50	; 0x32
    d250:	ce 01       	movw	r24, r28
    d252:	01 96       	adiw	r24, 0x01	; 1
    d254:	0e 94 2c 58 	call	0xb058	; 0xb058 <follow_path>
    d258:	8c 01       	movw	r16, r24
		if (res == FR_OK && (dj.fn[NSFLAG] & (NS_DOT | NS_NONAME))) res = FR_INVALID_NAME;	/* Check object validity */
    d25a:	89 2b       	or	r24, r25
    d25c:	29 f4       	brne	.+10     	; 0xd268 <f_utime+0x60>
    d25e:	88 a5       	ldd	r24, Y+40	; 0x28
    d260:	80 7a       	andi	r24, 0xA0	; 160
    d262:	49 f0       	breq	.+18     	; 0xd276 <f_utime+0x6e>
    d264:	06 e0       	ldi	r16, 0x06	; 6
    d266:	10 e0       	ldi	r17, 0x00	; 0
			}
			if (res == FR_OK) {
				res = sync_fs(fs);
			}
		}
		FREE_NAMBUF();
    d268:	c7 01       	movw	r24, r14
    d26a:	a7 d0       	rcall	.+334    	; 0xd3ba <ff_memfree>
    d26c:	c8 01       	movw	r24, r16
    d26e:	21 c0       	rjmp	.+66     	; 0xd2b2 <f_utime+0xaa>


	res = mount_volume(&path, &fs, FA_WRITE);	/* Get logical drive */
	if (res == FR_OK) {
		dj.obj.fs = fs;
		INIT_NAMBUF(fs);
    d270:	81 e1       	ldi	r24, 0x11	; 17
    d272:	90 e0       	ldi	r25, 0x00	; 0
    d274:	1e c0       	rjmp	.+60     	; 0xd2b2 <f_utime+0xaa>
				st_dword(fs->dirbuf + XDIR_ModTime, (DWORD)fno->fdate << 16 | fno->ftime);
				res = store_xdir(&dj);
			} else
#endif
			{
				st_dword(dj.dir + DIR_ModTime, (DWORD)fno->fdate << 16 | fno->ftime);
    d276:	f6 01       	movw	r30, r12
    d278:	44 81       	ldd	r20, Z+4	; 0x04
    d27a:	55 81       	ldd	r21, Z+5	; 0x05
    d27c:	60 e0       	ldi	r22, 0x00	; 0
    d27e:	70 e0       	ldi	r23, 0x00	; 0
    d280:	ba 01       	movw	r22, r20
    d282:	55 27       	eor	r21, r21
    d284:	44 27       	eor	r20, r20
    d286:	86 81       	ldd	r24, Z+6	; 0x06
    d288:	97 81       	ldd	r25, Z+7	; 0x07
    d28a:	a0 e0       	ldi	r26, 0x00	; 0
    d28c:	b0 e0       	ldi	r27, 0x00	; 0
    d28e:	48 2b       	or	r20, r24
    d290:	59 2b       	or	r21, r25
    d292:	6a 2b       	or	r22, r26
    d294:	7b 2b       	or	r23, r27
    d296:	8b 8d       	ldd	r24, Y+27	; 0x1b
    d298:	9c 8d       	ldd	r25, Y+28	; 0x1c
    d29a:	46 96       	adiw	r24, 0x16	; 22
    d29c:	0e 94 b7 48 	call	0x916e	; 0x916e <st_dword>
				fs->wflag = 1;
    d2a0:	8f a5       	ldd	r24, Y+47	; 0x2f
    d2a2:	98 a9       	ldd	r25, Y+48	; 0x30
    d2a4:	21 e0       	ldi	r18, 0x01	; 1
    d2a6:	fc 01       	movw	r30, r24
    d2a8:	23 83       	std	Z+3, r18	; 0x03
			}
			if (res == FR_OK) {
				res = sync_fs(fs);
    d2aa:	0e 94 4a 4b 	call	0x9694	; 0x9694 <sync_fs>
    d2ae:	8c 01       	movw	r16, r24
    d2b0:	db cf       	rjmp	.-74     	; 0xd268 <f_utime+0x60>
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
}
    d2b2:	e2 96       	adiw	r28, 0x32	; 50
    d2b4:	e8 e0       	ldi	r30, 0x08	; 8
    d2b6:	0c 94 ca e8 	jmp	0x1d194	; 0x1d194 <__epilogue_restores__+0x14>

0000d2ba <f_getlabel>:
FRESULT f_getlabel (
	const TCHAR* path,	/* Logical drive number */
	TCHAR* label,		/* Buffer to store the volume label */
	DWORD* vsn			/* Variable to store the volume serial number */
)
{
    d2ba:	a2 e3       	ldi	r26, 0x32	; 50
    d2bc:	b0 e0       	ldi	r27, 0x00	; 0
    d2be:	e3 e6       	ldi	r30, 0x63	; 99
    d2c0:	f9 e6       	ldi	r31, 0x69	; 105
    d2c2:	0c 94 ae e8 	jmp	0x1d15c	; 0x1d15c <__prologue_saves__+0x14>
    d2c6:	9a ab       	std	Y+50, r25	; 0x32
    d2c8:	89 ab       	std	Y+49, r24	; 0x31
    d2ca:	7b 01       	movw	r14, r22
    d2cc:	6a 01       	movw	r12, r20
	FATFS *fs;
	UINT si, di;
	WCHAR wc;

	/* Get logical drive */
	res = mount_volume(&path, &fs, 0);
    d2ce:	40 e0       	ldi	r20, 0x00	; 0
    d2d0:	be 01       	movw	r22, r28
    d2d2:	61 5d       	subi	r22, 0xD1	; 209
    d2d4:	7f 4f       	sbci	r23, 0xFF	; 255
    d2d6:	ce 01       	movw	r24, r28
    d2d8:	c1 96       	adiw	r24, 0x31	; 49
    d2da:	0e 94 df 4c 	call	0x99be	; 0x99be <mount_volume>
    d2de:	8c 01       	movw	r16, r24

	/* Get volume label */
	if (res == FR_OK && label) {
    d2e0:	89 2b       	or	r24, r25
    d2e2:	09 f0       	breq	.+2      	; 0xd2e6 <f_getlabel+0x2c>
    d2e4:	62 c0       	rjmp	.+196    	; 0xd3aa <f_getlabel+0xf0>
    d2e6:	e1 14       	cp	r14, r1
    d2e8:	f1 04       	cpc	r15, r1
    d2ea:	a1 f1       	breq	.+104    	; 0xd354 <f_getlabel+0x9a>
		dj.obj.fs = fs; dj.obj.sclust = 0;	/* Open root directory */
    d2ec:	8f a5       	ldd	r24, Y+47	; 0x2f
    d2ee:	98 a9       	ldd	r25, Y+48	; 0x30
    d2f0:	9a 83       	std	Y+2, r25	; 0x02
    d2f2:	89 83       	std	Y+1, r24	; 0x01
    d2f4:	1f 82       	std	Y+7, r1	; 0x07
    d2f6:	18 86       	std	Y+8, r1	; 0x08
    d2f8:	19 86       	std	Y+9, r1	; 0x09
    d2fa:	1a 86       	std	Y+10, r1	; 0x0a
		res = dir_sdi(&dj, 0);
    d2fc:	40 e0       	ldi	r20, 0x00	; 0
    d2fe:	50 e0       	ldi	r21, 0x00	; 0
    d300:	ba 01       	movw	r22, r20
    d302:	ce 01       	movw	r24, r28
    d304:	01 96       	adiw	r24, 0x01	; 1
    d306:	0e 94 e6 50 	call	0xa1cc	; 0xa1cc <dir_sdi>
		if (res == FR_OK) {
    d30a:	00 97       	sbiw	r24, 0x00	; 0
    d30c:	f1 f4       	brne	.+60     	; 0xd34a <f_getlabel+0x90>
		 	res = DIR_READ_LABEL(&dj);		/* Find a volume label entry */
    d30e:	61 e0       	ldi	r22, 0x01	; 1
    d310:	70 e0       	ldi	r23, 0x00	; 0
    d312:	ce 01       	movw	r24, r28
    d314:	01 96       	adiw	r24, 0x01	; 1
    d316:	0e 94 7f 54 	call	0xa8fe	; 0xa8fe <dir_read>
		 	if (res == FR_OK) {
    d31a:	00 97       	sbiw	r24, 0x00	; 0
    d31c:	b1 f4       	brne	.+44     	; 0xd34a <f_getlabel+0x90>
    d31e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    d320:	9c 8d       	ldd	r25, Y+28	; 0x1c
    d322:	f7 01       	movw	r30, r14
    d324:	3b 96       	adiw	r30, 0x0b	; 11
				} else
#endif
				{
					si = di = 0;		/* Extract volume label from AM_VOL entry */
					while (si < 11) {
						wc = dj.dir[si++];
    d326:	a7 01       	movw	r20, r14
    d328:	dc 01       	movw	r26, r24
    d32a:	2d 91       	ld	r18, X+
    d32c:	cd 01       	movw	r24, r26
						wc = ff_oem2uni(wc, CODEPAGE);					/* Convert it into Unicode */
						if (wc != 0) wc = put_utf(wc, &label[di], 4);	/* Put it in Unicode */
						if (wc == 0) { di = 0; break; }
						di += wc;
#else									/* ANSI/OEM output */
						label[di++] = (TCHAR)wc;
    d32e:	da 01       	movw	r26, r20
    d330:	2d 93       	st	X+, r18
    d332:	ad 01       	movw	r20, r26
					label[di] = 0;
				} else
#endif
				{
					si = di = 0;		/* Extract volume label from AM_VOL entry */
					while (si < 11) {
    d334:	ae 17       	cp	r26, r30
    d336:	bf 07       	cpc	r27, r31
    d338:	b9 f7       	brne	.-18     	; 0xd328 <f_getlabel+0x6e>
#else									/* ANSI/OEM output */
						label[di++] = (TCHAR)wc;
#endif
					}
					do {				/* Truncate trailing spaces */
						label[di] = 0;
    d33a:	10 82       	st	Z, r1
						if (di == 0) break;
    d33c:	ee 16       	cp	r14, r30
    d33e:	ff 06       	cpc	r15, r31
    d340:	49 f0       	breq	.+18     	; 0xd354 <f_getlabel+0x9a>
					} while (label[--di] == ' ');
    d342:	82 91       	ld	r24, -Z
    d344:	80 32       	cpi	r24, 0x20	; 32
    d346:	c9 f3       	breq	.-14     	; 0xd33a <f_getlabel+0x80>
    d348:	05 c0       	rjmp	.+10     	; 0xd354 <f_getlabel+0x9a>
				}
			}
		}
		if (res == FR_NO_FILE) {	/* No label entry and return nul string */
    d34a:	84 30       	cpi	r24, 0x04	; 4
    d34c:	91 05       	cpc	r25, r1
    d34e:	61 f5       	brne	.+88     	; 0xd3a8 <f_getlabel+0xee>
			label[0] = 0;
    d350:	f7 01       	movw	r30, r14
    d352:	10 82       	st	Z, r1
			res = FR_OK;
		}
	}

	/* Get volume serial number */
	if (res == FR_OK && vsn) {
    d354:	c1 14       	cp	r12, r1
    d356:	d1 04       	cpc	r13, r1
    d358:	41 f1       	breq	.+80     	; 0xd3aa <f_getlabel+0xf0>
		res = move_window(fs, fs->volbase);
    d35a:	8f a5       	ldd	r24, Y+47	; 0x2f
    d35c:	98 a9       	ldd	r25, Y+48	; 0x30
    d35e:	fc 01       	movw	r30, r24
    d360:	41 a1       	ldd	r20, Z+33	; 0x21
    d362:	52 a1       	ldd	r21, Z+34	; 0x22
    d364:	63 a1       	ldd	r22, Z+35	; 0x23
    d366:	74 a1       	ldd	r23, Z+36	; 0x24
    d368:	0e 94 64 4c 	call	0x98c8	; 0x98c8 <move_window>
    d36c:	8c 01       	movw	r16, r24
		if (res == FR_OK) {
    d36e:	89 2b       	or	r24, r25
    d370:	e1 f4       	brne	.+56     	; 0xd3aa <f_getlabel+0xf0>
			switch (fs->fs_type) {
    d372:	ef a5       	ldd	r30, Y+47	; 0x2f
    d374:	f8 a9       	ldd	r31, Y+48	; 0x30
    d376:	80 81       	ld	r24, Z
    d378:	83 30       	cpi	r24, 0x03	; 3
    d37a:	29 f0       	breq	.+10     	; 0xd386 <f_getlabel+0xcc>
    d37c:	84 30       	cpi	r24, 0x04	; 4
    d37e:	31 f0       	breq	.+12     	; 0xd38c <f_getlabel+0xd2>

			case FS_FAT32:
				di = BS_VolID32; break;

			default:
				di = BS_VolID;
    d380:	87 e2       	ldi	r24, 0x27	; 39
    d382:	90 e0       	ldi	r25, 0x00	; 0
    d384:	05 c0       	rjmp	.+10     	; 0xd390 <f_getlabel+0xd6>
			switch (fs->fs_type) {
			case FS_EXFAT:
				di = BPB_VolIDEx; break;

			case FS_FAT32:
				di = BS_VolID32; break;
    d386:	83 e4       	ldi	r24, 0x43	; 67
    d388:	90 e0       	ldi	r25, 0x00	; 0
    d38a:	02 c0       	rjmp	.+4      	; 0xd390 <f_getlabel+0xd6>
	if (res == FR_OK && vsn) {
		res = move_window(fs, fs->volbase);
		if (res == FR_OK) {
			switch (fs->fs_type) {
			case FS_EXFAT:
				di = BPB_VolIDEx; break;
    d38c:	84 e6       	ldi	r24, 0x64	; 100
    d38e:	90 e0       	ldi	r25, 0x00	; 0
				di = BS_VolID32; break;

			default:
				di = BS_VolID;
			}
			*vsn = ld_dword(fs->win + di);
    d390:	f5 96       	adiw	r30, 0x35	; 53
    d392:	8e 0f       	add	r24, r30
    d394:	9f 1f       	adc	r25, r31
    d396:	0e 94 a2 48 	call	0x9144	; 0x9144 <ld_dword>
    d39a:	d6 01       	movw	r26, r12
    d39c:	6d 93       	st	X+, r22
    d39e:	7d 93       	st	X+, r23
    d3a0:	8d 93       	st	X+, r24
    d3a2:	9c 93       	st	X, r25
    d3a4:	13 97       	sbiw	r26, 0x03	; 3
    d3a6:	01 c0       	rjmp	.+2      	; 0xd3aa <f_getlabel+0xf0>
						if (di == 0) break;
					} while (label[--di] == ' ');
				}
			}
		}
		if (res == FR_NO_FILE) {	/* No label entry and return nul string */
    d3a8:	8c 01       	movw	r16, r24
			*vsn = ld_dword(fs->win + di);
		}
	}

	LEAVE_FF(fs, res);
}
    d3aa:	c8 01       	movw	r24, r16
    d3ac:	e2 96       	adiw	r28, 0x32	; 50
    d3ae:	e8 e0       	ldi	r30, 0x08	; 8
    d3b0:	0c 94 ca e8 	jmp	0x1d194	; 0x1d194 <__epilogue_restores__+0x14>

0000d3b4 <ff_memalloc>:

void* ff_memalloc (	/* Returns pointer to the allocated memory block (null if not enough core) */
	UINT msize		/* Number of bytes to allocate */
)
{
	return safemalloc(msize);	/* Allocate a new memory block with POSIX API */
    d3b4:	0c 94 52 28 	jmp	0x50a4	; 0x50a4 <safemalloc>
}
    d3b8:	08 95       	ret

0000d3ba <ff_memfree>:

void ff_memfree (
	void* mblock	/* Pointer to the memory block to free (nothing to do if null) */
)
{
	safefree(mblock);	/* Free the memory block with POSIX API */
    d3ba:	0c 94 74 28 	jmp	0x50e8	; 0x50e8 <safefree>
    d3be:	08 95       	ret

0000d3c0 <ff_uni2oem>:
#if FF_CODE_PAGE != 0 && FF_CODE_PAGE < 900
WCHAR ff_uni2oem (	/* Returns OEM code character, zero on error */
	DWORD	uni,	/* UTF-16 encoded character to be converted */
	WORD	cp		/* Code page for the conversion */
)
{
    d3c0:	cf 92       	push	r12
    d3c2:	df 92       	push	r13
    d3c4:	ef 92       	push	r14
    d3c6:	ff 92       	push	r15
	WCHAR c = 0;
	const WCHAR *p = CVTBL(uc, FF_CODE_PAGE);


	if (uni < 0x80) {	/* ASCII? */
    d3c8:	60 38       	cpi	r22, 0x80	; 128
    d3ca:	71 05       	cpc	r23, r1
    d3cc:	81 05       	cpc	r24, r1
    d3ce:	91 05       	cpc	r25, r1
    d3d0:	10 f4       	brcc	.+4      	; 0xd3d6 <ff_uni2oem+0x16>
		c = (WCHAR)uni;
    d3d2:	cb 01       	movw	r24, r22
    d3d4:	23 c0       	rjmp	.+70     	; 0xd41c <ff_uni2oem+0x5c>

	} else {			/* Non-ASCII */
		if (uni < 0x10000 && cp == FF_CODE_PAGE) {	/* Is it in BMP and valid code page? */
    d3d6:	61 15       	cp	r22, r1
    d3d8:	71 05       	cpc	r23, r1
    d3da:	21 e0       	ldi	r18, 0x01	; 1
    d3dc:	82 07       	cpc	r24, r18
    d3de:	91 05       	cpc	r25, r1
    d3e0:	d8 f4       	brcc	.+54     	; 0xd418 <ff_uni2oem+0x58>
    d3e2:	45 3b       	cpi	r20, 0xB5	; 181
    d3e4:	51 40       	sbci	r21, 0x01	; 1
    d3e6:	c1 f4       	brne	.+48     	; 0xd418 <ff_uni2oem+0x58>
    d3e8:	e6 ea       	ldi	r30, 0xA6	; 166
    d3ea:	f7 e0       	ldi	r31, 0x07	; 7
    d3ec:	20 e0       	ldi	r18, 0x00	; 0
    d3ee:	30 e0       	ldi	r19, 0x00	; 0
			for (c = 0; c < 0x80 && uni != p[c]; c++) ;
    d3f0:	c1 90       	ld	r12, Z+
    d3f2:	d1 90       	ld	r13, Z+
    d3f4:	e1 2c       	mov	r14, r1
    d3f6:	f1 2c       	mov	r15, r1
    d3f8:	6c 15       	cp	r22, r12
    d3fa:	7d 05       	cpc	r23, r13
    d3fc:	8e 05       	cpc	r24, r14
    d3fe:	9f 05       	cpc	r25, r15
    d400:	29 f0       	breq	.+10     	; 0xd40c <ff_uni2oem+0x4c>
    d402:	2f 5f       	subi	r18, 0xFF	; 255
    d404:	3f 4f       	sbci	r19, 0xFF	; 255
    d406:	20 38       	cpi	r18, 0x80	; 128
    d408:	31 05       	cpc	r19, r1
    d40a:	91 f7       	brne	.-28     	; 0xd3f0 <ff_uni2oem+0x30>
			c = (c + 0x80) & 0xFF;
    d40c:	b9 01       	movw	r22, r18
    d40e:	60 58       	subi	r22, 0x80	; 128
    d410:	7f 4f       	sbci	r23, 0xFF	; 255
    d412:	cb 01       	movw	r24, r22
    d414:	99 27       	eor	r25, r25
    d416:	02 c0       	rjmp	.+4      	; 0xd41c <ff_uni2oem+0x5c>
WCHAR ff_uni2oem (	/* Returns OEM code character, zero on error */
	DWORD	uni,	/* UTF-16 encoded character to be converted */
	WORD	cp		/* Code page for the conversion */
)
{
	WCHAR c = 0;
    d418:	80 e0       	ldi	r24, 0x00	; 0
    d41a:	90 e0       	ldi	r25, 0x00	; 0
			c = (c + 0x80) & 0xFF;
		}
	}

	return c;
}
    d41c:	ff 90       	pop	r15
    d41e:	ef 90       	pop	r14
    d420:	df 90       	pop	r13
    d422:	cf 90       	pop	r12
    d424:	08 95       	ret

0000d426 <ff_oem2uni>:
{
	WCHAR c = 0;
	const WCHAR *p = CVTBL(uc, FF_CODE_PAGE);


	if (oem < 0x80) {	/* ASCII? */
    d426:	80 38       	cpi	r24, 0x80	; 128
    d428:	91 05       	cpc	r25, r1
    d42a:	88 f0       	brcs	.+34     	; 0xd44e <ff_oem2uni+0x28>
		c = oem;

	} else {			/* Extended char */
		if (cp == FF_CODE_PAGE) {	/* Is it a valid code page? */
    d42c:	65 3b       	cpi	r22, 0xB5	; 181
    d42e:	71 40       	sbci	r23, 0x01	; 1
    d430:	61 f4       	brne	.+24     	; 0xd44a <ff_oem2uni+0x24>
			if (oem < 0x100) c = p[oem - 0x80];
    d432:	8f 3f       	cpi	r24, 0xFF	; 255
    d434:	91 05       	cpc	r25, r1
    d436:	09 f0       	breq	.+2      	; 0xd43a <ff_oem2uni+0x14>
    d438:	40 f4       	brcc	.+16     	; 0xd44a <ff_oem2uni+0x24>
    d43a:	88 0f       	add	r24, r24
    d43c:	99 1f       	adc	r25, r25
    d43e:	fc 01       	movw	r30, r24
    d440:	ea 55       	subi	r30, 0x5A	; 90
    d442:	f9 4f       	sbci	r31, 0xF9	; 249
    d444:	80 81       	ld	r24, Z
    d446:	91 81       	ldd	r25, Z+1	; 0x01
    d448:	08 95       	ret
WCHAR ff_oem2uni (	/* Returns Unicode character in UTF-16, zero on error */
	WCHAR	oem,	/* OEM code to be converted */
	WORD	cp		/* Code page for the conversion */
)
{
	WCHAR c = 0;
    d44a:	80 e0       	ldi	r24, 0x00	; 0
    d44c:	90 e0       	ldi	r25, 0x00	; 0
			if (oem < 0x100) c = p[oem - 0x80];
		}
	}

	return c;
}
    d44e:	08 95       	ret

0000d450 <ff_wtoupper>:

		0x0000	/* EOT */
	};


	if (uni < 0x10000) {	/* Is it in BMP? */
    d450:	61 15       	cp	r22, r1
    d452:	71 05       	cpc	r23, r1
    d454:	21 e0       	ldi	r18, 0x01	; 1
    d456:	82 07       	cpc	r24, r18
    d458:	91 05       	cpc	r25, r1
    d45a:	08 f0       	brcs	.+2      	; 0xd45e <ff_wtoupper+0xe>
    d45c:	5a c0       	rjmp	.+180    	; 0xd512 <ff_wtoupper+0xc2>
		uc = (WORD)uni;
		p = uc < 0x1000 ? cvt1 : cvt2;
    d45e:	61 15       	cp	r22, r1
    d460:	80 e1       	ldi	r24, 0x10	; 16
    d462:	78 07       	cpc	r23, r24
    d464:	18 f0       	brcs	.+6      	; 0xd46c <ff_wtoupper+0x1c>
    d466:	a8 ef       	ldi	r26, 0xF8	; 248
    d468:	b4 e0       	ldi	r27, 0x04	; 4
    d46a:	02 c0       	rjmp	.+4      	; 0xd470 <ff_wtoupper+0x20>
    d46c:	a4 eb       	ldi	r26, 0xB4	; 180
    d46e:	b5 e0       	ldi	r27, 0x05	; 5
		for (;;) {
			bc = *p++;								/* Get the block base */
    d470:	2d 91       	ld	r18, X+
    d472:	3c 91       	ld	r19, X
    d474:	11 97       	sbiw	r26, 0x01	; 1
			if (bc == 0 || uc < bc) break;			/* Not matched? */
    d476:	21 15       	cp	r18, r1
    d478:	31 05       	cpc	r19, r1
    d47a:	09 f4       	brne	.+2      	; 0xd47e <ff_wtoupper+0x2e>
    d47c:	48 c0       	rjmp	.+144    	; 0xd50e <ff_wtoupper+0xbe>
    d47e:	62 17       	cp	r22, r18
    d480:	73 07       	cpc	r23, r19
    d482:	08 f4       	brcc	.+2      	; 0xd486 <ff_wtoupper+0x36>
    d484:	44 c0       	rjmp	.+136    	; 0xd50e <ff_wtoupper+0xbe>
			nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
    d486:	14 96       	adiw	r26, 0x04	; 4
    d488:	fd 01       	movw	r30, r26
    d48a:	32 97       	sbiw	r30, 0x02	; 2
    d48c:	80 81       	ld	r24, Z
    d48e:	91 81       	ldd	r25, Z+1	; 0x01
    d490:	e9 2f       	mov	r30, r25
    d492:	ff 27       	eor	r31, r31
    d494:	99 27       	eor	r25, r25
			if (uc < bc + nc) {	/* In the block? */
    d496:	a9 01       	movw	r20, r18
    d498:	48 0f       	add	r20, r24
    d49a:	59 1f       	adc	r21, r25
    d49c:	64 17       	cp	r22, r20
    d49e:	75 07       	cpc	r23, r21
    d4a0:	70 f5       	brcc	.+92     	; 0xd4fe <ff_wtoupper+0xae>
				switch (cmd) {
    d4a2:	e9 30       	cpi	r30, 0x09	; 9
    d4a4:	f1 05       	cpc	r31, r1
    d4a6:	98 f5       	brcc	.+102    	; 0xd50e <ff_wtoupper+0xbe>
    d4a8:	ec 54       	subi	r30, 0x4C	; 76
    d4aa:	ff 4f       	sbci	r31, 0xFF	; 255
    d4ac:	0c 94 75 e8 	jmp	0x1d0ea	; 0x1d0ea <__tablejump2__>
				case 0:	uc = p[uc - bc]; break;		/* Table conversion */
    d4b0:	62 1b       	sub	r22, r18
    d4b2:	73 0b       	sbc	r23, r19
    d4b4:	fb 01       	movw	r30, r22
    d4b6:	ee 0f       	add	r30, r30
    d4b8:	ff 1f       	adc	r31, r31
    d4ba:	ea 0f       	add	r30, r26
    d4bc:	fb 1f       	adc	r31, r27
    d4be:	60 81       	ld	r22, Z
    d4c0:	71 81       	ldd	r23, Z+1	; 0x01
    d4c2:	25 c0       	rjmp	.+74     	; 0xd50e <ff_wtoupper+0xbe>
				case 1:	uc -= (uc - bc) & 1; break;	/* Case pairs */
    d4c4:	cb 01       	movw	r24, r22
    d4c6:	82 1b       	sub	r24, r18
    d4c8:	93 0b       	sbc	r25, r19
    d4ca:	81 70       	andi	r24, 0x01	; 1
    d4cc:	99 27       	eor	r25, r25
    d4ce:	68 1b       	sub	r22, r24
    d4d0:	79 0b       	sbc	r23, r25
    d4d2:	1d c0       	rjmp	.+58     	; 0xd50e <ff_wtoupper+0xbe>
				case 2: uc -= 16; break;			/* Shift -16 */
    d4d4:	60 51       	subi	r22, 0x10	; 16
    d4d6:	71 09       	sbc	r23, r1
    d4d8:	1a c0       	rjmp	.+52     	; 0xd50e <ff_wtoupper+0xbe>
				case 3:	uc -= 32; break;			/* Shift -32 */
    d4da:	60 52       	subi	r22, 0x20	; 32
    d4dc:	71 09       	sbc	r23, r1
    d4de:	17 c0       	rjmp	.+46     	; 0xd50e <ff_wtoupper+0xbe>
				case 4:	uc -= 48; break;			/* Shift -48 */
    d4e0:	60 53       	subi	r22, 0x30	; 48
    d4e2:	71 09       	sbc	r23, r1
    d4e4:	14 c0       	rjmp	.+40     	; 0xd50e <ff_wtoupper+0xbe>
				case 5:	uc -= 26; break;			/* Shift -26 */
    d4e6:	6a 51       	subi	r22, 0x1A	; 26
    d4e8:	71 09       	sbc	r23, r1
    d4ea:	11 c0       	rjmp	.+34     	; 0xd50e <ff_wtoupper+0xbe>
				case 6:	uc += 8; break;				/* Shift +8 */
    d4ec:	68 5f       	subi	r22, 0xF8	; 248
    d4ee:	7f 4f       	sbci	r23, 0xFF	; 255
    d4f0:	0e c0       	rjmp	.+28     	; 0xd50e <ff_wtoupper+0xbe>
				case 7: uc -= 80; break;			/* Shift -80 */
    d4f2:	60 55       	subi	r22, 0x50	; 80
    d4f4:	71 09       	sbc	r23, r1
    d4f6:	0b c0       	rjmp	.+22     	; 0xd50e <ff_wtoupper+0xbe>
				case 8:	uc -= 0x1C60; break;		/* Shift -0x1C60 */
    d4f8:	60 56       	subi	r22, 0x60	; 96
    d4fa:	7c 41       	sbci	r23, 0x1C	; 28
    d4fc:	08 c0       	rjmp	.+16     	; 0xd50e <ff_wtoupper+0xbe>
				}
				break;
			}
			if (cmd == 0) p += nc;	/* Skip table if needed */
    d4fe:	ef 2b       	or	r30, r31
    d500:	09 f0       	breq	.+2      	; 0xd504 <ff_wtoupper+0xb4>
    d502:	b6 cf       	rjmp	.-148    	; 0xd470 <ff_wtoupper+0x20>
    d504:	88 0f       	add	r24, r24
    d506:	99 1f       	adc	r25, r25
    d508:	a8 0f       	add	r26, r24
    d50a:	b9 1f       	adc	r27, r25
    d50c:	b1 cf       	rjmp	.-158    	; 0xd470 <ff_wtoupper+0x20>
		}
		uni = uc;
    d50e:	80 e0       	ldi	r24, 0x00	; 0
    d510:	90 e0       	ldi	r25, 0x00	; 0
	}

	return uni;
}
    d512:	08 95       	ret

0000d514 <disk_status>:

DSTATUS disk_status (
BYTE pdrv                                         /* Physical drive nmuber to identify the drive */
)
{
    switch (pdrv)
    d514:	81 11       	cpse	r24, r1
    d516:	02 c0       	rjmp	.+4      	; 0xd51c <disk_status+0x8>
    {
#ifdef DRV_MMC
        case DEV_MMC :
            return ( mmc_disk_status() );
    d518:	a1 c1       	rjmp	.+834    	; 0xd85c <mmc_disk_status>
    d51a:	08 95       	ret
#ifdef DRV_USB
        case DEV_USB :
            return ( usb_disk_status() );
#endif
    }
    return STA_NOINIT;
    d51c:	81 e0       	ldi	r24, 0x01	; 1
}
    d51e:	08 95       	ret

0000d520 <disk_initialize>:
DSTATUS disk_initialize (
BYTE pdrv                                         /* Physical drive nmuber to identify the drive */
)
{

    switch (pdrv)
    d520:	81 11       	cpse	r24, r1
    d522:	02 c0       	rjmp	.+4      	; 0xd528 <disk_initialize+0x8>
    {
#ifdef DRV_MMC
        case DEV_MMC :
            return ( mmc_disk_initialize() );
    d524:	f6 c0       	rjmp	.+492    	; 0xd712 <mmc_disk_initialize>
    d526:	08 95       	ret
#ifdef DRV_USB
        case DEV_USB :
            return ( usb_disk_initialize() );
#endif
    }
    return STA_NOINIT;
    d528:	81 e0       	ldi	r24, 0x01	; 1
}
    d52a:	08 95       	ret

0000d52c <disk_read>:
BYTE pdrv,                                        /* Physical drive nmuber to identify the drive */
BYTE *buff,                                       /* Data buffer to store read data */
LBA_t sector,                                     /* Start sector in LBA */
UINT count                                        /* Number of sectors to read */
)
{
    d52c:	0f 93       	push	r16
    d52e:	1f 93       	push	r17
    d530:	fb 01       	movw	r30, r22
    switch (pdrv)
    d532:	81 11       	cpse	r24, r1
    d534:	06 c0       	rjmp	.+12     	; 0xd542 <disk_read+0x16>
    d536:	ba 01       	movw	r22, r20
    d538:	a9 01       	movw	r20, r18
    d53a:	cf 01       	movw	r24, r30
    {
#ifdef DRV_MMC
        case DEV_MMC :
            return ( mmc_disk_read(buff, sector, count) );
    d53c:	98 01       	movw	r18, r16
    d53e:	91 d1       	rcall	.+802    	; 0xd862 <mmc_disk_read>
    d540:	02 c0       	rjmp	.+4      	; 0xd546 <disk_read+0x1a>
#ifdef DRV_USB
        case DEV_USB :
            return ( usb_disk_read(buff, sector, count) );
#endif
    }
    return RES_PARERR;
    d542:	84 e0       	ldi	r24, 0x04	; 4
    d544:	90 e0       	ldi	r25, 0x00	; 0
}
    d546:	1f 91       	pop	r17
    d548:	0f 91       	pop	r16
    d54a:	08 95       	ret

0000d54c <disk_write>:
BYTE pdrv,                                        /* Physical drive nmuber to identify the drive */
const BYTE *buff,                                 /* Data to be written */
LBA_t sector,                                     /* Start sector in LBA */
UINT count                                        /* Number of sectors to write */
)
{
    d54c:	0f 93       	push	r16
    d54e:	1f 93       	push	r17
    d550:	fb 01       	movw	r30, r22
    switch (pdrv)
    d552:	81 11       	cpse	r24, r1
    d554:	06 c0       	rjmp	.+12     	; 0xd562 <disk_write+0x16>
    d556:	ba 01       	movw	r22, r20
    d558:	a9 01       	movw	r20, r18
    d55a:	cf 01       	movw	r24, r30
    {
#ifdef DRV_MMC
        case DEV_MMC :
            return ( mmc_disk_write(buff, sector, count) );
    d55c:	98 01       	movw	r18, r16
    d55e:	e2 d1       	rcall	.+964    	; 0xd924 <mmc_disk_write>
    d560:	02 c0       	rjmp	.+4      	; 0xd566 <disk_write+0x1a>
        case DEV_USB :
            return ( usb_disk_write(buff, sector, count) );
#endif
    }

    return RES_PARERR;
    d562:	84 e0       	ldi	r24, 0x04	; 4
    d564:	90 e0       	ldi	r25, 0x00	; 0
}
    d566:	1f 91       	pop	r17
    d568:	0f 91       	pop	r16
    d56a:	08 95       	ret

0000d56c <disk_ioctl>:
DRESULT disk_ioctl (
BYTE pdrv,                                        /* Physical drive nmuber (0..) */
BYTE cmd,                                         /* Control code */
void *buff                                        /* Buffer to send/receive control data */
)
{
    d56c:	96 2f       	mov	r25, r22
    switch (pdrv)
    d56e:	81 11       	cpse	r24, r1
    d570:	04 c0       	rjmp	.+8      	; 0xd57a <disk_ioctl+0xe>
    d572:	ba 01       	movw	r22, r20
    d574:	89 2f       	mov	r24, r25
    {
#ifdef DRV_MMC
        case DEV_MMC :
            return ( mmc_disk_ioctl(cmd, buff) );
    d576:	4a c2       	rjmp	.+1172   	; 0xda0c <mmc_disk_ioctl>
    d578:	08 95       	ret
#ifdef DRV_USB
        case DEV_MMC :
            return ( usb_disk_ioctl(cmd, buff) );
#endif
    }
    return RES_PARERR;
    d57a:	84 e0       	ldi	r24, 0x04	; 4
    d57c:	90 e0       	ldi	r25, 0x00	; 0
}
    d57e:	08 95       	ret

0000d580 <xchg_spi>:
static
BYTE xchg_spi (                                   /* Returns received data */
BYTE dat                                          /* Data to be sent */
)
{
    dat = mmc_spi_TXRX(dat);
    d580:	f9 c4       	rjmp	.+2546   	; 0xdf74 <mmc_spi_TXRX>
    return dat;
}
    d582:	08 95       	ret

0000d584 <deselect>:
///@return void
MEMSPACE
static
void deselect (void)
{
    CS_HIGH();
    d584:	ce d4       	rcall	.+2460   	; 0xdf22 <mmc_spi_end>
    xchg_spi(0xFF);                               /*< Dummy clock (force DO hi-z for multiple slave SPI) */
    d586:	8f ef       	ldi	r24, 0xFF	; 255
    d588:	fb df       	rcall	.-10     	; 0xd580 <xchg_spi>
    xchg_spi(0xFF);                               /*< Dummy clock (force DO hi-z for multiple slave SPI) */
    d58a:	8f ef       	ldi	r24, 0xFF	; 255
    d58c:	f9 cf       	rjmp	.-14     	; 0xd580 <xchg_spi>
    d58e:	08 95       	ret

0000d590 <rcvr_datablock>:
    d590:	0f 93       	push	r16
static
int rcvr_datablock (
BYTE *buff,                                       /*< Data buffer to store received data */
UINT btr                                          /*< Byte count (must be multiple of 4) */
)
{
    d592:	1f 93       	push	r17
    d594:	cf 93       	push	r28
    d596:	df 93       	push	r29
    d598:	ec 01       	movw	r28, r24
    d59a:	8b 01       	movw	r16, r22
    BYTE token;

    mmc_set_ms_timeout(1000);
    d59c:	88 ee       	ldi	r24, 0xE8	; 232
    d59e:	93 e0       	ldi	r25, 0x03	; 3
    d5a0:	ec d4       	rcall	.+2520   	; 0xdf7a <mmc_set_ms_timeout>
static
BYTE xchg_spi (                                   /* Returns received data */
BYTE dat                                          /* Data to be sent */
)
{
    dat = mmc_spi_TXRX(dat);
    d5a2:	8f ef       	ldi	r24, 0xFF	; 255
    d5a4:	e7 d4       	rcall	.+2510   	; 0xdf74 <mmc_spi_TXRX>

    mmc_set_ms_timeout(1000);
    do                                            /* Wait for data packet in timeout of 400ms */
    {
        token = xchg_spi(0xFF);
    } while ((token == 0xFF) && !mmc_test_timeout());
    d5a6:	8f 3f       	cpi	r24, 0xFF	; 255
    d5a8:	31 f4       	brne	.+12     	; 0xd5b6 <rcvr_datablock+0x26>
    d5aa:	ee d4       	rcall	.+2524   	; 0xdf88 <mmc_test_timeout>
    d5ac:	89 2b       	or	r24, r25
    d5ae:	c9 f3       	breq	.-14     	; 0xd5a2 <rcvr_datablock+0x12>
    if (token != 0xFE) return 0;                  /* If not valid data token, retutn with error */
    d5b0:	80 e0       	ldi	r24, 0x00	; 0
    d5b2:	90 e0       	ldi	r25, 0x00	; 0
    d5b4:	0b c0       	rjmp	.+22     	; 0xd5cc <rcvr_datablock+0x3c>
    d5b6:	8e 3f       	cpi	r24, 0xFE	; 254
void rcvr_spi_multi (
BYTE *p,                                          /* Data read buffer */
UINT cnt                                          /* Size of data block */
)
{
    mmc_spi_RX_buffer((uint8_t *)p, cnt);
    d5b8:	d9 f7       	brne	.-10     	; 0xd5b0 <rcvr_datablock+0x20>
    d5ba:	b8 01       	movw	r22, r16
    d5bc:	ce 01       	movw	r24, r28
        token = xchg_spi(0xFF);
    } while ((token == 0xFF) && !mmc_test_timeout());
    if (token != 0xFE) return 0;                  /* If not valid data token, retutn with error */

    rcvr_spi_multi(buff, btr);                    /* Receive the data block into buffer */
    xchg_spi(0xFF);                               /* Discard CRC */
    d5be:	d7 d4       	rcall	.+2478   	; 0xdf6e <mmc_spi_RX_buffer>
    d5c0:	8f ef       	ldi	r24, 0xFF	; 255
    d5c2:	de df       	rcall	.-68     	; 0xd580 <xchg_spi>
    xchg_spi(0xFF);
    d5c4:	8f ef       	ldi	r24, 0xFF	; 255
    d5c6:	dc df       	rcall	.-72     	; 0xd580 <xchg_spi>
    d5c8:	81 e0       	ldi	r24, 0x01	; 1
    d5ca:	90 e0       	ldi	r25, 0x00	; 0
    d5cc:	df 91       	pop	r29

    return 1;                                     /* Return with success */
}
    d5ce:	cf 91       	pop	r28
    d5d0:	1f 91       	pop	r17
    d5d2:	0f 91       	pop	r16
    d5d4:	08 95       	ret

0000d5d6 <wait_ready>:
    d5d6:	cf 93       	push	r28
int wait_ready (
UINT wt                                           /*< Timeout [ms] */
)
{
    BYTE d;
    mmc_set_ms_timeout(wt);
    d5d8:	d0 d4       	rcall	.+2464   	; 0xdf7a <mmc_set_ms_timeout>
static
BYTE xchg_spi (                                   /* Returns received data */
BYTE dat                                          /* Data to be sent */
)
{
    dat = mmc_spi_TXRX(dat);
    d5da:	8f ef       	ldi	r24, 0xFF	; 255
    d5dc:	cb d4       	rcall	.+2454   	; 0xdf74 <mmc_spi_TXRX>
    d5de:	c8 2f       	mov	r28, r24
{
    BYTE d;
    mmc_set_ms_timeout(wt);
    do
    d = xchg_spi(0xFF);
    while (d != 0xFF && !mmc_test_timeout());
    d5e0:	8f 3f       	cpi	r24, 0xFF	; 255
    d5e2:	19 f0       	breq	.+6      	; 0xd5ea <wait_ready+0x14>
    d5e4:	d1 d4       	rcall	.+2466   	; 0xdf88 <mmc_test_timeout>
    d5e6:	89 2b       	or	r24, r25
    d5e8:	c1 f3       	breq	.-16     	; 0xd5da <wait_ready+0x4>

    return (d == 0xFF) ? 1 : 0;
    d5ea:	81 e0       	ldi	r24, 0x01	; 1
    d5ec:	90 e0       	ldi	r25, 0x00	; 0
    d5ee:	cf 3f       	cpi	r28, 0xFF	; 255
    d5f0:	11 f0       	breq	.+4      	; 0xd5f6 <wait_ready+0x20>
    d5f2:	80 e0       	ldi	r24, 0x00	; 0
    d5f4:	90 e0       	ldi	r25, 0x00	; 0
}
    d5f6:	cf 91       	pop	r28
    d5f8:	08 95       	ret

0000d5fa <select>:
///@return 1 Successful
///@return 0 Timeout
MEMSPACE
static
int select (void)
{
    d5fa:	cf 93       	push	r28
    d5fc:	df 93       	push	r29
    d5fe:	00 d0       	rcall	.+0      	; 0xd600 <select+0x6>
    d600:	1f 92       	push	r1
    CS_LOW();
    d602:	82 d4       	rcall	.+2308   	; 0xdf08 <mmc_spi_begin>
    xchg_spi(0xFF);                               /* Dummy clock (force DO enabled) */
    d604:	8f ef       	ldi	r24, 0xFF	; 255
    d606:	bc df       	rcall	.-136    	; 0xd580 <xchg_spi>

    if (wait_ready(1000))
    d608:	88 ee       	ldi	r24, 0xE8	; 232
    d60a:	93 e0       	ldi	r25, 0x03	; 3
    d60c:	e4 df       	rcall	.-56     	; 0xd5d6 <wait_ready>
    d60e:	ec 01       	movw	r28, r24
    d610:	89 2b       	or	r24, r25
    d612:	61 f4       	brne	.+24     	; 0xd62c <select+0x32>
        return 1;                                 /* OK */

    printf("select failed!\n");
    d614:	8b e6       	ldi	r24, 0x6B	; 107
    d616:	97 e0       	ldi	r25, 0x07	; 7
    d618:	a0 e0       	ldi	r26, 0x00	; 0
    d61a:	ed b7       	in	r30, 0x3d	; 61
    d61c:	fe b7       	in	r31, 0x3e	; 62
    d61e:	81 83       	std	Z+1, r24	; 0x01
    d620:	92 83       	std	Z+2, r25	; 0x02
    d622:	a3 83       	std	Z+3, r26	; 0x03
    d624:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>

    deselect();
    d628:	ad df       	rcall	.-166    	; 0xd584 <deselect>
    d62a:	02 c0       	rjmp	.+4      	; 0xd630 <select+0x36>
{
    CS_LOW();
    xchg_spi(0xFF);                               /* Dummy clock (force DO enabled) */

    if (wait_ready(1000))
        return 1;                                 /* OK */
    d62c:	c1 e0       	ldi	r28, 0x01	; 1
    d62e:	d0 e0       	ldi	r29, 0x00	; 0

    printf("select failed!\n");

    deselect();
    return 0;                                     /* Timeout */
}
    d630:	ce 01       	movw	r24, r28
    d632:	cd b7       	in	r28, 0x3d	; 61
    d634:	de b7       	in	r29, 0x3e	; 62
    d636:	23 96       	adiw	r28, 0x03	; 3
    d638:	e2 e0       	ldi	r30, 0x02	; 2
    d63a:	0c 94 d0 e8 	jmp	0x1d1a0	; 0x1d1a0 <__epilogue_restores__+0x20>

0000d63e <send_cmd>:
static
BYTE send_cmd (
BYTE cmd,                                         /*< Command index */
DWORD arg                                         /*< Argument */
)
{
    d63e:	ff 92       	push	r15
    d640:	0f 93       	push	r16
    d642:	1f 93       	push	r17
    d644:	cf 93       	push	r28
    d646:	df 93       	push	r29
    d648:	c8 2f       	mov	r28, r24
    d64a:	d4 2f       	mov	r29, r20
    d64c:	15 2f       	mov	r17, r21
    d64e:	06 2f       	mov	r16, r22
    d650:	f7 2e       	mov	r15, r23
    BYTE n, res;

    if (cmd & 0x80)                               /* ACMD<n> is the command sequense of CMD55-CMD<n> */
    d652:	87 ff       	sbrs	r24, 7
    d654:	08 c0       	rjmp	.+16     	; 0xd666 <send_cmd+0x28>
    {
        cmd &= 0x7F;
        res = send_cmd(CMD55, 0);
    d656:	40 e0       	ldi	r20, 0x00	; 0
    d658:	50 e0       	ldi	r21, 0x00	; 0
    d65a:	ba 01       	movw	r22, r20
    d65c:	87 e3       	ldi	r24, 0x37	; 55
    d65e:	ef df       	rcall	.-34     	; 0xd63e <send_cmd>
        if (res > 1) return res;
    d660:	82 30       	cpi	r24, 0x02	; 2
    d662:	58 f5       	brcc	.+86     	; 0xd6ba <send_cmd+0x7c>
{
    BYTE n, res;

    if (cmd & 0x80)                               /* ACMD<n> is the command sequense of CMD55-CMD<n> */
    {
        cmd &= 0x7F;
    d664:	cf 77       	andi	r28, 0x7F	; 127
        res = send_cmd(CMD55, 0);
        if (res > 1) return res;
    }

/* Select the card and wait for ready except to stop multiple block read */
    if (cmd != CMD12)
    d666:	cc 30       	cpi	r28, 0x0C	; 12
    d668:	71 f4       	brne	.+28     	; 0xd686 <send_cmd+0x48>
        deselect();
        if (!select()) return 0xFF;
    }

/* Send command packet */
    xchg_spi(0x40 | cmd);                         /* Start + Command index */
    d66a:	8c 2f       	mov	r24, r28
    d66c:	80 64       	ori	r24, 0x40	; 64
    d66e:	88 df       	rcall	.-240    	; 0xd580 <xchg_spi>
    xchg_spi((BYTE)(arg >> 24));                  /* Argument[31..24] */
    d670:	8f 2d       	mov	r24, r15
    d672:	86 df       	rcall	.-244    	; 0xd580 <xchg_spi>
    xchg_spi((BYTE)(arg >> 16));                  /* Argument[23..16] */
    d674:	80 2f       	mov	r24, r16
    d676:	84 df       	rcall	.-248    	; 0xd580 <xchg_spi>
    xchg_spi((BYTE)(arg >> 8));                   /* Argument[15..8] */
    d678:	81 2f       	mov	r24, r17
    d67a:	82 df       	rcall	.-252    	; 0xd580 <xchg_spi>
    d67c:	8d 2f       	mov	r24, r29
    xchg_spi((BYTE)arg);                          /* Argument[7..0] */
    d67e:	80 df       	rcall	.-256    	; 0xd580 <xchg_spi>
    n = 0x01;                                     /* Dummy CRC + Stop */
    if (cmd == CMD0) n = 0x95;                    /* Valid CRC for CMD0(0) + Stop */
    d680:	cc 23       	and	r28, r28
    d682:	c9 f0       	breq	.+50     	; 0xd6b6 <send_cmd+0x78>
    d684:	06 c0       	rjmp	.+12     	; 0xd692 <send_cmd+0x54>
    }

/* Select the card and wait for ready except to stop multiple block read */
    if (cmd != CMD12)
    {
        deselect();
    d686:	7e df       	rcall	.-260    	; 0xd584 <deselect>
    d688:	b8 df       	rcall	.-144    	; 0xd5fa <select>
        if (!select()) return 0xFF;
    d68a:	89 2b       	or	r24, r25
    d68c:	71 f7       	brne	.-36     	; 0xd66a <send_cmd+0x2c>
    d68e:	8f ef       	ldi	r24, 0xFF	; 255
    d690:	14 c0       	rjmp	.+40     	; 0xd6ba <send_cmd+0x7c>
    d692:	c8 30       	cpi	r28, 0x08	; 8
    xchg_spi((BYTE)(arg >> 16));                  /* Argument[23..16] */
    xchg_spi((BYTE)(arg >> 8));                   /* Argument[15..8] */
    xchg_spi((BYTE)arg);                          /* Argument[7..0] */
    n = 0x01;                                     /* Dummy CRC + Stop */
    if (cmd == CMD0) n = 0x95;                    /* Valid CRC for CMD0(0) + Stop */
    if (cmd == CMD8) n = 0x87;                    /* Valid CRC for CMD8(0x1AA) Stop */
    d694:	11 f4       	brne	.+4      	; 0xd69a <send_cmd+0x5c>
    d696:	87 e8       	ldi	r24, 0x87	; 135
    d698:	01 c0       	rjmp	.+2      	; 0xd69c <send_cmd+0x5e>

    xchg_spi(n);
    d69a:	81 e0       	ldi	r24, 0x01	; 1
    d69c:	71 df       	rcall	.-286    	; 0xd580 <xchg_spi>

/* Receive command response */
    if (cmd == CMD12) xchg_spi(0xFF);             /* Skip a stuff byte when stop reading */
    d69e:	cc 30       	cpi	r28, 0x0C	; 12
    d6a0:	11 f4       	brne	.+4      	; 0xd6a6 <send_cmd+0x68>
    d6a2:	8f ef       	ldi	r24, 0xFF	; 255
    d6a4:	6d df       	rcall	.-294    	; 0xd580 <xchg_spi>
    d6a6:	ca e0       	ldi	r28, 0x0A	; 10
    xchg_spi((BYTE)(arg >> 16));                  /* Argument[23..16] */
    xchg_spi((BYTE)(arg >> 8));                   /* Argument[15..8] */
    xchg_spi((BYTE)arg);                          /* Argument[7..0] */
    n = 0x01;                                     /* Dummy CRC + Stop */
    if (cmd == CMD0) n = 0x95;                    /* Valid CRC for CMD0(0) + Stop */
    if (cmd == CMD8) n = 0x87;                    /* Valid CRC for CMD8(0x1AA) Stop */
    d6a8:	8f ef       	ldi	r24, 0xFF	; 255
static
BYTE xchg_spi (                                   /* Returns received data */
BYTE dat                                          /* Data to be sent */
)
{
    dat = mmc_spi_TXRX(dat);
    d6aa:	64 d4       	rcall	.+2248   	; 0xdf74 <mmc_spi_TXRX>
    d6ac:	87 ff       	sbrs	r24, 7
    d6ae:	05 c0       	rjmp	.+10     	; 0xd6ba <send_cmd+0x7c>
    n = 10;                                       /* Wait for a valid response in timeout of 10 attempts */
    do
    {
        res = xchg_spi(0xFF);
    }
    while ((res & 0x80) && --n);
    d6b0:	c1 50       	subi	r28, 0x01	; 1
    d6b2:	d1 f7       	brne	.-12     	; 0xd6a8 <send_cmd+0x6a>
    d6b4:	02 c0       	rjmp	.+4      	; 0xd6ba <send_cmd+0x7c>
    d6b6:	85 e9       	ldi	r24, 0x95	; 149
    d6b8:	f5 cf       	rjmp	.-22     	; 0xd6a4 <send_cmd+0x66>
    xchg_spi((BYTE)arg);                          /* Argument[7..0] */
    n = 0x01;                                     /* Dummy CRC + Stop */
    if (cmd == CMD0) n = 0x95;                    /* Valid CRC for CMD0(0) + Stop */
    if (cmd == CMD8) n = 0x87;                    /* Valid CRC for CMD8(0x1AA) Stop */

    xchg_spi(n);
    d6ba:	cd b7       	in	r28, 0x3d	; 61
    d6bc:	de b7       	in	r29, 0x3e	; 62
        res = xchg_spi(0xFF);
    }
    while ((res & 0x80) && --n);

    return res;                                   /* Return with the response value */
}
    d6be:	e5 e0       	ldi	r30, 0x05	; 5
    d6c0:	0c 94 cd e8 	jmp	0x1d19a	; 0x1d19a <__epilogue_restores__+0x1a>

0000d6c4 <xmit_datablock>:
    d6c4:	0f 93       	push	r16
    d6c6:	1f 93       	push	r17
static
int xmit_datablock (
const BYTE *buff,                                 /*< 512 byte data block to be transmitted */
BYTE token                                        /*< Data/Stop token */
)
{
    d6c8:	cf 93       	push	r28
    d6ca:	8c 01       	movw	r16, r24
    d6cc:	c6 2f       	mov	r28, r22
    BYTE resp;

    if (!wait_ready(1000)) return 0;
    d6ce:	88 ee       	ldi	r24, 0xE8	; 232
    d6d0:	93 e0       	ldi	r25, 0x03	; 3
    d6d2:	81 df       	rcall	.-254    	; 0xd5d6 <wait_ready>
    d6d4:	00 97       	sbiw	r24, 0x00	; 0
    d6d6:	c9 f0       	breq	.+50     	; 0xd70a <xmit_datablock+0x46>

    xchg_spi(token);                              /* Xmit data token */
    d6d8:	8c 2f       	mov	r24, r28
    d6da:	52 df       	rcall	.-348    	; 0xd580 <xchg_spi>
    if (token != 0xFD)                            /* Is data token */
    d6dc:	cd 3f       	cpi	r28, 0xFD	; 253
    d6de:	99 f0       	breq	.+38     	; 0xd706 <xmit_datablock+0x42>
void xmit_spi_multi (
const BYTE *p,                                    /* Data block to be sent */
UINT cnt                                          /* Size of data block */
)
{
    mmc_spi_TX_buffer((uint8_t *)p, cnt);
    d6e0:	60 e0       	ldi	r22, 0x00	; 0
    d6e2:	72 e0       	ldi	r23, 0x02	; 2
    d6e4:	c8 01       	movw	r24, r16
    xchg_spi(token);                              /* Xmit data token */
    if (token != 0xFD)                            /* Is data token */
    {
        xmit_spi_multi(buff, 512);                /* Xmit the data block to the MMC */

        xchg_spi(0xFF);                           /* CRC (Dummy) */
    d6e6:	40 d4       	rcall	.+2176   	; 0xdf68 <mmc_spi_TX_buffer>
    d6e8:	8f ef       	ldi	r24, 0xFF	; 255
        xchg_spi(0xFF);
    d6ea:	4a df       	rcall	.-364    	; 0xd580 <xchg_spi>
    d6ec:	8f ef       	ldi	r24, 0xFF	; 255
    d6ee:	48 df       	rcall	.-368    	; 0xd580 <xchg_spi>
static
BYTE xchg_spi (                                   /* Returns received data */
BYTE dat                                          /* Data to be sent */
)
{
    dat = mmc_spi_TXRX(dat);
    d6f0:	8f ef       	ldi	r24, 0xFF	; 255
    d6f2:	40 d4       	rcall	.+2176   	; 0xdf74 <mmc_spi_TXRX>
    d6f4:	8f 71       	andi	r24, 0x1F	; 31
BYTE token                                        /*< Data/Stop token */
)
{
    BYTE resp;

    if (!wait_ready(1000)) return 0;
    d6f6:	31 e0       	ldi	r19, 0x01	; 1
    d6f8:	20 e0       	ldi	r18, 0x00	; 0
    d6fa:	85 30       	cpi	r24, 0x05	; 5
    d6fc:	09 f0       	breq	.+2      	; 0xd700 <xmit_datablock+0x3c>
    d6fe:	30 e0       	ldi	r19, 0x00	; 0
    d700:	83 2f       	mov	r24, r19
    d702:	92 2f       	mov	r25, r18
    d704:	02 c0       	rjmp	.+4      	; 0xd70a <xmit_datablock+0x46>
    d706:	81 e0       	ldi	r24, 0x01	; 1
        resp = xchg_spi(0xFF);                    /* Reveive data response */
        if ((resp & 0x1F) != 0x05)                /* If not accepted, return with error */
            return 0;
    }

    return 1;
    d708:	90 e0       	ldi	r25, 0x00	; 0
    d70a:	cf 91       	pop	r28
}
    d70c:	1f 91       	pop	r17
    d70e:	0f 91       	pop	r16
    d710:	08 95       	ret

0000d712 <mmc_disk_initialize>:
    d712:	a4 e0       	ldi	r26, 0x04	; 4

///@brief Initialize Disk Drive
///@return Stat
MEMSPACE
DSTATUS mmc_disk_initialize (void)
{
    d714:	b0 e0       	ldi	r27, 0x00	; 0
    d716:	ef e8       	ldi	r30, 0x8F	; 143
    d718:	fb e6       	ldi	r31, 0x6B	; 107
    d71a:	0c 94 ae e8 	jmp	0x1d15c	; 0x1d15c <__prologue_saves__+0x14>
void power_off (void)
{
/* Disable SPI function */
/* De-configure MOSI/MISO/SCLK/CS pins (set hi-z) */
/* Turn socket power off (nothing to do if no power controls) */
    mmc_power_off();
    d71e:	59 d4       	rcall	.+2226   	; 0xdfd2 <mmc_power_off>
DSTATUS mmc_disk_initialize (void)
{
    BYTE n, cmd, ty, ocr[4];

    power_off();                                  /* Turn off the socket power to reset the card */
    delayms(100);                                 /* Wait for 100ms */
    d720:	64 e6       	ldi	r22, 0x64	; 100
    d722:	70 e0       	ldi	r23, 0x00	; 0
    d724:	80 e0       	ldi	r24, 0x00	; 0
    d726:	90 e0       	ldi	r25, 0x00	; 0
    d728:	0e 94 d2 28 	call	0x51a4	; 0x51a4 <delayms>

    if (Stat & STA_NODISK) return Stat;           /* No card in the socket? */
    d72c:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <Stat>
    d730:	81 fd       	sbrc	r24, 1
void power_on (void)
{
/* Turn socket power on and wait for 10ms+ (nothing to do if no power controls) */
/* Configure MOSI/MISO/SCLK/CS pins */
/* Enable SPI module in SPI mode 0 */
    mmc_power_on();
    d732:	8e c0       	rjmp	.+284    	; 0xd850 <mmc_disk_initialize+0x13e>
    delayms(100);                                 /* Wait for 100ms */

    if (Stat & STA_NODISK) return Stat;           /* No card in the socket? */
    power_on();                                   /* Turn on the socket power */

    FCLK_SLOW();
    d734:	4d d4       	rcall	.+2202   	; 0xdfd0 <mmc_power_on>
    d736:	f9 d3       	rcall	.+2034   	; 0xdf2a <mmc_slow>

    for (n = 10; n; n--) xchg_spi(0xFF);          /* 80 dummy clocks */
    d738:	1a e0       	ldi	r17, 0x0A	; 10
    d73a:	8f ef       	ldi	r24, 0xFF	; 255
    d73c:	21 df       	rcall	.-446    	; 0xd580 <xchg_spi>
    d73e:	11 50       	subi	r17, 0x01	; 1
    d740:	e1 f7       	brne	.-8      	; 0xd73a <mmc_disk_initialize+0x28>

    ty = 0;
    if (send_cmd(CMD0, 0) == 1)                   /* Enter Idle state */
    d742:	40 e0       	ldi	r20, 0x00	; 0
    d744:	50 e0       	ldi	r21, 0x00	; 0
    d746:	ba 01       	movw	r22, r20
    d748:	80 e0       	ldi	r24, 0x00	; 0
    d74a:	79 df       	rcall	.-270    	; 0xd63e <send_cmd>
    d74c:	81 30       	cpi	r24, 0x01	; 1
    d74e:	09 f0       	breq	.+2      	; 0xd752 <mmc_disk_initialize+0x40>
    {
        mmc_set_ms_timeout(2000);                 /* Initialization timeout of 1000 msec */
    d750:	6f c0       	rjmp	.+222    	; 0xd830 <mmc_disk_initialize+0x11e>
    d752:	80 ed       	ldi	r24, 0xD0	; 208
    d754:	97 e0       	ldi	r25, 0x07	; 7
        if (send_cmd(CMD8, 0x1AA) == 1)           /* SDv2? */
    d756:	11 d4       	rcall	.+2082   	; 0xdf7a <mmc_set_ms_timeout>
    d758:	4a ea       	ldi	r20, 0xAA	; 170
    d75a:	51 e0       	ldi	r21, 0x01	; 1
    d75c:	60 e0       	ldi	r22, 0x00	; 0
    d75e:	70 e0       	ldi	r23, 0x00	; 0
    d760:	88 e0       	ldi	r24, 0x08	; 8
    d762:	6d df       	rcall	.-294    	; 0xd63e <send_cmd>
    d764:	81 30       	cpi	r24, 0x01	; 1
    d766:	09 f0       	breq	.+2      	; 0xd76a <mmc_disk_initialize+0x58>
    d768:	3d c0       	rjmp	.+122    	; 0xd7e4 <mmc_disk_initialize+0xd2>
    d76a:	8e 01       	movw	r16, r28
    d76c:	0f 5f       	subi	r16, 0xFF	; 255
    d76e:	1f 4f       	sbci	r17, 0xFF	; 255
    d770:	6e 01       	movw	r12, r28
    d772:	85 e0       	ldi	r24, 0x05	; 5
    d774:	c8 0e       	add	r12, r24
    d776:	d1 1c       	adc	r13, r1
static
BYTE xchg_spi (                                   /* Returns received data */
BYTE dat                                          /* Data to be sent */
)
{
    dat = mmc_spi_TXRX(dat);
    d778:	78 01       	movw	r14, r16
    d77a:	8f ef       	ldi	r24, 0xFF	; 255
    d77c:	fb d3       	rcall	.+2038   	; 0xdf74 <mmc_spi_TXRX>
    {
        mmc_set_ms_timeout(2000);                 /* Initialization timeout of 1000 msec */
        if (send_cmd(CMD8, 0x1AA) == 1)           /* SDv2? */
        {
            for (n = 0; n < 4; n++)
                ocr[n] = xchg_spi(0xFF);          /* Get trailing return value of R7 resp */
    d77e:	f7 01       	movw	r30, r14
    d780:	81 93       	st	Z+, r24
    d782:	7f 01       	movw	r14, r30
    if (send_cmd(CMD0, 0) == 1)                   /* Enter Idle state */
    {
        mmc_set_ms_timeout(2000);                 /* Initialization timeout of 1000 msec */
        if (send_cmd(CMD8, 0x1AA) == 1)           /* SDv2? */
        {
            for (n = 0; n < 4; n++)
    d784:	ce 16       	cp	r12, r30
    d786:	df 06       	cpc	r13, r31
    d788:	c1 f7       	brne	.-16     	; 0xd77a <mmc_disk_initialize+0x68>
                ocr[n] = xchg_spi(0xFF);          /* Get trailing return value of R7 resp */
            if (ocr[2] == 0x01 && ocr[3] == 0xAA) /* The card can work at vdd range of 2.7-3.6V */
    d78a:	8b 81       	ldd	r24, Y+3	; 0x03
    d78c:	81 30       	cpi	r24, 0x01	; 1
    d78e:	09 f0       	breq	.+2      	; 0xd792 <mmc_disk_initialize+0x80>
    d790:	4f c0       	rjmp	.+158    	; 0xd830 <mmc_disk_initialize+0x11e>
    d792:	8c 81       	ldd	r24, Y+4	; 0x04
    d794:	8a 3a       	cpi	r24, 0xAA	; 170
    d796:	09 f0       	breq	.+2      	; 0xd79a <mmc_disk_initialize+0x88>
            {
/* Wait for leaving idle state (ACMD41 with HCS bit) */
                while (!mmc_test_timeout() && send_cmd(ACMD41, 1UL << 30))
    d798:	4b c0       	rjmp	.+150    	; 0xd830 <mmc_disk_initialize+0x11e>
    d79a:	f6 d3       	rcall	.+2028   	; 0xdf88 <mmc_test_timeout>
    d79c:	89 2b       	or	r24, r25
    d79e:	29 f0       	breq	.+10     	; 0xd7aa <mmc_disk_initialize+0x98>
                    ;
/* Check CCS bit in the OCR */
                if (!mmc_test_timeout() && send_cmd(CMD58, 0) == 0)
    d7a0:	f3 d3       	rcall	.+2022   	; 0xdf88 <mmc_test_timeout>
    d7a2:	89 2b       	or	r24, r25
    d7a4:	09 f0       	breq	.+2      	; 0xd7a8 <mmc_disk_initialize+0x96>
    d7a6:	44 c0       	rjmp	.+136    	; 0xd830 <mmc_disk_initialize+0x11e>
    d7a8:	09 c0       	rjmp	.+18     	; 0xd7bc <mmc_disk_initialize+0xaa>
            for (n = 0; n < 4; n++)
                ocr[n] = xchg_spi(0xFF);          /* Get trailing return value of R7 resp */
            if (ocr[2] == 0x01 && ocr[3] == 0xAA) /* The card can work at vdd range of 2.7-3.6V */
            {
/* Wait for leaving idle state (ACMD41 with HCS bit) */
                while (!mmc_test_timeout() && send_cmd(ACMD41, 1UL << 30))
    d7aa:	40 e0       	ldi	r20, 0x00	; 0
    d7ac:	50 e0       	ldi	r21, 0x00	; 0
    d7ae:	60 e0       	ldi	r22, 0x00	; 0
    d7b0:	70 e4       	ldi	r23, 0x40	; 64
    d7b2:	89 ea       	ldi	r24, 0xA9	; 169
    d7b4:	44 df       	rcall	.-376    	; 0xd63e <send_cmd>
    d7b6:	81 11       	cpse	r24, r1
    d7b8:	f0 cf       	rjmp	.-32     	; 0xd79a <mmc_disk_initialize+0x88>
                    ;
/* Check CCS bit in the OCR */
                if (!mmc_test_timeout() && send_cmd(CMD58, 0) == 0)
    d7ba:	f2 cf       	rjmp	.-28     	; 0xd7a0 <mmc_disk_initialize+0x8e>
    d7bc:	40 e0       	ldi	r20, 0x00	; 0
    d7be:	50 e0       	ldi	r21, 0x00	; 0
    d7c0:	ba 01       	movw	r22, r20
    d7c2:	8a e3       	ldi	r24, 0x3A	; 58
    d7c4:	3c df       	rcall	.-392    	; 0xd63e <send_cmd>
    d7c6:	81 11       	cpse	r24, r1
    d7c8:	33 c0       	rjmp	.+102    	; 0xd830 <mmc_disk_initialize+0x11e>
static
BYTE xchg_spi (                                   /* Returns received data */
BYTE dat                                          /* Data to be sent */
)
{
    dat = mmc_spi_TXRX(dat);
    d7ca:	8f ef       	ldi	r24, 0xFF	; 255
    d7cc:	d3 d3       	rcall	.+1958   	; 0xdf74 <mmc_spi_TXRX>
    d7ce:	f8 01       	movw	r30, r16
                while (!mmc_test_timeout() && send_cmd(ACMD41, 1UL << 30))
                    ;
/* Check CCS bit in the OCR */
                if (!mmc_test_timeout() && send_cmd(CMD58, 0) == 0)
                {
                    for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
    d7d0:	81 93       	st	Z+, r24
    d7d2:	8f 01       	movw	r16, r30
    d7d4:	ce 16       	cp	r12, r30
    d7d6:	df 06       	cpc	r13, r31
    d7d8:	c1 f7       	brne	.-16     	; 0xd7ca <mmc_disk_initialize+0xb8>
/* Check if the card is SDv2 */
                    ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
    d7da:	89 81       	ldd	r24, Y+1	; 0x01
    d7dc:	86 fd       	sbrc	r24, 6
    d7de:	2a c0       	rjmp	.+84     	; 0xd834 <mmc_disk_initialize+0x122>
    d7e0:	14 e0       	ldi	r17, 0x04	; 4
    d7e2:	29 c0       	rjmp	.+82     	; 0xd836 <mmc_disk_initialize+0x124>
                }
            }
        }
        else
        {                                         /* SDv1 or MMCv3 */
            mmc_set_ms_timeout(2000);             /* Initialization timeout of 2000 msec */
    d7e4:	80 ed       	ldi	r24, 0xD0	; 208
    d7e6:	97 e0       	ldi	r25, 0x07	; 7
    d7e8:	c8 d3       	rcall	.+1936   	; 0xdf7a <mmc_set_ms_timeout>
            if (send_cmd(ACMD41, 0) <= 1)
    d7ea:	40 e0       	ldi	r20, 0x00	; 0
    d7ec:	50 e0       	ldi	r21, 0x00	; 0
    d7ee:	ba 01       	movw	r22, r20
    d7f0:	89 ea       	ldi	r24, 0xA9	; 169
    d7f2:	25 df       	rcall	.-438    	; 0xd63e <send_cmd>
    d7f4:	82 30       	cpi	r24, 0x02	; 2
    d7f6:	18 f0       	brcs	.+6      	; 0xd7fe <mmc_disk_initialize+0xec>
            {
                ty = CT_SD1; cmd = ACMD41;        /* SDv1 */
            }
            else
            {
                ty = CT_MMC; cmd = CMD1;          /* MMCv3 */
    d7f8:	11 e0       	ldi	r17, 0x01	; 1
    d7fa:	01 e0       	ldi	r16, 0x01	; 1
        else
        {                                         /* SDv1 or MMCv3 */
            mmc_set_ms_timeout(2000);             /* Initialization timeout of 2000 msec */
            if (send_cmd(ACMD41, 0) <= 1)
            {
                ty = CT_SD1; cmd = ACMD41;        /* SDv1 */
    d7fc:	02 c0       	rjmp	.+4      	; 0xd802 <mmc_disk_initialize+0xf0>
    d7fe:	12 e0       	ldi	r17, 0x02	; 2
            else
            {
                ty = CT_MMC; cmd = CMD1;          /* MMCv3 */
            }
/* Wait for leaving idle state */
            while (!mmc_test_timeout() && send_cmd(cmd, 0))
    d800:	09 ea       	ldi	r16, 0xA9	; 169
    d802:	c2 d3       	rcall	.+1924   	; 0xdf88 <mmc_test_timeout>
    d804:	89 2b       	or	r24, r25
    d806:	21 f0       	breq	.+8      	; 0xd810 <mmc_disk_initialize+0xfe>
                ;
/* Set R/W block length to 512 */
            if (mmc_test_timeout() || send_cmd(CMD16, 512) != 0)
    d808:	bf d3       	rcall	.+1918   	; 0xdf88 <mmc_test_timeout>
    d80a:	89 2b       	or	r24, r25
    d80c:	89 f4       	brne	.+34     	; 0xd830 <mmc_disk_initialize+0x11e>
    d80e:	08 c0       	rjmp	.+16     	; 0xd820 <mmc_disk_initialize+0x10e>
            else
            {
                ty = CT_MMC; cmd = CMD1;          /* MMCv3 */
            }
/* Wait for leaving idle state */
            while (!mmc_test_timeout() && send_cmd(cmd, 0))
    d810:	40 e0       	ldi	r20, 0x00	; 0
    d812:	50 e0       	ldi	r21, 0x00	; 0
    d814:	ba 01       	movw	r22, r20
    d816:	80 2f       	mov	r24, r16
    d818:	12 df       	rcall	.-476    	; 0xd63e <send_cmd>
    d81a:	81 11       	cpse	r24, r1
    d81c:	f2 cf       	rjmp	.-28     	; 0xd802 <mmc_disk_initialize+0xf0>
    d81e:	f4 cf       	rjmp	.-24     	; 0xd808 <mmc_disk_initialize+0xf6>
                ;
/* Set R/W block length to 512 */
            if (mmc_test_timeout() || send_cmd(CMD16, 512) != 0)
    d820:	40 e0       	ldi	r20, 0x00	; 0
    d822:	52 e0       	ldi	r21, 0x02	; 2
    d824:	60 e0       	ldi	r22, 0x00	; 0
    d826:	70 e0       	ldi	r23, 0x00	; 0
    d828:	80 e1       	ldi	r24, 0x10	; 16
    d82a:	09 df       	rcall	.-494    	; 0xd63e <send_cmd>
    d82c:	88 23       	and	r24, r24
                ty = 0;
    d82e:	19 f0       	breq	.+6      	; 0xd836 <mmc_disk_initialize+0x124>
    d830:	10 e0       	ldi	r17, 0x00	; 0
/* Check CCS bit in the OCR */
                if (!mmc_test_timeout() && send_cmd(CMD58, 0) == 0)
                {
                    for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
/* Check if the card is SDv2 */
                    ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
    d832:	01 c0       	rjmp	.+2      	; 0xd836 <mmc_disk_initialize+0x124>
            if (mmc_test_timeout() || send_cmd(CMD16, 512) != 0)
                ty = 0;
        }
    }

    CardType = ty;
    d834:	1c e0       	ldi	r17, 0x0C	; 12
    d836:	10 93 23 18 	sts	0x1823, r17	; 0x801823 <CardType>
    deselect();
    d83a:	a4 de       	rcall	.-696    	; 0xd584 <deselect>

    if (ty)                                       /* Initialization succeded */
    d83c:	11 23       	and	r17, r17
    d83e:	39 f0       	breq	.+14     	; 0xd84e <mmc_disk_initialize+0x13c>
    {
        Stat &= ~STA_NOINIT;                      /* Clear STA_NOINIT */
    d840:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <Stat>
    d844:	8e 7f       	andi	r24, 0xFE	; 254
    d846:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <Stat>
        FCLK_FAST();
    d84a:	81 d3       	rcall	.+1794   	; 0xdf4e <mmc_fast>
    d84c:	01 c0       	rjmp	.+2      	; 0xd850 <mmc_disk_initialize+0x13e>
    d84e:	c1 d3       	rcall	.+1922   	; 0xdfd2 <mmc_power_off>
void power_off (void)
{
/* Disable SPI function */
/* De-configure MOSI/MISO/SCLK/CS pins (set hi-z) */
/* Turn socket power off (nothing to do if no power controls) */
    mmc_power_off();
    d850:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <Stat>
    else
    {
        power_off();
    }

    return Stat;
    d854:	24 96       	adiw	r28, 0x04	; 4
    d856:	e8 e0       	ldi	r30, 0x08	; 8
}
    d858:	0c 94 ca e8 	jmp	0x1d194	; 0x1d194 <__epilogue_restores__+0x14>

0000d85c <mmc_disk_status>:
    d85c:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <Stat>
/// @return STA_NOINIT if no drive
MEMSPACE
DSTATUS mmc_disk_status ( void )
{
    return Stat;
}
    d860:	08 95       	ret

0000d862 <mmc_disk_read>:
DRESULT mmc_disk_read (
BYTE *buff,                                       /*< Pointer to the data buffer to store read data */
DWORD sector,                                     /*< Start sector number (LBA) */
UINT count                                        /*< Sector count (1..128) */
)
{
    d862:	8f 92       	push	r8
    d864:	9f 92       	push	r9
    d866:	af 92       	push	r10
    d868:	bf 92       	push	r11
    d86a:	ef 92       	push	r14
    d86c:	ff 92       	push	r15
    d86e:	1f 93       	push	r17
    d870:	cf 93       	push	r28
    d872:	df 93       	push	r29
    d874:	7c 01       	movw	r14, r24
    d876:	4a 01       	movw	r8, r20
    d878:	5b 01       	movw	r10, r22
    d87a:	e9 01       	movw	r28, r18
    BYTE cmd;

    if (!count)
    d87c:	20 97       	sbiw	r28, 0x00	; 0
    d87e:	19 f4       	brne	.+6      	; 0xd886 <mmc_disk_read+0x24>
    {
        deselect();
    d880:	81 de       	rcall	.-766    	; 0xd584 <deselect>
        return RES_PARERR;
    d882:	84 e0       	ldi	r24, 0x04	; 4
    d884:	0d c0       	rjmp	.+26     	; 0xd8a0 <mmc_disk_read+0x3e>
    }

	if( Stat )
    d886:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <Stat>
    d88a:	88 23       	and	r24, r24
    d88c:	19 f0       	breq	.+6      	; 0xd894 <mmc_disk_read+0x32>
		set_error(1);
    d88e:	81 e0       	ldi	r24, 0x01	; 1
    d890:	0e 94 74 27 	call	0x4ee8	; 0x4ee8 <set_error>

    if (Stat & STA_NOINIT)
    d894:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <Stat>
    d898:	80 ff       	sbrs	r24, 0
    {
        deselect();
    d89a:	04 c0       	rjmp	.+8      	; 0xd8a4 <mmc_disk_read+0x42>
    d89c:	73 de       	rcall	.-794    	; 0xd584 <deselect>
        return RES_NOTRDY;
    d89e:	83 e0       	ldi	r24, 0x03	; 3
    d8a0:	90 e0       	ldi	r25, 0x00	; 0
    d8a2:	36 c0       	rjmp	.+108    	; 0xd910 <mmc_disk_read+0xae>
    }
    if (Stat & STA_NODISK)
    d8a4:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <Stat>
    d8a8:	81 fd       	sbrc	r24, 1
    d8aa:	f8 cf       	rjmp	.-16     	; 0xd89c <mmc_disk_read+0x3a>
    {
        deselect();
        return RES_NOTRDY;
	}
    GPIO_PIN_HI(LED1);
    d8ac:	46 9a       	sbi	0x08, 6	; 8
    d8ae:	3e 9a       	sbi	0x07, 6	; 7

    if (!(CardType & CT_BLOCK)) sector *= 512;    /* Convert to byte address if needed */
    d8b0:	80 91 23 18 	lds	r24, 0x1823	; 0x801823 <CardType>
    d8b4:	83 fd       	sbrc	r24, 3
    d8b6:	07 c0       	rjmp	.+14     	; 0xd8c6 <mmc_disk_read+0x64>
    d8b8:	89 e0       	ldi	r24, 0x09	; 9
    d8ba:	88 0c       	add	r8, r8
    d8bc:	99 1c       	adc	r9, r9
    d8be:	aa 1c       	adc	r10, r10
    d8c0:	bb 1c       	adc	r11, r11
    d8c2:	8a 95       	dec	r24
    d8c4:	d1 f7       	brne	.-12     	; 0xd8ba <mmc_disk_read+0x58>

    cmd = count > 1 ? CMD18 : CMD17;              /*  READ_MULTIPLE_BLOCK : READ_SINGLE_BLOCK */
    d8c6:	c2 30       	cpi	r28, 0x02	; 2
    d8c8:	d1 05       	cpc	r29, r1
    d8ca:	10 f4       	brcc	.+4      	; 0xd8d0 <mmc_disk_read+0x6e>
    d8cc:	11 e1       	ldi	r17, 0x11	; 17
    d8ce:	01 c0       	rjmp	.+2      	; 0xd8d2 <mmc_disk_read+0x70>
    d8d0:	12 e1       	ldi	r17, 0x12	; 18
    if (send_cmd(cmd, sector) == 0)
    d8d2:	b5 01       	movw	r22, r10
    d8d4:	a4 01       	movw	r20, r8
    d8d6:	81 2f       	mov	r24, r17
    d8d8:	b2 de       	rcall	.-668    	; 0xd63e <send_cmd>
    d8da:	81 11       	cpse	r24, r1
    d8dc:	11 c0       	rjmp	.+34     	; 0xd900 <mmc_disk_read+0x9e>
    {
        do
        {
            if (!rcvr_datablock(buff, 512))
    d8de:	60 e0       	ldi	r22, 0x00	; 0
    d8e0:	72 e0       	ldi	r23, 0x02	; 2
    d8e2:	c7 01       	movw	r24, r14
    d8e4:	55 de       	rcall	.-854    	; 0xd590 <rcvr_datablock>
    d8e6:	89 2b       	or	r24, r25
    d8e8:	21 f0       	breq	.+8      	; 0xd8f2 <mmc_disk_read+0x90>
                break;
            buff += 512;
    d8ea:	8e ef       	ldi	r24, 0xFE	; 254
    d8ec:	f8 1a       	sub	r15, r24
        } while (--count);
    d8ee:	21 97       	sbiw	r28, 0x01	; 1
    d8f0:	b1 f7       	brne	.-20     	; 0xd8de <mmc_disk_read+0x7c>
        if (cmd == CMD18) send_cmd(CMD12, 0);     /* STOP_TRANSMISSION */
    d8f2:	12 31       	cpi	r17, 0x12	; 18
    d8f4:	29 f4       	brne	.+10     	; 0xd900 <mmc_disk_read+0x9e>
    d8f6:	40 e0       	ldi	r20, 0x00	; 0
    d8f8:	50 e0       	ldi	r21, 0x00	; 0
    d8fa:	ba 01       	movw	r22, r20
    d8fc:	8c e0       	ldi	r24, 0x0C	; 12
    }
    deselect();
    d8fe:	9f de       	rcall	.-706    	; 0xd63e <send_cmd>
    d900:	41 de       	rcall	.-894    	; 0xd584 <deselect>
    GPIO_PIN_LOW(LED1);
    d902:	46 98       	cbi	0x08, 6	; 8
    d904:	3e 9a       	sbi	0x07, 6	; 7

    return count ? RES_ERROR : RES_OK;
    d906:	81 e0       	ldi	r24, 0x01	; 1
    d908:	90 e0       	ldi	r25, 0x00	; 0
    d90a:	cd 2b       	or	r28, r29
    d90c:	09 f4       	brne	.+2      	; 0xd910 <mmc_disk_read+0xae>
    d90e:	80 e0       	ldi	r24, 0x00	; 0
}
    d910:	df 91       	pop	r29
    d912:	cf 91       	pop	r28
    d914:	1f 91       	pop	r17
    d916:	ff 90       	pop	r15
    d918:	ef 90       	pop	r14
    d91a:	bf 90       	pop	r11
    d91c:	af 90       	pop	r10
    d91e:	9f 90       	pop	r9
    d920:	8f 90       	pop	r8
    d922:	08 95       	ret

0000d924 <mmc_disk_write>:
DRESULT mmc_disk_write (
const BYTE *buff,                                 /*< Pointer to the data to be written */
DWORD sector,                                     /*< Start sector number (LBA) */
UINT count                                        /* Sector count (1..128) */
)
{
    d924:	a0 e0       	ldi	r26, 0x00	; 0
    d926:	b0 e0       	ldi	r27, 0x00	; 0
    d928:	e8 e9       	ldi	r30, 0x98	; 152
    d92a:	fc e6       	ldi	r31, 0x6C	; 108
    d92c:	0c 94 ae e8 	jmp	0x1d15c	; 0x1d15c <__prologue_saves__+0x14>
    d930:	8c 01       	movw	r16, r24
    d932:	6a 01       	movw	r12, r20
    d934:	7b 01       	movw	r14, r22
    d936:	e9 01       	movw	r28, r18
    if (!count)
    d938:	20 97       	sbiw	r28, 0x00	; 0
    d93a:	19 f4       	brne	.+6      	; 0xd942 <mmc_disk_write+0x1e>
    {
        deselect();
    d93c:	23 de       	rcall	.-954    	; 0xd584 <deselect>
        return RES_PARERR;
    d93e:	84 e0       	ldi	r24, 0x04	; 4
    d940:	18 c0       	rjmp	.+48     	; 0xd972 <mmc_disk_write+0x4e>
    }

	if( Stat )
    d942:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <Stat>
    d946:	88 23       	and	r24, r24
    d948:	19 f0       	breq	.+6      	; 0xd950 <mmc_disk_write+0x2c>
		set_error(1);
    d94a:	81 e0       	ldi	r24, 0x01	; 1
    d94c:	0e 94 74 27 	call	0x4ee8	; 0x4ee8 <set_error>

    if (Stat & STA_NOINIT)
    d950:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <Stat>
    d954:	80 ff       	sbrs	r24, 0
    {
        deselect();
    d956:	03 c0       	rjmp	.+6      	; 0xd95e <mmc_disk_write+0x3a>
    d958:	15 de       	rcall	.-982    	; 0xd584 <deselect>
        return RES_NOTRDY;
    d95a:	83 e0       	ldi	r24, 0x03	; 3
    d95c:	0a c0       	rjmp	.+20     	; 0xd972 <mmc_disk_write+0x4e>
    }
    if (Stat & STA_NODISK)
    d95e:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <Stat>
    d962:	81 fd       	sbrc	r24, 1
    d964:	f9 cf       	rjmp	.-14     	; 0xd958 <mmc_disk_write+0x34>
    {
        deselect();
        return RES_NOTRDY;
	}
    if (Stat & STA_PROTECT)
    d966:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <Stat>
    d96a:	82 ff       	sbrs	r24, 2
    {
        deselect();
    d96c:	04 c0       	rjmp	.+8      	; 0xd976 <mmc_disk_write+0x52>
    d96e:	0a de       	rcall	.-1004   	; 0xd584 <deselect>
        return RES_WRPRT;
    d970:	82 e0       	ldi	r24, 0x02	; 2
    d972:	90 e0       	ldi	r25, 0x00	; 0
    d974:	46 c0       	rjmp	.+140    	; 0xda02 <mmc_disk_write+0xde>
    }

    GPIO_PIN_HI(LED1);
    d976:	46 9a       	sbi	0x08, 6	; 8
    d978:	3e 9a       	sbi	0x07, 6	; 7

    if (!(CardType & CT_BLOCK)) sector *= 512;    /* Convert to byte address if needed */
    d97a:	80 91 23 18 	lds	r24, 0x1823	; 0x801823 <CardType>
    d97e:	83 fd       	sbrc	r24, 3
    d980:	07 c0       	rjmp	.+14     	; 0xd990 <mmc_disk_write+0x6c>
    d982:	99 e0       	ldi	r25, 0x09	; 9
    d984:	cc 0c       	add	r12, r12
    d986:	dd 1c       	adc	r13, r13
    d988:	ee 1c       	adc	r14, r14
    d98a:	ff 1c       	adc	r15, r15
    d98c:	9a 95       	dec	r25
    d98e:	d1 f7       	brne	.-12     	; 0xd984 <mmc_disk_write+0x60>

    if (count == 1)                               /* Single block write */
    d990:	c1 30       	cpi	r28, 0x01	; 1
    d992:	d1 05       	cpc	r29, r1
    d994:	89 f4       	brne	.+34     	; 0xd9b8 <mmc_disk_write+0x94>
    {
        if ((send_cmd(CMD24, sector) == 0)        /* WRITE_BLOCK */
    d996:	b7 01       	movw	r22, r14
    d998:	a6 01       	movw	r20, r12
    d99a:	88 e1       	ldi	r24, 0x18	; 24
    d99c:	50 de       	rcall	.-864    	; 0xd63e <send_cmd>
    d99e:	81 11       	cpse	r24, r1
            && xmit_datablock(buff, 0xFE))
    d9a0:	26 c0       	rjmp	.+76     	; 0xd9ee <mmc_disk_write+0xca>
    d9a2:	6e ef       	ldi	r22, 0xFE	; 254
    d9a4:	c8 01       	movw	r24, r16
    d9a6:	8e de       	rcall	.-740    	; 0xd6c4 <xmit_datablock>
    d9a8:	31 e0       	ldi	r19, 0x01	; 1
    d9aa:	20 e0       	ldi	r18, 0x00	; 0
    d9ac:	89 2b       	or	r24, r25
    d9ae:	09 f0       	breq	.+2      	; 0xd9b2 <mmc_disk_write+0x8e>
    d9b0:	30 e0       	ldi	r19, 0x00	; 0
    d9b2:	c3 2f       	mov	r28, r19
    d9b4:	d2 2f       	mov	r29, r18
    d9b6:	1d c0       	rjmp	.+58     	; 0xd9f2 <mmc_disk_write+0xce>
            count = 0;
    }
    else                                          /* Multiple block write */
    {
        if (CardType & CT_SDC) send_cmd(ACMD23, count);
    d9b8:	86 70       	andi	r24, 0x06	; 6
    d9ba:	29 f0       	breq	.+10     	; 0xd9c6 <mmc_disk_write+0xa2>
    d9bc:	ae 01       	movw	r20, r28
    d9be:	60 e0       	ldi	r22, 0x00	; 0
    d9c0:	70 e0       	ldi	r23, 0x00	; 0
    d9c2:	87 e9       	ldi	r24, 0x97	; 151
        if (send_cmd(CMD25, sector) == 0)         /* WRITE_MULTIPLE_BLOCK */
    d9c4:	3c de       	rcall	.-904    	; 0xd63e <send_cmd>
    d9c6:	b7 01       	movw	r22, r14
    d9c8:	a6 01       	movw	r20, r12
    d9ca:	89 e1       	ldi	r24, 0x19	; 25
    d9cc:	38 de       	rcall	.-912    	; 0xd63e <send_cmd>
    d9ce:	81 11       	cpse	r24, r1
        {
            do
            {
                if (!xmit_datablock(buff, 0xFC)) break;
    d9d0:	10 c0       	rjmp	.+32     	; 0xd9f2 <mmc_disk_write+0xce>
    d9d2:	6c ef       	ldi	r22, 0xFC	; 252
    d9d4:	c8 01       	movw	r24, r16
    d9d6:	76 de       	rcall	.-788    	; 0xd6c4 <xmit_datablock>
    d9d8:	89 2b       	or	r24, r25
                buff += 512;
    d9da:	19 f0       	breq	.+6      	; 0xd9e2 <mmc_disk_write+0xbe>
            } while (--count);
    d9dc:	1e 5f       	subi	r17, 0xFE	; 254
    d9de:	21 97       	sbiw	r28, 0x01	; 1
            if (!xmit_datablock(0, 0xFD))         /* STOP_TRAN token */
    d9e0:	c1 f7       	brne	.-16     	; 0xd9d2 <mmc_disk_write+0xae>
    d9e2:	6d ef       	ldi	r22, 0xFD	; 253
    d9e4:	80 e0       	ldi	r24, 0x00	; 0
    d9e6:	90 e0       	ldi	r25, 0x00	; 0
    d9e8:	6d de       	rcall	.-806    	; 0xd6c4 <xmit_datablock>
    d9ea:	89 2b       	or	r24, r25
                count = 1;
    d9ec:	11 f4       	brne	.+4      	; 0xd9f2 <mmc_disk_write+0xce>
    d9ee:	c1 e0       	ldi	r28, 0x01	; 1
        }
    }
    deselect();
    d9f0:	d0 e0       	ldi	r29, 0x00	; 0
    d9f2:	c8 dd       	rcall	.-1136   	; 0xd584 <deselect>
    GPIO_PIN_LOW(LED1);
    d9f4:	46 98       	cbi	0x08, 6	; 8
    d9f6:	3e 9a       	sbi	0x07, 6	; 7

    return count ? RES_ERROR : RES_OK;
    d9f8:	81 e0       	ldi	r24, 0x01	; 1
    d9fa:	90 e0       	ldi	r25, 0x00	; 0
    d9fc:	cd 2b       	or	r28, r29
    d9fe:	09 f4       	brne	.+2      	; 0xda02 <mmc_disk_write+0xde>
    da00:	80 e0       	ldi	r24, 0x00	; 0
}
    da02:	cd b7       	in	r28, 0x3d	; 61
    da04:	de b7       	in	r29, 0x3e	; 62
    da06:	e8 e0       	ldi	r30, 0x08	; 8
    da08:	0c 94 ca e8 	jmp	0x1d194	; 0x1d194 <__epilogue_restores__+0x14>

0000da0c <mmc_disk_ioctl>:
MEMSPACE
DRESULT mmc_disk_ioctl (
BYTE cmd,                                         /* Control code */
void *buff                                        /* Buffer to send/receive control data */
)
{
    da0c:	a0 e1       	ldi	r26, 0x10	; 16
    da0e:	b0 e0       	ldi	r27, 0x00	; 0
    da10:	ec e0       	ldi	r30, 0x0C	; 12
    da12:	fd e6       	ldi	r31, 0x6D	; 109
    da14:	0c 94 ae e8 	jmp	0x1d15c	; 0x1d15c <__prologue_saves__+0x14>
    SDIO_CTRL *sdi;
    BYTE rc, *bp;
    UINT dc;
#endif

    if (Stat & STA_NOINIT)
    da18:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <Stat>
    da1c:	90 fd       	sbrc	r25, 0
    da1e:	31 c2       	rjmp	.+1122   	; 0xde82 <mmc_disk_ioctl+0x476>
    da20:	8b 01       	movw	r16, r22
        return RES_NOTRDY;

    if (Stat & STA_NODISK)
    da22:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <Stat>
    da26:	91 ff       	sbrs	r25, 1
    da28:	02 c0       	rjmp	.+4      	; 0xda2e <mmc_disk_ioctl+0x22>
    {
        deselect();
    da2a:	ac dd       	rcall	.-1192   	; 0xd584 <deselect>
    da2c:	2a c2       	rjmp	.+1108   	; 0xde82 <mmc_disk_ioctl+0x476>
        return RES_NOTRDY;
	}

    res = RES_ERROR;
    switch (cmd)
    da2e:	83 33       	cpi	r24, 0x33	; 51
    da30:	09 f4       	brne	.+2      	; 0xda34 <mmc_disk_ioctl+0x28>
    da32:	01 c1       	rjmp	.+514    	; 0xdc36 <mmc_disk_ioctl+0x22a>
    da34:	a0 f4       	brcc	.+40     	; 0xda5e <mmc_disk_ioctl+0x52>
    da36:	83 30       	cpi	r24, 0x03	; 3
    da38:	09 f4       	brne	.+2      	; 0xda3c <mmc_disk_ioctl+0x30>
    da3a:	85 c0       	rjmp	.+266    	; 0xdb46 <mmc_disk_ioctl+0x13a>
    da3c:	28 f4       	brcc	.+10     	; 0xda48 <mmc_disk_ioctl+0x3c>
    da3e:	88 23       	and	r24, r24
    da40:	11 f1       	breq	.+68     	; 0xda86 <mmc_disk_ioctl+0x7a>
    da42:	81 30       	cpi	r24, 0x01	; 1
    da44:	11 f1       	breq	.+68     	; 0xda8a <mmc_disk_ioctl+0x7e>
    da46:	1f c2       	rjmp	.+1086   	; 0xde86 <mmc_disk_ioctl+0x47a>
    da48:	87 30       	cpi	r24, 0x07	; 7
    da4a:	09 f4       	brne	.+2      	; 0xda4e <mmc_disk_ioctl+0x42>
    da4c:	2a c1       	rjmp	.+596    	; 0xdca2 <mmc_disk_ioctl+0x296>
    da4e:	82 33       	cpi	r24, 0x32	; 50
    da50:	09 f0       	breq	.+2      	; 0xda54 <mmc_disk_ioctl+0x48>
    da52:	19 c2       	rjmp	.+1074   	; 0xde86 <mmc_disk_ioctl+0x47a>
#endif

/* Following commands are never used by FatFs module */

        case MMC_GET_TYPE :                       /* Get card type flags (1 byte) */
            *ptr = CardType;
    da54:	80 91 23 18 	lds	r24, 0x1823	; 0x801823 <CardType>
    da58:	fb 01       	movw	r30, r22
    da5a:	80 83       	st	Z, r24
    da5c:	28 c1       	rjmp	.+592    	; 0xdcae <mmc_disk_ioctl+0x2a2>
        deselect();
        return RES_NOTRDY;
	}

    res = RES_ERROR;
    switch (cmd)
    da5e:	86 33       	cpi	r24, 0x36	; 54
    da60:	09 f4       	brne	.+2      	; 0xda64 <mmc_disk_ioctl+0x58>
    da62:	0c c1       	rjmp	.+536    	; 0xdc7c <mmc_disk_ioctl+0x270>
    da64:	38 f4       	brcc	.+14     	; 0xda74 <mmc_disk_ioctl+0x68>
    da66:	84 33       	cpi	r24, 0x34	; 52
    da68:	09 f4       	brne	.+2      	; 0xda6c <mmc_disk_ioctl+0x60>
    da6a:	ea c0       	rjmp	.+468    	; 0xdc40 <mmc_disk_ioctl+0x234>
    da6c:	85 33       	cpi	r24, 0x35	; 53
    da6e:	09 f4       	brne	.+2      	; 0xda72 <mmc_disk_ioctl+0x66>
    da70:	f1 c0       	rjmp	.+482    	; 0xdc54 <mmc_disk_ioctl+0x248>
    da72:	09 c2       	rjmp	.+1042   	; 0xde86 <mmc_disk_ioctl+0x47a>
    da74:	88 33       	cpi	r24, 0x38	; 56
    da76:	09 f4       	brne	.+2      	; 0xda7a <mmc_disk_ioctl+0x6e>
    da78:	74 c1       	rjmp	.+744    	; 0xdd62 <mmc_disk_ioctl+0x356>
    da7a:	08 f4       	brcc	.+2      	; 0xda7e <mmc_disk_ioctl+0x72>
    da7c:	1a c1       	rjmp	.+564    	; 0xdcb2 <mmc_disk_ioctl+0x2a6>
    da7e:	89 33       	cpi	r24, 0x39	; 57
    da80:	09 f4       	brne	.+2      	; 0xda84 <mmc_disk_ioctl+0x78>
    da82:	bc c1       	rjmp	.+888    	; 0xddfc <mmc_disk_ioctl+0x3f0>
    {
        case CTRL_SYNC :                          /* Make sure that no pending write process. Do not remove this or written sector might not left updated. */
            if (select()) res = RES_OK;
    da84:	00 c2       	rjmp	.+1024   	; 0xde86 <mmc_disk_ioctl+0x47a>
    da86:	b9 dd       	rcall	.-1166   	; 0xd5fa <select>
    da88:	06 c1       	rjmp	.+524    	; 0xdc96 <mmc_disk_ioctl+0x28a>
            deselect();
            break;

        case GET_SECTOR_COUNT :                   /* Get number of sectors on the disk (DWORD) */
            if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16))
    da8a:	40 e0       	ldi	r20, 0x00	; 0
    da8c:	50 e0       	ldi	r21, 0x00	; 0
    da8e:	ba 01       	movw	r22, r20
    da90:	89 e0       	ldi	r24, 0x09	; 9
    da92:	d5 dd       	rcall	.-1110   	; 0xd63e <send_cmd>
    da94:	81 11       	cpse	r24, r1
    da96:	f1 c1       	rjmp	.+994    	; 0xde7a <mmc_disk_ioctl+0x46e>
    da98:	60 e1       	ldi	r22, 0x10	; 16
    da9a:	70 e0       	ldi	r23, 0x00	; 0
    da9c:	ce 01       	movw	r24, r28
    da9e:	01 96       	adiw	r24, 0x01	; 1
    daa0:	77 dd       	rcall	.-1298   	; 0xd590 <rcvr_datablock>
    daa2:	89 2b       	or	r24, r25
    daa4:	09 f4       	brne	.+2      	; 0xdaa8 <mmc_disk_ioctl+0x9c>
    daa6:	e9 c1       	rjmp	.+978    	; 0xde7a <mmc_disk_ioctl+0x46e>
            {
                if ((csd[0] >> 6) == 1)           /* SDC ver 2.00 */
    daa8:	99 81       	ldd	r25, Y+1	; 0x01
    daaa:	92 95       	swap	r25
    daac:	96 95       	lsr	r25
    daae:	96 95       	lsr	r25
    dab0:	93 70       	andi	r25, 0x03	; 3
    dab2:	29 85       	ldd	r18, Y+9	; 0x09
    dab4:	4a 85       	ldd	r20, Y+10	; 0x0a
    dab6:	88 85       	ldd	r24, Y+8	; 0x08
    dab8:	91 30       	cpi	r25, 0x01	; 1
    daba:	d9 f4       	brne	.+54     	; 0xdaf2 <mmc_disk_ioctl+0xe6>
                {
                    csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
                    *(DWORD*)buff = csize << 10;
    dabc:	30 e0       	ldi	r19, 0x00	; 0
    dabe:	32 2f       	mov	r19, r18
    dac0:	22 27       	eor	r18, r18
    dac2:	24 0f       	add	r18, r20
    dac4:	31 1d       	adc	r19, r1
    dac6:	8f 73       	andi	r24, 0x3F	; 63
    dac8:	90 e0       	ldi	r25, 0x00	; 0
    daca:	a0 e0       	ldi	r26, 0x00	; 0
    dacc:	b0 e0       	ldi	r27, 0x00	; 0
    dace:	dc 01       	movw	r26, r24
    dad0:	99 27       	eor	r25, r25
    dad2:	88 27       	eor	r24, r24
    dad4:	01 96       	adiw	r24, 0x01	; 1
    dad6:	a1 1d       	adc	r26, r1
    dad8:	b1 1d       	adc	r27, r1
    dada:	82 0f       	add	r24, r18
    dadc:	93 1f       	adc	r25, r19
    dade:	a1 1d       	adc	r26, r1
    dae0:	b1 1d       	adc	r27, r1
    dae2:	fa e0       	ldi	r31, 0x0A	; 10
    dae4:	88 0f       	add	r24, r24
    dae6:	99 1f       	adc	r25, r25
    dae8:	aa 1f       	adc	r26, r26
    daea:	bb 1f       	adc	r27, r27
    daec:	fa 95       	dec	r31
    daee:	d1 f7       	brne	.-12     	; 0xdae4 <mmc_disk_ioctl+0xd8>
    daf0:	9b c0       	rjmp	.+310    	; 0xdc28 <mmc_disk_ioctl+0x21c>
                }                                 /* SDC ver 1.XX or MMC*/
                else
                {
                    n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
                    csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
                    *(DWORD*)buff = csize << (n - 9);
    daf2:	22 95       	swap	r18
    daf4:	26 95       	lsr	r18
    daf6:	26 95       	lsr	r18
    daf8:	23 70       	andi	r18, 0x03	; 3
    dafa:	f4 e0       	ldi	r31, 0x04	; 4
    dafc:	8f 9f       	mul	r24, r31
    dafe:	c0 01       	movw	r24, r0
    db00:	11 24       	eor	r1, r1
    db02:	82 0f       	add	r24, r18
    db04:	91 1d       	adc	r25, r1
    db06:	01 96       	adiw	r24, 0x01	; 1
    db08:	2f 81       	ldd	r18, Y+7	; 0x07
    db0a:	23 70       	andi	r18, 0x03	; 3
    db0c:	30 e0       	ldi	r19, 0x00	; 0
    db0e:	32 2f       	mov	r19, r18
    db10:	22 27       	eor	r18, r18
    db12:	33 0f       	add	r19, r19
    db14:	33 0f       	add	r19, r19
    db16:	82 0f       	add	r24, r18
    db18:	93 1f       	adc	r25, r19
    db1a:	a0 e0       	ldi	r26, 0x00	; 0
    db1c:	b0 e0       	ldi	r27, 0x00	; 0
    db1e:	2e 81       	ldd	r18, Y+6	; 0x06
    db20:	32 2f       	mov	r19, r18
    db22:	3f 70       	andi	r19, 0x0F	; 15
    db24:	2b 85       	ldd	r18, Y+11	; 0x0b
    db26:	22 1f       	adc	r18, r18
    db28:	22 27       	eor	r18, r18
    db2a:	22 1f       	adc	r18, r18
    db2c:	23 0f       	add	r18, r19
    db2e:	43 70       	andi	r20, 0x03	; 3
    db30:	44 0f       	add	r20, r20
    db32:	42 0f       	add	r20, r18
    db34:	47 50       	subi	r20, 0x07	; 7
    db36:	04 c0       	rjmp	.+8      	; 0xdb40 <mmc_disk_ioctl+0x134>
    db38:	88 0f       	add	r24, r24
    db3a:	99 1f       	adc	r25, r25
    db3c:	aa 1f       	adc	r26, r26
    db3e:	bb 1f       	adc	r27, r27
    db40:	4a 95       	dec	r20
    db42:	d2 f7       	brpl	.-12     	; 0xdb38 <mmc_disk_ioctl+0x12c>
    db44:	71 c0       	rjmp	.+226    	; 0xdc28 <mmc_disk_ioctl+0x21c>
            }
            deselect();
            break;

        case GET_BLOCK_SIZE :                     /* Get erase block size in unit of sector (DWORD) */
            if (CardType & CT_SD2)                /* SDv2? */
    db46:	80 91 23 18 	lds	r24, 0x1823	; 0x801823 <CardType>
            {
                if (send_cmd(ACMD13, 0) == 0)     /* Read SD status */
    db4a:	40 e0       	ldi	r20, 0x00	; 0
    db4c:	50 e0       	ldi	r21, 0x00	; 0
            }
            deselect();
            break;

        case GET_BLOCK_SIZE :                     /* Get erase block size in unit of sector (DWORD) */
            if (CardType & CT_SD2)                /* SDv2? */
    db4e:	ba 01       	movw	r22, r20
    db50:	82 ff       	sbrs	r24, 2
            {
                if (send_cmd(ACMD13, 0) == 0)     /* Read SD status */
    db52:	24 c0       	rjmp	.+72     	; 0xdb9c <mmc_disk_ioctl+0x190>
    db54:	8d e8       	ldi	r24, 0x8D	; 141
    db56:	73 dd       	rcall	.-1306   	; 0xd63e <send_cmd>
    db58:	81 11       	cpse	r24, r1
                {
                    xchg_spi(0xFF);
    db5a:	8f c1       	rjmp	.+798    	; 0xde7a <mmc_disk_ioctl+0x46e>
    db5c:	8f ef       	ldi	r24, 0xFF	; 255
                    if (rcvr_datablock(csd, 16))  /* Read partial block */
    db5e:	10 dd       	rcall	.-1504   	; 0xd580 <xchg_spi>
    db60:	60 e1       	ldi	r22, 0x10	; 16
    db62:	70 e0       	ldi	r23, 0x00	; 0
    db64:	ce 01       	movw	r24, r28
    db66:	01 96       	adiw	r24, 0x01	; 1
    db68:	13 dd       	rcall	.-1498   	; 0xd590 <rcvr_datablock>
    db6a:	89 2b       	or	r24, r25
    db6c:	09 f4       	brne	.+2      	; 0xdb70 <mmc_disk_ioctl+0x164>
    db6e:	85 c1       	rjmp	.+778    	; 0xde7a <mmc_disk_ioctl+0x46e>
    db70:	50 e3       	ldi	r21, 0x30	; 48
                    {
/* Purge trailing data */
                        for (n = 64 - 16; n; n--) xchg_spi(0xFF);
    db72:	f5 2e       	mov	r15, r21
    db74:	8f ef       	ldi	r24, 0xFF	; 255
    db76:	04 dd       	rcall	.-1528   	; 0xd580 <xchg_spi>
    db78:	fa 94       	dec	r15
    db7a:	f1 10       	cpse	r15, r1
    db7c:	fb cf       	rjmp	.-10     	; 0xdb74 <mmc_disk_ioctl+0x168>
                        *(DWORD*)buff = 16UL << (csd[10] >> 4);
    db7e:	2b 85       	ldd	r18, Y+11	; 0x0b
    db80:	22 95       	swap	r18
    db82:	2f 70       	andi	r18, 0x0F	; 15
    db84:	80 e1       	ldi	r24, 0x10	; 16
    db86:	90 e0       	ldi	r25, 0x00	; 0
    db88:	a0 e0       	ldi	r26, 0x00	; 0
    db8a:	b0 e0       	ldi	r27, 0x00	; 0
    db8c:	04 c0       	rjmp	.+8      	; 0xdb96 <mmc_disk_ioctl+0x18a>
    db8e:	88 0f       	add	r24, r24
    db90:	99 1f       	adc	r25, r25
    db92:	aa 1f       	adc	r26, r26
    db94:	bb 1f       	adc	r27, r27
    db96:	2a 95       	dec	r18
    db98:	d2 f7       	brpl	.-12     	; 0xdb8e <mmc_disk_ioctl+0x182>
                }
            }                                     /* SDv1 or MMCv3 */
            else
            {
/* Read CSD */
                if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16))
    db9a:	46 c0       	rjmp	.+140    	; 0xdc28 <mmc_disk_ioctl+0x21c>
    db9c:	89 e0       	ldi	r24, 0x09	; 9
    db9e:	4f dd       	rcall	.-1378   	; 0xd63e <send_cmd>
    dba0:	81 11       	cpse	r24, r1
    dba2:	6b c1       	rjmp	.+726    	; 0xde7a <mmc_disk_ioctl+0x46e>
    dba4:	60 e1       	ldi	r22, 0x10	; 16
    dba6:	70 e0       	ldi	r23, 0x00	; 0
    dba8:	ce 01       	movw	r24, r28
    dbaa:	01 96       	adiw	r24, 0x01	; 1
    dbac:	f1 dc       	rcall	.-1566   	; 0xd590 <rcvr_datablock>
    dbae:	89 2b       	or	r24, r25
    dbb0:	09 f4       	brne	.+2      	; 0xdbb4 <mmc_disk_ioctl+0x1a8>
    dbb2:	63 c1       	rjmp	.+710    	; 0xde7a <mmc_disk_ioctl+0x46e>
                {
                    if (CardType & CT_SD1)        /* SDv1 */
    dbb4:	90 91 23 18 	lds	r25, 0x1823	; 0x801823 <CardType>
    dbb8:	2b 85       	ldd	r18, Y+11	; 0x0b
    dbba:	8c 85       	ldd	r24, Y+12	; 0x0c
    dbbc:	91 ff       	sbrs	r25, 1
    dbbe:	16 c0       	rjmp	.+44     	; 0xdbec <mmc_disk_ioctl+0x1e0>
                    {
                        *(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
    dbc0:	2f 73       	andi	r18, 0x3F	; 63
    dbc2:	88 1f       	adc	r24, r24
    dbc4:	88 27       	eor	r24, r24
    dbc6:	88 1f       	adc	r24, r24
    dbc8:	90 e0       	ldi	r25, 0x00	; 0
    dbca:	01 96       	adiw	r24, 0x01	; 1
    dbcc:	82 0f       	add	r24, r18
    dbce:	91 1d       	adc	r25, r1
    dbd0:	82 0f       	add	r24, r18
    dbd2:	91 1d       	adc	r25, r1
    dbd4:	2e 85       	ldd	r18, Y+14	; 0x0e
    dbd6:	22 95       	swap	r18
    dbd8:	26 95       	lsr	r18
    dbda:	26 95       	lsr	r18
    dbdc:	23 70       	andi	r18, 0x03	; 3
    dbde:	21 50       	subi	r18, 0x01	; 1
    dbe0:	02 c0       	rjmp	.+4      	; 0xdbe6 <mmc_disk_ioctl+0x1da>
    dbe2:	88 0f       	add	r24, r24
    dbe4:	99 1f       	adc	r25, r25
    dbe6:	2a 95       	dec	r18
    dbe8:	e2 f7       	brpl	.-8      	; 0xdbe2 <mmc_disk_ioctl+0x1d6>
    dbea:	1c c0       	rjmp	.+56     	; 0xdc24 <mmc_disk_ioctl+0x218>
                    }                             /* MMCv3 */
                    else
                    {
                        *(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
    dbec:	38 2f       	mov	r19, r24
    dbee:	33 70       	andi	r19, 0x03	; 3
    dbf0:	82 95       	swap	r24
    dbf2:	86 95       	lsr	r24
    dbf4:	87 70       	andi	r24, 0x07	; 7
    dbf6:	90 e0       	ldi	r25, 0x00	; 0
    dbf8:	f8 e0       	ldi	r31, 0x08	; 8
    dbfa:	3f 9f       	mul	r19, r31
    dbfc:	80 0d       	add	r24, r0
    dbfe:	91 1d       	adc	r25, r1
    dc00:	11 24       	eor	r1, r1
    dc02:	01 96       	adiw	r24, 0x01	; 1
    dc04:	2c 77       	andi	r18, 0x7C	; 124
    dc06:	30 e0       	ldi	r19, 0x00	; 0
    dc08:	35 95       	asr	r19
    dc0a:	27 95       	ror	r18
    dc0c:	35 95       	asr	r19
    dc0e:	27 95       	ror	r18
    dc10:	2f 5f       	subi	r18, 0xFF	; 255
    dc12:	3f 4f       	sbci	r19, 0xFF	; 255
    dc14:	82 9f       	mul	r24, r18
    dc16:	a0 01       	movw	r20, r0
    dc18:	83 9f       	mul	r24, r19
    dc1a:	50 0d       	add	r21, r0
    dc1c:	92 9f       	mul	r25, r18
    dc1e:	50 0d       	add	r21, r0
    dc20:	11 24       	eor	r1, r1
    dc22:	ca 01       	movw	r24, r20
    dc24:	a0 e0       	ldi	r26, 0x00	; 0
    dc26:	b0 e0       	ldi	r27, 0x00	; 0
    dc28:	f8 01       	movw	r30, r16
    dc2a:	80 83       	st	Z, r24
    dc2c:	91 83       	std	Z+1, r25	; 0x01
    dc2e:	a2 83       	std	Z+2, r26	; 0x02
    dc30:	b3 83       	std	Z+3, r27	; 0x03
                    }
                    res = RES_OK;
    dc32:	00 e0       	ldi	r16, 0x00	; 0
            res = RES_OK;
            break;

        case MMC_GET_CSD :                        /* Receive CSD as a data block (16 bytes) */
/* READ_CSD */
            if (send_cmd(CMD9, 0) == 0 && rcvr_datablock(ptr, 16))
    dc34:	23 c1       	rjmp	.+582    	; 0xde7c <mmc_disk_ioctl+0x470>
    dc36:	40 e0       	ldi	r20, 0x00	; 0
    dc38:	50 e0       	ldi	r21, 0x00	; 0
    dc3a:	ba 01       	movw	r22, r20
    dc3c:	89 e0       	ldi	r24, 0x09	; 9
            deselect();
            break;

        case MMC_GET_CID :                        /* Receive CID as a data block (16 bytes) */
/* READ_CID */
            if (send_cmd(CMD10, 0) == 0 && rcvr_datablock(ptr, 16))
    dc3e:	04 c0       	rjmp	.+8      	; 0xdc48 <mmc_disk_ioctl+0x23c>
    dc40:	40 e0       	ldi	r20, 0x00	; 0
    dc42:	50 e0       	ldi	r21, 0x00	; 0
    dc44:	ba 01       	movw	r22, r20
    dc46:	8a e0       	ldi	r24, 0x0A	; 10
    dc48:	fa dc       	rcall	.-1548   	; 0xd63e <send_cmd>
    dc4a:	81 11       	cpse	r24, r1
    dc4c:	16 c1       	rjmp	.+556    	; 0xde7a <mmc_disk_ioctl+0x46e>
    dc4e:	60 e1       	ldi	r22, 0x10	; 16
    dc50:	70 e0       	ldi	r23, 0x00	; 0
                res = RES_OK;
            deselect();
            break;

        case MMC_GET_OCR :                        /* Receive OCR as an R3 resp (4 bytes) */
            if (send_cmd(CMD58, 0) == 0)          /* READ_OCR */
    dc52:	1f c0       	rjmp	.+62     	; 0xdc92 <mmc_disk_ioctl+0x286>
    dc54:	40 e0       	ldi	r20, 0x00	; 0
    dc56:	50 e0       	ldi	r21, 0x00	; 0
    dc58:	ba 01       	movw	r22, r20
    dc5a:	8a e3       	ldi	r24, 0x3A	; 58
    dc5c:	f0 dc       	rcall	.-1568   	; 0xd63e <send_cmd>
    dc5e:	81 11       	cpse	r24, r1
    dc60:	0c c1       	rjmp	.+536    	; 0xde7a <mmc_disk_ioctl+0x46e>
    dc62:	78 01       	movw	r14, r16
    dc64:	f4 e0       	ldi	r31, 0x04	; 4
    dc66:	ef 0e       	add	r14, r31
static
BYTE xchg_spi (                                   /* Returns received data */
BYTE dat                                          /* Data to be sent */
)
{
    dat = mmc_spi_TXRX(dat);
    dc68:	f1 1c       	adc	r15, r1
    dc6a:	8f ef       	ldi	r24, 0xFF	; 255
            break;

        case MMC_GET_OCR :                        /* Receive OCR as an R3 resp (4 bytes) */
            if (send_cmd(CMD58, 0) == 0)          /* READ_OCR */
            {
                for (n = 4; n; n--) *ptr++ = xchg_spi(0xFF);
    dc6c:	83 d1       	rcall	.+774    	; 0xdf74 <mmc_spi_TXRX>
    dc6e:	f8 01       	movw	r30, r16
    dc70:	81 93       	st	Z+, r24
    dc72:	8f 01       	movw	r16, r30
    dc74:	ee 15       	cp	r30, r14
    dc76:	ff 05       	cpc	r31, r15
            }
            deselect();
            break;

        case MMC_GET_SDSTAT :                     /* Receive SD statsu as a data block (64 bytes) */
            if (send_cmd(ACMD13, 0) == 0)         /* SD_STATUS */
    dc78:	c1 f7       	brne	.-16     	; 0xdc6a <mmc_disk_ioctl+0x25e>
    dc7a:	db cf       	rjmp	.-74     	; 0xdc32 <mmc_disk_ioctl+0x226>
    dc7c:	40 e0       	ldi	r20, 0x00	; 0
    dc7e:	50 e0       	ldi	r21, 0x00	; 0
    dc80:	ba 01       	movw	r22, r20
    dc82:	8d e8       	ldi	r24, 0x8D	; 141
    dc84:	dc dc       	rcall	.-1608   	; 0xd63e <send_cmd>
            {
                xchg_spi(0xFF);
    dc86:	81 11       	cpse	r24, r1
    dc88:	f8 c0       	rjmp	.+496    	; 0xde7a <mmc_disk_ioctl+0x46e>
    dc8a:	8f ef       	ldi	r24, 0xFF	; 255
                if (rcvr_datablock(ptr, 64)) res = RES_OK;
    dc8c:	79 dc       	rcall	.-1806   	; 0xd580 <xchg_spi>
    dc8e:	60 e4       	ldi	r22, 0x40	; 64
    dc90:	70 e0       	ldi	r23, 0x00	; 0
    dc92:	c8 01       	movw	r24, r16
    dc94:	7d dc       	rcall	.-1798   	; 0xd590 <rcvr_datablock>
    {
        deselect();
        return RES_NOTRDY;
	}

    res = RES_ERROR;
    dc96:	01 e0       	ldi	r16, 0x01	; 1
    dc98:	10 e0       	ldi	r17, 0x00	; 0
    dc9a:	89 2b       	or	r24, r25
    dc9c:	09 f4       	brne	.+2      	; 0xdca0 <mmc_disk_ioctl+0x294>
    dc9e:	ef c0       	rjmp	.+478    	; 0xde7e <mmc_disk_ioctl+0x472>
    dca0:	ea c0       	rjmp	.+468    	; 0xde76 <mmc_disk_ioctl+0x46a>
void power_off (void)
{
/* Disable SPI function */
/* De-configure MOSI/MISO/SCLK/CS pins (set hi-z) */
/* Turn socket power off (nothing to do if no power controls) */
    mmc_power_off();
    dca2:	97 d1       	rcall	.+814    	; 0xdfd2 <mmc_power_off>
    dca4:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <Stat>
            deselect();
            break;

        case CTRL_POWER_OFF :                     /* Power off */
            power_off();
            Stat |= STA_NOINIT;
    dca8:	81 60       	ori	r24, 0x01	; 1
    dcaa:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <Stat>
    dcae:	00 e0       	ldi	r16, 0x00	; 0
            res = RES_OK;
    dcb0:	eb c0       	rjmp	.+470    	; 0xde88 <mmc_disk_ioctl+0x47c>
    dcb2:	fb 01       	movw	r30, r22
            break;
#if _USE_ISDIO
        case ISDIO_READ:
            sdi = buff;
            if (send_cmd(CMD48, 0x80000000 | (DWORD)sdi->func << 28 | (DWORD)sdi->addr << 9 | ((sdi->ndata - 1) & 0x1FF)) == 0)
    dcb4:	43 81       	ldd	r20, Z+3	; 0x03
    dcb6:	54 81       	ldd	r21, Z+4	; 0x04
    dcb8:	65 81       	ldd	r22, Z+5	; 0x05
    dcba:	76 81       	ldd	r23, Z+6	; 0x06
    dcbc:	39 e0       	ldi	r19, 0x09	; 9
    dcbe:	44 0f       	add	r20, r20
    dcc0:	55 1f       	adc	r21, r21
    dcc2:	66 1f       	adc	r22, r22
    dcc4:	77 1f       	adc	r23, r23
    dcc6:	3a 95       	dec	r19
    dcc8:	d1 f7       	brne	.-12     	; 0xdcbe <mmc_disk_ioctl+0x2b2>
    dcca:	70 68       	ori	r23, 0x80	; 128
    dccc:	80 81       	ld	r24, Z
    dcce:	90 e0       	ldi	r25, 0x00	; 0
    dcd0:	a0 e0       	ldi	r26, 0x00	; 0
    dcd2:	b0 e0       	ldi	r27, 0x00	; 0
    dcd4:	2c e1       	ldi	r18, 0x1C	; 28
    dcd6:	88 0f       	add	r24, r24
    dcd8:	99 1f       	adc	r25, r25
    dcda:	aa 1f       	adc	r26, r26
    dcdc:	bb 1f       	adc	r27, r27
    dcde:	2a 95       	dec	r18
    dce0:	d1 f7       	brne	.-12     	; 0xdcd6 <mmc_disk_ioctl+0x2ca>
    dce2:	48 2b       	or	r20, r24
    dce4:	59 2b       	or	r21, r25
    dce6:	6a 2b       	or	r22, r26
    dce8:	7b 2b       	or	r23, r27
    dcea:	81 81       	ldd	r24, Z+1	; 0x01
    dcec:	92 81       	ldd	r25, Z+2	; 0x02
    dcee:	01 97       	sbiw	r24, 0x01	; 1
    dcf0:	91 70       	andi	r25, 0x01	; 1
    dcf2:	a0 e0       	ldi	r26, 0x00	; 0
    dcf4:	b0 e0       	ldi	r27, 0x00	; 0
    dcf6:	48 2b       	or	r20, r24
    dcf8:	59 2b       	or	r21, r25
    dcfa:	6a 2b       	or	r22, r26
    dcfc:	7b 2b       	or	r23, r27
    dcfe:	80 e3       	ldi	r24, 0x30	; 48
    dd00:	9e dc       	rcall	.-1732   	; 0xd63e <send_cmd>
            {
                mmc_set_ms_timeout(1000);
    dd02:	81 11       	cpse	r24, r1
    dd04:	ba c0       	rjmp	.+372    	; 0xde7a <mmc_disk_ioctl+0x46e>
    dd06:	88 ee       	ldi	r24, 0xE8	; 232
    dd08:	93 e0       	ldi	r25, 0x03	; 3
static
BYTE xchg_spi (                                   /* Returns received data */
BYTE dat                                          /* Data to be sent */
)
{
    dat = mmc_spi_TXRX(dat);
    dd0a:	37 d1       	rcall	.+622    	; 0xdf7a <mmc_set_ms_timeout>
    dd0c:	8f ef       	ldi	r24, 0xFF	; 255
    dd0e:	32 d1       	rcall	.+612    	; 0xdf74 <mmc_spi_TXRX>
        case ISDIO_READ:
            sdi = buff;
            if (send_cmd(CMD48, 0x80000000 | (DWORD)sdi->func << 28 | (DWORD)sdi->addr << 9 | ((sdi->ndata - 1) & 0x1FF)) == 0)
            {
                mmc_set_ms_timeout(1000);
                while( (rc = xchg_spi(0xFF)) == 0xFF && !mmc_test_timeout() )
    dd10:	8f 3f       	cpi	r24, 0xFF	; 255
    dd12:	21 f4       	brne	.+8      	; 0xdd1c <mmc_disk_ioctl+0x310>
    dd14:	39 d1       	rcall	.+626    	; 0xdf88 <mmc_test_timeout>
    dd16:	89 2b       	or	r24, r25
    dd18:	c9 f3       	breq	.-14     	; 0xdd0c <mmc_disk_ioctl+0x300>
    dd1a:	af c0       	rjmp	.+350    	; 0xde7a <mmc_disk_ioctl+0x46e>
                    ;
                if (rc == 0xFE)
    dd1c:	8e 3f       	cpi	r24, 0xFE	; 254
    dd1e:	09 f0       	breq	.+2      	; 0xdd22 <mmc_disk_ioctl+0x316>
    dd20:	ac c0       	rjmp	.+344    	; 0xde7a <mmc_disk_ioctl+0x46e>
                {
                    for (bp = sdi->data, dc = sdi->ndata; dc; dc--) *bp++ = xchg_spi(0xFF);
    dd22:	f8 01       	movw	r30, r16
    dd24:	e7 80       	ldd	r14, Z+7	; 0x07
    dd26:	f0 84       	ldd	r15, Z+8	; 0x08
    dd28:	c1 80       	ldd	r12, Z+1	; 0x01
    dd2a:	d2 80       	ldd	r13, Z+2	; 0x02
    dd2c:	ce 0c       	add	r12, r14
    dd2e:	df 1c       	adc	r13, r15
    dd30:	ce 14       	cp	r12, r14
    dd32:	df 04       	cpc	r13, r15
static
BYTE xchg_spi (                                   /* Returns received data */
BYTE dat                                          /* Data to be sent */
)
{
    dat = mmc_spi_TXRX(dat);
    dd34:	31 f0       	breq	.+12     	; 0xdd42 <mmc_disk_ioctl+0x336>
    dd36:	8f ef       	ldi	r24, 0xFF	; 255
    dd38:	1d d1       	rcall	.+570    	; 0xdf74 <mmc_spi_TXRX>
                mmc_set_ms_timeout(1000);
                while( (rc = xchg_spi(0xFF)) == 0xFF && !mmc_test_timeout() )
                    ;
                if (rc == 0xFE)
                {
                    for (bp = sdi->data, dc = sdi->ndata; dc; dc--) *bp++ = xchg_spi(0xFF);
    dd3a:	f7 01       	movw	r30, r14
    dd3c:	81 93       	st	Z+, r24
    dd3e:	7f 01       	movw	r14, r30
    dd40:	f7 cf       	rjmp	.-18     	; 0xdd30 <mmc_disk_ioctl+0x324>
                    for (dc = 514 - sdi->ndata; dc; dc--) xchg_spi(0xFF);
    dd42:	f8 01       	movw	r30, r16
    dd44:	81 81       	ldd	r24, Z+1	; 0x01
    dd46:	92 81       	ldd	r25, Z+2	; 0x02
    dd48:	02 e0       	ldi	r16, 0x02	; 2
    dd4a:	12 e0       	ldi	r17, 0x02	; 2
    dd4c:	08 1b       	sub	r16, r24
    dd4e:	19 0b       	sbc	r17, r25
    dd50:	01 15       	cp	r16, r1
    dd52:	11 05       	cpc	r17, r1
    dd54:	09 f4       	brne	.+2      	; 0xdd58 <mmc_disk_ioctl+0x34c>
    dd56:	6d cf       	rjmp	.-294    	; 0xdc32 <mmc_disk_ioctl+0x226>
    dd58:	8f ef       	ldi	r24, 0xFF	; 255
    dd5a:	12 dc       	rcall	.-2012   	; 0xd580 <xchg_spi>
    dd5c:	01 50       	subi	r16, 0x01	; 1
    dd5e:	11 09       	sbc	r17, r1
    dd60:	f7 cf       	rjmp	.-18     	; 0xdd50 <mmc_disk_ioctl+0x344>
    dd62:	fb 01       	movw	r30, r22
            deselect();
            break;

        case ISDIO_WRITE:
            sdi = buff;
            if (send_cmd(CMD49, 0x80000000 | (DWORD)sdi->func << 28 | (DWORD)sdi->addr << 9 | ((sdi->ndata - 1) & 0x1FF)) == 0)
    dd64:	43 81       	ldd	r20, Z+3	; 0x03
    dd66:	54 81       	ldd	r21, Z+4	; 0x04
    dd68:	65 81       	ldd	r22, Z+5	; 0x05
    dd6a:	76 81       	ldd	r23, Z+6	; 0x06
    dd6c:	39 e0       	ldi	r19, 0x09	; 9
    dd6e:	44 0f       	add	r20, r20
    dd70:	55 1f       	adc	r21, r21
    dd72:	66 1f       	adc	r22, r22
    dd74:	77 1f       	adc	r23, r23
    dd76:	3a 95       	dec	r19
    dd78:	d1 f7       	brne	.-12     	; 0xdd6e <mmc_disk_ioctl+0x362>
    dd7a:	70 68       	ori	r23, 0x80	; 128
    dd7c:	80 81       	ld	r24, Z
    dd7e:	90 e0       	ldi	r25, 0x00	; 0
    dd80:	a0 e0       	ldi	r26, 0x00	; 0
    dd82:	b0 e0       	ldi	r27, 0x00	; 0
    dd84:	2c e1       	ldi	r18, 0x1C	; 28
    dd86:	88 0f       	add	r24, r24
    dd88:	99 1f       	adc	r25, r25
    dd8a:	aa 1f       	adc	r26, r26
    dd8c:	bb 1f       	adc	r27, r27
    dd8e:	2a 95       	dec	r18
    dd90:	d1 f7       	brne	.-12     	; 0xdd86 <mmc_disk_ioctl+0x37a>
    dd92:	48 2b       	or	r20, r24
    dd94:	59 2b       	or	r21, r25
    dd96:	6a 2b       	or	r22, r26
    dd98:	7b 2b       	or	r23, r27
    dd9a:	81 81       	ldd	r24, Z+1	; 0x01
    dd9c:	92 81       	ldd	r25, Z+2	; 0x02
    dd9e:	01 97       	sbiw	r24, 0x01	; 1
    dda0:	91 70       	andi	r25, 0x01	; 1
    dda2:	a0 e0       	ldi	r26, 0x00	; 0
    dda4:	b0 e0       	ldi	r27, 0x00	; 0
    dda6:	48 2b       	or	r20, r24
    dda8:	59 2b       	or	r21, r25
    ddaa:	6a 2b       	or	r22, r26
    ddac:	7b 2b       	or	r23, r27
    ddae:	81 e3       	ldi	r24, 0x31	; 49
    ddb0:	46 dc       	rcall	.-1908   	; 0xd63e <send_cmd>
            {
                xchg_spi(0xFF); xchg_spi(0xFE);
    ddb2:	81 11       	cpse	r24, r1
    ddb4:	62 c0       	rjmp	.+196    	; 0xde7a <mmc_disk_ioctl+0x46e>
    ddb6:	8f ef       	ldi	r24, 0xFF	; 255
    ddb8:	e3 db       	rcall	.-2106   	; 0xd580 <xchg_spi>
    ddba:	8e ef       	ldi	r24, 0xFE	; 254
    ddbc:	e1 db       	rcall	.-2110   	; 0xd580 <xchg_spi>
                for (bp = sdi->data, dc = sdi->ndata; dc; dc--) xchg_spi(*bp++);
    ddbe:	f8 01       	movw	r30, r16
    ddc0:	e7 80       	ldd	r14, Z+7	; 0x07
    ddc2:	f0 84       	ldd	r15, Z+8	; 0x08
    ddc4:	c1 80       	ldd	r12, Z+1	; 0x01
    ddc6:	d2 80       	ldd	r13, Z+2	; 0x02
    ddc8:	ce 0c       	add	r12, r14
    ddca:	df 1c       	adc	r13, r15
    ddcc:	ec 14       	cp	r14, r12
    ddce:	fd 04       	cpc	r15, r13
    ddd0:	29 f0       	breq	.+10     	; 0xdddc <mmc_disk_ioctl+0x3d0>
    ddd2:	f7 01       	movw	r30, r14
    ddd4:	81 91       	ld	r24, Z+
    ddd6:	7f 01       	movw	r14, r30
    ddd8:	d3 db       	rcall	.-2138   	; 0xd580 <xchg_spi>
    ddda:	f8 cf       	rjmp	.-16     	; 0xddcc <mmc_disk_ioctl+0x3c0>
                for (dc = 514 - sdi->ndata; dc; dc--) xchg_spi(0xFF);
    dddc:	f8 01       	movw	r30, r16
    ddde:	81 81       	ldd	r24, Z+1	; 0x01
    dde0:	92 81       	ldd	r25, Z+2	; 0x02
    dde2:	02 e0       	ldi	r16, 0x02	; 2
    dde4:	12 e0       	ldi	r17, 0x02	; 2
    dde6:	08 1b       	sub	r16, r24
    dde8:	19 0b       	sbc	r17, r25
    ddea:	8f ef       	ldi	r24, 0xFF	; 255
    ddec:	01 15       	cp	r16, r1
    ddee:	11 05       	cpc	r17, r1
    ddf0:	09 f4       	brne	.+2      	; 0xddf4 <mmc_disk_ioctl+0x3e8>
    ddf2:	3b c0       	rjmp	.+118    	; 0xde6a <mmc_disk_ioctl+0x45e>
    ddf4:	c5 db       	rcall	.-2166   	; 0xd580 <xchg_spi>
    ddf6:	01 50       	subi	r16, 0x01	; 1
    ddf8:	11 09       	sbc	r17, r1
    ddfa:	f7 cf       	rjmp	.-18     	; 0xddea <mmc_disk_ioctl+0x3de>
    ddfc:	fb 01       	movw	r30, r22
            deselect();
            break;

        case ISDIO_MRITE:
            sdi = buff;
            if (send_cmd(CMD49, 0x84000000 | (DWORD)sdi->func << 28 | (DWORD)sdi->addr << 9 | sdi->ndata >> 8) == 0)
    ddfe:	43 81       	ldd	r20, Z+3	; 0x03
    de00:	54 81       	ldd	r21, Z+4	; 0x04
    de02:	65 81       	ldd	r22, Z+5	; 0x05
    de04:	76 81       	ldd	r23, Z+6	; 0x06
    de06:	89 e0       	ldi	r24, 0x09	; 9
    de08:	44 0f       	add	r20, r20
    de0a:	55 1f       	adc	r21, r21
    de0c:	66 1f       	adc	r22, r22
    de0e:	77 1f       	adc	r23, r23
    de10:	8a 95       	dec	r24
    de12:	d1 f7       	brne	.-12     	; 0xde08 <mmc_disk_ioctl+0x3fc>
    de14:	74 68       	ori	r23, 0x84	; 132
    de16:	80 81       	ld	r24, Z
    de18:	90 e0       	ldi	r25, 0x00	; 0
    de1a:	a0 e0       	ldi	r26, 0x00	; 0
    de1c:	b0 e0       	ldi	r27, 0x00	; 0
    de1e:	2c e1       	ldi	r18, 0x1C	; 28
    de20:	88 0f       	add	r24, r24
    de22:	99 1f       	adc	r25, r25
    de24:	aa 1f       	adc	r26, r26
    de26:	bb 1f       	adc	r27, r27
    de28:	2a 95       	dec	r18
    de2a:	d1 f7       	brne	.-12     	; 0xde20 <mmc_disk_ioctl+0x414>
    de2c:	48 2b       	or	r20, r24
    de2e:	59 2b       	or	r21, r25
    de30:	6a 2b       	or	r22, r26
    de32:	7b 2b       	or	r23, r27
    de34:	82 81       	ldd	r24, Z+2	; 0x02
    de36:	90 e0       	ldi	r25, 0x00	; 0
    de38:	a0 e0       	ldi	r26, 0x00	; 0
    de3a:	b0 e0       	ldi	r27, 0x00	; 0
    de3c:	48 2b       	or	r20, r24
    de3e:	59 2b       	or	r21, r25
    de40:	6a 2b       	or	r22, r26
    de42:	7b 2b       	or	r23, r27
            {
                xchg_spi(0xFF); xchg_spi(0xFE);
    de44:	81 e3       	ldi	r24, 0x31	; 49
    de46:	fb db       	rcall	.-2058   	; 0xd63e <send_cmd>
    de48:	81 11       	cpse	r24, r1
    de4a:	17 c0       	rjmp	.+46     	; 0xde7a <mmc_disk_ioctl+0x46e>
    de4c:	8f ef       	ldi	r24, 0xFF	; 255
    de4e:	98 db       	rcall	.-2256   	; 0xd580 <xchg_spi>
                xchg_spi(sdi->ndata);
    de50:	8e ef       	ldi	r24, 0xFE	; 254
    de52:	96 db       	rcall	.-2260   	; 0xd580 <xchg_spi>
    de54:	f8 01       	movw	r30, r16
    de56:	81 81       	ldd	r24, Z+1	; 0x01
    de58:	93 db       	rcall	.-2266   	; 0xd580 <xchg_spi>
    de5a:	01 e0       	ldi	r16, 0x01	; 1
                for (dc = 513; dc; dc--) xchg_spi(0xFF);
    de5c:	12 e0       	ldi	r17, 0x02	; 2
    de5e:	8f ef       	ldi	r24, 0xFF	; 255
    de60:	8f db       	rcall	.-2274   	; 0xd580 <xchg_spi>
    de62:	01 50       	subi	r16, 0x01	; 1
    de64:	11 09       	sbc	r17, r1
    de66:	d9 f7       	brne	.-10     	; 0xde5e <mmc_disk_ioctl+0x452>
static
BYTE xchg_spi (                                   /* Returns received data */
BYTE dat                                          /* Data to be sent */
)
{
    dat = mmc_spi_TXRX(dat);
    de68:	8f ef       	ldi	r24, 0xFF	; 255
    de6a:	84 d0       	rcall	.+264    	; 0xdf74 <mmc_spi_TXRX>
    de6c:	8f 71       	andi	r24, 0x1F	; 31
    {
        deselect();
        return RES_NOTRDY;
	}

    res = RES_ERROR;
    de6e:	01 e0       	ldi	r16, 0x01	; 1
    de70:	10 e0       	ldi	r17, 0x00	; 0
    de72:	85 30       	cpi	r24, 0x05	; 5
    de74:	21 f4       	brne	.+8      	; 0xde7e <mmc_disk_ioctl+0x472>
    de76:	00 e0       	ldi	r16, 0x00	; 0
    de78:	02 c0       	rjmp	.+4      	; 0xde7e <mmc_disk_ioctl+0x472>
    de7a:	01 e0       	ldi	r16, 0x01	; 1
    de7c:	10 e0       	ldi	r17, 0x00	; 0
    de7e:	82 db       	rcall	.-2300   	; 0xd584 <deselect>
                xchg_spi(0xFF); xchg_spi(0xFE);
                xchg_spi(sdi->ndata);
                for (dc = 513; dc; dc--) xchg_spi(0xFF);
                if ((xchg_spi(0xFF) & 0x1F) == 0x05) res = RES_OK;
            }
            deselect();
    de80:	04 c0       	rjmp	.+8      	; 0xde8a <mmc_disk_ioctl+0x47e>
    de82:	03 e0       	ldi	r16, 0x03	; 3
            break;
    de84:	01 c0       	rjmp	.+2      	; 0xde88 <mmc_disk_ioctl+0x47c>
    BYTE rc, *bp;
    UINT dc;
#endif

    if (Stat & STA_NOINIT)
        return RES_NOTRDY;
    de86:	04 e0       	ldi	r16, 0x04	; 4
    de88:	10 e0       	ldi	r17, 0x00	; 0
            }
            deselect();
            break;
#endif
        default:
            res = RES_PARERR;
    de8a:	c8 01       	movw	r24, r16
    de8c:	60 96       	adiw	r28, 0x10	; 16
    }

    return res;
}
    de8e:	e8 e0       	ldi	r30, 0x08	; 8
    de90:	0c 94 ca e8 	jmp	0x1d194	; 0x1d194 <__epilogue_restores__+0x14>

0000de94 <mmc_disk_timerproc>:
    de94:	cf 93       	push	r28
    de96:	80 91 25 18 	lds	r24, 0x1825	; 0x801825 <Timer1>
{
    BYTE n;
    BYTE s;

    n = Timer1;                                   /* 100Hz decrement timer */
    if (n) Timer1 = --n;
    de9a:	88 23       	and	r24, r24
    de9c:	19 f0       	breq	.+6      	; 0xdea4 <mmc_disk_timerproc+0x10>
    de9e:	81 50       	subi	r24, 0x01	; 1
    dea0:	80 93 25 18 	sts	0x1825, r24	; 0x801825 <Timer1>
    n = Timer2;
    dea4:	80 91 24 18 	lds	r24, 0x1824	; 0x801824 <Timer2>
    if (n) Timer2 = --n;
    dea8:	88 23       	and	r24, r24
    deaa:	19 f0       	breq	.+6      	; 0xdeb2 <mmc_disk_timerproc+0x1e>
    deac:	81 50       	subi	r24, 0x01	; 1
    deae:	80 93 24 18 	sts	0x1824, r24	; 0x801824 <Timer2>

    s = Stat;
    deb2:	c0 91 35 01 	lds	r28, 0x0135	; 0x800135 <Stat>
        s |= STA_PROTECT;
    else                                          /* Write enabled */
        s &= ~STA_PROTECT;
#endif

    if (MMC_CD)                                   /* Card inserted */
    deb6:	8e d0       	rcall	.+284    	; 0xdfd4 <mmc_ins_status>
    deb8:	89 2b       	or	r24, r25
    deba:	11 f0       	breq	.+4      	; 0xdec0 <mmc_disk_timerproc+0x2c>
	{
        s &= ~STA_NODISK;
    debc:	cd 7f       	andi	r28, 0xFD	; 253
    debe:	04 c0       	rjmp	.+8      	; 0xdec8 <mmc_disk_timerproc+0x34>
	}
    else                                          /* Socket empty */
	{	
        s |= (STA_NODISK | STA_NOINIT);
    dec0:	c3 60       	ori	r28, 0x03	; 3
		set_error(1);
    dec2:	81 e0       	ldi	r24, 0x01	; 1
    dec4:	0e 94 74 27 	call	0x4ee8	; 0x4ee8 <set_error>
	}

    Stat = s;                                     /* Update MMC status */
    dec8:	c0 93 35 01 	sts	0x0135, r28	; 0x800135 <Stat>
}
    decc:	cf 91       	pop	r28
    dece:	08 95       	ret

0000ded0 <mmc_install_timer>:
void mmc_ms_wait(int ms)
{
    mmc_set_ms_timeout(ms);
    while(!mmc_test_timeout())
        ;
}
    ded0:	00 d0       	rcall	.+0      	; 0xded2 <mmc_install_timer+0x2>
    ded2:	1f 92       	push	r1
    ded4:	10 92 2f 18 	sts	0x182F, r1	; 0x80182f <_mmc_timeout+0x1>
    ded8:	10 92 2e 18 	sts	0x182E, r1	; 0x80182e <_mmc_timeout>
    dedc:	61 e0       	ldi	r22, 0x01	; 1
    dede:	70 e0       	ldi	r23, 0x00	; 0
    dee0:	87 ef       	ldi	r24, 0xF7	; 247
    dee2:	9f e6       	ldi	r25, 0x6F	; 111
    dee4:	0e 94 aa 35 	call	0x6b54	; 0x6b54 <set_timers>
    dee8:	01 96       	adiw	r24, 0x01	; 1
    deea:	51 f4       	brne	.+20     	; 0xdf00 <mmc_install_timer+0x30>
    deec:	89 e2       	ldi	r24, 0x29	; 41
    deee:	98 e0       	ldi	r25, 0x08	; 8
    def0:	a0 e0       	ldi	r26, 0x00	; 0
    def2:	ed b7       	in	r30, 0x3d	; 61
    def4:	fe b7       	in	r31, 0x3e	; 62
    def6:	81 83       	std	Z+1, r24	; 0x01
    def8:	92 83       	std	Z+2, r25	; 0x02
    defa:	a3 83       	std	Z+3, r26	; 0x03
    defc:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
    df00:	0f 90       	pop	r0
    df02:	0f 90       	pop	r0
    df04:	0f 90       	pop	r0
    df06:	08 95       	ret

0000df08 <mmc_spi_begin>:
    df08:	60 91 2a 18 	lds	r22, 0x182A	; 0x80182a <_mmc_clock>
    df0c:	70 91 2b 18 	lds	r23, 0x182B	; 0x80182b <_mmc_clock+0x1>
    df10:	80 91 2c 18 	lds	r24, 0x182C	; 0x80182c <_mmc_clock+0x2>
    df14:	90 91 2d 18 	lds	r25, 0x182D	; 0x80182d <_mmc_clock+0x3>
    df18:	4b e0       	ldi	r20, 0x0B	; 11
    df1a:	50 e0       	ldi	r21, 0x00	; 0
    df1c:	0c 94 1b 27 	jmp	0x4e36	; 0x4e36 <spi_begin>
    df20:	08 95       	ret

0000df22 <mmc_spi_end>:
    df22:	8b e0       	ldi	r24, 0x0B	; 11
    df24:	0c 94 b7 26 	jmp	0x4d6e	; 0x4d6e <spi_end>
    df28:	08 95       	ret

0000df2a <mmc_slow>:
    df2a:	80 e2       	ldi	r24, 0x20	; 32
    df2c:	91 ea       	ldi	r25, 0xA1	; 161
    df2e:	a7 e0       	ldi	r26, 0x07	; 7
    df30:	b0 e0       	ldi	r27, 0x00	; 0
    df32:	80 93 2a 18 	sts	0x182A, r24	; 0x80182a <_mmc_clock>
    df36:	90 93 2b 18 	sts	0x182B, r25	; 0x80182b <_mmc_clock+0x1>
    df3a:	a0 93 2c 18 	sts	0x182C, r26	; 0x80182c <_mmc_clock+0x2>
    df3e:	b0 93 2d 18 	sts	0x182D, r27	; 0x80182d <_mmc_clock+0x3>
    df42:	08 95       	ret

0000df44 <mmc_spi_init>:
    df44:	8b e0       	ldi	r24, 0x0B	; 11
    df46:	0e 94 b5 26 	call	0x4d6a	; 0x4d6a <chip_select_init>
    df4a:	ef cf       	rjmp	.-34     	; 0xdf2a <mmc_slow>
    df4c:	08 95       	ret

0000df4e <mmc_fast>:
    df4e:	80 e4       	ldi	r24, 0x40	; 64
    df50:	9b e4       	ldi	r25, 0x4B	; 75
    df52:	ac e4       	ldi	r26, 0x4C	; 76
    df54:	b0 e0       	ldi	r27, 0x00	; 0
    df56:	80 93 2a 18 	sts	0x182A, r24	; 0x80182a <_mmc_clock>
    df5a:	90 93 2b 18 	sts	0x182B, r25	; 0x80182b <_mmc_clock+0x1>
    df5e:	a0 93 2c 18 	sts	0x182C, r26	; 0x80182c <_mmc_clock+0x2>
    df62:	b0 93 2d 18 	sts	0x182D, r27	; 0x80182d <_mmc_clock+0x3>
    df66:	08 95       	ret

0000df68 <mmc_spi_TX_buffer>:
    df68:	0c 94 e7 26 	jmp	0x4dce	; 0x4dce <spi_TX_buffer>
    df6c:	08 95       	ret

0000df6e <mmc_spi_RX_buffer>:
    df6e:	0c 94 e9 26 	jmp	0x4dd2	; 0x4dd2 <spi_RX_buffer>
    df72:	08 95       	ret

0000df74 <mmc_spi_TXRX>:
    df74:	0c 94 63 27 	jmp	0x4ec6	; 0x4ec6 <spi_TXRX>
    df78:	08 95       	ret

0000df7a <mmc_set_ms_timeout>:
    df7a:	f8 94       	cli
    df7c:	90 93 2f 18 	sts	0x182F, r25	; 0x80182f <_mmc_timeout+0x1>
    df80:	80 93 2e 18 	sts	0x182E, r24	; 0x80182e <_mmc_timeout>
    df84:	78 94       	sei
    df86:	08 95       	ret

0000df88 <mmc_test_timeout>:
    df88:	00 d0       	rcall	.+0      	; 0xdf8a <mmc_test_timeout+0x2>
    df8a:	1f 92       	push	r1
    df8c:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <Stat>
    df90:	81 fd       	sbrc	r24, 1
    df92:	15 c0       	rjmp	.+42     	; 0xdfbe <mmc_test_timeout+0x36>
    df94:	80 91 2e 18 	lds	r24, 0x182E	; 0x80182e <_mmc_timeout>
    df98:	90 91 2f 18 	lds	r25, 0x182F	; 0x80182f <_mmc_timeout+0x1>
    df9c:	89 2b       	or	r24, r25
    df9e:	91 f4       	brne	.+36     	; 0xdfc4 <mmc_test_timeout+0x3c>
    dfa0:	8c e1       	ldi	r24, 0x1C	; 28
    dfa2:	98 e0       	ldi	r25, 0x08	; 8
    dfa4:	a0 e0       	ldi	r26, 0x00	; 0
    dfa6:	ed b7       	in	r30, 0x3d	; 61
    dfa8:	fe b7       	in	r31, 0x3e	; 62
    dfaa:	81 83       	std	Z+1, r24	; 0x01
    dfac:	92 83       	std	Z+2, r25	; 0x02
    dfae:	a3 83       	std	Z+3, r26	; 0x03
    dfb0:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
    dfb4:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <Stat>
    dfb8:	83 60       	ori	r24, 0x03	; 3
    dfba:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <Stat>
    dfbe:	81 e0       	ldi	r24, 0x01	; 1
    dfc0:	90 e0       	ldi	r25, 0x00	; 0
    dfc2:	02 c0       	rjmp	.+4      	; 0xdfc8 <mmc_test_timeout+0x40>
    dfc4:	80 e0       	ldi	r24, 0x00	; 0
    dfc6:	90 e0       	ldi	r25, 0x00	; 0
    dfc8:	0f 90       	pop	r0
    dfca:	0f 90       	pop	r0
    dfcc:	0f 90       	pop	r0
    dfce:	08 95       	ret

0000dfd0 <mmc_power_on>:
    dfd0:	08 95       	ret

0000dfd2 <mmc_power_off>:
/// @brief  MMC Power OFF
///
/// @return void
MEMSPACE
void mmc_power_off()
{
    dfd2:	08 95       	ret

0000dfd4 <mmc_ins_status>:

MEMSPACE
int mmc_ins_status()
{
	// HI when card is NOT inserted
	if( GPIO_PIN_RD(GPIO_C7) )
    dfd4:	3f 98       	cbi	0x07, 7	; 7
    dfd6:	86 b1       	in	r24, 0x06	; 6
    dfd8:	08 2e       	mov	r0, r24
    dfda:	00 0c       	add	r0, r0
    dfdc:	99 0b       	sbc	r25, r25
    dfde:	80 95       	com	r24
    dfe0:	90 95       	com	r25
		return (0);
	else
		return(1);;	
}
    dfe2:	89 2f       	mov	r24, r25
    dfe4:	88 1f       	adc	r24, r24
    dfe6:	88 27       	eor	r24, r24
    dfe8:	88 1f       	adc	r24, r24
    dfea:	90 e0       	ldi	r25, 0x00	; 0
    dfec:	08 95       	ret

0000dfee <mmc_task>:
 @brief 1000HZ timer task
 @return void
*/
static void mmc_task(void)
{
    if(_mmc_timeout)
    dfee:	80 91 2e 18 	lds	r24, 0x182E	; 0x80182e <_mmc_timeout>
    dff2:	90 91 2f 18 	lds	r25, 0x182F	; 0x80182f <_mmc_timeout+0x1>
    dff6:	00 97       	sbiw	r24, 0x00	; 0
    dff8:	29 f0       	breq	.+10     	; 0xe004 <mmc_task+0x16>
        _mmc_timeout--;
    dffa:	01 97       	sbiw	r24, 0x01	; 1
    dffc:	90 93 2f 18 	sts	0x182F, r25	; 0x80182f <_mmc_timeout+0x1>
    e000:	80 93 2e 18 	sts	0x182E, r24	; 0x80182e <_mmc_timeout>

// 100HZ
    if(_mmc_pre++  < 10)
    e004:	80 91 28 18 	lds	r24, 0x1828	; 0x801828 <_mmc_pre>
    e008:	90 91 29 18 	lds	r25, 0x1829	; 0x801829 <_mmc_pre+0x1>
    e00c:	8a 30       	cpi	r24, 0x0A	; 10
    e00e:	91 05       	cpc	r25, r1
    e010:	30 f4       	brcc	.+12     	; 0xe01e <mmc_task+0x30>
    e012:	01 96       	adiw	r24, 0x01	; 1
    e014:	90 93 29 18 	sts	0x1829, r25	; 0x801829 <_mmc_pre+0x1>
    e018:	80 93 28 18 	sts	0x1828, r24	; 0x801828 <_mmc_pre>
    e01c:	08 95       	ret
        return;

    _mmc_pre = 0;
    e01e:	10 92 29 18 	sts	0x1829, r1	; 0x801829 <_mmc_pre+0x1>
    e022:	10 92 28 18 	sts	0x1828, r1	; 0x801828 <_mmc_pre>

	if(!mmc_ins_status())
    e026:	d6 df       	rcall	.-84     	; 0xdfd4 <mmc_ins_status>
    e028:	89 2b       	or	r24, r25
    e02a:	19 f4       	brne	.+6      	; 0xe032 <mmc_task+0x44>
		set_error(1);
    e02c:	81 e0       	ldi	r24, 0x01	; 1
    e02e:	0e 94 74 27 	call	0x4ee8	; 0x4ee8 <set_error>

    mmc_disk_timerproc();
    e032:	30 cf       	rjmp	.-416    	; 0xde94 <mmc_disk_timerproc>
    e034:	08 95       	ret

0000e036 <mmc_init>:
///
/// @param[in] verbose: display initialisation messages
/// @return
MEMSPACE
int mmc_init(int verbose)
{
    e036:	ac e0       	ldi	r26, 0x0C	; 12
    e038:	b1 e0       	ldi	r27, 0x01	; 1
    e03a:	e1 e2       	ldi	r30, 0x21	; 33
    e03c:	f0 e7       	ldi	r31, 0x70	; 112
    e03e:	0c 94 b0 e8 	jmp	0x1d160	; 0x1d160 <__prologue_saves__+0x18>
    e042:	7c 01       	movw	r14, r24
    int rc;

    char buff[MAX_NAME_LEN+1];

    Stat = 0;
    e044:	10 92 35 01 	sts	0x0135, r1	; 0x800135 <Stat>
	clear_error();
    e048:	0e 94 79 27 	call	0x4ef2	; 0x4ef2 <clear_error>

	// Card Detect
	GPIO_PIN_LATCH_LOW(GPIO_C7);
    e04c:	47 98       	cbi	0x08, 7	; 8
	GPIO_PIN_DIR_IN(GPIO_C7);
    e04e:	3f 98       	cbi	0x07, 7	; 7

    mmc_spi_init();
    e050:	79 df       	rcall	.-270    	; 0xdf44 <mmc_spi_init>

    if( verbose)
    e052:	e1 14       	cp	r14, r1
    e054:	f1 04       	cpc	r15, r1
    e056:	51 f0       	breq	.+20     	; 0xe06c <mmc_init+0x36>
    {
        printf("START MMC INIT\n");
    e058:	8c e0       	ldi	r24, 0x0C	; 12
    e05a:	98 e0       	ldi	r25, 0x08	; 8
    e05c:	a0 e0       	ldi	r26, 0x00	; 0
    e05e:	ed b7       	in	r30, 0x3d	; 61
    e060:	fe b7       	in	r31, 0x3e	; 62
    e062:	81 83       	std	Z+1, r24	; 0x01
    e064:	92 83       	std	Z+2, r25	; 0x02
    e066:	a3 83       	std	Z+3, r26	; 0x03
    e068:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
    }
// we only install timers once!
    if(!mmc_init_flag)
    e06c:	80 91 26 18 	lds	r24, 0x1826	; 0x801826 <mmc_init_flag>
    e070:	90 91 27 18 	lds	r25, 0x1827	; 0x801827 <mmc_init_flag+0x1>
    e074:	89 2b       	or	r24, r25
        mmc_install_timer();
    e076:	09 f4       	brne	.+2      	; 0xe07a <mmc_init+0x44>

	if(!mmc_ins_status())
    e078:	2b df       	rcall	.-426    	; 0xded0 <mmc_install_timer>
    e07a:	ac df       	rcall	.-168    	; 0xdfd4 <mmc_ins_status>
    e07c:	89 2b       	or	r24, r25
    e07e:	61 f4       	brne	.+24     	; 0xe098 <mmc_init+0x62>
	{
		printf("*** MMC Card NOT Inserted! ***\n");
    e080:	8c ee       	ldi	r24, 0xEC	; 236
    e082:	97 e0       	ldi	r25, 0x07	; 7
    e084:	a0 e0       	ldi	r26, 0x00	; 0
    e086:	ed b7       	in	r30, 0x3d	; 61
    e088:	fe b7       	in	r31, 0x3e	; 62
    e08a:	81 83       	std	Z+1, r24	; 0x01
    e08c:	92 83       	std	Z+2, r25	; 0x02
    e08e:	a3 83       	std	Z+3, r26	; 0x03
    e090:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
		return(RES_NOTRDY);	
    e094:	83 e0       	ldi	r24, 0x03	; 3
    e096:	9a c0       	rjmp	.+308    	; 0xe1cc <mmc_init+0x196>
	}


    if( verbose)
    e098:	e1 14       	cp	r14, r1
    e09a:	f1 04       	cpc	r15, r1
    e09c:	11 f1       	breq	.+68     	; 0xe0e2 <mmc_init+0xac>
    {
		printf("MMC Card Inserted\n");
    e09e:	89 ed       	ldi	r24, 0xD9	; 217
    e0a0:	97 e0       	ldi	r25, 0x07	; 7
    e0a2:	a0 e0       	ldi	r26, 0x00	; 0
    e0a4:	ed b7       	in	r30, 0x3d	; 61
    e0a6:	fe b7       	in	r31, 0x3e	; 62
    e0a8:	81 83       	std	Z+1, r24	; 0x01
    e0aa:	92 83       	std	Z+2, r25	; 0x02
    e0ac:	a3 83       	std	Z+3, r26	; 0x03
    e0ae:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>

#if defined (FF_USE_LFN)
        printf("LFN Enabled");
    e0b2:	8d ec       	ldi	r24, 0xCD	; 205
    e0b4:	97 e0       	ldi	r25, 0x07	; 7
    e0b6:	a0 e0       	ldi	r26, 0x00	; 0
    e0b8:	ed b7       	in	r30, 0x3d	; 61
    e0ba:	fe b7       	in	r31, 0x3e	; 62
    e0bc:	81 83       	std	Z+1, r24	; 0x01
    e0be:	92 83       	std	Z+2, r25	; 0x02
    e0c0:	a3 83       	std	Z+3, r26	; 0x03
    e0c2:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
#else
        printf("LFN Disabled");
#endif
        printf(", Code page: %u\n", FF_CODE_PAGE);
    e0c6:	85 eb       	ldi	r24, 0xB5	; 181
    e0c8:	91 e0       	ldi	r25, 0x01	; 1
    e0ca:	ed b7       	in	r30, 0x3d	; 61
    e0cc:	fe b7       	in	r31, 0x3e	; 62
    e0ce:	95 83       	std	Z+5, r25	; 0x05
    e0d0:	84 83       	std	Z+4, r24	; 0x04
    e0d2:	8c eb       	ldi	r24, 0xBC	; 188
    e0d4:	97 e0       	ldi	r25, 0x07	; 7
    e0d6:	a0 e0       	ldi	r26, 0x00	; 0
    e0d8:	81 83       	std	Z+1, r24	; 0x01
    e0da:	92 83       	std	Z+2, r25	; 0x02
    e0dc:	a3 83       	std	Z+3, r26	; 0x03
    e0de:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
    }

    rc = disk_initialize(DEV_MMC);                // aliased to mmc_disk_initialize()
    e0e2:	80 e0       	ldi	r24, 0x00	; 0
    e0e4:	1d da       	rcall	.-3014   	; 0xd520 <disk_initialize>
    e0e6:	08 2f       	mov	r16, r24
    e0e8:	10 e0       	ldi	r17, 0x00	; 0

    if( rc != RES_OK  )
    e0ea:	01 15       	cp	r16, r1
    e0ec:	11 05       	cpc	r17, r1
        put_rc(rc);
    e0ee:	19 f0       	breq	.+6      	; 0xe0f6 <mmc_init+0xc0>
    e0f0:	c8 01       	movw	r24, r16
    e0f2:	64 d1       	rcall	.+712    	; 0xe3bc <put_rc>
    e0f4:	0e c0       	rjmp	.+28     	; 0xe112 <mmc_init+0xdc>

    if( rc == RES_OK)
        rc = f_mount(&Fatfs[0],"/", 0);
    e0f6:	40 e0       	ldi	r20, 0x00	; 0
    e0f8:	66 ea       	ldi	r22, 0xA6	; 166
    e0fa:	78 e0       	ldi	r23, 0x08	; 8
    e0fc:	80 e8       	ldi	r24, 0x80	; 128
    e0fe:	9a e1       	ldi	r25, 0x1A	; 26
    e100:	0e 94 68 5a 	call	0xb4d0	; 0xb4d0 <f_mount>
    e104:	8c 01       	movw	r16, r24

    if( rc != RES_OK || verbose)
    e106:	89 2b       	or	r24, r25
    e108:	21 f4       	brne	.+8      	; 0xe112 <mmc_init+0xdc>
    e10a:	e1 14       	cp	r14, r1
    e10c:	f1 04       	cpc	r15, r1
    e10e:	09 f4       	brne	.+2      	; 0xe112 <mmc_init+0xdc>
        put_rc( rc );
    e110:	4f c0       	rjmp	.+158    	; 0xe1b0 <mmc_init+0x17a>
    e112:	c8 01       	movw	r24, r16
    e114:	53 d1       	rcall	.+678    	; 0xe3bc <put_rc>

    if (verbose )
    e116:	e1 14       	cp	r14, r1
    e118:	f1 04       	cpc	r15, r1
    e11a:	09 f4       	brne	.+2      	; 0xe11e <mmc_init+0xe8>
    e11c:	49 c0       	rjmp	.+146    	; 0xe1b0 <mmc_init+0x17a>
    {
        DWORD blksize = 0;
    e11e:	c7 5f       	subi	r28, 0xF7	; 247
    e120:	de 4f       	sbci	r29, 0xFE	; 254
    e122:	18 82       	st	Y, r1
    e124:	19 82       	std	Y+1, r1	; 0x01
    e126:	1a 82       	std	Y+2, r1	; 0x02
    e128:	1b 82       	std	Y+3, r1	; 0x03
    e12a:	c9 50       	subi	r28, 0x09	; 9
    e12c:	d1 40       	sbci	r29, 0x01	; 1
        if(rc == RES_OK)
    e12e:	01 15       	cp	r16, r1
    e130:	11 05       	cpc	r17, r1
        {
            rc = disk_ioctl ( DEV_MMC, GET_BLOCK_SIZE, (void *) &blksize);
    e132:	a1 f5       	brne	.+104    	; 0xe19c <mmc_init+0x166>
    e134:	ae 01       	movw	r20, r28
    e136:	47 5f       	subi	r20, 0xF7	; 247
    e138:	5e 4f       	sbci	r21, 0xFE	; 254
    e13a:	63 e0       	ldi	r22, 0x03	; 3
    e13c:	80 e0       	ldi	r24, 0x00	; 0
    e13e:	16 da       	rcall	.-3028   	; 0xd56c <disk_ioctl>
            if( rc != RES_OK)
    e140:	8c 01       	movw	r16, r24
    e142:	00 97       	sbiw	r24, 0x00	; 0
            {
                put_rc( rc );
    e144:	61 f0       	breq	.+24     	; 0xe15e <mmc_init+0x128>
    e146:	3a d1       	rcall	.+628    	; 0xe3bc <put_rc>
                printf("MMC Block Size - read failed\n");
    e148:	8e e9       	ldi	r24, 0x9E	; 158
    e14a:	97 e0       	ldi	r25, 0x07	; 7
    e14c:	a0 e0       	ldi	r26, 0x00	; 0
    e14e:	ed b7       	in	r30, 0x3d	; 61
    e150:	fe b7       	in	r31, 0x3e	; 62
    e152:	81 83       	std	Z+1, r24	; 0x01
    e154:	92 83       	std	Z+2, r25	; 0x02
    e156:	a3 83       	std	Z+3, r26	; 0x03
    e158:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
    e15c:	1f c0       	rjmp	.+62     	; 0xe19c <mmc_init+0x166>
            }
            else
            {
                printf("MMC Block Size: %ld\n", blksize);
    e15e:	c7 5f       	subi	r28, 0xF7	; 247
    e160:	de 4f       	sbci	r29, 0xFE	; 254
    e162:	88 81       	ld	r24, Y
    e164:	99 81       	ldd	r25, Y+1	; 0x01
    e166:	aa 81       	ldd	r26, Y+2	; 0x02
    e168:	bb 81       	ldd	r27, Y+3	; 0x03
    e16a:	c9 50       	subi	r28, 0x09	; 9
    e16c:	d1 40       	sbci	r29, 0x01	; 1
    e16e:	ed b7       	in	r30, 0x3d	; 61
    e170:	fe b7       	in	r31, 0x3e	; 62
    e172:	84 83       	std	Z+4, r24	; 0x04
    e174:	95 83       	std	Z+5, r25	; 0x05
    e176:	a6 83       	std	Z+6, r26	; 0x06
    e178:	b7 83       	std	Z+7, r27	; 0x07
    e17a:	89 e8       	ldi	r24, 0x89	; 137
    e17c:	97 e0       	ldi	r25, 0x07	; 7
    e17e:	a0 e0       	ldi	r26, 0x00	; 0
    e180:	81 83       	std	Z+1, r24	; 0x01
    e182:	92 83       	std	Z+2, r25	; 0x02
    e184:	a3 83       	std	Z+3, r26	; 0x03
    e186:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
            }
            if( rc == RES_OK)
            {
                strcpy(buff,"/");
    e18a:	66 ea       	ldi	r22, 0xA6	; 166
    e18c:	78 e0       	ldi	r23, 0x08	; 8
    e18e:	ce 01       	movw	r24, r28
    e190:	08 96       	adiw	r24, 0x08	; 8
    e192:	0e 94 3d 32 	call	0x647a	; 0x647a <strcpy>
                fatfs_status(buff);
    e196:	ce 01       	movw	r24, r28
    e198:	08 96       	adiw	r24, 0x08	; 8
    e19a:	34 d1       	rcall	.+616    	; 0xe404 <fatfs_status>
            }
        }
        printf("END MMC INIT\n");
    e19c:	8b e7       	ldi	r24, 0x7B	; 123
    e19e:	97 e0       	ldi	r25, 0x07	; 7
    e1a0:	a0 e0       	ldi	r26, 0x00	; 0
    e1a2:	ed b7       	in	r30, 0x3d	; 61
    e1a4:	fe b7       	in	r31, 0x3e	; 62
    e1a6:	81 83       	std	Z+1, r24	; 0x01
    e1a8:	92 83       	std	Z+2, r25	; 0x02
    e1aa:	a3 83       	std	Z+3, r26	; 0x03
    e1ac:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
    }
    mmc_init_flag = 1;
    e1b0:	81 e0       	ldi	r24, 0x01	; 1
    e1b2:	90 e0       	ldi	r25, 0x00	; 0
    e1b4:	90 93 27 18 	sts	0x1827, r25	; 0x801827 <mmc_init_flag+0x1>
    e1b8:	80 93 26 18 	sts	0x1826, r24	; 0x801826 <mmc_init_flag>

	if(rc != RES_OK)
    e1bc:	01 15       	cp	r16, r1
    e1be:	11 05       	cpc	r17, r1
    e1c0:	21 f0       	breq	.+8      	; 0xe1ca <mmc_init+0x194>
		set_error(1);
    e1c2:	0e 94 74 27 	call	0x4ee8	; 0x4ee8 <set_error>
    e1c6:	c8 01       	movw	r24, r16
    e1c8:	02 c0       	rjmp	.+4      	; 0xe1ce <mmc_init+0x198>
    e1ca:	80 e0       	ldi	r24, 0x00	; 0
    e1cc:	90 e0       	ldi	r25, 0x00	; 0

    return( rc ) ;
}
    e1ce:	c4 5f       	subi	r28, 0xF4	; 244
    e1d0:	de 4f       	sbci	r29, 0xFE	; 254
    e1d2:	e6 e0       	ldi	r30, 0x06	; 6
    e1d4:	0c 94 cc e8 	jmp	0x1d198	; 0x1d198 <__epilogue_restores__+0x18>

0000e1d8 <mmc_wp_status>:

MEMSPACE
int mmc_wp_status()
{
    return (0);
}
    e1d8:	80 e0       	ldi	r24, 0x00	; 0
    e1da:	90 e0       	ldi	r25, 0x00	; 0
    e1dc:	08 95       	ret

0000e1de <fatfs_scan_files>:
/// WARNING path MUST be big enought for the lonest path length
/// @return 0 if no error
static
MEMSPACE
int fatfs_scan_files (char *path) /* Pointer to the working buffer with start path */
{
    e1de:	a4 e4       	ldi	r26, 0x44	; 68
    e1e0:	b1 e0       	ldi	r27, 0x01	; 1
    e1e2:	e5 ef       	ldi	r30, 0xF5	; 245
    e1e4:	f0 e7       	ldi	r31, 0x70	; 112
    e1e6:	0c 94 af e8 	jmp	0x1d15e	; 0x1d15e <__prologue_saves__+0x16>
    e1ea:	8c 01       	movw	r16, r24
    DIR dirs;
    FRESULT fr;
    int i;
    FILINFO info;
    fr = f_opendir(&dirs, path);
    e1ec:	bc 01       	movw	r22, r24
    e1ee:	ce 01       	movw	r24, r28
    e1f0:	89 5e       	subi	r24, 0xE9	; 233
    e1f2:	9e 4f       	sbci	r25, 0xFE	; 254
    e1f4:	0e 94 23 64 	call	0xc846	; 0xc846 <f_opendir>
    if (fr == FR_OK)
    e1f8:	00 97       	sbiw	r24, 0x00	; 0
    e1fa:	09 f0       	breq	.+2      	; 0xe1fe <fatfs_scan_files+0x20>
    e1fc:	5b c0       	rjmp	.+182    	; 0xe2b4 <fatfs_scan_files+0xd6>
        {
            if (info.fattrib & AM_DIR)
            {
                AccDirs++;
                i = strlen(path);
                path[i] = '/'; strcpy(path+i+1, info.fname);
    e1fe:	8f e2       	ldi	r24, 0x2F	; 47
    e200:	d8 2e       	mov	r13, r24
    int i;
    FILINFO info;
    fr = f_opendir(&dirs, path);
    if (fr == FR_OK)
    {
        while (((fr = f_readdir(&dirs, &info)) == FR_OK) && info.fname[0])
    e202:	be 01       	movw	r22, r28
    e204:	6f 5f       	subi	r22, 0xFF	; 255
    e206:	7f 4f       	sbci	r23, 0xFF	; 255
    e208:	ce 01       	movw	r24, r28
    e20a:	89 5e       	subi	r24, 0xE9	; 233
    e20c:	9e 4f       	sbci	r25, 0xFE	; 254
    e20e:	0e 94 a9 64 	call	0xc952	; 0xc952 <f_readdir>
    e212:	00 97       	sbiw	r24, 0x00	; 0
    e214:	09 f0       	breq	.+2      	; 0xe218 <fatfs_scan_files+0x3a>
    e216:	4e c0       	rjmp	.+156    	; 0xe2b4 <fatfs_scan_files+0xd6>
    e218:	2f 89       	ldd	r18, Y+23	; 0x17
    e21a:	22 23       	and	r18, r18
    e21c:	09 f4       	brne	.+2      	; 0xe220 <fatfs_scan_files+0x42>
    e21e:	4a c0       	rjmp	.+148    	; 0xe2b4 <fatfs_scan_files+0xd6>
        {
            if (info.fattrib & AM_DIR)
    e220:	89 85       	ldd	r24, Y+9	; 0x09
    e222:	84 ff       	sbrs	r24, 4
    e224:	25 c0       	rjmp	.+74     	; 0xe270 <fatfs_scan_files+0x92>
            {
                AccDirs++;
    e226:	80 91 b9 1c 	lds	r24, 0x1CB9	; 0x801cb9 <AccDirs>
    e22a:	90 91 ba 1c 	lds	r25, 0x1CBA	; 0x801cba <AccDirs+0x1>
    e22e:	01 96       	adiw	r24, 0x01	; 1
    e230:	90 93 ba 1c 	sts	0x1CBA, r25	; 0x801cba <AccDirs+0x1>
    e234:	80 93 b9 1c 	sts	0x1CB9, r24	; 0x801cb9 <AccDirs>
                i = strlen(path);
    e238:	f8 01       	movw	r30, r16
    e23a:	01 90       	ld	r0, Z+
    e23c:	00 20       	and	r0, r0
    e23e:	e9 f7       	brne	.-6      	; 0xe23a <fatfs_scan_files+0x5c>
    e240:	31 97       	sbiw	r30, 0x01	; 1
    e242:	e0 1b       	sub	r30, r16
    e244:	f1 0b       	sbc	r31, r17
                path[i] = '/'; strcpy(path+i+1, info.fname);
    e246:	78 01       	movw	r14, r16
    e248:	ee 0e       	add	r14, r30
    e24a:	ff 1e       	adc	r15, r31
    e24c:	d7 01       	movw	r26, r14
    e24e:	dc 92       	st	X, r13
    e250:	cf 01       	movw	r24, r30
    e252:	01 96       	adiw	r24, 0x01	; 1
    e254:	be 01       	movw	r22, r28
    e256:	69 5e       	subi	r22, 0xE9	; 233
    e258:	7f 4f       	sbci	r23, 0xFF	; 255
    e25a:	80 0f       	add	r24, r16
    e25c:	91 1f       	adc	r25, r17
    e25e:	0e 94 3d 32 	call	0x647a	; 0x647a <strcpy>
                fr = fatfs_scan_files(path);
    e262:	c8 01       	movw	r24, r16
    e264:	bc df       	rcall	.-136    	; 0xe1de <fatfs_scan_files>
                path[i] = 0;
    e266:	f7 01       	movw	r30, r14
    e268:	10 82       	st	Z, r1
                if (fr != FR_OK) break;
    e26a:	00 97       	sbiw	r24, 0x00	; 0
    e26c:	51 f2       	breq	.-108    	; 0xe202 <fatfs_scan_files+0x24>
    e26e:	22 c0       	rjmp	.+68     	; 0xe2b4 <fatfs_scan_files+0xd6>
            }
            else
            {
//              xprintf(PSTR("%s/%s\n"), path, info.fname);
                AccFiles++;
    e270:	80 91 bb 1c 	lds	r24, 0x1CBB	; 0x801cbb <AccFiles>
    e274:	90 91 bc 1c 	lds	r25, 0x1CBC	; 0x801cbc <AccFiles+0x1>
    e278:	01 96       	adiw	r24, 0x01	; 1
    e27a:	90 93 bc 1c 	sts	0x1CBC, r25	; 0x801cbc <AccFiles+0x1>
    e27e:	80 93 bb 1c 	sts	0x1CBB, r24	; 0x801cbb <AccFiles>
                AccSize += info.fsize;
    e282:	40 91 b5 1c 	lds	r20, 0x1CB5	; 0x801cb5 <AccSize>
    e286:	50 91 b6 1c 	lds	r21, 0x1CB6	; 0x801cb6 <AccSize+0x1>
    e28a:	60 91 b7 1c 	lds	r22, 0x1CB7	; 0x801cb7 <AccSize+0x2>
    e28e:	70 91 b8 1c 	lds	r23, 0x1CB8	; 0x801cb8 <AccSize+0x3>
    e292:	89 81       	ldd	r24, Y+1	; 0x01
    e294:	9a 81       	ldd	r25, Y+2	; 0x02
    e296:	ab 81       	ldd	r26, Y+3	; 0x03
    e298:	bc 81       	ldd	r27, Y+4	; 0x04
    e29a:	84 0f       	add	r24, r20
    e29c:	95 1f       	adc	r25, r21
    e29e:	a6 1f       	adc	r26, r22
    e2a0:	b7 1f       	adc	r27, r23
    e2a2:	80 93 b5 1c 	sts	0x1CB5, r24	; 0x801cb5 <AccSize>
    e2a6:	90 93 b6 1c 	sts	0x1CB6, r25	; 0x801cb6 <AccSize+0x1>
    e2aa:	a0 93 b7 1c 	sts	0x1CB7, r26	; 0x801cb7 <AccSize+0x2>
    e2ae:	b0 93 b8 1c 	sts	0x1CB8, r27	; 0x801cb8 <AccSize+0x3>
    e2b2:	a7 cf       	rjmp	.-178    	; 0xe202 <fatfs_scan_files+0x24>
#endif
        }
    }

    return fr;
}
    e2b4:	cc 5b       	subi	r28, 0xBC	; 188
    e2b6:	de 4f       	sbci	r29, 0xFE	; 254
    e2b8:	e7 e0       	ldi	r30, 0x07	; 7
    e2ba:	0c 94 cb e8 	jmp	0x1d196	; 0x1d196 <__epilogue_restores__+0x16>

0000e2be <tm_to_fat>:
/// @param[in] t: POSIX struct tm * to convert.
///
/// @return  FAT32 time.
MEMSPACE
uint32_t tm_to_fat(tm_t *t)
{
    e2be:	0f 93       	push	r16
    e2c0:	1f 93       	push	r17
    e2c2:	fc 01       	movw	r30, r24
        | (((uint32_t)t->tm_mon+1) << 21)
        | (((uint32_t)t->tm_mday) << 16)
        | ((uint32_t)t->tm_hour << 11)
        | ((uint32_t)t->tm_min << 5)
        | ((uint32_t)t->tm_sec >> 1);
    return(fat);
    e2c4:	46 81       	ldd	r20, Z+6	; 0x06
    e2c6:	57 81       	ldd	r21, Z+7	; 0x07
    e2c8:	05 2e       	mov	r0, r21
    e2ca:	00 0c       	add	r0, r0
    e2cc:	66 0b       	sbc	r22, r22
    e2ce:	77 0b       	sbc	r23, r23
    e2d0:	ba 01       	movw	r22, r20
    e2d2:	55 27       	eor	r21, r21
    e2d4:	44 27       	eor	r20, r20
    e2d6:	84 81       	ldd	r24, Z+4	; 0x04
    e2d8:	95 81       	ldd	r25, Z+5	; 0x05
    e2da:	09 2e       	mov	r0, r25
    e2dc:	00 0c       	add	r0, r0
    e2de:	aa 0b       	sbc	r26, r26
    e2e0:	bb 0b       	sbc	r27, r27
    e2e2:	2b e0       	ldi	r18, 0x0B	; 11
    e2e4:	88 0f       	add	r24, r24
    e2e6:	99 1f       	adc	r25, r25
    e2e8:	aa 1f       	adc	r26, r26
    e2ea:	bb 1f       	adc	r27, r27
    e2ec:	2a 95       	dec	r18
    e2ee:	d1 f7       	brne	.-12     	; 0xe2e4 <tm_to_fat+0x26>
    e2f0:	48 2b       	or	r20, r24
    e2f2:	59 2b       	or	r21, r25
    e2f4:	6a 2b       	or	r22, r26
    e2f6:	7b 2b       	or	r23, r27
    e2f8:	82 81       	ldd	r24, Z+2	; 0x02
    e2fa:	93 81       	ldd	r25, Z+3	; 0x03
    e2fc:	09 2e       	mov	r0, r25
    e2fe:	00 0c       	add	r0, r0
    e300:	aa 0b       	sbc	r26, r26
    e302:	bb 0b       	sbc	r27, r27
    e304:	35 e0       	ldi	r19, 0x05	; 5
    e306:	88 0f       	add	r24, r24
    e308:	99 1f       	adc	r25, r25
    e30a:	aa 1f       	adc	r26, r26
    e30c:	bb 1f       	adc	r27, r27
    e30e:	3a 95       	dec	r19
    e310:	d1 f7       	brne	.-12     	; 0xe306 <tm_to_fat+0x48>
    e312:	48 2b       	or	r20, r24
    e314:	59 2b       	or	r21, r25
    e316:	6a 2b       	or	r22, r26
    e318:	7b 2b       	or	r23, r27
    e31a:	80 81       	ld	r24, Z
    e31c:	91 81       	ldd	r25, Z+1	; 0x01
    e31e:	09 2e       	mov	r0, r25
    e320:	00 0c       	add	r0, r0
    e322:	aa 0b       	sbc	r26, r26
    e324:	bb 0b       	sbc	r27, r27
    e326:	b6 95       	lsr	r27
    e328:	a7 95       	ror	r26
    e32a:	97 95       	ror	r25
    e32c:	87 95       	ror	r24
    e32e:	84 2b       	or	r24, r20
    e330:	95 2b       	or	r25, r21
    e332:	a6 2b       	or	r26, r22
    e334:	b7 2b       	or	r27, r23
    e336:	02 85       	ldd	r16, Z+10	; 0x0a
    e338:	13 85       	ldd	r17, Z+11	; 0x0b
    e33a:	00 55       	subi	r16, 0x50	; 80
    e33c:	11 09       	sbc	r17, r1
    e33e:	01 2e       	mov	r0, r17
    e340:	00 0c       	add	r0, r0
    e342:	22 0b       	sbc	r18, r18
    e344:	33 0b       	sbc	r19, r19
    e346:	49 e1       	ldi	r20, 0x19	; 25
    e348:	00 0f       	add	r16, r16
    e34a:	11 1f       	adc	r17, r17
    e34c:	22 1f       	adc	r18, r18
    e34e:	33 1f       	adc	r19, r19
    e350:	4a 95       	dec	r20
    e352:	d1 f7       	brne	.-12     	; 0xe348 <tm_to_fat+0x8a>
    e354:	ac 01       	movw	r20, r24
    e356:	bd 01       	movw	r22, r26
    e358:	40 2b       	or	r20, r16
    e35a:	51 2b       	or	r21, r17
    e35c:	62 2b       	or	r22, r18
    e35e:	73 2b       	or	r23, r19
    e360:	80 85       	ldd	r24, Z+8	; 0x08
    e362:	91 85       	ldd	r25, Z+9	; 0x09
    e364:	09 2e       	mov	r0, r25
    e366:	00 0c       	add	r0, r0
    e368:	aa 0b       	sbc	r26, r26
    e36a:	bb 0b       	sbc	r27, r27
    e36c:	01 96       	adiw	r24, 0x01	; 1
    e36e:	a1 1d       	adc	r26, r1
    e370:	b1 1d       	adc	r27, r1
    e372:	e5 e1       	ldi	r30, 0x15	; 21
    e374:	88 0f       	add	r24, r24
    e376:	99 1f       	adc	r25, r25
    e378:	aa 1f       	adc	r26, r26
    e37a:	bb 1f       	adc	r27, r27
    e37c:	ea 95       	dec	r30
    e37e:	d1 f7       	brne	.-12     	; 0xe374 <tm_to_fat+0xb6>
    e380:	8a 01       	movw	r16, r20
    e382:	9b 01       	movw	r18, r22
    e384:	08 2b       	or	r16, r24
    e386:	19 2b       	or	r17, r25
    e388:	2a 2b       	or	r18, r26
    e38a:	3b 2b       	or	r19, r27
    e38c:	c9 01       	movw	r24, r18
    e38e:	b8 01       	movw	r22, r16
}
    e390:	1f 91       	pop	r17
    e392:	0f 91       	pop	r16
    e394:	08 95       	ret

0000e396 <get_fattime>:
///
/// @return FAT32 time.
/// @see tm_to_fat().
MEMSPACE
DWORD get_fattime (void)
{
    e396:	a4 e0       	ldi	r26, 0x04	; 4
    e398:	b0 e0       	ldi	r27, 0x00	; 0
    e39a:	e1 ed       	ldi	r30, 0xD1	; 209
    e39c:	f1 e7       	ldi	r31, 0x71	; 113
    e39e:	0c 94 b4 e8 	jmp	0x1d168	; 0x1d168 <__prologue_saves__+0x20>
    time_t t;
/* Get GMT time */
    time(&t);
    e3a2:	ce 01       	movw	r24, r28
    e3a4:	01 96       	adiw	r24, 0x01	; 1
    e3a6:	0e 94 fe 38 	call	0x71fc	; 0x71fc <time>
    return( tm_to_fat(localtime(&t)));
    e3aa:	ce 01       	movw	r24, r28
    e3ac:	01 96       	adiw	r24, 0x01	; 1
    e3ae:	0e 94 97 39 	call	0x732e	; 0x732e <localtime>
    e3b2:	85 df       	rcall	.-246    	; 0xe2be <tm_to_fat>
}
    e3b4:	24 96       	adiw	r28, 0x04	; 4
    e3b6:	e2 e0       	ldi	r30, 0x02	; 2
    e3b8:	0c 94 d0 e8 	jmp	0x1d1a0	; 0x1d1a0 <__epilogue_restores__+0x20>

0000e3bc <put_rc>:
/// @param[in] rc: FatFs status return code
/// @return  void

MEMSPACE
void put_rc (int rc)
{
    e3bc:	00 d0       	rcall	.+0      	; 0xe3be <put_rc+0x2>
    e3be:	00 d0       	rcall	.+0      	; 0xe3c0 <put_rc+0x4>
    e3c0:	1f 92       	push	r1
        ptr = "INVALID ERROR MESSAGE";
    else
        ptr = (char *) err_msg[(int)rc];
    printf("rc=%u FR_%s\n", rc, ptr);
#else
    printf("rc=%u\n", rc);
    e3c2:	ed b7       	in	r30, 0x3d	; 61
    e3c4:	fe b7       	in	r31, 0x3e	; 62
    e3c6:	95 83       	std	Z+5, r25	; 0x05
    e3c8:	84 83       	std	Z+4, r24	; 0x04
    e3ca:	88 ec       	ldi	r24, 0xC8	; 200
    e3cc:	9a e0       	ldi	r25, 0x0A	; 10
    e3ce:	a0 e0       	ldi	r26, 0x00	; 0
    e3d0:	81 83       	std	Z+1, r24	; 0x01
    e3d2:	92 83       	std	Z+2, r25	; 0x02
    e3d4:	a3 83       	std	Z+3, r26	; 0x03
    e3d6:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
#endif
}
    e3da:	0f 90       	pop	r0
    e3dc:	0f 90       	pop	r0
    e3de:	0f 90       	pop	r0
    e3e0:	0f 90       	pop	r0
    e3e2:	0f 90       	pop	r0
    e3e4:	08 95       	ret

0000e3e6 <fatfs_fstype>:
/// @brief  return a string with the file system type
/// @param[in] type: file system type
/// @return string with file system type
MEMSPACE
char *fatfs_fstype(int type)
{
    e3e6:	01 97       	sbiw	r24, 0x01	; 1
    e3e8:	84 30       	cpi	r24, 0x04	; 4
    e3ea:	91 05       	cpc	r25, r1
    e3ec:	40 f4       	brcc	.+16     	; 0xe3fe <fatfs_fstype+0x18>
    e3ee:	88 0f       	add	r24, r24
    e3f0:	99 1f       	adc	r25, r25
    e3f2:	fc 01       	movw	r30, r24
    e3f4:	e6 53       	subi	r30, 0x36	; 54
    e3f6:	f7 4f       	sbci	r31, 0xF7	; 247
    e3f8:	80 81       	ld	r24, Z
    e3fa:	91 81       	ldd	r25, Z+1	; 0x01
    e3fc:	08 95       	ret
    char *ptr;
    switch(type)
    e3fe:	88 ea       	ldi	r24, 0xA8	; 168
    e400:	98 e0       	ldi	r25, 0x08	; 8
        default:
            ptr = "UNKNOWN";
            break;
    }
    return(ptr);
}
    e402:	08 95       	ret

0000e404 <fatfs_status>:
/// @see AccFiles: Total number of Files
/// @see AccSize:  Total size of all files
/// @return  1 on success 0 on error
MEMSPACE
int fatfs_status(char *name)
{
    e404:	a8 e3       	ldi	r26, 0x38	; 56
    e406:	b1 e0       	ldi	r27, 0x01	; 1
    e408:	e8 e0       	ldi	r30, 0x08	; 8
    e40a:	f2 e7       	ldi	r31, 0x72	; 114
    e40c:	0c 94 ae e8 	jmp	0x1d15c	; 0x1d15c <__prologue_saves__+0x14>
    FATFS *fs;
    char label[24+2];
    DWORD vsn;                                    // volume serial number
    char buff[MAX_NAME_LEN+1];

	memset(buff,0,sizeof(buff)-1);
    e410:	8e 01       	movw	r16, r28
    e412:	0c 5e       	subi	r16, 0xEC	; 236
    e414:	1f 4f       	sbci	r17, 0xFF	; 255
    e416:	20 e0       	ldi	r18, 0x00	; 0
    e418:	31 e0       	ldi	r19, 0x01	; 1
    e41a:	f8 01       	movw	r30, r16
    e41c:	a9 01       	movw	r20, r18
    e41e:	11 92       	st	Z+, r1
    e420:	41 50       	subi	r20, 0x01	; 1
    e422:	50 40       	sbci	r21, 0x00	; 0
    e424:	e1 f7       	brne	.-8      	; 0xe41e <fatfs_status+0x1a>
    e426:	7c 01       	movw	r14, r24
    while(*name == ' ' || *name == '\t')
    e428:	fc 01       	movw	r30, r24
    e42a:	21 91       	ld	r18, Z+
    e42c:	cf 01       	movw	r24, r30
    e42e:	20 32       	cpi	r18, 0x20	; 32
    e430:	d1 f3       	breq	.-12     	; 0xe426 <fatfs_status+0x22>
    e432:	29 30       	cpi	r18, 0x09	; 9
    e434:	c1 f3       	breq	.-16     	; 0xe426 <fatfs_status+0x22>
        ++name;

	printf("MMC SLOW clock=%8ld\n", (long)MMC_SLOW);
    e436:	80 e2       	ldi	r24, 0x20	; 32
    e438:	91 ea       	ldi	r25, 0xA1	; 161
    e43a:	a7 e0       	ldi	r26, 0x07	; 7
    e43c:	b0 e0       	ldi	r27, 0x00	; 0
    e43e:	ed b7       	in	r30, 0x3d	; 61
    e440:	fe b7       	in	r31, 0x3e	; 62
    e442:	84 83       	std	Z+4, r24	; 0x04
    e444:	95 83       	std	Z+5, r25	; 0x05
    e446:	a6 83       	std	Z+6, r26	; 0x06
    e448:	b7 83       	std	Z+7, r27	; 0x07
    e44a:	83 eb       	ldi	r24, 0xB3	; 179
    e44c:	9a e0       	ldi	r25, 0x0A	; 10
    e44e:	a0 e0       	ldi	r26, 0x00	; 0
    e450:	81 83       	std	Z+1, r24	; 0x01
    e452:	92 83       	std	Z+2, r25	; 0x02
    e454:	a3 83       	std	Z+3, r26	; 0x03
    e456:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
	printf("MMC FAST clock=%8ld\n", (long)MMC_FAST);
    e45a:	80 e4       	ldi	r24, 0x40	; 64
    e45c:	9b e4       	ldi	r25, 0x4B	; 75
    e45e:	ac e4       	ldi	r26, 0x4C	; 76
    e460:	b0 e0       	ldi	r27, 0x00	; 0
    e462:	ed b7       	in	r30, 0x3d	; 61
    e464:	fe b7       	in	r31, 0x3e	; 62
    e466:	84 83       	std	Z+4, r24	; 0x04
    e468:	95 83       	std	Z+5, r25	; 0x05
    e46a:	a6 83       	std	Z+6, r26	; 0x06
    e46c:	b7 83       	std	Z+7, r27	; 0x07
    e46e:	8e e9       	ldi	r24, 0x9E	; 158
    e470:	9a e0       	ldi	r25, 0x0A	; 10
    e472:	a0 e0       	ldi	r26, 0x00	; 0
    e474:	81 83       	std	Z+1, r24	; 0x01
    e476:	92 83       	std	Z+2, r25	; 0x02
    e478:	a3 83       	std	Z+3, r26	; 0x03
    e47a:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>

    if(!name || !*name)
    e47e:	e1 14       	cp	r14, r1
    e480:	f1 04       	cpc	r15, r1
    e482:	21 f0       	breq	.+8      	; 0xe48c <fatfs_status+0x88>
    e484:	f7 01       	movw	r30, r14
    e486:	80 81       	ld	r24, Z
    e488:	81 11       	cpse	r24, r1
    e48a:	03 c0       	rjmp	.+6      	; 0xe492 <fatfs_status+0x8e>
    {
        strcpy(buff,".");
    e48c:	66 ee       	ldi	r22, 0xE6	; 230
    e48e:	72 e1       	ldi	r23, 0x12	; 18
    e490:	01 c0       	rjmp	.+2      	; 0xe494 <fatfs_status+0x90>
    }
    else
    {
        strcpy(buff,name);
    e492:	b7 01       	movw	r22, r14
    e494:	c8 01       	movw	r24, r16
    e496:	0e 94 3d 32 	call	0x647a	; 0x647a <strcpy>
	}
    printf("fatfs status:%s\n",buff);
    e49a:	ed b7       	in	r30, 0x3d	; 61
    e49c:	fe b7       	in	r31, 0x3e	; 62
    e49e:	15 83       	std	Z+5, r17	; 0x05
    e4a0:	04 83       	std	Z+4, r16	; 0x04
    e4a2:	8d e8       	ldi	r24, 0x8D	; 141
    e4a4:	9a e0       	ldi	r25, 0x0A	; 10
    e4a6:	a0 e0       	ldi	r26, 0x00	; 0
    e4a8:	81 83       	std	Z+1, r24	; 0x01
    e4aa:	92 83       	std	Z+2, r25	; 0x02
    e4ac:	a3 83       	std	Z+3, r26	; 0x03
    e4ae:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
    res = f_getfree(buff, (DWORD*)&p2, &fs);
    e4b2:	ae 01       	movw	r20, r28
    e4b4:	49 5c       	subi	r20, 0xC9	; 201
    e4b6:	5e 4f       	sbci	r21, 0xFE	; 254
    e4b8:	be 01       	movw	r22, r28
    e4ba:	6d 5c       	subi	r22, 0xCD	; 205
    e4bc:	7e 4f       	sbci	r23, 0xFE	; 254
    e4be:	c8 01       	movw	r24, r16
    e4c0:	0e 94 2b 65 	call	0xca56	; 0xca56 <f_getfree>
    if (res)
    e4c4:	89 2b       	or	r24, r25
    e4c6:	19 f0       	breq	.+6      	; 0xe4ce <fatfs_status+0xca>
    {
        printf("fatfs_status f_getfree failed\n");
    e4c8:	8e e6       	ldi	r24, 0x6E	; 110
    e4ca:	9a e0       	ldi	r25, 0x0A	; 10
    e4cc:	e4 c0       	rjmp	.+456    	; 0xe696 <fatfs_status+0x292>
        return(0);
    }
    printf("FAT type                = %s\n",  fatfs_fstype(fs->fs_type));
    e4ce:	c9 5c       	subi	r28, 0xC9	; 201
    e4d0:	de 4f       	sbci	r29, 0xFE	; 254
    e4d2:	e8 81       	ld	r30, Y
    e4d4:	f9 81       	ldd	r31, Y+1	; 0x01
    e4d6:	c7 53       	subi	r28, 0x37	; 55
    e4d8:	d1 40       	sbci	r29, 0x01	; 1
    e4da:	80 81       	ld	r24, Z
    e4dc:	90 e0       	ldi	r25, 0x00	; 0
    e4de:	83 df       	rcall	.-250    	; 0xe3e6 <fatfs_fstype>
    e4e0:	ed b7       	in	r30, 0x3d	; 61
    e4e2:	fe b7       	in	r31, 0x3e	; 62
    e4e4:	95 83       	std	Z+5, r25	; 0x05
    e4e6:	84 83       	std	Z+4, r24	; 0x04
    e4e8:	80 e5       	ldi	r24, 0x50	; 80
    e4ea:	9a e0       	ldi	r25, 0x0A	; 10
    e4ec:	a0 e0       	ldi	r26, 0x00	; 0
    e4ee:	81 83       	std	Z+1, r24	; 0x01
    e4f0:	92 83       	std	Z+2, r25	; 0x02
    e4f2:	a3 83       	std	Z+3, r26	; 0x03
    e4f4:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
    printf("Bytes/Cluster           = %lu\n", (DWORD)fs->csize * 512);
    e4f8:	c9 5c       	subi	r28, 0xC9	; 201
    e4fa:	de 4f       	sbci	r29, 0xFE	; 254
    e4fc:	e8 81       	ld	r30, Y
    e4fe:	f9 81       	ldd	r31, Y+1	; 0x01
    e500:	c7 53       	subi	r28, 0x37	; 55
    e502:	d1 40       	sbci	r29, 0x01	; 1
    e504:	81 85       	ldd	r24, Z+9	; 0x09
    e506:	92 85       	ldd	r25, Z+10	; 0x0a
    e508:	a0 e0       	ldi	r26, 0x00	; 0
    e50a:	b0 e0       	ldi	r27, 0x00	; 0
    e50c:	39 e0       	ldi	r19, 0x09	; 9
    e50e:	88 0f       	add	r24, r24
    e510:	99 1f       	adc	r25, r25
    e512:	aa 1f       	adc	r26, r26
    e514:	bb 1f       	adc	r27, r27
    e516:	3a 95       	dec	r19
    e518:	d1 f7       	brne	.-12     	; 0xe50e <fatfs_status+0x10a>
    e51a:	ed b7       	in	r30, 0x3d	; 61
    e51c:	fe b7       	in	r31, 0x3e	; 62
    e51e:	84 83       	std	Z+4, r24	; 0x04
    e520:	95 83       	std	Z+5, r25	; 0x05
    e522:	a6 83       	std	Z+6, r26	; 0x06
    e524:	b7 83       	std	Z+7, r27	; 0x07
    e526:	81 e3       	ldi	r24, 0x31	; 49
    e528:	9a e0       	ldi	r25, 0x0A	; 10
    e52a:	a0 e0       	ldi	r26, 0x00	; 0
    e52c:	81 83       	std	Z+1, r24	; 0x01
    e52e:	92 83       	std	Z+2, r25	; 0x02
    e530:	a3 83       	std	Z+3, r26	; 0x03
    e532:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
    printf("Number of FATs          = %u\n",  fs->n_fats);
    e536:	c9 5c       	subi	r28, 0xC9	; 201
    e538:	de 4f       	sbci	r29, 0xFE	; 254
    e53a:	e8 81       	ld	r30, Y
    e53c:	f9 81       	ldd	r31, Y+1	; 0x01
    e53e:	c7 53       	subi	r28, 0x37	; 55
    e540:	d1 40       	sbci	r29, 0x01	; 1
    e542:	82 81       	ldd	r24, Z+2	; 0x02
    e544:	90 e0       	ldi	r25, 0x00	; 0
    e546:	ed b7       	in	r30, 0x3d	; 61
    e548:	fe b7       	in	r31, 0x3e	; 62
    e54a:	95 83       	std	Z+5, r25	; 0x05
    e54c:	84 83       	std	Z+4, r24	; 0x04
    e54e:	83 e1       	ldi	r24, 0x13	; 19
    e550:	9a e0       	ldi	r25, 0x0A	; 10
    e552:	a0 e0       	ldi	r26, 0x00	; 0
    e554:	81 83       	std	Z+1, r24	; 0x01
    e556:	92 83       	std	Z+2, r25	; 0x02
    e558:	a3 83       	std	Z+3, r26	; 0x03
    e55a:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
    printf("Root DIR entries        = %u\n",  fs->n_rootdir);
    e55e:	c9 5c       	subi	r28, 0xC9	; 201
    e560:	de 4f       	sbci	r29, 0xFE	; 254
    e562:	e8 81       	ld	r30, Y
    e564:	f9 81       	ldd	r31, Y+1	; 0x01
    e566:	c7 53       	subi	r28, 0x37	; 55
    e568:	d1 40       	sbci	r29, 0x01	; 1
    e56a:	87 81       	ldd	r24, Z+7	; 0x07
    e56c:	90 85       	ldd	r25, Z+8	; 0x08
    e56e:	ed b7       	in	r30, 0x3d	; 61
    e570:	fe b7       	in	r31, 0x3e	; 62
    e572:	95 83       	std	Z+5, r25	; 0x05
    e574:	84 83       	std	Z+4, r24	; 0x04
    e576:	85 ef       	ldi	r24, 0xF5	; 245
    e578:	99 e0       	ldi	r25, 0x09	; 9
    e57a:	a0 e0       	ldi	r26, 0x00	; 0
    e57c:	81 83       	std	Z+1, r24	; 0x01
    e57e:	92 83       	std	Z+2, r25	; 0x02
    e580:	a3 83       	std	Z+3, r26	; 0x03
    e582:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
    printf("Sectors/FAT             = %lu\n", fs->fsize);
    e586:	c9 5c       	subi	r28, 0xC9	; 201
    e588:	de 4f       	sbci	r29, 0xFE	; 254
    e58a:	e8 81       	ld	r30, Y
    e58c:	f9 81       	ldd	r31, Y+1	; 0x01
    e58e:	c7 53       	subi	r28, 0x37	; 55
    e590:	d1 40       	sbci	r29, 0x01	; 1
    e592:	85 8d       	ldd	r24, Z+29	; 0x1d
    e594:	96 8d       	ldd	r25, Z+30	; 0x1e
    e596:	a7 8d       	ldd	r26, Z+31	; 0x1f
    e598:	b0 a1       	ldd	r27, Z+32	; 0x20
    e59a:	ed b7       	in	r30, 0x3d	; 61
    e59c:	fe b7       	in	r31, 0x3e	; 62
    e59e:	84 83       	std	Z+4, r24	; 0x04
    e5a0:	95 83       	std	Z+5, r25	; 0x05
    e5a2:	a6 83       	std	Z+6, r26	; 0x06
    e5a4:	b7 83       	std	Z+7, r27	; 0x07
    e5a6:	86 ed       	ldi	r24, 0xD6	; 214
    e5a8:	99 e0       	ldi	r25, 0x09	; 9
    e5aa:	a0 e0       	ldi	r26, 0x00	; 0
    e5ac:	81 83       	std	Z+1, r24	; 0x01
    e5ae:	92 83       	std	Z+2, r25	; 0x02
    e5b0:	a3 83       	std	Z+3, r26	; 0x03
    e5b2:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
    printf("Number of clusters      = %lu\n", fs->n_fatent - 2);
    e5b6:	c9 5c       	subi	r28, 0xC9	; 201
    e5b8:	de 4f       	sbci	r29, 0xFE	; 254
    e5ba:	e8 81       	ld	r30, Y
    e5bc:	f9 81       	ldd	r31, Y+1	; 0x01
    e5be:	c7 53       	subi	r28, 0x37	; 55
    e5c0:	d1 40       	sbci	r29, 0x01	; 1
    e5c2:	81 8d       	ldd	r24, Z+25	; 0x19
    e5c4:	92 8d       	ldd	r25, Z+26	; 0x1a
    e5c6:	a3 8d       	ldd	r26, Z+27	; 0x1b
    e5c8:	b4 8d       	ldd	r27, Z+28	; 0x1c
    e5ca:	02 97       	sbiw	r24, 0x02	; 2
    e5cc:	a1 09       	sbc	r26, r1
    e5ce:	b1 09       	sbc	r27, r1
    e5d0:	ed b7       	in	r30, 0x3d	; 61
    e5d2:	fe b7       	in	r31, 0x3e	; 62
    e5d4:	84 83       	std	Z+4, r24	; 0x04
    e5d6:	95 83       	std	Z+5, r25	; 0x05
    e5d8:	a6 83       	std	Z+6, r26	; 0x06
    e5da:	b7 83       	std	Z+7, r27	; 0x07
    e5dc:	87 eb       	ldi	r24, 0xB7	; 183
    e5de:	99 e0       	ldi	r25, 0x09	; 9
    e5e0:	a0 e0       	ldi	r26, 0x00	; 0
    e5e2:	81 83       	std	Z+1, r24	; 0x01
    e5e4:	92 83       	std	Z+2, r25	; 0x02
    e5e6:	a3 83       	std	Z+3, r26	; 0x03
    e5e8:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
    printf("FAT start (lba)         = %lu\n", fs->fatbase);
    e5ec:	c9 5c       	subi	r28, 0xC9	; 201
    e5ee:	de 4f       	sbci	r29, 0xFE	; 254
    e5f0:	e8 81       	ld	r30, Y
    e5f2:	f9 81       	ldd	r31, Y+1	; 0x01
    e5f4:	c7 53       	subi	r28, 0x37	; 55
    e5f6:	d1 40       	sbci	r29, 0x01	; 1
    e5f8:	85 a1       	ldd	r24, Z+37	; 0x25
    e5fa:	96 a1       	ldd	r25, Z+38	; 0x26
    e5fc:	a7 a1       	ldd	r26, Z+39	; 0x27
    e5fe:	b0 a5       	ldd	r27, Z+40	; 0x28
    e600:	ed b7       	in	r30, 0x3d	; 61
    e602:	fe b7       	in	r31, 0x3e	; 62
    e604:	84 83       	std	Z+4, r24	; 0x04
    e606:	95 83       	std	Z+5, r25	; 0x05
    e608:	a6 83       	std	Z+6, r26	; 0x06
    e60a:	b7 83       	std	Z+7, r27	; 0x07
    e60c:	88 e9       	ldi	r24, 0x98	; 152
    e60e:	99 e0       	ldi	r25, 0x09	; 9
    e610:	a0 e0       	ldi	r26, 0x00	; 0
    e612:	81 83       	std	Z+1, r24	; 0x01
    e614:	92 83       	std	Z+2, r25	; 0x02
    e616:	a3 83       	std	Z+3, r26	; 0x03
    e618:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
    printf("DIR start (lba,clustor) = %lu\n", fs->dirbase);
    e61c:	c9 5c       	subi	r28, 0xC9	; 201
    e61e:	de 4f       	sbci	r29, 0xFE	; 254
    e620:	e8 81       	ld	r30, Y
    e622:	f9 81       	ldd	r31, Y+1	; 0x01
    e624:	c7 53       	subi	r28, 0x37	; 55
    e626:	d1 40       	sbci	r29, 0x01	; 1
    e628:	81 a5       	ldd	r24, Z+41	; 0x29
    e62a:	92 a5       	ldd	r25, Z+42	; 0x2a
    e62c:	a3 a5       	ldd	r26, Z+43	; 0x2b
    e62e:	b4 a5       	ldd	r27, Z+44	; 0x2c
    e630:	ed b7       	in	r30, 0x3d	; 61
    e632:	fe b7       	in	r31, 0x3e	; 62
    e634:	84 83       	std	Z+4, r24	; 0x04
    e636:	95 83       	std	Z+5, r25	; 0x05
    e638:	a6 83       	std	Z+6, r26	; 0x06
    e63a:	b7 83       	std	Z+7, r27	; 0x07
    e63c:	89 e7       	ldi	r24, 0x79	; 121
    e63e:	99 e0       	ldi	r25, 0x09	; 9
    e640:	a0 e0       	ldi	r26, 0x00	; 0
    e642:	81 83       	std	Z+1, r24	; 0x01
    e644:	92 83       	std	Z+2, r25	; 0x02
    e646:	a3 83       	std	Z+3, r26	; 0x03
    e648:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
    printf("Data start (lba)        = %lu\n", fs->database);
    e64c:	c9 5c       	subi	r28, 0xC9	; 201
    e64e:	de 4f       	sbci	r29, 0xFE	; 254
    e650:	e8 81       	ld	r30, Y
    e652:	f9 81       	ldd	r31, Y+1	; 0x01
    e654:	c7 53       	subi	r28, 0x37	; 55
    e656:	d1 40       	sbci	r29, 0x01	; 1
    e658:	85 a5       	ldd	r24, Z+45	; 0x2d
    e65a:	96 a5       	ldd	r25, Z+46	; 0x2e
    e65c:	a7 a5       	ldd	r26, Z+47	; 0x2f
    e65e:	b0 a9       	ldd	r27, Z+48	; 0x30
    e660:	ed b7       	in	r30, 0x3d	; 61
    e662:	fe b7       	in	r31, 0x3e	; 62
    e664:	84 83       	std	Z+4, r24	; 0x04
    e666:	95 83       	std	Z+5, r25	; 0x05
    e668:	a6 83       	std	Z+6, r26	; 0x06
    e66a:	b7 83       	std	Z+7, r27	; 0x07
    e66c:	8a e5       	ldi	r24, 0x5A	; 90
    e66e:	99 e0       	ldi	r25, 0x09	; 9
    e670:	a0 e0       	ldi	r26, 0x00	; 0
    e672:	81 83       	std	Z+1, r24	; 0x01
    e674:	92 83       	std	Z+2, r25	; 0x02
    e676:	a3 83       	std	Z+3, r26	; 0x03
    e678:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>

#if FF_USE_LABEL
    res = f_getlabel(buff, label, (DWORD*)&vsn);
    e67c:	ae 01       	movw	r20, r28
    e67e:	41 5d       	subi	r20, 0xD1	; 209
    e680:	5e 4f       	sbci	r21, 0xFE	; 254
    e682:	be 01       	movw	r22, r28
    e684:	6b 5e       	subi	r22, 0xEB	; 235
    e686:	7e 4f       	sbci	r23, 0xFE	; 254
    e688:	c8 01       	movw	r24, r16
    e68a:	0e 94 5d 69 	call	0xd2ba	; 0xd2ba <f_getlabel>
    if (res)
    e68e:	89 2b       	or	r24, r25
    e690:	69 f0       	breq	.+26     	; 0xe6ac <fatfs_status+0x2a8>
    {
        printf("fatfs_status f_getlabel failed\n");
    e692:	8a e3       	ldi	r24, 0x3A	; 58
    e694:	99 e0       	ldi	r25, 0x09	; 9
    e696:	a0 e0       	ldi	r26, 0x00	; 0
    e698:	ed b7       	in	r30, 0x3d	; 61
    e69a:	fe b7       	in	r31, 0x3e	; 62
    e69c:	81 83       	std	Z+1, r24	; 0x01
    e69e:	92 83       	std	Z+2, r25	; 0x02
    e6a0:	a3 83       	std	Z+3, r26	; 0x03
    e6a2:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
        return(0);
    e6a6:	80 e0       	ldi	r24, 0x00	; 0
    e6a8:	90 e0       	ldi	r25, 0x00	; 0
    e6aa:	a6 c0       	rjmp	.+332    	; 0xe7f8 <fatfs_status+0x3f4>
    }
    printf("Volume name             = %s\n", label[0] ? label : "<blank>");
    e6ac:	cb 5e       	subi	r28, 0xEB	; 235
    e6ae:	de 4f       	sbci	r29, 0xFE	; 254
    e6b0:	88 81       	ld	r24, Y
    e6b2:	c5 51       	subi	r28, 0x15	; 21
    e6b4:	d1 40       	sbci	r29, 0x01	; 1
    e6b6:	81 11       	cpse	r24, r1
    e6b8:	03 c0       	rjmp	.+6      	; 0xe6c0 <fatfs_status+0x2bc>
    e6ba:	80 eb       	ldi	r24, 0xB0	; 176
    e6bc:	98 e0       	ldi	r25, 0x08	; 8
    e6be:	03 c0       	rjmp	.+6      	; 0xe6c6 <fatfs_status+0x2c2>
    e6c0:	ce 01       	movw	r24, r28
    e6c2:	8b 5e       	subi	r24, 0xEB	; 235
    e6c4:	9e 4f       	sbci	r25, 0xFE	; 254
    e6c6:	ed b7       	in	r30, 0x3d	; 61
    e6c8:	fe b7       	in	r31, 0x3e	; 62
    e6ca:	95 83       	std	Z+5, r25	; 0x05
    e6cc:	84 83       	std	Z+4, r24	; 0x04
    e6ce:	8c e1       	ldi	r24, 0x1C	; 28
    e6d0:	99 e0       	ldi	r25, 0x09	; 9
    e6d2:	a0 e0       	ldi	r26, 0x00	; 0
    e6d4:	81 83       	std	Z+1, r24	; 0x01
    e6d6:	92 83       	std	Z+2, r25	; 0x02
    e6d8:	a3 83       	std	Z+3, r26	; 0x03
    e6da:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
    printf("Volume S/N              = %04X-%04X\n", (WORD)((DWORD)vsn >> 16), (WORD)(vsn & 0xFFFF));
    e6de:	c1 5d       	subi	r28, 0xD1	; 209
    e6e0:	de 4f       	sbci	r29, 0xFE	; 254
    e6e2:	88 81       	ld	r24, Y
    e6e4:	99 81       	ldd	r25, Y+1	; 0x01
    e6e6:	aa 81       	ldd	r26, Y+2	; 0x02
    e6e8:	bb 81       	ldd	r27, Y+3	; 0x03
    e6ea:	cf 52       	subi	r28, 0x2F	; 47
    e6ec:	d1 40       	sbci	r29, 0x01	; 1
    e6ee:	ed b7       	in	r30, 0x3d	; 61
    e6f0:	fe b7       	in	r31, 0x3e	; 62
    e6f2:	97 83       	std	Z+7, r25	; 0x07
    e6f4:	86 83       	std	Z+6, r24	; 0x06
    e6f6:	b5 83       	std	Z+5, r27	; 0x05
    e6f8:	a4 83       	std	Z+4, r26	; 0x04
    e6fa:	87 ef       	ldi	r24, 0xF7	; 247
    e6fc:	98 e0       	ldi	r25, 0x08	; 8
    e6fe:	a0 e0       	ldi	r26, 0x00	; 0
    e700:	81 83       	std	Z+1, r24	; 0x01
    e702:	92 83       	std	Z+2, r25	; 0x02
    e704:	a3 83       	std	Z+3, r26	; 0x03
    e706:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
#endif

    AccSize = AccFiles = AccDirs = 0;
    e70a:	10 92 ba 1c 	sts	0x1CBA, r1	; 0x801cba <AccDirs+0x1>
    e70e:	10 92 b9 1c 	sts	0x1CB9, r1	; 0x801cb9 <AccDirs>
    e712:	10 92 bc 1c 	sts	0x1CBC, r1	; 0x801cbc <AccFiles+0x1>
    e716:	10 92 bb 1c 	sts	0x1CBB, r1	; 0x801cbb <AccFiles>
    e71a:	10 92 b5 1c 	sts	0x1CB5, r1	; 0x801cb5 <AccSize>
    e71e:	10 92 b6 1c 	sts	0x1CB6, r1	; 0x801cb6 <AccSize+0x1>
    e722:	10 92 b7 1c 	sts	0x1CB7, r1	; 0x801cb7 <AccSize+0x2>
    e726:	10 92 b8 1c 	sts	0x1CB8, r1	; 0x801cb8 <AccSize+0x3>
    res = fatfs_scan_files(buff);
    e72a:	c8 01       	movw	r24, r16
    e72c:	58 dd       	rcall	.-1360   	; 0xe1de <fatfs_scan_files>
    if (res)
    e72e:	89 2b       	or	r24, r25
    e730:	19 f0       	breq	.+6      	; 0xe738 <fatfs_status+0x334>
    {
        printf("fatfs_status fatfs_scan_files failed\n");
    e732:	81 ed       	ldi	r24, 0xD1	; 209
    e734:	98 e0       	ldi	r25, 0x08	; 8
    e736:	af cf       	rjmp	.-162    	; 0xe696 <fatfs_status+0x292>
        return(0);
    }
    printf("%u files, %lu bytes.\n%u folders.\n"
    e738:	c9 5c       	subi	r28, 0xC9	; 201
    e73a:	de 4f       	sbci	r29, 0xFE	; 254
    e73c:	08 81       	ld	r16, Y
    e73e:	19 81       	ldd	r17, Y+1	; 0x01
    e740:	c7 53       	subi	r28, 0x37	; 55
    e742:	d1 40       	sbci	r29, 0x01	; 1
    e744:	f8 01       	movw	r30, r16
    e746:	c1 84       	ldd	r12, Z+9	; 0x09
    e748:	d2 84       	ldd	r13, Z+10	; 0x0a
    e74a:	e1 2c       	mov	r14, r1
    e74c:	f1 2c       	mov	r15, r1
    e74e:	cd 5c       	subi	r28, 0xCD	; 205
    e750:	de 4f       	sbci	r29, 0xFE	; 254
    e752:	68 81       	ld	r22, Y
    e754:	79 81       	ldd	r23, Y+1	; 0x01
    e756:	8a 81       	ldd	r24, Y+2	; 0x02
    e758:	9b 81       	ldd	r25, Y+3	; 0x03
    e75a:	c3 53       	subi	r28, 0x33	; 51
    e75c:	d1 40       	sbci	r29, 0x01	; 1
    e75e:	a7 01       	movw	r20, r14
    e760:	96 01       	movw	r18, r12
    e762:	0e 94 f5 e7 	call	0x1cfea	; 0x1cfea <__mulsi3>
    e766:	22 e0       	ldi	r18, 0x02	; 2
    e768:	30 e0       	ldi	r19, 0x00	; 0
    e76a:	40 e0       	ldi	r20, 0x00	; 0
    e76c:	50 e0       	ldi	r21, 0x00	; 0
    e76e:	0e 94 59 e8 	call	0x1d0b2	; 0x1d0b2 <__divmodsi4>
    e772:	ed b7       	in	r30, 0x3d	; 61
    e774:	fe b7       	in	r31, 0x3e	; 62
    e776:	20 8b       	std	Z+16, r18	; 0x10
    e778:	31 8b       	std	Z+17, r19	; 0x11
    e77a:	42 8b       	std	Z+18, r20	; 0x12
    e77c:	53 8b       	std	Z+19, r21	; 0x13
    e77e:	f8 01       	movw	r30, r16
    e780:	81 8d       	ldd	r24, Z+25	; 0x19
    e782:	92 8d       	ldd	r25, Z+26	; 0x1a
    e784:	a3 8d       	ldd	r26, Z+27	; 0x1b
    e786:	b4 8d       	ldd	r27, Z+28	; 0x1c
    e788:	9c 01       	movw	r18, r24
    e78a:	ad 01       	movw	r20, r26
    e78c:	22 50       	subi	r18, 0x02	; 2
    e78e:	31 09       	sbc	r19, r1
    e790:	41 09       	sbc	r20, r1
    e792:	51 09       	sbc	r21, r1
    e794:	c7 01       	movw	r24, r14
    e796:	b6 01       	movw	r22, r12
    e798:	0e 94 f5 e7 	call	0x1cfea	; 0x1cfea <__mulsi3>
    e79c:	dc 01       	movw	r26, r24
    e79e:	cb 01       	movw	r24, r22
    e7a0:	b6 95       	lsr	r27
    e7a2:	a7 95       	ror	r26
    e7a4:	97 95       	ror	r25
    e7a6:	87 95       	ror	r24
    e7a8:	ed b7       	in	r30, 0x3d	; 61
    e7aa:	fe b7       	in	r31, 0x3e	; 62
    e7ac:	84 87       	std	Z+12, r24	; 0x0c
    e7ae:	95 87       	std	Z+13, r25	; 0x0d
    e7b0:	a6 87       	std	Z+14, r26	; 0x0e
    e7b2:	b7 87       	std	Z+15, r27	; 0x0f
    e7b4:	80 91 b9 1c 	lds	r24, 0x1CB9	; 0x801cb9 <AccDirs>
    e7b8:	90 91 ba 1c 	lds	r25, 0x1CBA	; 0x801cba <AccDirs+0x1>
    e7bc:	93 87       	std	Z+11, r25	; 0x0b
    e7be:	82 87       	std	Z+10, r24	; 0x0a
    e7c0:	80 91 b5 1c 	lds	r24, 0x1CB5	; 0x801cb5 <AccSize>
    e7c4:	90 91 b6 1c 	lds	r25, 0x1CB6	; 0x801cb6 <AccSize+0x1>
    e7c8:	a0 91 b7 1c 	lds	r26, 0x1CB7	; 0x801cb7 <AccSize+0x2>
    e7cc:	b0 91 b8 1c 	lds	r27, 0x1CB8	; 0x801cb8 <AccSize+0x3>
    e7d0:	86 83       	std	Z+6, r24	; 0x06
    e7d2:	97 83       	std	Z+7, r25	; 0x07
    e7d4:	a0 87       	std	Z+8, r26	; 0x08
    e7d6:	b1 87       	std	Z+9, r27	; 0x09
    e7d8:	80 91 bb 1c 	lds	r24, 0x1CBB	; 0x801cbb <AccFiles>
    e7dc:	90 91 bc 1c 	lds	r25, 0x1CBC	; 0x801cbc <AccFiles+0x1>
    e7e0:	95 83       	std	Z+5, r25	; 0x05
    e7e2:	84 83       	std	Z+4, r24	; 0x04
    e7e4:	84 e8       	ldi	r24, 0x84	; 132
    e7e6:	98 e0       	ldi	r25, 0x08	; 8
    e7e8:	a0 e0       	ldi	r26, 0x00	; 0
    e7ea:	81 83       	std	Z+1, r24	; 0x01
    e7ec:	92 83       	std	Z+2, r25	; 0x02
    e7ee:	a3 83       	std	Z+3, r26	; 0x03
    e7f0:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
        "%lu KB total disk space.\n%lu KB available.\n",
        AccFiles, AccSize, AccDirs,
        (fs->n_fatent - 2) * fs->csize / 2, p2 * fs->csize / 2
        );
	return(1);
    e7f4:	81 e0       	ldi	r24, 0x01	; 1
    e7f6:	90 e0       	ldi	r25, 0x00	; 0
}
    e7f8:	c8 5c       	subi	r28, 0xC8	; 200
    e7fa:	de 4f       	sbci	r29, 0xFE	; 254
    e7fc:	e8 e0       	ldi	r30, 0x08	; 8
    e7fe:	0c 94 ca e8 	jmp	0x1d194	; 0x1d194 <__epilogue_restores__+0x14>

0000e802 <fatfs_filinfo_list>:
/// @param[in] : FILINFO pointer
/// @return  void

MEMSPACE
void fatfs_filinfo_list(FILINFO *info)
{
    e802:	ab e1       	ldi	r26, 0x1B	; 27
    e804:	b0 e0       	ldi	r27, 0x00	; 0
    e806:	e7 e0       	ldi	r30, 0x07	; 7
    e808:	f4 e7       	ldi	r31, 0x74	; 116
    e80a:	0c 94 b4 e8 	jmp	0x1d168	; 0x1d168 <__prologue_saves__+0x20>
    e80e:	dc 01       	movw	r26, r24
    char attrs[6];
    if(info->fname[0] == 0)
    e810:	fc 01       	movw	r30, r24
    e812:	86 89       	ldd	r24, Z+22	; 0x16
    e814:	81 11       	cpse	r24, r1
    e816:	03 c0       	rjmp	.+6      	; 0xe81e <fatfs_filinfo_list+0x1c>
    {
        printf("fatfs_filinfo_list: empty\n");
    e818:	89 e6       	ldi	r24, 0x69	; 105
    e81a:	98 e0       	ldi	r25, 0x08	; 8
    e81c:	69 c0       	rjmp	.+210    	; 0xe8f0 <fatfs_filinfo_list+0xee>
        return;
    }
    attrs[0] = (info->fattrib & AM_DIR) ? 'D' : '-';
    e81e:	fd 01       	movw	r30, r26
    e820:	80 85       	ldd	r24, Z+8	; 0x08
    e822:	84 fd       	sbrc	r24, 4
    e824:	02 c0       	rjmp	.+4      	; 0xe82a <fatfs_filinfo_list+0x28>
    e826:	9d e2       	ldi	r25, 0x2D	; 45
    e828:	01 c0       	rjmp	.+2      	; 0xe82c <fatfs_filinfo_list+0x2a>
    e82a:	94 e4       	ldi	r25, 0x44	; 68
    e82c:	9e 8b       	std	Y+22, r25	; 0x16
    attrs[1] = (info->fattrib & AM_RDO) ? 'R' : '-';
    e82e:	80 fd       	sbrc	r24, 0
    e830:	02 c0       	rjmp	.+4      	; 0xe836 <fatfs_filinfo_list+0x34>
    e832:	9d e2       	ldi	r25, 0x2D	; 45
    e834:	01 c0       	rjmp	.+2      	; 0xe838 <fatfs_filinfo_list+0x36>
    e836:	92 e5       	ldi	r25, 0x52	; 82
    e838:	9f 8b       	std	Y+23, r25	; 0x17
    attrs[2] = (info->fattrib & AM_HID) ? 'H' : '-';
    e83a:	81 fd       	sbrc	r24, 1
    e83c:	02 c0       	rjmp	.+4      	; 0xe842 <fatfs_filinfo_list+0x40>
    e83e:	9d e2       	ldi	r25, 0x2D	; 45
    e840:	01 c0       	rjmp	.+2      	; 0xe844 <fatfs_filinfo_list+0x42>
    e842:	98 e4       	ldi	r25, 0x48	; 72
    e844:	98 8f       	std	Y+24, r25	; 0x18
    attrs[3] = (info->fattrib & AM_SYS) ? 'S' : '-';
    e846:	82 fd       	sbrc	r24, 2
    e848:	02 c0       	rjmp	.+4      	; 0xe84e <fatfs_filinfo_list+0x4c>
    e84a:	9d e2       	ldi	r25, 0x2D	; 45
    e84c:	01 c0       	rjmp	.+2      	; 0xe850 <fatfs_filinfo_list+0x4e>
    e84e:	93 e5       	ldi	r25, 0x53	; 83
    e850:	99 8f       	std	Y+25, r25	; 0x19
    attrs[4] = (info->fattrib & AM_ARC) ? 'A' : '-';
    e852:	85 fd       	sbrc	r24, 5
    e854:	02 c0       	rjmp	.+4      	; 0xe85a <fatfs_filinfo_list+0x58>
    e856:	8d e2       	ldi	r24, 0x2D	; 45
    e858:	01 c0       	rjmp	.+2      	; 0xe85c <fatfs_filinfo_list+0x5a>
    e85a:	81 e4       	ldi	r24, 0x41	; 65
    e85c:	8a 8f       	std	Y+26, r24	; 0x1a
    attrs[5] = 0;
    e85e:	1b 8e       	std	Y+27, r1	; 0x1b
    printf("%s %u/%02u/%02u %02u:%02u %9lu %s",
    e860:	fd 01       	movw	r30, r26
    e862:	24 81       	ldd	r18, Z+4	; 0x04
    e864:	35 81       	ldd	r19, Z+5	; 0x05
    e866:	46 81       	ldd	r20, Z+6	; 0x06
    e868:	57 81       	ldd	r21, Z+7	; 0x07
    e86a:	cd 01       	movw	r24, r26
    e86c:	46 96       	adiw	r24, 0x16	; 22
    e86e:	ed b7       	in	r30, 0x3d	; 61
    e870:	fe b7       	in	r31, 0x3e	; 62
    e872:	95 8b       	std	Z+21, r25	; 0x15
    e874:	84 8b       	std	Z+20, r24	; 0x14
    e876:	8d 91       	ld	r24, X+
    e878:	9d 91       	ld	r25, X+
    e87a:	0d 90       	ld	r0, X+
    e87c:	bc 91       	ld	r27, X
    e87e:	a0 2d       	mov	r26, r0
    e880:	80 8b       	std	Z+16, r24	; 0x10
    e882:	91 8b       	std	Z+17, r25	; 0x11
    e884:	a2 8b       	std	Z+18, r26	; 0x12
    e886:	b3 8b       	std	Z+19, r27	; 0x13
    e888:	ca 01       	movw	r24, r20
    e88a:	45 e0       	ldi	r20, 0x05	; 5
    e88c:	96 95       	lsr	r25
    e88e:	87 95       	ror	r24
    e890:	4a 95       	dec	r20
    e892:	e1 f7       	brne	.-8      	; 0xe88c <fatfs_filinfo_list+0x8a>
    e894:	8f 73       	andi	r24, 0x3F	; 63
    e896:	99 27       	eor	r25, r25
    e898:	97 87       	std	Z+15, r25	; 0x0f
    e89a:	86 87       	std	Z+14, r24	; 0x0e
    e89c:	85 2f       	mov	r24, r21
    e89e:	86 95       	lsr	r24
    e8a0:	86 95       	lsr	r24
    e8a2:	86 95       	lsr	r24
    e8a4:	84 87       	std	Z+12, r24	; 0x0c
    e8a6:	15 86       	std	Z+13, r1	; 0x0d
    e8a8:	c9 01       	movw	r24, r18
    e8aa:	8f 71       	andi	r24, 0x1F	; 31
    e8ac:	99 27       	eor	r25, r25
    e8ae:	93 87       	std	Z+11, r25	; 0x0b
    e8b0:	82 87       	std	Z+10, r24	; 0x0a
    e8b2:	c9 01       	movw	r24, r18
    e8b4:	55 e0       	ldi	r21, 0x05	; 5
    e8b6:	96 95       	lsr	r25
    e8b8:	87 95       	ror	r24
    e8ba:	5a 95       	dec	r21
    e8bc:	e1 f7       	brne	.-8      	; 0xe8b6 <fatfs_filinfo_list+0xb4>
    e8be:	8f 70       	andi	r24, 0x0F	; 15
    e8c0:	99 27       	eor	r25, r25
    e8c2:	91 87       	std	Z+9, r25	; 0x09
    e8c4:	80 87       	std	Z+8, r24	; 0x08
    e8c6:	23 2f       	mov	r18, r19
    e8c8:	33 27       	eor	r19, r19
    e8ca:	26 95       	lsr	r18
    e8cc:	24 54       	subi	r18, 0x44	; 68
    e8ce:	38 4f       	sbci	r19, 0xF8	; 248
    e8d0:	37 83       	std	Z+7, r19	; 0x07
    e8d2:	26 83       	std	Z+6, r18	; 0x06
    e8d4:	ce 01       	movw	r24, r28
    e8d6:	46 96       	adiw	r24, 0x16	; 22
    e8d8:	95 83       	std	Z+5, r25	; 0x05
    e8da:	84 83       	std	Z+4, r24	; 0x04
    e8dc:	87 e4       	ldi	r24, 0x47	; 71
    e8de:	98 e0       	ldi	r25, 0x08	; 8
    e8e0:	a0 e0       	ldi	r26, 0x00	; 0
    e8e2:	81 83       	std	Z+1, r24	; 0x01
    e8e4:	92 83       	std	Z+2, r25	; 0x02
    e8e6:	a3 83       	std	Z+3, r26	; 0x03
    e8e8:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
        attrs,
        (info->fdate >> 9) + 1980, (info->fdate >> 5) & 15, info->fdate & 31,
        (info->ftime >> 11), (info->ftime >> 5) & 63,
        info->fsize, info->fname);
    printf("\n");
    e8ec:	85 e4       	ldi	r24, 0x45	; 69
    e8ee:	98 e0       	ldi	r25, 0x08	; 8
    e8f0:	a0 e0       	ldi	r26, 0x00	; 0
    e8f2:	ed b7       	in	r30, 0x3d	; 61
    e8f4:	fe b7       	in	r31, 0x3e	; 62
    e8f6:	81 83       	std	Z+1, r24	; 0x01
    e8f8:	92 83       	std	Z+2, r25	; 0x02
    e8fa:	a3 83       	std	Z+3, r26	; 0x03
    e8fc:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
}
    e900:	6b 96       	adiw	r28, 0x1b	; 27
    e902:	e2 e0       	ldi	r30, 0x02	; 2
    e904:	0c 94 d0 e8 	jmp	0x1d1a0	; 0x1d1a0 <__epilogue_restores__+0x20>

0000e908 <fatfs_help>:

/// @brief Display FatFs test diagnostics help menu.
/// @return  void
MEMSPACE
void fatfs_help( int full)
{
    e908:	00 d0       	rcall	.+0      	; 0xe90a <fatfs_help+0x2>
    e90a:	1f 92       	push	r1
    if(full)
    e90c:	89 2b       	or	r24, r25
    e90e:	19 f0       	breq	.+6      	; 0xe916 <fatfs_help+0xe>
    {
        printf(
    e910:	8b e2       	ldi	r24, 0x2B	; 43
    e912:	9b e0       	ldi	r25, 0x0B	; 11
    e914:	02 c0       	rjmp	.+4      	; 0xe91a <fatfs_help+0x12>
            "\n"
            );
    }
	else
	{
		printf("fatfs     help\n");
    e916:	8b e1       	ldi	r24, 0x1B	; 27
    e918:	9b e0       	ldi	r25, 0x0B	; 11
    e91a:	a0 e0       	ldi	r26, 0x00	; 0
    e91c:	ed b7       	in	r30, 0x3d	; 61
    e91e:	fe b7       	in	r31, 0x3e	; 62
    e920:	81 83       	std	Z+1, r24	; 0x01
    e922:	92 83       	std	Z+2, r25	; 0x02
    e924:	a3 83       	std	Z+3, r26	; 0x03
    e926:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
	}

}
    e92a:	0f 90       	pop	r0
    e92c:	0f 90       	pop	r0
    e92e:	0f 90       	pop	r0
    e930:	08 95       	ret

0000e932 <fatfs_ls>:
///
/// @see fatfs_filinfo_list().
/// @return  1 on success or 0 on error
MEMSPACE
int fatfs_ls(char *name)
{
    e932:	a6 e5       	ldi	r26, 0x56	; 86
    e934:	b2 e0       	ldi	r27, 0x02	; 2
    e936:	ef e9       	ldi	r30, 0x9F	; 159
    e938:	f4 e7       	ldi	r31, 0x74	; 116
    e93a:	0c 94 ac e8 	jmp	0x1d158	; 0x1d158 <__prologue_saves__+0x10>
    FILINFO fno;
    DIR dirs;                                     /* Directory object */
    FATFS *fs;
    char buff[MAX_NAME_LEN+1];

	memset(buff,0,sizeof(buff)-1);
    e93e:	8e 01       	movw	r16, r28
    e940:	0e 5d       	subi	r16, 0xDE	; 222
    e942:	1e 4f       	sbci	r17, 0xFE	; 254
    e944:	20 e0       	ldi	r18, 0x00	; 0
    e946:	31 e0       	ldi	r19, 0x01	; 1
    e948:	f8 01       	movw	r30, r16
    e94a:	a9 01       	movw	r20, r18
    e94c:	11 92       	st	Z+, r1
    e94e:	41 50       	subi	r20, 0x01	; 1
    e950:	50 40       	sbci	r21, 0x00	; 0
    e952:	e1 f7       	brne	.-8      	; 0xe94c <fatfs_ls+0x1a>

    if(!name || !*name)
    e954:	00 97       	sbiw	r24, 0x00	; 0
    e956:	21 f0       	breq	.+8      	; 0xe960 <fatfs_ls+0x2e>
    e958:	fc 01       	movw	r30, r24
    e95a:	20 81       	ld	r18, Z
    e95c:	21 11       	cpse	r18, r1
    e95e:	03 c0       	rjmp	.+6      	; 0xe966 <fatfs_ls+0x34>
    {
        strcpy(buff,".");
    e960:	66 ee       	ldi	r22, 0xE6	; 230
    e962:	72 e1       	ldi	r23, 0x12	; 18
    e964:	01 c0       	rjmp	.+2      	; 0xe968 <fatfs_ls+0x36>
    }
    else
    {
        strcpy(buff,name);
    e966:	bc 01       	movw	r22, r24
    e968:	c8 01       	movw	r24, r16
    e96a:	0e 94 3d 32 	call	0x647a	; 0x647a <strcpy>
    }
    printf("Listing:[%s]\n",buff);
    e96e:	ed b7       	in	r30, 0x3d	; 61
    e970:	fe b7       	in	r31, 0x3e	; 62
    e972:	15 83       	std	Z+5, r17	; 0x05
    e974:	04 83       	std	Z+4, r16	; 0x04
    e976:	8d e0       	ldi	r24, 0x0D	; 13
    e978:	9b e0       	ldi	r25, 0x0B	; 11
    e97a:	a0 e0       	ldi	r26, 0x00	; 0
    e97c:	81 83       	std	Z+1, r24	; 0x01
    e97e:	92 83       	std	Z+2, r25	; 0x02
    e980:	a3 83       	std	Z+3, r26	; 0x03
    e982:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>

    res = f_opendir(&dirs, buff);
    e986:	b8 01       	movw	r22, r16
    e988:	ce 01       	movw	r24, r28
    e98a:	8d 5d       	subi	r24, 0xDD	; 221
    e98c:	9d 4f       	sbci	r25, 0xFD	; 253
    e98e:	0e 94 23 64 	call	0xc846	; 0xc846 <f_opendir>
    if (res != FR_OK) 
    e992:	89 2b       	or	r24, r25
    e994:	09 f0       	breq	.+2      	; 0xe998 <fatfs_ls+0x66>
    e996:	96 c0       	rjmp	.+300    	; 0xeac4 <fatfs_ls+0x192>
	{ 
		return(0); 
	}
    p1 = s1 = s2 = 0;
    e998:	cf 5a       	subi	r28, 0xAF	; 175
    e99a:	dd 4f       	sbci	r29, 0xFD	; 253
    e99c:	18 82       	st	Y, r1
    e99e:	19 82       	std	Y+1, r1	; 0x01
    e9a0:	1a 82       	std	Y+2, r1	; 0x02
    e9a2:	1b 82       	std	Y+3, r1	; 0x03
    e9a4:	c1 55       	subi	r28, 0x51	; 81
    e9a6:	d2 40       	sbci	r29, 0x02	; 2
    e9a8:	a1 2c       	mov	r10, r1
    e9aa:	b1 2c       	mov	r11, r1
    e9ac:	c1 2c       	mov	r12, r1
    e9ae:	d1 2c       	mov	r13, r1
    while(1)
    {
        res = f_readdir(&dirs, &fno);
    e9b0:	be 01       	movw	r22, r28
    e9b2:	64 5f       	subi	r22, 0xF4	; 244
    e9b4:	7f 4f       	sbci	r23, 0xFF	; 255
    e9b6:	ce 01       	movw	r24, r28
    e9b8:	8d 5d       	subi	r24, 0xDD	; 221
    e9ba:	9d 4f       	sbci	r25, 0xFD	; 253
    e9bc:	0e 94 a9 64 	call	0xc952	; 0xc952 <f_readdir>
    e9c0:	7c 01       	movw	r14, r24
        if (res != FR_OK) 
    e9c2:	89 2b       	or	r24, r25
    e9c4:	49 f5       	brne	.+82     	; 0xea18 <fatfs_ls+0xe6>
			break;
		if(!fno.fname[0]) 
    e9c6:	8a a1       	ldd	r24, Y+34	; 0x22
    e9c8:	88 23       	and	r24, r24
    e9ca:	31 f1       	breq	.+76     	; 0xea18 <fatfs_ls+0xe6>
			break;
        if (fno.fattrib & AM_DIR)
    e9cc:	8c 89       	ldd	r24, Y+20	; 0x14
    e9ce:	84 ff       	sbrs	r24, 4
    e9d0:	04 c0       	rjmp	.+8      	; 0xe9da <fatfs_ls+0xa8>
        {
            s2++;
    e9d2:	ff ef       	ldi	r31, 0xFF	; 255
    e9d4:	af 1a       	sub	r10, r31
    e9d6:	bf 0a       	sbc	r11, r31
    e9d8:	1b c0       	rjmp	.+54     	; 0xea10 <fatfs_ls+0xde>
        }
        else
        {
            s1++; p1 += fno.fsize;
    e9da:	4f ef       	ldi	r20, 0xFF	; 255
    e9dc:	c4 1a       	sub	r12, r20
    e9de:	d4 0a       	sbc	r13, r20
    e9e0:	4c 85       	ldd	r20, Y+12	; 0x0c
    e9e2:	5d 85       	ldd	r21, Y+13	; 0x0d
    e9e4:	6e 85       	ldd	r22, Y+14	; 0x0e
    e9e6:	7f 85       	ldd	r23, Y+15	; 0x0f
    e9e8:	cf 5a       	subi	r28, 0xAF	; 175
    e9ea:	dd 4f       	sbci	r29, 0xFD	; 253
    e9ec:	88 81       	ld	r24, Y
    e9ee:	99 81       	ldd	r25, Y+1	; 0x01
    e9f0:	aa 81       	ldd	r26, Y+2	; 0x02
    e9f2:	bb 81       	ldd	r27, Y+3	; 0x03
    e9f4:	c1 55       	subi	r28, 0x51	; 81
    e9f6:	d2 40       	sbci	r29, 0x02	; 2
    e9f8:	84 0f       	add	r24, r20
    e9fa:	95 1f       	adc	r25, r21
    e9fc:	a6 1f       	adc	r26, r22
    e9fe:	b7 1f       	adc	r27, r23
    ea00:	cf 5a       	subi	r28, 0xAF	; 175
    ea02:	dd 4f       	sbci	r29, 0xFD	; 253
    ea04:	88 83       	st	Y, r24
    ea06:	99 83       	std	Y+1, r25	; 0x01
    ea08:	aa 83       	std	Y+2, r26	; 0x02
    ea0a:	bb 83       	std	Y+3, r27	; 0x03
    ea0c:	c1 55       	subi	r28, 0x51	; 81
    ea0e:	d2 40       	sbci	r29, 0x02	; 2
        }
        fatfs_filinfo_list(&fno);
    ea10:	ce 01       	movw	r24, r28
    ea12:	0c 96       	adiw	r24, 0x0c	; 12
    ea14:	f6 de       	rcall	.-532    	; 0xe802 <fatfs_filinfo_list>
#ifdef ESP8266
        optimistic_yield(1000);
        wdt_reset();
#endif
    }
    ea16:	cc cf       	rjmp	.-104    	; 0xe9b0 <fatfs_ls+0x7e>
	f_closedir(&dirs);
    ea18:	ce 01       	movw	r24, r28
    ea1a:	8d 5d       	subi	r24, 0xDD	; 221
    ea1c:	9d 4f       	sbci	r25, 0xFD	; 253
    ea1e:	0e 94 94 64 	call	0xc928	; 0xc928 <f_closedir>
    printf("%4u File(s),%10lu bytes total\n%4u Dir(s)", s1, p1, s2);
    ea22:	ed b7       	in	r30, 0x3d	; 61
    ea24:	fe b7       	in	r31, 0x3e	; 62
    ea26:	b3 86       	std	Z+11, r11	; 0x0b
    ea28:	a2 86       	std	Z+10, r10	; 0x0a
    ea2a:	cf 5a       	subi	r28, 0xAF	; 175
    ea2c:	dd 4f       	sbci	r29, 0xFD	; 253
    ea2e:	88 81       	ld	r24, Y
    ea30:	99 81       	ldd	r25, Y+1	; 0x01
    ea32:	aa 81       	ldd	r26, Y+2	; 0x02
    ea34:	bb 81       	ldd	r27, Y+3	; 0x03
    ea36:	c1 55       	subi	r28, 0x51	; 81
    ea38:	d2 40       	sbci	r29, 0x02	; 2
    ea3a:	86 83       	std	Z+6, r24	; 0x06
    ea3c:	97 83       	std	Z+7, r25	; 0x07
    ea3e:	a0 87       	std	Z+8, r26	; 0x08
    ea40:	b1 87       	std	Z+9, r27	; 0x09
    ea42:	d5 82       	std	Z+5, r13	; 0x05
    ea44:	c4 82       	std	Z+4, r12	; 0x04
    ea46:	84 ee       	ldi	r24, 0xE4	; 228
    ea48:	9a e0       	ldi	r25, 0x0A	; 10
    ea4a:	a0 e0       	ldi	r26, 0x00	; 0
    ea4c:	81 83       	std	Z+1, r24	; 0x01
    ea4e:	92 83       	std	Z+2, r25	; 0x02
    ea50:	a3 83       	std	Z+3, r26	; 0x03
    ea52:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
    if (f_getfree(buff, (DWORD*)&p1, &fs) == FR_OK)
    ea56:	ae 01       	movw	r20, r28
    ea58:	4b 5a       	subi	r20, 0xAB	; 171
    ea5a:	5d 4f       	sbci	r21, 0xFD	; 253
    ea5c:	be 01       	movw	r22, r28
    ea5e:	6f 5a       	subi	r22, 0xAF	; 175
    ea60:	7d 4f       	sbci	r23, 0xFD	; 253
    ea62:	c8 01       	movw	r24, r16
    ea64:	0e 94 2b 65 	call	0xca56	; 0xca56 <f_getfree>
    ea68:	89 2b       	or	r24, r25
    ea6a:	31 f5       	brne	.+76     	; 0xeab8 <fatfs_ls+0x186>
        printf(", %10luK bytes free\n", p1 * fs->csize / 2);
    ea6c:	cb 5a       	subi	r28, 0xAB	; 171
    ea6e:	dd 4f       	sbci	r29, 0xFD	; 253
    ea70:	e8 81       	ld	r30, Y
    ea72:	f9 81       	ldd	r31, Y+1	; 0x01
    ea74:	c5 55       	subi	r28, 0x55	; 85
    ea76:	d2 40       	sbci	r29, 0x02	; 2
    ea78:	a1 85       	ldd	r26, Z+9	; 0x09
    ea7a:	b2 85       	ldd	r27, Z+10	; 0x0a
    ea7c:	cf 5a       	subi	r28, 0xAF	; 175
    ea7e:	dd 4f       	sbci	r29, 0xFD	; 253
    ea80:	28 81       	ld	r18, Y
    ea82:	39 81       	ldd	r19, Y+1	; 0x01
    ea84:	4a 81       	ldd	r20, Y+2	; 0x02
    ea86:	5b 81       	ldd	r21, Y+3	; 0x03
    ea88:	c1 55       	subi	r28, 0x51	; 81
    ea8a:	d2 40       	sbci	r29, 0x02	; 2
    ea8c:	0e 94 84 e8 	call	0x1d108	; 0x1d108 <__muluhisi3>
    ea90:	22 e0       	ldi	r18, 0x02	; 2
    ea92:	30 e0       	ldi	r19, 0x00	; 0
    ea94:	40 e0       	ldi	r20, 0x00	; 0
    ea96:	50 e0       	ldi	r21, 0x00	; 0
    ea98:	0e 94 59 e8 	call	0x1d0b2	; 0x1d0b2 <__divmodsi4>
    ea9c:	ed b7       	in	r30, 0x3d	; 61
    ea9e:	fe b7       	in	r31, 0x3e	; 62
    eaa0:	24 83       	std	Z+4, r18	; 0x04
    eaa2:	35 83       	std	Z+5, r19	; 0x05
    eaa4:	46 83       	std	Z+6, r20	; 0x06
    eaa6:	57 83       	std	Z+7, r21	; 0x07
    eaa8:	8f ec       	ldi	r24, 0xCF	; 207
    eaaa:	9a e0       	ldi	r25, 0x0A	; 10
    eaac:	a0 e0       	ldi	r26, 0x00	; 0
    eaae:	81 83       	std	Z+1, r24	; 0x01
    eab0:	92 83       	std	Z+2, r25	; 0x02
    eab2:	a3 83       	std	Z+3, r26	; 0x03
    eab4:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
	if(res)
    eab8:	e1 14       	cp	r14, r1
    eaba:	f1 04       	cpc	r15, r1
    eabc:	31 f4       	brne	.+12     	; 0xeaca <fatfs_ls+0x198>
		return(-1);
	return(1);
    eabe:	81 e0       	ldi	r24, 0x01	; 1
    eac0:	90 e0       	ldi	r25, 0x00	; 0
    eac2:	05 c0       	rjmp	.+10     	; 0xeace <fatfs_ls+0x19c>
    printf("Listing:[%s]\n",buff);

    res = f_opendir(&dirs, buff);
    if (res != FR_OK) 
	{ 
		return(0); 
    eac4:	80 e0       	ldi	r24, 0x00	; 0
    eac6:	90 e0       	ldi	r25, 0x00	; 0
    eac8:	02 c0       	rjmp	.+4      	; 0xeace <fatfs_ls+0x19c>
	f_closedir(&dirs);
    printf("%4u File(s),%10lu bytes total\n%4u Dir(s)", s1, p1, s2);
    if (f_getfree(buff, (DWORD*)&p1, &fs) == FR_OK)
        printf(", %10luK bytes free\n", p1 * fs->csize / 2);
	if(res)
		return(-1);
    eaca:	8f ef       	ldi	r24, 0xFF	; 255
    eacc:	9f ef       	ldi	r25, 0xFF	; 255
	return(1);
}
    eace:	ca 5a       	subi	r28, 0xAA	; 170
    ead0:	dd 4f       	sbci	r29, 0xFD	; 253
    ead2:	ea e0       	ldi	r30, 0x0A	; 10
    ead4:	0c 94 c8 e8 	jmp	0x1d190	; 0x1d190 <__epilogue_restores__+0x10>

0000ead8 <fatfs_tests>:
///
/// @return 1 The ruturn code indicates a command matched.
/// @return 0 if no rules matched
MEMSPACE
int fatfs_tests(int argc,char *argv[])
{
    ead8:	ef 92       	push	r14
    eada:	ff 92       	push	r15
    eadc:	0f 93       	push	r16
    eade:	1f 93       	push	r17
    eae0:	cf 93       	push	r28
    eae2:	df 93       	push	r29
    eae4:	00 d0       	rcall	.+0      	; 0xeae6 <fatfs_tests+0xe>
    eae6:	1f 92       	push	r1
    char *ptr;
    int ind;

    ind = 0;
    ptr = argv[ind];
    eae8:	fb 01       	movw	r30, r22
    eaea:	20 81       	ld	r18, Z
    eaec:	31 81       	ldd	r19, Z+1	; 0x01

    if(!ptr)
    eaee:	21 15       	cp	r18, r1
    eaf0:	31 05       	cpc	r19, r1
    eaf2:	19 f4       	brne	.+6      	; 0xeafa <fatfs_tests+0x22>
        return(0);
    eaf4:	80 e0       	ldi	r24, 0x00	; 0
    eaf6:	90 e0       	ldi	r25, 0x00	; 0
    eaf8:	5a c0       	rjmp	.+180    	; 0xebae <fatfs_tests+0xd6>
    eafa:	eb 01       	movw	r28, r22
    eafc:	7c 01       	movw	r14, r24

// If we have POSIX_TESTS we MUST prefix each test with "fatfs" keyword to avoid name clashing

    if( MATCHI(ptr,"fatfs") )
    eafe:	62 ed       	ldi	r22, 0xD2	; 210
    eb00:	78 e0       	ldi	r23, 0x08	; 8
    eb02:	c9 01       	movw	r24, r18
    eb04:	0e 94 49 33 	call	0x6692	; 0x6692 <MATCHI>
    eb08:	89 2b       	or	r24, r25
    eb0a:	a1 f3       	breq	.-24     	; 0xeaf4 <fatfs_tests+0x1c>
    {
        ptr = argv[++ind];
    eb0c:	0a 81       	ldd	r16, Y+2	; 0x02
    eb0e:	1b 81       	ldd	r17, Y+3	; 0x03
        if ( !ptr || MATCHI(ptr,"help") )
    eb10:	01 15       	cp	r16, r1
    eb12:	11 05       	cpc	r17, r1
    eb14:	59 f4       	brne	.+22     	; 0xeb2c <fatfs_tests+0x54>
MEMSPACE
void fatfs_help( int full)
{
    if(full)
    {
        printf(
    eb16:	8b e2       	ldi	r24, 0x2B	; 43
    eb18:	9b e0       	ldi	r25, 0x0B	; 11
    eb1a:	a0 e0       	ldi	r26, 0x00	; 0
    eb1c:	ed b7       	in	r30, 0x3d	; 61
    eb1e:	fe b7       	in	r31, 0x3e	; 62
    eb20:	81 83       	std	Z+1, r24	; 0x01
    eb22:	92 83       	std	Z+2, r25	; 0x02
    eb24:	a3 83       	std	Z+3, r26	; 0x03
    eb26:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
    eb2a:	2f c0       	rjmp	.+94     	; 0xeb8a <fatfs_tests+0xb2>
// If we have POSIX_TESTS we MUST prefix each test with "fatfs" keyword to avoid name clashing

    if( MATCHI(ptr,"fatfs") )
    {
        ptr = argv[++ind];
        if ( !ptr || MATCHI(ptr,"help") )
    eb2c:	62 e6       	ldi	r22, 0x62	; 98
    eb2e:	76 e1       	ldi	r23, 0x16	; 22
    eb30:	c8 01       	movw	r24, r16
    eb32:	0e 94 49 33 	call	0x6692	; 0x6692 <MATCHI>
    eb36:	89 2b       	or	r24, r25
    eb38:	71 f7       	brne	.-36     	; 0xeb16 <fatfs_tests+0x3e>
    {
        return(0);
    }
#endif

    if (MATCHI(ptr,"ls") || MATCHI(ptr,"dir") )
    eb3a:	68 ed       	ldi	r22, 0xD8	; 216
    eb3c:	78 e0       	ldi	r23, 0x08	; 8
    eb3e:	c8 01       	movw	r24, r16
    eb40:	0e 94 49 33 	call	0x6692	; 0x6692 <MATCHI>
    eb44:	89 2b       	or	r24, r25
    eb46:	21 f0       	breq	.+8      	; 0xeb50 <fatfs_tests+0x78>
    eb48:	24 96       	adiw	r28, 0x04	; 4
///
/// @return 1 The ruturn code indicates a command matched.
/// @return 0 if no rules matched
MEMSPACE
int fatfs_tests(int argc,char *argv[])
{
    eb4a:	02 e0       	ldi	r16, 0x02	; 2
    eb4c:	10 e0       	ldi	r17, 0x00	; 0
    eb4e:	0f c0       	rjmp	.+30     	; 0xeb6e <fatfs_tests+0x96>
    {
        return(0);
    }
#endif

    if (MATCHI(ptr,"ls") || MATCHI(ptr,"dir") )
    eb50:	66 ec       	ldi	r22, 0xC6	; 198
    eb52:	7b e0       	ldi	r23, 0x0B	; 11
    eb54:	c8 01       	movw	r24, r16
    eb56:	0e 94 49 33 	call	0x6692	; 0x6692 <MATCHI>
    eb5a:	89 2b       	or	r24, r25
    eb5c:	a9 f7       	brne	.-22     	; 0xeb48 <fatfs_tests+0x70>
    eb5e:	18 c0       	rjmp	.+48     	; 0xeb90 <fatfs_tests+0xb8>
    {
        int i;
        int args = 0;
        for(i=ind+1;i<argc;++i)
        {
            if(fatfs_ls(argv[i]) == 0)
    eb60:	89 91       	ld	r24, Y+
    eb62:	99 91       	ld	r25, Y+
    eb64:	e6 de       	rcall	.-564    	; 0xe932 <fatfs_ls>
    eb66:	89 2b       	or	r24, r25
    eb68:	69 f0       	breq	.+26     	; 0xeb84 <fatfs_tests+0xac>

    if (MATCHI(ptr,"ls") || MATCHI(ptr,"dir") )
    {
        int i;
        int args = 0;
        for(i=ind+1;i<argc;++i)
    eb6a:	0f 5f       	subi	r16, 0xFF	; 255
    eb6c:	1f 4f       	sbci	r17, 0xFF	; 255
    eb6e:	0e 15       	cp	r16, r14
    eb70:	1f 05       	cpc	r17, r15
    eb72:	b4 f3       	brlt	.-20     	; 0xeb60 <fatfs_tests+0x88>
			{
				return(-1);
			}
            ++args;
        }
        if(!args)
    eb74:	02 30       	cpi	r16, 0x02	; 2
    eb76:	11 05       	cpc	r17, r1
    eb78:	41 f4       	brne	.+16     	; 0xeb8a <fatfs_tests+0xb2>
        {
            if(fatfs_ls("") == 0)
    eb7a:	8e e0       	ldi	r24, 0x0E	; 14
    eb7c:	9c e0       	ldi	r25, 0x0C	; 12
    eb7e:	d9 de       	rcall	.-590    	; 0xe932 <fatfs_ls>
        }
        return(1);
    }
    else if (MATCHARGS(ptr,"status", (ind + 1), argc))
    {
        if(fatfs_status("/")== 0)
    eb80:	89 2b       	or	r24, r25
    eb82:	19 f4       	brne	.+6      	; 0xeb8a <fatfs_tests+0xb2>
        int args = 0;
        for(i=ind+1;i<argc;++i)
        {
            if(fatfs_ls(argv[i]) == 0)
			{
				return(-1);
    eb84:	8f ef       	ldi	r24, 0xFF	; 255
    eb86:	9f ef       	ldi	r25, 0xFF	; 255
    eb88:	12 c0       	rjmp	.+36     	; 0xebae <fatfs_tests+0xd6>
            if(fatfs_ls("") == 0)
			{
				return(-1);
			}
        }
        return(1);
    eb8a:	81 e0       	ldi	r24, 0x01	; 1
    eb8c:	90 e0       	ldi	r25, 0x00	; 0
    eb8e:	0f c0       	rjmp	.+30     	; 0xebae <fatfs_tests+0xd6>
    }
    else if (MATCHARGS(ptr,"status", (ind + 1), argc))
    eb90:	97 01       	movw	r18, r14
    eb92:	42 e0       	ldi	r20, 0x02	; 2
    eb94:	50 e0       	ldi	r21, 0x00	; 0
    eb96:	6b ed       	ldi	r22, 0xDB	; 219
    eb98:	78 e0       	ldi	r23, 0x08	; 8
    eb9a:	c8 01       	movw	r24, r16
    eb9c:	0e 94 5d 33 	call	0x66ba	; 0x66ba <MATCHARGS>
    eba0:	89 2b       	or	r24, r25
    eba2:	09 f4       	brne	.+2      	; 0xeba6 <fatfs_tests+0xce>
    eba4:	a7 cf       	rjmp	.-178    	; 0xeaf4 <fatfs_tests+0x1c>
    {
        if(fatfs_status("/")== 0)
    eba6:	86 ea       	ldi	r24, 0xA6	; 166
    eba8:	98 e0       	ldi	r25, 0x08	; 8
    ebaa:	2c dc       	rcall	.-1960   	; 0xe404 <fatfs_status>
    ebac:	e9 cf       	rjmp	.-46     	; 0xeb80 <fatfs_tests+0xa8>
        return(1);
    }
#endif // FATFS_UTILS_FULL

    return(0);
}
    ebae:	cd b7       	in	r28, 0x3d	; 61
    ebb0:	de b7       	in	r29, 0x3e	; 62
    ebb2:	23 96       	adiw	r28, 0x03	; 3
    ebb4:	e6 e0       	ldi	r30, 0x06	; 6
    ebb6:	0c 94 cc e8 	jmp	0x1d198	; 0x1d198 <__epilogue_restores__+0x18>

0000ebba <fatfs_getc>:
    {
        errno = fatfs_to_errno(rc);
        return(-1);
    }
    return(0);
}
    ebba:	8f 92       	push	r8
    ebbc:	9f 92       	push	r9
    ebbe:	af 92       	push	r10
    ebc0:	bf 92       	push	r11
    ebc2:	ef 92       	push	r14
    ebc4:	ff 92       	push	r15
    ebc6:	0f 93       	push	r16
    ebc8:	1f 93       	push	r17
    ebca:	cf 93       	push	r28
    ebcc:	df 93       	push	r29
    ebce:	00 d0       	rcall	.+0      	; 0xebd0 <fatfs_getc+0x16>
    ebd0:	1f 92       	push	r1
    ebd2:	cd b7       	in	r28, 0x3d	; 61
    ebd4:	de b7       	in	r29, 0x3e	; 62
    ebd6:	10 92 be 1c 	sts	0x1CBE, r1	; 0x801cbe <errno+0x1>
    ebda:	10 92 bd 1c 	sts	0x1CBD, r1	; 0x801cbd <errno>
    ebde:	00 97       	sbiw	r24, 0x00	; 0
    ebe0:	39 f4       	brne	.+14     	; 0xebf0 <fatfs_getc+0x36>
    ebe2:	89 e0       	ldi	r24, 0x09	; 9
    ebe4:	90 e0       	ldi	r25, 0x00	; 0
    ebe6:	90 93 be 1c 	sts	0x1CBE, r25	; 0x801cbe <errno+0x1>
    ebea:	80 93 bd 1c 	sts	0x1CBD, r24	; 0x801cbd <errno>
    ebee:	2f c0       	rjmp	.+94     	; 0xec4e <fatfs_getc+0x94>
    ebf0:	fc 01       	movw	r30, r24
    ebf2:	e4 84       	ldd	r14, Z+12	; 0x0c
    ebf4:	f5 84       	ldd	r15, Z+13	; 0x0d
    ebf6:	e1 14       	cp	r14, r1
    ebf8:	f1 04       	cpc	r15, r1
    ebfa:	99 f3       	breq	.-26     	; 0xebe2 <fatfs_getc+0x28>
    ebfc:	8c 01       	movw	r16, r24
    ebfe:	9e 01       	movw	r18, r28
    ec00:	2f 5f       	subi	r18, 0xFF	; 255
    ec02:	3f 4f       	sbci	r19, 0xFF	; 255
    ec04:	41 e0       	ldi	r20, 0x01	; 1
    ec06:	50 e0       	ldi	r21, 0x00	; 0
    ec08:	be 01       	movw	r22, r28
    ec0a:	6d 5f       	subi	r22, 0xFD	; 253
    ec0c:	7f 4f       	sbci	r23, 0xFF	; 255
    ec0e:	c7 01       	movw	r24, r14
    ec10:	0e 94 5c 5c 	call	0xb8b8	; 0xb8b8 <f_read>
    ec14:	00 97       	sbiw	r24, 0x00	; 0
    ec16:	31 f4       	brne	.+12     	; 0xec24 <fatfs_getc+0x6a>
    ec18:	29 81       	ldd	r18, Y+1	; 0x01
    ec1a:	3a 81       	ldd	r19, Y+2	; 0x02
    ec1c:	21 30       	cpi	r18, 0x01	; 1
    ec1e:	31 05       	cpc	r19, r1
    ec20:	c9 f0       	breq	.+50     	; 0xec54 <fatfs_getc+0x9a>
    ec22:	03 c0       	rjmp	.+6      	; 0xec2a <fatfs_getc+0x70>
    ec24:	84 31       	cpi	r24, 0x14	; 20
    ec26:	91 05       	cpc	r25, r1
    ec28:	40 f4       	brcc	.+16     	; 0xec3a <fatfs_getc+0x80>
    ec2a:	fc 01       	movw	r30, r24
    ec2c:	ec 56       	subi	r30, 0x6C	; 108
    ec2e:	f4 4f       	sbci	r31, 0xF4	; 244
    ec30:	80 81       	ld	r24, Z
    ec32:	08 2e       	mov	r0, r24
    ec34:	00 0c       	add	r0, r0
    ec36:	99 0b       	sbc	r25, r25
    ec38:	02 c0       	rjmp	.+4      	; 0xec3e <fatfs_getc+0x84>
    ec3a:	83 e2       	ldi	r24, 0x23	; 35
    ec3c:	90 e0       	ldi	r25, 0x00	; 0
    ec3e:	90 93 be 1c 	sts	0x1CBE, r25	; 0x801cbe <errno+0x1>
    ec42:	80 93 bd 1c 	sts	0x1CBD, r24	; 0x801cbd <errno>
    ec46:	f8 01       	movw	r30, r16
    ec48:	83 81       	ldd	r24, Z+3	; 0x03
    ec4a:	80 62       	ori	r24, 0x20	; 32
    ec4c:	83 83       	std	Z+3, r24	; 0x03
    ec4e:	8f ef       	ldi	r24, 0xFF	; 255
    ec50:	9f ef       	ldi	r25, 0xFF	; 255
    ec52:	28 c0       	rjmp	.+80     	; 0xeca4 <fatfs_getc+0xea>
    ec54:	8b 81       	ldd	r24, Y+3	; 0x03
    ec56:	8d 30       	cpi	r24, 0x0D	; 13
    ec58:	01 f5       	brne	.+64     	; 0xec9a <fatfs_getc+0xe0>
    ec5a:	f7 01       	movw	r30, r14
    ec5c:	80 88       	ldd	r8, Z+16	; 0x10
    ec5e:	91 88       	ldd	r9, Z+17	; 0x11
    ec60:	a2 88       	ldd	r10, Z+18	; 0x12
    ec62:	b3 88       	ldd	r11, Z+19	; 0x13
    ec64:	9e 01       	movw	r18, r28
    ec66:	2f 5f       	subi	r18, 0xFF	; 255
    ec68:	3f 4f       	sbci	r19, 0xFF	; 255
    ec6a:	41 e0       	ldi	r20, 0x01	; 1
    ec6c:	50 e0       	ldi	r21, 0x00	; 0
    ec6e:	be 01       	movw	r22, r28
    ec70:	6d 5f       	subi	r22, 0xFD	; 253
    ec72:	7f 4f       	sbci	r23, 0xFF	; 255
    ec74:	c7 01       	movw	r24, r14
    ec76:	0e 94 5c 5c 	call	0xb8b8	; 0xb8b8 <f_read>
    ec7a:	89 2b       	or	r24, r25
    ec7c:	89 f4       	brne	.+34     	; 0xeca0 <fatfs_getc+0xe6>
    ec7e:	89 81       	ldd	r24, Y+1	; 0x01
    ec80:	9a 81       	ldd	r25, Y+2	; 0x02
    ec82:	01 97       	sbiw	r24, 0x01	; 1
    ec84:	69 f4       	brne	.+26     	; 0xeca0 <fatfs_getc+0xe6>
    ec86:	8b 81       	ldd	r24, Y+3	; 0x03
    ec88:	8a 30       	cpi	r24, 0x0A	; 10
    ec8a:	31 f0       	breq	.+12     	; 0xec98 <fatfs_getc+0xde>
    ec8c:	b5 01       	movw	r22, r10
    ec8e:	a4 01       	movw	r20, r8
    ec90:	c7 01       	movw	r24, r14
    ec92:	0e 94 68 61 	call	0xc2d0	; 0xc2d0 <f_lseek>
    ec96:	04 c0       	rjmp	.+8      	; 0xeca0 <fatfs_getc+0xe6>
    ec98:	8b 83       	std	Y+3, r24	; 0x03
    ec9a:	8b 81       	ldd	r24, Y+3	; 0x03
    ec9c:	90 e0       	ldi	r25, 0x00	; 0
    ec9e:	02 c0       	rjmp	.+4      	; 0xeca4 <fatfs_getc+0xea>
    eca0:	8a e0       	ldi	r24, 0x0A	; 10
    eca2:	90 e0       	ldi	r25, 0x00	; 0
    eca4:	0f 90       	pop	r0
    eca6:	0f 90       	pop	r0
    eca8:	0f 90       	pop	r0
    ecaa:	df 91       	pop	r29
    ecac:	cf 91       	pop	r28
    ecae:	1f 91       	pop	r17
    ecb0:	0f 91       	pop	r16
    ecb2:	ff 90       	pop	r15
    ecb4:	ef 90       	pop	r14
    ecb6:	bf 90       	pop	r11
    ecb8:	af 90       	pop	r10
    ecba:	9f 90       	pop	r9
    ecbc:	8f 90       	pop	r8
    ecbe:	08 95       	ret

0000ecc0 <fatfs_putc>:
    ecc0:	a3 e0       	ldi	r26, 0x03	; 3
    ecc2:	b0 e0       	ldi	r27, 0x00	; 0
    ecc4:	e6 e6       	ldi	r30, 0x66	; 102
    ecc6:	f6 e7       	ldi	r31, 0x76	; 118
    ecc8:	0c 94 b2 e8 	jmp	0x1d164	; 0x1d164 <__prologue_saves__+0x1c>
    eccc:	8b 83       	std	Y+3, r24	; 0x03
    ecce:	10 92 be 1c 	sts	0x1CBE, r1	; 0x801cbe <errno+0x1>
    ecd2:	10 92 bd 1c 	sts	0x1CBD, r1	; 0x801cbd <errno>
    ecd6:	61 15       	cp	r22, r1
    ecd8:	71 05       	cpc	r23, r1
    ecda:	39 f4       	brne	.+14     	; 0xecea <fatfs_putc+0x2a>
    ecdc:	89 e0       	ldi	r24, 0x09	; 9
    ecde:	90 e0       	ldi	r25, 0x00	; 0
    ece0:	90 93 be 1c 	sts	0x1CBE, r25	; 0x801cbe <errno+0x1>
    ece4:	80 93 bd 1c 	sts	0x1CBD, r24	; 0x801cbd <errno>
    ece8:	2d c0       	rjmp	.+90     	; 0xed44 <fatfs_putc+0x84>
    ecea:	fb 01       	movw	r30, r22
    ecec:	84 85       	ldd	r24, Z+12	; 0x0c
    ecee:	95 85       	ldd	r25, Z+13	; 0x0d
    ecf0:	00 97       	sbiw	r24, 0x00	; 0
    ecf2:	a1 f3       	breq	.-24     	; 0xecdc <fatfs_putc+0x1c>
    ecf4:	8b 01       	movw	r16, r22
    ecf6:	9e 01       	movw	r18, r28
    ecf8:	2f 5f       	subi	r18, 0xFF	; 255
    ecfa:	3f 4f       	sbci	r19, 0xFF	; 255
    ecfc:	41 e0       	ldi	r20, 0x01	; 1
    ecfe:	50 e0       	ldi	r21, 0x00	; 0
    ed00:	be 01       	movw	r22, r28
    ed02:	6d 5f       	subi	r22, 0xFD	; 253
    ed04:	7f 4f       	sbci	r23, 0xFF	; 255
    ed06:	0e 94 a7 5d 	call	0xbb4e	; 0xbb4e <f_write>
    ed0a:	00 97       	sbiw	r24, 0x00	; 0
    ed0c:	31 f4       	brne	.+12     	; 0xed1a <fatfs_putc+0x5a>
    ed0e:	29 81       	ldd	r18, Y+1	; 0x01
    ed10:	3a 81       	ldd	r19, Y+2	; 0x02
    ed12:	21 30       	cpi	r18, 0x01	; 1
    ed14:	31 05       	cpc	r19, r1
    ed16:	c9 f0       	breq	.+50     	; 0xed4a <fatfs_putc+0x8a>
    ed18:	03 c0       	rjmp	.+6      	; 0xed20 <fatfs_putc+0x60>
    ed1a:	84 31       	cpi	r24, 0x14	; 20
    ed1c:	91 05       	cpc	r25, r1
    ed1e:	40 f4       	brcc	.+16     	; 0xed30 <fatfs_putc+0x70>
    ed20:	fc 01       	movw	r30, r24
    ed22:	ec 56       	subi	r30, 0x6C	; 108
    ed24:	f4 4f       	sbci	r31, 0xF4	; 244
    ed26:	80 81       	ld	r24, Z
    ed28:	08 2e       	mov	r0, r24
    ed2a:	00 0c       	add	r0, r0
    ed2c:	99 0b       	sbc	r25, r25
    ed2e:	02 c0       	rjmp	.+4      	; 0xed34 <fatfs_putc+0x74>
    ed30:	83 e2       	ldi	r24, 0x23	; 35
    ed32:	90 e0       	ldi	r25, 0x00	; 0
    ed34:	90 93 be 1c 	sts	0x1CBE, r25	; 0x801cbe <errno+0x1>
    ed38:	80 93 bd 1c 	sts	0x1CBD, r24	; 0x801cbd <errno>
    ed3c:	f8 01       	movw	r30, r16
    ed3e:	83 81       	ldd	r24, Z+3	; 0x03
    ed40:	80 62       	ori	r24, 0x20	; 32
    ed42:	83 83       	std	Z+3, r24	; 0x03
    ed44:	8f ef       	ldi	r24, 0xFF	; 255
    ed46:	9f ef       	ldi	r25, 0xFF	; 255
    ed48:	02 c0       	rjmp	.+4      	; 0xed4e <fatfs_putc+0x8e>
    ed4a:	8b 81       	ldd	r24, Y+3	; 0x03
    ed4c:	90 e0       	ldi	r25, 0x00	; 0
    ed4e:	23 96       	adiw	r28, 0x03	; 3
    ed50:	e4 e0       	ldi	r30, 0x04	; 4
    ed52:	0c 94 ce e8 	jmp	0x1d19c	; 0x1d19c <__epilogue_restores__+0x1c>

0000ed56 <fgetc>:
    ed56:	cf 93       	push	r28
    ed58:	df 93       	push	r29
    ed5a:	00 d0       	rcall	.+0      	; 0xed5c <fgetc+0x6>
    ed5c:	1f 92       	push	r1
    ed5e:	ec 01       	movw	r28, r24
    ed60:	00 97       	sbiw	r24, 0x00	; 0
    ed62:	39 f4       	brne	.+14     	; 0xed72 <fgetc+0x1c>
    ed64:	89 e0       	ldi	r24, 0x09	; 9
    ed66:	90 e0       	ldi	r25, 0x00	; 0
    ed68:	90 93 be 1c 	sts	0x1CBE, r25	; 0x801cbe <errno+0x1>
    ed6c:	80 93 bd 1c 	sts	0x1CBD, r24	; 0x801cbd <errno>
    ed70:	40 c0       	rjmp	.+128    	; 0xedf2 <fgetc+0x9c>
    ed72:	2b 81       	ldd	r18, Y+3	; 0x03
    ed74:	20 ff       	sbrs	r18, 0
    ed76:	3d c0       	rjmp	.+122    	; 0xedf2 <fgetc+0x9c>
    ed78:	26 ff       	sbrs	r18, 6
    ed7a:	0a c0       	rjmp	.+20     	; 0xed90 <fgetc+0x3a>
    ed7c:	2f 7b       	andi	r18, 0xBF	; 191
    ed7e:	2b 83       	std	Y+3, r18	; 0x03
    ed80:	8e 81       	ldd	r24, Y+6	; 0x06
    ed82:	9f 81       	ldd	r25, Y+7	; 0x07
    ed84:	01 96       	adiw	r24, 0x01	; 1
    ed86:	9f 83       	std	Y+7, r25	; 0x07
    ed88:	8e 83       	std	Y+6, r24	; 0x06
    ed8a:	8a 81       	ldd	r24, Y+2	; 0x02
    ed8c:	90 e0       	ldi	r25, 0x00	; 0
    ed8e:	33 c0       	rjmp	.+102    	; 0xedf6 <fgetc+0xa0>
    ed90:	22 ff       	sbrs	r18, 2
    ed92:	0d c0       	rjmp	.+26     	; 0xedae <fgetc+0x58>
    ed94:	e8 81       	ld	r30, Y
    ed96:	f9 81       	ldd	r31, Y+1	; 0x01
    ed98:	80 81       	ld	r24, Z
    ed9a:	90 e0       	ldi	r25, 0x00	; 0
    ed9c:	00 97       	sbiw	r24, 0x00	; 0
    ed9e:	19 f4       	brne	.+6      	; 0xeda6 <fgetc+0x50>
    eda0:	20 62       	ori	r18, 0x20	; 32
    eda2:	2b 83       	std	Y+3, r18	; 0x03
    eda4:	26 c0       	rjmp	.+76     	; 0xedf2 <fgetc+0x9c>
    eda6:	31 96       	adiw	r30, 0x01	; 1
    eda8:	f9 83       	std	Y+1, r31	; 0x01
    edaa:	e8 83       	st	Y, r30
    edac:	1b c0       	rjmp	.+54     	; 0xede4 <fgetc+0x8e>
    edae:	ea 85       	ldd	r30, Y+10	; 0x0a
    edb0:	fb 85       	ldd	r31, Y+11	; 0x0b
    edb2:	30 97       	sbiw	r30, 0x00	; 0
    edb4:	59 f4       	brne	.+22     	; 0xedcc <fgetc+0x76>
    edb6:	8a eb       	ldi	r24, 0xBA	; 186
    edb8:	9b e0       	ldi	r25, 0x0B	; 11
    edba:	a0 e0       	ldi	r26, 0x00	; 0
    edbc:	ed b7       	in	r30, 0x3d	; 61
    edbe:	fe b7       	in	r31, 0x3e	; 62
    edc0:	81 83       	std	Z+1, r24	; 0x01
    edc2:	92 83       	std	Z+2, r25	; 0x02
    edc4:	a3 83       	std	Z+3, r26	; 0x03
    edc6:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
    edca:	13 c0       	rjmp	.+38     	; 0xedf2 <fgetc+0x9c>
    edcc:	09 95       	icall
    edce:	97 ff       	sbrs	r25, 7
    edd0:	09 c0       	rjmp	.+18     	; 0xede4 <fgetc+0x8e>
    edd2:	2b 81       	ldd	r18, Y+3	; 0x03
    edd4:	02 96       	adiw	r24, 0x02	; 2
    edd6:	11 f0       	breq	.+4      	; 0xeddc <fgetc+0x86>
    edd8:	80 e2       	ldi	r24, 0x20	; 32
    edda:	01 c0       	rjmp	.+2      	; 0xedde <fgetc+0x88>
    eddc:	80 e1       	ldi	r24, 0x10	; 16
    edde:	82 2b       	or	r24, r18
    ede0:	8b 83       	std	Y+3, r24	; 0x03
    ede2:	07 c0       	rjmp	.+14     	; 0xedf2 <fgetc+0x9c>
    ede4:	2e 81       	ldd	r18, Y+6	; 0x06
    ede6:	3f 81       	ldd	r19, Y+7	; 0x07
    ede8:	2f 5f       	subi	r18, 0xFF	; 255
    edea:	3f 4f       	sbci	r19, 0xFF	; 255
    edec:	3f 83       	std	Y+7, r19	; 0x07
    edee:	2e 83       	std	Y+6, r18	; 0x06
    edf0:	02 c0       	rjmp	.+4      	; 0xedf6 <fgetc+0xa0>
    edf2:	8f ef       	ldi	r24, 0xFF	; 255
    edf4:	9f ef       	ldi	r25, 0xFF	; 255
    edf6:	cd b7       	in	r28, 0x3d	; 61
    edf8:	de b7       	in	r29, 0x3e	; 62
    edfa:	23 96       	adiw	r28, 0x03	; 3
    edfc:	e2 e0       	ldi	r30, 0x02	; 2
    edfe:	0c 94 d0 e8 	jmp	0x1d1a0	; 0x1d1a0 <__epilogue_restores__+0x20>

0000ee02 <fputc>:
    ee02:	cf 93       	push	r28
    ee04:	df 93       	push	r29
    ee06:	00 d0       	rcall	.+0      	; 0xee08 <fputc+0x6>
    ee08:	1f 92       	push	r1
    ee0a:	eb 01       	movw	r28, r22
    ee0c:	10 92 be 1c 	sts	0x1CBE, r1	; 0x801cbe <errno+0x1>
    ee10:	10 92 bd 1c 	sts	0x1CBD, r1	; 0x801cbd <errno>
    ee14:	20 91 c1 1c 	lds	r18, 0x1CC1	; 0x801cc1 <__iob+0x2>
    ee18:	30 91 c2 1c 	lds	r19, 0x1CC2	; 0x801cc2 <__iob+0x3>
    ee1c:	62 17       	cp	r22, r18
    ee1e:	73 07       	cpc	r23, r19
    ee20:	49 f0       	breq	.+18     	; 0xee34 <fputc+0x32>
    ee22:	20 91 c3 1c 	lds	r18, 0x1CC3	; 0x801cc3 <__iob+0x4>
    ee26:	30 91 c4 1c 	lds	r19, 0x1CC4	; 0x801cc4 <__iob+0x5>
    ee2a:	62 17       	cp	r22, r18
    ee2c:	73 07       	cpc	r23, r19
    ee2e:	11 f0       	breq	.+4      	; 0xee34 <fputc+0x32>
    ee30:	47 df       	rcall	.-370    	; 0xecc0 <fatfs_putc>
    ee32:	33 c0       	rjmp	.+102    	; 0xee9a <fputc+0x98>
    ee34:	2b 81       	ldd	r18, Y+3	; 0x03
    ee36:	21 ff       	sbrs	r18, 1
    ee38:	2e c0       	rjmp	.+92     	; 0xee96 <fputc+0x94>
    ee3a:	22 ff       	sbrs	r18, 2
    ee3c:	10 c0       	rjmp	.+32     	; 0xee5e <fputc+0x5c>
    ee3e:	4e 81       	ldd	r20, Y+6	; 0x06
    ee40:	5f 81       	ldd	r21, Y+7	; 0x07
    ee42:	2c 81       	ldd	r18, Y+4	; 0x04
    ee44:	3d 81       	ldd	r19, Y+5	; 0x05
    ee46:	42 17       	cp	r20, r18
    ee48:	53 07       	cpc	r21, r19
    ee4a:	f4 f4       	brge	.+60     	; 0xee88 <fputc+0x86>
    ee4c:	e8 81       	ld	r30, Y
    ee4e:	f9 81       	ldd	r31, Y+1	; 0x01
    ee50:	9f 01       	movw	r18, r30
    ee52:	2f 5f       	subi	r18, 0xFF	; 255
    ee54:	3f 4f       	sbci	r19, 0xFF	; 255
    ee56:	39 83       	std	Y+1, r19	; 0x01
    ee58:	28 83       	st	Y, r18
    ee5a:	80 83       	st	Z, r24
    ee5c:	15 c0       	rjmp	.+42     	; 0xee88 <fputc+0x86>
    ee5e:	e8 85       	ldd	r30, Y+8	; 0x08
    ee60:	f9 85       	ldd	r31, Y+9	; 0x09
    ee62:	30 97       	sbiw	r30, 0x00	; 0
    ee64:	59 f4       	brne	.+22     	; 0xee7c <fputc+0x7a>
    ee66:	82 ea       	ldi	r24, 0xA2	; 162
    ee68:	9b e0       	ldi	r25, 0x0B	; 11
    ee6a:	a0 e0       	ldi	r26, 0x00	; 0
    ee6c:	ed b7       	in	r30, 0x3d	; 61
    ee6e:	fe b7       	in	r31, 0x3e	; 62
    ee70:	81 83       	std	Z+1, r24	; 0x01
    ee72:	92 83       	std	Z+2, r25	; 0x02
    ee74:	a3 83       	std	Z+3, r26	; 0x03
    ee76:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
    ee7a:	0d c0       	rjmp	.+26     	; 0xee96 <fputc+0x94>
    ee7c:	be 01       	movw	r22, r28
    ee7e:	09 95       	icall
    ee80:	8f 3f       	cpi	r24, 0xFF	; 255
    ee82:	ff ef       	ldi	r31, 0xFF	; 255
    ee84:	9f 07       	cpc	r25, r31
    ee86:	39 f0       	breq	.+14     	; 0xee96 <fputc+0x94>
    ee88:	2e 81       	ldd	r18, Y+6	; 0x06
    ee8a:	3f 81       	ldd	r19, Y+7	; 0x07
    ee8c:	2f 5f       	subi	r18, 0xFF	; 255
    ee8e:	3f 4f       	sbci	r19, 0xFF	; 255
    ee90:	3f 83       	std	Y+7, r19	; 0x07
    ee92:	2e 83       	std	Y+6, r18	; 0x06
    ee94:	02 c0       	rjmp	.+4      	; 0xee9a <fputc+0x98>
    ee96:	8f ef       	ldi	r24, 0xFF	; 255
    ee98:	9f ef       	ldi	r25, 0xFF	; 255
    ee9a:	cd b7       	in	r28, 0x3d	; 61
    ee9c:	de b7       	in	r29, 0x3e	; 62
    ee9e:	23 96       	adiw	r28, 0x03	; 3
    eea0:	e2 e0       	ldi	r30, 0x02	; 2
    eea2:	0c 94 d0 e8 	jmp	0x1d1a0	; 0x1d1a0 <__epilogue_restores__+0x20>

0000eea6 <_fprintf_putc>:
    eea6:	fc 01       	movw	r30, r24
    eea8:	86 2f       	mov	r24, r22
    eeaa:	26 81       	ldd	r18, Z+6	; 0x06
    eeac:	37 81       	ldd	r19, Z+7	; 0x07
    eeae:	2f 5f       	subi	r18, 0xFF	; 255
    eeb0:	3f 4f       	sbci	r19, 0xFF	; 255
    eeb2:	37 83       	std	Z+7, r19	; 0x07
    eeb4:	26 83       	std	Z+6, r18	; 0x06
    eeb6:	62 81       	ldd	r22, Z+2	; 0x02
    eeb8:	73 81       	ldd	r23, Z+3	; 0x03
    eeba:	90 e0       	ldi	r25, 0x00	; 0
    eebc:	a2 cf       	rjmp	.-188    	; 0xee02 <fputc>
    eebe:	08 95       	ret

0000eec0 <getchar>:
    eec0:	80 91 bf 1c 	lds	r24, 0x1CBF	; 0x801cbf <__iob>
    eec4:	90 91 c0 1c 	lds	r25, 0x1CC0	; 0x801cc0 <__iob+0x1>
    eec8:	46 cf       	rjmp	.-372    	; 0xed56 <fgetc>
    eeca:	08 95       	ret

0000eecc <putchar>:
    eecc:	60 91 c1 1c 	lds	r22, 0x1CC1	; 0x801cc1 <__iob+0x2>
    eed0:	70 91 c2 1c 	lds	r23, 0x1CC2	; 0x801cc2 <__iob+0x3>
    eed4:	96 cf       	rjmp	.-212    	; 0xee02 <fputc>
    eed6:	08 95       	ret

0000eed8 <fgets>:
    eed8:	a0 e0       	ldi	r26, 0x00	; 0
    eeda:	b0 e0       	ldi	r27, 0x00	; 0
    eedc:	e2 e7       	ldi	r30, 0x72	; 114
    eede:	f7 e7       	ldi	r31, 0x77	; 119
    eee0:	0c 94 ae e8 	jmp	0x1d15c	; 0x1d15c <__prologue_saves__+0x14>
    eee4:	7c 01       	movw	r14, r24
    eee6:	6a 01       	movw	r12, r20
    eee8:	8b 01       	movw	r16, r22
    eeea:	c0 e0       	ldi	r28, 0x00	; 0
    eeec:	d0 e0       	ldi	r29, 0x00	; 0
    eeee:	01 15       	cp	r16, r1
    eef0:	11 05       	cpc	r17, r1
    eef2:	41 f0       	breq	.+16     	; 0xef04 <fgets+0x2c>
    eef4:	c6 01       	movw	r24, r12
    eef6:	2f df       	rcall	.-418    	; 0xed56 <fgetc>
    eef8:	8f 3f       	cpi	r24, 0xFF	; 255
    eefa:	2f ef       	ldi	r18, 0xFF	; 255
    eefc:	92 07       	cpc	r25, r18
    eefe:	39 f4       	brne	.+14     	; 0xef0e <fgets+0x36>
    ef00:	20 97       	sbiw	r28, 0x00	; 0
    ef02:	b9 f0       	breq	.+46     	; 0xef32 <fgets+0x5a>
    ef04:	ce 0d       	add	r28, r14
    ef06:	df 1d       	adc	r29, r15
    ef08:	18 82       	st	Y, r1
    ef0a:	c7 01       	movw	r24, r14
    ef0c:	14 c0       	rjmp	.+40     	; 0xef36 <fgets+0x5e>
    ef0e:	8a 30       	cpi	r24, 0x0A	; 10
    ef10:	91 05       	cpc	r25, r1
    ef12:	c1 f3       	breq	.-16     	; 0xef04 <fgets+0x2c>
    ef14:	88 30       	cpi	r24, 0x08	; 8
    ef16:	91 05       	cpc	r25, r1
    ef18:	21 f4       	brne	.+8      	; 0xef22 <fgets+0x4a>
    ef1a:	20 97       	sbiw	r28, 0x00	; 0
    ef1c:	39 f0       	breq	.+14     	; 0xef2c <fgets+0x54>
    ef1e:	21 97       	sbiw	r28, 0x01	; 1
    ef20:	05 c0       	rjmp	.+10     	; 0xef2c <fgets+0x54>
    ef22:	f7 01       	movw	r30, r14
    ef24:	ec 0f       	add	r30, r28
    ef26:	fd 1f       	adc	r31, r29
    ef28:	80 83       	st	Z, r24
    ef2a:	21 96       	adiw	r28, 0x01	; 1
    ef2c:	01 50       	subi	r16, 0x01	; 1
    ef2e:	11 09       	sbc	r17, r1
    ef30:	de cf       	rjmp	.-68     	; 0xeeee <fgets+0x16>
    ef32:	80 e0       	ldi	r24, 0x00	; 0
    ef34:	90 e0       	ldi	r25, 0x00	; 0
    ef36:	cd b7       	in	r28, 0x3d	; 61
    ef38:	de b7       	in	r29, 0x3e	; 62
    ef3a:	e8 e0       	ldi	r30, 0x08	; 8
    ef3c:	0c 94 ca e8 	jmp	0x1d194	; 0x1d194 <__epilogue_restores__+0x14>

0000ef40 <fputs>:
    ef40:	0f 93       	push	r16
    ef42:	1f 93       	push	r17
    ef44:	cf 93       	push	r28
    ef46:	df 93       	push	r29
    ef48:	8b 01       	movw	r16, r22
    ef4a:	ec 01       	movw	r28, r24
    ef4c:	89 91       	ld	r24, Y+
    ef4e:	88 23       	and	r24, r24
    ef50:	41 f0       	breq	.+16     	; 0xef62 <fputs+0x22>
    ef52:	b8 01       	movw	r22, r16
    ef54:	90 e0       	ldi	r25, 0x00	; 0
    ef56:	55 df       	rcall	.-342    	; 0xee02 <fputc>
    ef58:	8f 3f       	cpi	r24, 0xFF	; 255
    ef5a:	2f ef       	ldi	r18, 0xFF	; 255
    ef5c:	92 07       	cpc	r25, r18
    ef5e:	b1 f7       	brne	.-20     	; 0xef4c <fputs+0xc>
    ef60:	02 c0       	rjmp	.+4      	; 0xef66 <fputs+0x26>
    ef62:	80 e0       	ldi	r24, 0x00	; 0
    ef64:	90 e0       	ldi	r25, 0x00	; 0
    ef66:	df 91       	pop	r29
    ef68:	cf 91       	pop	r28
    ef6a:	1f 91       	pop	r17
    ef6c:	0f 91       	pop	r16
    ef6e:	08 95       	ret

0000ef70 <puts>:
    ef70:	cf 93       	push	r28
    ef72:	df 93       	push	r29
    ef74:	ec 01       	movw	r28, r24
    ef76:	89 91       	ld	r24, Y+
    ef78:	60 91 c1 1c 	lds	r22, 0x1CC1	; 0x801cc1 <__iob+0x2>
    ef7c:	70 91 c2 1c 	lds	r23, 0x1CC2	; 0x801cc2 <__iob+0x3>
    ef80:	88 23       	and	r24, r24
    ef82:	39 f0       	breq	.+14     	; 0xef92 <puts+0x22>
    ef84:	90 e0       	ldi	r25, 0x00	; 0
    ef86:	3d df       	rcall	.-390    	; 0xee02 <fputc>
    ef88:	8f 3f       	cpi	r24, 0xFF	; 255
    ef8a:	2f ef       	ldi	r18, 0xFF	; 255
    ef8c:	92 07       	cpc	r25, r18
    ef8e:	99 f7       	brne	.-26     	; 0xef76 <puts+0x6>
    ef90:	03 c0       	rjmp	.+6      	; 0xef98 <puts+0x28>
    ef92:	8a e0       	ldi	r24, 0x0A	; 10
    ef94:	90 e0       	ldi	r25, 0x00	; 0
    ef96:	35 df       	rcall	.-406    	; 0xee02 <fputc>
    ef98:	df 91       	pop	r29
    ef9a:	cf 91       	pop	r28
    ef9c:	08 95       	ret

0000ef9e <fileno>:
    ef9e:	00 97       	sbiw	r24, 0x00	; 0
    efa0:	39 f4       	brne	.+14     	; 0xefb0 <fileno+0x12>
    efa2:	89 e0       	ldi	r24, 0x09	; 9
    efa4:	90 e0       	ldi	r25, 0x00	; 0
    efa6:	90 93 be 1c 	sts	0x1CBE, r25	; 0x801cbe <errno+0x1>
    efaa:	80 93 bd 1c 	sts	0x1CBD, r24	; 0x801cbd <errno>
    efae:	0e c0       	rjmp	.+28     	; 0xefcc <fileno+0x2e>
    efb0:	ef eb       	ldi	r30, 0xBF	; 191
    efb2:	fc e1       	ldi	r31, 0x1C	; 28
    efb4:	20 e0       	ldi	r18, 0x00	; 0
    efb6:	30 e0       	ldi	r19, 0x00	; 0
    efb8:	41 91       	ld	r20, Z+
    efba:	51 91       	ld	r21, Z+
    efbc:	84 17       	cp	r24, r20
    efbe:	95 07       	cpc	r25, r21
    efc0:	41 f0       	breq	.+16     	; 0xefd2 <fileno+0x34>
    efc2:	2f 5f       	subi	r18, 0xFF	; 255
    efc4:	3f 4f       	sbci	r19, 0xFF	; 255
    efc6:	20 31       	cpi	r18, 0x10	; 16
    efc8:	31 05       	cpc	r19, r1
    efca:	b1 f7       	brne	.-20     	; 0xefb8 <fileno+0x1a>
    efcc:	8f ef       	ldi	r24, 0xFF	; 255
    efce:	9f ef       	ldi	r25, 0xFF	; 255
    efd0:	08 95       	ret
    efd2:	c9 01       	movw	r24, r18
    efd4:	08 95       	ret

0000efd6 <fileno_to_stream>:
    efd6:	80 31       	cpi	r24, 0x10	; 16
    efd8:	91 05       	cpc	r25, r1
    efda:	48 f4       	brcc	.+18     	; 0xefee <fileno_to_stream+0x18>
    efdc:	88 0f       	add	r24, r24
    efde:	99 1f       	adc	r25, r25
    efe0:	fc 01       	movw	r30, r24
    efe2:	e1 54       	subi	r30, 0x41	; 65
    efe4:	f3 4e       	sbci	r31, 0xE3	; 227
    efe6:	80 81       	ld	r24, Z
    efe8:	91 81       	ldd	r25, Z+1	; 0x01
    efea:	00 97       	sbiw	r24, 0x00	; 0
    efec:	41 f4       	brne	.+16     	; 0xeffe <fileno_to_stream+0x28>
    efee:	89 e0       	ldi	r24, 0x09	; 9
    eff0:	90 e0       	ldi	r25, 0x00	; 0
    eff2:	90 93 be 1c 	sts	0x1CBE, r25	; 0x801cbe <errno+0x1>
    eff6:	80 93 bd 1c 	sts	0x1CBD, r24	; 0x801cbd <errno>
    effa:	80 e0       	ldi	r24, 0x00	; 0
    effc:	90 e0       	ldi	r25, 0x00	; 0
    effe:	08 95       	ret

0000f000 <mctime>:
    f000:	a4 e0       	ldi	r26, 0x04	; 4
    f002:	b0 e0       	ldi	r27, 0x00	; 0
    f004:	e6 e0       	ldi	r30, 0x06	; 6
    f006:	f8 e7       	ldi	r31, 0x78	; 120
    f008:	0c 94 b4 e8 	jmp	0x1d168	; 0x1d168 <__prologue_saves__+0x20>
    f00c:	69 83       	std	Y+1, r22	; 0x01
    f00e:	7a 83       	std	Y+2, r23	; 0x02
    f010:	8b 83       	std	Y+3, r24	; 0x03
    f012:	9c 83       	std	Y+4, r25	; 0x04
    f014:	10 92 be 1c 	sts	0x1CBE, r1	; 0x801cbe <errno+0x1>
    f018:	10 92 bd 1c 	sts	0x1CBD, r1	; 0x801cbd <errno>
    f01c:	ce 01       	movw	r24, r28
    f01e:	01 96       	adiw	r24, 0x01	; 1
    f020:	0e 94 18 3e 	call	0x7c30	; 0x7c30 <ctime_gm>
    f024:	fc 01       	movw	r30, r24
    f026:	01 90       	ld	r0, Z+
    f028:	00 20       	and	r0, r0
    f02a:	e9 f7       	brne	.-6      	; 0xf026 <mctime+0x26>
    f02c:	31 97       	sbiw	r30, 0x01	; 1
    f02e:	e8 1b       	sub	r30, r24
    f030:	f9 0b       	sbc	r31, r25
    f032:	39 f0       	breq	.+14     	; 0xf042 <mctime+0x42>
    f034:	31 97       	sbiw	r30, 0x01	; 1
    f036:	e8 0f       	add	r30, r24
    f038:	f9 1f       	adc	r31, r25
    f03a:	20 81       	ld	r18, Z
    f03c:	2a 30       	cpi	r18, 0x0A	; 10
    f03e:	09 f4       	brne	.+2      	; 0xf042 <mctime+0x42>
    f040:	10 82       	st	Z, r1
    f042:	24 96       	adiw	r28, 0x04	; 4
    f044:	e2 e0       	ldi	r30, 0x02	; 2
    f046:	0c 94 d0 e8 	jmp	0x1d1a0	; 0x1d1a0 <__epilogue_restores__+0x20>

0000f04a <basename>:
    f04a:	00 97       	sbiw	r24, 0x00	; 0
    f04c:	49 f0       	breq	.+18     	; 0xf060 <basename+0x16>
    f04e:	fc 01       	movw	r30, r24
    f050:	21 91       	ld	r18, Z+
    f052:	22 23       	and	r18, r18
    f054:	21 f0       	breq	.+8      	; 0xf05e <basename+0x14>
    f056:	2f 32       	cpi	r18, 0x2F	; 47
    f058:	d9 f7       	brne	.-10     	; 0xf050 <basename+0x6>
    f05a:	cf 01       	movw	r24, r30
    f05c:	f9 cf       	rjmp	.-14     	; 0xf050 <basename+0x6>
    f05e:	08 95       	ret
    f060:	8e e0       	ldi	r24, 0x0E	; 14
    f062:	9c e0       	ldi	r25, 0x0C	; 12
    f064:	08 95       	ret

0000f066 <chdir>:
    f066:	10 92 be 1c 	sts	0x1CBE, r1	; 0x801cbe <errno+0x1>
    f06a:	10 92 bd 1c 	sts	0x1CBD, r1	; 0x801cbd <errno>
    f06e:	0e 94 d7 5f 	call	0xbfae	; 0xbfae <f_chdir>
    f072:	00 97       	sbiw	r24, 0x00	; 0
    f074:	a1 f0       	breq	.+40     	; 0xf09e <chdir+0x38>
    f076:	84 31       	cpi	r24, 0x14	; 20
    f078:	91 05       	cpc	r25, r1
    f07a:	40 f4       	brcc	.+16     	; 0xf08c <chdir+0x26>
    f07c:	fc 01       	movw	r30, r24
    f07e:	ec 56       	subi	r30, 0x6C	; 108
    f080:	f4 4f       	sbci	r31, 0xF4	; 244
    f082:	80 81       	ld	r24, Z
    f084:	08 2e       	mov	r0, r24
    f086:	00 0c       	add	r0, r0
    f088:	99 0b       	sbc	r25, r25
    f08a:	02 c0       	rjmp	.+4      	; 0xf090 <chdir+0x2a>
    f08c:	83 e2       	ldi	r24, 0x23	; 35
    f08e:	90 e0       	ldi	r25, 0x00	; 0
    f090:	90 93 be 1c 	sts	0x1CBE, r25	; 0x801cbe <errno+0x1>
    f094:	80 93 bd 1c 	sts	0x1CBD, r24	; 0x801cbd <errno>
    f098:	8f ef       	ldi	r24, 0xFF	; 255
    f09a:	9f ef       	ldi	r25, 0xFF	; 255
    f09c:	08 95       	ret
    f09e:	80 e0       	ldi	r24, 0x00	; 0
    f0a0:	90 e0       	ldi	r25, 0x00	; 0
    f0a2:	08 95       	ret

0000f0a4 <chmod>:
    f0a4:	10 92 be 1c 	sts	0x1CBE, r1	; 0x801cbe <errno+0x1>
    f0a8:	10 92 bd 1c 	sts	0x1CBD, r1	; 0x801cbd <errno>
    f0ac:	42 79       	andi	r20, 0x92	; 146
    f0ae:	55 27       	eor	r21, r21
    f0b0:	66 27       	eor	r22, r22
    f0b2:	77 27       	eor	r23, r23
    f0b4:	45 2b       	or	r20, r21
    f0b6:	46 2b       	or	r20, r22
    f0b8:	47 2b       	or	r20, r23
    f0ba:	19 f0       	breq	.+6      	; 0xf0c2 <chmod+0x1e>
    f0bc:	80 e0       	ldi	r24, 0x00	; 0
    f0be:	90 e0       	ldi	r25, 0x00	; 0
    f0c0:	08 95       	ret
    f0c2:	41 e0       	ldi	r20, 0x01	; 1
    f0c4:	61 e0       	ldi	r22, 0x01	; 1
    f0c6:	0e 94 b7 68 	call	0xd16e	; 0xd16e <f_chmod>
    f0ca:	00 97       	sbiw	r24, 0x00	; 0
    f0cc:	b9 f3       	breq	.-18     	; 0xf0bc <chmod+0x18>
    f0ce:	84 31       	cpi	r24, 0x14	; 20
    f0d0:	91 05       	cpc	r25, r1
    f0d2:	40 f4       	brcc	.+16     	; 0xf0e4 <chmod+0x40>
    f0d4:	fc 01       	movw	r30, r24
    f0d6:	ec 56       	subi	r30, 0x6C	; 108
    f0d8:	f4 4f       	sbci	r31, 0xF4	; 244
    f0da:	80 81       	ld	r24, Z
    f0dc:	08 2e       	mov	r0, r24
    f0de:	00 0c       	add	r0, r0
    f0e0:	99 0b       	sbc	r25, r25
    f0e2:	02 c0       	rjmp	.+4      	; 0xf0e8 <chmod+0x44>
    f0e4:	83 e2       	ldi	r24, 0x23	; 35
    f0e6:	90 e0       	ldi	r25, 0x00	; 0
    f0e8:	90 93 be 1c 	sts	0x1CBE, r25	; 0x801cbe <errno+0x1>
    f0ec:	80 93 bd 1c 	sts	0x1CBD, r24	; 0x801cbd <errno>
    f0f0:	8f ef       	ldi	r24, 0xFF	; 255
    f0f2:	9f ef       	ldi	r25, 0xFF	; 255
    f0f4:	08 95       	ret

0000f0f6 <getcwd>:
    f0f6:	cf 93       	push	r28
    f0f8:	df 93       	push	r29
    f0fa:	d8 2f       	mov	r29, r24
    f0fc:	c9 2f       	mov	r28, r25
    f0fe:	10 92 be 1c 	sts	0x1CBE, r1	; 0x801cbe <errno+0x1>
    f102:	10 92 bd 1c 	sts	0x1CBD, r1	; 0x801cbd <errno>
    f106:	0e 94 32 60 	call	0xc064	; 0xc064 <f_getcwd>
    f10a:	00 97       	sbiw	r24, 0x00	; 0
    f10c:	a1 f0       	breq	.+40     	; 0xf136 <getcwd+0x40>
    f10e:	84 31       	cpi	r24, 0x14	; 20
    f110:	91 05       	cpc	r25, r1
    f112:	40 f4       	brcc	.+16     	; 0xf124 <getcwd+0x2e>
    f114:	fc 01       	movw	r30, r24
    f116:	ec 56       	subi	r30, 0x6C	; 108
    f118:	f4 4f       	sbci	r31, 0xF4	; 244
    f11a:	80 81       	ld	r24, Z
    f11c:	08 2e       	mov	r0, r24
    f11e:	00 0c       	add	r0, r0
    f120:	99 0b       	sbc	r25, r25
    f122:	02 c0       	rjmp	.+4      	; 0xf128 <getcwd+0x32>
    f124:	83 e2       	ldi	r24, 0x23	; 35
    f126:	90 e0       	ldi	r25, 0x00	; 0
    f128:	90 93 be 1c 	sts	0x1CBE, r25	; 0x801cbe <errno+0x1>
    f12c:	80 93 bd 1c 	sts	0x1CBD, r24	; 0x801cbd <errno>
    f130:	80 e0       	ldi	r24, 0x00	; 0
    f132:	90 e0       	ldi	r25, 0x00	; 0
    f134:	02 c0       	rjmp	.+4      	; 0xf13a <getcwd+0x44>
    f136:	8d 2f       	mov	r24, r29
    f138:	9c 2f       	mov	r25, r28
    f13a:	df 91       	pop	r29
    f13c:	cf 91       	pop	r28
    f13e:	08 95       	ret

0000f140 <mkdir>:
    f140:	cf 93       	push	r28
    f142:	df 93       	push	r29
    f144:	ec 01       	movw	r28, r24
    f146:	10 92 be 1c 	sts	0x1CBE, r1	; 0x801cbe <errno+0x1>
    f14a:	10 92 bd 1c 	sts	0x1CBD, r1	; 0x801cbd <errno>
    f14e:	41 15       	cp	r20, r1
    f150:	51 05       	cpc	r21, r1
    f152:	61 05       	cpc	r22, r1
    f154:	71 05       	cpc	r23, r1
    f156:	41 f4       	brne	.+16     	; 0xf168 <mkdir+0x28>
    f158:	ce 01       	movw	r24, r28
    f15a:	0e 94 b2 66 	call	0xcd64	; 0xcd64 <f_mkdir>
    f15e:	00 97       	sbiw	r24, 0x00	; 0
    f160:	39 f4       	brne	.+14     	; 0xf170 <mkdir+0x30>
    f162:	80 e0       	ldi	r24, 0x00	; 0
    f164:	90 e0       	ldi	r25, 0x00	; 0
    f166:	17 c0       	rjmp	.+46     	; 0xf196 <mkdir+0x56>
    f168:	9d df       	rcall	.-198    	; 0xf0a4 <chmod>
    f16a:	89 2b       	or	r24, r25
    f16c:	a9 f3       	breq	.-22     	; 0xf158 <mkdir+0x18>
    f16e:	11 c0       	rjmp	.+34     	; 0xf192 <mkdir+0x52>
    f170:	84 31       	cpi	r24, 0x14	; 20
    f172:	91 05       	cpc	r25, r1
    f174:	40 f4       	brcc	.+16     	; 0xf186 <mkdir+0x46>
    f176:	fc 01       	movw	r30, r24
    f178:	ec 56       	subi	r30, 0x6C	; 108
    f17a:	f4 4f       	sbci	r31, 0xF4	; 244
    f17c:	80 81       	ld	r24, Z
    f17e:	08 2e       	mov	r0, r24
    f180:	00 0c       	add	r0, r0
    f182:	99 0b       	sbc	r25, r25
    f184:	02 c0       	rjmp	.+4      	; 0xf18a <mkdir+0x4a>
    f186:	83 e2       	ldi	r24, 0x23	; 35
    f188:	90 e0       	ldi	r25, 0x00	; 0
    f18a:	90 93 be 1c 	sts	0x1CBE, r25	; 0x801cbe <errno+0x1>
    f18e:	80 93 bd 1c 	sts	0x1CBD, r24	; 0x801cbd <errno>
    f192:	8f ef       	ldi	r24, 0xFF	; 255
    f194:	9f ef       	ldi	r25, 0xFF	; 255
    f196:	df 91       	pop	r29
    f198:	cf 91       	pop	r28
    f19a:	08 95       	ret

0000f19c <rename>:
    f19c:	10 92 be 1c 	sts	0x1CBE, r1	; 0x801cbe <errno+0x1>
    f1a0:	10 92 bd 1c 	sts	0x1CBD, r1	; 0x801cbd <errno>
    f1a4:	0e 94 a2 67 	call	0xcf44	; 0xcf44 <f_rename>
    f1a8:	00 97       	sbiw	r24, 0x00	; 0
    f1aa:	a1 f0       	breq	.+40     	; 0xf1d4 <rename+0x38>
    f1ac:	84 31       	cpi	r24, 0x14	; 20
    f1ae:	91 05       	cpc	r25, r1
    f1b0:	40 f4       	brcc	.+16     	; 0xf1c2 <rename+0x26>
    f1b2:	fc 01       	movw	r30, r24
    f1b4:	ec 56       	subi	r30, 0x6C	; 108
    f1b6:	f4 4f       	sbci	r31, 0xF4	; 244
    f1b8:	80 81       	ld	r24, Z
    f1ba:	08 2e       	mov	r0, r24
    f1bc:	00 0c       	add	r0, r0
    f1be:	99 0b       	sbc	r25, r25
    f1c0:	02 c0       	rjmp	.+4      	; 0xf1c6 <rename+0x2a>
    f1c2:	83 e2       	ldi	r24, 0x23	; 35
    f1c4:	90 e0       	ldi	r25, 0x00	; 0
    f1c6:	90 93 be 1c 	sts	0x1CBE, r25	; 0x801cbe <errno+0x1>
    f1ca:	80 93 bd 1c 	sts	0x1CBD, r24	; 0x801cbd <errno>
    f1ce:	8f ef       	ldi	r24, 0xFF	; 255
    f1d0:	9f ef       	ldi	r25, 0xFF	; 255
    f1d2:	08 95       	ret
    f1d4:	80 e0       	ldi	r24, 0x00	; 0
    f1d6:	90 e0       	ldi	r25, 0x00	; 0
    f1d8:	08 95       	ret

0000f1da <unlink>:
    f1da:	10 92 be 1c 	sts	0x1CBE, r1	; 0x801cbe <errno+0x1>
    f1de:	10 92 bd 1c 	sts	0x1CBD, r1	; 0x801cbd <errno>
    f1e2:	0e 94 0b 66 	call	0xcc16	; 0xcc16 <f_unlink>
    f1e6:	00 97       	sbiw	r24, 0x00	; 0
    f1e8:	a1 f0       	breq	.+40     	; 0xf212 <unlink+0x38>
    f1ea:	84 31       	cpi	r24, 0x14	; 20
    f1ec:	91 05       	cpc	r25, r1
    f1ee:	40 f4       	brcc	.+16     	; 0xf200 <unlink+0x26>
    f1f0:	fc 01       	movw	r30, r24
    f1f2:	ec 56       	subi	r30, 0x6C	; 108
    f1f4:	f4 4f       	sbci	r31, 0xF4	; 244
    f1f6:	80 81       	ld	r24, Z
    f1f8:	08 2e       	mov	r0, r24
    f1fa:	00 0c       	add	r0, r0
    f1fc:	99 0b       	sbc	r25, r25
    f1fe:	02 c0       	rjmp	.+4      	; 0xf204 <unlink+0x2a>
    f200:	83 e2       	ldi	r24, 0x23	; 35
    f202:	90 e0       	ldi	r25, 0x00	; 0
    f204:	90 93 be 1c 	sts	0x1CBE, r25	; 0x801cbe <errno+0x1>
    f208:	80 93 bd 1c 	sts	0x1CBD, r24	; 0x801cbd <errno>
    f20c:	8f ef       	ldi	r24, 0xFF	; 255
    f20e:	9f ef       	ldi	r25, 0xFF	; 255
    f210:	08 95       	ret
    f212:	80 e0       	ldi	r24, 0x00	; 0
    f214:	90 e0       	ldi	r25, 0x00	; 0
    f216:	08 95       	ret

0000f218 <rmdir>:
    f218:	e0 cf       	rjmp	.-64     	; 0xf1da <unlink>
    f21a:	08 95       	ret

0000f21c <closedir>:
    f21c:	0e 94 94 64 	call	0xc928	; 0xc928 <f_closedir>
    f220:	00 97       	sbiw	r24, 0x00	; 0
    f222:	a1 f0       	breq	.+40     	; 0xf24c <closedir+0x30>
    f224:	84 31       	cpi	r24, 0x14	; 20
    f226:	91 05       	cpc	r25, r1
    f228:	40 f4       	brcc	.+16     	; 0xf23a <closedir+0x1e>
    f22a:	fc 01       	movw	r30, r24
    f22c:	ec 56       	subi	r30, 0x6C	; 108
    f22e:	f4 4f       	sbci	r31, 0xF4	; 244
    f230:	80 81       	ld	r24, Z
    f232:	08 2e       	mov	r0, r24
    f234:	00 0c       	add	r0, r0
    f236:	99 0b       	sbc	r25, r25
    f238:	02 c0       	rjmp	.+4      	; 0xf23e <closedir+0x22>
    f23a:	83 e2       	ldi	r24, 0x23	; 35
    f23c:	90 e0       	ldi	r25, 0x00	; 0
    f23e:	90 93 be 1c 	sts	0x1CBE, r25	; 0x801cbe <errno+0x1>
    f242:	80 93 bd 1c 	sts	0x1CBD, r24	; 0x801cbd <errno>
    f246:	8f ef       	ldi	r24, 0xFF	; 255
    f248:	9f ef       	ldi	r25, 0xFF	; 255
    f24a:	08 95       	ret
    f24c:	80 e0       	ldi	r24, 0x00	; 0
    f24e:	90 e0       	ldi	r25, 0x00	; 0
    f250:	08 95       	ret

0000f252 <opendir>:
    f252:	bc 01       	movw	r22, r24
    f254:	80 e3       	ldi	r24, 0x30	; 48
    f256:	99 e1       	ldi	r25, 0x19	; 25
    f258:	0e 94 23 64 	call	0xc846	; 0xc846 <f_opendir>
    f25c:	00 97       	sbiw	r24, 0x00	; 0
    f25e:	a1 f0       	breq	.+40     	; 0xf288 <opendir+0x36>
    f260:	84 31       	cpi	r24, 0x14	; 20
    f262:	91 05       	cpc	r25, r1
    f264:	40 f4       	brcc	.+16     	; 0xf276 <opendir+0x24>
    f266:	fc 01       	movw	r30, r24
    f268:	ec 56       	subi	r30, 0x6C	; 108
    f26a:	f4 4f       	sbci	r31, 0xF4	; 244
    f26c:	80 81       	ld	r24, Z
    f26e:	08 2e       	mov	r0, r24
    f270:	00 0c       	add	r0, r0
    f272:	99 0b       	sbc	r25, r25
    f274:	02 c0       	rjmp	.+4      	; 0xf27a <opendir+0x28>
    f276:	83 e2       	ldi	r24, 0x23	; 35
    f278:	90 e0       	ldi	r25, 0x00	; 0
    f27a:	90 93 be 1c 	sts	0x1CBE, r25	; 0x801cbe <errno+0x1>
    f27e:	80 93 bd 1c 	sts	0x1CBD, r24	; 0x801cbd <errno>
    f282:	80 e0       	ldi	r24, 0x00	; 0
    f284:	90 e0       	ldi	r25, 0x00	; 0
    f286:	08 95       	ret
    f288:	80 e3       	ldi	r24, 0x30	; 48
    f28a:	99 e1       	ldi	r25, 0x19	; 25
    f28c:	08 95       	ret

0000f28e <readdir>:
    f28e:	a6 e1       	ldi	r26, 0x16	; 22
    f290:	b1 e0       	ldi	r27, 0x01	; 1
    f292:	ed e4       	ldi	r30, 0x4D	; 77
    f294:	f9 e7       	ldi	r31, 0x79	; 121
    f296:	0c 94 b2 e8 	jmp	0x1d164	; 0x1d164 <__prologue_saves__+0x1c>
    f29a:	10 92 30 18 	sts	0x1830, r1	; 0x801830 <_de>
    f29e:	be 01       	movw	r22, r28
    f2a0:	6f 5f       	subi	r22, 0xFF	; 255
    f2a2:	7f 4f       	sbci	r23, 0xFF	; 255
    f2a4:	0e 94 a9 64 	call	0xc952	; 0xc952 <f_readdir>
    f2a8:	00 97       	sbiw	r24, 0x00	; 0
    f2aa:	a1 f0       	breq	.+40     	; 0xf2d4 <readdir+0x46>
    f2ac:	84 31       	cpi	r24, 0x14	; 20
    f2ae:	91 05       	cpc	r25, r1
    f2b0:	40 f4       	brcc	.+16     	; 0xf2c2 <readdir+0x34>
    f2b2:	fc 01       	movw	r30, r24
    f2b4:	ec 56       	subi	r30, 0x6C	; 108
    f2b6:	f4 4f       	sbci	r31, 0xF4	; 244
    f2b8:	80 81       	ld	r24, Z
    f2ba:	08 2e       	mov	r0, r24
    f2bc:	00 0c       	add	r0, r0
    f2be:	99 0b       	sbc	r25, r25
    f2c0:	02 c0       	rjmp	.+4      	; 0xf2c6 <readdir+0x38>
    f2c2:	83 e2       	ldi	r24, 0x23	; 35
    f2c4:	90 e0       	ldi	r25, 0x00	; 0
    f2c6:	90 93 be 1c 	sts	0x1CBE, r25	; 0x801cbe <errno+0x1>
    f2ca:	80 93 bd 1c 	sts	0x1CBD, r24	; 0x801cbd <errno>
    f2ce:	80 e0       	ldi	r24, 0x00	; 0
    f2d0:	90 e0       	ldi	r25, 0x00	; 0
    f2d2:	16 c0       	rjmp	.+44     	; 0xf300 <readdir+0x72>
    f2d4:	be 01       	movw	r22, r28
    f2d6:	69 5e       	subi	r22, 0xE9	; 233
    f2d8:	7f 4f       	sbci	r23, 0xFF	; 255
    f2da:	fb 01       	movw	r30, r22
    f2dc:	01 90       	ld	r0, Z+
    f2de:	00 20       	and	r0, r0
    f2e0:	e9 f7       	brne	.-6      	; 0xf2dc <readdir+0x4e>
    f2e2:	31 97       	sbiw	r30, 0x01	; 1
    f2e4:	8f 01       	movw	r16, r30
    f2e6:	06 1b       	sub	r16, r22
    f2e8:	17 0b       	sbc	r17, r23
    f2ea:	a8 01       	movw	r20, r16
    f2ec:	80 e3       	ldi	r24, 0x30	; 48
    f2ee:	98 e1       	ldi	r25, 0x18	; 24
    f2f0:	0e 94 48 32 	call	0x6490	; 0x6490 <strncpy>
    f2f4:	f8 01       	movw	r30, r16
    f2f6:	e0 5d       	subi	r30, 0xD0	; 208
    f2f8:	f7 4e       	sbci	r31, 0xE7	; 231
    f2fa:	10 82       	st	Z, r1
    f2fc:	80 e3       	ldi	r24, 0x30	; 48
    f2fe:	98 e1       	ldi	r25, 0x18	; 24
    f300:	ca 5e       	subi	r28, 0xEA	; 234
    f302:	de 4f       	sbci	r29, 0xFE	; 254
    f304:	e4 e0       	ldi	r30, 0x04	; 4
    f306:	0c 94 ce e8 	jmp	0x1d19c	; 0x1d19c <__epilogue_restores__+0x1c>

0000f30a <perror>:
    f30a:	ad b7       	in	r26, 0x3d	; 61
    f30c:	be b7       	in	r27, 0x3e	; 62
    f30e:	17 97       	sbiw	r26, 0x07	; 7
    f310:	0f b6       	in	r0, 0x3f	; 63
    f312:	f8 94       	cli
    f314:	be bf       	out	0x3e, r27	; 62
    f316:	0f be       	out	0x3f, r0	; 63
    f318:	ad bf       	out	0x3d, r26	; 61
    f31a:	20 91 bd 1c 	lds	r18, 0x1CBD	; 0x801cbd <errno>
    f31e:	30 91 be 1c 	lds	r19, 0x1CBE	; 0x801cbe <errno+0x1>
    f322:	23 32       	cpi	r18, 0x23	; 35
    f324:	31 05       	cpc	r19, r1
    f326:	40 f4       	brcc	.+16     	; 0xf338 <perror+0x2e>
    f328:	22 0f       	add	r18, r18
    f32a:	33 1f       	adc	r19, r19
    f32c:	f9 01       	movw	r30, r18
    f32e:	ea 5c       	subi	r30, 0xCA	; 202
    f330:	fe 4f       	sbci	r31, 0xFE	; 254
    f332:	20 81       	ld	r18, Z
    f334:	31 81       	ldd	r19, Z+1	; 0x01
    f336:	04 c0       	rjmp	.+8      	; 0xf340 <perror+0x36>
    f338:	20 91 7c 01 	lds	r18, 0x017C	; 0x80017c <sys_errlist+0x46>
    f33c:	30 91 7d 01 	lds	r19, 0x017D	; 0x80017d <sys_errlist+0x47>
    f340:	00 97       	sbiw	r24, 0x00	; 0
    f342:	99 f0       	breq	.+38     	; 0xf36a <perror+0x60>
    f344:	fc 01       	movw	r30, r24
    f346:	40 81       	ld	r20, Z
    f348:	44 23       	and	r20, r20
    f34a:	79 f0       	breq	.+30     	; 0xf36a <perror+0x60>
    f34c:	ed b7       	in	r30, 0x3d	; 61
    f34e:	fe b7       	in	r31, 0x3e	; 62
    f350:	37 83       	std	Z+7, r19	; 0x07
    f352:	26 83       	std	Z+6, r18	; 0x06
    f354:	95 83       	std	Z+5, r25	; 0x05
    f356:	84 83       	std	Z+4, r24	; 0x04
    f358:	8e e8       	ldi	r24, 0x8E	; 142
    f35a:	9b e0       	ldi	r25, 0x0B	; 11
    f35c:	a0 e0       	ldi	r26, 0x00	; 0
    f35e:	81 83       	std	Z+1, r24	; 0x01
    f360:	92 83       	std	Z+2, r25	; 0x02
    f362:	a3 83       	std	Z+3, r26	; 0x03
    f364:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
    f368:	0c c0       	rjmp	.+24     	; 0xf382 <perror+0x78>
    f36a:	ed b7       	in	r30, 0x3d	; 61
    f36c:	fe b7       	in	r31, 0x3e	; 62
    f36e:	35 83       	std	Z+5, r19	; 0x05
    f370:	24 83       	std	Z+4, r18	; 0x04
    f372:	8a e8       	ldi	r24, 0x8A	; 138
    f374:	9b e0       	ldi	r25, 0x0B	; 11
    f376:	a0 e0       	ldi	r26, 0x00	; 0
    f378:	81 83       	std	Z+1, r24	; 0x01
    f37a:	92 83       	std	Z+2, r25	; 0x02
    f37c:	a3 83       	std	Z+3, r26	; 0x03
    f37e:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
    f382:	ad b7       	in	r26, 0x3d	; 61
    f384:	be b7       	in	r27, 0x3e	; 62
    f386:	17 96       	adiw	r26, 0x07	; 7
    f388:	0f b6       	in	r0, 0x3f	; 63
    f38a:	f8 94       	cli
    f38c:	be bf       	out	0x3e, r27	; 62
    f38e:	0f be       	out	0x3f, r0	; 63
    f390:	ad bf       	out	0x3d, r26	; 61
    f392:	08 95       	ret

0000f394 <fdevopen>:
    f394:	0f 93       	push	r16
    f396:	1f 93       	push	r17
    f398:	cf 93       	push	r28
    f39a:	df 93       	push	r29
    f39c:	00 97       	sbiw	r24, 0x00	; 0
    f39e:	31 f4       	brne	.+12     	; 0xf3ac <fdevopen+0x18>
    f3a0:	61 15       	cp	r22, r1
    f3a2:	71 05       	cpc	r23, r1
    f3a4:	19 f4       	brne	.+6      	; 0xf3ac <fdevopen+0x18>
    f3a6:	80 e0       	ldi	r24, 0x00	; 0
    f3a8:	90 e0       	ldi	r25, 0x00	; 0
    f3aa:	3a c0       	rjmp	.+116    	; 0xf420 <fdevopen+0x8c>
    f3ac:	8b 01       	movw	r16, r22
    f3ae:	ec 01       	movw	r28, r24
    f3b0:	6e e0       	ldi	r22, 0x0E	; 14
    f3b2:	70 e0       	ldi	r23, 0x00	; 0
    f3b4:	81 e0       	ldi	r24, 0x01	; 1
    f3b6:	90 e0       	ldi	r25, 0x00	; 0
    f3b8:	0e 94 28 28 	call	0x5050	; 0x5050 <safecalloc>
    f3bc:	fc 01       	movw	r30, r24
    f3be:	89 2b       	or	r24, r25
    f3c0:	91 f3       	breq	.-28     	; 0xf3a6 <fdevopen+0x12>
    f3c2:	80 e8       	ldi	r24, 0x80	; 128
    f3c4:	83 83       	std	Z+3, r24	; 0x03
    f3c6:	01 15       	cp	r16, r1
    f3c8:	11 05       	cpc	r17, r1
    f3ca:	71 f0       	breq	.+28     	; 0xf3e8 <fdevopen+0x54>
    f3cc:	13 87       	std	Z+11, r17	; 0x0b
    f3ce:	02 87       	std	Z+10, r16	; 0x0a
    f3d0:	81 e8       	ldi	r24, 0x81	; 129
    f3d2:	83 83       	std	Z+3, r24	; 0x03
    f3d4:	80 91 bf 1c 	lds	r24, 0x1CBF	; 0x801cbf <__iob>
    f3d8:	90 91 c0 1c 	lds	r25, 0x1CC0	; 0x801cc0 <__iob+0x1>
    f3dc:	89 2b       	or	r24, r25
    f3de:	21 f4       	brne	.+8      	; 0xf3e8 <fdevopen+0x54>
    f3e0:	f0 93 c0 1c 	sts	0x1CC0, r31	; 0x801cc0 <__iob+0x1>
    f3e4:	e0 93 bf 1c 	sts	0x1CBF, r30	; 0x801cbf <__iob>
    f3e8:	20 97       	sbiw	r28, 0x00	; 0
    f3ea:	c9 f0       	breq	.+50     	; 0xf41e <fdevopen+0x8a>
    f3ec:	d1 87       	std	Z+9, r29	; 0x09
    f3ee:	c0 87       	std	Z+8, r28	; 0x08
    f3f0:	83 81       	ldd	r24, Z+3	; 0x03
    f3f2:	82 60       	ori	r24, 0x02	; 2
    f3f4:	83 83       	std	Z+3, r24	; 0x03
    f3f6:	80 91 c1 1c 	lds	r24, 0x1CC1	; 0x801cc1 <__iob+0x2>
    f3fa:	90 91 c2 1c 	lds	r25, 0x1CC2	; 0x801cc2 <__iob+0x3>
    f3fe:	89 2b       	or	r24, r25
    f400:	21 f4       	brne	.+8      	; 0xf40a <fdevopen+0x76>
    f402:	f0 93 c2 1c 	sts	0x1CC2, r31	; 0x801cc2 <__iob+0x3>
    f406:	e0 93 c1 1c 	sts	0x1CC1, r30	; 0x801cc1 <__iob+0x2>
    f40a:	80 91 c3 1c 	lds	r24, 0x1CC3	; 0x801cc3 <__iob+0x4>
    f40e:	90 91 c4 1c 	lds	r25, 0x1CC4	; 0x801cc4 <__iob+0x5>
    f412:	89 2b       	or	r24, r25
    f414:	21 f4       	brne	.+8      	; 0xf41e <fdevopen+0x8a>
    f416:	f0 93 c4 1c 	sts	0x1CC4, r31	; 0x801cc4 <__iob+0x5>
    f41a:	e0 93 c3 1c 	sts	0x1CC3, r30	; 0x801cc3 <__iob+0x4>
    f41e:	cf 01       	movw	r24, r30
    f420:	df 91       	pop	r29
    f422:	cf 91       	pop	r28
    f424:	1f 91       	pop	r17
    f426:	0f 91       	pop	r16
    f428:	08 95       	ret

0000f42a <fat_time_to_unix>:
    f42a:	a6 e1       	ldi	r26, 0x16	; 22
    f42c:	b0 e0       	ldi	r27, 0x00	; 0
    f42e:	eb e1       	ldi	r30, 0x1B	; 27
    f430:	fa e7       	ldi	r31, 0x7A	; 122
    f432:	0c 94 b4 e8 	jmp	0x1d168	; 0x1d168 <__prologue_saves__+0x20>
    f436:	fe 01       	movw	r30, r28
    f438:	31 96       	adiw	r30, 0x01	; 1
    f43a:	26 e1       	ldi	r18, 0x16	; 22
    f43c:	df 01       	movw	r26, r30
    f43e:	1d 92       	st	X+, r1
    f440:	2a 95       	dec	r18
    f442:	e9 f7       	brne	.-6      	; 0xf43e <fat_time_to_unix+0x14>
    f444:	9b 01       	movw	r18, r22
    f446:	22 0f       	add	r18, r18
    f448:	33 1f       	adc	r19, r19
    f44a:	2e 73       	andi	r18, 0x3E	; 62
    f44c:	33 27       	eor	r19, r19
    f44e:	3a 83       	std	Y+2, r19	; 0x02
    f450:	29 83       	std	Y+1, r18	; 0x01
    f452:	9b 01       	movw	r18, r22
    f454:	55 e0       	ldi	r21, 0x05	; 5
    f456:	36 95       	lsr	r19
    f458:	27 95       	ror	r18
    f45a:	5a 95       	dec	r21
    f45c:	e1 f7       	brne	.-8      	; 0xf456 <fat_time_to_unix+0x2c>
    f45e:	2f 73       	andi	r18, 0x3F	; 63
    f460:	33 27       	eor	r19, r19
    f462:	3c 83       	std	Y+4, r19	; 0x04
    f464:	2b 83       	std	Y+3, r18	; 0x03
    f466:	27 2f       	mov	r18, r23
    f468:	26 95       	lsr	r18
    f46a:	26 95       	lsr	r18
    f46c:	26 95       	lsr	r18
    f46e:	2d 83       	std	Y+5, r18	; 0x05
    f470:	1e 82       	std	Y+6, r1	; 0x06
    f472:	9c 01       	movw	r18, r24
    f474:	2f 71       	andi	r18, 0x1F	; 31
    f476:	33 27       	eor	r19, r19
    f478:	38 87       	std	Y+8, r19	; 0x08
    f47a:	2f 83       	std	Y+7, r18	; 0x07
    f47c:	9c 01       	movw	r18, r24
    f47e:	65 e0       	ldi	r22, 0x05	; 5
    f480:	36 95       	lsr	r19
    f482:	27 95       	ror	r18
    f484:	6a 95       	dec	r22
    f486:	e1 f7       	brne	.-8      	; 0xf480 <fat_time_to_unix+0x56>
    f488:	2f 70       	andi	r18, 0x0F	; 15
    f48a:	33 27       	eor	r19, r19
    f48c:	21 50       	subi	r18, 0x01	; 1
    f48e:	31 09       	sbc	r19, r1
    f490:	3a 87       	std	Y+10, r19	; 0x0a
    f492:	29 87       	std	Y+9, r18	; 0x09
    f494:	9c 01       	movw	r18, r24
    f496:	23 2f       	mov	r18, r19
    f498:	33 27       	eor	r19, r19
    f49a:	26 95       	lsr	r18
    f49c:	20 5b       	subi	r18, 0xB0	; 176
    f49e:	3f 4f       	sbci	r19, 0xFF	; 255
    f4a0:	3c 87       	std	Y+12, r19	; 0x0c
    f4a2:	2b 87       	std	Y+11, r18	; 0x0b
    f4a4:	cf 01       	movw	r24, r30
    f4a6:	0e 94 63 3b 	call	0x76c6	; 0x76c6 <timegm>
    f4aa:	66 96       	adiw	r28, 0x16	; 22
    f4ac:	e2 e0       	ldi	r30, 0x02	; 2
    f4ae:	0c 94 d0 e8 	jmp	0x1d1a0	; 0x1d1a0 <__epilogue_restores__+0x20>

0000f4b2 <stat>:
    f4b2:	a6 e1       	ldi	r26, 0x16	; 22
    f4b4:	b1 e0       	ldi	r27, 0x01	; 1
    f4b6:	ef e5       	ldi	r30, 0x5F	; 95
    f4b8:	fa e7       	ldi	r31, 0x7A	; 122
    f4ba:	0c 94 ae e8 	jmp	0x1d15c	; 0x1d15c <__prologue_saves__+0x14>
    f4be:	6c 01       	movw	r12, r24
    f4c0:	8b 01       	movw	r16, r22
    f4c2:	10 92 be 1c 	sts	0x1CBE, r1	; 0x801cbe <errno+0x1>
    f4c6:	10 92 bd 1c 	sts	0x1CBD, r1	; 0x801cbd <errno>
    f4ca:	6a ee       	ldi	r22, 0xEA	; 234
    f4cc:	78 e0       	ldi	r23, 0x08	; 8
    f4ce:	0e 94 35 33 	call	0x666a	; 0x666a <MATCH>
    f4d2:	89 2b       	or	r24, r25
    f4d4:	01 f1       	breq	.+64     	; 0xf516 <stat+0x64>
    f4d6:	f8 01       	movw	r30, r16
    f4d8:	14 a2       	std	Z+36, r1	; 0x24
    f4da:	15 a2       	std	Z+37, r1	; 0x25
    f4dc:	16 a2       	std	Z+38, r1	; 0x26
    f4de:	17 a2       	std	Z+39, r1	; 0x27
    f4e0:	10 a6       	std	Z+40, r1	; 0x28
    f4e2:	11 a6       	std	Z+41, r1	; 0x29
    f4e4:	12 a6       	std	Z+42, r1	; 0x2a
    f4e6:	13 a6       	std	Z+43, r1	; 0x2b
    f4e8:	14 a6       	std	Z+44, r1	; 0x2c
    f4ea:	15 a6       	std	Z+45, r1	; 0x2d
    f4ec:	16 a6       	std	Z+46, r1	; 0x2e
    f4ee:	17 a6       	std	Z+47, r1	; 0x2f
    f4f0:	11 8a       	std	Z+17, r1	; 0x11
    f4f2:	10 8a       	std	Z+16, r1	; 0x10
    f4f4:	13 8a       	std	Z+19, r1	; 0x13
    f4f6:	12 8a       	std	Z+18, r1	; 0x12
    f4f8:	10 8e       	std	Z+24, r1	; 0x18
    f4fa:	11 8e       	std	Z+25, r1	; 0x19
    f4fc:	12 8e       	std	Z+26, r1	; 0x1a
    f4fe:	13 8e       	std	Z+27, r1	; 0x1b
    f500:	80 e0       	ldi	r24, 0x00	; 0
    f502:	90 e4       	ldi	r25, 0x40	; 64
    f504:	a0 e0       	ldi	r26, 0x00	; 0
    f506:	b0 e0       	ldi	r27, 0x00	; 0
    f508:	80 87       	std	Z+8, r24	; 0x08
    f50a:	91 87       	std	Z+9, r25	; 0x09
    f50c:	a2 87       	std	Z+10, r26	; 0x0a
    f50e:	b3 87       	std	Z+11, r27	; 0x0b
    f510:	e1 2c       	mov	r14, r1
    f512:	f1 2c       	mov	r15, r1
    f514:	62 c0       	rjmp	.+196    	; 0xf5da <stat+0x128>
    f516:	66 ea       	ldi	r22, 0xA6	; 166
    f518:	78 e0       	ldi	r23, 0x08	; 8
    f51a:	c6 01       	movw	r24, r12
    f51c:	0e 94 35 33 	call	0x666a	; 0x666a <MATCH>
    f520:	89 2b       	or	r24, r25
    f522:	c9 f6       	brne	.-78     	; 0xf4d6 <stat+0x24>
    f524:	66 ee       	ldi	r22, 0xE6	; 230
    f526:	72 e1       	ldi	r23, 0x12	; 18
    f528:	c6 01       	movw	r24, r12
    f52a:	0e 94 35 33 	call	0x666a	; 0x666a <MATCH>
    f52e:	7c 01       	movw	r14, r24
    f530:	89 2b       	or	r24, r25
    f532:	89 f6       	brne	.-94     	; 0xf4d6 <stat+0x24>
    f534:	be 01       	movw	r22, r28
    f536:	6f 5f       	subi	r22, 0xFF	; 255
    f538:	7f 4f       	sbci	r23, 0xFF	; 255
    f53a:	c6 01       	movw	r24, r12
    f53c:	0e 94 ed 64 	call	0xc9da	; 0xc9da <f_stat>
    f540:	00 97       	sbiw	r24, 0x00	; 0
    f542:	a9 f0       	breq	.+42     	; 0xf56e <stat+0xbc>
    f544:	84 31       	cpi	r24, 0x14	; 20
    f546:	91 05       	cpc	r25, r1
    f548:	40 f4       	brcc	.+16     	; 0xf55a <stat+0xa8>
    f54a:	fc 01       	movw	r30, r24
    f54c:	ec 56       	subi	r30, 0x6C	; 108
    f54e:	f4 4f       	sbci	r31, 0xF4	; 244
    f550:	80 81       	ld	r24, Z
    f552:	08 2e       	mov	r0, r24
    f554:	00 0c       	add	r0, r0
    f556:	99 0b       	sbc	r25, r25
    f558:	02 c0       	rjmp	.+4      	; 0xf55e <stat+0xac>
    f55a:	83 e2       	ldi	r24, 0x23	; 35
    f55c:	90 e0       	ldi	r25, 0x00	; 0
    f55e:	90 93 be 1c 	sts	0x1CBE, r25	; 0x801cbe <errno+0x1>
    f562:	80 93 bd 1c 	sts	0x1CBD, r24	; 0x801cbd <errno>
    f566:	ee 24       	eor	r14, r14
    f568:	ea 94       	dec	r14
    f56a:	fe 2c       	mov	r15, r14
    f56c:	36 c0       	rjmp	.+108    	; 0xf5da <stat+0x128>
    f56e:	89 81       	ldd	r24, Y+1	; 0x01
    f570:	9a 81       	ldd	r25, Y+2	; 0x02
    f572:	ab 81       	ldd	r26, Y+3	; 0x03
    f574:	bc 81       	ldd	r27, Y+4	; 0x04
    f576:	f8 01       	movw	r30, r16
    f578:	80 8f       	std	Z+24, r24	; 0x18
    f57a:	91 8f       	std	Z+25, r25	; 0x19
    f57c:	a2 8f       	std	Z+26, r26	; 0x1a
    f57e:	b3 8f       	std	Z+27, r27	; 0x1b
    f580:	6f 81       	ldd	r22, Y+7	; 0x07
    f582:	78 85       	ldd	r23, Y+8	; 0x08
    f584:	8d 81       	ldd	r24, Y+5	; 0x05
    f586:	9e 81       	ldd	r25, Y+6	; 0x06
    f588:	50 df       	rcall	.-352    	; 0xf42a <fat_time_to_unix>
    f58a:	f8 01       	movw	r30, r16
    f58c:	64 a3       	std	Z+36, r22	; 0x24
    f58e:	75 a3       	std	Z+37, r23	; 0x25
    f590:	86 a3       	std	Z+38, r24	; 0x26
    f592:	97 a3       	std	Z+39, r25	; 0x27
    f594:	60 a7       	std	Z+40, r22	; 0x28
    f596:	71 a7       	std	Z+41, r23	; 0x29
    f598:	82 a7       	std	Z+42, r24	; 0x2a
    f59a:	93 a7       	std	Z+43, r25	; 0x2b
    f59c:	64 a7       	std	Z+44, r22	; 0x2c
    f59e:	75 a7       	std	Z+45, r23	; 0x2d
    f5a0:	86 a7       	std	Z+46, r24	; 0x2e
    f5a2:	97 a7       	std	Z+47, r25	; 0x2f
    f5a4:	29 85       	ldd	r18, Y+9	; 0x09
    f5a6:	20 fd       	sbrc	r18, 0
    f5a8:	03 c0       	rjmp	.+6      	; 0xf5b0 <stat+0xfe>
    f5aa:	8f ef       	ldi	r24, 0xFF	; 255
    f5ac:	91 e0       	ldi	r25, 0x01	; 1
    f5ae:	02 c0       	rjmp	.+4      	; 0xf5b4 <stat+0x102>
    f5b0:	8d e6       	ldi	r24, 0x6D	; 109
    f5b2:	91 e0       	ldi	r25, 0x01	; 1
    f5b4:	48 ee       	ldi	r20, 0xE8	; 232
    f5b6:	53 e0       	ldi	r21, 0x03	; 3
    f5b8:	f8 01       	movw	r30, r16
    f5ba:	51 8b       	std	Z+17, r21	; 0x11
    f5bc:	40 8b       	std	Z+16, r20	; 0x10
    f5be:	53 8b       	std	Z+19, r21	; 0x13
    f5c0:	42 8b       	std	Z+18, r20	; 0x12
    f5c2:	24 ff       	sbrs	r18, 4
    f5c4:	02 c0       	rjmp	.+4      	; 0xf5ca <stat+0x118>
    f5c6:	90 64       	ori	r25, 0x40	; 64
    f5c8:	01 c0       	rjmp	.+2      	; 0xf5cc <stat+0x11a>
    f5ca:	90 68       	ori	r25, 0x80	; 128
    f5cc:	a0 e0       	ldi	r26, 0x00	; 0
    f5ce:	b0 e0       	ldi	r27, 0x00	; 0
    f5d0:	f8 01       	movw	r30, r16
    f5d2:	80 87       	std	Z+8, r24	; 0x08
    f5d4:	91 87       	std	Z+9, r25	; 0x09
    f5d6:	a2 87       	std	Z+10, r26	; 0x0a
    f5d8:	b3 87       	std	Z+11, r27	; 0x0b
    f5da:	c7 01       	movw	r24, r14
    f5dc:	ca 5e       	subi	r28, 0xEA	; 234
    f5de:	de 4f       	sbci	r29, 0xFE	; 254
    f5e0:	e8 e0       	ldi	r30, 0x08	; 8
    f5e2:	0c 94 ca e8 	jmp	0x1d194	; 0x1d194 <__epilogue_restores__+0x14>

0000f5e6 <unix_time_to_fat>:
    f5e6:	a4 e0       	ldi	r26, 0x04	; 4
    f5e8:	b0 e0       	ldi	r27, 0x00	; 0
    f5ea:	e9 ef       	ldi	r30, 0xF9	; 249
    f5ec:	fa e7       	ldi	r31, 0x7A	; 122
    f5ee:	0c 94 b0 e8 	jmp	0x1d160	; 0x1d160 <__prologue_saves__+0x18>
    f5f2:	69 83       	std	Y+1, r22	; 0x01
    f5f4:	7a 83       	std	Y+2, r23	; 0x02
    f5f6:	8b 83       	std	Y+3, r24	; 0x03
    f5f8:	9c 83       	std	Y+4, r25	; 0x04
    f5fa:	7a 01       	movw	r14, r20
    f5fc:	89 01       	movw	r16, r18
    f5fe:	ce 01       	movw	r24, r28
    f600:	01 96       	adiw	r24, 0x01	; 1
    f602:	0e 94 a4 38 	call	0x7148	; 0x7148 <gmtime>
    f606:	fc 01       	movw	r30, r24
    f608:	22 85       	ldd	r18, Z+10	; 0x0a
    f60a:	33 85       	ldd	r19, Z+11	; 0x0b
    f60c:	20 55       	subi	r18, 0x50	; 80
    f60e:	31 09       	sbc	r19, r1
    f610:	c9 01       	movw	r24, r18
    f612:	98 2f       	mov	r25, r24
    f614:	88 27       	eor	r24, r24
    f616:	99 0f       	add	r25, r25
    f618:	20 85       	ldd	r18, Z+8	; 0x08
    f61a:	31 85       	ldd	r19, Z+9	; 0x09
    f61c:	2f 5f       	subi	r18, 0xFF	; 255
    f61e:	3f 4f       	sbci	r19, 0xFF	; 255
    f620:	45 e0       	ldi	r20, 0x05	; 5
    f622:	22 0f       	add	r18, r18
    f624:	33 1f       	adc	r19, r19
    f626:	4a 95       	dec	r20
    f628:	e1 f7       	brne	.-8      	; 0xf622 <unix_time_to_fat+0x3c>
    f62a:	28 2b       	or	r18, r24
    f62c:	39 2b       	or	r19, r25
    f62e:	86 81       	ldd	r24, Z+6	; 0x06
    f630:	97 81       	ldd	r25, Z+7	; 0x07
    f632:	28 2b       	or	r18, r24
    f634:	39 2b       	or	r19, r25
    f636:	d7 01       	movw	r26, r14
    f638:	2d 93       	st	X+, r18
    f63a:	3c 93       	st	X, r19
    f63c:	84 81       	ldd	r24, Z+4	; 0x04
    f63e:	20 e0       	ldi	r18, 0x00	; 0
    f640:	30 e0       	ldi	r19, 0x00	; 0
    f642:	38 2f       	mov	r19, r24
    f644:	33 0f       	add	r19, r19
    f646:	33 0f       	add	r19, r19
    f648:	33 0f       	add	r19, r19
    f64a:	82 81       	ldd	r24, Z+2	; 0x02
    f64c:	93 81       	ldd	r25, Z+3	; 0x03
    f64e:	55 e0       	ldi	r21, 0x05	; 5
    f650:	88 0f       	add	r24, r24
    f652:	99 1f       	adc	r25, r25
    f654:	5a 95       	dec	r21
    f656:	e1 f7       	brne	.-8      	; 0xf650 <unix_time_to_fat+0x6a>
    f658:	82 2b       	or	r24, r18
    f65a:	93 2b       	or	r25, r19
    f65c:	20 81       	ld	r18, Z
    f65e:	31 81       	ldd	r19, Z+1	; 0x01
    f660:	36 95       	lsr	r19
    f662:	27 95       	ror	r18
    f664:	82 2b       	or	r24, r18
    f666:	93 2b       	or	r25, r19
    f668:	f8 01       	movw	r30, r16
    f66a:	91 83       	std	Z+1, r25	; 0x01
    f66c:	80 83       	st	Z, r24
    f66e:	24 96       	adiw	r28, 0x04	; 4
    f670:	e6 e0       	ldi	r30, 0x06	; 6
    f672:	0c 94 cc e8 	jmp	0x1d198	; 0x1d198 <__epilogue_restores__+0x18>

0000f676 <utime>:
    f676:	aa e1       	ldi	r26, 0x1A	; 26
    f678:	b1 e0       	ldi	r27, 0x01	; 1
    f67a:	e1 e4       	ldi	r30, 0x41	; 65
    f67c:	fb e7       	ldi	r31, 0x7B	; 123
    f67e:	0c 94 b2 e8 	jmp	0x1d164	; 0x1d164 <__prologue_saves__+0x1c>
    f682:	8c 01       	movw	r16, r24
    f684:	61 15       	cp	r22, r1
    f686:	71 05       	cpc	r23, r1
    f688:	31 f0       	breq	.+12     	; 0xf696 <utime+0x20>
    f68a:	fb 01       	movw	r30, r22
    f68c:	64 81       	ldd	r22, Z+4	; 0x04
    f68e:	75 81       	ldd	r23, Z+5	; 0x05
    f690:	86 81       	ldd	r24, Z+6	; 0x06
    f692:	97 81       	ldd	r25, Z+7	; 0x07
    f694:	04 c0       	rjmp	.+8      	; 0xf69e <utime+0x28>
    f696:	80 e0       	ldi	r24, 0x00	; 0
    f698:	90 e0       	ldi	r25, 0x00	; 0
    f69a:	0e 94 fe 38 	call	0x71fc	; 0x71fc <time>
    f69e:	9e 01       	movw	r18, r28
    f6a0:	29 5e       	subi	r18, 0xE9	; 233
    f6a2:	3e 4f       	sbci	r19, 0xFE	; 254
    f6a4:	ae 01       	movw	r20, r28
    f6a6:	47 5e       	subi	r20, 0xE7	; 231
    f6a8:	5e 4f       	sbci	r21, 0xFE	; 254
    f6aa:	9d df       	rcall	.-198    	; 0xf5e6 <unix_time_to_fat>
    f6ac:	c7 5e       	subi	r28, 0xE7	; 231
    f6ae:	de 4f       	sbci	r29, 0xFE	; 254
    f6b0:	88 81       	ld	r24, Y
    f6b2:	99 81       	ldd	r25, Y+1	; 0x01
    f6b4:	c9 51       	subi	r28, 0x19	; 25
    f6b6:	d1 40       	sbci	r29, 0x01	; 1
    f6b8:	9e 83       	std	Y+6, r25	; 0x06
    f6ba:	8d 83       	std	Y+5, r24	; 0x05
    f6bc:	c9 5e       	subi	r28, 0xE9	; 233
    f6be:	de 4f       	sbci	r29, 0xFE	; 254
    f6c0:	88 81       	ld	r24, Y
    f6c2:	99 81       	ldd	r25, Y+1	; 0x01
    f6c4:	c7 51       	subi	r28, 0x17	; 23
    f6c6:	d1 40       	sbci	r29, 0x01	; 1
    f6c8:	98 87       	std	Y+8, r25	; 0x08
    f6ca:	8f 83       	std	Y+7, r24	; 0x07
    f6cc:	be 01       	movw	r22, r28
    f6ce:	6f 5f       	subi	r22, 0xFF	; 255
    f6d0:	7f 4f       	sbci	r23, 0xFF	; 255
    f6d2:	c8 01       	movw	r24, r16
    f6d4:	0e 94 04 69 	call	0xd208	; 0xd208 <f_utime>
    f6d8:	84 31       	cpi	r24, 0x14	; 20
    f6da:	91 05       	cpc	r25, r1
    f6dc:	40 f4       	brcc	.+16     	; 0xf6ee <utime+0x78>
    f6de:	fc 01       	movw	r30, r24
    f6e0:	ec 56       	subi	r30, 0x6C	; 108
    f6e2:	f4 4f       	sbci	r31, 0xF4	; 244
    f6e4:	80 81       	ld	r24, Z
    f6e6:	08 2e       	mov	r0, r24
    f6e8:	00 0c       	add	r0, r0
    f6ea:	99 0b       	sbc	r25, r25
    f6ec:	02 c0       	rjmp	.+4      	; 0xf6f2 <utime+0x7c>
    f6ee:	83 e2       	ldi	r24, 0x23	; 35
    f6f0:	90 e0       	ldi	r25, 0x00	; 0
    f6f2:	c6 5e       	subi	r28, 0xE6	; 230
    f6f4:	de 4f       	sbci	r29, 0xFE	; 254
    f6f6:	e4 e0       	ldi	r30, 0x04	; 4
    f6f8:	0c 94 ce e8 	jmp	0x1d19c	; 0x1d19c <__epilogue_restores__+0x1c>

0000f6fc <fileno_to_fatfs>:
    f6fc:	83 30       	cpi	r24, 0x03	; 3
    f6fe:	91 05       	cpc	r25, r1
    f700:	48 f4       	brcc	.+18     	; 0xf714 <fileno_to_fatfs+0x18>
    f702:	89 e0       	ldi	r24, 0x09	; 9
    f704:	90 e0       	ldi	r25, 0x00	; 0
    f706:	90 93 be 1c 	sts	0x1CBE, r25	; 0x801cbe <errno+0x1>
    f70a:	80 93 bd 1c 	sts	0x1CBD, r24	; 0x801cbd <errno>
    f70e:	80 e0       	ldi	r24, 0x00	; 0
    f710:	90 e0       	ldi	r25, 0x00	; 0
    f712:	08 95       	ret
    f714:	60 dc       	rcall	.-1856   	; 0xefd6 <fileno_to_stream>
    f716:	00 97       	sbiw	r24, 0x00	; 0
    f718:	d1 f3       	breq	.-12     	; 0xf70e <fileno_to_fatfs+0x12>
    f71a:	fc 01       	movw	r30, r24
    f71c:	84 85       	ldd	r24, Z+12	; 0x0c
    f71e:	95 85       	ldd	r25, Z+13	; 0x0d
    f720:	00 97       	sbiw	r24, 0x00	; 0
    f722:	79 f3       	breq	.-34     	; 0xf702 <fileno_to_fatfs+0x6>
    f724:	08 95       	ret

0000f726 <ftell>:
    f726:	10 92 be 1c 	sts	0x1CBE, r1	; 0x801cbe <errno+0x1>
    f72a:	10 92 bd 1c 	sts	0x1CBD, r1	; 0x801cbd <errno>
    f72e:	37 dc       	rcall	.-1938   	; 0xef9e <fileno>
    f730:	83 30       	cpi	r24, 0x03	; 3
    f732:	91 05       	cpc	r25, r1
    f734:	48 f0       	brcs	.+18     	; 0xf748 <ftell+0x22>
    f736:	e2 df       	rcall	.-60     	; 0xf6fc <fileno_to_fatfs>
    f738:	00 97       	sbiw	r24, 0x00	; 0
    f73a:	51 f4       	brne	.+20     	; 0xf750 <ftell+0x2a>
    f73c:	89 e0       	ldi	r24, 0x09	; 9
    f73e:	90 e0       	ldi	r25, 0x00	; 0
    f740:	90 93 be 1c 	sts	0x1CBE, r25	; 0x801cbe <errno+0x1>
    f744:	80 93 bd 1c 	sts	0x1CBD, r24	; 0x801cbd <errno>
    f748:	6f ef       	ldi	r22, 0xFF	; 255
    f74a:	7f ef       	ldi	r23, 0xFF	; 255
    f74c:	cb 01       	movw	r24, r22
    f74e:	08 95       	ret
    f750:	fc 01       	movw	r30, r24
    f752:	60 89       	ldd	r22, Z+16	; 0x10
    f754:	71 89       	ldd	r23, Z+17	; 0x11
    f756:	82 89       	ldd	r24, Z+18	; 0x12
    f758:	93 89       	ldd	r25, Z+19	; 0x13
    f75a:	08 95       	ret

0000f75c <lseek>:
    f75c:	a3 e0       	ldi	r26, 0x03	; 3
    f75e:	b0 e0       	ldi	r27, 0x00	; 0
    f760:	e4 eb       	ldi	r30, 0xB4	; 180
    f762:	fb e7       	ldi	r31, 0x7B	; 123
    f764:	0c 94 ac e8 	jmp	0x1d158	; 0x1d158 <__prologue_saves__+0x10>
    f768:	5c 01       	movw	r10, r24
    f76a:	6a 01       	movw	r12, r20
    f76c:	7b 01       	movw	r14, r22
    f76e:	89 01       	movw	r16, r18
    f770:	10 92 be 1c 	sts	0x1CBE, r1	; 0x801cbe <errno+0x1>
    f774:	10 92 bd 1c 	sts	0x1CBD, r1	; 0x801cbd <errno>
    f778:	c1 df       	rcall	.-126    	; 0xf6fc <fileno_to_fatfs>
    f77a:	ec 01       	movw	r28, r24
    f77c:	89 2b       	or	r24, r25
    f77e:	19 f4       	brne	.+6      	; 0xf786 <lseek+0x2a>
    f780:	88 e1       	ldi	r24, 0x18	; 24
    f782:	90 e0       	ldi	r25, 0x00	; 0
    f784:	26 c0       	rjmp	.+76     	; 0xf7d2 <lseek+0x76>
    f786:	83 e0       	ldi	r24, 0x03	; 3
    f788:	a8 16       	cp	r10, r24
    f78a:	b1 04       	cpc	r11, r1
    f78c:	d0 f1       	brcs	.+116    	; 0xf802 <lseek+0xa6>
    f78e:	c5 01       	movw	r24, r10
    f790:	22 dc       	rcall	.-1980   	; 0xefd6 <fileno_to_stream>
    f792:	fc 01       	movw	r30, r24
    f794:	93 81       	ldd	r25, Z+3	; 0x03
    f796:	90 64       	ori	r25, 0x40	; 64
    f798:	93 83       	std	Z+3, r25	; 0x03
    f79a:	02 30       	cpi	r16, 0x02	; 2
    f79c:	11 05       	cpc	r17, r1
    f79e:	a9 f5       	brne	.+106    	; 0xf80a <lseek+0xae>
    f7a0:	8a 85       	ldd	r24, Y+10	; 0x0a
    f7a2:	9b 85       	ldd	r25, Y+11	; 0x0b
    f7a4:	ac 85       	ldd	r26, Y+12	; 0x0c
    f7a6:	bd 85       	ldd	r27, Y+13	; 0x0d
    f7a8:	c8 0e       	add	r12, r24
    f7aa:	d9 1e       	adc	r13, r25
    f7ac:	ea 1e       	adc	r14, r26
    f7ae:	fb 1e       	adc	r15, r27
    f7b0:	b7 01       	movw	r22, r14
    f7b2:	a6 01       	movw	r20, r12
    f7b4:	ce 01       	movw	r24, r28
    f7b6:	0e 94 68 61 	call	0xc2d0	; 0xc2d0 <f_lseek>
    f7ba:	00 97       	sbiw	r24, 0x00	; 0
    f7bc:	79 f0       	breq	.+30     	; 0xf7dc <lseek+0x80>
    f7be:	84 31       	cpi	r24, 0x14	; 20
    f7c0:	91 05       	cpc	r25, r1
    f7c2:	58 f5       	brcc	.+86     	; 0xf81a <lseek+0xbe>
    f7c4:	fc 01       	movw	r30, r24
    f7c6:	ec 56       	subi	r30, 0x6C	; 108
    f7c8:	f4 4f       	sbci	r31, 0xF4	; 244
    f7ca:	80 81       	ld	r24, Z
    f7cc:	08 2e       	mov	r0, r24
    f7ce:	00 0c       	add	r0, r0
    f7d0:	99 0b       	sbc	r25, r25
    f7d2:	90 93 be 1c 	sts	0x1CBE, r25	; 0x801cbe <errno+0x1>
    f7d6:	80 93 bd 1c 	sts	0x1CBD, r24	; 0x801cbd <errno>
    f7da:	13 c0       	rjmp	.+38     	; 0xf802 <lseek+0xa6>
    f7dc:	68 89       	ldd	r22, Y+16	; 0x10
    f7de:	79 89       	ldd	r23, Y+17	; 0x11
    f7e0:	8a 89       	ldd	r24, Y+18	; 0x12
    f7e2:	9b 89       	ldd	r25, Y+19	; 0x13
    f7e4:	c6 16       	cp	r12, r22
    f7e6:	d7 06       	cpc	r13, r23
    f7e8:	e8 06       	cpc	r14, r24
    f7ea:	f9 06       	cpc	r15, r25
    f7ec:	c9 f0       	breq	.+50     	; 0xf820 <lseek+0xc4>
    f7ee:	86 e9       	ldi	r24, 0x96	; 150
    f7f0:	9b e0       	ldi	r25, 0x0B	; 11
    f7f2:	a0 e0       	ldi	r26, 0x00	; 0
    f7f4:	ed b7       	in	r30, 0x3d	; 61
    f7f6:	fe b7       	in	r31, 0x3e	; 62
    f7f8:	81 83       	std	Z+1, r24	; 0x01
    f7fa:	92 83       	std	Z+2, r25	; 0x02
    f7fc:	a3 83       	std	Z+3, r26	; 0x03
    f7fe:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
    f802:	6f ef       	ldi	r22, 0xFF	; 255
    f804:	7f ef       	ldi	r23, 0xFF	; 255
    f806:	cb 01       	movw	r24, r22
    f808:	0b c0       	rjmp	.+22     	; 0xf820 <lseek+0xc4>
    f80a:	01 30       	cpi	r16, 0x01	; 1
    f80c:	11 05       	cpc	r17, r1
    f80e:	81 f6       	brne	.-96     	; 0xf7b0 <lseek+0x54>
    f810:	88 89       	ldd	r24, Y+16	; 0x10
    f812:	99 89       	ldd	r25, Y+17	; 0x11
    f814:	aa 89       	ldd	r26, Y+18	; 0x12
    f816:	bb 89       	ldd	r27, Y+19	; 0x13
    f818:	c7 cf       	rjmp	.-114    	; 0xf7a8 <lseek+0x4c>
    f81a:	83 e2       	ldi	r24, 0x23	; 35
    f81c:	90 e0       	ldi	r25, 0x00	; 0
    f81e:	d9 cf       	rjmp	.-78     	; 0xf7d2 <lseek+0x76>
    f820:	cd b7       	in	r28, 0x3d	; 61
    f822:	de b7       	in	r29, 0x3e	; 62
    f824:	23 96       	adiw	r28, 0x03	; 3
    f826:	ea e0       	ldi	r30, 0x0A	; 10
    f828:	0c 94 c8 e8 	jmp	0x1d190	; 0x1d190 <__epilogue_restores__+0x10>

0000f82c <fseek>:
    f82c:	cf 92       	push	r12
    f82e:	df 92       	push	r13
    f830:	ef 92       	push	r14
    f832:	ff 92       	push	r15
    f834:	cf 93       	push	r28
    f836:	df 93       	push	r29
    f838:	6a 01       	movw	r12, r20
    f83a:	7b 01       	movw	r14, r22
    f83c:	e9 01       	movw	r28, r18
    f83e:	af db       	rcall	.-2210   	; 0xef9e <fileno>
    f840:	97 fd       	sbrc	r25, 7
    f842:	12 c0       	rjmp	.+36     	; 0xf868 <fseek+0x3c>
    f844:	9e 01       	movw	r18, r28
    f846:	b7 01       	movw	r22, r14
    f848:	a6 01       	movw	r20, r12
    f84a:	88 df       	rcall	.-240    	; 0xf75c <lseek>
    f84c:	21 e0       	ldi	r18, 0x01	; 1
    f84e:	30 e0       	ldi	r19, 0x00	; 0
    f850:	6f 3f       	cpi	r22, 0xFF	; 255
    f852:	7f 4f       	sbci	r23, 0xFF	; 255
    f854:	8f 4f       	sbci	r24, 0xFF	; 255
    f856:	9f 4f       	sbci	r25, 0xFF	; 255
    f858:	11 f0       	breq	.+4      	; 0xf85e <fseek+0x32>
    f85a:	20 e0       	ldi	r18, 0x00	; 0
    f85c:	30 e0       	ldi	r19, 0x00	; 0
    f85e:	88 27       	eor	r24, r24
    f860:	99 27       	eor	r25, r25
    f862:	82 1b       	sub	r24, r18
    f864:	93 0b       	sbc	r25, r19
    f866:	02 c0       	rjmp	.+4      	; 0xf86c <fseek+0x40>
    f868:	8f ef       	ldi	r24, 0xFF	; 255
    f86a:	9f ef       	ldi	r25, 0xFF	; 255
    f86c:	df 91       	pop	r29
    f86e:	cf 91       	pop	r28
    f870:	ff 90       	pop	r15
    f872:	ef 90       	pop	r14
    f874:	df 90       	pop	r13
    f876:	cf 90       	pop	r12
    f878:	08 95       	ret

0000f87a <read>:
///
/// @return count on sucess.
/// @return -1 on error with errno set.
MEMSPACE
ssize_t read(int fd, const void *buf, size_t count)
{
    f87a:	a2 e0       	ldi	r26, 0x02	; 2
    f87c:	b0 e0       	ldi	r27, 0x00	; 0
    f87e:	e3 e4       	ldi	r30, 0x43	; 67
    f880:	fc e7       	ldi	r31, 0x7C	; 124
    f882:	0c 94 ac e8 	jmp	0x1d158	; 0x1d158 <__prologue_saves__+0x10>
    f886:	5c 01       	movw	r10, r24
    f888:	8b 01       	movw	r16, r22
    f88a:	6a 01       	movw	r12, r20
    int ret;
    FIL *fh;
    FILE *stream;

//FIXME
    *(char *) buf = 0;
    f88c:	fb 01       	movw	r30, r22
    f88e:	10 82       	st	Z, r1

    errno = 0;
    f890:	10 92 be 1c 	sts	0x1CBE, r1	; 0x801cbe <errno+0x1>
    f894:	10 92 bd 1c 	sts	0x1CBD, r1	; 0x801cbd <errno>

// TTY read function
// FIXME should we really be blocking ???
    stream = fileno_to_stream(fd);
    f898:	9e db       	rcall	.-2244   	; 0xefd6 <fileno_to_stream>
    f89a:	7c 01       	movw	r14, r24
    if(stream == stdin)
    f89c:	80 91 bf 1c 	lds	r24, 0x1CBF	; 0x801cbf <__iob>
    f8a0:	90 91 c0 1c 	lds	r25, 0x1CC0	; 0x801cc0 <__iob+0x1>
    f8a4:	e8 16       	cp	r14, r24
    f8a6:	f9 06       	cpc	r15, r25
    f8a8:	c9 f4       	brne	.+50     	; 0xf8dc <read+0x62>
    {
        char *ptr = (char *) buf;
// ungetc is undefined for read
        stream->flags |= __SUNGET;
    f8aa:	f7 01       	movw	r30, r14
    f8ac:	83 81       	ldd	r24, Z+3	; 0x03
    f8ae:	80 64       	ori	r24, 0x40	; 64
    f8b0:	83 83       	std	Z+3, r24	; 0x03
        size = 0;
    f8b2:	1a 82       	std	Y+2, r1	; 0x02
    f8b4:	19 82       	std	Y+1, r1	; 0x01
    f8b6:	c0 0e       	add	r12, r16
    f8b8:	d1 1e       	adc	r13, r17
        while(count--)
    f8ba:	0c 15       	cp	r16, r12
    f8bc:	1d 05       	cpc	r17, r13
    f8be:	09 f4       	brne	.+2      	; 0xf8c2 <read+0x48>
    f8c0:	3d c0       	rjmp	.+122    	; 0xf93c <read+0xc2>
        {
            ret = fgetc(stream);
    f8c2:	c7 01       	movw	r24, r14
    f8c4:	48 da       	rcall	.-2928   	; 0xed56 <fgetc>
            if(ret < 0)
    f8c6:	97 fd       	sbrc	r25, 7
    f8c8:	39 c0       	rjmp	.+114    	; 0xf93c <read+0xc2>
                break;

            *ptr++ = ret;
    f8ca:	f8 01       	movw	r30, r16
    f8cc:	81 93       	st	Z+, r24
    f8ce:	8f 01       	movw	r16, r30
            ++size;
    f8d0:	89 81       	ldd	r24, Y+1	; 0x01
    f8d2:	9a 81       	ldd	r25, Y+2	; 0x02
    f8d4:	01 96       	adiw	r24, 0x01	; 1
    f8d6:	9a 83       	std	Y+2, r25	; 0x02
    f8d8:	89 83       	std	Y+1, r24	; 0x01
    f8da:	ef cf       	rjmp	.-34     	; 0xf8ba <read+0x40>
        }
        return(size);
    }
    if(stream == stdout || stream == stderr)
    f8dc:	80 91 c1 1c 	lds	r24, 0x1CC1	; 0x801cc1 <__iob+0x2>
    f8e0:	90 91 c2 1c 	lds	r25, 0x1CC2	; 0x801cc2 <__iob+0x3>
    f8e4:	e8 16       	cp	r14, r24
    f8e6:	f9 06       	cpc	r15, r25
    f8e8:	71 f1       	breq	.+92     	; 0xf946 <read+0xcc>
    f8ea:	80 91 c3 1c 	lds	r24, 0x1CC3	; 0x801cc3 <__iob+0x4>
    f8ee:	90 91 c4 1c 	lds	r25, 0x1CC4	; 0x801cc4 <__iob+0x5>
    f8f2:	e8 16       	cp	r14, r24
    f8f4:	f9 06       	cpc	r15, r25
    {
        return(-1);
    }

// fileno_to_fatfs checks for fd out of bounds
    fh = fileno_to_fatfs(fd);
    f8f6:	39 f1       	breq	.+78     	; 0xf946 <read+0xcc>
    f8f8:	c5 01       	movw	r24, r10
    f8fa:	00 df       	rcall	.-512    	; 0xf6fc <fileno_to_fatfs>
    if ( fh == NULL )
    f8fc:	00 97       	sbiw	r24, 0x00	; 0
    f8fe:	19 f4       	brne	.+6      	; 0xf906 <read+0x8c>
    {
        errno = EBADF;
    f900:	89 e0       	ldi	r24, 0x09	; 9
    f902:	90 e0       	ldi	r25, 0x00	; 0
    f904:	16 c0       	rjmp	.+44     	; 0xf932 <read+0xb8>
        return(-1);
    }

    res = f_read(fh, (void *) buf, bytes, &size);
    f906:	9e 01       	movw	r18, r28
    f908:	2f 5f       	subi	r18, 0xFF	; 255
    f90a:	3f 4f       	sbci	r19, 0xFF	; 255
    f90c:	a6 01       	movw	r20, r12
    f90e:	b8 01       	movw	r22, r16
    f910:	0e 94 5c 5c 	call	0xb8b8	; 0xb8b8 <f_read>
    if(res != FR_OK)
    f914:	00 97       	sbiw	r24, 0x00	; 0
    f916:	91 f0       	breq	.+36     	; 0xf93c <read+0xc2>
    f918:	84 31       	cpi	r24, 0x14	; 20
    f91a:	91 05       	cpc	r25, r1
    f91c:	40 f4       	brcc	.+16     	; 0xf92e <read+0xb4>
    f91e:	fc 01       	movw	r30, r24
    f920:	ec 56       	subi	r30, 0x6C	; 108
    f922:	f4 4f       	sbci	r31, 0xF4	; 244
    f924:	80 81       	ld	r24, Z
    f926:	08 2e       	mov	r0, r24
    f928:	00 0c       	add	r0, r0
    f92a:	99 0b       	sbc	r25, r25
    f92c:	02 c0       	rjmp	.+4      	; 0xf932 <read+0xb8>
    f92e:	83 e2       	ldi	r24, 0x23	; 35
    f930:	90 e0       	ldi	r25, 0x00	; 0
    {
        errno = fatfs_to_errno(res);
    f932:	90 93 be 1c 	sts	0x1CBE, r25	; 0x801cbe <errno+0x1>
    f936:	80 93 bd 1c 	sts	0x1CBD, r24	; 0x801cbd <errno>
    f93a:	05 c0       	rjmp	.+10     	; 0xf946 <read+0xcc>
        return(-1);
    }
    return ((ssize_t) size);
    f93c:	69 81       	ldd	r22, Y+1	; 0x01
    f93e:	7a 81       	ldd	r23, Y+2	; 0x02
    f940:	80 e0       	ldi	r24, 0x00	; 0
    f942:	90 e0       	ldi	r25, 0x00	; 0
    f944:	03 c0       	rjmp	.+6      	; 0xf94c <read+0xd2>
        }
        return(size);
    }
    if(stream == stdout || stream == stderr)
    {
        return(-1);
    f946:	6f ef       	ldi	r22, 0xFF	; 255
    f948:	7f ef       	ldi	r23, 0xFF	; 255
    f94a:	cb 01       	movw	r24, r22
    {
        errno = fatfs_to_errno(res);
        return(-1);
    }
    return ((ssize_t) size);
}
    f94c:	22 96       	adiw	r28, 0x02	; 2
    f94e:	ea e0       	ldi	r30, 0x0A	; 10
    f950:	0c 94 c8 e8 	jmp	0x1d190	; 0x1d190 <__epilogue_restores__+0x10>

0000f954 <fread>:
///
/// @return count on sucess.
/// @return 0 or < size on error with errno set.
MEMSPACE
size_t fread(void *ptr, size_t size, size_t nmemb, FILE *stream)
{
    f954:	0f 93       	push	r16
    f956:	1f 93       	push	r17
    f958:	cf 93       	push	r28
    f95a:	df 93       	push	r29
    f95c:	ec 01       	movw	r28, r24
    f95e:	c9 01       	movw	r24, r18
    size_t count = size * nmemb;
    f960:	64 9f       	mul	r22, r20
    f962:	80 01       	movw	r16, r0
    f964:	65 9f       	mul	r22, r21
    f966:	10 0d       	add	r17, r0
    f968:	74 9f       	mul	r23, r20
    f96a:	10 0d       	add	r17, r0
    f96c:	11 24       	eor	r1, r1
    int fn = fileno(stream);
    f96e:	17 db       	rcall	.-2514   	; 0xef9e <fileno>
    ssize_t ret;

// read() checks for fn out of bounds
    ret = read(fn, ptr, count);
    f970:	a8 01       	movw	r20, r16
    f972:	be 01       	movw	r22, r28
    f974:	82 df       	rcall	.-252    	; 0xf87a <read>
    if(ret < 0)
    f976:	97 fd       	sbrc	r25, 7
    f978:	02 c0       	rjmp	.+4      	; 0xf97e <fread+0x2a>
        return(0);

    return((size_t) ret);
    f97a:	cb 01       	movw	r24, r22
    f97c:	02 c0       	rjmp	.+4      	; 0xf982 <fread+0x2e>
    ssize_t ret;

// read() checks for fn out of bounds
    ret = read(fn, ptr, count);
    if(ret < 0)
        return(0);
    f97e:	80 e0       	ldi	r24, 0x00	; 0
    f980:	90 e0       	ldi	r25, 0x00	; 0

    return((size_t) ret);
}
    f982:	df 91       	pop	r29
    f984:	cf 91       	pop	r28
    f986:	1f 91       	pop	r17
    f988:	0f 91       	pop	r16
    f98a:	08 95       	ret

0000f98c <syncfs>:
/// @param[in] fd: POSIX fileno to sync.
/// @return 0.
/// @return -1 on error witrh errno set.
MEMSPACE
int syncfs(int fd)
{
    f98c:	cf 93       	push	r28
    f98e:	df 93       	push	r29
    FIL *fh;
    FRESULT res;
    FILE *stream;

    errno = 0;
    f990:	10 92 be 1c 	sts	0x1CBE, r1	; 0x801cbe <errno+0x1>
    f994:	10 92 bd 1c 	sts	0x1CBD, r1	; 0x801cbd <errno>
/// @return 0 if POSIX fileno is NOT a Serial TTY.
MEMSPACE
int isatty(int fileno)
{
/// @todo  Perhaps we should verify console functions have been added ?
    if(fileno >= 0 && fileno <= 2)
    f998:	83 30       	cpi	r24, 0x03	; 3
    f99a:	91 05       	cpc	r25, r1
    f99c:	18 f4       	brcc	.+6      	; 0xf9a4 <syncfs+0x18>

// fileno_to_fatfs checks for fd out of bounds
    fh = fileno_to_fatfs(fd);
    if(fh == NULL)
    {
        errno = EBADF;
    f99e:	89 e0       	ldi	r24, 0x09	; 9
    f9a0:	90 e0       	ldi	r25, 0x00	; 0
    f9a2:	18 c0       	rjmp	.+48     	; 0xf9d4 <syncfs+0x48>
    f9a4:	ec 01       	movw	r28, r24
    if(isatty(fd))
    {
        errno = EBADF;
        return(-1);
    }
    stream = fileno_to_stream(fd);
    f9a6:	17 db       	rcall	.-2514   	; 0xefd6 <fileno_to_stream>
    f9a8:	fc 01       	movw	r30, r24
// reset unget on sync
    stream->flags |= __SUNGET;
    f9aa:	93 81       	ldd	r25, Z+3	; 0x03
    f9ac:	90 64       	ori	r25, 0x40	; 64
    f9ae:	93 83       	std	Z+3, r25	; 0x03

// fileno_to_fatfs checks for fd out of bounds
    fh = fileno_to_fatfs(fd);
    f9b0:	ce 01       	movw	r24, r28
    f9b2:	a4 de       	rcall	.-696    	; 0xf6fc <fileno_to_fatfs>
    if(fh == NULL)
    f9b4:	00 97       	sbiw	r24, 0x00	; 0
    f9b6:	99 f3       	breq	.-26     	; 0xf99e <syncfs+0x12>
    {
        errno = EBADF;
        return(-1);
    }

    res  = f_sync ( fh );
    f9b8:	0e 94 3e 5f 	call	0xbe7c	; 0xbe7c <f_sync>
    if (res != FR_OK)
    f9bc:	00 97       	sbiw	r24, 0x00	; 0
    f9be:	a1 f0       	breq	.+40     	; 0xf9e8 <syncfs+0x5c>
    f9c0:	84 31       	cpi	r24, 0x14	; 20
    f9c2:	91 05       	cpc	r25, r1
    f9c4:	70 f4       	brcc	.+28     	; 0xf9e2 <syncfs+0x56>
    f9c6:	fc 01       	movw	r30, r24
    f9c8:	ec 56       	subi	r30, 0x6C	; 108
    f9ca:	f4 4f       	sbci	r31, 0xF4	; 244
    f9cc:	80 81       	ld	r24, Z
    f9ce:	08 2e       	mov	r0, r24
    f9d0:	00 0c       	add	r0, r0
    f9d2:	99 0b       	sbc	r25, r25
    {
        errno = fatfs_to_errno(res);
    f9d4:	90 93 be 1c 	sts	0x1CBE, r25	; 0x801cbe <errno+0x1>
    f9d8:	80 93 bd 1c 	sts	0x1CBD, r24	; 0x801cbd <errno>
        return(-1);
    f9dc:	8f ef       	ldi	r24, 0xFF	; 255
    f9de:	9f ef       	ldi	r25, 0xFF	; 255
    f9e0:	05 c0       	rjmp	.+10     	; 0xf9ec <syncfs+0x60>
        errno = EBADF;
        return(-1);
    }

    res  = f_sync ( fh );
    if (res != FR_OK)
    f9e2:	83 e2       	ldi	r24, 0x23	; 35
    f9e4:	90 e0       	ldi	r25, 0x00	; 0
    f9e6:	f6 cf       	rjmp	.-20     	; 0xf9d4 <syncfs+0x48>
    {
        errno = fatfs_to_errno(res);
        return(-1);
    }
    return(0);
    f9e8:	80 e0       	ldi	r24, 0x00	; 0
    f9ea:	90 e0       	ldi	r25, 0x00	; 0
}
    f9ec:	df 91       	pop	r29
    f9ee:	cf 91       	pop	r28
    f9f0:	08 95       	ret

0000f9f2 <sync>:
/// - man page sync (2).
///
/// @return  void.
MEMSPACE
void sync(void)
{
    f9f2:	cf 93       	push	r28
    f9f4:	df 93       	push	r29
    FIL *fh;
    int i;

    for(i=0;i<MAX_FILES;++i)
    f9f6:	c0 e0       	ldi	r28, 0x00	; 0
    f9f8:	d0 e0       	ldi	r29, 0x00	; 0
    f9fa:	21 96       	adiw	r28, 0x01	; 1
    f9fc:	c0 31       	cpi	r28, 0x10	; 16
    f9fe:	d1 05       	cpc	r29, r1
    fa00:	51 f0       	breq	.+20     	; 0xfa16 <sync+0x24>
/// @return 0 if POSIX fileno is NOT a Serial TTY.
MEMSPACE
int isatty(int fileno)
{
/// @todo  Perhaps we should verify console functions have been added ?
    if(fileno >= 0 && fileno <= 2)
    fa02:	c3 30       	cpi	r28, 0x03	; 3
    fa04:	d1 05       	cpc	r29, r1
    fa06:	cc f3       	brlt	.-14     	; 0xf9fa <sync+0x8>
    {
        if(isatty(i))
            continue;

// fileno_to_fatfs checks for i out of bounds
        fh = fileno_to_fatfs(i);
    fa08:	ce 01       	movw	r24, r28
    fa0a:	78 de       	rcall	.-784    	; 0xf6fc <fileno_to_fatfs>
        if(fh == NULL)
    fa0c:	89 2b       	or	r24, r25
    fa0e:	a9 f3       	breq	.-22     	; 0xf9fa <sync+0x8>
            continue;

        (void ) syncfs(i);
    fa10:	ce 01       	movw	r24, r28
    fa12:	bc df       	rcall	.-136    	; 0xf98c <syncfs>
    fa14:	f2 cf       	rjmp	.-28     	; 0xf9fa <sync+0x8>
    }
}
    fa16:	df 91       	pop	r29
    fa18:	cf 91       	pop	r28
    fa1a:	08 95       	ret

0000fa1c <write>:
/// @param[in] count: number of bytes to write.
/// @return count on sucess.
/// @return -1 on error with errno set.
MEMSPACE
ssize_t write(int fd, const void *buf, size_t count)
{
    fa1c:	a2 e0       	ldi	r26, 0x02	; 2
    fa1e:	b0 e0       	ldi	r27, 0x00	; 0
    fa20:	e4 e1       	ldi	r30, 0x14	; 20
    fa22:	fd e7       	ldi	r31, 0x7D	; 125
    fa24:	0c 94 aa e8 	jmp	0x1d154	; 0x1d154 <__prologue_saves__+0xc>
    fa28:	8c 01       	movw	r16, r24
    fa2a:	b6 2e       	mov	r11, r22
    fa2c:	f7 2e       	mov	r15, r23
    fa2e:	4a 01       	movw	r8, r20
    UINT size;
    UINT bytes = count;
    FRESULT res;
    FIL *fh;
    FILE *stream;
    errno = 0;
    fa30:	10 92 be 1c 	sts	0x1CBE, r1	; 0x801cbe <errno+0x1>
    fa34:	10 92 bd 1c 	sts	0x1CBD, r1	; 0x801cbd <errno>

// TTY read function
    stream = fileno_to_stream(fd);
    fa38:	ce da       	rcall	.-2660   	; 0xefd6 <fileno_to_stream>
    fa3a:	6c 01       	movw	r12, r24
    if(stream == stdout || stream == stderr)
    fa3c:	80 91 c1 1c 	lds	r24, 0x1CC1	; 0x801cc1 <__iob+0x2>
    fa40:	90 91 c2 1c 	lds	r25, 0x1CC2	; 0x801cc2 <__iob+0x3>
    fa44:	c8 16       	cp	r12, r24
    fa46:	d9 06       	cpc	r13, r25
    fa48:	39 f0       	breq	.+14     	; 0xfa58 <write+0x3c>
    fa4a:	80 91 c3 1c 	lds	r24, 0x1CC3	; 0x801cc3 <__iob+0x4>
    fa4e:	90 91 c4 1c 	lds	r25, 0x1CC4	; 0x801cc4 <__iob+0x5>
    fa52:	c8 16       	cp	r12, r24
    fa54:	d9 06       	cpc	r13, r25
    fa56:	d1 f4       	brne	.+52     	; 0xfa8c <write+0x70>
    {
        char *ptr = (char *) buf;
        size = 0;
    fa58:	1a 82       	std	Y+2, r1	; 0x02
    fa5a:	19 82       	std	Y+1, r1	; 0x01
    fa5c:	0b 2d       	mov	r16, r11
    fa5e:	1f 2d       	mov	r17, r15
    fa60:	78 01       	movw	r14, r16
    fa62:	e8 0c       	add	r14, r8
    fa64:	f9 1c       	adc	r15, r9
        while(count--)
    fa66:	0e 15       	cp	r16, r14
    fa68:	1f 05       	cpc	r17, r15
    fa6a:	d1 f1       	breq	.+116    	; 0xfae0 <write+0xc4>
        {
            int c,ret;
            c = *ptr++;
    fa6c:	f8 01       	movw	r30, r16
    fa6e:	a1 90       	ld	r10, Z+
    fa70:	8f 01       	movw	r16, r30
    fa72:	b1 2c       	mov	r11, r1
            ret = fputc(c, stream);
    fa74:	b6 01       	movw	r22, r12
    fa76:	c5 01       	movw	r24, r10
    fa78:	c4 d9       	rcall	.-3192   	; 0xee02 <fputc>
            if(c != ret)
    fa7a:	a8 16       	cp	r10, r24
    fa7c:	b9 06       	cpc	r11, r25
    fa7e:	81 f5       	brne	.+96     	; 0xfae0 <write+0xc4>
                break;

            ++size;
    fa80:	89 81       	ldd	r24, Y+1	; 0x01
    fa82:	9a 81       	ldd	r25, Y+2	; 0x02
    fa84:	01 96       	adiw	r24, 0x01	; 1
    fa86:	9a 83       	std	Y+2, r25	; 0x02
    fa88:	89 83       	std	Y+1, r24	; 0x01
    fa8a:	ed cf       	rjmp	.-38     	; 0xfa66 <write+0x4a>
        }
        return(size);
    }
    if(stream == stdin)
    fa8c:	80 91 bf 1c 	lds	r24, 0x1CBF	; 0x801cbf <__iob>
    fa90:	90 91 c0 1c 	lds	r25, 0x1CC0	; 0x801cc0 <__iob+0x1>
    fa94:	c8 16       	cp	r12, r24
    fa96:	d9 06       	cpc	r13, r25
    {
        return(-1);
    }

// fileno_to_fatfs checks for fd out of bounds
    fh = fileno_to_fatfs(fd);
    fa98:	41 f1       	breq	.+80     	; 0xfaea <write+0xce>
    fa9a:	c8 01       	movw	r24, r16
    fa9c:	2f de       	rcall	.-930    	; 0xf6fc <fileno_to_fatfs>
    if ( fh == NULL )
    fa9e:	00 97       	sbiw	r24, 0x00	; 0
    faa0:	19 f4       	brne	.+6      	; 0xfaa8 <write+0x8c>
    {
        errno = EBADF;
    faa2:	89 e0       	ldi	r24, 0x09	; 9
    faa4:	90 e0       	ldi	r25, 0x00	; 0
    faa6:	17 c0       	rjmp	.+46     	; 0xfad6 <write+0xba>
        return(-1);
    }

    res = f_write(fh, buf, bytes, &size);
    faa8:	9e 01       	movw	r18, r28
    faaa:	2f 5f       	subi	r18, 0xFF	; 255
    faac:	3f 4f       	sbci	r19, 0xFF	; 255
    faae:	a4 01       	movw	r20, r8
    fab0:	6b 2d       	mov	r22, r11
    fab2:	7f 2d       	mov	r23, r15
    fab4:	0e 94 a7 5d 	call	0xbb4e	; 0xbb4e <f_write>
    if(res != FR_OK)
    fab8:	00 97       	sbiw	r24, 0x00	; 0
    faba:	91 f0       	breq	.+36     	; 0xfae0 <write+0xc4>
    fabc:	84 31       	cpi	r24, 0x14	; 20
    fabe:	91 05       	cpc	r25, r1
    fac0:	40 f4       	brcc	.+16     	; 0xfad2 <write+0xb6>
    fac2:	fc 01       	movw	r30, r24
    fac4:	ec 56       	subi	r30, 0x6C	; 108
    fac6:	f4 4f       	sbci	r31, 0xF4	; 244
    fac8:	80 81       	ld	r24, Z
    faca:	08 2e       	mov	r0, r24
    facc:	00 0c       	add	r0, r0
    face:	99 0b       	sbc	r25, r25
    fad0:	02 c0       	rjmp	.+4      	; 0xfad6 <write+0xba>
    fad2:	83 e2       	ldi	r24, 0x23	; 35
    fad4:	90 e0       	ldi	r25, 0x00	; 0
    {
        errno = fatfs_to_errno(res);
    fad6:	90 93 be 1c 	sts	0x1CBE, r25	; 0x801cbe <errno+0x1>
    fada:	80 93 bd 1c 	sts	0x1CBD, r24	; 0x801cbd <errno>
    fade:	05 c0       	rjmp	.+10     	; 0xfaea <write+0xce>
        return(-1);
    }
    return ((ssize_t) size);
    fae0:	69 81       	ldd	r22, Y+1	; 0x01
    fae2:	7a 81       	ldd	r23, Y+2	; 0x02
    fae4:	80 e0       	ldi	r24, 0x00	; 0
    fae6:	90 e0       	ldi	r25, 0x00	; 0
    fae8:	03 c0       	rjmp	.+6      	; 0xfaf0 <write+0xd4>
        }
        return(size);
    }
    if(stream == stdin)
    {
        return(-1);
    faea:	6f ef       	ldi	r22, 0xFF	; 255
    faec:	7f ef       	ldi	r23, 0xFF	; 255
    faee:	cb 01       	movw	r24, r22
    {
        errno = fatfs_to_errno(res);
        return(-1);
    }
    return ((ssize_t) size);
}
    faf0:	22 96       	adiw	r28, 0x02	; 2
    faf2:	ec e0       	ldi	r30, 0x0C	; 12
    faf4:	0c 94 c6 e8 	jmp	0x1d18c	; 0x1d18c <__epilogue_restores__+0xc>

0000faf8 <fwrite>:
///
/// @return count written on sucess.
/// @return 0 or < size on error with errno set.
MEMSPACE
size_t fwrite(const void *ptr, size_t size, size_t nmemb, FILE *stream)
{
    faf8:	0f 93       	push	r16
    fafa:	1f 93       	push	r17
    fafc:	cf 93       	push	r28
    fafe:	df 93       	push	r29
    fb00:	ec 01       	movw	r28, r24
    fb02:	c9 01       	movw	r24, r18
    size_t count = size * nmemb;
    fb04:	64 9f       	mul	r22, r20
    fb06:	80 01       	movw	r16, r0
    fb08:	65 9f       	mul	r22, r21
    fb0a:	10 0d       	add	r17, r0
    fb0c:	74 9f       	mul	r23, r20
    fb0e:	10 0d       	add	r17, r0
    fb10:	11 24       	eor	r1, r1
    int fn = fileno(stream);
    fb12:	45 da       	rcall	.-2934   	; 0xef9e <fileno>
    ssize_t ret;

// write () checks for fn out of bounds
    ret =  write(fn, ptr, count);
    fb14:	a8 01       	movw	r20, r16
    fb16:	be 01       	movw	r22, r28
    fb18:	81 df       	rcall	.-254    	; 0xfa1c <write>

    if(ret < 0)
    fb1a:	97 fd       	sbrc	r25, 7
    fb1c:	02 c0       	rjmp	.+4      	; 0xfb22 <fwrite+0x2a>
        return(0);

    return((size_t) ret);
    fb1e:	cb 01       	movw	r24, r22
    fb20:	02 c0       	rjmp	.+4      	; 0xfb26 <fwrite+0x2e>

// write () checks for fn out of bounds
    ret =  write(fn, ptr, count);

    if(ret < 0)
        return(0);
    fb22:	80 e0       	ldi	r24, 0x00	; 0
    fb24:	90 e0       	ldi	r25, 0x00	; 0

    return((size_t) ret);
}
    fb26:	df 91       	pop	r29
    fb28:	cf 91       	pop	r28
    fb2a:	1f 91       	pop	r17
    fb2c:	0f 91       	pop	r16
    fb2e:	08 95       	ret

0000fb30 <free_file_descriptor>:
///
/// @return fileno on success.
/// @return -1 on failure.
MEMSPACE
int free_file_descriptor(int fileno)
{
    fb30:	0f 93       	push	r16
    fb32:	1f 93       	push	r17
    fb34:	cf 93       	push	r28
    fb36:	df 93       	push	r29
/// @return 0 if POSIX fileno is NOT a Serial TTY.
MEMSPACE
int isatty(int fileno)
{
/// @todo  Perhaps we should verify console functions have been added ?
    if(fileno >= 0 && fileno <= 2)
    fb38:	83 30       	cpi	r24, 0x03	; 3
    fb3a:	91 05       	cpc	r25, r1
    fb3c:	48 f4       	brcc	.+18     	; 0xfb50 <free_file_descriptor+0x20>
    FILE *stream;
    FIL *fh;

    if(isatty( fileno ))
    {
        errno = EBADF;
    fb3e:	89 e0       	ldi	r24, 0x09	; 9
    fb40:	90 e0       	ldi	r25, 0x00	; 0
    fb42:	90 93 be 1c 	sts	0x1CBE, r25	; 0x801cbe <errno+0x1>
    fb46:	80 93 bd 1c 	sts	0x1CBD, r24	; 0x801cbd <errno>
        return(-1);
    fb4a:	8f ef       	ldi	r24, 0xFF	; 255
    fb4c:	9f ef       	ldi	r25, 0xFF	; 255
    fb4e:	20 c0       	rjmp	.+64     	; 0xfb90 <free_file_descriptor+0x60>
    fb50:	ec 01       	movw	r28, r24
    }

// checks if fileno out of bounds
    stream = fileno_to_stream(fileno);
    fb52:	41 da       	rcall	.-2942   	; 0xefd6 <fileno_to_stream>
    fb54:	8c 01       	movw	r16, r24
    if(stream == NULL)
    fb56:	89 2b       	or	r24, r25
    fb58:	c1 f3       	breq	.-16     	; 0xfb4a <free_file_descriptor+0x1a>
    {
        return(-1);
    }

    fh = fdev_get_udata(stream);
    fb5a:	f8 01       	movw	r30, r16
    fb5c:	84 85       	ldd	r24, Z+12	; 0x0c
    fb5e:	95 85       	ldd	r25, Z+13	; 0x0d

    if(fh != NULL)
    fb60:	00 97       	sbiw	r24, 0x00	; 0
    fb62:	11 f0       	breq	.+4      	; 0xfb68 <free_file_descriptor+0x38>
    {
        safefree(fh);
    fb64:	0e 94 74 28 	call	0x50e8	; 0x50e8 <safefree>
    }

    if(stream->buf != NULL && stream->flags & __SMALLOC)
    fb68:	f8 01       	movw	r30, r16
    fb6a:	80 81       	ld	r24, Z
    fb6c:	91 81       	ldd	r25, Z+1	; 0x01
    fb6e:	00 97       	sbiw	r24, 0x00	; 0
    fb70:	21 f0       	breq	.+8      	; 0xfb7a <free_file_descriptor+0x4a>
    fb72:	23 81       	ldd	r18, Z+3	; 0x03
    fb74:	27 fd       	sbrc	r18, 7
    {
        safefree(stream->buf);
    fb76:	0e 94 74 28 	call	0x50e8	; 0x50e8 <safefree>
    }

    __iob[fileno]  = NULL;
    fb7a:	fe 01       	movw	r30, r28
    fb7c:	ee 0f       	add	r30, r30
    fb7e:	ff 1f       	adc	r31, r31
    fb80:	e1 54       	subi	r30, 0x41	; 65
    fb82:	f3 4e       	sbci	r31, 0xE3	; 227
    fb84:	11 82       	std	Z+1, r1	; 0x01
    fb86:	10 82       	st	Z, r1
    safefree(stream);
    fb88:	c8 01       	movw	r24, r16
    fb8a:	0e 94 74 28 	call	0x50e8	; 0x50e8 <safefree>
    return(fileno);
    fb8e:	ce 01       	movw	r24, r28
}
    fb90:	df 91       	pop	r29
    fb92:	cf 91       	pop	r28
    fb94:	1f 91       	pop	r17
    fb96:	0f 91       	pop	r16
    fb98:	08 95       	ret

0000fb9a <close>:
///
/// @return 0 on sucess.
/// @return -1 on error with errno set.
MEMSPACE
int close(int fileno)
{
    fb9a:	0f 93       	push	r16
    fb9c:	1f 93       	push	r17
    fb9e:	cf 93       	push	r28
    fba0:	df 93       	push	r29
    fba2:	8c 01       	movw	r16, r24
    FILE *stream;
    FIL *fh;
    int res;

    errno = 0;
    fba4:	10 92 be 1c 	sts	0x1CBE, r1	; 0x801cbe <errno+0x1>
    fba8:	10 92 bd 1c 	sts	0x1CBD, r1	; 0x801cbd <errno>

// checks if fileno out of bounds
    stream = fileno_to_stream(fileno);
    fbac:	14 da       	rcall	.-3032   	; 0xefd6 <fileno_to_stream>
    if(stream == NULL)
    fbae:	89 2b       	or	r24, r25
    fbb0:	d9 f0       	breq	.+54     	; 0xfbe8 <close+0x4e>
    {
        return(-1);
    }

// fileno_to_fatfs checks for fileno out of bounds
    fh = fileno_to_fatfs(fileno);
    fbb2:	c8 01       	movw	r24, r16
    fbb4:	a3 dd       	rcall	.-1210   	; 0xf6fc <fileno_to_fatfs>
    if(fh == NULL)
    fbb6:	00 97       	sbiw	r24, 0x00	; 0
    fbb8:	b9 f0       	breq	.+46     	; 0xfbe8 <close+0x4e>
    {
        return(-1);
    }
    res = f_close(fh);
    fbba:	0e 94 be 5f 	call	0xbf7c	; 0xbf7c <f_close>
    free_file_descriptor(fileno);
    fbbe:	ec 01       	movw	r28, r24
    fbc0:	c8 01       	movw	r24, r16
    fbc2:	b6 df       	rcall	.-148    	; 0xfb30 <free_file_descriptor>
    if (res != FR_OK)
    fbc4:	20 97       	sbiw	r28, 0x00	; 0
    fbc6:	99 f0       	breq	.+38     	; 0xfbee <close+0x54>
    fbc8:	c4 31       	cpi	r28, 0x14	; 20
    fbca:	d1 05       	cpc	r29, r1
    fbcc:	38 f4       	brcc	.+14     	; 0xfbdc <close+0x42>
    fbce:	cc 56       	subi	r28, 0x6C	; 108
    fbd0:	d4 4f       	sbci	r29, 0xF4	; 244
    fbd2:	88 81       	ld	r24, Y
    fbd4:	08 2e       	mov	r0, r24
    fbd6:	00 0c       	add	r0, r0
    fbd8:	99 0b       	sbc	r25, r25
    fbda:	02 c0       	rjmp	.+4      	; 0xfbe0 <close+0x46>
    fbdc:	83 e2       	ldi	r24, 0x23	; 35
    fbde:	90 e0       	ldi	r25, 0x00	; 0
    {
        errno = fatfs_to_errno(res);
    fbe0:	90 93 be 1c 	sts	0x1CBE, r25	; 0x801cbe <errno+0x1>
    fbe4:	80 93 bd 1c 	sts	0x1CBD, r24	; 0x801cbd <errno>
        return(-1);
    fbe8:	8f ef       	ldi	r24, 0xFF	; 255
    fbea:	9f ef       	ldi	r25, 0xFF	; 255
    fbec:	02 c0       	rjmp	.+4      	; 0xfbf2 <close+0x58>
    }
    return(0);
    fbee:	80 e0       	ldi	r24, 0x00	; 0
    fbf0:	90 e0       	ldi	r25, 0x00	; 0
}
    fbf2:	df 91       	pop	r29
    fbf4:	cf 91       	pop	r28
    fbf6:	1f 91       	pop	r17
    fbf8:	0f 91       	pop	r16
    fbfa:	08 95       	ret

0000fbfc <fclose>:
/// @return  0 on sucess.
/// @return  -1 on error witrh errno set.
MEMSPACE
int fclose(FILE *stream)
{
    int fn = fileno(stream);
    fbfc:	d0 d9       	rcall	.-3168   	; 0xef9e <fileno>
    if(fn < 0)
    fbfe:	97 fd       	sbrc	r25, 7
        return(EOF);

    return( close(fn) );
    fc00:	02 c0       	rjmp	.+4      	; 0xfc06 <fclose+0xa>
    fc02:	cb cf       	rjmp	.-106    	; 0xfb9a <close>
    fc04:	08 95       	ret
MEMSPACE
int fclose(FILE *stream)
{
    int fn = fileno(stream);
    if(fn < 0)
        return(EOF);
    fc06:	8f ef       	ldi	r24, 0xFF	; 255
    fc08:	9f ef       	ldi	r25, 0xFF	; 255

    return( close(fn) );
}
    fc0a:	08 95       	ret

0000fc0c <new_file_descriptor>:
///
/// @return fileno on success.
/// @return -1 on failure with errno set.
MEMSPACE
int new_file_descriptor( void )
{
    fc0c:	0f 93       	push	r16
    fc0e:	1f 93       	push	r17
    fc10:	cf 93       	push	r28
    fc12:	df 93       	push	r29
    fc14:	ef eb       	ldi	r30, 0xBF	; 191
    fc16:	fc e1       	ldi	r31, 0x1C	; 28
    int i;
    FILE *stream;
    FIL *fh;

    for(i=0;i<MAX_FILES;++i)
    fc18:	c0 e0       	ldi	r28, 0x00	; 0
    fc1a:	d0 e0       	ldi	r29, 0x00	; 0
    fc1c:	21 96       	adiw	r28, 0x01	; 1
    fc1e:	c0 31       	cpi	r28, 0x10	; 16
    fc20:	d1 05       	cpc	r29, r1
    fc22:	49 f0       	breq	.+18     	; 0xfc36 <new_file_descriptor+0x2a>
/// @return 0 if POSIX fileno is NOT a Serial TTY.
MEMSPACE
int isatty(int fileno)
{
/// @todo  Perhaps we should verify console functions have been added ?
    if(fileno >= 0 && fileno <= 2)
    fc24:	c3 30       	cpi	r28, 0x03	; 3
    fc26:	d1 05       	cpc	r29, r1
    fc28:	24 f0       	brlt	.+8      	; 0xfc32 <new_file_descriptor+0x26>

    for(i=0;i<MAX_FILES;++i)
    {
        if(isatty(i))
            continue;
        if( __iob[i] == NULL)
    fc2a:	82 81       	ldd	r24, Z+2	; 0x02
    fc2c:	93 81       	ldd	r25, Z+3	; 0x03
    fc2e:	89 2b       	or	r24, r25
    fc30:	59 f0       	breq	.+22     	; 0xfc48 <new_file_descriptor+0x3c>
    fc32:	32 96       	adiw	r30, 0x02	; 2
    fc34:	f3 cf       	rjmp	.-26     	; 0xfc1c <new_file_descriptor+0x10>
            __iob[i]  = stream;
            fdev_set_udata(stream, (void *) fh);
            return(i);
        }
    }
    errno = ENFILE;
    fc36:	87 e1       	ldi	r24, 0x17	; 23
    fc38:	90 e0       	ldi	r25, 0x00	; 0
    fc3a:	90 93 be 1c 	sts	0x1CBE, r25	; 0x801cbe <errno+0x1>
    fc3e:	80 93 bd 1c 	sts	0x1CBD, r24	; 0x801cbd <errno>
    return(-1);
    fc42:	8f ef       	ldi	r24, 0xFF	; 255
    fc44:	9f ef       	ldi	r25, 0xFF	; 255
    fc46:	22 c0       	rjmp	.+68     	; 0xfc8c <new_file_descriptor+0x80>
    {
        if(isatty(i))
            continue;
        if( __iob[i] == NULL)
        {
            stream = (FILE *) safecalloc(sizeof(FILE),1);
    fc48:	61 e0       	ldi	r22, 0x01	; 1
    fc4a:	70 e0       	ldi	r23, 0x00	; 0
    fc4c:	8e e0       	ldi	r24, 0x0E	; 14
    fc4e:	90 e0       	ldi	r25, 0x00	; 0
    fc50:	0e 94 28 28 	call	0x5050	; 0x5050 <safecalloc>
    fc54:	8c 01       	movw	r16, r24
            if(stream == NULL)
    fc56:	89 2b       	or	r24, r25
    fc58:	59 f0       	breq	.+22     	; 0xfc70 <new_file_descriptor+0x64>
            {
                errno = ENOMEM;
                return(-1);
            }
            fh = (FIL *) safecalloc(sizeof(FIL),1);
    fc5a:	61 e0       	ldi	r22, 0x01	; 1
    fc5c:	70 e0       	ldi	r23, 0x00	; 0
    fc5e:	84 e2       	ldi	r24, 0x24	; 36
    fc60:	92 e0       	ldi	r25, 0x02	; 2
    fc62:	0e 94 28 28 	call	0x5050	; 0x5050 <safecalloc>
            if(fh == NULL)
    fc66:	00 97       	sbiw	r24, 0x00	; 0
    fc68:	31 f4       	brne	.+12     	; 0xfc76 <new_file_descriptor+0x6a>
            {
                safefree(stream);
    fc6a:	c8 01       	movw	r24, r16
    fc6c:	0e 94 74 28 	call	0x50e8	; 0x50e8 <safefree>
                errno = ENOMEM;
    fc70:	8c e0       	ldi	r24, 0x0C	; 12
    fc72:	90 e0       	ldi	r25, 0x00	; 0
    fc74:	e2 cf       	rjmp	.-60     	; 0xfc3a <new_file_descriptor+0x2e>
                return(-1);
            }

            __iob[i]  = stream;
    fc76:	fe 01       	movw	r30, r28
    fc78:	ee 0f       	add	r30, r30
    fc7a:	ff 1f       	adc	r31, r31
    fc7c:	e1 54       	subi	r30, 0x41	; 65
    fc7e:	f3 4e       	sbci	r31, 0xE3	; 227
    fc80:	11 83       	std	Z+1, r17	; 0x01
    fc82:	00 83       	st	Z, r16
            fdev_set_udata(stream, (void *) fh);
    fc84:	f8 01       	movw	r30, r16
    fc86:	95 87       	std	Z+13, r25	; 0x0d
    fc88:	84 87       	std	Z+12, r24	; 0x0c
{
    int i;
    FILE *stream;
    FIL *fh;

    for(i=0;i<MAX_FILES;++i)
    fc8a:	ce 01       	movw	r24, r28
            return(i);
        }
    }
    errno = ENFILE;
    return(-1);
}
    fc8c:	df 91       	pop	r29
    fc8e:	cf 91       	pop	r28
    fc90:	1f 91       	pop	r17
    fc92:	0f 91       	pop	r16
    fc94:	08 95       	ret

0000fc96 <open>:
///
/// @return fileno on success.
/// @return -1 on error with errno set.
MEMSPACE
int open(const char *pathname, int flags)
{
    fc96:	a0 e0       	ldi	r26, 0x00	; 0
    fc98:	b0 e0       	ldi	r27, 0x00	; 0
    fc9a:	e1 e5       	ldi	r30, 0x51	; 81
    fc9c:	fe e7       	ldi	r31, 0x7E	; 126
    fc9e:	0c 94 a8 e8 	jmp	0x1d150	; 0x1d150 <__prologue_saves__+0x8>
    fca2:	5c 01       	movw	r10, r24
    fca4:	6b 01       	movw	r12, r22
    int fatfs_modes;
    FILE *stream;
    FIL *fh;
    int res;

    errno = 0;
    fca6:	10 92 be 1c 	sts	0x1CBE, r1	; 0x801cbe <errno+0x1>
    fcaa:	10 92 bd 1c 	sts	0x1CBD, r1	; 0x801cbd <errno>
        errno = fatfs_to_errno(res);
        return(-1);
    }
#endif

    if((flags & O_ACCMODE) == O_RDWR)
    fcae:	7b 01       	movw	r14, r22
    fcb0:	83 e0       	ldi	r24, 0x03	; 3
    fcb2:	e8 22       	and	r14, r24
    fcb4:	ff 24       	eor	r15, r15
    fcb6:	e2 e0       	ldi	r30, 0x02	; 2
    fcb8:	ee 16       	cp	r14, r30
    fcba:	f1 04       	cpc	r15, r1
    fcbc:	31 f0       	breq	.+12     	; 0xfcca <open+0x34>
        fatfs_modes = FA_READ | FA_WRITE;
    else if((flags & O_ACCMODE) == O_RDONLY)
    fcbe:	e1 14       	cp	r14, r1
    fcc0:	f1 04       	cpc	r15, r1
    fcc2:	31 f0       	breq	.+12     	; 0xfcd0 <open+0x3a>
        fatfs_modes = FA_READ;
    else
        fatfs_modes = FA_WRITE;
    fcc4:	02 e0       	ldi	r16, 0x02	; 2
    fcc6:	10 e0       	ldi	r17, 0x00	; 0
    fcc8:	05 c0       	rjmp	.+10     	; 0xfcd4 <open+0x3e>
        return(-1);
    }
#endif

    if((flags & O_ACCMODE) == O_RDWR)
        fatfs_modes = FA_READ | FA_WRITE;
    fcca:	03 e0       	ldi	r16, 0x03	; 3
    fccc:	10 e0       	ldi	r17, 0x00	; 0
    fcce:	02 c0       	rjmp	.+4      	; 0xfcd4 <open+0x3e>
    else if((flags & O_ACCMODE) == O_RDONLY)
        fatfs_modes = FA_READ;
    fcd0:	01 e0       	ldi	r16, 0x01	; 1
    fcd2:	10 e0       	ldi	r17, 0x00	; 0
    else
        fatfs_modes = FA_WRITE;

    if(flags & O_CREAT)
    fcd4:	c6 fe       	sbrs	r12, 6
    fcd6:	05 c0       	rjmp	.+10     	; 0xfce2 <open+0x4c>
    {
        if(flags & O_TRUNC)
    fcd8:	d1 fe       	sbrs	r13, 1
    fcda:	02 c0       	rjmp	.+4      	; 0xfce0 <open+0x4a>
            fatfs_modes |= FA_CREATE_ALWAYS;
    fcdc:	08 60       	ori	r16, 0x08	; 8
    fcde:	01 c0       	rjmp	.+2      	; 0xfce2 <open+0x4c>
        else
            fatfs_modes |= FA_OPEN_ALWAYS;
    fce0:	00 61       	ori	r16, 0x10	; 16
    }

    fileno = new_file_descriptor();
    fce2:	94 df       	rcall	.-216    	; 0xfc0c <new_file_descriptor>
    fce4:	3c 01       	movw	r6, r24

// checks if fileno out of bounds
    stream = fileno_to_stream(fileno);
    fce6:	77 d9       	rcall	.-3346   	; 0xefd6 <fileno_to_stream>
    fce8:	ec 01       	movw	r28, r24
    fcea:	c3 01       	movw	r24, r6
    if(stream == NULL)
    {
        free_file_descriptor(fileno);
    fcec:	20 97       	sbiw	r28, 0x00	; 0

    fileno = new_file_descriptor();

// checks if fileno out of bounds
    stream = fileno_to_stream(fileno);
    if(stream == NULL)
    fcee:	09 f4       	brne	.+2      	; 0xfcf2 <open+0x5c>
    fcf0:	48 c0       	rjmp	.+144    	; 0xfd82 <open+0xec>
        free_file_descriptor(fileno);
        return(-1);
    }

// fileno_to_fatfs checks for fileno out of bounds
    fh = fileno_to_fatfs(fileno);
    fcf2:	04 dd       	rcall	.-1528   	; 0xf6fc <fileno_to_fatfs>
    fcf4:	4c 01       	movw	r8, r24
    fcf6:	00 97       	sbiw	r24, 0x00	; 0
    if(fh == NULL)
    fcf8:	59 f4       	brne	.+22     	; 0xfd10 <open+0x7a>
    {
        free_file_descriptor(fileno);
    fcfa:	c3 01       	movw	r24, r6
    fcfc:	19 df       	rcall	.-462    	; 0xfb30 <free_file_descriptor>
    fcfe:	89 e0       	ldi	r24, 0x09	; 9
        errno = EBADF;
    fd00:	90 e0       	ldi	r25, 0x00	; 0
    fd02:	90 93 be 1c 	sts	0x1CBE, r25	; 0x801cbe <errno+0x1>
    fd06:	80 93 bd 1c 	sts	0x1CBD, r24	; 0x801cbd <errno>
    fd0a:	8f ef       	ldi	r24, 0xFF	; 255
        return(-1);
    fd0c:	9f ef       	ldi	r25, 0xFF	; 255
    fd0e:	5d c0       	rjmp	.+186    	; 0xfdca <open+0x134>
    fd10:	40 2f       	mov	r20, r16
    }
    res = f_open(fh, pathname, (BYTE) (fatfs_modes & 0xff));
    fd12:	b5 01       	movw	r22, r10
    fd14:	0e 94 a4 5a 	call	0xb548	; 0xb548 <f_open>
    fd18:	00 97       	sbiw	r24, 0x00	; 0
    if(res != FR_OK)
    fd1a:	91 f0       	breq	.+36     	; 0xfd40 <open+0xaa>
    fd1c:	84 31       	cpi	r24, 0x14	; 20
    fd1e:	91 05       	cpc	r25, r1
    fd20:	40 f4       	brcc	.+16     	; 0xfd32 <open+0x9c>
    fd22:	fc 01       	movw	r30, r24
    fd24:	ec 56       	subi	r30, 0x6C	; 108
    fd26:	f4 4f       	sbci	r31, 0xF4	; 244
    fd28:	80 81       	ld	r24, Z
    fd2a:	08 2e       	mov	r0, r24
    fd2c:	00 0c       	add	r0, r0
    fd2e:	99 0b       	sbc	r25, r25
    fd30:	02 c0       	rjmp	.+4      	; 0xfd36 <open+0xa0>
    fd32:	83 e2       	ldi	r24, 0x23	; 35
    fd34:	90 e0       	ldi	r25, 0x00	; 0
    fd36:	90 93 be 1c 	sts	0x1CBE, r25	; 0x801cbe <errno+0x1>
    {
        errno = fatfs_to_errno(res);
    fd3a:	80 93 bd 1c 	sts	0x1CBD, r24	; 0x801cbd <errno>
    fd3e:	20 c0       	rjmp	.+64     	; 0xfd80 <open+0xea>
    fd40:	d2 fe       	sbrs	r13, 2
        free_file_descriptor(fileno);
        return(-1);
    }
    if(flags & O_APPEND)
    fd42:	21 c0       	rjmp	.+66     	; 0xfd86 <open+0xf0>
    fd44:	f4 01       	movw	r30, r8
    {
///  Seek to end of the file
        res = f_lseek(fh, f_size(fh));
    fd46:	42 85       	ldd	r20, Z+10	; 0x0a
    fd48:	53 85       	ldd	r21, Z+11	; 0x0b
    fd4a:	64 85       	ldd	r22, Z+12	; 0x0c
    fd4c:	75 85       	ldd	r23, Z+13	; 0x0d
    fd4e:	c4 01       	movw	r24, r8
    fd50:	0e 94 68 61 	call	0xc2d0	; 0xc2d0 <f_lseek>
    fd54:	00 97       	sbiw	r24, 0x00	; 0
        if (res != FR_OK)
    fd56:	b9 f0       	breq	.+46     	; 0xfd86 <open+0xf0>
    fd58:	84 31       	cpi	r24, 0x14	; 20
    fd5a:	91 05       	cpc	r25, r1
    fd5c:	40 f4       	brcc	.+16     	; 0xfd6e <open+0xd8>
    fd5e:	fc 01       	movw	r30, r24
    fd60:	ec 56       	subi	r30, 0x6C	; 108
    fd62:	f4 4f       	sbci	r31, 0xF4	; 244
    fd64:	80 81       	ld	r24, Z
    fd66:	08 2e       	mov	r0, r24
    fd68:	00 0c       	add	r0, r0
    fd6a:	99 0b       	sbc	r25, r25
    fd6c:	02 c0       	rjmp	.+4      	; 0xfd72 <open+0xdc>
    fd6e:	83 e2       	ldi	r24, 0x23	; 35
    fd70:	90 e0       	ldi	r25, 0x00	; 0
    fd72:	90 93 be 1c 	sts	0x1CBE, r25	; 0x801cbe <errno+0x1>
        {
            errno = fatfs_to_errno(res);
    fd76:	80 93 bd 1c 	sts	0x1CBD, r24	; 0x801cbd <errno>
    fd7a:	c4 01       	movw	r24, r8
            f_close(fh);
    fd7c:	0e 94 be 5f 	call	0xbf7c	; 0xbf7c <f_close>
            free_file_descriptor(fileno);
    fd80:	c3 01       	movw	r24, r6
    fd82:	d6 de       	rcall	.-596    	; 0xfb30 <free_file_descriptor>
    fd84:	c2 cf       	rjmp	.-124    	; 0xfd0a <open+0x74>
    fd86:	f2 e0       	ldi	r31, 0x02	; 2
            return(-1);
        }
    }

    if((flags & O_ACCMODE) == O_RDWR)
    fd88:	ef 16       	cp	r14, r31
    fd8a:	f1 04       	cpc	r15, r1
    fd8c:	51 f4       	brne	.+20     	; 0xfda2 <open+0x10c>
    fd8e:	80 e6       	ldi	r24, 0x60	; 96
    {
// FIXME fdevopen should do this
        stream->put = fatfs_putc;
    fd90:	96 e7       	ldi	r25, 0x76	; 118
    fd92:	99 87       	std	Y+9, r25	; 0x09
    fd94:	88 87       	std	Y+8, r24	; 0x08
    fd96:	8d ed       	ldi	r24, 0xDD	; 221
        stream->get = fatfs_getc;
    fd98:	95 e7       	ldi	r25, 0x75	; 117
    fd9a:	9b 87       	std	Y+11, r25	; 0x0b
    fd9c:	8a 87       	std	Y+10, r24	; 0x0a
    fd9e:	83 e0       	ldi	r24, 0x03	; 3
        stream->flags = _FDEV_SETUP_RW;
    fda0:	12 c0       	rjmp	.+36     	; 0xfdc6 <open+0x130>
    fda2:	e1 14       	cp	r14, r1
    }
    else if((flags & O_ACCMODE) == O_RDONLY)
    fda4:	f1 04       	cpc	r15, r1
    fda6:	41 f4       	brne	.+16     	; 0xfdb8 <open+0x122>
    fda8:	19 86       	std	Y+9, r1	; 0x09
    {
// FIXME fdevopen should do this
        stream->put = NULL;
    fdaa:	18 86       	std	Y+8, r1	; 0x08
    fdac:	8d ed       	ldi	r24, 0xDD	; 221
        stream->get = fatfs_getc;
    fdae:	95 e7       	ldi	r25, 0x75	; 117
    fdb0:	9b 87       	std	Y+11, r25	; 0x0b
    fdb2:	8a 87       	std	Y+10, r24	; 0x0a
    fdb4:	81 e0       	ldi	r24, 0x01	; 1
        stream->flags = _FDEV_SETUP_READ;
    fdb6:	07 c0       	rjmp	.+14     	; 0xfdc6 <open+0x130>
    fdb8:	80 e6       	ldi	r24, 0x60	; 96
    }
    else
    {
// FIXME fdevopen should do this
        stream->put = fatfs_putc;
    fdba:	96 e7       	ldi	r25, 0x76	; 118
    fdbc:	99 87       	std	Y+9, r25	; 0x09
    fdbe:	88 87       	std	Y+8, r24	; 0x08
    fdc0:	1b 86       	std	Y+11, r1	; 0x0b
        stream->get = NULL;
    fdc2:	1a 86       	std	Y+10, r1	; 0x0a
    fdc4:	82 e0       	ldi	r24, 0x02	; 2
        stream->flags = _FDEV_SETUP_WRITE;
    fdc6:	8b 83       	std	Y+3, r24	; 0x03
    fdc8:	c3 01       	movw	r24, r6
    }

    return(fileno);
    fdca:	cd b7       	in	r28, 0x3d	; 61
}
    fdcc:	de b7       	in	r29, 0x3e	; 62
    fdce:	ee e0       	ldi	r30, 0x0E	; 14
    fdd0:	0c 94 c4 e8 	jmp	0x1d188	; 0x1d188 <__epilogue_restores__+0x8>

0000fdd4 <posix_fopen_modes_to_open>:
    fdd4:	cf 93       	push	r28
/// @return open mode flags.
/// @return -1 on error.
/// @warning read and write BOTH share the same stream buffer and buffer index pointers.
MEMSPACE
int posix_fopen_modes_to_open(const char *mode)
{
    fdd6:	df 93       	push	r29
    fdd8:	ec 01       	movw	r28, r24
    int flag = 0;

    if(modecmp(mode,"r") || modecmp(mode,"rb"))
    fdda:	62 e4       	ldi	r22, 0x42	; 66
    fddc:	73 e0       	ldi	r23, 0x03	; 3
    fdde:	0e 94 97 32 	call	0x652e	; 0x652e <strcmp>
    fde2:	00 97       	sbiw	r24, 0x00	; 0
    fde4:	09 f4       	brne	.+2      	; 0xfde8 <posix_fopen_modes_to_open+0x14>
    fde6:	5d c0       	rjmp	.+186    	; 0xfea2 <posix_fopen_modes_to_open+0xce>
    fde8:	6c ee       	ldi	r22, 0xEC	; 236
    fdea:	78 e0       	ldi	r23, 0x08	; 8
    fdec:	ce 01       	movw	r24, r28
    fdee:	0e 94 97 32 	call	0x652e	; 0x652e <strcmp>
    fdf2:	00 97       	sbiw	r24, 0x00	; 0
    fdf4:	09 f4       	brne	.+2      	; 0xfdf8 <posix_fopen_modes_to_open+0x24>
    fdf6:	55 c0       	rjmp	.+170    	; 0xfea2 <posix_fopen_modes_to_open+0xce>
    {
        flag = O_RDONLY;
        return(flag);
    }
    if(modecmp(mode,"r+") || modecmp(mode, "r+b" ) || modecmp(mode, "rb+" ))
    fdf8:	6f ee       	ldi	r22, 0xEF	; 239
    fdfa:	78 e0       	ldi	r23, 0x08	; 8
    fdfc:	ce 01       	movw	r24, r28
    fdfe:	0e 94 97 32 	call	0x652e	; 0x652e <strcmp>
    fe02:	89 2b       	or	r24, r25
    fe04:	09 f4       	brne	.+2      	; 0xfe08 <posix_fopen_modes_to_open+0x34>
    fe06:	42 c0       	rjmp	.+132    	; 0xfe8c <posix_fopen_modes_to_open+0xb8>
    fe08:	62 ef       	ldi	r22, 0xF2	; 242
    fe0a:	78 e0       	ldi	r23, 0x08	; 8
    fe0c:	ce 01       	movw	r24, r28
    fe0e:	0e 94 97 32 	call	0x652e	; 0x652e <strcmp>
    fe12:	89 2b       	or	r24, r25
    fe14:	d9 f1       	breq	.+118    	; 0xfe8c <posix_fopen_modes_to_open+0xb8>
    fe16:	66 ef       	ldi	r22, 0xF6	; 246
    fe18:	78 e0       	ldi	r23, 0x08	; 8
    fe1a:	ce 01       	movw	r24, r28
    fe1c:	0e 94 97 32 	call	0x652e	; 0x652e <strcmp>
    fe20:	89 2b       	or	r24, r25
    fe22:	a1 f1       	breq	.+104    	; 0xfe8c <posix_fopen_modes_to_open+0xb8>
    {
        flag = O_RDWR | O_TRUNC;
        return(flag);
    }
    if(modecmp(mode,"w") || modecmp(mode,"wb"))
    fe24:	6b ea       	ldi	r22, 0xAB	; 171
    fe26:	7a e0       	ldi	r23, 0x0A	; 10
    fe28:	ce 01       	movw	r24, r28
    fe2a:	0e 94 97 32 	call	0x652e	; 0x652e <strcmp>
    fe2e:	89 2b       	or	r24, r25
    fe30:	81 f1       	breq	.+96     	; 0xfe92 <posix_fopen_modes_to_open+0xbe>
    fe32:	6a ef       	ldi	r22, 0xFA	; 250
    fe34:	78 e0       	ldi	r23, 0x08	; 8
    fe36:	ce 01       	movw	r24, r28
    fe38:	0e 94 97 32 	call	0x652e	; 0x652e <strcmp>
    fe3c:	89 2b       	or	r24, r25
    fe3e:	49 f1       	breq	.+82     	; 0xfe92 <posix_fopen_modes_to_open+0xbe>
    {
        flag = O_WRONLY | O_CREAT | O_TRUNC;
        return(flag);
    }
    if(modecmp(mode,"w+") || modecmp(mode, "w+b" ) || modecmp(mode, "wb+" ))
    fe40:	6d ef       	ldi	r22, 0xFD	; 253
    fe42:	78 e0       	ldi	r23, 0x08	; 8
    fe44:	ce 01       	movw	r24, r28
    fe46:	0e 94 97 32 	call	0x652e	; 0x652e <strcmp>
    fe4a:	89 2b       	or	r24, r25
    fe4c:	29 f1       	breq	.+74     	; 0xfe98 <posix_fopen_modes_to_open+0xc4>
    fe4e:	60 e0       	ldi	r22, 0x00	; 0
    fe50:	79 e0       	ldi	r23, 0x09	; 9
    fe52:	ce 01       	movw	r24, r28
    fe54:	0e 94 97 32 	call	0x652e	; 0x652e <strcmp>
    fe58:	89 2b       	or	r24, r25
    fe5a:	f1 f0       	breq	.+60     	; 0xfe98 <posix_fopen_modes_to_open+0xc4>
    fe5c:	64 e0       	ldi	r22, 0x04	; 4
    fe5e:	79 e0       	ldi	r23, 0x09	; 9
    fe60:	ce 01       	movw	r24, r28
    fe62:	0e 94 97 32 	call	0x652e	; 0x652e <strcmp>
    fe66:	89 2b       	or	r24, r25
    fe68:	b9 f0       	breq	.+46     	; 0xfe98 <posix_fopen_modes_to_open+0xc4>
    {
        flag = O_RDWR | O_CREAT | O_TRUNC;
        return(flag);
    }
    if(modecmp(mode,"a") || modecmp(mode,"ab"))
    fe6a:	67 e1       	ldi	r22, 0x17	; 23
    fe6c:	73 e1       	ldi	r23, 0x13	; 19
    fe6e:	ce 01       	movw	r24, r28
    fe70:	0e 94 97 32 	call	0x652e	; 0x652e <strcmp>
    fe74:	89 2b       	or	r24, r25
    fe76:	99 f0       	breq	.+38     	; 0xfe9e <posix_fopen_modes_to_open+0xca>
    fe78:	68 e0       	ldi	r22, 0x08	; 8
    fe7a:	79 e0       	ldi	r23, 0x09	; 9
    fe7c:	ce 01       	movw	r24, r28
    fe7e:	0e 94 97 32 	call	0x652e	; 0x652e <strcmp>
    fe82:	89 2b       	or	r24, r25
    fe84:	61 f0       	breq	.+24     	; 0xfe9e <posix_fopen_modes_to_open+0xca>
        return(flag);
    }
    if(modecmp(mode,"a+") || modecmp(mode, "a+b" ) || modecmp(mode, "ab+" ))
    {
        flag = O_RDWR | O_CREAT | O_APPEND;
        return(-1);
    fe86:	8f ef       	ldi	r24, 0xFF	; 255
    fe88:	9f ef       	ldi	r25, 0xFF	; 255
    fe8a:	0b c0       	rjmp	.+22     	; 0xfea2 <posix_fopen_modes_to_open+0xce>
        return(flag);
    }
    if(modecmp(mode,"r+") || modecmp(mode, "r+b" ) || modecmp(mode, "rb+" ))
    {
        flag = O_RDWR | O_TRUNC;
        return(flag);
    fe8c:	82 e0       	ldi	r24, 0x02	; 2
    fe8e:	92 e0       	ldi	r25, 0x02	; 2
    fe90:	08 c0       	rjmp	.+16     	; 0xfea2 <posix_fopen_modes_to_open+0xce>
    }
    if(modecmp(mode,"w") || modecmp(mode,"wb"))
    {
        flag = O_WRONLY | O_CREAT | O_TRUNC;
        return(flag);
    fe92:	81 e4       	ldi	r24, 0x41	; 65
    fe94:	92 e0       	ldi	r25, 0x02	; 2
    fe96:	05 c0       	rjmp	.+10     	; 0xfea2 <posix_fopen_modes_to_open+0xce>
    }
    if(modecmp(mode,"w+") || modecmp(mode, "w+b" ) || modecmp(mode, "wb+" ))
    {
        flag = O_RDWR | O_CREAT | O_TRUNC;
        return(flag);
    fe98:	82 e4       	ldi	r24, 0x42	; 66
    fe9a:	92 e0       	ldi	r25, 0x02	; 2
    fe9c:	02 c0       	rjmp	.+4      	; 0xfea2 <posix_fopen_modes_to_open+0xce>
    }
    if(modecmp(mode,"a") || modecmp(mode,"ab"))
    {
        flag = O_WRONLY | O_CREAT | O_APPEND;
        return(flag);
    fe9e:	81 e4       	ldi	r24, 0x41	; 65
    fea0:	94 e0       	ldi	r25, 0x04	; 4
    {
        flag = O_RDWR | O_CREAT | O_APPEND;
        return(-1);
    }
    return(-1);                                   // nvalid mode
}
    fea2:	df 91       	pop	r29
    fea4:	cf 91       	pop	r28
    fea6:	08 95       	ret

0000fea8 <fopen>:
///
/// @return stream * on success.
/// @return NULL on error with errno set.
MEMSPACE
FILE *fopen(const char *path, const char *mode)
{
    fea8:	cf 93       	push	r28
    feaa:	df 93       	push	r29
    feac:	ec 01       	movw	r28, r24
    feae:	cb 01       	movw	r24, r22
    int flags = posix_fopen_modes_to_open(mode);
    feb0:	91 df       	rcall	.-222    	; 0xfdd4 <posix_fopen_modes_to_open>
    int fileno = open(path, flags);
    feb2:	bc 01       	movw	r22, r24
    feb4:	ce 01       	movw	r24, r28

// checks if fileno out of bounds
    return( fileno_to_stream(fileno) );
    feb6:	ef de       	rcall	.-546    	; 0xfc96 <open>
    feb8:	8e d8       	rcall	.-3812   	; 0xefd6 <fileno_to_stream>
}
    feba:	df 91       	pop	r29
    febc:	cf 91       	pop	r28
    febe:	08 95       	ret

0000fec0 <fprintf>:
/// @param[in] ...: vararg list or arguments
/// @return size of printed result
MEMSPACE
int
fprintf(FILE *fp, const char *format, ...)
{
    fec0:	a8 e0       	ldi	r26, 0x08	; 8
    fec2:	b0 e0       	ldi	r27, 0x00	; 0
    fec4:	e6 e6       	ldi	r30, 0x66	; 102
    fec6:	ff e7       	ldi	r31, 0x7F	; 127
    fec8:	0c 94 b4 e8 	jmp	0x1d168	; 0x1d168 <__prologue_saves__+0x20>
    printf_t fn;
    va_list va;

    fn.put = _fprintf_putc;
    fecc:	83 e5       	ldi	r24, 0x53	; 83
    fece:	97 e7       	ldi	r25, 0x77	; 119
    fed0:	9a 83       	std	Y+2, r25	; 0x02
    fed2:	89 83       	std	Y+1, r24	; 0x01
    fn.sent = 0;
    fed4:	18 86       	std	Y+8, r1	; 0x08
    fed6:	1f 82       	std	Y+7, r1	; 0x07
    fn.buffer = (void *) fp;
    fed8:	8d 85       	ldd	r24, Y+13	; 0x0d
    feda:	9e 85       	ldd	r25, Y+14	; 0x0e
    fedc:	9c 83       	std	Y+4, r25	; 0x04
    fede:	8b 83       	std	Y+3, r24	; 0x03

    va_start(va, format);
    _printf_fn(&fn, format, va);
    fee0:	4f 85       	ldd	r20, Y+15	; 0x0f
    fee2:	58 89       	ldd	r21, Y+16	; 0x10
    fee4:	60 e8       	ldi	r22, 0x80	; 128
    fee6:	9e 01       	movw	r18, r28
    fee8:	2f 5e       	subi	r18, 0xEF	; 239
    feea:	3f 4f       	sbci	r19, 0xFF	; 255
    feec:	ce 01       	movw	r24, r28
    feee:	01 96       	adiw	r24, 0x01	; 1
    fef0:	0e 94 57 43 	call	0x86ae	; 0x86ae <_printf_fn>
    va_end(va);

    return ((int)fn.sent);
}
    fef4:	8f 81       	ldd	r24, Y+7	; 0x07
    fef6:	98 85       	ldd	r25, Y+8	; 0x08
    fef8:	28 96       	adiw	r28, 0x08	; 8
    fefa:	e2 e0       	ldi	r30, 0x02	; 2
    fefc:	0c 94 d0 e8 	jmp	0x1d1a0	; 0x1d1a0 <__epilogue_restores__+0x20>

0000ff00 <posix_help>:
MEMSPACE
int setpage(int count)
{
    _pagesize = count;
    return(_pagesize);
}
    ff00:	cf 93       	push	r28
    ff02:	df 93       	push	r29
    ff04:	00 d0       	rcall	.+0      	; 0xff06 <posix_help+0x6>
    ff06:	1f 92       	push	r1
    ff08:	ec 01       	movw	r28, r24
    ff0a:	82 e7       	ldi	r24, 0x72	; 114
    ff0c:	9e e0       	ldi	r25, 0x0E	; 14
    ff0e:	a0 e0       	ldi	r26, 0x00	; 0
    ff10:	ed b7       	in	r30, 0x3d	; 61
    ff12:	fe b7       	in	r31, 0x3e	; 62
    ff14:	81 83       	std	Z+1, r24	; 0x01
    ff16:	92 83       	std	Z+2, r25	; 0x02
    ff18:	a3 83       	std	Z+3, r26	; 0x03
    ff1a:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
    ff1e:	cd 2b       	or	r28, r29
    ff20:	51 f0       	breq	.+20     	; 0xff36 <posix_help+0x36>
    ff22:	8a e9       	ldi	r24, 0x9A	; 154
    ff24:	9d e0       	ldi	r25, 0x0D	; 13
    ff26:	a0 e0       	ldi	r26, 0x00	; 0
    ff28:	ed b7       	in	r30, 0x3d	; 61
    ff2a:	fe b7       	in	r31, 0x3e	; 62
    ff2c:	81 83       	std	Z+1, r24	; 0x01
    ff2e:	92 83       	std	Z+2, r25	; 0x02
    ff30:	a3 83       	std	Z+3, r26	; 0x03
    ff32:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
    ff36:	cd b7       	in	r28, 0x3d	; 61
    ff38:	de b7       	in	r29, 0x3e	; 62
    ff3a:	23 96       	adiw	r28, 0x03	; 3
    ff3c:	e2 e0       	ldi	r30, 0x02	; 2
    ff3e:	0c 94 d0 e8 	jmp	0x1d1a0	; 0x1d1a0 <__epilogue_restores__+0x20>

0000ff42 <copy>:
    ff42:	4f 92       	push	r4
    ff44:	5f 92       	push	r5
    ff46:	6f 92       	push	r6
    ff48:	8f 92       	push	r8
    ff4a:	9f 92       	push	r9
    ff4c:	af 92       	push	r10
    ff4e:	bf 92       	push	r11
    ff50:	cf 92       	push	r12
    ff52:	df 92       	push	r13
    ff54:	ef 92       	push	r14
    ff56:	ff 92       	push	r15
    ff58:	0f 93       	push	r16
    ff5a:	1f 93       	push	r17
    ff5c:	cf 93       	push	r28
    ff5e:	df 93       	push	r29
    ff60:	ad b7       	in	r26, 0x3d	; 61
    ff62:	be b7       	in	r27, 0x3e	; 62
    ff64:	17 97       	sbiw	r26, 0x07	; 7
    ff66:	0f b6       	in	r0, 0x3f	; 63
    ff68:	f8 94       	cli
    ff6a:	be bf       	out	0x3e, r27	; 62
    ff6c:	0f be       	out	0x3f, r0	; 63
    ff6e:	ad bf       	out	0x3d, r26	; 61
    ff70:	8c 01       	movw	r16, r24
    ff72:	eb 01       	movw	r28, r22
    ff74:	ed b7       	in	r30, 0x3d	; 61
    ff76:	fe b7       	in	r31, 0x3e	; 62
    ff78:	95 83       	std	Z+5, r25	; 0x05
    ff7a:	84 83       	std	Z+4, r24	; 0x04
    ff7c:	87 ef       	ldi	r24, 0xF7	; 247
    ff7e:	9c e0       	ldi	r25, 0x0C	; 12
    ff80:	a0 e0       	ldi	r26, 0x00	; 0
    ff82:	81 83       	std	Z+1, r24	; 0x01
    ff84:	92 83       	std	Z+2, r25	; 0x02
    ff86:	a3 83       	std	Z+3, r26	; 0x03
    ff88:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
    ff8c:	6c ee       	ldi	r22, 0xEC	; 236
    ff8e:	78 e0       	ldi	r23, 0x08	; 8
    ff90:	c8 01       	movw	r24, r16
    ff92:	8a df       	rcall	.-236    	; 0xfea8 <fopen>
    ff94:	7c 01       	movw	r14, r24
    ff96:	ed b7       	in	r30, 0x3d	; 61
    ff98:	fe b7       	in	r31, 0x3e	; 62
    ff9a:	89 2b       	or	r24, r25
    ff9c:	59 f4       	brne	.+22     	; 0xffb4 <copy+0x72>
    ff9e:	15 83       	std	Z+5, r17	; 0x05
    ffa0:	04 83       	std	Z+4, r16	; 0x04
    ffa2:	87 ee       	ldi	r24, 0xE7	; 231
    ffa4:	9c e0       	ldi	r25, 0x0C	; 12
    ffa6:	a0 e0       	ldi	r26, 0x00	; 0
    ffa8:	81 83       	std	Z+1, r24	; 0x01
    ffaa:	92 83       	std	Z+2, r25	; 0x02
    ffac:	a3 83       	std	Z+3, r26	; 0x03
    ffae:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
    ffb2:	20 c0       	rjmp	.+64     	; 0xfff4 <copy+0xb2>
    ffb4:	d5 83       	std	Z+5, r29	; 0x05
    ffb6:	c4 83       	std	Z+4, r28	; 0x04
    ffb8:	8a ed       	ldi	r24, 0xDA	; 218
    ffba:	9c e0       	ldi	r25, 0x0C	; 12
    ffbc:	a0 e0       	ldi	r26, 0x00	; 0
    ffbe:	81 83       	std	Z+1, r24	; 0x01
    ffc0:	92 83       	std	Z+2, r25	; 0x02
    ffc2:	a3 83       	std	Z+3, r26	; 0x03
    ffc4:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
    ffc8:	6a ef       	ldi	r22, 0xFA	; 250
    ffca:	78 e0       	ldi	r23, 0x08	; 8
    ffcc:	ce 01       	movw	r24, r28
    ffce:	6c df       	rcall	.-296    	; 0xfea8 <fopen>
    ffd0:	8c 01       	movw	r16, r24
    ffd2:	89 2b       	or	r24, r25
    ffd4:	a1 f4       	brne	.+40     	; 0xfffe <copy+0xbc>
    ffd6:	ed b7       	in	r30, 0x3d	; 61
    ffd8:	fe b7       	in	r31, 0x3e	; 62
    ffda:	d5 83       	std	Z+5, r29	; 0x05
    ffdc:	c4 83       	std	Z+4, r28	; 0x04
    ffde:	8a ec       	ldi	r24, 0xCA	; 202
    ffe0:	9c e0       	ldi	r25, 0x0C	; 12
    ffe2:	a0 e0       	ldi	r26, 0x00	; 0
    ffe4:	81 83       	std	Z+1, r24	; 0x01
    ffe6:	92 83       	std	Z+2, r25	; 0x02
    ffe8:	a3 83       	std	Z+3, r26	; 0x03
    ffea:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
    ffee:	80 e0       	ldi	r24, 0x00	; 0
    fff0:	90 e0       	ldi	r25, 0x00	; 0
    fff2:	04 de       	rcall	.-1016   	; 0xfbfc <fclose>
    fff4:	6f ef       	ldi	r22, 0xFF	; 255
    fff6:	7f ef       	ldi	r23, 0xFF	; 255
    fff8:	8f ef       	ldi	r24, 0xFF	; 255
    fffa:	9f ef       	ldi	r25, 0xFF	; 255
    fffc:	68 c0       	rjmp	.+208    	; 0x100ce <__EEPROM_REGION_LENGTH__+0xce>
    fffe:	61 e0       	ldi	r22, 0x01	; 1
   10000:	70 e0       	ldi	r23, 0x00	; 0
   10002:	80 e0       	ldi	r24, 0x00	; 0
   10004:	92 e0       	ldi	r25, 0x02	; 2
   10006:	0e 94 28 28 	call	0x5050	; 0x5050 <safecalloc>
   1000a:	6c 01       	movw	r12, r24
   1000c:	89 2b       	or	r24, r25
   1000e:	21 f4       	brne	.+8      	; 0x10018 <__EEPROM_REGION_LENGTH__+0x18>
   10010:	c7 01       	movw	r24, r14
   10012:	f4 dd       	rcall	.-1048   	; 0xfbfc <fclose>
   10014:	c8 01       	movw	r24, r16
   10016:	ed cf       	rjmp	.-38     	; 0xfff2 <copy+0xb0>
   10018:	8d eb       	ldi	r24, 0xBD	; 189
   1001a:	9c e0       	ldi	r25, 0x0C	; 12
   1001c:	a0 e0       	ldi	r26, 0x00	; 0
   1001e:	ed b7       	in	r30, 0x3d	; 61
   10020:	fe b7       	in	r31, 0x3e	; 62
   10022:	81 83       	std	Z+1, r24	; 0x01
   10024:	92 83       	std	Z+2, r25	; 0x02
   10026:	a3 83       	std	Z+3, r26	; 0x03
   10028:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
   1002c:	81 2c       	mov	r8, r1
   1002e:	91 2c       	mov	r9, r1
   10030:	54 01       	movw	r10, r8
   10032:	81 ea       	ldi	r24, 0xA1	; 161
   10034:	9c e0       	ldi	r25, 0x0C	; 12
   10036:	2c 01       	movw	r4, r24
   10038:	61 2c       	mov	r6, r1
   1003a:	97 01       	movw	r18, r14
   1003c:	40 e0       	ldi	r20, 0x00	; 0
   1003e:	52 e0       	ldi	r21, 0x02	; 2
   10040:	61 e0       	ldi	r22, 0x01	; 1
   10042:	70 e0       	ldi	r23, 0x00	; 0
   10044:	c6 01       	movw	r24, r12
   10046:	86 dc       	rcall	.-1780   	; 0xf954 <fread>
   10048:	ec 01       	movw	r28, r24
   1004a:	18 16       	cp	r1, r24
   1004c:	19 06       	cpc	r1, r25
   1004e:	44 f5       	brge	.+80     	; 0x100a0 <__EEPROM_REGION_LENGTH__+0xa0>
   10050:	98 01       	movw	r18, r16
   10052:	ae 01       	movw	r20, r28
   10054:	61 e0       	ldi	r22, 0x01	; 1
   10056:	70 e0       	ldi	r23, 0x00	; 0
   10058:	c6 01       	movw	r24, r12
   1005a:	4e dd       	rcall	.-1380   	; 0xfaf8 <fwrite>
   1005c:	8c 17       	cp	r24, r28
   1005e:	9d 07       	cpc	r25, r29
   10060:	5c f4       	brge	.+22     	; 0x10078 <__EEPROM_REGION_LENGTH__+0x78>
   10062:	80 eb       	ldi	r24, 0xB0	; 176
   10064:	9c e0       	ldi	r25, 0x0C	; 12
   10066:	a0 e0       	ldi	r26, 0x00	; 0
   10068:	ed b7       	in	r30, 0x3d	; 61
   1006a:	fe b7       	in	r31, 0x3e	; 62
   1006c:	81 83       	std	Z+1, r24	; 0x01
   1006e:	92 83       	std	Z+2, r25	; 0x02
   10070:	a3 83       	std	Z+3, r26	; 0x03
   10072:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
   10076:	14 c0       	rjmp	.+40     	; 0x100a0 <__EEPROM_REGION_LENGTH__+0xa0>
   10078:	ce 01       	movw	r24, r28
   1007a:	dd 0f       	add	r29, r29
   1007c:	aa 0b       	sbc	r26, r26
   1007e:	bb 0b       	sbc	r27, r27
   10080:	88 0e       	add	r8, r24
   10082:	99 1e       	adc	r9, r25
   10084:	aa 1e       	adc	r10, r26
   10086:	bb 1e       	adc	r11, r27
   10088:	ed b7       	in	r30, 0x3d	; 61
   1008a:	fe b7       	in	r31, 0x3e	; 62
   1008c:	84 82       	std	Z+4, r8	; 0x04
   1008e:	95 82       	std	Z+5, r9	; 0x05
   10090:	a6 82       	std	Z+6, r10	; 0x06
   10092:	b7 82       	std	Z+7, r11	; 0x07
   10094:	41 82       	std	Z+1, r4	; 0x01
   10096:	52 82       	std	Z+2, r5	; 0x02
   10098:	63 82       	std	Z+3, r6	; 0x03
   1009a:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
   1009e:	cd cf       	rjmp	.-102    	; 0x1003a <__EEPROM_REGION_LENGTH__+0x3a>
   100a0:	ed b7       	in	r30, 0x3d	; 61
   100a2:	fe b7       	in	r31, 0x3e	; 62
   100a4:	84 82       	std	Z+4, r8	; 0x04
   100a6:	95 82       	std	Z+5, r9	; 0x05
   100a8:	a6 82       	std	Z+6, r10	; 0x06
   100aa:	b7 82       	std	Z+7, r11	; 0x07
   100ac:	8e e8       	ldi	r24, 0x8E	; 142
   100ae:	9c e0       	ldi	r25, 0x0C	; 12
   100b0:	a0 e0       	ldi	r26, 0x00	; 0
   100b2:	81 83       	std	Z+1, r24	; 0x01
   100b4:	92 83       	std	Z+2, r25	; 0x02
   100b6:	a3 83       	std	Z+3, r26	; 0x03
   100b8:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
   100bc:	c6 01       	movw	r24, r12
   100be:	0e 94 74 28 	call	0x50e8	; 0x50e8 <safefree>
   100c2:	c7 01       	movw	r24, r14
   100c4:	9b dd       	rcall	.-1226   	; 0xfbfc <fclose>
   100c6:	c8 01       	movw	r24, r16
   100c8:	99 dd       	rcall	.-1230   	; 0xfbfc <fclose>
   100ca:	b4 01       	movw	r22, r8
   100cc:	c5 01       	movw	r24, r10
   100ce:	ad b7       	in	r26, 0x3d	; 61
   100d0:	be b7       	in	r27, 0x3e	; 62
   100d2:	17 96       	adiw	r26, 0x07	; 7
   100d4:	0f b6       	in	r0, 0x3f	; 63
   100d6:	f8 94       	cli
   100d8:	be bf       	out	0x3e, r27	; 62
   100da:	0f be       	out	0x3f, r0	; 63
   100dc:	ad bf       	out	0x3d, r26	; 61
   100de:	df 91       	pop	r29
   100e0:	cf 91       	pop	r28
   100e2:	1f 91       	pop	r17
   100e4:	0f 91       	pop	r16
   100e6:	ff 90       	pop	r15
   100e8:	ef 90       	pop	r14
   100ea:	df 90       	pop	r13
   100ec:	cf 90       	pop	r12
   100ee:	bf 90       	pop	r11
   100f0:	af 90       	pop	r10
   100f2:	9f 90       	pop	r9
   100f4:	8f 90       	pop	r8
   100f6:	6f 90       	pop	r6
   100f8:	5f 90       	pop	r5
   100fa:	4f 90       	pop	r4
   100fc:	08 95       	ret

000100fe <testpage>:
/// @brief Used to page output of functions like cat, hexdump, etc
/// @param[in] *name: file to hexdump
/// @retrun -1 = quit, return count or 0 at new page
MEMSPACE
int testpage(int count)
{
   100fe:	cf 93       	push	r28
   10100:	df 93       	push	r29
   10102:	00 d0       	rcall	.+0      	; 0x10104 <testpage+0x6>
   10104:	1f 92       	push	r1
    int c;
    if(count >= _pagesize)
   10106:	20 91 80 01 	lds	r18, 0x0180	; 0x800180 <_pagesize>
   1010a:	30 91 81 01 	lds	r19, 0x0181	; 0x800181 <_pagesize+0x1>
   1010e:	82 17       	cp	r24, r18
   10110:	93 07       	cpc	r25, r19
   10112:	3c f1       	brlt	.+78     	; 0x10162 <testpage+0x64>
    {
        printf("More..");
   10114:	87 e8       	ldi	r24, 0x87	; 135
   10116:	9c e0       	ldi	r25, 0x0C	; 12
   10118:	a0 e0       	ldi	r26, 0x00	; 0
   1011a:	ed b7       	in	r30, 0x3d	; 61
   1011c:	fe b7       	in	r31, 0x3e	; 62
   1011e:	81 83       	std	Z+1, r24	; 0x01
   10120:	92 83       	std	Z+2, r25	; 0x02
   10122:	a3 83       	std	Z+3, r26	; 0x03
   10124:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
        {
            optimistic_yield(1000);
            wdt_reset();
        }
#endif
        c = getchar();
   10128:	0e 94 60 77 	call	0xeec0	; 0xeec0 <getchar>
   1012c:	ec 01       	movw	r28, r24
        printf("\r");
   1012e:	85 e8       	ldi	r24, 0x85	; 133
   10130:	9c e0       	ldi	r25, 0x0C	; 12
   10132:	a0 e0       	ldi	r26, 0x00	; 0
   10134:	ed b7       	in	r30, 0x3d	; 61
   10136:	fe b7       	in	r31, 0x3e	; 62
   10138:	81 83       	std	Z+1, r24	; 0x01
   1013a:	92 83       	std	Z+2, r25	; 0x02
   1013c:	a3 83       	std	Z+3, r26	; 0x03
   1013e:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
        if(c == 'q')
   10142:	c1 37       	cpi	r28, 0x71	; 113
   10144:	d1 05       	cpc	r29, r1
   10146:	41 f0       	breq	.+16     	; 0x10158 <testpage+0x5a>
            return(-1);                           // quit
        if(c == '\n')
   10148:	2a 97       	sbiw	r28, 0x0a	; 10
   1014a:	49 f4       	brne	.+18     	; 0x1015e <testpage+0x60>
            return(_pagesize-1);                  // single line
   1014c:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <_pagesize>
   10150:	90 91 81 01 	lds	r25, 0x0181	; 0x800181 <_pagesize+0x1>
   10154:	01 97       	sbiw	r24, 0x01	; 1
   10156:	05 c0       	rjmp	.+10     	; 0x10162 <testpage+0x64>
        }
#endif
        c = getchar();
        printf("\r");
        if(c == 'q')
            return(-1);                           // quit
   10158:	8f ef       	ldi	r24, 0xFF	; 255
   1015a:	9f ef       	ldi	r25, 0xFF	; 255
   1015c:	02 c0       	rjmp	.+4      	; 0x10162 <testpage+0x64>
        if(c == '\n')
            return(_pagesize-1);                  // single line
        return(0);                                // new page
   1015e:	80 e0       	ldi	r24, 0x00	; 0
   10160:	90 e0       	ldi	r25, 0x00	; 0
    }
    return (count);
}
   10162:	cd b7       	in	r28, 0x3d	; 61
   10164:	de b7       	in	r29, 0x3e	; 62
   10166:	23 96       	adiw	r28, 0x03	; 3
   10168:	e2 e0       	ldi	r30, 0x02	; 2
   1016a:	0c 94 d0 e8 	jmp	0x1d1a0	; 0x1d1a0 <__epilogue_restores__+0x20>

0001016e <cat>:
/// @param[in] name: file name.
/// @param[in] option: --p page display
/// @return  number of characters in file or -1 on error
MEMSPACE
long cat(char *name, int dopage)
{
   1016e:	a7 e0       	ldi	r26, 0x07	; 7
   10170:	b1 e0       	ldi	r27, 0x01	; 1
   10172:	ed eb       	ldi	r30, 0xBD	; 189
   10174:	f0 e8       	ldi	r31, 0x80	; 128
   10176:	0c 94 aa e8 	jmp	0x1d154	; 0x1d154 <__prologue_saves__+0xc>
   1017a:	8c 01       	movw	r16, r24
   1017c:	4b 01       	movw	r8, r22
    FILE *fp;
    int count = 0;
    int size = 0;
    char line[256];

    fp = fopen(name,"rb");
   1017e:	6c ee       	ldi	r22, 0xEC	; 236
   10180:	78 e0       	ldi	r23, 0x08	; 8
   10182:	92 de       	rcall	.-732    	; 0xfea8 <fopen>
   10184:	7c 01       	movw	r14, r24
    if (!fp)
   10186:	89 2b       	or	r24, r25
   10188:	41 f0       	breq	.+16     	; 0x1019a <cat+0x2c>
   1018a:	c1 2c       	mov	r12, r1
   1018c:	d1 2c       	mov	r13, r1
   1018e:	a1 2c       	mov	r10, r1
   10190:	b1 2c       	mov	r11, r1
    {
        printf("Can't open: %s\n", name);
        return(-1);
    }
    while(fgets(line,sizeof(line)-2,fp) != NULL)
   10192:	8e 01       	movw	r16, r28
   10194:	08 5f       	subi	r16, 0xF8	; 248
   10196:	1f 4f       	sbci	r17, 0xFF	; 255
   10198:	23 c0       	rjmp	.+70     	; 0x101e0 <cat+0x72>
    char line[256];

    fp = fopen(name,"rb");
    if (!fp)
    {
        printf("Can't open: %s\n", name);
   1019a:	ed b7       	in	r30, 0x3d	; 61
   1019c:	fe b7       	in	r31, 0x3e	; 62
   1019e:	15 83       	std	Z+5, r17	; 0x05
   101a0:	04 83       	std	Z+4, r16	; 0x04
   101a2:	80 e1       	ldi	r24, 0x10	; 16
   101a4:	9d e0       	ldi	r25, 0x0D	; 13
   101a6:	a0 e0       	ldi	r26, 0x00	; 0
   101a8:	81 83       	std	Z+1, r24	; 0x01
   101aa:	92 83       	std	Z+2, r25	; 0x02
   101ac:	a3 83       	std	Z+3, r26	; 0x03
   101ae:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
        return(-1);
   101b2:	cc 24       	eor	r12, r12
   101b4:	ca 94       	dec	r12
   101b6:	dc 2c       	mov	r13, r12
   101b8:	76 01       	movw	r14, r12
   101ba:	3f c0       	rjmp	.+126    	; 0x1023a <cat+0xcc>
    }
    while(fgets(line,sizeof(line)-2,fp) != NULL)
    {
        trim_tail(line);
   101bc:	c8 01       	movw	r24, r16
   101be:	0e 94 1b 33 	call	0x6636	; 0x6636 <trim_tail>
        size += strlen(line);
   101c2:	f8 01       	movw	r30, r16
   101c4:	01 90       	ld	r0, Z+
   101c6:	00 20       	and	r0, r0
   101c8:	e9 f7       	brne	.-6      	; 0x101c4 <cat+0x56>
   101ca:	31 97       	sbiw	r30, 0x01	; 1
   101cc:	e0 1b       	sub	r30, r16
   101ce:	f1 0b       	sbc	r31, r17
   101d0:	ce 0e       	add	r12, r30
   101d2:	df 1e       	adc	r13, r31
        puts(line);
   101d4:	c8 01       	movw	r24, r16
   101d6:	0e 94 b8 77 	call	0xef70	; 0xef70 <puts>
        if(dopage)
   101da:	81 14       	cp	r8, r1
   101dc:	91 04       	cpc	r9, r1
   101de:	49 f4       	brne	.+18     	; 0x101f2 <cat+0x84>
    if (!fp)
    {
        printf("Can't open: %s\n", name);
        return(-1);
    }
    while(fgets(line,sizeof(line)-2,fp) != NULL)
   101e0:	a7 01       	movw	r20, r14
   101e2:	6e ef       	ldi	r22, 0xFE	; 254
   101e4:	70 e0       	ldi	r23, 0x00	; 0
   101e6:	c8 01       	movw	r24, r16
   101e8:	0e 94 6c 77 	call	0xeed8	; 0xeed8 <fgets>
   101ec:	89 2b       	or	r24, r25
   101ee:	31 f7       	brne	.-52     	; 0x101bc <cat+0x4e>
   101f0:	06 c0       	rjmp	.+12     	; 0x101fe <cat+0x90>
        trim_tail(line);
        size += strlen(line);
        puts(line);
        if(dopage)
        {
            count = testpage(++count);
   101f2:	c5 01       	movw	r24, r10
   101f4:	01 96       	adiw	r24, 0x01	; 1
   101f6:	83 df       	rcall	.-250    	; 0x100fe <testpage>
   101f8:	5c 01       	movw	r10, r24
            if(count < 0)
   101fa:	97 ff       	sbrs	r25, 7
   101fc:	f1 cf       	rjmp	.-30     	; 0x101e0 <cat+0x72>
#ifdef ESP8266
        optimistic_yield(1000);
        wdt_reset();
#endif
    }
    printf("\n");
   101fe:	8e e0       	ldi	r24, 0x0E	; 14
   10200:	9d e0       	ldi	r25, 0x0D	; 13
   10202:	a0 e0       	ldi	r26, 0x00	; 0
   10204:	ed b7       	in	r30, 0x3d	; 61
   10206:	fe b7       	in	r31, 0x3e	; 62
   10208:	81 83       	std	Z+1, r24	; 0x01
   1020a:	92 83       	std	Z+2, r25	; 0x02
   1020c:	a3 83       	std	Z+3, r26	; 0x03
   1020e:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
    fclose(fp);
   10212:	c7 01       	movw	r24, r14
   10214:	f3 dc       	rcall	.-1562   	; 0xfbfc <fclose>
    printf("%ld bytes\n", (long)size);
   10216:	0d 2c       	mov	r0, r13
   10218:	00 0c       	add	r0, r0
   1021a:	ee 08       	sbc	r14, r14
   1021c:	ff 08       	sbc	r15, r15
   1021e:	ed b7       	in	r30, 0x3d	; 61
   10220:	fe b7       	in	r31, 0x3e	; 62
   10222:	c4 82       	std	Z+4, r12	; 0x04
   10224:	d5 82       	std	Z+5, r13	; 0x05
   10226:	e6 82       	std	Z+6, r14	; 0x06
   10228:	f7 82       	std	Z+7, r15	; 0x07
   1022a:	83 e0       	ldi	r24, 0x03	; 3
   1022c:	9d e0       	ldi	r25, 0x0D	; 13
   1022e:	a0 e0       	ldi	r26, 0x00	; 0
   10230:	81 83       	std	Z+1, r24	; 0x01
   10232:	92 83       	std	Z+2, r25	; 0x02
   10234:	a3 83       	std	Z+3, r26	; 0x03
   10236:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
    return(size);
}
   1023a:	c7 01       	movw	r24, r14
   1023c:	b6 01       	movw	r22, r12
   1023e:	c9 5f       	subi	r28, 0xF9	; 249
   10240:	de 4f       	sbci	r29, 0xFE	; 254
   10242:	ec e0       	ldi	r30, 0x0C	; 12
   10244:	0c 94 c6 e8 	jmp	0x1d18c	; 0x1d18c <__epilogue_restores__+0xc>

00010248 <ls_info>:
/// @param[in] path: file name or directory
/// @param[in] verbose: 1 = detail, 0 = name only
/// @return  1 on success 0 on fail
MEMSPACE
int ls_info(char *name, int verbose)
{
   10248:	4f 92       	push	r4
   1024a:	5f 92       	push	r5
   1024c:	6f 92       	push	r6
   1024e:	7f 92       	push	r7
   10250:	af 92       	push	r10
   10252:	bf 92       	push	r11
   10254:	cf 92       	push	r12
   10256:	df 92       	push	r13
   10258:	ef 92       	push	r14
   1025a:	ff 92       	push	r15
   1025c:	0f 93       	push	r16
   1025e:	1f 93       	push	r17
   10260:	cf 93       	push	r28
   10262:	df 93       	push	r29
   10264:	cd b7       	in	r28, 0x3d	; 61
   10266:	de b7       	in	r29, 0x3e	; 62
   10268:	c9 54       	subi	r28, 0x49	; 73
   1026a:	d1 09       	sbc	r29, r1
   1026c:	0f b6       	in	r0, 0x3f	; 63
   1026e:	f8 94       	cli
   10270:	de bf       	out	0x3e, r29	; 62
   10272:	0f be       	out	0x3f, r0	; 63
   10274:	cd bf       	out	0x3d, r28	; 61
   10276:	8c 01       	movw	r16, r24
   10278:	7b 01       	movw	r14, r22
    struct stat sp;
    uint16_t mask;
    char *cm = "rwx";
    char attr[12], *p;

    if(stat(name, &sp) == -1)
   1027a:	be 01       	movw	r22, r28
   1027c:	62 5f       	subi	r22, 0xF2	; 242
   1027e:	7f 4f       	sbci	r23, 0xFF	; 255
   10280:	18 d9       	rcall	.-3536   	; 0xf4b2 <stat>
   10282:	01 96       	adiw	r24, 0x01	; 1
   10284:	79 f4       	brne	.+30     	; 0x102a4 <ls_info+0x5c>
    {
        printf("can not stat: %s\n", name);
   10286:	ed b7       	in	r30, 0x3d	; 61
   10288:	fe b7       	in	r31, 0x3e	; 62
   1028a:	15 83       	std	Z+5, r17	; 0x05
   1028c:	04 83       	std	Z+4, r16	; 0x04
   1028e:	83 e7       	ldi	r24, 0x73	; 115
   10290:	9c e0       	ldi	r25, 0x0C	; 12
   10292:	a0 e0       	ldi	r26, 0x00	; 0
   10294:	81 83       	std	Z+1, r24	; 0x01
   10296:	92 83       	std	Z+2, r25	; 0x02
   10298:	a3 83       	std	Z+3, r26	; 0x03
   1029a:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
        return(0);
   1029e:	80 e0       	ldi	r24, 0x00	; 0
   102a0:	90 e0       	ldi	r25, 0x00	; 0
   102a2:	77 c0       	rjmp	.+238    	; 0x10392 <ls_info+0x14a>
    }

    if(!verbose)
   102a4:	ef 28       	or	r14, r15
   102a6:	81 f4       	brne	.+32     	; 0x102c8 <ls_info+0x80>
    {
        printf("%s\n",basename(name));
   102a8:	c8 01       	movw	r24, r16
   102aa:	0e 94 25 78 	call	0xf04a	; 0xf04a <basename>
   102ae:	ed b7       	in	r30, 0x3d	; 61
   102b0:	fe b7       	in	r31, 0x3e	; 62
   102b2:	95 83       	std	Z+5, r25	; 0x05
   102b4:	84 83       	std	Z+4, r24	; 0x04
   102b6:	8f e6       	ldi	r24, 0x6F	; 111
   102b8:	9c e0       	ldi	r25, 0x0C	; 12
   102ba:	a0 e0       	ldi	r26, 0x00	; 0
   102bc:	81 83       	std	Z+1, r24	; 0x01
   102be:	92 83       	std	Z+2, r25	; 0x02
   102c0:	a3 83       	std	Z+3, r26	; 0x03
   102c2:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
   102c6:	63 c0       	rjmp	.+198    	; 0x1038e <ls_info+0x146>
        return(1);
    }

    p = attr;
    if(S_ISDIR(sp.st_mode))
   102c8:	4e 88       	ldd	r4, Y+22	; 0x16
   102ca:	5f 88       	ldd	r5, Y+23	; 0x17
   102cc:	68 8c       	ldd	r6, Y+24	; 0x18
   102ce:	79 8c       	ldd	r7, Y+25	; 0x19
   102d0:	d3 01       	movw	r26, r6
   102d2:	c2 01       	movw	r24, r4
   102d4:	88 27       	eor	r24, r24
   102d6:	90 7f       	andi	r25, 0xF0	; 240
   102d8:	aa 27       	eor	r26, r26
   102da:	bb 27       	eor	r27, r27
   102dc:	81 15       	cp	r24, r1
   102de:	90 44       	sbci	r25, 0x40	; 64
   102e0:	a1 05       	cpc	r26, r1
   102e2:	b1 05       	cpc	r27, r1
   102e4:	11 f4       	brne	.+4      	; 0x102ea <ls_info+0xa2>
        *p++ = 'd';
   102e6:	84 e6       	ldi	r24, 0x64	; 100
   102e8:	01 c0       	rjmp	.+2      	; 0x102ec <ls_info+0xa4>
    else
        *p++ = '-';
   102ea:	8d e2       	ldi	r24, 0x2D	; 45
   102ec:	8e af       	std	Y+62, r24	; 0x3e
   102ee:	fe 01       	movw	r30, r28
   102f0:	fe 96       	adiw	r30, 0x3e	; 62
/// @param[in] path: file name or directory
/// @param[in] verbose: 1 = detail, 0 = name only
/// @return  1 on success 0 on fail
MEMSPACE
int ls_info(char *name, int verbose)
{
   102f2:	e1 2c       	mov	r14, r1
   102f4:	ff 24       	eor	r15, r15
   102f6:	f3 94       	inc	r15
   102f8:	20 e0       	ldi	r18, 0x00	; 0
   102fa:	30 e0       	ldi	r19, 0x00	; 0
   102fc:	be 2e       	mov	r11, r30
   102fe:	af 2e       	mov	r10, r31
    {
// User
        if( sp.st_mode & mask)
            *p++ = cm[ i % 3];
        else
            *p++ = '-';
   10300:	4d e2       	ldi	r20, 0x2D	; 45
    mask = 4 << 6;
    for(i=0;i<9;++i)
    {
// User
        if( sp.st_mode & mask)
            *p++ = cm[ i % 3];
   10302:	53 e0       	ldi	r21, 0x03	; 3
   10304:	c5 2e       	mov	r12, r21
   10306:	d1 2c       	mov	r13, r1

    mask = 4 << 6;
    for(i=0;i<9;++i)
    {
// User
        if( sp.st_mode & mask)
   10308:	c7 01       	movw	r24, r14
   1030a:	a0 e0       	ldi	r26, 0x00	; 0
   1030c:	b0 e0       	ldi	r27, 0x00	; 0
   1030e:	84 21       	and	r24, r4
   10310:	95 21       	and	r25, r5
   10312:	a6 21       	and	r26, r6
   10314:	b7 21       	and	r27, r7
   10316:	89 2b       	or	r24, r25
   10318:	8a 2b       	or	r24, r26
   1031a:	8b 2b       	or	r24, r27
   1031c:	51 f0       	breq	.+20     	; 0x10332 <ls_info+0xea>
            *p++ = cm[ i % 3];
   1031e:	c9 01       	movw	r24, r18
   10320:	b6 01       	movw	r22, r12
   10322:	0e 94 24 e8 	call	0x1d048	; 0x1d048 <__divmodhi4>
   10326:	dc 01       	movw	r26, r24
   10328:	a8 55       	subi	r26, 0x58	; 88
   1032a:	b4 4f       	sbci	r27, 0xF4	; 244
   1032c:	8c 91       	ld	r24, X
   1032e:	81 83       	std	Z+1, r24	; 0x01
   10330:	01 c0       	rjmp	.+2      	; 0x10334 <ls_info+0xec>
        else
            *p++ = '-';
   10332:	41 83       	std	Z+1, r20	; 0x01
        mask >>= 1;
   10334:	f6 94       	lsr	r15
   10336:	e7 94       	ror	r14
        *p++ = 'd';
    else
        *p++ = '-';

    mask = 4 << 6;
    for(i=0;i<9;++i)
   10338:	2f 5f       	subi	r18, 0xFF	; 255
   1033a:	3f 4f       	sbci	r19, 0xFF	; 255
   1033c:	31 96       	adiw	r30, 0x01	; 1
   1033e:	29 30       	cpi	r18, 0x09	; 9
   10340:	31 05       	cpc	r19, r1
   10342:	11 f7       	brne	.-60     	; 0x10308 <ls_info+0xc0>
            *p++ = cm[ i % 3];
        else
            *p++ = '-';
        mask >>= 1;
    }
    *p = 0;
   10344:	29 96       	adiw	r28, 0x09	; 9
   10346:	1f ae       	std	Y+63, r1	; 0x3f
   10348:	29 97       	sbiw	r28, 0x09	; 9

    printf("%s none none %12ld %s %s\n",
   1034a:	4e a0       	ldd	r4, Y+38	; 0x26
   1034c:	5f a0       	ldd	r5, Y+39	; 0x27
   1034e:	68 a4       	ldd	r6, Y+40	; 0x28
   10350:	79 a4       	ldd	r7, Y+41	; 0x29
   10352:	6e a9       	ldd	r22, Y+54	; 0x36
   10354:	7f a9       	ldd	r23, Y+55	; 0x37
   10356:	88 ad       	ldd	r24, Y+56	; 0x38
   10358:	99 ad       	ldd	r25, Y+57	; 0x39
   1035a:	0e 94 00 78 	call	0xf000	; 0xf000 <mctime>
   1035e:	7c 01       	movw	r14, r24
   10360:	c8 01       	movw	r24, r16
   10362:	0e 94 25 78 	call	0xf04a	; 0xf04a <basename>
   10366:	ed b7       	in	r30, 0x3d	; 61
   10368:	fe b7       	in	r31, 0x3e	; 62
   1036a:	95 87       	std	Z+13, r25	; 0x0d
   1036c:	84 87       	std	Z+12, r24	; 0x0c
   1036e:	f3 86       	std	Z+11, r15	; 0x0b
   10370:	e2 86       	std	Z+10, r14	; 0x0a
   10372:	46 82       	std	Z+6, r4	; 0x06
   10374:	57 82       	std	Z+7, r5	; 0x07
   10376:	60 86       	std	Z+8, r6	; 0x08
   10378:	71 86       	std	Z+9, r7	; 0x09
   1037a:	b4 82       	std	Z+4, r11	; 0x04
   1037c:	a5 82       	std	Z+5, r10	; 0x05
   1037e:	85 e5       	ldi	r24, 0x55	; 85
   10380:	9c e0       	ldi	r25, 0x0C	; 12
   10382:	a0 e0       	ldi	r26, 0x00	; 0
   10384:	81 83       	std	Z+1, r24	; 0x01
   10386:	92 83       	std	Z+2, r25	; 0x02
   10388:	a3 83       	std	Z+3, r26	; 0x03
   1038a:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
        attr,
        (long) sp.st_size,
        mctime((time_t)sp.st_mtime),
        basename(name));
    return(1);
   1038e:	81 e0       	ldi	r24, 0x01	; 1
   10390:	90 e0       	ldi	r25, 0x00	; 0
}
   10392:	c7 5b       	subi	r28, 0xB7	; 183
   10394:	df 4f       	sbci	r29, 0xFF	; 255
   10396:	0f b6       	in	r0, 0x3f	; 63
   10398:	f8 94       	cli
   1039a:	de bf       	out	0x3e, r29	; 62
   1039c:	0f be       	out	0x3f, r0	; 63
   1039e:	cd bf       	out	0x3d, r28	; 61
   103a0:	df 91       	pop	r29
   103a2:	cf 91       	pop	r28
   103a4:	1f 91       	pop	r17
   103a6:	0f 91       	pop	r16
   103a8:	ff 90       	pop	r15
   103aa:	ef 90       	pop	r14
   103ac:	df 90       	pop	r13
   103ae:	cf 90       	pop	r12
   103b0:	bf 90       	pop	r11
   103b2:	af 90       	pop	r10
   103b4:	7f 90       	pop	r7
   103b6:	6f 90       	pop	r6
   103b8:	5f 90       	pop	r5
   103ba:	4f 90       	pop	r4
   103bc:	08 95       	ret

000103be <ls>:
/// @param[in] path: file name or directory
/// @param[in] option: -l for detail
/// @return  number of files or -1 on error
MEMSPACE
int ls(char *name, int verbose)
{
   103be:	2f 92       	push	r2
   103c0:	3f 92       	push	r3
   103c2:	4f 92       	push	r4
   103c4:	5f 92       	push	r5
   103c6:	6f 92       	push	r6
   103c8:	8f 92       	push	r8
   103ca:	9f 92       	push	r9
   103cc:	af 92       	push	r10
   103ce:	bf 92       	push	r11
   103d0:	cf 92       	push	r12
   103d2:	df 92       	push	r13
   103d4:	ef 92       	push	r14
   103d6:	ff 92       	push	r15
   103d8:	0f 93       	push	r16
   103da:	1f 93       	push	r17
   103dc:	cf 93       	push	r28
   103de:	df 93       	push	r29
   103e0:	cd b7       	in	r28, 0x3d	; 61
   103e2:	de b7       	in	r29, 0x3e	; 62
   103e4:	c8 53       	subi	r28, 0x38	; 56
   103e6:	d1 40       	sbci	r29, 0x01	; 1
   103e8:	0f b6       	in	r0, 0x3f	; 63
   103ea:	f8 94       	cli
   103ec:	de bf       	out	0x3e, r29	; 62
   103ee:	0f be       	out	0x3f, r0	; 63
   103f0:	cd bf       	out	0x3d, r28	; 61
   103f2:	7c 01       	movw	r14, r24
   103f4:	4b 01       	movw	r8, r22
    int files = 0;
    int len,len2;
    dirent_t *de;
    char fullpath[MAX_NAME_LEN+1];

    fullpath[0] = 0;
   103f6:	1e 82       	std	Y+6, r1	; 0x06
   103f8:	8e 01       	movw	r16, r28
   103fa:	0a 5f       	subi	r16, 0xFA	; 250
   103fc:	1f 4f       	sbci	r17, 0xFF	; 255
    if(!name || !*name || MATCH(name,".") )
   103fe:	00 97       	sbiw	r24, 0x00	; 0
   10400:	51 f4       	brne	.+20     	; 0x10416 <ls+0x58>
    {
        if( !getcwd(fullpath, sizeof(fullpath)-2) )
   10402:	6f ef       	ldi	r22, 0xFF	; 255
   10404:	70 e0       	ldi	r23, 0x00	; 0
   10406:	c8 01       	movw	r24, r16
   10408:	0e 94 7b 78 	call	0xf0f6	; 0xf0f6 <getcwd>
   1040c:	89 2b       	or	r24, r25
   1040e:	91 f4       	brne	.+36     	; 0x10434 <ls+0x76>
        {
            printf("ls: Can't get current directory\n");
   10410:	84 e3       	ldi	r24, 0x34	; 52
   10412:	9c e0       	ldi	r25, 0x0C	; 12
   10414:	6a c0       	rjmp	.+212    	; 0x104ea <ls+0x12c>
    int len,len2;
    dirent_t *de;
    char fullpath[MAX_NAME_LEN+1];

    fullpath[0] = 0;
    if(!name || !*name || MATCH(name,".") )
   10416:	fc 01       	movw	r30, r24
   10418:	80 81       	ld	r24, Z
   1041a:	88 23       	and	r24, r24
   1041c:	91 f3       	breq	.-28     	; 0x10402 <ls+0x44>
   1041e:	66 ee       	ldi	r22, 0xE6	; 230
   10420:	72 e1       	ldi	r23, 0x12	; 18
   10422:	c7 01       	movw	r24, r14
   10424:	0e 94 35 33 	call	0x666a	; 0x666a <MATCH>
   10428:	89 2b       	or	r24, r25
   1042a:	59 f7       	brne	.-42     	; 0x10402 <ls+0x44>

        }
    }
    else
    {
        strcpy(fullpath,name);
   1042c:	b7 01       	movw	r22, r14
   1042e:	c8 01       	movw	r24, r16
   10430:	0e 94 3d 32 	call	0x647a	; 0x647a <strcpy>
    }
    len = strlen(fullpath);
   10434:	f8 01       	movw	r30, r16
   10436:	01 90       	ld	r0, Z+
   10438:	00 20       	and	r0, r0
   1043a:	e9 f7       	brne	.-6      	; 0x10436 <ls+0x78>
   1043c:	31 97       	sbiw	r30, 0x01	; 1
   1043e:	1f 01       	movw	r2, r30
   10440:	20 1a       	sub	r2, r16
   10442:	31 0a       	sbc	r3, r17


    if (stat(fullpath, &st))
   10444:	be 01       	movw	r22, r28
   10446:	69 5f       	subi	r22, 0xF9	; 249
   10448:	7e 4f       	sbci	r23, 0xFE	; 254
   1044a:	c8 01       	movw	r24, r16
   1044c:	32 d8       	rcall	.-3996   	; 0xf4b2 <stat>
    {
        printf("ls: cannot stat [%s]\n", fullpath);
   1044e:	ed b7       	in	r30, 0x3d	; 61
   10450:	fe b7       	in	r31, 0x3e	; 62
   10452:	15 83       	std	Z+5, r17	; 0x05
   10454:	04 83       	std	Z+4, r16	; 0x04
        strcpy(fullpath,name);
    }
    len = strlen(fullpath);


    if (stat(fullpath, &st))
   10456:	89 2b       	or	r24, r25
   10458:	59 f0       	breq	.+22     	; 0x10470 <ls+0xb2>
    {
        printf("ls: cannot stat [%s]\n", fullpath);
   1045a:	8e e1       	ldi	r24, 0x1E	; 30
   1045c:	9c e0       	ldi	r25, 0x0C	; 12
   1045e:	a0 e0       	ldi	r26, 0x00	; 0
   10460:	81 83       	std	Z+1, r24	; 0x01
   10462:	92 83       	std	Z+2, r25	; 0x02
   10464:	a3 83       	std	Z+3, r26	; 0x03
   10466:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
        return(-1);
   1046a:	8f ef       	ldi	r24, 0xFF	; 255
   1046c:	9f ef       	ldi	r25, 0xFF	; 255
   1046e:	96 c0       	rjmp	.+300    	; 0x1059c <ls+0x1de>
    }
    printf("Listing:[%s]\n",fullpath);
   10470:	80 e1       	ldi	r24, 0x10	; 16
   10472:	9c e0       	ldi	r25, 0x0C	; 12
   10474:	a0 e0       	ldi	r26, 0x00	; 0
   10476:	81 83       	std	Z+1, r24	; 0x01
   10478:	92 83       	std	Z+2, r25	; 0x02
   1047a:	a3 83       	std	Z+3, r26	; 0x03
   1047c:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>

    switch (st.st_mode & S_IFMT)
   10480:	c1 5f       	subi	r28, 0xF1	; 241
   10482:	de 4f       	sbci	r29, 0xFE	; 254
   10484:	88 81       	ld	r24, Y
   10486:	99 81       	ldd	r25, Y+1	; 0x01
   10488:	aa 81       	ldd	r26, Y+2	; 0x02
   1048a:	bb 81       	ldd	r27, Y+3	; 0x03
   1048c:	cf 50       	subi	r28, 0x0F	; 15
   1048e:	d1 40       	sbci	r29, 0x01	; 1
   10490:	88 27       	eor	r24, r24
   10492:	90 7f       	andi	r25, 0xF0	; 240
   10494:	aa 27       	eor	r26, r26
   10496:	bb 27       	eor	r27, r27
   10498:	81 15       	cp	r24, r1
   1049a:	f0 e4       	ldi	r31, 0x40	; 64
   1049c:	9f 07       	cpc	r25, r31
   1049e:	a1 05       	cpc	r26, r1
   104a0:	b1 05       	cpc	r27, r1
   104a2:	59 f0       	breq	.+22     	; 0x104ba <ls+0xfc>
   104a4:	81 15       	cp	r24, r1
   104a6:	90 48       	sbci	r25, 0x80	; 128
   104a8:	a1 05       	cpc	r26, r1
   104aa:	b1 05       	cpc	r27, r1
   104ac:	09 f0       	breq	.+2      	; 0x104b0 <ls+0xf2>
   104ae:	67 c0       	rjmp	.+206    	; 0x1057e <ls+0x1c0>
    {
        case S_IFREG:
            files = ls_info(fullpath,verbose);
   104b0:	b4 01       	movw	r22, r8
   104b2:	c8 01       	movw	r24, r16
   104b4:	c9 de       	rcall	.-622    	; 0x10248 <ls_info>
   104b6:	7c 01       	movw	r14, r24
            break;
   104b8:	64 c0       	rjmp	.+200    	; 0x10582 <ls+0x1c4>
        case S_IFDIR:
            dirp = opendir(fullpath);
   104ba:	c8 01       	movw	r24, r16
   104bc:	0e 94 29 79 	call	0xf252	; 0xf252 <opendir>
   104c0:	5c 01       	movw	r10, r24
            if(!dirp)
   104c2:	89 2b       	or	r24, r25
   104c4:	81 f0       	breq	.+32     	; 0x104e6 <ls+0x128>
    }
    else
    {
        strcpy(fullpath,name);
    }
    len = strlen(fullpath);
   104c6:	e1 2c       	mov	r14, r1
   104c8:	f1 2c       	mov	r15, r1
                    strcat(fullpath,"/");
                }
                strcat(fullpath,de->d_name);
                files +=ls_info(fullpath,verbose);
// restore path
                fullpath[len] = 0;
   104ca:	c8 01       	movw	r24, r16
   104cc:	82 0d       	add	r24, r2
   104ce:	93 1d       	adc	r25, r3
   104d0:	c9 5c       	subi	r28, 0xC9	; 201
   104d2:	de 4f       	sbci	r29, 0xFE	; 254
   104d4:	99 83       	std	Y+1, r25	; 0x01
   104d6:	88 83       	st	Y, r24
   104d8:	c7 53       	subi	r28, 0x37	; 55
   104da:	d1 40       	sbci	r29, 0x01	; 1
                    break;
// FIXME neeed beetter string length tests here
                len2 = strlen(de->d_name);
                if(len + len2 >= MAX_NAME_LEN)
                {
                    printf("name:[%s] too long with full path\n",de->d_name);
   104dc:	8d ed       	ldi	r24, 0xDD	; 221
   104de:	9b e0       	ldi	r25, 0x0B	; 11
   104e0:	2c 01       	movw	r4, r24
   104e2:	61 2c       	mov	r6, r1
   104e4:	25 c0       	rjmp	.+74     	; 0x10530 <ls+0x172>
            break;
        case S_IFDIR:
            dirp = opendir(fullpath);
            if(!dirp)
            {
                printf("opendir failed\n");
   104e6:	80 e0       	ldi	r24, 0x00	; 0
   104e8:	9c e0       	ldi	r25, 0x0C	; 12
   104ea:	a0 e0       	ldi	r26, 0x00	; 0
   104ec:	ed b7       	in	r30, 0x3d	; 61
   104ee:	fe b7       	in	r31, 0x3e	; 62
   104f0:	81 83       	std	Z+1, r24	; 0x01
   104f2:	92 83       	std	Z+2, r25	; 0x02
   104f4:	a3 83       	std	Z+3, r26	; 0x03
   104f6:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
   104fa:	b7 cf       	rjmp	.-146    	; 0x1046a <ls+0xac>
                return(-1);
            }
            while ( (de = readdir(dirp)) )
            {
                if(de->d_name[0] == 0)
   104fc:	f6 01       	movw	r30, r12
   104fe:	80 81       	ld	r24, Z
   10500:	88 23       	and	r24, r24
   10502:	e1 f0       	breq	.+56     	; 0x1053c <ls+0x17e>
                    break;
// FIXME neeed beetter string length tests here
                len2 = strlen(de->d_name);
   10504:	f6 01       	movw	r30, r12
   10506:	01 90       	ld	r0, Z+
   10508:	00 20       	and	r0, r0
   1050a:	e9 f7       	brne	.-6      	; 0x10506 <ls+0x148>
   1050c:	31 97       	sbiw	r30, 0x01	; 1
   1050e:	ec 19       	sub	r30, r12
   10510:	fd 09       	sbc	r31, r13
                if(len + len2 >= MAX_NAME_LEN)
   10512:	e2 0d       	add	r30, r2
   10514:	f3 1d       	adc	r31, r3
   10516:	ef 3f       	cpi	r30, 0xFF	; 255
   10518:	f1 05       	cpc	r31, r1
   1051a:	a1 f0       	breq	.+40     	; 0x10544 <ls+0x186>
   1051c:	9c f0       	brlt	.+38     	; 0x10544 <ls+0x186>
                {
                    printf("name:[%s] too long with full path\n",de->d_name);
   1051e:	ed b7       	in	r30, 0x3d	; 61
   10520:	fe b7       	in	r31, 0x3e	; 62
   10522:	d5 82       	std	Z+5, r13	; 0x05
   10524:	c4 82       	std	Z+4, r12	; 0x04
   10526:	41 82       	std	Z+1, r4	; 0x01
   10528:	52 82       	std	Z+2, r5	; 0x02
   1052a:	63 82       	std	Z+3, r6	; 0x03
   1052c:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
            if(!dirp)
            {
                printf("opendir failed\n");
                return(-1);
            }
            while ( (de = readdir(dirp)) )
   10530:	c5 01       	movw	r24, r10
   10532:	0e 94 47 79 	call	0xf28e	; 0xf28e <readdir>
   10536:	6c 01       	movw	r12, r24
   10538:	89 2b       	or	r24, r25
   1053a:	01 f7       	brne	.-64     	; 0x104fc <ls+0x13e>
#ifdef ESP8266
                optimistic_yield(1000);
                wdt_reset();
#endif
            }
            closedir(dirp);
   1053c:	c5 01       	movw	r24, r10
   1053e:	0e 94 0e 79 	call	0xf21c	; 0xf21c <closedir>
            break;
   10542:	1f c0       	rjmp	.+62     	; 0x10582 <ls+0x1c4>
                if(len + len2 >= MAX_NAME_LEN)
                {
                    printf("name:[%s] too long with full path\n",de->d_name);
                    continue;
                }
                if(!MATCH(fullpath,"/") )
   10544:	66 ea       	ldi	r22, 0xA6	; 166
   10546:	78 e0       	ldi	r23, 0x08	; 8
   10548:	c8 01       	movw	r24, r16
   1054a:	0e 94 35 33 	call	0x666a	; 0x666a <MATCH>
   1054e:	89 2b       	or	r24, r25
   10550:	29 f4       	brne	.+10     	; 0x1055c <ls+0x19e>
                {
                    strcat(fullpath,"/");
   10552:	66 ea       	ldi	r22, 0xA6	; 166
   10554:	78 e0       	ldi	r23, 0x08	; 8
   10556:	c8 01       	movw	r24, r16
   10558:	0e 94 5e 32 	call	0x64bc	; 0x64bc <strcat>
                }
                strcat(fullpath,de->d_name);
   1055c:	b6 01       	movw	r22, r12
   1055e:	c8 01       	movw	r24, r16
   10560:	0e 94 5e 32 	call	0x64bc	; 0x64bc <strcat>
                files +=ls_info(fullpath,verbose);
   10564:	b4 01       	movw	r22, r8
   10566:	c8 01       	movw	r24, r16
   10568:	6f de       	rcall	.-802    	; 0x10248 <ls_info>
   1056a:	e8 0e       	add	r14, r24
   1056c:	f9 1e       	adc	r15, r25
// restore path
                fullpath[len] = 0;
   1056e:	c9 5c       	subi	r28, 0xC9	; 201
   10570:	de 4f       	sbci	r29, 0xFE	; 254
   10572:	e8 81       	ld	r30, Y
   10574:	f9 81       	ldd	r31, Y+1	; 0x01
   10576:	c7 53       	subi	r28, 0x37	; 55
   10578:	d1 40       	sbci	r29, 0x01	; 1
   1057a:	10 82       	st	Z, r1
   1057c:	d9 cf       	rjmp	.-78     	; 0x10530 <ls+0x172>
MEMSPACE
int ls(char *name, int verbose)
{
    struct stat st;
    DIR *dirp;
    int files = 0;
   1057e:	e1 2c       	mov	r14, r1
   10580:	f1 2c       	mov	r15, r1
#endif
            }
            closedir(dirp);
            break;
    }
    printf("Files: %d\n", (int)files);
   10582:	ed b7       	in	r30, 0x3d	; 61
   10584:	fe b7       	in	r31, 0x3e	; 62
   10586:	f5 82       	std	Z+5, r15	; 0x05
   10588:	e4 82       	std	Z+4, r14	; 0x04
   1058a:	82 ed       	ldi	r24, 0xD2	; 210
   1058c:	9b e0       	ldi	r25, 0x0B	; 11
   1058e:	a0 e0       	ldi	r26, 0x00	; 0
   10590:	81 83       	std	Z+1, r24	; 0x01
   10592:	92 83       	std	Z+2, r25	; 0x02
   10594:	a3 83       	std	Z+3, r26	; 0x03
   10596:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
    return(files);
   1059a:	c7 01       	movw	r24, r14
}
   1059c:	c8 5c       	subi	r28, 0xC8	; 200
   1059e:	de 4f       	sbci	r29, 0xFE	; 254
   105a0:	0f b6       	in	r0, 0x3f	; 63
   105a2:	f8 94       	cli
   105a4:	de bf       	out	0x3e, r29	; 62
   105a6:	0f be       	out	0x3f, r0	; 63
   105a8:	cd bf       	out	0x3d, r28	; 61
   105aa:	df 91       	pop	r29
   105ac:	cf 91       	pop	r28
   105ae:	1f 91       	pop	r17
   105b0:	0f 91       	pop	r16
   105b2:	ff 90       	pop	r15
   105b4:	ef 90       	pop	r14
   105b6:	df 90       	pop	r13
   105b8:	cf 90       	pop	r12
   105ba:	bf 90       	pop	r11
   105bc:	af 90       	pop	r10
   105be:	9f 90       	pop	r9
   105c0:	8f 90       	pop	r8
   105c2:	6f 90       	pop	r6
   105c4:	5f 90       	pop	r5
   105c6:	4f 90       	pop	r4
   105c8:	3f 90       	pop	r3
   105ca:	2f 90       	pop	r2
   105cc:	08 95       	ret

000105ce <posix_tests>:
///
/// @return 1 The ruturn code indicates a command matched.
/// @return 0 if no rules matched
MEMSPACE
int posix_tests(int argc,char *argv[])
{
   105ce:	a8 e0       	ldi	r26, 0x08	; 8
   105d0:	b1 e0       	ldi	r27, 0x01	; 1
   105d2:	ed ee       	ldi	r30, 0xED	; 237
   105d4:	f2 e8       	ldi	r31, 0x82	; 130
   105d6:	0c 94 a6 e8 	jmp	0x1d14c	; 0x1d14c <__prologue_saves__+0x4>
    char *ptr;
    int ind = 0;

	if(argc < 1)
   105da:	18 16       	cp	r1, r24
   105dc:	19 06       	cpc	r1, r25
   105de:	1c f0       	brlt	.+6      	; 0x105e6 <posix_tests+0x18>
		return(0);
   105e0:	80 e0       	ldi	r24, 0x00	; 0
   105e2:	90 e0       	ldi	r25, 0x00	; 0
   105e4:	dd c1       	rjmp	.+954    	; 0x109a0 <posix_tests+0x3d2>

    ptr = argv[ind++];
   105e6:	fb 01       	movw	r30, r22
   105e8:	c0 80       	ld	r12, Z
   105ea:	d1 80       	ldd	r13, Z+1	; 0x01
	printf("argv[%d]=%s\n",(int)i, argv[i]);
}
#endif


    if(!ptr)
   105ec:	c1 14       	cp	r12, r1
   105ee:	d1 04       	cpc	r13, r1
   105f0:	b9 f3       	breq	.-18     	; 0x105e0 <posix_tests+0x12>
   105f2:	4b 01       	movw	r8, r22
   105f4:	3c 01       	movw	r6, r24
        return(0);	// nothing no match

    if( MATCH(ptr,"posix") )
   105f6:	6c ea       	ldi	r22, 0xAC	; 172
   105f8:	7b e0       	ldi	r23, 0x0B	; 11
   105fa:	c6 01       	movw	r24, r12
   105fc:	0e 94 35 33 	call	0x666a	; 0x666a <MATCH>
   10600:	89 2b       	or	r24, r25
   10602:	a1 f0       	breq	.+40     	; 0x1062c <posix_tests+0x5e>
    {
        ptr = argv[ind++];
   10604:	f4 01       	movw	r30, r8
   10606:	c2 80       	ldd	r12, Z+2	; 0x02
   10608:	d3 80       	ldd	r13, Z+3	; 0x03
        if ( !ptr || MATCH(ptr,"help") )
   1060a:	c1 14       	cp	r12, r1
   1060c:	d1 04       	cpc	r13, r1
   1060e:	21 f4       	brne	.+8      	; 0x10618 <posix_tests+0x4a>
        {
            posix_help(1);
   10610:	81 e0       	ldi	r24, 0x01	; 1
   10612:	90 e0       	ldi	r25, 0x00	; 0
   10614:	75 dc       	rcall	.-1814   	; 0xff00 <posix_help>
   10616:	45 c1       	rjmp	.+650    	; 0x108a2 <posix_tests+0x2d4>
        return(0);	// nothing no match

    if( MATCH(ptr,"posix") )
    {
        ptr = argv[ind++];
        if ( !ptr || MATCH(ptr,"help") )
   10618:	62 e6       	ldi	r22, 0x62	; 98
   1061a:	76 e1       	ldi	r23, 0x16	; 22
   1061c:	c6 01       	movw	r24, r12
   1061e:	0e 94 35 33 	call	0x666a	; 0x666a <MATCH>
   10622:	89 2b       	or	r24, r25
   10624:	a9 f7       	brne	.-22     	; 0x10610 <posix_tests+0x42>
    if(!ptr)
        return(0);	// nothing no match

    if( MATCH(ptr,"posix") )
    {
        ptr = argv[ind++];
   10626:	02 e0       	ldi	r16, 0x02	; 2
   10628:	10 e0       	ldi	r17, 0x00	; 0
   1062a:	02 c0       	rjmp	.+4      	; 0x10630 <posix_tests+0x62>
    int ind = 0;

	if(argc < 1)
		return(0);

    ptr = argv[ind++];
   1062c:	01 e0       	ldi	r16, 0x01	; 1
   1062e:	10 e0       	ldi	r17, 0x00	; 0
            posix_help(1);
            return(1);
        }
    }

    if (MATCHARGS(ptr,"cat", (ind + 1), argc))
   10630:	78 01       	movw	r14, r16
   10632:	ff ef       	ldi	r31, 0xFF	; 255
   10634:	ef 1a       	sub	r14, r31
   10636:	ff 0a       	sbc	r15, r31
   10638:	93 01       	movw	r18, r6
   1063a:	a7 01       	movw	r20, r14
   1063c:	62 eb       	ldi	r22, 0xB2	; 178
   1063e:	7b e0       	ldi	r23, 0x0B	; 11
   10640:	c6 01       	movw	r24, r12
   10642:	0e 94 5d 33 	call	0x66ba	; 0x66ba <MATCHARGS>
   10646:	89 2b       	or	r24, r25
   10648:	99 f1       	breq	.+102    	; 0x106b0 <posix_tests+0xe2>
   1064a:	78 01       	movw	r14, r16
   1064c:	ee 0c       	add	r14, r14
   1064e:	ff 1c       	adc	r15, r15
   10650:	e8 0c       	add	r14, r8
   10652:	f9 1c       	adc	r15, r9
   10654:	57 01       	movw	r10, r14
   10656:	47 01       	movw	r8, r14
   10658:	68 01       	movw	r12, r16
   1065a:	41 2c       	mov	r4, r1
   1065c:	51 2c       	mov	r5, r1
    {
        int i;
        int page = 0;
        for(i=ind;i<argc;++i)
   1065e:	c6 14       	cp	r12, r6
   10660:	d7 04       	cpc	r13, r7
   10662:	14 f5       	brge	.+68     	; 0x106a8 <posix_tests+0xda>
        {
            if(MATCH(argv[i],"-p"))
   10664:	66 eb       	ldi	r22, 0xB6	; 182
   10666:	7b e0       	ldi	r23, 0x0B	; 11
   10668:	f4 01       	movw	r30, r8
   1066a:	81 91       	ld	r24, Z+
   1066c:	91 91       	ld	r25, Z+
   1066e:	4f 01       	movw	r8, r30
   10670:	0e 94 35 33 	call	0x666a	; 0x666a <MATCH>
   10674:	89 2b       	or	r24, r25
   10676:	19 f0       	breq	.+6      	; 0x1067e <posix_tests+0xb0>
                page = 1;
   10678:	44 24       	eor	r4, r4
   1067a:	43 94       	inc	r4
   1067c:	51 2c       	mov	r5, r1

    if (MATCHARGS(ptr,"cat", (ind + 1), argc))
    {
        int i;
        int page = 0;
        for(i=ind;i<argc;++i)
   1067e:	ff ef       	ldi	r31, 0xFF	; 255
   10680:	cf 1a       	sub	r12, r31
   10682:	df 0a       	sbc	r13, r31
   10684:	ec cf       	rjmp	.-40     	; 0x1065e <posix_tests+0x90>
            if(MATCH(argv[i],"-p"))
                page = 1;
        }
        for(i=ind;i<argc;++i)
        {
            if(!MATCH(argv[i],"-p"))
   10686:	66 eb       	ldi	r22, 0xB6	; 182
   10688:	7b e0       	ldi	r23, 0x0B	; 11
   1068a:	f5 01       	movw	r30, r10
   1068c:	81 91       	ld	r24, Z+
   1068e:	91 91       	ld	r25, Z+
   10690:	5f 01       	movw	r10, r30
   10692:	0e 94 35 33 	call	0x666a	; 0x666a <MATCH>
   10696:	89 2b       	or	r24, r25
   10698:	29 f4       	brne	.+10     	; 0x106a4 <posix_tests+0xd6>
			{
				// displays its own errors
                cat(argv[ind], page);
   1069a:	b2 01       	movw	r22, r4
   1069c:	f7 01       	movw	r30, r14
   1069e:	80 81       	ld	r24, Z
   106a0:	91 81       	ldd	r25, Z+1	; 0x01
   106a2:	65 dd       	rcall	.-1334   	; 0x1016e <cat>
        for(i=ind;i<argc;++i)
        {
            if(MATCH(argv[i],"-p"))
                page = 1;
        }
        for(i=ind;i<argc;++i)
   106a4:	0f 5f       	subi	r16, 0xFF	; 255
   106a6:	1f 4f       	sbci	r17, 0xFF	; 255
   106a8:	06 15       	cp	r16, r6
   106aa:	17 05       	cpc	r17, r7
   106ac:	64 f3       	brlt	.-40     	; 0x10686 <posix_tests+0xb8>
   106ae:	f9 c0       	rjmp	.+498    	; 0x108a2 <posix_tests+0x2d4>
		}
        return(1);
    }
#endif

    else if (MATCHARGS(ptr,"copy", (ind + 2), argc))
   106b0:	58 01       	movw	r10, r16
   106b2:	f2 e0       	ldi	r31, 0x02	; 2
   106b4:	af 0e       	add	r10, r31
   106b6:	b1 1c       	adc	r11, r1
   106b8:	93 01       	movw	r18, r6
   106ba:	a5 01       	movw	r20, r10
   106bc:	69 eb       	ldi	r22, 0xB9	; 185
   106be:	7b e0       	ldi	r23, 0x0B	; 11
   106c0:	c6 01       	movw	r24, r12
   106c2:	0e 94 5d 33 	call	0x66ba	; 0x66ba <MATCHARGS>
   106c6:	89 2b       	or	r24, r25
   106c8:	69 f0       	breq	.+26     	; 0x106e4 <posix_tests+0x116>
    {
		if( copy(argv[ind],argv[ind+1]) < 0)
   106ca:	f8 01       	movw	r30, r16
   106cc:	ee 0f       	add	r30, r30
   106ce:	ff 1f       	adc	r31, r31
   106d0:	e8 0d       	add	r30, r8
   106d2:	f9 1d       	adc	r31, r9
   106d4:	62 81       	ldd	r22, Z+2	; 0x02
   106d6:	73 81       	ldd	r23, Z+3	; 0x03
   106d8:	80 81       	ld	r24, Z
   106da:	91 81       	ldd	r25, Z+1	; 0x01
   106dc:	32 dc       	rcall	.-1948   	; 0xff42 <copy>
   106de:	97 ff       	sbrs	r25, 7
   106e0:	e0 c0       	rjmp	.+448    	; 0x108a2 <posix_tests+0x2d4>
   106e2:	5c c1       	rjmp	.+696    	; 0x1099c <posix_tests+0x3ce>
			return(-1);
        return(1);
    }

    else if (MATCHARGS(ptr,"cd", (ind + 1), argc))
   106e4:	93 01       	movw	r18, r6
   106e6:	a7 01       	movw	r20, r14
   106e8:	6e eb       	ldi	r22, 0xBE	; 190
   106ea:	7b e0       	ldi	r23, 0x0B	; 11
   106ec:	c6 01       	movw	r24, r12
   106ee:	0e 94 5d 33 	call	0x66ba	; 0x66ba <MATCHARGS>
   106f2:	89 2b       	or	r24, r25
   106f4:	b9 f0       	breq	.+46     	; 0x10724 <posix_tests+0x156>
    {
        if ( chdir(argv[ind]) != 0)
   106f6:	78 01       	movw	r14, r16
   106f8:	ee 0c       	add	r14, r14
   106fa:	ff 1c       	adc	r15, r15
   106fc:	e8 0c       	add	r14, r8
   106fe:	f9 1c       	adc	r15, r9
   10700:	f7 01       	movw	r30, r14
   10702:	80 81       	ld	r24, Z
   10704:	91 81       	ldd	r25, Z+1	; 0x01
   10706:	0e 94 33 78 	call	0xf066	; 0xf066 <chdir>
   1070a:	89 2b       	or	r24, r25
   1070c:	09 f4       	brne	.+2      	; 0x10710 <posix_tests+0x142>
   1070e:	c9 c0       	rjmp	.+402    	; 0x108a2 <posix_tests+0x2d4>
		{
            printf("chdir %s failed\n", argv[ind]);
   10710:	f7 01       	movw	r30, r14
   10712:	80 81       	ld	r24, Z
   10714:	91 81       	ldd	r25, Z+1	; 0x01
   10716:	ed b7       	in	r30, 0x3d	; 61
   10718:	fe b7       	in	r31, 0x3e	; 62
   1071a:	95 83       	std	Z+5, r25	; 0x05
   1071c:	84 83       	std	Z+4, r24	; 0x04
   1071e:	89 e8       	ldi	r24, 0x89	; 137
   10720:	9d e0       	ldi	r25, 0x0D	; 13
   10722:	36 c1       	rjmp	.+620    	; 0x10990 <posix_tests+0x3c2>
			return(-1);
        return(1);
    }
#endif

    else if (MATCHI(ptr,"ls") )
   10724:	68 ed       	ldi	r22, 0xD8	; 216
   10726:	78 e0       	ldi	r23, 0x08	; 8
   10728:	c6 01       	movw	r24, r12
   1072a:	0e 94 49 33 	call	0x6692	; 0x6692 <MATCHI>
   1072e:	89 2b       	or	r24, r25
   10730:	09 f4       	brne	.+2      	; 0x10734 <posix_tests+0x166>
   10732:	40 c0       	rjmp	.+128    	; 0x107b4 <posix_tests+0x1e6>
   10734:	78 01       	movw	r14, r16
   10736:	ee 0c       	add	r14, r14
   10738:	ff 1c       	adc	r15, r15
   1073a:	e8 0c       	add	r14, r8
   1073c:	f9 1c       	adc	r15, r9
   1073e:	c1 2c       	mov	r12, r1
   10740:	d1 2c       	mov	r13, r1
        int args = 0;
        for(i=ind;i<argc;++i)
        {
			if(!argv[i])
			{
				printf("ls: null argument # %d\n", i);
   10742:	81 e7       	ldi	r24, 0x71	; 113
   10744:	9d e0       	ldi	r25, 0x0D	; 13
   10746:	4c 01       	movw	r8, r24
   10748:	a1 2c       	mov	r10, r1

    else if (MATCHI(ptr,"ls") )
    {
        int i;
        int args = 0;
        for(i=ind;i<argc;++i)
   1074a:	06 15       	cp	r16, r6
   1074c:	17 05       	cpc	r17, r7
   1074e:	34 f5       	brge	.+76     	; 0x1079c <posix_tests+0x1ce>
        {
			if(!argv[i])
   10750:	f7 01       	movw	r30, r14
   10752:	80 81       	ld	r24, Z
   10754:	91 81       	ldd	r25, Z+1	; 0x01
   10756:	00 97       	sbiw	r24, 0x00	; 0
   10758:	51 f4       	brne	.+20     	; 0x1076e <posix_tests+0x1a0>
			{
				printf("ls: null argument # %d\n", i);
   1075a:	ed b7       	in	r30, 0x3d	; 61
   1075c:	fe b7       	in	r31, 0x3e	; 62
   1075e:	15 83       	std	Z+5, r17	; 0x05
   10760:	04 83       	std	Z+4, r16	; 0x04
   10762:	81 82       	std	Z+1, r8	; 0x01
   10764:	92 82       	std	Z+2, r9	; 0x02
   10766:	a3 82       	std	Z+3, r10	; 0x03
   10768:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
				continue;
   1076c:	11 c0       	rjmp	.+34     	; 0x10790 <posix_tests+0x1c2>
			}
            if(MATCH(argv[i],"-l"))	// skip long format test - we always use long format
   1076e:	61 ec       	ldi	r22, 0xC1	; 193
   10770:	7b e0       	ldi	r23, 0x0B	; 11
   10772:	0e 94 35 33 	call	0x666a	; 0x666a <MATCH>
   10776:	89 2b       	or	r24, r25
   10778:	59 f4       	brne	.+22     	; 0x10790 <posix_tests+0x1c2>
				continue;
			if( ls(argv[i],1) < 0)
   1077a:	61 e0       	ldi	r22, 0x01	; 1
   1077c:	70 e0       	ldi	r23, 0x00	; 0
   1077e:	f7 01       	movw	r30, r14
   10780:	80 81       	ld	r24, Z
   10782:	91 81       	ldd	r25, Z+1	; 0x01
   10784:	1c de       	rcall	.-968    	; 0x103be <ls>
   10786:	97 fd       	sbrc	r25, 7
   10788:	09 c1       	rjmp	.+530    	; 0x1099c <posix_tests+0x3ce>
			{
				return(-1);
			};
            ++args;
   1078a:	ff ef       	ldi	r31, 0xFF	; 255
   1078c:	cf 1a       	sub	r12, r31
   1078e:	df 0a       	sbc	r13, r31

    else if (MATCHI(ptr,"ls") )
    {
        int i;
        int args = 0;
        for(i=ind;i<argc;++i)
   10790:	0f 5f       	subi	r16, 0xFF	; 255
   10792:	1f 4f       	sbci	r17, 0xFF	; 255
   10794:	82 e0       	ldi	r24, 0x02	; 2
   10796:	e8 0e       	add	r14, r24
   10798:	f1 1c       	adc	r15, r1
   1079a:	d7 cf       	rjmp	.-82     	; 0x1074a <posix_tests+0x17c>
			{
				return(-1);
			};
            ++args;
        }
        if(!args)
   1079c:	c1 14       	cp	r12, r1
   1079e:	d1 04       	cpc	r13, r1
   107a0:	09 f0       	breq	.+2      	; 0x107a4 <posix_tests+0x1d6>
   107a2:	7f c0       	rjmp	.+254    	; 0x108a2 <posix_tests+0x2d4>
        {
            if( ls("",1) < 0)
   107a4:	61 e0       	ldi	r22, 0x01	; 1
   107a6:	70 e0       	ldi	r23, 0x00	; 0
   107a8:	8e e0       	ldi	r24, 0x0E	; 14
   107aa:	9c e0       	ldi	r25, 0x0C	; 12
   107ac:	08 de       	rcall	.-1008   	; 0x103be <ls>
   107ae:	97 ff       	sbrs	r25, 7
   107b0:	78 c0       	rjmp	.+240    	; 0x108a2 <posix_tests+0x2d4>
   107b2:	f4 c0       	rjmp	.+488    	; 0x1099c <posix_tests+0x3ce>
		}
        return(1);
    }
#endif

    else if (MATCHARGS(ptr,"mkdir", (ind + 1), argc))
   107b4:	93 01       	movw	r18, r6
   107b6:	a7 01       	movw	r20, r14
   107b8:	64 ec       	ldi	r22, 0xC4	; 196
   107ba:	7b e0       	ldi	r23, 0x0B	; 11
   107bc:	c6 01       	movw	r24, r12
   107be:	0e 94 5d 33 	call	0x66ba	; 0x66ba <MATCHARGS>
   107c2:	89 2b       	or	r24, r25
   107c4:	79 f1       	breq	.+94     	; 0x10824 <posix_tests+0x256>
    {
        int mode = 0777;
        if((ind+2) <= argc)
   107c6:	e6 14       	cp	r14, r6
   107c8:	f7 04       	cpc	r15, r7
   107ca:	7c f4       	brge	.+30     	; 0x107ea <posix_tests+0x21c>
        {
            mode = strtol(argv[ind+1],NULL,8);
   107cc:	ee 0c       	add	r14, r14
   107ce:	ff 1c       	adc	r15, r15
   107d0:	f4 01       	movw	r30, r8
   107d2:	ee 0d       	add	r30, r14
   107d4:	ff 1d       	adc	r31, r15
   107d6:	48 e0       	ldi	r20, 0x08	; 8
   107d8:	50 e0       	ldi	r21, 0x00	; 0
   107da:	60 e0       	ldi	r22, 0x00	; 0
   107dc:	70 e0       	ldi	r23, 0x00	; 0
   107de:	80 81       	ld	r24, Z
   107e0:	91 81       	ldd	r25, Z+1	; 0x01
   107e2:	0e 94 37 48 	call	0x906e	; 0x906e <strtol>
   107e6:	ab 01       	movw	r20, r22
   107e8:	02 c0       	rjmp	.+4      	; 0x107ee <posix_tests+0x220>
    }
#endif

    else if (MATCHARGS(ptr,"mkdir", (ind + 1), argc))
    {
        int mode = 0777;
   107ea:	4f ef       	ldi	r20, 0xFF	; 255
   107ec:	51 e0       	ldi	r21, 0x01	; 1
        if((ind+2) <= argc)
        {
            mode = strtol(argv[ind+1],NULL,8);
        }
        if ( mkdir(argv[ind],mode) != 0 )
   107ee:	78 01       	movw	r14, r16
   107f0:	ee 0c       	add	r14, r14
   107f2:	ff 1c       	adc	r15, r15
   107f4:	e8 0c       	add	r14, r8
   107f6:	f9 1c       	adc	r15, r9
   107f8:	05 2e       	mov	r0, r21
   107fa:	00 0c       	add	r0, r0
   107fc:	66 0b       	sbc	r22, r22
   107fe:	77 0b       	sbc	r23, r23
   10800:	f7 01       	movw	r30, r14
   10802:	80 81       	ld	r24, Z
   10804:	91 81       	ldd	r25, Z+1	; 0x01
   10806:	0e 94 a0 78 	call	0xf140	; 0xf140 <mkdir>
   1080a:	89 2b       	or	r24, r25
   1080c:	09 f4       	brne	.+2      	; 0x10810 <posix_tests+0x242>
   1080e:	49 c0       	rjmp	.+146    	; 0x108a2 <posix_tests+0x2d4>
        {
            printf("mkdir %s failed\n", argv[ind]);
   10810:	f7 01       	movw	r30, r14
   10812:	80 81       	ld	r24, Z
   10814:	91 81       	ldd	r25, Z+1	; 0x01
   10816:	ed b7       	in	r30, 0x3d	; 61
   10818:	fe b7       	in	r31, 0x3e	; 62
   1081a:	95 83       	std	Z+5, r25	; 0x05
   1081c:	84 83       	std	Z+4, r24	; 0x04
   1081e:	80 e6       	ldi	r24, 0x60	; 96
   10820:	9d e0       	ldi	r25, 0x0D	; 13
   10822:	b6 c0       	rjmp	.+364    	; 0x10990 <posix_tests+0x3c2>
            return(-1);
        }
        return(1);
    }

    else if (MATCHARGS(ptr,"page", (ind + 1), argc))
   10824:	93 01       	movw	r18, r6
   10826:	a7 01       	movw	r20, r14
   10828:	6a ec       	ldi	r22, 0xCA	; 202
   1082a:	7b e0       	ldi	r23, 0x0B	; 11
   1082c:	c6 01       	movw	r24, r12
   1082e:	0e 94 5d 33 	call	0x66ba	; 0x66ba <MATCHARGS>
   10832:	89 2b       	or	r24, r25
   10834:	71 f0       	breq	.+28     	; 0x10852 <posix_tests+0x284>
    {
        setpage(atoi(argv[ind]));
   10836:	00 0f       	add	r16, r16
   10838:	11 1f       	adc	r17, r17
   1083a:	f4 01       	movw	r30, r8
   1083c:	e0 0f       	add	r30, r16
   1083e:	f1 1f       	adc	r31, r17
   10840:	80 81       	ld	r24, Z
   10842:	91 81       	ldd	r25, Z+1	; 0x01
   10844:	0e 94 95 48 	call	0x912a	; 0x912a <atoi>
/// @retrun void
static int _pagesize = 25;
MEMSPACE
int setpage(int count)
{
    _pagesize = count;
   10848:	90 93 81 01 	sts	0x0181, r25	; 0x800181 <_pagesize+0x1>
   1084c:	80 93 80 01 	sts	0x0180, r24	; 0x800180 <_pagesize>
   10850:	28 c0       	rjmp	.+80     	; 0x108a2 <posix_tests+0x2d4>
    {
        setpage(atoi(argv[ind]));
        return(1);
    }

    else if (MATCHARGS(ptr,"pwd", (ind + 0), argc))
   10852:	93 01       	movw	r18, r6
   10854:	a8 01       	movw	r20, r16
   10856:	6f ec       	ldi	r22, 0xCF	; 207
   10858:	7b e0       	ldi	r23, 0x0B	; 11
   1085a:	c6 01       	movw	r24, r12
   1085c:	0e 94 5d 33 	call	0x66ba	; 0x66ba <MATCHARGS>
   10860:	89 2b       	or	r24, r25
   10862:	11 f1       	breq	.+68     	; 0x108a8 <posix_tests+0x2da>
    {
        char path[MAX_NAME_LEN+1];
		char *ptr = getcwd(path, sizeof(path)-2);
   10864:	6f ef       	ldi	r22, 0xFF	; 255
   10866:	70 e0       	ldi	r23, 0x00	; 0
   10868:	ce 01       	movw	r24, r28
   1086a:	08 96       	adiw	r24, 0x08	; 8
   1086c:	0e 94 7b 78 	call	0xf0f6	; 0xf0f6 <getcwd>
		if(ptr == NULL)
   10870:	00 97       	sbiw	r24, 0x00	; 0
   10872:	59 f4       	brne	.+22     	; 0x1088a <posix_tests+0x2bc>
		{
			printf("pwd FAILED\n");
   10874:	84 e5       	ldi	r24, 0x54	; 84
   10876:	9d e0       	ldi	r25, 0x0D	; 13
   10878:	a0 e0       	ldi	r26, 0x00	; 0
   1087a:	ed b7       	in	r30, 0x3d	; 61
   1087c:	fe b7       	in	r31, 0x3e	; 62
   1087e:	81 83       	std	Z+1, r24	; 0x01
   10880:	92 83       	std	Z+2, r25	; 0x02
   10882:	a3 83       	std	Z+3, r26	; 0x03
   10884:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
   10888:	89 c0       	rjmp	.+274    	; 0x1099c <posix_tests+0x3ce>
			return(-1);
		}
        printf("%s\n", ptr);
   1088a:	ed b7       	in	r30, 0x3d	; 61
   1088c:	fe b7       	in	r31, 0x3e	; 62
   1088e:	95 83       	std	Z+5, r25	; 0x05
   10890:	84 83       	std	Z+4, r24	; 0x04
   10892:	80 e5       	ldi	r24, 0x50	; 80
   10894:	9d e0       	ldi	r25, 0x0D	; 13
   10896:	a0 e0       	ldi	r26, 0x00	; 0
   10898:	81 83       	std	Z+1, r24	; 0x01
   1089a:	92 83       	std	Z+2, r25	; 0x02
   1089c:	a3 83       	std	Z+3, r26	; 0x03
   1089e:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
        return(1);
   108a2:	81 e0       	ldi	r24, 0x01	; 1
   108a4:	90 e0       	ldi	r25, 0x00	; 0
   108a6:	7c c0       	rjmp	.+248    	; 0x109a0 <posix_tests+0x3d2>
    }

    else if (MATCHARGS(ptr,"rename", (ind + 2), argc))
   108a8:	93 01       	movw	r18, r6
   108aa:	a5 01       	movw	r20, r10
   108ac:	63 ed       	ldi	r22, 0xD3	; 211
   108ae:	7b e0       	ldi	r23, 0x0B	; 11
   108b0:	c6 01       	movw	r24, r12
   108b2:	0e 94 5d 33 	call	0x66ba	; 0x66ba <MATCHARGS>
   108b6:	89 2b       	or	r24, r25
   108b8:	59 f1       	breq	.+86     	; 0x10910 <posix_tests+0x342>
    {
        if( rename(argv[ind],argv[ind+1]) != 0)
   108ba:	00 0f       	add	r16, r16
   108bc:	11 1f       	adc	r17, r17
   108be:	64 01       	movw	r12, r8
   108c0:	c0 0e       	add	r12, r16
   108c2:	d1 1e       	adc	r13, r17
   108c4:	0e 5f       	subi	r16, 0xFE	; 254
   108c6:	1f 4f       	sbci	r17, 0xFF	; 255
   108c8:	74 01       	movw	r14, r8
   108ca:	e0 0e       	add	r14, r16
   108cc:	f1 1e       	adc	r15, r17
   108ce:	f7 01       	movw	r30, r14
   108d0:	60 81       	ld	r22, Z
   108d2:	71 81       	ldd	r23, Z+1	; 0x01
   108d4:	f6 01       	movw	r30, r12
   108d6:	80 81       	ld	r24, Z
   108d8:	91 81       	ldd	r25, Z+1	; 0x01
   108da:	0e 94 ce 78 	call	0xf19c	; 0xf19c <rename>
   108de:	89 2b       	or	r24, r25
   108e0:	01 f3       	breq	.-64     	; 0x108a2 <posix_tests+0x2d4>
        {
            printf("rename %s to %s\n", argv[ind], argv[ind+1]);
   108e2:	f7 01       	movw	r30, r14
   108e4:	80 81       	ld	r24, Z
   108e6:	91 81       	ldd	r25, Z+1	; 0x01
   108e8:	ed b7       	in	r30, 0x3d	; 61
   108ea:	fe b7       	in	r31, 0x3e	; 62
   108ec:	97 83       	std	Z+7, r25	; 0x07
   108ee:	86 83       	std	Z+6, r24	; 0x06
   108f0:	f6 01       	movw	r30, r12
   108f2:	80 81       	ld	r24, Z
   108f4:	91 81       	ldd	r25, Z+1	; 0x01
   108f6:	ed b7       	in	r30, 0x3d	; 61
   108f8:	fe b7       	in	r31, 0x3e	; 62
   108fa:	95 83       	std	Z+5, r25	; 0x05
   108fc:	84 83       	std	Z+4, r24	; 0x04
   108fe:	8f e3       	ldi	r24, 0x3F	; 63
   10900:	9d e0       	ldi	r25, 0x0D	; 13
   10902:	a0 e0       	ldi	r26, 0x00	; 0
   10904:	81 83       	std	Z+1, r24	; 0x01
   10906:	92 83       	std	Z+2, r25	; 0x02
   10908:	a3 83       	std	Z+3, r26	; 0x03
   1090a:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
   1090e:	46 c0       	rjmp	.+140    	; 0x1099c <posix_tests+0x3ce>
            return(-1);
        }
        return(1);
    }

    else if (MATCHARGS(ptr,"rm", (ind + 1), argc))
   10910:	93 01       	movw	r18, r6
   10912:	a7 01       	movw	r20, r14
   10914:	6a ed       	ldi	r22, 0xDA	; 218
   10916:	7b e0       	ldi	r23, 0x0B	; 11
   10918:	c6 01       	movw	r24, r12
   1091a:	0e 94 5d 33 	call	0x66ba	; 0x66ba <MATCHARGS>
   1091e:	89 2b       	or	r24, r25
   10920:	b9 f0       	breq	.+46     	; 0x10950 <posix_tests+0x382>
    {
        if ( unlink(argv[ind]) != 0)
   10922:	78 01       	movw	r14, r16
   10924:	ee 0c       	add	r14, r14
   10926:	ff 1c       	adc	r15, r15
   10928:	e8 0c       	add	r14, r8
   1092a:	f9 1c       	adc	r15, r9
   1092c:	f7 01       	movw	r30, r14
   1092e:	80 81       	ld	r24, Z
   10930:	91 81       	ldd	r25, Z+1	; 0x01
   10932:	0e 94 ed 78 	call	0xf1da	; 0xf1da <unlink>
   10936:	89 2b       	or	r24, r25
   10938:	09 f4       	brne	.+2      	; 0x1093c <posix_tests+0x36e>
   1093a:	b3 cf       	rjmp	.-154    	; 0x108a2 <posix_tests+0x2d4>
        {
            printf("rm %s failed\n", argv[ind]);
   1093c:	f7 01       	movw	r30, r14
   1093e:	80 81       	ld	r24, Z
   10940:	91 81       	ldd	r25, Z+1	; 0x01
   10942:	ed b7       	in	r30, 0x3d	; 61
   10944:	fe b7       	in	r31, 0x3e	; 62
   10946:	95 83       	std	Z+5, r25	; 0x05
   10948:	84 83       	std	Z+4, r24	; 0x04
   1094a:	81 e3       	ldi	r24, 0x31	; 49
   1094c:	9d e0       	ldi	r25, 0x0D	; 13
   1094e:	20 c0       	rjmp	.+64     	; 0x10990 <posix_tests+0x3c2>
        dump_stat(&p);
        return(1);
    }
#endif

    else if (MATCHARGS(ptr,"rmdir", (ind + 1), argc))
   10950:	93 01       	movw	r18, r6
   10952:	a7 01       	movw	r20, r14
   10954:	6d ed       	ldi	r22, 0xDD	; 221
   10956:	7b e0       	ldi	r23, 0x0B	; 11
   10958:	c6 01       	movw	r24, r12
   1095a:	0e 94 5d 33 	call	0x66ba	; 0x66ba <MATCHARGS>
   1095e:	89 2b       	or	r24, r25
   10960:	09 f4       	brne	.+2      	; 0x10964 <posix_tests+0x396>
   10962:	3e ce       	rjmp	.-900    	; 0x105e0 <posix_tests+0x12>
    {
        if ( rmdir(argv[ind]) != 0)
   10964:	78 01       	movw	r14, r16
   10966:	ee 0c       	add	r14, r14
   10968:	ff 1c       	adc	r15, r15
   1096a:	e8 0c       	add	r14, r8
   1096c:	f9 1c       	adc	r15, r9
   1096e:	f7 01       	movw	r30, r14
   10970:	80 81       	ld	r24, Z
   10972:	91 81       	ldd	r25, Z+1	; 0x01
   10974:	0e 94 0c 79 	call	0xf218	; 0xf218 <rmdir>
   10978:	89 2b       	or	r24, r25
   1097a:	09 f4       	brne	.+2      	; 0x1097e <posix_tests+0x3b0>
   1097c:	92 cf       	rjmp	.-220    	; 0x108a2 <posix_tests+0x2d4>
        {
            printf("rmdir %s failed\n", argv[ind]);
   1097e:	f7 01       	movw	r30, r14
   10980:	80 81       	ld	r24, Z
   10982:	91 81       	ldd	r25, Z+1	; 0x01
   10984:	ed b7       	in	r30, 0x3d	; 61
   10986:	fe b7       	in	r31, 0x3e	; 62
   10988:	95 83       	std	Z+5, r25	; 0x05
   1098a:	84 83       	std	Z+4, r24	; 0x04
   1098c:	80 e2       	ldi	r24, 0x20	; 32
   1098e:	9d e0       	ldi	r25, 0x0D	; 13
   10990:	a0 e0       	ldi	r26, 0x00	; 0
   10992:	81 83       	std	Z+1, r24	; 0x01
   10994:	92 83       	std	Z+2, r25	; 0x02
   10996:	a3 83       	std	Z+3, r26	; 0x03
   10998:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
            return(-1);
   1099c:	8f ef       	ldi	r24, 0xFF	; 255
   1099e:	9f ef       	ldi	r25, 0xFF	; 255
        return(1);
    }
#endif

    return(0);
}
   109a0:	c8 5f       	subi	r28, 0xF8	; 248
   109a2:	de 4f       	sbci	r29, 0xFE	; 254
   109a4:	e0 e1       	ldi	r30, 0x10	; 16
   109a6:	0c 94 c2 e8 	jmp	0x1d184	; 0x1d184 <__epilogue_restores__+0x4>

000109aa <gpib_timer_init>:
///
/// - Has some platform dependent code.
/// @return  void

void gpib_timer_init()
{
   109aa:	00 d0       	rcall	.+0      	; 0x109ac <gpib_timer_init+0x2>
   109ac:	1f 92       	push	r1
    if(set_timers(gpib_timer_task,1) == -1)       // Install Clock Task
   109ae:	61 e0       	ldi	r22, 0x01	; 1
   109b0:	70 e0       	ldi	r23, 0x00	; 0
   109b2:	81 e9       	ldi	r24, 0x91	; 145
   109b4:	96 e8       	ldi	r25, 0x86	; 134
   109b6:	0e 94 aa 35 	call	0x6b54	; 0x6b54 <set_timers>
   109ba:	01 96       	adiw	r24, 0x01	; 1
   109bc:	51 f4       	brne	.+20     	; 0x109d2 <gpib_timer_init+0x28>
        printf("GPIB Clock task init failed\n");
   109be:	8c ed       	ldi	r24, 0xDC	; 220
   109c0:	9e e0       	ldi	r25, 0x0E	; 14
   109c2:	a0 e0       	ldi	r26, 0x00	; 0
   109c4:	ed b7       	in	r30, 0x3d	; 61
   109c6:	fe b7       	in	r31, 0x3e	; 62
   109c8:	81 83       	std	Z+1, r24	; 0x01
   109ca:	92 83       	std	Z+2, r25	; 0x02
   109cc:	a3 83       	std	Z+3, r26	; 0x03
   109ce:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>

    gpib_timer_reset();
   109d2:	95 d1       	rcall	.+810    	; 0x10cfe <gpib_timer_reset>
}
   109d4:	0f 90       	pop	r0
   109d6:	0f 90       	pop	r0
   109d8:	0f 90       	pop	r0
   109da:	08 95       	ret

000109dc <reverse_8bits>:
/// - GPIB D1 controls last device.
///
/// @param [in] mask: bit mask to reverse.
/// @return  reversed bits
uint8_t reverse_8bits(uint8_t mask)
{
   109dc:	28 2f       	mov	r18, r24
   109de:	98 e0       	ldi	r25, 0x08	; 8
    int8_t i;
    uint8_t rmask = 0;
   109e0:	80 e0       	ldi	r24, 0x00	; 0
    for(i=0;i<8;++i)
    {
        rmask <<= 1;
   109e2:	88 0f       	add	r24, r24
        if(mask & 1)
   109e4:	20 fd       	sbrc	r18, 0
            rmask |= 1;
   109e6:	81 60       	ori	r24, 0x01	; 1
        mask >>= 1;
   109e8:	26 95       	lsr	r18
   109ea:	91 50       	subi	r25, 0x01	; 1
/// @return  reversed bits
uint8_t reverse_8bits(uint8_t mask)
{
    int8_t i;
    uint8_t rmask = 0;
    for(i=0;i<8;++i)
   109ec:	d1 f7       	brne	.-12     	; 0x109e2 <reverse_8bits+0x6>
        if(mask & 1)
            rmask |= 1;
        mask >>= 1;
    }
    return(rmask & 0xff);
}
   109ee:	08 95       	ret

000109f0 <ppr_set>:
void ppr_set(uint8_t mask)
{
///@brief optionally reverse bit order in PPR mask
/// Used only of PPR circuit board PPR bits are not reversed in hardware
#if PPR_REVERSE_BITS == 1
    _ppr_reg = reverse_8bits(mask);
   109f0:	f5 df       	rcall	.-22     	; 0x109dc <reverse_8bits>
   109f2:	80 93 5e 19 	sts	0x195E, r24	; 0x80195e <_ppr_reg>
#else
    _ppr_reg = mask;
#endif
    SPI0_TXRX_Byte(_ppr_reg);
   109f6:	0e 94 b8 2b 	call	0x5770	; 0x5770 <SPI0_TXRX_Byte>

    GPIB_IO_HI(PPE);
   109fa:	2a 9a       	sbi	0x05, 2	; 5
   109fc:	22 9a       	sbi	0x04, 2	; 4
    GPIB_IO_LOW(PPE);
   109fe:	2a 98       	cbi	0x05, 2	; 5
   10a00:	22 9a       	sbi	0x04, 2	; 4
   10a02:	08 95       	ret

00010a04 <ppr_reg>:
uint8_t ppr_reg()
{
///@brief optionally reverse bit order in PPR mask
/// Used only of PPR circuit board PPR bits are not reversed in hardware
#if PPR_REVERSE_BITS == 1
    return(reverse_8bits(_ppr_reg));
   10a04:	80 91 5e 19 	lds	r24, 0x195E	; 0x80195e <_ppr_reg>
   10a08:	e9 cf       	rjmp	.-46     	; 0x109dc <reverse_8bits>
#else
    return(_ppr_reg);
#endif
}
   10a0a:	08 95       	ret

00010a0c <ppr_init>:
///
/// - Hides the register access implimentation from the upper level.
/// @return  void

void ppr_init()
{
   10a0c:	00 d0       	rcall	.+0      	; 0x10a0e <ppr_init+0x2>
   10a0e:	1f 92       	push	r1
#if SDEBUG
    if(debuglevel & GPIB_PPR)
   10a10:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   10a14:	81 ff       	sbrs	r24, 1
   10a16:	0a c0       	rjmp	.+20     	; 0x10a2c <ppr_init+0x20>
        printf("[PPR DISABLE ALL]\n");
   10a18:	89 ec       	ldi	r24, 0xC9	; 201
   10a1a:	9e e0       	ldi	r25, 0x0E	; 14
   10a1c:	a0 e0       	ldi	r26, 0x00	; 0
   10a1e:	ed b7       	in	r30, 0x3d	; 61
   10a20:	fe b7       	in	r31, 0x3e	; 62
   10a22:	81 83       	std	Z+1, r24	; 0x01
   10a24:	92 83       	std	Z+2, r25	; 0x02
   10a26:	a3 83       	std	Z+3, r26	; 0x03
   10a28:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
#endif
    ppr_set(0);
   10a2c:	80 e0       	ldi	r24, 0x00	; 0
   10a2e:	e0 df       	rcall	.-64     	; 0x109f0 <ppr_set>
}
   10a30:	0f 90       	pop	r0
   10a32:	0f 90       	pop	r0
   10a34:	0f 90       	pop	r0
   10a36:	08 95       	ret

00010a38 <ppr_bit_set>:
/// @return  void

void ppr_bit_set(uint8_t bit)
{
///FIXME _ppr_reg = 0;
    BIT_SET(_ppr_reg,bit);
   10a38:	21 e0       	ldi	r18, 0x01	; 1
   10a3a:	30 e0       	ldi	r19, 0x00	; 0
   10a3c:	01 c0       	rjmp	.+2      	; 0x10a40 <ppr_bit_set+0x8>
   10a3e:	22 0f       	add	r18, r18
   10a40:	8a 95       	dec	r24
   10a42:	ea f7       	brpl	.-6      	; 0x10a3e <ppr_bit_set+0x6>
   10a44:	80 91 5e 19 	lds	r24, 0x195E	; 0x80195e <_ppr_reg>
   10a48:	82 2b       	or	r24, r18
   10a4a:	80 93 5e 19 	sts	0x195E, r24	; 0x80195e <_ppr_reg>
    ppr_set(_ppr_reg);
   10a4e:	d0 cf       	rjmp	.-96     	; 0x109f0 <ppr_set>
   10a50:	08 95       	ret

00010a52 <ppr_bit_clr>:
/// @return  void

void ppr_bit_clr(uint8_t bit)
{
///FIXME _ppr_reg = 0;
    BIT_CLR(_ppr_reg,bit);
   10a52:	21 e0       	ldi	r18, 0x01	; 1
   10a54:	30 e0       	ldi	r19, 0x00	; 0
   10a56:	01 c0       	rjmp	.+2      	; 0x10a5a <ppr_bit_clr+0x8>
   10a58:	22 0f       	add	r18, r18
   10a5a:	8a 95       	dec	r24
   10a5c:	ea f7       	brpl	.-6      	; 0x10a58 <ppr_bit_clr+0x6>
   10a5e:	20 95       	com	r18
   10a60:	80 91 5e 19 	lds	r24, 0x195E	; 0x80195e <_ppr_reg>
   10a64:	82 23       	and	r24, r18
   10a66:	80 93 5e 19 	sts	0x195E, r24	; 0x80195e <_ppr_reg>
    ppr_set(_ppr_reg);
   10a6a:	c2 cf       	rjmp	.-124    	; 0x109f0 <ppr_set>
   10a6c:	08 95       	ret

00010a6e <dbf_open>:
/// @see ff.h
///
/// @return  FRESULT f_open(fp,path, mode);

FRESULT dbf_open (FIL* fp, const TCHAR* path, BYTE mode)
{
   10a6e:	0f 93       	push	r16
   10a70:	1f 93       	push	r17
   10a72:	cf 93       	push	r28
   10a74:	df 93       	push	r29
   10a76:	00 d0       	rcall	.+0      	; 0x10a78 <dbf_open+0xa>
   10a78:	00 d0       	rcall	.+0      	; 0x10a7a <dbf_open+0xc>
   10a7a:	1f 92       	push	r1
   10a7c:	8b 01       	movw	r16, r22
    int rc;
    rc = f_open(fp,path, mode);
   10a7e:	0e 94 a4 5a 	call	0xb548	; 0xb548 <f_open>
   10a82:	ec 01       	movw	r28, r24
    if(rc)
   10a84:	89 2b       	or	r24, r25
   10a86:	79 f0       	breq	.+30     	; 0x10aa6 <dbf_open+0x38>
    {
        printf("Open error:[%s] ", path);
   10a88:	ed b7       	in	r30, 0x3d	; 61
   10a8a:	fe b7       	in	r31, 0x3e	; 62
   10a8c:	15 83       	std	Z+5, r17	; 0x05
   10a8e:	04 83       	std	Z+4, r16	; 0x04
   10a90:	88 eb       	ldi	r24, 0xB8	; 184
   10a92:	9e e0       	ldi	r25, 0x0E	; 14
   10a94:	a0 e0       	ldi	r26, 0x00	; 0
   10a96:	81 83       	std	Z+1, r24	; 0x01
   10a98:	92 83       	std	Z+2, r25	; 0x02
   10a9a:	a3 83       	std	Z+3, r26	; 0x03
   10a9c:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
        put_rc(rc);
   10aa0:	ce 01       	movw	r24, r28
   10aa2:	0e 94 de 71 	call	0xe3bc	; 0xe3bc <put_rc>
        return (rc);
    }
    return(0);
}
   10aa6:	ce 01       	movw	r24, r28
   10aa8:	cd b7       	in	r28, 0x3d	; 61
   10aaa:	de b7       	in	r29, 0x3e	; 62
   10aac:	25 96       	adiw	r28, 0x05	; 5
   10aae:	e4 e0       	ldi	r30, 0x04	; 4
   10ab0:	0c 94 ce e8 	jmp	0x1d19c	; 0x1d19c <__epilogue_restores__+0x1c>

00010ab4 <dbf_read>:
/// @see ff.h
///
/// @return  FRESULT f_read (FIL* fp, void* buff, UINT btr, UINT* br)

FRESULT dbf_read (FIL* fp, void* buff, UINT btr, UINT* br)
{
   10ab4:	cf 93       	push	r28
   10ab6:	df 93       	push	r29
   10ab8:	00 d0       	rcall	.+0      	; 0x10aba <dbf_read+0x6>
   10aba:	1f 92       	push	r1
    int rc;
    rc = f_read(fp, buff, btr, br);
   10abc:	0e 94 5c 5c 	call	0xb8b8	; 0xb8b8 <f_read>
   10ac0:	ec 01       	movw	r28, r24
    if(rc)
   10ac2:	89 2b       	or	r24, r25
   10ac4:	69 f0       	breq	.+26     	; 0x10ae0 <dbf_read+0x2c>
    {
        printf("Read error: ");
   10ac6:	8b ea       	ldi	r24, 0xAB	; 171
   10ac8:	9e e0       	ldi	r25, 0x0E	; 14
   10aca:	a0 e0       	ldi	r26, 0x00	; 0
   10acc:	ed b7       	in	r30, 0x3d	; 61
   10ace:	fe b7       	in	r31, 0x3e	; 62
   10ad0:	81 83       	std	Z+1, r24	; 0x01
   10ad2:	92 83       	std	Z+2, r25	; 0x02
   10ad4:	a3 83       	std	Z+3, r26	; 0x03
   10ad6:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
        put_rc(rc);
   10ada:	ce 01       	movw	r24, r28
   10adc:	0e 94 de 71 	call	0xe3bc	; 0xe3bc <put_rc>
        return (rc);
    }
    return(0);
}
   10ae0:	ce 01       	movw	r24, r28
   10ae2:	cd b7       	in	r28, 0x3d	; 61
   10ae4:	de b7       	in	r29, 0x3e	; 62
   10ae6:	23 96       	adiw	r28, 0x03	; 3
   10ae8:	e2 e0       	ldi	r30, 0x02	; 2
   10aea:	0c 94 d0 e8 	jmp	0x1d1a0	; 0x1d1a0 <__epilogue_restores__+0x20>

00010aee <dbf_write>:
///
/// @see ff.h
/// @return  FRESULT f_write (FIL* fp, void* buff, UINT btw, UINT* bw)

FRESULT dbf_write (FIL* fp, const void* buff, UINT btw, UINT* bw)
{
   10aee:	cf 93       	push	r28
   10af0:	df 93       	push	r29
   10af2:	00 d0       	rcall	.+0      	; 0x10af4 <dbf_write+0x6>
   10af4:	1f 92       	push	r1
    int rc;
    rc = f_write(fp, buff, btw, bw);
   10af6:	0e 94 a7 5d 	call	0xbb4e	; 0xbb4e <f_write>
   10afa:	ec 01       	movw	r28, r24
    if(rc)
   10afc:	89 2b       	or	r24, r25
   10afe:	69 f0       	breq	.+26     	; 0x10b1a <dbf_write+0x2c>
    {
        printf("Write error: ");
   10b00:	8d e9       	ldi	r24, 0x9D	; 157
   10b02:	9e e0       	ldi	r25, 0x0E	; 14
   10b04:	a0 e0       	ldi	r26, 0x00	; 0
   10b06:	ed b7       	in	r30, 0x3d	; 61
   10b08:	fe b7       	in	r31, 0x3e	; 62
   10b0a:	81 83       	std	Z+1, r24	; 0x01
   10b0c:	92 83       	std	Z+2, r25	; 0x02
   10b0e:	a3 83       	std	Z+3, r26	; 0x03
   10b10:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
        put_rc(rc);
   10b14:	ce 01       	movw	r24, r28
   10b16:	0e 94 de 71 	call	0xe3bc	; 0xe3bc <put_rc>
        return (rc);
    }
    return(0);
}
   10b1a:	ce 01       	movw	r24, r28
   10b1c:	cd b7       	in	r28, 0x3d	; 61
   10b1e:	de b7       	in	r29, 0x3e	; 62
   10b20:	23 96       	adiw	r28, 0x03	; 3
   10b22:	e2 e0       	ldi	r30, 0x02	; 2
   10b24:	0c 94 d0 e8 	jmp	0x1d1a0	; 0x1d1a0 <__epilogue_restores__+0x20>

00010b28 <dbf_lseek>:
///
/// @see ff.h.
/// @return  FRESULT

FRESULT dbf_lseek (FIL* fp, DWORD ofs)
{
   10b28:	cf 93       	push	r28
   10b2a:	df 93       	push	r29
   10b2c:	00 d0       	rcall	.+0      	; 0x10b2e <dbf_lseek+0x6>
   10b2e:	1f 92       	push	r1
    int rc;
    rc = f_lseek(fp, ofs);
   10b30:	0e 94 68 61 	call	0xc2d0	; 0xc2d0 <f_lseek>
   10b34:	ec 01       	movw	r28, r24
    if(rc)
   10b36:	89 2b       	or	r24, r25
   10b38:	69 f0       	breq	.+26     	; 0x10b54 <dbf_lseek+0x2c>
    {
        printf("Seek error: ");
   10b3a:	80 e9       	ldi	r24, 0x90	; 144
   10b3c:	9e e0       	ldi	r25, 0x0E	; 14
   10b3e:	a0 e0       	ldi	r26, 0x00	; 0
   10b40:	ed b7       	in	r30, 0x3d	; 61
   10b42:	fe b7       	in	r31, 0x3e	; 62
   10b44:	81 83       	std	Z+1, r24	; 0x01
   10b46:	92 83       	std	Z+2, r25	; 0x02
   10b48:	a3 83       	std	Z+3, r26	; 0x03
   10b4a:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
        put_rc(rc);
   10b4e:	ce 01       	movw	r24, r28
   10b50:	0e 94 de 71 	call	0xe3bc	; 0xe3bc <put_rc>
        return (rc);
    }
    return(0);
}
   10b54:	ce 01       	movw	r24, r28
   10b56:	cd b7       	in	r28, 0x3d	; 61
   10b58:	de b7       	in	r29, 0x3e	; 62
   10b5a:	23 96       	adiw	r28, 0x03	; 3
   10b5c:	e2 e0       	ldi	r30, 0x02	; 2
   10b5e:	0c 94 d0 e8 	jmp	0x1d1a0	; 0x1d1a0 <__epilogue_restores__+0x20>

00010b62 <dbf_close>:
///
/// @see ff.h.
/// @return  FRESULT dbf_close (FIL* fp)

FRESULT dbf_close (FIL* fp)
{
   10b62:	cf 93       	push	r28
   10b64:	df 93       	push	r29
   10b66:	00 d0       	rcall	.+0      	; 0x10b68 <dbf_close+0x6>
   10b68:	1f 92       	push	r1
    int rc;
    rc = f_close(fp);
   10b6a:	0e 94 be 5f 	call	0xbf7c	; 0xbf7c <f_close>
   10b6e:	ec 01       	movw	r28, r24
    if(rc != FR_OK)
   10b70:	89 2b       	or	r24, r25
   10b72:	69 f0       	breq	.+26     	; 0x10b8e <dbf_close+0x2c>
    {
        printf("Close error: ");
   10b74:	82 e8       	ldi	r24, 0x82	; 130
   10b76:	9e e0       	ldi	r25, 0x0E	; 14
   10b78:	a0 e0       	ldi	r26, 0x00	; 0
   10b7a:	ed b7       	in	r30, 0x3d	; 61
   10b7c:	fe b7       	in	r31, 0x3e	; 62
   10b7e:	81 83       	std	Z+1, r24	; 0x01
   10b80:	92 83       	std	Z+2, r25	; 0x02
   10b82:	a3 83       	std	Z+3, r26	; 0x03
   10b84:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
        put_rc(rc);
   10b88:	ce 01       	movw	r24, r28
   10b8a:	0e 94 de 71 	call	0xe3bc	; 0xe3bc <put_rc>
        return (rc);
    }
    return(0);
}
   10b8e:	ce 01       	movw	r24, r28
   10b90:	cd b7       	in	r28, 0x3d	; 61
   10b92:	de b7       	in	r29, 0x3e	; 62
   10b94:	23 96       	adiw	r28, 0x03	; 3
   10b96:	e2 e0       	ldi	r30, 0x02	; 2
   10b98:	0c 94 d0 e8 	jmp	0x1d1a0	; 0x1d1a0 <__epilogue_restores__+0x20>

00010b9c <dbf_open_read>:
/// @return -1 on error.
/// @see: ff.h.
/// @return  FRESULT

int dbf_open_read(char *name, uint32_t pos, void *buff, int size, int *errors)
{
   10b9c:	a6 e2       	ldi	r26, 0x26	; 38
   10b9e:	b2 e0       	ldi	r27, 0x02	; 2
   10ba0:	e4 ed       	ldi	r30, 0xD4	; 212
   10ba2:	f5 e8       	ldi	r31, 0x85	; 133
   10ba4:	0c 94 aa e8 	jmp	0x1d154	; 0x1d154 <__prologue_saves__+0xc>
   10ba8:	4a 01       	movw	r8, r20
   10baa:	5b 01       	movw	r10, r22
   10bac:	69 01       	movw	r12, r18
    int rc;
    FIL fp;
    int flags = 0;
    UINT bytes = 0;
   10bae:	cb 5d       	subi	r28, 0xDB	; 219
   10bb0:	dd 4f       	sbci	r29, 0xFD	; 253
   10bb2:	19 82       	std	Y+1, r1	; 0x01
   10bb4:	18 82       	st	Y, r1
   10bb6:	c5 52       	subi	r28, 0x25	; 37
   10bb8:	d2 40       	sbci	r29, 0x02	; 2

    rc = dbf_open(&fp, name, FA_OPEN_EXISTING | FA_READ | FA_WRITE);
   10bba:	43 e0       	ldi	r20, 0x03	; 3
   10bbc:	bc 01       	movw	r22, r24
   10bbe:	ce 01       	movw	r24, r28
   10bc0:	01 96       	adiw	r24, 0x01	; 1
   10bc2:	55 df       	rcall	.-342    	; 0x10a6e <dbf_open>
    if( rc != FR_OK)
   10bc4:	89 2b       	or	r24, r25
   10bc6:	19 f0       	breq	.+6      	; 0x10bce <dbf_open_read+0x32>
    {
        flags |= ERR_DISK;
        flags |= ERR_READ;
        *errors = flags;
   10bc8:	81 e1       	ldi	r24, 0x11	; 17
   10bca:	90 e0       	ldi	r25, 0x00	; 0
   10bcc:	2f c0       	rjmp	.+94     	; 0x10c2c <dbf_open_read+0x90>
        return( -1 );
    }

///  SEEK
    rc = dbf_lseek(&fp, pos);
   10bce:	b5 01       	movw	r22, r10
   10bd0:	a4 01       	movw	r20, r8
   10bd2:	ce 01       	movw	r24, r28
   10bd4:	01 96       	adiw	r24, 0x01	; 1
   10bd6:	a8 df       	rcall	.-176    	; 0x10b28 <dbf_lseek>
    if( rc != FR_OK)
   10bd8:	89 2b       	or	r24, r25
   10bda:	59 f0       	breq	.+22     	; 0x10bf2 <dbf_open_read+0x56>
    {
        flags |= ERR_SEEK;
        flags |= ERR_READ;
        *errors = flags;
   10bdc:	85 e0       	ldi	r24, 0x05	; 5
   10bde:	90 e0       	ldi	r25, 0x00	; 0
   10be0:	f7 01       	movw	r30, r14
   10be2:	91 83       	std	Z+1, r25	; 0x01
   10be4:	80 83       	st	Z, r24
        dbf_close(&fp);
   10be6:	ce 01       	movw	r24, r28
   10be8:	01 96       	adiw	r24, 0x01	; 1
   10bea:	bb df       	rcall	.-138    	; 0x10b62 <dbf_close>
        return( -1 );
   10bec:	8f ef       	ldi	r24, 0xFF	; 255
   10bee:	9f ef       	ldi	r25, 0xFF	; 255
   10bf0:	27 c0       	rjmp	.+78     	; 0x10c40 <dbf_open_read+0xa4>
    }

    rc = dbf_read(&fp, buff,size,&bytes);
   10bf2:	9e 01       	movw	r18, r28
   10bf4:	2b 5d       	subi	r18, 0xDB	; 219
   10bf6:	3d 4f       	sbci	r19, 0xFD	; 253
   10bf8:	a8 01       	movw	r20, r16
   10bfa:	b6 01       	movw	r22, r12
   10bfc:	ce 01       	movw	r24, r28
   10bfe:	01 96       	adiw	r24, 0x01	; 1
   10c00:	59 df       	rcall	.-334    	; 0x10ab4 <dbf_read>
    if( rc != FR_OK || (UINT) size != bytes)
   10c02:	89 2b       	or	r24, r25
   10c04:	49 f4       	brne	.+18     	; 0x10c18 <dbf_open_read+0x7c>
   10c06:	cb 5d       	subi	r28, 0xDB	; 219
   10c08:	dd 4f       	sbci	r29, 0xFD	; 253
   10c0a:	88 81       	ld	r24, Y
   10c0c:	99 81       	ldd	r25, Y+1	; 0x01
   10c0e:	c5 52       	subi	r28, 0x25	; 37
   10c10:	d2 40       	sbci	r29, 0x02	; 2
   10c12:	08 17       	cp	r16, r24
   10c14:	19 07       	cpc	r17, r25
   10c16:	19 f0       	breq	.+6      	; 0x10c1e <dbf_open_read+0x82>
    {
        flags |= ERR_READ;
        *errors = flags;
   10c18:	81 e0       	ldi	r24, 0x01	; 1
   10c1a:	90 e0       	ldi	r25, 0x00	; 0
        dbf_close(&fp);
        return( -1 );
    }
    rc = dbf_close(&fp);
   10c1c:	e1 cf       	rjmp	.-62     	; 0x10be0 <dbf_open_read+0x44>
   10c1e:	ce 01       	movw	r24, r28
   10c20:	01 96       	adiw	r24, 0x01	; 1
   10c22:	9f df       	rcall	.-194    	; 0x10b62 <dbf_close>
    if( rc != FR_OK)
   10c24:	89 2b       	or	r24, r25
   10c26:	31 f0       	breq	.+12     	; 0x10c34 <dbf_open_read+0x98>
    {
        flags |= ERR_DISK;
        *errors = flags;
   10c28:	80 e1       	ldi	r24, 0x10	; 16
   10c2a:	90 e0       	ldi	r25, 0x00	; 0
   10c2c:	f7 01       	movw	r30, r14
   10c2e:	91 83       	std	Z+1, r25	; 0x01
   10c30:	80 83       	st	Z, r24
   10c32:	dc cf       	rjmp	.-72     	; 0x10bec <dbf_open_read+0x50>
#if 0
// test timeout - this works ok
	delayms(500); 
#endif

    return(bytes);
   10c34:	cb 5d       	subi	r28, 0xDB	; 219
   10c36:	dd 4f       	sbci	r29, 0xFD	; 253
   10c38:	88 81       	ld	r24, Y
   10c3a:	99 81       	ldd	r25, Y+1	; 0x01
   10c3c:	c5 52       	subi	r28, 0x25	; 37
   10c3e:	d2 40       	sbci	r29, 0x02	; 2
}
   10c40:	ca 5d       	subi	r28, 0xDA	; 218
   10c42:	dd 4f       	sbci	r29, 0xFD	; 253
   10c44:	ec e0       	ldi	r30, 0x0C	; 12
   10c46:	0c 94 c6 e8 	jmp	0x1d18c	; 0x1d18c <__epilogue_restores__+0xc>

00010c4a <dbf_open_write>:
/// @return  bytes actually written.
/// @return -1 on error.
/// @see: ff.h.
/// @return  FRESULT
int dbf_open_write(char *name, uint32_t pos, void *buff, int size, int *errors)
{
   10c4a:	a6 e2       	ldi	r26, 0x26	; 38
   10c4c:	b2 e0       	ldi	r27, 0x02	; 2
   10c4e:	eb e2       	ldi	r30, 0x2B	; 43
   10c50:	f6 e8       	ldi	r31, 0x86	; 134
   10c52:	0c 94 aa e8 	jmp	0x1d154	; 0x1d154 <__prologue_saves__+0xc>
   10c56:	4a 01       	movw	r8, r20
   10c58:	5b 01       	movw	r10, r22
   10c5a:	69 01       	movw	r12, r18
    int rc;
    FIL fp;
    int flags = 0;
    UINT bytes = 0;
   10c5c:	cb 5d       	subi	r28, 0xDB	; 219
   10c5e:	dd 4f       	sbci	r29, 0xFD	; 253
   10c60:	19 82       	std	Y+1, r1	; 0x01
   10c62:	18 82       	st	Y, r1
   10c64:	c5 52       	subi	r28, 0x25	; 37
   10c66:	d2 40       	sbci	r29, 0x02	; 2

    rc = dbf_open(&fp, name, FA_OPEN_EXISTING | FA_READ | FA_WRITE);
   10c68:	43 e0       	ldi	r20, 0x03	; 3
   10c6a:	bc 01       	movw	r22, r24
   10c6c:	ce 01       	movw	r24, r28
   10c6e:	01 96       	adiw	r24, 0x01	; 1
   10c70:	fe de       	rcall	.-516    	; 0x10a6e <dbf_open>
    if( rc != FR_OK)
   10c72:	89 2b       	or	r24, r25
   10c74:	19 f0       	breq	.+6      	; 0x10c7c <dbf_open_write+0x32>
    {
        flags |= ERR_DISK;
        flags |= ERR_WRITE;
        *errors = flags;
   10c76:	82 e1       	ldi	r24, 0x12	; 18
   10c78:	90 e0       	ldi	r25, 0x00	; 0
   10c7a:	2f c0       	rjmp	.+94     	; 0x10cda <dbf_open_write+0x90>
        return( -1 );
    }

///  SEEK
    rc = dbf_lseek(&fp, pos);
   10c7c:	b5 01       	movw	r22, r10
   10c7e:	a4 01       	movw	r20, r8
   10c80:	ce 01       	movw	r24, r28
   10c82:	01 96       	adiw	r24, 0x01	; 1
   10c84:	51 df       	rcall	.-350    	; 0x10b28 <dbf_lseek>
    if( rc != FR_OK)
   10c86:	89 2b       	or	r24, r25
   10c88:	59 f0       	breq	.+22     	; 0x10ca0 <dbf_open_write+0x56>
    {
        flags |= ERR_SEEK;
        flags |= ERR_WRITE;
        *errors = flags;
   10c8a:	86 e0       	ldi	r24, 0x06	; 6
   10c8c:	90 e0       	ldi	r25, 0x00	; 0
   10c8e:	f7 01       	movw	r30, r14
   10c90:	91 83       	std	Z+1, r25	; 0x01
   10c92:	80 83       	st	Z, r24
        dbf_close(&fp);
   10c94:	ce 01       	movw	r24, r28
   10c96:	01 96       	adiw	r24, 0x01	; 1
   10c98:	64 df       	rcall	.-312    	; 0x10b62 <dbf_close>
        return( -1 );
   10c9a:	8f ef       	ldi	r24, 0xFF	; 255
   10c9c:	9f ef       	ldi	r25, 0xFF	; 255
   10c9e:	27 c0       	rjmp	.+78     	; 0x10cee <dbf_open_write+0xa4>
    }

    rc = dbf_write(&fp, buff,size,&bytes);
   10ca0:	9e 01       	movw	r18, r28
   10ca2:	2b 5d       	subi	r18, 0xDB	; 219
   10ca4:	3d 4f       	sbci	r19, 0xFD	; 253
   10ca6:	a8 01       	movw	r20, r16
   10ca8:	b6 01       	movw	r22, r12
   10caa:	ce 01       	movw	r24, r28
   10cac:	01 96       	adiw	r24, 0x01	; 1
   10cae:	1f df       	rcall	.-450    	; 0x10aee <dbf_write>
    if( rc != FR_OK || (UINT) size != bytes)
   10cb0:	89 2b       	or	r24, r25
   10cb2:	49 f4       	brne	.+18     	; 0x10cc6 <dbf_open_write+0x7c>
   10cb4:	cb 5d       	subi	r28, 0xDB	; 219
   10cb6:	dd 4f       	sbci	r29, 0xFD	; 253
   10cb8:	88 81       	ld	r24, Y
   10cba:	99 81       	ldd	r25, Y+1	; 0x01
   10cbc:	c5 52       	subi	r28, 0x25	; 37
   10cbe:	d2 40       	sbci	r29, 0x02	; 2
   10cc0:	08 17       	cp	r16, r24
   10cc2:	19 07       	cpc	r17, r25
   10cc4:	19 f0       	breq	.+6      	; 0x10ccc <dbf_open_write+0x82>
    {
        flags |= ERR_WRITE;
        *errors = flags;
   10cc6:	82 e0       	ldi	r24, 0x02	; 2
   10cc8:	90 e0       	ldi	r25, 0x00	; 0
        dbf_close(&fp);
        return( -1 );
    }
    rc = dbf_close(&fp);
   10cca:	e1 cf       	rjmp	.-62     	; 0x10c8e <dbf_open_write+0x44>
   10ccc:	ce 01       	movw	r24, r28
   10cce:	01 96       	adiw	r24, 0x01	; 1
   10cd0:	48 df       	rcall	.-368    	; 0x10b62 <dbf_close>
    if( rc != FR_OK)
   10cd2:	89 2b       	or	r24, r25
   10cd4:	31 f0       	breq	.+12     	; 0x10ce2 <dbf_open_write+0x98>
    {
        flags |= ERR_DISK;
        *errors = flags;
   10cd6:	80 e1       	ldi	r24, 0x10	; 16
   10cd8:	90 e0       	ldi	r25, 0x00	; 0
   10cda:	f7 01       	movw	r30, r14
   10cdc:	91 83       	std	Z+1, r25	; 0x01
   10cde:	80 83       	st	Z, r24
   10ce0:	dc cf       	rjmp	.-72     	; 0x10c9a <dbf_open_write+0x50>
#if 0
// test timeout - this causes timeout
	delayms(200); 
#endif

    return(bytes);
   10ce2:	cb 5d       	subi	r28, 0xDB	; 219
   10ce4:	dd 4f       	sbci	r29, 0xFD	; 253
   10ce6:	88 81       	ld	r24, Y
   10ce8:	99 81       	ldd	r25, Y+1	; 0x01
   10cea:	c5 52       	subi	r28, 0x25	; 37
   10cec:	d2 40       	sbci	r29, 0x02	; 2
}
   10cee:	ca 5d       	subi	r28, 0xDA	; 218
   10cf0:	dd 4f       	sbci	r29, 0xFD	; 253
   10cf2:	ec e0       	ldi	r30, 0x0C	; 12
   10cf4:	0c 94 c6 e8 	jmp	0x1d18c	; 0x1d18c <__epilogue_restores__+0xc>

00010cf8 <gpib_timer_elapsed_begin>:
            gpib_timer_elapsed_end("PP released");
#endif
        return(1);
    }
    return(0);
}
   10cf8:	0c 94 6a 36 	jmp	0x6cd4	; 0x6cd4 <clock_elapsed_begin>
   10cfc:	08 95       	ret

00010cfe <gpib_timer_reset>:
   10cfe:	f8 94       	cli
   10d00:	ef ed       	ldi	r30, 0xDF	; 223
   10d02:	fc e1       	ldi	r31, 0x1C	; 28
   10d04:	10 82       	st	Z, r1
   10d06:	11 82       	std	Z+1, r1	; 0x01
   10d08:	12 82       	std	Z+2, r1	; 0x02
   10d0a:	13 82       	std	Z+3, r1	; 0x03
   10d0c:	14 82       	std	Z+4, r1	; 0x04
   10d0e:	15 82       	std	Z+5, r1	; 0x05
   10d10:	16 82       	std	Z+6, r1	; 0x06
   10d12:	17 82       	std	Z+7, r1	; 0x07
   10d14:	81 e0       	ldi	r24, 0x01	; 1
   10d16:	80 87       	std	Z+8, r24	; 0x08
   10d18:	78 94       	sei
   10d1a:	08 95       	ret

00010d1c <gpib_timer_elapsed_end>:
   10d1c:	0c 94 70 36 	jmp	0x6ce0	; 0x6ce0 <clock_elapsed_end>
   10d20:	08 95       	ret

00010d22 <gpib_timer_task>:
   10d22:	f8 94       	cli
   10d24:	80 91 e3 1c 	lds	r24, 0x1CE3	; 0x801ce3 <gpib_timer+0x4>
   10d28:	90 91 e4 1c 	lds	r25, 0x1CE4	; 0x801ce4 <gpib_timer+0x5>
   10d2c:	a0 91 e5 1c 	lds	r26, 0x1CE5	; 0x801ce5 <gpib_timer+0x6>
   10d30:	b0 91 e6 1c 	lds	r27, 0x1CE6	; 0x801ce6 <gpib_timer+0x7>
   10d34:	89 2b       	or	r24, r25
   10d36:	8a 2b       	or	r24, r26
   10d38:	8b 2b       	or	r24, r27
   10d3a:	a1 f0       	breq	.+40     	; 0x10d64 <gpib_timer_task+0x42>
   10d3c:	80 91 e3 1c 	lds	r24, 0x1CE3	; 0x801ce3 <gpib_timer+0x4>
   10d40:	90 91 e4 1c 	lds	r25, 0x1CE4	; 0x801ce4 <gpib_timer+0x5>
   10d44:	a0 91 e5 1c 	lds	r26, 0x1CE5	; 0x801ce5 <gpib_timer+0x6>
   10d48:	b0 91 e6 1c 	lds	r27, 0x1CE6	; 0x801ce6 <gpib_timer+0x7>
   10d4c:	01 97       	sbiw	r24, 0x01	; 1
   10d4e:	a1 09       	sbc	r26, r1
   10d50:	b1 09       	sbc	r27, r1
   10d52:	80 93 e3 1c 	sts	0x1CE3, r24	; 0x801ce3 <gpib_timer+0x4>
   10d56:	90 93 e4 1c 	sts	0x1CE4, r25	; 0x801ce4 <gpib_timer+0x5>
   10d5a:	a0 93 e5 1c 	sts	0x1CE5, r26	; 0x801ce5 <gpib_timer+0x6>
   10d5e:	b0 93 e6 1c 	sts	0x1CE6, r27	; 0x801ce6 <gpib_timer+0x7>
   10d62:	03 c0       	rjmp	.+6      	; 0x10d6a <gpib_timer_task+0x48>
   10d64:	81 e0       	ldi	r24, 0x01	; 1
   10d66:	80 93 e7 1c 	sts	0x1CE7, r24	; 0x801ce7 <gpib_timer+0x8>
   10d6a:	78 94       	sei
   10d6c:	08 95       	ret

00010d6e <gpib_timeout_set>:
   10d6e:	f8 94       	cli
   10d70:	ef ed       	ldi	r30, 0xDF	; 223
   10d72:	fc e1       	ldi	r31, 0x1C	; 28
   10d74:	64 83       	std	Z+4, r22	; 0x04
   10d76:	75 83       	std	Z+5, r23	; 0x05
   10d78:	86 83       	std	Z+6, r24	; 0x06
   10d7a:	97 83       	std	Z+7, r25	; 0x07
   10d7c:	10 86       	std	Z+8, r1	; 0x08
   10d7e:	78 94       	sei
   10d80:	08 95       	ret

00010d82 <gpib_bus_init>:
   10d82:	00 d0       	rcall	.+0      	; 0x10d84 <gpib_bus_init+0x2>
   10d84:	1f 92       	push	r1
   10d86:	8f b7       	in	r24, 0x3f	; 63
   10d88:	f8 94       	cli
   10d8a:	10 92 5f 19 	sts	0x195F, r1	; 0x80195f <gpib_unread_f>
   10d8e:	11 b8       	out	0x01, r1	; 1
   10d90:	9f ef       	ldi	r25, 0xFF	; 255
   10d92:	92 b9       	out	0x02, r25	; 2
   10d94:	21 98       	cbi	0x04, 1	; 4
   10d96:	29 9a       	sbi	0x05, 1	; 5
   10d98:	52 98       	cbi	0x0a, 2	; 10
   10d9a:	5a 9a       	sbi	0x0b, 2	; 11
   10d9c:	53 98       	cbi	0x0a, 3	; 10
   10d9e:	5b 9a       	sbi	0x0b, 3	; 11
   10da0:	56 98       	cbi	0x0a, 6	; 10
   10da2:	5e 9a       	sbi	0x0b, 6	; 11
   10da4:	54 98       	cbi	0x0a, 4	; 10
   10da6:	5c 9a       	sbi	0x0b, 4	; 11
   10da8:	57 98       	cbi	0x0a, 7	; 10
   10daa:	5f 9a       	sbi	0x0b, 7	; 11
   10dac:	55 98       	cbi	0x0a, 5	; 10
   10dae:	5d 9a       	sbi	0x0b, 5	; 11
   10db0:	20 98       	cbi	0x04, 0	; 4
   10db2:	28 9a       	sbi	0x05, 0	; 5
   10db4:	45 98       	cbi	0x08, 5	; 8
   10db6:	3d 9a       	sbi	0x07, 5	; 7
   10db8:	44 9a       	sbi	0x08, 4	; 8
   10dba:	3c 9a       	sbi	0x07, 4	; 7
   10dbc:	43 98       	cbi	0x08, 3	; 8
   10dbe:	3b 9a       	sbi	0x07, 3	; 7
   10dc0:	42 98       	cbi	0x08, 2	; 8
   10dc2:	3a 9a       	sbi	0x07, 2	; 7
   10dc4:	9d e0       	ldi	r25, 0x0D	; 13
   10dc6:	9a 95       	dec	r25
   10dc8:	f1 f7       	brne	.-4      	; 0x10dc6 <gpib_bus_init+0x44>
   10dca:	00 00       	nop
   10dcc:	8f bf       	out	0x3f, r24	; 63
   10dce:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   10dd2:	82 ff       	sbrs	r24, 2
   10dd4:	0a c0       	rjmp	.+20     	; 0x10dea <gpib_bus_init+0x68>
   10dd6:	8a e1       	ldi	r24, 0x1A	; 26
   10dd8:	92 e1       	ldi	r25, 0x12	; 18
   10dda:	a0 e0       	ldi	r26, 0x00	; 0
   10ddc:	ed b7       	in	r30, 0x3d	; 61
   10dde:	fe b7       	in	r31, 0x3e	; 62
   10de0:	81 83       	std	Z+1, r24	; 0x01
   10de2:	92 83       	std	Z+2, r25	; 0x02
   10de4:	a3 83       	std	Z+3, r26	; 0x03
   10de6:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
   10dea:	0f 90       	pop	r0
   10dec:	0f 90       	pop	r0
   10dee:	0f 90       	pop	r0
   10df0:	08 95       	ret

00010df2 <gpib_rx_init>:
   10df2:	9f b7       	in	r25, 0x3f	; 63
   10df4:	f8 94       	cli
   10df6:	11 b8       	out	0x01, r1	; 1
   10df8:	2f ef       	ldi	r18, 0xFF	; 255
   10dfa:	22 b9       	out	0x02, r18	; 2
   10dfc:	21 98       	cbi	0x04, 1	; 4
   10dfe:	29 9a       	sbi	0x05, 1	; 5
   10e00:	20 98       	cbi	0x04, 0	; 4
   10e02:	28 9a       	sbi	0x05, 0	; 5
   10e04:	4e 9b       	sbis	0x09, 6	; 9
   10e06:	09 c0       	rjmp	.+18     	; 0x10e1a <gpib_rx_init+0x28>
   10e08:	81 11       	cpse	r24, r1
   10e0a:	07 c0       	rjmp	.+14     	; 0x10e1a <gpib_rx_init+0x28>
   10e0c:	52 98       	cbi	0x0a, 2	; 10
   10e0e:	5a 9a       	sbi	0x0b, 2	; 11
   10e10:	53 98       	cbi	0x0a, 3	; 10
   10e12:	5b 9a       	sbi	0x0b, 3	; 11
   10e14:	42 98       	cbi	0x08, 2	; 8
   10e16:	3a 9a       	sbi	0x07, 2	; 7
   10e18:	08 c0       	rjmp	.+16     	; 0x10e2a <gpib_rx_init+0x38>
   10e1a:	42 98       	cbi	0x08, 2	; 8
   10e1c:	3a 9a       	sbi	0x07, 2	; 7
   10e1e:	5b 98       	cbi	0x0b, 3	; 11
   10e20:	53 9a       	sbi	0x0a, 3	; 10
   10e22:	5a 98       	cbi	0x0b, 2	; 11
   10e24:	52 9a       	sbi	0x0a, 2	; 10
   10e26:	88 23       	and	r24, r24
   10e28:	89 f3       	breq	.-30     	; 0x10e0c <gpib_rx_init+0x1a>
   10e2a:	9f bf       	out	0x3f, r25	; 63
   10e2c:	08 95       	ret

00010e2e <gpib_tx_init>:
   10e2e:	9f b7       	in	r25, 0x3f	; 63
   10e30:	f8 94       	cli
   10e32:	11 b8       	out	0x01, r1	; 1
   10e34:	8f ef       	ldi	r24, 0xFF	; 255
   10e36:	82 b9       	out	0x02, r24	; 2
   10e38:	21 98       	cbi	0x04, 1	; 4
   10e3a:	29 9a       	sbi	0x05, 1	; 5
   10e3c:	52 98       	cbi	0x0a, 2	; 10
   10e3e:	5a 9a       	sbi	0x0b, 2	; 11
   10e40:	53 98       	cbi	0x0a, 3	; 10
   10e42:	5b 9a       	sbi	0x0b, 3	; 11
   10e44:	20 98       	cbi	0x04, 0	; 4
   10e46:	28 9a       	sbi	0x05, 0	; 5
   10e48:	42 9a       	sbi	0x08, 2	; 8
   10e4a:	3a 9a       	sbi	0x07, 2	; 7
   10e4c:	81 b9       	out	0x01, r24	; 1
   10e4e:	9f bf       	out	0x3f, r25	; 63
   10e50:	08 95       	ret

00010e52 <gpib_state_init>:
   10e52:	00 d0       	rcall	.+0      	; 0x10e54 <gpib_state_init+0x2>
   10e54:	1f 92       	push	r1
   10e56:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   10e5a:	82 ff       	sbrs	r24, 2
   10e5c:	0a c0       	rjmp	.+20     	; 0x10e72 <gpib_state_init+0x20>
   10e5e:	87 e0       	ldi	r24, 0x07	; 7
   10e60:	92 e1       	ldi	r25, 0x12	; 18
   10e62:	a0 e0       	ldi	r26, 0x00	; 0
   10e64:	ed b7       	in	r30, 0x3d	; 61
   10e66:	fe b7       	in	r31, 0x3e	; 62
   10e68:	81 83       	std	Z+1, r24	; 0x01
   10e6a:	92 83       	std	Z+2, r25	; 0x02
   10e6c:	a3 83       	std	Z+3, r26	; 0x03
   10e6e:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
   10e72:	cc dd       	rcall	.-1128   	; 0x10a0c <ppr_init>
   10e74:	0e 94 ca 91 	call	0x12394	; 0x12394 <listen_cleanup>
   10e78:	0e 94 e0 92 	call	0x125c0	; 0x125c0 <talk_cleanup>
   10e7c:	10 92 eb 1e 	sts	0x1EEB, r1	; 0x801eeb <spoll>
   10e80:	10 92 ee 1e 	sts	0x1EEE, r1	; 0x801eee <talking>
   10e84:	10 92 f1 1e 	sts	0x1EF1, r1	; 0x801ef1 <talking_last>
   10e88:	10 92 f0 1e 	sts	0x1EF0, r1	; 0x801ef0 <listening>
   10e8c:	10 92 ea 1e 	sts	0x1EEA, r1	; 0x801eea <listening_last>
   10e90:	10 92 e9 1c 	sts	0x1CE9, r1	; 0x801ce9 <lastcmd+0x1>
   10e94:	10 92 e8 1c 	sts	0x1CE8, r1	; 0x801ce8 <lastcmd>
   10e98:	10 92 ed 1e 	sts	0x1EED, r1	; 0x801eed <current+0x1>
   10e9c:	10 92 ec 1e 	sts	0x1EEC, r1	; 0x801eec <current>
   10ea0:	10 92 ef 1e 	sts	0x1EEF, r1	; 0x801eef <secondary>
   10ea4:	0f 90       	pop	r0
   10ea6:	0f 90       	pop	r0
   10ea8:	0f 90       	pop	r0
   10eaa:	08 95       	ret

00010eac <gpib_enable_PPR>:
   10eac:	cf 93       	push	r28
   10eae:	df 93       	push	r29
   10eb0:	ad b7       	in	r26, 0x3d	; 61
   10eb2:	be b7       	in	r27, 0x3e	; 62
   10eb4:	17 97       	sbiw	r26, 0x07	; 7
   10eb6:	0f b6       	in	r0, 0x3f	; 63
   10eb8:	f8 94       	cli
   10eba:	be bf       	out	0x3e, r27	; 62
   10ebc:	0f be       	out	0x3f, r0	; 63
   10ebe:	ad bf       	out	0x3d, r26	; 61
   10ec0:	ec 01       	movw	r28, r24
   10ec2:	88 30       	cpi	r24, 0x08	; 8
   10ec4:	91 05       	cpc	r25, r1
   10ec6:	68 f0       	brcs	.+26     	; 0x10ee2 <gpib_enable_PPR+0x36>
   10ec8:	ed b7       	in	r30, 0x3d	; 61
   10eca:	fe b7       	in	r31, 0x3e	; 62
   10ecc:	95 83       	std	Z+5, r25	; 0x05
   10ece:	84 83       	std	Z+4, r24	; 0x04
   10ed0:	81 ee       	ldi	r24, 0xE1	; 225
   10ed2:	91 e1       	ldi	r25, 0x11	; 17
   10ed4:	a0 e0       	ldi	r26, 0x00	; 0
   10ed6:	81 83       	std	Z+1, r24	; 0x01
   10ed8:	92 83       	std	Z+2, r25	; 0x02
   10eda:	a3 83       	std	Z+3, r26	; 0x03
   10edc:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
   10ee0:	15 c0       	rjmp	.+42     	; 0x10f0c <gpib_enable_PPR+0x60>
   10ee2:	aa dd       	rcall	.-1196   	; 0x10a38 <ppr_bit_set>
   10ee4:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   10ee8:	81 ff       	sbrs	r24, 1
   10eea:	10 c0       	rjmp	.+32     	; 0x10f0c <gpib_enable_PPR+0x60>
   10eec:	8b dd       	rcall	.-1258   	; 0x10a04 <ppr_reg>
   10eee:	90 e0       	ldi	r25, 0x00	; 0
   10ef0:	ed b7       	in	r30, 0x3d	; 61
   10ef2:	fe b7       	in	r31, 0x3e	; 62
   10ef4:	97 83       	std	Z+7, r25	; 0x07
   10ef6:	86 83       	std	Z+6, r24	; 0x06
   10ef8:	d5 83       	std	Z+5, r29	; 0x05
   10efa:	c4 83       	std	Z+4, r28	; 0x04
   10efc:	86 ec       	ldi	r24, 0xC6	; 198
   10efe:	91 e1       	ldi	r25, 0x11	; 17
   10f00:	a0 e0       	ldi	r26, 0x00	; 0
   10f02:	81 83       	std	Z+1, r24	; 0x01
   10f04:	92 83       	std	Z+2, r25	; 0x02
   10f06:	a3 83       	std	Z+3, r26	; 0x03
   10f08:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
   10f0c:	cd b7       	in	r28, 0x3d	; 61
   10f0e:	de b7       	in	r29, 0x3e	; 62
   10f10:	27 96       	adiw	r28, 0x07	; 7
   10f12:	e2 e0       	ldi	r30, 0x02	; 2
   10f14:	0c 94 d0 e8 	jmp	0x1d1a0	; 0x1d1a0 <__epilogue_restores__+0x20>

00010f18 <gpib_disable_PPR>:
   10f18:	cf 93       	push	r28
   10f1a:	df 93       	push	r29
   10f1c:	ad b7       	in	r26, 0x3d	; 61
   10f1e:	be b7       	in	r27, 0x3e	; 62
   10f20:	17 97       	sbiw	r26, 0x07	; 7
   10f22:	0f b6       	in	r0, 0x3f	; 63
   10f24:	f8 94       	cli
   10f26:	be bf       	out	0x3e, r27	; 62
   10f28:	0f be       	out	0x3f, r0	; 63
   10f2a:	ad bf       	out	0x3d, r26	; 61
   10f2c:	ec 01       	movw	r28, r24
   10f2e:	88 30       	cpi	r24, 0x08	; 8
   10f30:	91 05       	cpc	r25, r1
   10f32:	68 f0       	brcs	.+26     	; 0x10f4e <gpib_disable_PPR+0x36>
   10f34:	ed b7       	in	r30, 0x3d	; 61
   10f36:	fe b7       	in	r31, 0x3e	; 62
   10f38:	95 83       	std	Z+5, r25	; 0x05
   10f3a:	84 83       	std	Z+4, r24	; 0x04
   10f3c:	8f e9       	ldi	r24, 0x9F	; 159
   10f3e:	91 e1       	ldi	r25, 0x11	; 17
   10f40:	a0 e0       	ldi	r26, 0x00	; 0
   10f42:	81 83       	std	Z+1, r24	; 0x01
   10f44:	92 83       	std	Z+2, r25	; 0x02
   10f46:	a3 83       	std	Z+3, r26	; 0x03
   10f48:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
   10f4c:	15 c0       	rjmp	.+42     	; 0x10f78 <gpib_disable_PPR+0x60>
   10f4e:	81 dd       	rcall	.-1278   	; 0x10a52 <ppr_bit_clr>
   10f50:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   10f54:	81 ff       	sbrs	r24, 1
   10f56:	10 c0       	rjmp	.+32     	; 0x10f78 <gpib_disable_PPR+0x60>
   10f58:	55 dd       	rcall	.-1366   	; 0x10a04 <ppr_reg>
   10f5a:	90 e0       	ldi	r25, 0x00	; 0
   10f5c:	ed b7       	in	r30, 0x3d	; 61
   10f5e:	fe b7       	in	r31, 0x3e	; 62
   10f60:	97 83       	std	Z+7, r25	; 0x07
   10f62:	86 83       	std	Z+6, r24	; 0x06
   10f64:	d5 83       	std	Z+5, r29	; 0x05
   10f66:	c4 83       	std	Z+4, r28	; 0x04
   10f68:	84 e8       	ldi	r24, 0x84	; 132
   10f6a:	91 e1       	ldi	r25, 0x11	; 17
   10f6c:	a0 e0       	ldi	r26, 0x00	; 0
   10f6e:	81 83       	std	Z+1, r24	; 0x01
   10f70:	92 83       	std	Z+2, r25	; 0x02
   10f72:	a3 83       	std	Z+3, r26	; 0x03
   10f74:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
   10f78:	cd b7       	in	r28, 0x3d	; 61
   10f7a:	de b7       	in	r29, 0x3e	; 62
   10f7c:	27 96       	adiw	r28, 0x07	; 7
   10f7e:	e2 e0       	ldi	r30, 0x02	; 2
   10f80:	0c 94 d0 e8 	jmp	0x1d1a0	; 0x1d1a0 <__epilogue_restores__+0x20>

00010f84 <gpib_unread>:
///     - If ATN is LOW then we strip parity from the byte.
///   - Upper 8 bits: Status and Errors present.
///     - @see gpib.h _FLAGS defines for a full list.
/// @return ch
uint16_t gpib_unread(uint16_t ch)
{
   10f84:	cf 93       	push	r28
   10f86:	df 93       	push	r29
   10f88:	00 d0       	rcall	.+0      	; 0x10f8a <gpib_unread+0x6>
   10f8a:	1f 92       	push	r1
   10f8c:	ec 01       	movw	r28, r24
    if(!gpib_unread_f)
   10f8e:	80 91 5f 19 	lds	r24, 0x195F	; 0x80195f <gpib_unread_f>
   10f92:	81 11       	cpse	r24, r1
   10f94:	08 c0       	rjmp	.+16     	; 0x10fa6 <gpib_unread+0x22>
    {
        gpib_unread_data = ch;
   10f96:	d0 93 f3 1e 	sts	0x1EF3, r29	; 0x801ef3 <gpib_unread_data+0x1>
   10f9a:	c0 93 f2 1e 	sts	0x1EF2, r28	; 0x801ef2 <gpib_unread_data>
        gpib_unread_f = 1;
   10f9e:	81 e0       	ldi	r24, 0x01	; 1
   10fa0:	80 93 5f 19 	sts	0x195F, r24	; 0x80195f <gpib_unread_f>
   10fa4:	12 c0       	rjmp	.+36     	; 0x10fca <gpib_unread+0x46>
    }
    else
    {
        if(debuglevel & (GPIB_ERR + GPIB_BUS_OR_CMD_BYTE_MESSAGES))
   10fa6:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   10faa:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   10fae:	85 70       	andi	r24, 0x05	; 5
   10fb0:	99 27       	eor	r25, r25
   10fb2:	89 2b       	or	r24, r25
   10fb4:	51 f0       	breq	.+20     	; 0x10fca <gpib_unread+0x46>
            printf("gpib_unread: error, can only be called once!\n");
   10fb6:	86 e5       	ldi	r24, 0x56	; 86
   10fb8:	91 e1       	ldi	r25, 0x11	; 17
   10fba:	a0 e0       	ldi	r26, 0x00	; 0
   10fbc:	ed b7       	in	r30, 0x3d	; 61
   10fbe:	fe b7       	in	r31, 0x3e	; 62
   10fc0:	81 83       	std	Z+1, r24	; 0x01
   10fc2:	92 83       	std	Z+2, r25	; 0x02
   10fc4:	a3 83       	std	Z+3, r26	; 0x03
   10fc6:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
    }
    return(ch);
}
   10fca:	ce 01       	movw	r24, r28
   10fcc:	cd b7       	in	r28, 0x3d	; 61
   10fce:	de b7       	in	r29, 0x3e	; 62
   10fd0:	23 96       	adiw	r28, 0x03	; 3
   10fd2:	e2 e0       	ldi	r30, 0x02	; 2
   10fd4:	0c 94 d0 e8 	jmp	0x1d1a0	; 0x1d1a0 <__epilogue_restores__+0x20>

00010fd8 <gpib_bus_read>:

/// @brief Read GPIB data BUS only
/// @return  bus (lower 8 bits)
uint8_t gpib_bus_read()
{
    uint8_t bus = ~(GPIB_BUS_RD());
   10fd8:	11 b8       	out	0x01, r1	; 1
   10fda:	80 b1       	in	r24, 0x00	; 0
   10fdc:	80 95       	com	r24

///@brief if a command byte (ATN low) then strip partity
    if(!GPIB_PIN_TST(ATN))
   10fde:	4e 9b       	sbis	0x09, 6	; 9
        bus &= 0x7f;
   10fe0:	8f 77       	andi	r24, 0x7F	; 127
    else
        bus &= 0xff;
    return(bus);
}
   10fe2:	08 95       	ret

00010fe4 <gpib_control_pin_read>:
/// @return  control lines (upper 8 bits)
/// @see gpib_rx_init()
uint16_t gpib_control_pin_read()
{
    uint16_t control = 0;
    if(GPIB_PIN_TST(ATN) == 0 )
   10fe4:	4e 99       	sbic	0x09, 6	; 9
   10fe6:	03 c0       	rjmp	.+6      	; 0x10fee <gpib_control_pin_read+0xa>
        control |= ATN_FLAG;
   10fe8:	80 e0       	ldi	r24, 0x00	; 0
   10fea:	94 e0       	ldi	r25, 0x04	; 4
   10fec:	02 c0       	rjmp	.+4      	; 0x10ff2 <gpib_control_pin_read+0xe>
///   FIXME We could add a test for read/write state ??
/// @return  control lines (upper 8 bits)
/// @see gpib_rx_init()
uint16_t gpib_control_pin_read()
{
    uint16_t control = 0;
   10fee:	80 e0       	ldi	r24, 0x00	; 0
   10ff0:	90 e0       	ldi	r25, 0x00	; 0
    if(GPIB_PIN_TST(ATN) == 0 )
        control |= ATN_FLAG;
    if(GPIB_PIN_TST(EOI) == 0 )
   10ff2:	18 9b       	sbis	0x03, 0	; 3
        control |= EOI_FLAG;
   10ff4:	91 60       	ori	r25, 0x01	; 1
    if(GPIB_PIN_TST(SRQ) == 0 )
   10ff6:	4d 9b       	sbis	0x09, 5	; 9
        control |= SRQ_FLAG;
   10ff8:	92 60       	ori	r25, 0x02	; 2
    if(GPIB_PIN_TST(REN) == 0 )
   10ffa:	4f 9b       	sbis	0x09, 7	; 9
        control |= REN_FLAG;
   10ffc:	98 60       	ori	r25, 0x08	; 8
    if(GPIB_PIN_TST(IFC) == 0 )
   10ffe:	4c 9b       	sbis	0x09, 4	; 9
        control |= IFC_FLAG;
   11000:	90 61       	ori	r25, 0x10	; 16
    return(control);
}
   11002:	08 95       	ret

00011004 <gpib_handshake_pin_read>:
uint16_t gpib_handshake_pin_read()
{
    uint16_t control = 0;
///@brief for tracing we can reuse the error flag bit values for DAV,NRFD and NDAC
/// FYI: This has no impact on the gpib_read_byte() functions and return values
    if(GPIB_PIN_TST(DAV) == 0 )
   11004:	19 99       	sbic	0x03, 1	; 3
   11006:	03 c0       	rjmp	.+6      	; 0x1100e <gpib_handshake_pin_read+0xa>
        control |= DAV_FLAG;
   11008:	80 e0       	ldi	r24, 0x00	; 0
   1100a:	90 e2       	ldi	r25, 0x20	; 32
   1100c:	02 c0       	rjmp	.+4      	; 0x11012 <gpib_handshake_pin_read+0xe>
/// FIXME: V2 boards can only read pins enabled for read by the SN75162
///   FIXME We could add a test for read/write state ??
/// @return  handshake lines (upper 8 bits)
uint16_t gpib_handshake_pin_read()
{
    uint16_t control = 0;
   1100e:	80 e0       	ldi	r24, 0x00	; 0
   11010:	90 e0       	ldi	r25, 0x00	; 0
///@brief for tracing we can reuse the error flag bit values for DAV,NRFD and NDAC
/// FYI: This has no impact on the gpib_read_byte() functions and return values
    if(GPIB_PIN_TST(DAV) == 0 )
        control |= DAV_FLAG;
    if(GPIB_PIN_TST(NRFD) == 0 )
   11012:	4a 9b       	sbis	0x09, 2	; 9
        control |= NRFD_FLAG;
   11014:	90 64       	ori	r25, 0x40	; 64
    if(GPIB_PIN_TST(NDAC) == 0 )
   11016:	4b 9b       	sbis	0x09, 3	; 9
        control |= NDAC_FLAG;
   11018:	90 68       	ori	r25, 0x80	; 128
    return(control);
}
   1101a:	08 95       	ret

0001101c <gpib_write_byte>:
///       - REN_FLAG
///       - PP_FLAG
///     - Error Flags:
///       - IFC_FLAG
uint16_t gpib_write_byte(uint16_t ch)
{
   1101c:	2f 92       	push	r2
   1101e:	3f 92       	push	r3
   11020:	4f 92       	push	r4
   11022:	6f 92       	push	r6
   11024:	7f 92       	push	r7
   11026:	8f 92       	push	r8
   11028:	af 92       	push	r10
   1102a:	bf 92       	push	r11
   1102c:	cf 92       	push	r12
   1102e:	df 92       	push	r13
   11030:	ef 92       	push	r14
   11032:	1f 93       	push	r17
   11034:	cf 93       	push	r28
   11036:	df 93       	push	r29
   11038:	cd b7       	in	r28, 0x3d	; 61
   1103a:	de b7       	in	r29, 0x3e	; 62
   1103c:	2a 97       	sbiw	r28, 0x0a	; 10
   1103e:	0f b6       	in	r0, 0x3f	; 63
   11040:	f8 94       	cli
   11042:	de bf       	out	0x3e, r29	; 62
   11044:	0f be       	out	0x3f, r0	; 63
   11046:	cd bf       	out	0x3d, r28	; 61
   11048:	9a 87       	std	Y+10, r25	; 0x0a
   1104a:	89 87       	std	Y+9, r24	; 0x09
#if 0
	gpib_rx_init(0);	// NOT busy, NRFD and NDAC OC
#endif

    tx_state = GPIB_TX_START;
    gpib_timeout_set(HTIMEOUT);
   1104c:	64 ef       	ldi	r22, 0xF4	; 244
   1104e:	71 e0       	ldi	r23, 0x01	; 1
   11050:	80 e0       	ldi	r24, 0x00	; 0
   11052:	90 e0       	ldi	r25, 0x00	; 0
   11054:	8c de       	rcall	.-744    	; 0x10d6e <gpib_timeout_set>
// Now Done in write_str
#if 0
	gpib_rx_init(0);	// NOT busy, NRFD and NDAC OC
#endif

    tx_state = GPIB_TX_START;
   11056:	10 e0       	ldi	r17, 0x00	; 0
                if (gpib_timeout_test())
                {
                    ch |= TIMEOUT_FLAG;
                    tx_state = GPIB_TX_ERROR;
                    if(debuglevel & (GPIB_ERR + GPIB_BUS_OR_CMD_BYTE_MESSAGES))
                        printf("<gpib_write_byte timeout waiting for NDAC==1>\n");
   11058:	81 e5       	ldi	r24, 0x51	; 81
   1105a:	90 e1       	ldi	r25, 0x10	; 16
   1105c:	6c 01       	movw	r12, r24
   1105e:	e1 2c       	mov	r14, r1
                    tx_state = GPIB_TX_SET_DAV_LOW;
                }
                if (gpib_timeout_test())
                {
                    if(debuglevel & (GPIB_ERR + GPIB_BUS_OR_CMD_BYTE_MESSAGES))
                        printf("<gpib_write_byte timeout waiting for NRFD==1 && NDAC == 0>\n");
   11060:	80 e8       	ldi	r24, 0x80	; 128
   11062:	90 e1       	ldi	r25, 0x10	; 16
   11064:	3c 01       	movw	r6, r24
   11066:	81 2c       	mov	r8, r1
					}
					else
					{
#ifdef SDEBUG
						if(debuglevel & GPIB_ERR)
							printf("gpib_write_byte: ATN = 0 while waiting for NRFD LOW state =%d\n",tx_state);
   11068:	aa 24       	eor	r10, r10
   1106a:	a3 94       	inc	r10
   1106c:	b1 2c       	mov	r11, r1
   1106e:	88 ef       	ldi	r24, 0xF8	; 248
   11070:	90 e1       	ldi	r25, 0x10	; 16
   11072:	1c 01       	movw	r2, r24
   11074:	41 2c       	mov	r4, r1
					break;
                }
                if (gpib_timeout_test())
                {
                    if(debuglevel & (GPIB_ERR + GPIB_BUS_OR_CMD_BYTE_MESSAGES))
                        printf("<gpib_write_byte timeout waiting for NRFD==1 && NDAC == 0>\n");
   11076:	8c eb       	ldi	r24, 0xBC	; 188
   11078:	90 e1       	ldi	r25, 0x10	; 16
   1107a:	9c 01       	movw	r18, r24
   1107c:	40 e0       	ldi	r20, 0x00	; 0
   1107e:	2e 83       	std	Y+6, r18	; 0x06
   11080:	3f 83       	std	Y+7, r19	; 0x07
   11082:	48 87       	std	Y+8, r20	; 0x08
	// Not called for writting
#if 0
        gpib_user_task();
#endif

		if(uart_keyhit(0))
   11084:	80 e0       	ldi	r24, 0x00	; 0
   11086:	0e 94 dd 2a 	call	0x55ba	; 0x55ba <uart_keyhit>
   1108a:	89 2b       	or	r24, r25
   1108c:	09 f0       	breq	.+2      	; 0x11090 <gpib_write_byte+0x74>
   1108e:	e7 c0       	rjmp	.+462    	; 0x1125e <gpib_write_byte+0x242>
        if(gpib_detect_PP())
            ch |= PP_FLAG;
#endif

// IFC is always in for a device
        if(GPIB_PIN_TST(IFC) == 0)
   11090:	4c 99       	sbic	0x09, 4	; 9
   11092:	19 c0       	rjmp	.+50     	; 0x110c6 <gpib_write_byte+0xaa>
        {
            ch |= IFC_FLAG;
   11094:	89 85       	ldd	r24, Y+9	; 0x09
   11096:	9a 85       	ldd	r25, Y+10	; 0x0a
   11098:	90 61       	ori	r25, 0x10	; 16
   1109a:	9a 87       	std	Y+10, r25	; 0x0a
            gpib_bus_init();
   1109c:	89 87       	std	Y+9, r24	; 0x09
   1109e:	71 de       	rcall	.-798    	; 0x10d82 <gpib_bus_init>
			if(debuglevel & GPIB_ERR)
   110a0:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   110a4:	80 ff       	sbrs	r24, 0
   110a6:	db c0       	rjmp	.+438    	; 0x1125e <gpib_write_byte+0x242>
				printf("gpib_write_byte: IFC state=%d\n", tx_state);
   110a8:	81 2f       	mov	r24, r17
   110aa:	90 e0       	ldi	r25, 0x00	; 0
   110ac:	ed b7       	in	r30, 0x3d	; 61
   110ae:	fe b7       	in	r31, 0x3e	; 62
   110b0:	95 83       	std	Z+5, r25	; 0x05
   110b2:	84 83       	std	Z+4, r24	; 0x04
   110b4:	87 e3       	ldi	r24, 0x37	; 55
   110b6:	91 e1       	ldi	r25, 0x11	; 17
   110b8:	a0 e0       	ldi	r26, 0x00	; 0
   110ba:	81 83       	std	Z+1, r24	; 0x01
   110bc:	92 83       	std	Z+2, r25	; 0x02
   110be:	a3 83       	std	Z+3, r26	; 0x03
   110c0:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
   110c4:	cc c0       	rjmp	.+408    	; 0x1125e <gpib_write_byte+0x242>
            break;
        }

        switch(tx_state)
   110c6:	81 2f       	mov	r24, r17
   110c8:	90 e0       	ldi	r25, 0x00	; 0
   110ca:	89 30       	cpi	r24, 0x09	; 9
   110cc:	91 05       	cpc	r25, r1
   110ce:	08 f0       	brcs	.+2      	; 0x110d2 <gpib_write_byte+0xb6>
   110d0:	be c0       	rjmp	.+380    	; 0x1124e <gpib_write_byte+0x232>
   110d2:	fc 01       	movw	r30, r24
   110d4:	e3 54       	subi	r30, 0x43	; 67
   110d6:	ff 4f       	sbci	r31, 0xFF	; 255
   110d8:	0c 94 75 e8 	jmp	0x1d0ea	; 0x1d0ea <__tablejump2__>
        {
			// DAV == 1 the bus is ready
            case GPIB_TX_START:
				gpib_tx_init();
   110dc:	a8 de       	rcall	.-688    	; 0x10e2e <gpib_tx_init>
				GPIB_PIN_FLOAT_UP(DAV);
   110de:	21 98       	cbi	0x04, 1	; 4
   110e0:	29 9a       	sbi	0x05, 1	; 5
   110e2:	fd e0       	ldi	r31, 0x0D	; 13
   110e4:	fa 95       	dec	r31
   110e6:	f1 f7       	brne	.-4      	; 0x110e4 <gpib_write_byte+0xc8>
   110e8:	00 00       	nop
   110ea:	06 c0       	rjmp	.+12     	; 0x110f8 <gpib_write_byte+0xdc>
                tx_state = GPIB_TX_PUT_DATA;
                break;

// Wait for NRFD or NDAC LOW
            case GPIB_TX_WAIT_FOR_NRFD_OR_NDAC_LOW:
                if(GPIB_PIN_TST(NRFD) == 0 || GPIB_PIN_TST(NDAC) == 0)
   110ec:	4a 9b       	sbis	0x09, 2	; 9
   110ee:	02 c0       	rjmp	.+4      	; 0x110f4 <gpib_write_byte+0xd8>
   110f0:	4b 99       	sbic	0x09, 3	; 9
   110f2:	17 c0       	rjmp	.+46     	; 0x11122 <gpib_write_byte+0x106>
                {
					if(GPIB_PIN_TST(ATN) == 1)
   110f4:	4e 9b       	sbis	0x09, 6	; 9
   110f6:	07 c0       	rjmp	.+14     	; 0x11106 <gpib_write_byte+0xea>
					{
						gpib_timeout_set(HTIMEOUT);
   110f8:	64 ef       	ldi	r22, 0xF4	; 244
   110fa:	71 e0       	ldi	r23, 0x01	; 1
   110fc:	80 e0       	ldi	r24, 0x00	; 0
   110fe:	90 e0       	ldi	r25, 0x00	; 0
   11100:	36 de       	rcall	.-916    	; 0x10d6e <gpib_timeout_set>
						tx_state = GPIB_TX_PUT_DATA;
   11102:	12 e0       	ldi	r17, 0x02	; 2
   11104:	bf cf       	rjmp	.-130    	; 0x11084 <gpib_write_byte+0x68>
					}
					else
					{
#ifdef SDEBUG
						if(debuglevel & GPIB_ERR)
   11106:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1110a:	80 ff       	sbrs	r24, 0
   1110c:	bb cf       	rjmp	.-138    	; 0x11084 <gpib_write_byte+0x68>
							printf("gpib_write_byte: ATN = 0 while waiting for NRFD LOW state =%d\n",tx_state);
   1110e:	ed b7       	in	r30, 0x3d	; 61
   11110:	fe b7       	in	r31, 0x3e	; 62
   11112:	b5 82       	std	Z+5, r11	; 0x05
   11114:	a4 82       	std	Z+4, r10	; 0x04
   11116:	21 82       	std	Z+1, r2	; 0x01
   11118:	32 82       	std	Z+2, r3	; 0x02
   1111a:	43 82       	std	Z+3, r4	; 0x03
   1111c:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
   11120:	b1 cf       	rjmp	.-158    	; 0x11084 <gpib_write_byte+0x68>
/// @see: gpib_timeout_set()
/// @return  1 if timeout, 0 if not
uint8_t gpib_timeout_test()
{
// printf("%8ld,%d\r", (long)gpib_timer.down_counter, (int)gpib_timer.down_counter_done);
    return(gpib_timer.down_counter_done);
   11122:	80 91 e7 1c 	lds	r24, 0x1CE7	; 0x801ce7 <gpib_timer+0x8>
							printf("gpib_write_byte: ATN = 0 while waiting for NRFD LOW state =%d\n",tx_state);
#endif
					}
					break;
                }
                if (gpib_timeout_test())
   11126:	88 23       	and	r24, r24
   11128:	09 f4       	brne	.+2      	; 0x1112c <gpib_write_byte+0x110>
   1112a:	ac cf       	rjmp	.-168    	; 0x11084 <gpib_write_byte+0x68>
                {
                    if(debuglevel & (GPIB_ERR + GPIB_BUS_OR_CMD_BYTE_MESSAGES))
   1112c:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   11130:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   11134:	85 70       	andi	r24, 0x05	; 5
   11136:	99 27       	eor	r25, r25
   11138:	89 2b       	or	r24, r25
   1113a:	c1 f1       	breq	.+112    	; 0x111ac <gpib_write_byte+0x190>
                        printf("<gpib_write_byte timeout waiting for NRFD==1 && NDAC == 0>\n");
   1113c:	2e 81       	ldd	r18, Y+6	; 0x06
   1113e:	3f 81       	ldd	r19, Y+7	; 0x07
   11140:	48 85       	ldd	r20, Y+8	; 0x08
   11142:	ed b7       	in	r30, 0x3d	; 61
   11144:	fe b7       	in	r31, 0x3e	; 62
   11146:	21 83       	std	Z+1, r18	; 0x01
   11148:	32 83       	std	Z+2, r19	; 0x02
   1114a:	43 83       	std	Z+3, r20	; 0x03
   1114c:	2d c0       	rjmp	.+90     	; 0x111a8 <gpib_write_byte+0x18c>
                }
                break;

// Write Data
            case GPIB_TX_PUT_DATA:
                if(ch & EOI_FLAG)
   1114e:	89 85       	ldd	r24, Y+9	; 0x09
   11150:	9a 85       	ldd	r25, Y+10	; 0x0a
   11152:	90 ff       	sbrs	r25, 0
   11154:	03 c0       	rjmp	.+6      	; 0x1115c <gpib_write_byte+0x140>
                    GPIB_IO_LOW(EOI);
   11156:	28 98       	cbi	0x05, 0	; 5
   11158:	20 9a       	sbi	0x04, 0	; 4
   1115a:	02 c0       	rjmp	.+4      	; 0x11160 <gpib_write_byte+0x144>
                else
                    GPIB_PIN_FLOAT_UP(EOI);
   1115c:	20 98       	cbi	0x04, 0	; 4
   1115e:	28 9a       	sbi	0x05, 0	; 5
                GPIB_BUS_WR((ch & 0xff) ^ 0xff);  // Write Data inverted
   11160:	8f ef       	ldi	r24, 0xFF	; 255
   11162:	81 b9       	out	0x01, r24	; 1
   11164:	89 85       	ldd	r24, Y+9	; 0x09
   11166:	80 95       	com	r24
   11168:	82 b9       	out	0x02, r24	; 2
   1116a:	9d e0       	ldi	r25, 0x0D	; 13
   1116c:	9a 95       	dec	r25
   1116e:	f1 f7       	brne	.-4      	; 0x1116c <gpib_write_byte+0x150>
   11170:	00 00       	nop
                GPIB_BUS_SETTLE();                // Let Data BUS settle

                gpib_timeout_set(HTIMEOUT);
   11172:	64 ef       	ldi	r22, 0xF4	; 244
   11174:	71 e0       	ldi	r23, 0x01	; 1
   11176:	80 e0       	ldi	r24, 0x00	; 0
   11178:	90 e0       	ldi	r25, 0x00	; 0
   1117a:	f9 dd       	rcall	.-1038   	; 0x10d6e <gpib_timeout_set>
                tx_state = GPIB_TX_WAIT_FOR_NRFD_HI;
   1117c:	13 e0       	ldi	r17, 0x03	; 3
                break;
   1117e:	82 cf       	rjmp	.-252    	; 0x11084 <gpib_write_byte+0x68>
// Wait for BOTH NRFD HI and NDAC LOW
            case GPIB_TX_WAIT_FOR_NRFD_HI:
#if 0
                if(GPIB_PIN_TST(NRFD) == 1 && GPIB_PIN_TST(NDAC) == 0)
#else
                if(GPIB_PIN_TST(NRFD))
   11180:	4a 99       	sbic	0x09, 2	; 9
#endif
                {
                    tx_state = GPIB_TX_SET_DAV_LOW;
   11182:	14 e0       	ldi	r17, 0x04	; 4
/// @see: gpib_timeout_set()
/// @return  1 if timeout, 0 if not
uint8_t gpib_timeout_test()
{
// printf("%8ld,%d\r", (long)gpib_timer.down_counter, (int)gpib_timer.down_counter_done);
    return(gpib_timer.down_counter_done);
   11184:	80 91 e7 1c 	lds	r24, 0x1CE7	; 0x801ce7 <gpib_timer+0x8>
                if(GPIB_PIN_TST(NRFD))
#endif
                {
                    tx_state = GPIB_TX_SET_DAV_LOW;
                }
                if (gpib_timeout_test())
   11188:	88 23       	and	r24, r24
   1118a:	09 f4       	brne	.+2      	; 0x1118e <gpib_write_byte+0x172>
   1118c:	7b cf       	rjmp	.-266    	; 0x11084 <gpib_write_byte+0x68>
                {
                    if(debuglevel & (GPIB_ERR + GPIB_BUS_OR_CMD_BYTE_MESSAGES))
   1118e:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   11192:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   11196:	85 70       	andi	r24, 0x05	; 5
   11198:	99 27       	eor	r25, r25
   1119a:	89 2b       	or	r24, r25
   1119c:	39 f0       	breq	.+14     	; 0x111ac <gpib_write_byte+0x190>
                        printf("<gpib_write_byte timeout waiting for NRFD==1 && NDAC == 0>\n");
   1119e:	ed b7       	in	r30, 0x3d	; 61
   111a0:	fe b7       	in	r31, 0x3e	; 62
   111a2:	61 82       	std	Z+1, r6	; 0x01
   111a4:	72 82       	std	Z+2, r7	; 0x02
   111a6:	83 82       	std	Z+3, r8	; 0x03
   111a8:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
                    ch |= TIMEOUT_FLAG;
   111ac:	29 85       	ldd	r18, Y+9	; 0x09
   111ae:	3a 85       	ldd	r19, Y+10	; 0x0a
   111b0:	30 64       	ori	r19, 0x40	; 64
   111b2:	3a 87       	std	Y+10, r19	; 0x0a
   111b4:	29 87       	std	Y+9, r18	; 0x09
   111b6:	51 c0       	rjmp	.+162    	; 0x1125a <gpib_write_byte+0x23e>
                    break;
                }
                break;

            case GPIB_TX_SET_DAV_LOW:
                GPIB_IO_LOW(DAV);
   111b8:	29 98       	cbi	0x05, 1	; 5
   111ba:	21 9a       	sbi	0x04, 1	; 4
   111bc:	3d e0       	ldi	r19, 0x0D	; 13
   111be:	3a 95       	dec	r19
   111c0:	f1 f7       	brne	.-4      	; 0x111be <gpib_write_byte+0x1a2>
                GPIB_BUS_SETTLE();                
                gpib_timeout_set(HTIMEOUT);
   111c2:	00 00       	nop
   111c4:	64 ef       	ldi	r22, 0xF4	; 244
   111c6:	71 e0       	ldi	r23, 0x01	; 1
   111c8:	80 e0       	ldi	r24, 0x00	; 0
   111ca:	90 e0       	ldi	r25, 0x00	; 0
   111cc:	d0 dd       	rcall	.-1120   	; 0x10d6e <gpib_timeout_set>
                tx_state = GPIB_TX_WAIT_FOR_NDAC_HI;
   111ce:	15 e0       	ldi	r17, 0x05	; 5
                break;
   111d0:	59 cf       	rjmp	.-334    	; 0x11084 <gpib_write_byte+0x68>

///@brief ALL devices are ready
            case GPIB_TX_WAIT_FOR_NDAC_HI:
                if(GPIB_PIN_TST(NDAC) == 1)       // Byte byte accepted
   111d2:	4b 99       	sbic	0x09, 3	; 9
   111d4:	40 c0       	rjmp	.+128    	; 0x11256 <gpib_write_byte+0x23a>
/// @see: gpib_timeout_set()
/// @return  1 if timeout, 0 if not
uint8_t gpib_timeout_test()
{
// printf("%8ld,%d\r", (long)gpib_timer.down_counter, (int)gpib_timer.down_counter_done);
    return(gpib_timer.down_counter_done);
   111d6:	80 91 e7 1c 	lds	r24, 0x1CE7	; 0x801ce7 <gpib_timer+0x8>
                if(GPIB_PIN_TST(NDAC) == 1)       // Byte byte accepted
                {
                    tx_state = GPIB_TX_SET_DAV_HI;
                    break;
                }
                if (gpib_timeout_test())
   111da:	88 23       	and	r24, r24
   111dc:	09 f4       	brne	.+2      	; 0x111e0 <gpib_write_byte+0x1c4>
   111de:	52 cf       	rjmp	.-348    	; 0x11084 <gpib_write_byte+0x68>
                {
                    ch |= TIMEOUT_FLAG;
   111e0:	89 85       	ldd	r24, Y+9	; 0x09
   111e2:	9a 85       	ldd	r25, Y+10	; 0x0a
   111e4:	90 64       	ori	r25, 0x40	; 64
   111e6:	9a 87       	std	Y+10, r25	; 0x0a
   111e8:	89 87       	std	Y+9, r24	; 0x09
                    tx_state = GPIB_TX_ERROR;
                    if(debuglevel & (GPIB_ERR + GPIB_BUS_OR_CMD_BYTE_MESSAGES))
   111ea:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   111ee:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   111f2:	85 70       	andi	r24, 0x05	; 5
   111f4:	99 27       	eor	r25, r25
   111f6:	89 2b       	or	r24, r25
   111f8:	81 f1       	breq	.+96     	; 0x1125a <gpib_write_byte+0x23e>
                        printf("<gpib_write_byte timeout waiting for NDAC==1>\n");
   111fa:	ed b7       	in	r30, 0x3d	; 61
   111fc:	fe b7       	in	r31, 0x3e	; 62
   111fe:	c1 82       	std	Z+1, r12	; 0x01
   11200:	d2 82       	std	Z+2, r13	; 0x02
   11202:	e3 82       	std	Z+3, r14	; 0x03
   11204:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
   11208:	28 c0       	rjmp	.+80     	; 0x1125a <gpib_write_byte+0x23e>
                }
                break;

///@release BUS
            case GPIB_TX_SET_DAV_HI:
                GPIB_PIN_FLOAT_UP(DAV);
   1120a:	21 98       	cbi	0x04, 1	; 4
   1120c:	29 9a       	sbi	0x05, 1	; 5
   1120e:	fd e0       	ldi	r31, 0x0D	; 13
   11210:	fa 95       	dec	r31
   11212:	f1 f7       	brne	.-4      	; 0x11210 <gpib_write_byte+0x1f4>
                GPIB_BUS_SETTLE();
                tx_state = GPIB_TX_FINISH;
                gpib_timeout_set(HTIMEOUT);
   11214:	00 00       	nop
   11216:	64 ef       	ldi	r22, 0xF4	; 244
   11218:	71 e0       	ldi	r23, 0x01	; 1
   1121a:	80 e0       	ldi	r24, 0x00	; 0
   1121c:	90 e0       	ldi	r25, 0x00	; 0

///@release BUS
            case GPIB_TX_SET_DAV_HI:
                GPIB_PIN_FLOAT_UP(DAV);
                GPIB_BUS_SETTLE();
                tx_state = GPIB_TX_FINISH;
   1121e:	a7 dd       	rcall	.-1202   	; 0x10d6e <gpib_timeout_set>
                gpib_timeout_set(HTIMEOUT);
                break;
   11220:	17 e0       	ldi	r17, 0x07	; 7
                tx_state = GPIB_TX_DONE;
                break;

            case GPIB_TX_ERROR:
				// Free BUS, BUSY on error
                gpib_rx_init(1);
   11222:	30 cf       	rjmp	.-416    	; 0x11084 <gpib_write_byte+0x68>
   11224:	81 e0       	ldi	r24, 0x01	; 1
   11226:	e5 dd       	rcall	.-1078   	; 0x10df2 <gpib_rx_init>
                if(debuglevel & (GPIB_ERR + GPIB_BUS_OR_CMD_BYTE_MESSAGES))
   11228:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1122c:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   11230:	85 70       	andi	r24, 0x05	; 5
   11232:	99 27       	eor	r25, r25
   11234:	89 2b       	or	r24, r25
   11236:	99 f0       	breq	.+38     	; 0x1125e <gpib_write_byte+0x242>
                    printf("<GPIB TX TIMEOUT>\n");
   11238:	8e e3       	ldi	r24, 0x3E	; 62
   1123a:	90 e1       	ldi	r25, 0x10	; 16
   1123c:	a0 e0       	ldi	r26, 0x00	; 0
   1123e:	ed b7       	in	r30, 0x3d	; 61
   11240:	fe b7       	in	r31, 0x3e	; 62
   11242:	81 83       	std	Z+1, r24	; 0x01
   11244:	92 83       	std	Z+2, r25	; 0x02
   11246:	a3 83       	std	Z+3, r26	; 0x03
   11248:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
   1124c:	08 c0       	rjmp	.+16     	; 0x1125e <gpib_write_byte+0x242>
	gpib_rx_init(0);	// NOT busy, NRFD and NDAC OC
#endif

    tx_state = GPIB_TX_START;
    gpib_timeout_set(HTIMEOUT);
    while(tx_state != GPIB_TX_DONE )
   1124e:	19 30       	cpi	r17, 0x09	; 9
   11250:	09 f0       	breq	.+2      	; 0x11254 <gpib_write_byte+0x238>
   11252:	18 cf       	rjmp	.-464    	; 0x11084 <gpib_write_byte+0x68>
   11254:	04 c0       	rjmp	.+8      	; 0x1125e <gpib_write_byte+0x242>

///@brief ALL devices are ready
            case GPIB_TX_WAIT_FOR_NDAC_HI:
                if(GPIB_PIN_TST(NDAC) == 1)       // Byte byte accepted
                {
                    tx_state = GPIB_TX_SET_DAV_HI;
   11256:	16 e0       	ldi	r17, 0x06	; 6
   11258:	15 cf       	rjmp	.-470    	; 0x11084 <gpib_write_byte+0x68>
                    break;
                }
                if (gpib_timeout_test())
                {
                    ch |= TIMEOUT_FLAG;
                    tx_state = GPIB_TX_ERROR;
   1125a:	18 e0       	ldi	r17, 0x08	; 8
   1125c:	13 cf       	rjmp	.-474    	; 0x11084 <gpib_write_byte+0x68>
            case GPIB_TX_DONE:
                break;
        }
    }
    return(ch);
}
   1125e:	89 85       	ldd	r24, Y+9	; 0x09
   11260:	9a 85       	ldd	r25, Y+10	; 0x0a
   11262:	2a 96       	adiw	r28, 0x0a	; 10
   11264:	0f b6       	in	r0, 0x3f	; 63
   11266:	f8 94       	cli
   11268:	de bf       	out	0x3e, r29	; 62
   1126a:	0f be       	out	0x3f, r0	; 63
   1126c:	cd bf       	out	0x3d, r28	; 61
   1126e:	df 91       	pop	r29
   11270:	cf 91       	pop	r28
   11272:	1f 91       	pop	r17
   11274:	ef 90       	pop	r14
   11276:	df 90       	pop	r13
   11278:	cf 90       	pop	r12
   1127a:	bf 90       	pop	r11
   1127c:	af 90       	pop	r10
   1127e:	8f 90       	pop	r8
   11280:	7f 90       	pop	r7
   11282:	6f 90       	pop	r6
   11284:	4f 90       	pop	r4
   11286:	3f 90       	pop	r3
   11288:	2f 90       	pop	r2
   1128a:	08 95       	ret

0001128c <gpib_decode_header>:
/// @see: gpib.h _FLAGS defines for a full list is control lines we track
/// @see: gpib_trace()
/// @return void
///@param[in] fo: FILE pointer or "stdout"
void gpib_decode_header( FILE *fo)
{
   1128c:	cf 93       	push	r28
   1128e:	df 93       	push	r29
   11290:	ec 01       	movw	r28, r24
    if(fo == NULL)
   11292:	89 2b       	or	r24, r25
   11294:	21 f4       	brne	.+8      	; 0x1129e <gpib_decode_header+0x12>
        fo = stdout;
   11296:	c0 91 c1 1c 	lds	r28, 0x1CC1	; 0x801cc1 <__iob+0x2>
   1129a:	d0 91 c2 1c 	lds	r29, 0x1CC2	; 0x801cc2 <__iob+0x3>

    fprintf(fo,"==============================\n");
   1129e:	be 01       	movw	r22, r28
   112a0:	8f ee       	ldi	r24, 0xEF	; 239
   112a2:	9b e0       	ldi	r25, 0x0B	; 11
   112a4:	0e 94 a0 77 	call	0xef40	; 0xef40 <fputs>
    fprintf(fo,"GPIB bus state\n");
   112a8:	be 01       	movw	r22, r28
   112aa:	8f e0       	ldi	r24, 0x0F	; 15
   112ac:	9c e0       	ldi	r25, 0x0C	; 12
   112ae:	0e 94 a0 77 	call	0xef40	; 0xef40 <fputs>
    fprintf(fo,"HH . AESRPITB gpib\n");
   112b2:	be 01       	movw	r22, r28
   112b4:	8f e1       	ldi	r24, 0x1F	; 31
   112b6:	9c e0       	ldi	r25, 0x0C	; 12
   112b8:	0e 94 a0 77 	call	0xef40	; 0xef40 <fputs>
    fprintf(fo,"HH = Hex value of Command or Data\n");
   112bc:	be 01       	movw	r22, r28
   112be:	83 e3       	ldi	r24, 0x33	; 51
   112c0:	9c e0       	ldi	r25, 0x0C	; 12
   112c2:	0e 94 a0 77 	call	0xef40	; 0xef40 <fputs>
    fprintf(fo,"   . = ASCII of XX only for 0x20 .. 0x7e\n");
   112c6:	be 01       	movw	r22, r28
   112c8:	86 e5       	ldi	r24, 0x56	; 86
   112ca:	9c e0       	ldi	r25, 0x0C	; 12
   112cc:	0e 94 a0 77 	call	0xef40	; 0xef40 <fputs>
    fprintf(fo,"     A = ATN\n");
   112d0:	be 01       	movw	r22, r28
   112d2:	80 e8       	ldi	r24, 0x80	; 128
   112d4:	9c e0       	ldi	r25, 0x0C	; 12
   112d6:	0e 94 a0 77 	call	0xef40	; 0xef40 <fputs>
    fprintf(fo,"      E = EOI\n");
   112da:	be 01       	movw	r22, r28
   112dc:	8e e8       	ldi	r24, 0x8E	; 142
   112de:	9c e0       	ldi	r25, 0x0C	; 12
   112e0:	0e 94 a0 77 	call	0xef40	; 0xef40 <fputs>
    fprintf(fo,"       S = SRQ\n");
   112e4:	be 01       	movw	r22, r28
   112e6:	8d e9       	ldi	r24, 0x9D	; 157
   112e8:	9c e0       	ldi	r25, 0x0C	; 12
   112ea:	0e 94 a0 77 	call	0xef40	; 0xef40 <fputs>
    fprintf(fo,"        R = REN\n");
   112ee:	be 01       	movw	r22, r28
   112f0:	8d ea       	ldi	r24, 0xAD	; 173
   112f2:	9c e0       	ldi	r25, 0x0C	; 12
   112f4:	0e 94 a0 77 	call	0xef40	; 0xef40 <fputs>
    fprintf(fo,"         I = IFC\n");
   112f8:	be 01       	movw	r22, r28
   112fa:	8e eb       	ldi	r24, 0xBE	; 190
   112fc:	9c e0       	ldi	r25, 0x0C	; 12
   112fe:	0e 94 a0 77 	call	0xef40	; 0xef40 <fputs>
    fprintf(fo,"          P = Parallel Poll seen\n");
   11302:	be 01       	movw	r22, r28
   11304:	80 ed       	ldi	r24, 0xD0	; 208
   11306:	9c e0       	ldi	r25, 0x0C	; 12
   11308:	0e 94 a0 77 	call	0xef40	; 0xef40 <fputs>
    fprintf(fo,"           T = TIMEOUT\n");
   1130c:	be 01       	movw	r22, r28
   1130e:	82 ef       	ldi	r24, 0xF2	; 242
   11310:	9c e0       	ldi	r25, 0x0C	; 12
   11312:	0e 94 a0 77 	call	0xef40	; 0xef40 <fputs>
    fprintf(fo,"            B = BUS_ERROR\n");
   11316:	be 01       	movw	r22, r28
   11318:	8a e0       	ldi	r24, 0x0A	; 10
   1131a:	9d e0       	ldi	r25, 0x0D	; 13
   1131c:	0e 94 a0 77 	call	0xef40	; 0xef40 <fputs>
    fprintf(fo,"              GPIB commands\n");
   11320:	be 01       	movw	r22, r28
   11322:	85 e2       	ldi	r24, 0x25	; 37
   11324:	9d e0       	ldi	r25, 0x0D	; 13
   11326:	0e 94 a0 77 	call	0xef40	; 0xef40 <fputs>
}
   1132a:	df 91       	pop	r29
   1132c:	cf 91       	pop	r28
   1132e:	08 95       	ret

00011330 <gpib_trace_display>:
/// @return  void
/// Note the bits we can read depends on what hardware verions we have
/// V2 hardware can only read status bits based on GPIB control buffer direction
///   FIXME We could add a test for read/write state ??
void gpib_trace_display(uint16_t status,int trace_state)
{
   11330:	a9 e8       	ldi	r26, 0x89	; 137
   11332:	b0 e0       	ldi	r27, 0x00	; 0
   11334:	ee e9       	ldi	r30, 0x9E	; 158
   11336:	f9 e8       	ldi	r31, 0x89	; 137
   11338:	0c 94 aa e8 	jmp	0x1d154	; 0x1d154 <__prologue_saves__+0xc>
   1133c:	8c 01       	movw	r16, r24
   1133e:	5b 01       	movw	r10, r22
    char str[128];
    char *tmp= str;
    uint8_t bus = status & 0xff;
    extern FILE *gpib_log_fp;

    str[0] = 0;
   11340:	1a 86       	std	Y+10, r1	; 0x0a
   11342:	4c 01       	movw	r8, r24
   11344:	88 24       	eor	r8, r8
   11346:	44 e0       	ldi	r20, 0x04	; 4
   11348:	94 22       	and	r9, r20
   1134a:	ce 01       	movw	r24, r28
   1134c:	0a 96       	adiw	r24, 0x0a	; 10
   1134e:	7c 01       	movw	r14, r24

// Display data bus ???
    if(trace_state == TRACE_DISABLE || trace_state == TRACE_READ)
   11350:	62 30       	cpi	r22, 0x02	; 2
   11352:	71 05       	cpc	r23, r1
   11354:	e8 f4       	brcc	.+58     	; 0x11390 <gpib_trace_display+0x60>
    {
        uint8_t printable = ' ';                  // Data
        if( !(status & ATN_FLAG) && (bus >= 0x20 && bus <= 0x7e) )
   11356:	81 14       	cp	r8, r1
   11358:	91 04       	cpc	r9, r1
   1135a:	29 f4       	brne	.+10     	; 0x11366 <gpib_trace_display+0x36>
///   FIXME We could add a test for read/write state ??
void gpib_trace_display(uint16_t status,int trace_state)
{
    char str[128];
    char *tmp= str;
    uint8_t bus = status & 0xff;
   1135c:	80 2f       	mov	r24, r16

// Display data bus ???
    if(trace_state == TRACE_DISABLE || trace_state == TRACE_READ)
    {
        uint8_t printable = ' ';                  // Data
        if( !(status & ATN_FLAG) && (bus >= 0x20 && bus <= 0x7e) )
   1135e:	90 ee       	ldi	r25, 0xE0	; 224
   11360:	90 0f       	add	r25, r16
   11362:	9f 35       	cpi	r25, 0x5F	; 95
   11364:	08 f0       	brcs	.+2      	; 0x11368 <gpib_trace_display+0x38>
    str[0] = 0;

// Display data bus ???
    if(trace_state == TRACE_DISABLE || trace_state == TRACE_READ)
    {
        uint8_t printable = ' ';                  // Data
   11366:	80 e2       	ldi	r24, 0x20	; 32
        if( !(status & ATN_FLAG) && (bus >= 0x20 && bus <= 0x7e) )
            printable = bus;
        sprintf(str, "%02X %c ", (int)bus & 0xff, (int)printable);
   11368:	90 e0       	ldi	r25, 0x00	; 0
   1136a:	ed b7       	in	r30, 0x3d	; 61
   1136c:	fe b7       	in	r31, 0x3e	; 62
   1136e:	91 87       	std	Z+9, r25	; 0x09
   11370:	80 87       	std	Z+8, r24	; 0x08
   11372:	c8 01       	movw	r24, r16
   11374:	99 27       	eor	r25, r25
   11376:	97 83       	std	Z+7, r25	; 0x07
   11378:	86 83       	std	Z+6, r24	; 0x06
   1137a:	87 e1       	ldi	r24, 0x17	; 23
   1137c:	90 e1       	ldi	r25, 0x10	; 16
   1137e:	a0 e0       	ldi	r26, 0x00	; 0
   11380:	83 83       	std	Z+3, r24	; 0x03
   11382:	94 83       	std	Z+4, r25	; 0x04
   11384:	a5 83       	std	Z+5, r26	; 0x05
   11386:	f2 82       	std	Z+2, r15	; 0x02
   11388:	e1 82       	std	Z+1, r14	; 0x01
   1138a:	0e 94 e8 47 	call	0x8fd0	; 0x8fd0 <sprintf_P>
   1138e:	0c c0       	rjmp	.+24     	; 0x113a8 <gpib_trace_display+0x78>
    }
    else
    {
        sprintf(str, "     ");
   11390:	81 e1       	ldi	r24, 0x11	; 17
   11392:	90 e1       	ldi	r25, 0x10	; 16
   11394:	a0 e0       	ldi	r26, 0x00	; 0
   11396:	ed b7       	in	r30, 0x3d	; 61
   11398:	fe b7       	in	r31, 0x3e	; 62
   1139a:	83 83       	std	Z+3, r24	; 0x03
   1139c:	94 83       	std	Z+4, r25	; 0x04
   1139e:	a5 83       	std	Z+5, r26	; 0x05
   113a0:	f2 82       	std	Z+2, r15	; 0x02
   113a2:	e1 82       	std	Z+1, r14	; 0x01
   113a4:	0e 94 e8 47 	call	0x8fd0	; 0x8fd0 <sprintf_P>
    }

    tmp = str + strlen(str);
   113a8:	f7 01       	movw	r30, r14
   113aa:	01 90       	ld	r0, Z+
   113ac:	00 20       	and	r0, r0
   113ae:	e9 f7       	brne	.-6      	; 0x113aa <gpib_trace_display+0x7a>
   113b0:	31 97       	sbiw	r30, 0x01	; 1
   113b2:	cf 01       	movw	r24, r30
   113b4:	01 96       	adiw	r24, 0x01	; 1

    if(status & ATN_FLAG)
   113b6:	81 14       	cp	r8, r1
   113b8:	91 04       	cpc	r9, r1
   113ba:	11 f0       	breq	.+4      	; 0x113c0 <gpib_trace_display+0x90>
        *tmp++ = 'A';
   113bc:	21 e4       	ldi	r18, 0x41	; 65
   113be:	01 c0       	rjmp	.+2      	; 0x113c2 <gpib_trace_display+0x92>
    else
        *tmp++ = '-';
   113c0:	2d e2       	ldi	r18, 0x2D	; 45
   113c2:	20 83       	st	Z, r18
   113c4:	dc 01       	movw	r26, r24
   113c6:	11 96       	adiw	r26, 0x01	; 1

    if(status & EOI_FLAG)
   113c8:	10 ff       	sbrs	r17, 0
   113ca:	02 c0       	rjmp	.+4      	; 0x113d0 <gpib_trace_display+0xa0>
        *tmp++ = 'E';
   113cc:	25 e4       	ldi	r18, 0x45	; 69
   113ce:	01 c0       	rjmp	.+2      	; 0x113d2 <gpib_trace_display+0xa2>
    else
        *tmp++ = '-';
   113d0:	2d e2       	ldi	r18, 0x2D	; 45
   113d2:	fc 01       	movw	r30, r24
   113d4:	20 83       	st	Z, r18
   113d6:	fd 01       	movw	r30, r26
   113d8:	31 96       	adiw	r30, 0x01	; 1

    if(status & SRQ_FLAG)
   113da:	11 ff       	sbrs	r17, 1
   113dc:	02 c0       	rjmp	.+4      	; 0x113e2 <gpib_trace_display+0xb2>
        *tmp++ = 'S';
   113de:	83 e5       	ldi	r24, 0x53	; 83
   113e0:	01 c0       	rjmp	.+2      	; 0x113e4 <gpib_trace_display+0xb4>
    else
        *tmp++ = '-';
   113e2:	8d e2       	ldi	r24, 0x2D	; 45
   113e4:	8c 93       	st	X, r24
   113e6:	df 01       	movw	r26, r30
   113e8:	11 96       	adiw	r26, 0x01	; 1

    if(status & REN_FLAG)
   113ea:	13 ff       	sbrs	r17, 3
   113ec:	02 c0       	rjmp	.+4      	; 0x113f2 <gpib_trace_display+0xc2>
        *tmp++ = 'R';
   113ee:	82 e5       	ldi	r24, 0x52	; 82
   113f0:	01 c0       	rjmp	.+2      	; 0x113f4 <gpib_trace_display+0xc4>
    else
        *tmp++ = '-';
   113f2:	8d e2       	ldi	r24, 0x2D	; 45
   113f4:	80 83       	st	Z, r24
   113f6:	fd 01       	movw	r30, r26
   113f8:	31 96       	adiw	r30, 0x01	; 1

    if(status & IFC_FLAG)
   113fa:	14 ff       	sbrs	r17, 4
   113fc:	02 c0       	rjmp	.+4      	; 0x11402 <gpib_trace_display+0xd2>
        *tmp++ = 'I';
   113fe:	89 e4       	ldi	r24, 0x49	; 73
   11400:	01 c0       	rjmp	.+2      	; 0x11404 <gpib_trace_display+0xd4>
    else
        *tmp++ = '-';
   11402:	8d e2       	ldi	r24, 0x2D	; 45
   11404:	8c 93       	st	X, r24

    if(trace_state == TRACE_DISABLE)
   11406:	a1 14       	cp	r10, r1
   11408:	b1 04       	cpc	r11, r1
   1140a:	d1 f4       	brne	.+52     	; 0x11440 <gpib_trace_display+0x110>
   1140c:	df 01       	movw	r26, r30
   1140e:	11 96       	adiw	r26, 0x01	; 1
    {
        if(status & PP_FLAG)
   11410:	15 ff       	sbrs	r17, 5
   11412:	02 c0       	rjmp	.+4      	; 0x11418 <gpib_trace_display+0xe8>
            *tmp++ = 'P';
   11414:	80 e5       	ldi	r24, 0x50	; 80
   11416:	01 c0       	rjmp	.+2      	; 0x1141a <gpib_trace_display+0xea>
        else
            *tmp++ = '-';
   11418:	8d e2       	ldi	r24, 0x2D	; 45
   1141a:	80 83       	st	Z, r24
   1141c:	fd 01       	movw	r30, r26
   1141e:	31 96       	adiw	r30, 0x01	; 1
        if(status & TIMEOUT_FLAG)
   11420:	16 ff       	sbrs	r17, 6
   11422:	02 c0       	rjmp	.+4      	; 0x11428 <gpib_trace_display+0xf8>
            *tmp++ = 'T';
   11424:	84 e5       	ldi	r24, 0x54	; 84
   11426:	01 c0       	rjmp	.+2      	; 0x1142a <gpib_trace_display+0xfa>
        else
            *tmp++ = '-';
   11428:	8d e2       	ldi	r24, 0x2D	; 45
   1142a:	8c 93       	st	X, r24
   1142c:	cf 01       	movw	r24, r30
   1142e:	01 96       	adiw	r24, 0x01	; 1
        if(status & BUS_ERROR_FLAG)
            *tmp++ = 'B';
   11430:	6c 01       	movw	r12, r24
            *tmp++ = '-';
        if(status & TIMEOUT_FLAG)
            *tmp++ = 'T';
        else
            *tmp++ = '-';
        if(status & BUS_ERROR_FLAG)
   11432:	17 ff       	sbrs	r17, 7
   11434:	02 c0       	rjmp	.+4      	; 0x1143a <gpib_trace_display+0x10a>
            *tmp++ = 'B';
   11436:	82 e4       	ldi	r24, 0x42	; 66
   11438:	01 c0       	rjmp	.+2      	; 0x1143c <gpib_trace_display+0x10c>
        else
            *tmp++ = '-';
   1143a:	8d e2       	ldi	r24, 0x2D	; 45
   1143c:	80 83       	st	Z, r24
   1143e:	08 c0       	rjmp	.+16     	; 0x11450 <gpib_trace_display+0x120>
    }
    else
    {
// not used when tracing
        *tmp++ = '-';
   11440:	8d e2       	ldi	r24, 0x2D	; 45
   11442:	80 83       	st	Z, r24
        *tmp++ = '-';
   11444:	81 83       	std	Z+1, r24	; 0x01
        *tmp++ = '-';
   11446:	6f 01       	movw	r12, r30
   11448:	43 e0       	ldi	r20, 0x03	; 3
   1144a:	c4 0e       	add	r12, r20
   1144c:	d1 1c       	adc	r13, r1
   1144e:	82 83       	std	Z+2, r24	; 0x02
    }
    *tmp = 0;
   11450:	f6 01       	movw	r30, r12
   11452:	10 82       	st	Z, r1

    if(trace_state == TRACE_READ || trace_state == TRACE_BUS)
   11454:	f1 e0       	ldi	r31, 0x01	; 1
   11456:	af 1a       	sub	r10, r31
   11458:	b1 08       	sbc	r11, r1
   1145a:	42 e0       	ldi	r20, 0x02	; 2
   1145c:	a4 16       	cp	r10, r20
   1145e:	b1 04       	cpc	r11, r1
   11460:	f0 f4       	brcc	.+60     	; 0x1149e <gpib_trace_display+0x16e>
    {
        if(status & DAV_FLAG)
   11462:	15 ff       	sbrs	r17, 5
   11464:	03 c0       	rjmp	.+6      	; 0x1146c <gpib_trace_display+0x13c>
            strcat(str,"  DAV");
   11466:	62 e4       	ldi	r22, 0x42	; 66
   11468:	7d e0       	ldi	r23, 0x0D	; 13
   1146a:	02 c0       	rjmp	.+4      	; 0x11470 <gpib_trace_display+0x140>
        else
            strcat(str,"     ");
   1146c:	65 e6       	ldi	r22, 0x65	; 101
   1146e:	74 e0       	ldi	r23, 0x04	; 4
   11470:	c7 01       	movw	r24, r14
   11472:	0e 94 5e 32 	call	0x64bc	; 0x64bc <strcat>
        if(status & NRFD_FLAG)
   11476:	16 ff       	sbrs	r17, 6
   11478:	03 c0       	rjmp	.+6      	; 0x11480 <gpib_trace_display+0x150>
            strcat(str," NRFD");
   1147a:	68 e4       	ldi	r22, 0x48	; 72
   1147c:	7d e0       	ldi	r23, 0x0D	; 13
   1147e:	02 c0       	rjmp	.+4      	; 0x11484 <gpib_trace_display+0x154>
        else
            strcat(str,"     ");
   11480:	65 e6       	ldi	r22, 0x65	; 101
   11482:	74 e0       	ldi	r23, 0x04	; 4
   11484:	c7 01       	movw	r24, r14
   11486:	0e 94 5e 32 	call	0x64bc	; 0x64bc <strcat>
        if(status & NDAC_FLAG)
   1148a:	17 ff       	sbrs	r17, 7
   1148c:	03 c0       	rjmp	.+6      	; 0x11494 <gpib_trace_display+0x164>
            strcat(str," NDAC");
   1148e:	6e e4       	ldi	r22, 0x4E	; 78
   11490:	7d e0       	ldi	r23, 0x0D	; 13
   11492:	02 c0       	rjmp	.+4      	; 0x11498 <gpib_trace_display+0x168>
        else
            strcat(str,"     ");
   11494:	65 e6       	ldi	r22, 0x65	; 101
   11496:	74 e0       	ldi	r23, 0x04	; 4
   11498:	c7 01       	movw	r24, r14
   1149a:	0e 94 5e 32 	call	0x64bc	; 0x64bc <strcat>
    }

    if( (status & ATN_FLAG) )
   1149e:	81 14       	cp	r8, r1
   114a0:	91 04       	cpc	r9, r1
   114a2:	09 f4       	brne	.+2      	; 0x114a6 <gpib_trace_display+0x176>
   114a4:	5a c0       	rjmp	.+180    	; 0x1155a <gpib_trace_display+0x22a>
    {
        int i;
        int cmd = status & CMD_MASK;
   114a6:	c8 01       	movw	r24, r16
   114a8:	8f 77       	andi	r24, 0x7F	; 127
   114aa:	99 27       	eor	r25, r25
        if(cmd >= 0x020 && cmd <= 0x3e)
   114ac:	9c 01       	movw	r18, r24
   114ae:	20 52       	subi	r18, 0x20	; 32
   114b0:	31 09       	sbc	r19, r1
   114b2:	2f 31       	cpi	r18, 0x1F	; 31
   114b4:	31 05       	cpc	r19, r1
   114b6:	48 f4       	brcc	.+18     	; 0x114ca <gpib_trace_display+0x19a>
            sprintf(tmp," MLA %02Xh", cmd & 0x1f);
   114b8:	0f 71       	andi	r16, 0x1F	; 31
   114ba:	11 27       	eor	r17, r17
   114bc:	ed b7       	in	r30, 0x3d	; 61
   114be:	fe b7       	in	r31, 0x3e	; 62
   114c0:	17 83       	std	Z+7, r17	; 0x07
   114c2:	06 83       	std	Z+6, r16	; 0x06
   114c4:	86 e0       	ldi	r24, 0x06	; 6
   114c6:	90 e1       	ldi	r25, 0x10	; 16
   114c8:	0e c0       	rjmp	.+28     	; 0x114e6 <gpib_trace_display+0x1b6>
        else if(cmd >= 0x040 && cmd <= 0x4e)
   114ca:	9c 01       	movw	r18, r24
   114cc:	20 54       	subi	r18, 0x40	; 64
   114ce:	31 09       	sbc	r19, r1
   114d0:	2f 30       	cpi	r18, 0x0F	; 15
   114d2:	31 05       	cpc	r19, r1
   114d4:	88 f4       	brcc	.+34     	; 0x114f8 <gpib_trace_display+0x1c8>
            sprintf(tmp," MTA %02Xh", cmd & 0x1f);
   114d6:	0f 71       	andi	r16, 0x1F	; 31
   114d8:	11 27       	eor	r17, r17
   114da:	ed b7       	in	r30, 0x3d	; 61
   114dc:	fe b7       	in	r31, 0x3e	; 62
   114de:	17 83       	std	Z+7, r17	; 0x07
   114e0:	06 83       	std	Z+6, r16	; 0x06
   114e2:	8b ef       	ldi	r24, 0xFB	; 251
   114e4:	9f e0       	ldi	r25, 0x0F	; 15
   114e6:	a0 e0       	ldi	r26, 0x00	; 0
   114e8:	83 83       	std	Z+3, r24	; 0x03
   114ea:	94 83       	std	Z+4, r25	; 0x04
   114ec:	a5 83       	std	Z+5, r26	; 0x05
   114ee:	d2 82       	std	Z+2, r13	; 0x02
   114f0:	c1 82       	std	Z+1, r12	; 0x01
   114f2:	0e 94 e8 47 	call	0x8fd0	; 0x8fd0 <sprintf_P>
   114f6:	31 c0       	rjmp	.+98     	; 0x1155a <gpib_trace_display+0x22a>
        else if(cmd >= 0x060 && cmd <= 0x6f)
   114f8:	9c 01       	movw	r18, r24
   114fa:	20 56       	subi	r18, 0x60	; 96
   114fc:	31 09       	sbc	r19, r1
   114fe:	20 31       	cpi	r18, 0x10	; 16
   11500:	31 05       	cpc	r19, r1
   11502:	28 f0       	brcs	.+10     	; 0x1150e <gpib_trace_display+0x1de>
   11504:	e2 e8       	ldi	r30, 0x82	; 130
   11506:	f1 e0       	ldi	r31, 0x01	; 1
   11508:	00 e0       	ldi	r16, 0x00	; 0
   1150a:	10 e0       	ldi	r17, 0x00	; 0
   1150c:	0b c0       	rjmp	.+22     	; 0x11524 <gpib_trace_display+0x1f4>
            sprintf(tmp," MSA %02Xh", cmd & 0x1f);
   1150e:	0f 71       	andi	r16, 0x1F	; 31
   11510:	11 27       	eor	r17, r17
   11512:	ed b7       	in	r30, 0x3d	; 61
   11514:	fe b7       	in	r31, 0x3e	; 62
   11516:	17 83       	std	Z+7, r17	; 0x07
   11518:	06 83       	std	Z+6, r16	; 0x06
   1151a:	80 ef       	ldi	r24, 0xF0	; 240
   1151c:	9f e0       	ldi	r25, 0x0F	; 15
   1151e:	e3 cf       	rjmp	.-58     	; 0x114e6 <gpib_trace_display+0x1b6>
        else
        {
            for(i=0;gpib_tokens[i].cmd != -1;++i)
   11520:	0f 5f       	subi	r16, 0xFF	; 255
   11522:	1f 4f       	sbci	r17, 0xFF	; 255
   11524:	20 81       	ld	r18, Z
   11526:	31 81       	ldd	r19, Z+1	; 0x01
   11528:	2f 3f       	cpi	r18, 0xFF	; 255
   1152a:	4f ef       	ldi	r20, 0xFF	; 255
   1152c:	34 07       	cpc	r19, r20
   1152e:	a9 f0       	breq	.+42     	; 0x1155a <gpib_trace_display+0x22a>
   11530:	34 96       	adiw	r30, 0x04	; 4
            {
                if(cmd == gpib_tokens[i].cmd)
   11532:	82 17       	cp	r24, r18
   11534:	93 07       	cpc	r25, r19
   11536:	a1 f7       	brne	.-24     	; 0x11520 <gpib_trace_display+0x1f0>
                {
                    strcat(tmp," ");
   11538:	69 e6       	ldi	r22, 0x69	; 105
   1153a:	74 e0       	ldi	r23, 0x04	; 4
   1153c:	c6 01       	movw	r24, r12
   1153e:	0e 94 5e 32 	call	0x64bc	; 0x64bc <strcat>
                    strcat(tmp,gpib_tokens[i].name);
   11542:	f8 01       	movw	r30, r16
   11544:	ee 0f       	add	r30, r30
   11546:	ff 1f       	adc	r31, r31
   11548:	ee 0f       	add	r30, r30
   1154a:	ff 1f       	adc	r31, r31
   1154c:	ee 57       	subi	r30, 0x7E	; 126
   1154e:	fe 4f       	sbci	r31, 0xFE	; 254
   11550:	62 81       	ldd	r22, Z+2	; 0x02
   11552:	73 81       	ldd	r23, Z+3	; 0x03
   11554:	c6 01       	movw	r24, r12
   11556:	0e 94 5e 32 	call	0x64bc	; 0x64bc <strcat>
                }
            }
        }
    }

    if(gpib_log_fp == NULL)
   1155a:	20 91 60 19 	lds	r18, 0x1960	; 0x801960 <gpib_log_fp>
   1155e:	30 91 61 19 	lds	r19, 0x1961	; 0x801961 <gpib_log_fp+0x1>
   11562:	80 91 c1 1c 	lds	r24, 0x1CC1	; 0x801cc1 <__iob+0x2>
   11566:	90 91 c2 1c 	lds	r25, 0x1CC2	; 0x801cc2 <__iob+0x3>
   1156a:	23 2b       	or	r18, r19
   1156c:	21 f4       	brne	.+8      	; 0x11576 <gpib_trace_display+0x246>
        gpib_log_fp = stdout;
   1156e:	90 93 61 19 	sts	0x1961, r25	; 0x801961 <gpib_log_fp+0x1>
   11572:	80 93 60 19 	sts	0x1960, r24	; 0x801960 <gpib_log_fp>

// Echo to console unless file is the console
    if(gpib_log_fp != stdout)
   11576:	20 91 60 19 	lds	r18, 0x1960	; 0x801960 <gpib_log_fp>
   1157a:	30 91 61 19 	lds	r19, 0x1961	; 0x801961 <gpib_log_fp+0x1>
   1157e:	82 17       	cp	r24, r18
   11580:	93 07       	cpc	r25, r19
   11582:	19 f0       	breq	.+6      	; 0x1158a <gpib_trace_display+0x25a>
        puts(str);
   11584:	c7 01       	movw	r24, r14
   11586:	0e 94 b8 77 	call	0xef70	; 0xef70 <puts>

// Save to file
    fprintf(gpib_log_fp,"%s\n",str);
   1158a:	ed b7       	in	r30, 0x3d	; 61
   1158c:	fe b7       	in	r31, 0x3e	; 62
   1158e:	f6 82       	std	Z+6, r15	; 0x06
   11590:	e5 82       	std	Z+5, r14	; 0x05
   11592:	84 e5       	ldi	r24, 0x54	; 84
   11594:	9d e0       	ldi	r25, 0x0D	; 13
   11596:	94 83       	std	Z+4, r25	; 0x04
   11598:	83 83       	std	Z+3, r24	; 0x03
   1159a:	80 91 60 19 	lds	r24, 0x1960	; 0x801960 <gpib_log_fp>
   1159e:	90 91 61 19 	lds	r25, 0x1961	; 0x801961 <gpib_log_fp+0x1>
   115a2:	92 83       	std	Z+2, r25	; 0x02
   115a4:	81 83       	std	Z+1, r24	; 0x01
   115a6:	0e 94 60 7f 	call	0xfec0	; 0xfec0 <fprintf>
}
   115aa:	c7 57       	subi	r28, 0x77	; 119
   115ac:	df 4f       	sbci	r29, 0xFF	; 255
   115ae:	ec e0       	ldi	r30, 0x0C	; 12
   115b0:	0c 94 c6 e8 	jmp	0x1d18c	; 0x1d18c <__epilogue_restores__+0xc>

000115b4 <gpib_read_byte>:
///     - Error Flags:
///       - IFC_FLAG
///
/// @return (data bus, control and error status)
uint16_t gpib_read_byte(int trace)
{
   115b4:	af 92       	push	r10
   115b6:	bf 92       	push	r11
   115b8:	cf 92       	push	r12
   115ba:	df 92       	push	r13
   115bc:	ef 92       	push	r14
   115be:	ff 92       	push	r15
   115c0:	0f 93       	push	r16
   115c2:	1f 93       	push	r17
   115c4:	cf 93       	push	r28
   115c6:	00 d0       	rcall	.+0      	; 0x115c8 <gpib_read_byte+0x14>
   115c8:	00 d0       	rcall	.+0      	; 0x115ca <gpib_read_byte+0x16>
   115ca:	1f 92       	push	r1

    ch = 0;
    control_last = 0;

	// Return unread - last read - data and control lines
    if(gpib_unread_f)
   115cc:	20 91 5f 19 	lds	r18, 0x195F	; 0x80195f <gpib_unread_f>
   115d0:	22 23       	and	r18, r18
   115d2:	39 f0       	breq	.+14     	; 0x115e2 <gpib_read_byte+0x2e>
    {
		// FYI any unread data has been traced
        gpib_unread_f = 0;
   115d4:	10 92 5f 19 	sts	0x195F, r1	; 0x80195f <gpib_unread_f>
        return(gpib_unread_data);
   115d8:	80 91 f2 1e 	lds	r24, 0x1EF2	; 0x801ef2 <gpib_unread_data>
   115dc:	90 91 f3 1e 	lds	r25, 0x1EF3	; 0x801ef3 <gpib_unread_data+0x1>
   115e0:	e0 c0       	rjmp	.+448    	; 0x117a2 <gpib_read_byte+0x1ee>
   115e2:	6c 01       	movw	r12, r24
	// We start and end gpib_read_byte() with NRFD and NDAC LOW 
	// When ATN goes LOW all devices must pull NRFD and NDAC lines LOW
	// within 200 nanoseconds to permit three-wire handshake 
	// ATN requirements are met because we are always reading in command mode
	// ATN = 0 = COmmand Mode
    gpib_rx_init(1);
   115e4:	81 e0       	ldi	r24, 0x01	; 1
   115e6:	05 dc       	rcall	.-2038   	; 0x10df2 <gpib_rx_init>
	// GPIB_IO_LOW(TE);			// BUS IN
	// BUS IN, DAV IN, NDAC OUT , NRFD OUT 
	// ATN IN, EOI IN, SRQ OUT OC

	///@brief V2 boards can NOT read ALL bits on the control bus at once
    if(trace)
   115e8:	c1 14       	cp	r12, r1
   115ea:	d1 04       	cpc	r13, r1
    {
        control_last = gpib_control_pin_read();
   115ec:	51 f0       	breq	.+20     	; 0x11602 <gpib_read_byte+0x4e>
   115ee:	fa dc       	rcall	.-1548   	; 0x10fe4 <gpib_control_pin_read>
        control_last |= gpib_handshake_pin_read();
   115f0:	7c 01       	movw	r14, r24
   115f2:	08 dd       	rcall	.-1520   	; 0x11004 <gpib_handshake_pin_read>
   115f4:	e8 2a       	or	r14, r24
   115f6:	f9 2a       	or	r15, r25
        gpib_trace_display(control_last, TRACE_BUS);
   115f8:	62 e0       	ldi	r22, 0x02	; 2
   115fa:	70 e0       	ldi	r23, 0x00	; 0
   115fc:	c7 01       	movw	r24, r14
   115fe:	98 de       	rcall	.-720    	; 0x11330 <gpib_trace_display>
   11600:	02 c0       	rjmp	.+4      	; 0x11606 <gpib_read_byte+0x52>
    uint16_t bus, control, control_last;
    extern uint8_t gpib_unread_f;
    extern uint16_t gpib_unread_data;

    ch = 0;
    control_last = 0;
   11602:	e1 2c       	mov	r14, r1
   11604:	f1 2c       	mov	r15, r1
        control_last = gpib_control_pin_read();
        control_last |= gpib_handshake_pin_read();
        gpib_trace_display(control_last, TRACE_BUS);
    }

	gpib_timeout_set(HTIMEOUT);
   11606:	64 ef       	ldi	r22, 0xF4	; 244
   11608:	71 e0       	ldi	r23, 0x01	; 1
   1160a:	80 e0       	ldi	r24, 0x00	; 0
   1160c:	90 e0       	ldi	r25, 0x00	; 0
   1160e:	af db       	rcall	.-2210   	; 0x10d6e <gpib_timeout_set>
    rx_state = GPIB_RX_START;
   11610:	c0 e0       	ldi	r28, 0x00	; 0
    uint16_t ch;
    uint16_t bus, control, control_last;
    extern uint8_t gpib_unread_f;
    extern uint16_t gpib_unread_data;

    ch = 0;
   11612:	00 e0       	ldi	r16, 0x00	; 0
   11614:	10 e0       	ldi	r17, 0x00	; 0
    rx_state = GPIB_RX_START;
    while(rx_state != GPIB_RX_DONE)
    {

        // User task that is called while waiting for commands
        gpib_user_task();
   11616:	0e 94 ae e3 	call	0x1c75c	; 0x1c75c <gpib_user_task>

        if(uart_keyhit(0))
   1161a:	80 e0       	ldi	r24, 0x00	; 0
   1161c:	0e 94 dd 2a 	call	0x55ba	; 0x55ba <uart_keyhit>
   11620:	89 2b       	or	r24, r25
   11622:	09 f0       	breq	.+2      	; 0x11626 <gpib_read_byte+0x72>
   11624:	9c c0       	rjmp	.+312    	; 0x1175e <gpib_read_byte+0x1aa>
        if(gpib_detect_PP())
            ch |= PP_FLAG;
#endif

		// IFC is alwayon IN always in device mode
        if(GPIB_PIN_TST(IFC) == 0)
   11626:	4c 99       	sbic	0x09, 4	; 9
   11628:	15 c0       	rjmp	.+42     	; 0x11654 <gpib_read_byte+0xa0>
        {
            ch |= IFC_FLAG;
   1162a:	10 61       	ori	r17, 0x10	; 16
			if(debuglevel & GPIB_ERR)
   1162c:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   11630:	80 ff       	sbrs	r24, 0
   11632:	0e c0       	rjmp	.+28     	; 0x11650 <gpib_read_byte+0x9c>
				printf("gpib_read_byte: IFC state=%d\n", rx_state);
   11634:	8c 2f       	mov	r24, r28
   11636:	90 e0       	ldi	r25, 0x00	; 0
   11638:	ed b7       	in	r30, 0x3d	; 61
   1163a:	fe b7       	in	r31, 0x3e	; 62
   1163c:	95 83       	std	Z+5, r25	; 0x05
   1163e:	84 83       	std	Z+4, r24	; 0x04
   11640:	80 e2       	ldi	r24, 0x20	; 32
   11642:	90 e1       	ldi	r25, 0x10	; 16
   11644:	a0 e0       	ldi	r26, 0x00	; 0
   11646:	81 83       	std	Z+1, r24	; 0x01
   11648:	92 83       	std	Z+2, r25	; 0x02
   1164a:	a3 83       	std	Z+3, r26	; 0x03
   1164c:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
            gpib_bus_init();
   11650:	98 db       	rcall	.-2256   	; 0x10d82 <gpib_bus_init>
   11652:	85 c0       	rjmp	.+266    	; 0x1175e <gpib_read_byte+0x1aa>
            break;
        }

        switch(rx_state)
   11654:	c2 30       	cpi	r28, 0x02	; 2
   11656:	31 f1       	breq	.+76     	; 0x116a4 <gpib_read_byte+0xf0>
   11658:	28 f4       	brcc	.+10     	; 0x11664 <gpib_read_byte+0xb0>
   1165a:	cc 23       	and	r28, r28
   1165c:	69 f0       	breq	.+26     	; 0x11678 <gpib_read_byte+0xc4>
   1165e:	c1 30       	cpi	r28, 0x01	; 1
   11660:	c9 f0       	breq	.+50     	; 0x11694 <gpib_read_byte+0xe0>
   11662:	63 c0       	rjmp	.+198    	; 0x1172a <gpib_read_byte+0x176>
   11664:	c5 30       	cpi	r28, 0x05	; 5
   11666:	09 f4       	brne	.+2      	; 0x1166a <gpib_read_byte+0xb6>
   11668:	54 c0       	rjmp	.+168    	; 0x11712 <gpib_read_byte+0x15e>
   1166a:	c7 30       	cpi	r28, 0x07	; 7
   1166c:	09 f4       	brne	.+2      	; 0x11670 <gpib_read_byte+0xbc>
   1166e:	58 c0       	rjmp	.+176    	; 0x11720 <gpib_read_byte+0x16c>
   11670:	c4 30       	cpi	r28, 0x04	; 4
   11672:	09 f0       	breq	.+2      	; 0x11676 <gpib_read_byte+0xc2>
   11674:	5a c0       	rjmp	.+180    	; 0x1172a <gpib_read_byte+0x176>
   11676:	3e c0       	rjmp	.+124    	; 0x116f4 <gpib_read_byte+0x140>
        {

			///@brief DAV must be high
            case GPIB_RX_START:
				//DEBUG
				if (GPIB_PIN_TST(DAV) == 1)
   11678:	19 9b       	sbis	0x03, 1	; 3
   1167a:	43 c0       	rjmp	.+134    	; 0x11702 <gpib_read_byte+0x14e>
   1167c:	fd e0       	ldi	r31, 0x0D	; 13
   1167e:	fa 95       	dec	r31
   11680:	f1 f7       	brne	.-4      	; 0x1167e <gpib_read_byte+0xca>
   11682:	00 00       	nop
				{
					GPIB_BUS_SETTLE();                // Let Data BUS settle
					GPIB_PIN_FLOAT_UP(NRFD);
   11684:	52 98       	cbi	0x0a, 2	; 10
   11686:	5a 9a       	sbi	0x0b, 2	; 11
   11688:	8d e0       	ldi	r24, 0x0D	; 13
   1168a:	8a 95       	dec	r24
   1168c:	f1 f7       	brne	.-4      	; 0x1168a <gpib_read_byte+0xd6>
   1168e:	00 00       	nop
					GPIB_BUS_SETTLE();                // Let Data BUS settle
					rx_state = GPIB_RX_WAIT_FOR_DAV_LOW;
   11690:	c1 e0       	ldi	r28, 0x01	; 1
   11692:	37 c0       	rjmp	.+110    	; 0x11702 <gpib_read_byte+0x14e>
                }
                break;

			// Wait for Data Avalable without timeout
            case GPIB_RX_WAIT_FOR_DAV_LOW:
                if ( GPIB_PIN_TST(DAV) == 0 )
   11694:	19 99       	sbic	0x03, 1	; 3
   11696:	80 c0       	rjmp	.+256    	; 0x11798 <gpib_read_byte+0x1e4>
   11698:	ed e0       	ldi	r30, 0x0D	; 13
   1169a:	ea 95       	dec	r30
   1169c:	f1 f7       	brne	.-4      	; 0x1169a <gpib_read_byte+0xe6>
   1169e:	00 00       	nop
				{
					GPIB_BUS_SETTLE();                
                    rx_state = GPIB_RX_DAV_IS_LOW;
   116a0:	c2 e0       	ldi	r28, 0x02	; 2
   116a2:	7a c0       	rjmp	.+244    	; 0x11798 <gpib_read_byte+0x1e4>
				}
                break;

			// Data is Avaliable
            case GPIB_RX_DAV_IS_LOW:
				GPIB_IO_LOW(NRFD); // BUSY
   116a4:	5a 98       	cbi	0x0b, 2	; 11
   116a6:	52 9a       	sbi	0x0a, 2	; 10
   116a8:	fd e0       	ldi	r31, 0x0D	; 13
   116aa:	fa 95       	dec	r31
				GPIB_BUS_SETTLE();                

				// Read DATA and Control lines
				// gpib_bus_read() strips parity if ATN is low command state

                bus = gpib_bus_read();
   116ac:	f1 f7       	brne	.-4      	; 0x116aa <gpib_read_byte+0xf6>
   116ae:	00 00       	nop
   116b0:	93 dc       	rcall	.-1754   	; 0x10fd8 <gpib_bus_read>
   116b2:	a8 2e       	mov	r10, r24
                ch |= bus;

				///@brief V2 boards can NOT read all control bits at once
				///@brief NRFD,NDAC and SRQ are cirrently outputs

                control_last = gpib_control_pin_read();
   116b4:	b1 2c       	mov	r11, r1
   116b6:	96 dc       	rcall	.-1748   	; 0x10fe4 <gpib_control_pin_read>
   116b8:	7c 01       	movw	r14, r24
   116ba:	08 2b       	or	r16, r24
                ch |= control_last;
   116bc:	19 2b       	or	r17, r25
   116be:	0a 29       	or	r16, r10

				// In theory the control_last should not have changed
				// from the initial values. ONly the Data BUS
                if(trace)
   116c0:	1b 29       	or	r17, r11
   116c2:	c1 14       	cp	r12, r1
   116c4:	d1 04       	cpc	r13, r1
                {
                    control_last |= gpib_handshake_pin_read();
   116c6:	49 f0       	breq	.+18     	; 0x116da <gpib_read_byte+0x126>
   116c8:	9d dc       	rcall	.-1734   	; 0x11004 <gpib_handshake_pin_read>
   116ca:	e8 2a       	or	r14, r24
                    gpib_trace_display(bus | control_last, TRACE_READ);
   116cc:	f9 2a       	or	r15, r25
   116ce:	61 e0       	ldi	r22, 0x01	; 1
   116d0:	70 e0       	ldi	r23, 0x00	; 0
   116d2:	c5 01       	movw	r24, r10
   116d4:	8e 29       	or	r24, r14
   116d6:	9f 29       	or	r25, r15
   116d8:	2b de       	rcall	.-938    	; 0x11330 <gpib_trace_display>
                }

				// Release NDAC to say we read the byte
                GPIB_PIN_FLOAT_UP(NDAC);
   116da:	53 98       	cbi	0x0a, 3	; 10
   116dc:	5b 9a       	sbi	0x0b, 3	; 11
   116de:	8d e0       	ldi	r24, 0x0D	; 13
   116e0:	8a 95       	dec	r24
   116e2:	f1 f7       	brne	.-4      	; 0x116e0 <gpib_read_byte+0x12c>
                GPIB_BUS_SETTLE();                // NDAC bus settle time
                gpib_timeout_set(HTIMEOUT);
   116e4:	00 00       	nop
   116e6:	64 ef       	ldi	r22, 0xF4	; 244
   116e8:	71 e0       	ldi	r23, 0x01	; 1
   116ea:	80 e0       	ldi	r24, 0x00	; 0
   116ec:	90 e0       	ldi	r25, 0x00	; 0
   116ee:	3f db       	rcall	.-2434   	; 0x10d6e <gpib_timeout_set>
                rx_state = GPIB_RX_WAIT_FOR_DAV_HI;
   116f0:	c4 e0       	ldi	r28, 0x04	; 4
   116f2:	52 c0       	rjmp	.+164    	; 0x11798 <gpib_read_byte+0x1e4>
                break;

			///@brief Wait for DAV HI
            case GPIB_RX_WAIT_FOR_DAV_HI:
                if (GPIB_PIN_TST(DAV) == 1)
   116f4:	19 9b       	sbis	0x03, 1	; 3
   116f6:	05 c0       	rjmp	.+10     	; 0x11702 <gpib_read_byte+0x14e>
   116f8:	ed e0       	ldi	r30, 0x0D	; 13
   116fa:	ea 95       	dec	r30
   116fc:	f1 f7       	brne	.-4      	; 0x116fa <gpib_read_byte+0x146>
   116fe:	00 00       	nop
                {
					GPIB_BUS_SETTLE();
                    rx_state = GPIB_RX_DAV_IS_HI;
   11700:	c5 e0       	ldi	r28, 0x05	; 5
/// @see: gpib_timeout_set()
/// @return  1 if timeout, 0 if not
uint8_t gpib_timeout_test()
{
// printf("%8ld,%d\r", (long)gpib_timer.down_counter, (int)gpib_timer.down_counter_done);
    return(gpib_timer.down_counter_done);
   11702:	80 91 e7 1c 	lds	r24, 0x1CE7	; 0x801ce7 <gpib_timer+0x8>
                if (GPIB_PIN_TST(DAV) == 1)
                {
					GPIB_BUS_SETTLE();
                    rx_state = GPIB_RX_DAV_IS_HI;
                }
                if (gpib_timeout_test())
   11706:	88 23       	and	r24, r24
   11708:	09 f4       	brne	.+2      	; 0x1170c <gpib_read_byte+0x158>
   1170a:	46 c0       	rjmp	.+140    	; 0x11798 <gpib_read_byte+0x1e4>
                {
                    ch |= TIMEOUT_FLAG;
   1170c:	10 64       	ori	r17, 0x40	; 64
                    rx_state = GPIB_RX_ERROR;
   1170e:	c7 e0       	ldi	r28, 0x07	; 7
   11710:	43 c0       	rjmp	.+134    	; 0x11798 <gpib_read_byte+0x1e4>
                }
                break;

			///@brief Ready for next byte
            case GPIB_RX_DAV_IS_HI:
				GPIB_IO_LOW(NDAC);
   11712:	5b 98       	cbi	0x0b, 3	; 11
   11714:	53 9a       	sbi	0x0a, 3	; 10
   11716:	fd e0       	ldi	r31, 0x0D	; 13
   11718:	fa 95       	dec	r31
   1171a:	f1 f7       	brne	.-4      	; 0x11718 <gpib_read_byte+0x164>
   1171c:	00 00       	nop
   1171e:	09 c0       	rjmp	.+18     	; 0x11732 <gpib_read_byte+0x17e>
				// Now BOTH NDAC and NRFD are LOW
                rx_state = GPIB_RX_DONE;
                break;

            case GPIB_RX_ERROR:
				GPIB_IO_LOW(NRFD);
   11720:	5a 98       	cbi	0x0b, 2	; 11
   11722:	52 9a       	sbi	0x0a, 2	; 10
				GPIB_IO_LOW(NDAC);
   11724:	5b 98       	cbi	0x0b, 3	; 11
   11726:	53 9a       	sbi	0x0a, 3	; 10

            case GPIB_RX_DONE:
                break;
        }

        if(trace)
   11728:	04 c0       	rjmp	.+8      	; 0x11732 <gpib_read_byte+0x17e>
   1172a:	c1 14       	cp	r12, r1
   1172c:	d1 04       	cpc	r13, r1
   1172e:	91 f0       	breq	.+36     	; 0x11754 <gpib_read_byte+0x1a0>
   11730:	04 c0       	rjmp	.+8      	; 0x1173a <gpib_read_byte+0x186>
   11732:	c1 14       	cp	r12, r1
   11734:	d1 04       	cpc	r13, r1
   11736:	99 f0       	breq	.+38     	; 0x1175e <gpib_read_byte+0x1aa>
        {
/// V2 boards can not read all control and handshake bits at once
/// FIXME We could add a test for read/write state ??
/// NRFD,NDAC SRQ are outputs durring write phase, but not at very start
            control = gpib_control_pin_read();
   11738:	c8 e0       	ldi	r28, 0x08	; 8
   1173a:	54 dc       	rcall	.-1880   	; 0x10fe4 <gpib_control_pin_read>
            control |= gpib_handshake_pin_read();
   1173c:	5c 01       	movw	r10, r24
   1173e:	62 dc       	rcall	.-1852   	; 0x11004 <gpib_handshake_pin_read>
   11740:	a8 2a       	or	r10, r24
   11742:	b9 2a       	or	r11, r25
            if(control_last != control)
   11744:	ae 14       	cp	r10, r14
   11746:	bf 04       	cpc	r11, r15
   11748:	31 f0       	breq	.+12     	; 0x11756 <gpib_read_byte+0x1a2>
            {
                gpib_trace_display(control, TRACE_BUS);
   1174a:	62 e0       	ldi	r22, 0x02	; 2
   1174c:	70 e0       	ldi	r23, 0x00	; 0
   1174e:	c5 01       	movw	r24, r10
   11750:	ef dd       	rcall	.-1058   	; 0x11330 <gpib_trace_display>
   11752:	01 c0       	rjmp	.+2      	; 0x11756 <gpib_read_byte+0x1a2>
   11754:	57 01       	movw	r10, r14

            case GPIB_RX_DONE:
                break;
        }

        if(trace)
   11756:	c8 30       	cpi	r28, 0x08	; 8
        gpib_trace_display(control_last, TRACE_BUS);
    }

	gpib_timeout_set(HTIMEOUT);
    rx_state = GPIB_RX_START;
    while(rx_state != GPIB_RX_DONE)
   11758:	11 f0       	breq	.+4      	; 0x1175e <gpib_read_byte+0x1aa>
   1175a:	75 01       	movw	r14, r10
   1175c:	5c cf       	rjmp	.-328    	; 0x11616 <gpib_read_byte+0x62>
   1175e:	80 91 ec 1e 	lds	r24, 0x1EEC	; 0x801eec <current>
///  - Remember that NDAC and NRFD are now both LOW!
///  - The spec says to KEEP BOTH LOW when NOT ready to read otherwise
///    we may miss a transfer and cause a controller timeout!
///  - GPIB TX state expects NRFD LOW on entry or it is an ERROR!

    lastcmd = current;
   11762:	90 91 ed 1e 	lds	r25, 0x1EED	; 0x801eed <current+0x1>
   11766:	90 93 e9 1c 	sts	0x1CE9, r25	; 0x801ce9 <lastcmd+0x1>
   1176a:	80 93 e8 1c 	sts	0x1CE8, r24	; 0x801ce8 <lastcmd>
   1176e:	c8 01       	movw	r24, r16

    if(ch & ERROR_MASK || (ch & ATN_FLAG) == 0)
   11770:	88 27       	eor	r24, r24
   11772:	90 7d       	andi	r25, 0xD0	; 208
   11774:	89 2b       	or	r24, r25
   11776:	11 f4       	brne	.+4      	; 0x1177c <gpib_read_byte+0x1c8>
   11778:	12 fd       	sbrc	r17, 2
   1177a:	05 c0       	rjmp	.+10     	; 0x11786 <gpib_read_byte+0x1d2>
   1177c:	10 92 ed 1e 	sts	0x1EED, r1	; 0x801eed <current+0x1>
        current = 0;
   11780:	10 92 ec 1e 	sts	0x1EEC, r1	; 0x801eec <current>
   11784:	07 c0       	rjmp	.+14     	; 0x11794 <gpib_read_byte+0x1e0>
   11786:	c8 01       	movw	r24, r16
    else
        current = ch & CMD_MASK;
   11788:	8f 77       	andi	r24, 0x7F	; 127
   1178a:	99 27       	eor	r25, r25
   1178c:	90 93 ed 1e 	sts	0x1EED, r25	; 0x801eed <current+0x1>
   11790:	80 93 ec 1e 	sts	0x1EEC, r24	; 0x801eec <current>
   11794:	c8 01       	movw	r24, r16
   11796:	05 c0       	rjmp	.+10     	; 0x117a2 <gpib_read_byte+0x1ee>
   11798:	c1 14       	cp	r12, r1

            case GPIB_RX_DONE:
                break;
        }

        if(trace)
   1179a:	d1 04       	cpc	r13, r1
   1179c:	09 f4       	brne	.+2      	; 0x117a0 <gpib_read_byte+0x1ec>
   1179e:	3b cf       	rjmp	.-394    	; 0x11616 <gpib_read_byte+0x62>
   117a0:	cc cf       	rjmp	.-104    	; 0x1173a <gpib_read_byte+0x186>
   117a2:	0f 90       	pop	r0
        current = 0;
    else
        current = ch & CMD_MASK;

    return (ch);
}
   117a4:	0f 90       	pop	r0
   117a6:	0f 90       	pop	r0
   117a8:	0f 90       	pop	r0
   117aa:	0f 90       	pop	r0
   117ac:	cf 91       	pop	r28
   117ae:	1f 91       	pop	r17
   117b0:	0f 91       	pop	r16
   117b2:	ff 90       	pop	r15
   117b4:	ef 90       	pop	r14
   117b6:	df 90       	pop	r13
   117b8:	cf 90       	pop	r12
   117ba:	bf 90       	pop	r11
   117bc:	af 90       	pop	r10
   117be:	08 95       	ret

000117c0 <gpib_decode>:
   117c0:	60 e0       	ldi	r22, 0x00	; 0
/// @see gpib_decode_str()
/// @return  void

void gpib_decode(uint16_t ch)
{
    gpib_trace_display(ch,0);
   117c2:	70 e0       	ldi	r23, 0x00	; 0
   117c4:	b5 cd       	rjmp	.-1174   	; 0x11330 <gpib_trace_display>
   117c6:	08 95       	ret

000117c8 <gpib_read_str>:
///       - REN_FLAG
///       - PP_FLAG
///     - Error Flags:
///       - IFC_FLAG
int gpib_read_str(uint8_t *buf, int size, uint16_t *status)
{
   117c8:	a7 e0       	ldi	r26, 0x07	; 7
   117ca:	b0 e0       	ldi	r27, 0x00	; 0
   117cc:	ea ee       	ldi	r30, 0xEA	; 234
   117ce:	fb e8       	ldi	r31, 0x8B	; 139
   117d0:	0c 94 ac e8 	jmp	0x1d158	; 0x1d158 <__prologue_saves__+0x10>
   117d4:	5b 01       	movw	r10, r22
   117d6:	6a 01       	movw	r12, r20
    uint16_t val;
    int ind = 0;

    *status &= STATUS_MASK;
   117d8:	fa 01       	movw	r30, r20
   117da:	20 81       	ld	r18, Z
   117dc:	31 81       	ldd	r19, Z+1	; 0x01
   117de:	22 27       	eor	r18, r18
   117e0:	31 83       	std	Z+1, r19	; 0x01
   117e2:	20 83       	st	Z, r18

    if(!size)
   117e4:	67 2b       	or	r22, r23
   117e6:	21 f0       	breq	.+8      	; 0x117f0 <gpib_read_str+0x28>
   117e8:	7c 01       	movw	r14, r24
   117ea:	00 e0       	ldi	r16, 0x00	; 0
   117ec:	10 e0       	ldi	r17, 0x00	; 0
   117ee:	28 c0       	rjmp	.+80     	; 0x11840 <gpib_read_str+0x78>
    {
        if(debuglevel & (GPIB_ERR + GPIB_DEVICE_STATE_MESSAGES + GPIB_RW_STR_BUS_DECODE))
   117f0:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   117f4:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   117f8:	81 72       	andi	r24, 0x21	; 33
   117fa:	91 70       	andi	r25, 0x01	; 1
   117fc:	89 2b       	or	r24, r25
   117fe:	09 f4       	brne	.+2      	; 0x11802 <gpib_read_str+0x3a>
   11800:	7c c0       	rjmp	.+248    	; 0x118fa <gpib_read_str+0x132>
            printf("gpib_read_str: size = 0\n");
   11802:	87 ed       	ldi	r24, 0xD7	; 215
   11804:	9f e0       	ldi	r25, 0x0F	; 15
   11806:	a0 e0       	ldi	r26, 0x00	; 0
   11808:	ed b7       	in	r30, 0x3d	; 61
   1180a:	fe b7       	in	r31, 0x3e	; 62
   1180c:	81 83       	std	Z+1, r24	; 0x01
   1180e:	92 83       	std	Z+2, r25	; 0x02
   11810:	a3 83       	std	Z+3, r26	; 0x03
   11812:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
   11816:	71 c0       	rjmp	.+226    	; 0x118fa <gpib_read_str+0x132>
        {
            *status |= (val & ERROR_MASK);
            break;
        }

        if((*status & ATN_FLAG) != (val & ATN_FLAG))
   11818:	8c 27       	eor	r24, r28
   1181a:	9d 27       	eor	r25, r29
   1181c:	92 fd       	sbrc	r25, 2
   1181e:	2e c0       	rjmp	.+92     	; 0x1187c <gpib_read_str+0xb4>
                printf("gpib_read_str(ind:%d): ATN %02XH unexpected\n",ind, 0xff & val);
            gpib_unread(val);
            break;
        }

        if(val & ATN_FLAG)
   11820:	ce 01       	movw	r24, r28
   11822:	88 27       	eor	r24, r24
   11824:	94 70       	andi	r25, 0x04	; 4
            buf[ind] = (val & CMD_MASK);
   11826:	2c 2f       	mov	r18, r28
                printf("gpib_read_str(ind:%d): ATN %02XH unexpected\n",ind, 0xff & val);
            gpib_unread(val);
            break;
        }

        if(val & ATN_FLAG)
   11828:	d2 fd       	sbrc	r29, 2
            buf[ind] = (val & CMD_MASK);
   1182a:	2f 77       	andi	r18, 0x7F	; 127
        else
            buf[ind] = (val & DATA_MASK);
   1182c:	f7 01       	movw	r30, r14
   1182e:	20 83       	st	Z, r18
        ++ind;
   11830:	0f 5f       	subi	r16, 0xFF	; 255
   11832:	1f 4f       	sbci	r17, 0xFF	; 255

        if(!(val & ATN_FLAG) && (val & EOI_FLAG) )
   11834:	89 2b       	or	r24, r25
   11836:	09 f4       	brne	.+2      	; 0x1183a <gpib_read_str+0x72>
   11838:	3c c0       	rjmp	.+120    	; 0x118b2 <gpib_read_str+0xea>
   1183a:	ff ef       	ldi	r31, 0xFF	; 255
   1183c:	ef 1a       	sub	r14, r31
   1183e:	ff 0a       	sbc	r15, r31
    {
        if(debuglevel & (GPIB_ERR + GPIB_DEVICE_STATE_MESSAGES + GPIB_RW_STR_BUS_DECODE))
            printf("gpib_read_str: size = 0\n");
    }

    while(ind < size)
   11840:	0a 15       	cp	r16, r10
   11842:	1b 05       	cpc	r17, r11
   11844:	0c f0       	brlt	.+2      	; 0x11848 <gpib_read_str+0x80>
   11846:	3f c0       	rjmp	.+126    	; 0x118c6 <gpib_read_str+0xfe>
    {
        val = gpib_read_byte(NO_TRACE);
   11848:	80 e0       	ldi	r24, 0x00	; 0
   1184a:	90 e0       	ldi	r25, 0x00	; 0
   1184c:	b3 de       	rcall	.-666    	; 0x115b4 <gpib_read_byte>
   1184e:	ec 01       	movw	r28, r24
#if SDEBUG
        if(debuglevel & GPIB_RW_STR_BUS_DECODE)
   11850:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   11854:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   11858:	90 ff       	sbrs	r25, 0
   1185a:	02 c0       	rjmp	.+4      	; 0x11860 <gpib_read_str+0x98>
            gpib_decode(val);
   1185c:	ce 01       	movw	r24, r28
   1185e:	b0 df       	rcall	.-160    	; 0x117c0 <gpib_decode>
#endif
        if(val & ERROR_MASK)
   11860:	9e 01       	movw	r18, r28
   11862:	22 27       	eor	r18, r18
   11864:	30 7d       	andi	r19, 0xD0	; 208
   11866:	f6 01       	movw	r30, r12
   11868:	80 81       	ld	r24, Z
   1186a:	91 81       	ldd	r25, Z+1	; 0x01
   1186c:	21 15       	cp	r18, r1
   1186e:	31 05       	cpc	r19, r1
   11870:	99 f2       	breq	.-90     	; 0x11818 <gpib_read_str+0x50>
        {
            *status |= (val & ERROR_MASK);
   11872:	82 2b       	or	r24, r18
   11874:	93 2b       	or	r25, r19
   11876:	91 83       	std	Z+1, r25	; 0x01
   11878:	80 83       	st	Z, r24
            break;
   1187a:	28 c0       	rjmp	.+80     	; 0x118cc <gpib_read_str+0x104>
        }

        if((*status & ATN_FLAG) != (val & ATN_FLAG))
        {
            if(debuglevel & (GPIB_ERR + GPIB_DEVICE_STATE_MESSAGES + GPIB_RW_STR_BUS_DECODE))
   1187c:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   11880:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   11884:	81 72       	andi	r24, 0x21	; 33
   11886:	91 70       	andi	r25, 0x01	; 1
   11888:	89 2b       	or	r24, r25
   1188a:	81 f0       	breq	.+32     	; 0x118ac <gpib_read_str+0xe4>
                printf("gpib_read_str(ind:%d): ATN %02XH unexpected\n",ind, 0xff & val);
   1188c:	ce 01       	movw	r24, r28
   1188e:	99 27       	eor	r25, r25
   11890:	ed b7       	in	r30, 0x3d	; 61
   11892:	fe b7       	in	r31, 0x3e	; 62
   11894:	97 83       	std	Z+7, r25	; 0x07
   11896:	86 83       	std	Z+6, r24	; 0x06
   11898:	15 83       	std	Z+5, r17	; 0x05
   1189a:	04 83       	std	Z+4, r16	; 0x04
   1189c:	8a ea       	ldi	r24, 0xAA	; 170
   1189e:	9f e0       	ldi	r25, 0x0F	; 15
   118a0:	a0 e0       	ldi	r26, 0x00	; 0
   118a2:	81 83       	std	Z+1, r24	; 0x01
   118a4:	92 83       	std	Z+2, r25	; 0x02
   118a6:	a3 83       	std	Z+3, r26	; 0x03
   118a8:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
            gpib_unread(val);
   118ac:	ce 01       	movw	r24, r28
   118ae:	6a db       	rcall	.-2348   	; 0x10f84 <gpib_unread>
            break;
   118b0:	0d c0       	rjmp	.+26     	; 0x118cc <gpib_read_str+0x104>
            buf[ind] = (val & CMD_MASK);
        else
            buf[ind] = (val & DATA_MASK);
        ++ind;

        if(!(val & ATN_FLAG) && (val & EOI_FLAG) )
   118b2:	d0 ff       	sbrs	r29, 0
   118b4:	c2 cf       	rjmp	.-124    	; 0x1183a <gpib_read_str+0x72>
        {

            if(*status & EOI_FLAG)
   118b6:	f6 01       	movw	r30, r12
   118b8:	80 81       	ld	r24, Z
   118ba:	91 81       	ldd	r25, Z+1	; 0x01
   118bc:	90 fd       	sbrc	r25, 0
   118be:	1f c0       	rjmp	.+62     	; 0x118fe <gpib_read_str+0x136>
                return(ind);
/// @todo TODO
///  decode this state - for now I just set the EOI_FLAG
            *status |= EOI_FLAG;
   118c0:	91 60       	ori	r25, 0x01	; 1
   118c2:	91 83       	std	Z+1, r25	; 0x01
   118c4:	80 83       	st	Z, r24
            break;
        }
    }
    if ( ind != size ) 
   118c6:	0a 15       	cp	r16, r10
   118c8:	1b 05       	cpc	r17, r11
   118ca:	c9 f0       	breq	.+50     	; 0x118fe <gpib_read_str+0x136>
    {
        if(debuglevel & (GPIB_ERR + GPIB_DEVICE_STATE_MESSAGES))
   118cc:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   118d0:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   118d4:	81 72       	andi	r24, 0x21	; 33
   118d6:	99 27       	eor	r25, r25
   118d8:	89 2b       	or	r24, r25
   118da:	89 f0       	breq	.+34     	; 0x118fe <gpib_read_str+0x136>
            printf("[gpib_read_str read(%d) expected(%d)]\n", ind , size);
   118dc:	ed b7       	in	r30, 0x3d	; 61
   118de:	fe b7       	in	r31, 0x3e	; 62
   118e0:	b7 82       	std	Z+7, r11	; 0x07
   118e2:	a6 82       	std	Z+6, r10	; 0x06
   118e4:	15 83       	std	Z+5, r17	; 0x05
   118e6:	04 83       	std	Z+4, r16	; 0x04
   118e8:	83 e8       	ldi	r24, 0x83	; 131
   118ea:	9f e0       	ldi	r25, 0x0F	; 15
   118ec:	a0 e0       	ldi	r26, 0x00	; 0
   118ee:	81 83       	std	Z+1, r24	; 0x01
   118f0:	92 83       	std	Z+2, r25	; 0x02
   118f2:	a3 83       	std	Z+3, r26	; 0x03
   118f4:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
   118f8:	02 c0       	rjmp	.+4      	; 0x118fe <gpib_read_str+0x136>
   118fa:	00 e0       	ldi	r16, 0x00	; 0
   118fc:	10 e0       	ldi	r17, 0x00	; 0
    }
    return(ind);
}
   118fe:	c8 01       	movw	r24, r16
   11900:	cd b7       	in	r28, 0x3d	; 61
   11902:	de b7       	in	r29, 0x3e	; 62
   11904:	27 96       	adiw	r28, 0x07	; 7
   11906:	ea e0       	ldi	r30, 0x0A	; 10
   11908:	0c 94 c8 e8 	jmp	0x1d190	; 0x1d190 <__epilogue_restores__+0x10>

0001190c <gpib_write_str>:
///     - Error Flags:
///       - IFC_FLAG
/// @see: gpib_write_byte()
/// @see: gpib.h _FLAGS defines for a full list)
int gpib_write_str(uint8_t *buf, int size, uint16_t *status)
{
   1190c:	a7 e0       	ldi	r26, 0x07	; 7
   1190e:	b0 e0       	ldi	r27, 0x00	; 0
   11910:	ec e8       	ldi	r30, 0x8C	; 140
   11912:	fc e8       	ldi	r31, 0x8C	; 140
   11914:	0c 94 ac e8 	jmp	0x1d158	; 0x1d158 <__prologue_saves__+0x10>
   11918:	d8 2f       	mov	r29, r24
   1191a:	c9 2f       	mov	r28, r25
   1191c:	7b 01       	movw	r14, r22
   1191e:	8a 01       	movw	r16, r20
    uint16_t val, ch;
    int ind = 0;

    *status &= STATUS_MASK;
   11920:	fa 01       	movw	r30, r20
   11922:	80 81       	ld	r24, Z
   11924:	91 81       	ldd	r25, Z+1	; 0x01
   11926:	88 27       	eor	r24, r24
   11928:	91 83       	std	Z+1, r25	; 0x01
   1192a:	80 83       	st	Z, r24

    if(!size)
   1192c:	67 2b       	or	r22, r23
   1192e:	91 f4       	brne	.+36     	; 0x11954 <gpib_write_str+0x48>
    {
        if(debuglevel & (GPIB_ERR + GPIB_DEVICE_STATE_MESSAGES + GPIB_RW_STR_BUS_DECODE))
   11930:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   11934:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   11938:	81 72       	andi	r24, 0x21	; 33
   1193a:	91 70       	andi	r25, 0x01	; 1
   1193c:	89 2b       	or	r24, r25
   1193e:	51 f0       	breq	.+20     	; 0x11954 <gpib_write_str+0x48>
            printf("gpib_write_str: size = 0\n");
   11940:	89 e6       	ldi	r24, 0x69	; 105
   11942:	9f e0       	ldi	r25, 0x0F	; 15
   11944:	a0 e0       	ldi	r26, 0x00	; 0
   11946:	ed b7       	in	r30, 0x3d	; 61
   11948:	fe b7       	in	r31, 0x3e	; 62
   1194a:	81 83       	std	Z+1, r24	; 0x01
   1194c:	92 83       	std	Z+2, r25	; 0x02
   1194e:	a3 83       	std	Z+3, r26	; 0x03
   11950:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
    }

	// Start with NRFD and NDAC = 1 - ie off the OC BUS
	gpib_rx_init(0);
   11954:	80 e0       	ldi	r24, 0x00	; 0
   11956:	4d da       	rcall	.-2918   	; 0x10df2 <gpib_rx_init>

// Wait until ATN is released!
#if 1
    if (GPIB_PIN_TST(ATN) == 0)
   11958:	4e 9b       	sbis	0x09, 6	; 9
   1195a:	06 c0       	rjmp	.+12     	; 0x11968 <gpib_write_str+0x5c>
#endif

// Wait until DAV is released!
#if 1
	// Wait if DAV = 0 as the bus is busy
    gpib_timeout_set(HTIMEOUT);
   1195c:	64 ef       	ldi	r22, 0xF4	; 244
   1195e:	71 e0       	ldi	r23, 0x01	; 1
   11960:	80 e0       	ldi	r24, 0x00	; 0
   11962:	90 e0       	ldi	r25, 0x00	; 0
   11964:	04 da       	rcall	.-3064   	; 0x10d6e <gpib_timeout_set>
	while ( GPIB_PIN_TST(DAV) == 0)
   11966:	18 c0       	rjmp	.+48     	; 0x11998 <gpib_write_str+0x8c>
#endif
		// Wait for ATN free
		// Keep in mind that we have been addressed to talk already
		// So waiting is ok - they won't be expecting a reply until
		// They are ready
		gpib_timeout_set(HTIMEOUT);
   11968:	64 ef       	ldi	r22, 0xF4	; 244
   1196a:	71 e0       	ldi	r23, 0x01	; 1
   1196c:	80 e0       	ldi	r24, 0x00	; 0
   1196e:	90 e0       	ldi	r25, 0x00	; 0
   11970:	fe d9       	rcall	.-3076   	; 0x10d6e <gpib_timeout_set>
		while(GPIB_PIN_TST(ATN) == 0)
   11972:	4e 99       	sbic	0x09, 6	; 9
   11974:	f3 cf       	rjmp	.-26     	; 0x1195c <gpib_write_str+0x50>
/// @see: gpib_timeout_set()
/// @return  1 if timeout, 0 if not
uint8_t gpib_timeout_test()
{
// printf("%8ld,%d\r", (long)gpib_timer.down_counter, (int)gpib_timer.down_counter_done);
    return(gpib_timer.down_counter_done);
   11976:	80 91 e7 1c 	lds	r24, 0x1CE7	; 0x801ce7 <gpib_timer+0x8>
		// So waiting is ok - they won't be expecting a reply until
		// They are ready
		gpib_timeout_set(HTIMEOUT);
		while(GPIB_PIN_TST(ATN) == 0)
		{
			if(gpib_timeout_test())
   1197a:	88 23       	and	r24, r24
			{
				gpib_rx_init(1);
   1197c:	d1 f3       	breq	.-12     	; 0x11972 <gpib_write_str+0x66>
   1197e:	81 e0       	ldi	r24, 0x01	; 1
   11980:	38 da       	rcall	.-2960   	; 0x10df2 <gpib_rx_init>
				if(debuglevel & (GPIB_ERR + GPIB_BUS_OR_CMD_BYTE_MESSAGES))
   11982:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   11986:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1198a:	85 70       	andi	r24, 0x05	; 5
   1198c:	99 27       	eor	r25, r25
   1198e:	89 2b       	or	r24, r25
   11990:	d9 f0       	breq	.+54     	; 0x119c8 <gpib_write_str+0xbc>
					printf("<gpib_write_str timeout waiting for ATN = 1>\n");
   11992:	8b e3       	ldi	r24, 0x3B	; 59
   11994:	9f e0       	ldi	r25, 0x0F	; 15
   11996:	10 c0       	rjmp	.+32     	; 0x119b8 <gpib_write_str+0xac>

// Wait until DAV is released!
#if 1
	// Wait if DAV = 0 as the bus is busy
    gpib_timeout_set(HTIMEOUT);
	while ( GPIB_PIN_TST(DAV) == 0)
   11998:	19 99       	sbic	0x03, 1	; 3
   1199a:	1f c0       	rjmp	.+62     	; 0x119da <gpib_write_str+0xce>
/// @see: gpib_timeout_set()
/// @return  1 if timeout, 0 if not
uint8_t gpib_timeout_test()
{
// printf("%8ld,%d\r", (long)gpib_timer.down_counter, (int)gpib_timer.down_counter_done);
    return(gpib_timer.down_counter_done);
   1199c:	80 91 e7 1c 	lds	r24, 0x1CE7	; 0x801ce7 <gpib_timer+0x8>
#if 1
	// Wait if DAV = 0 as the bus is busy
    gpib_timeout_set(HTIMEOUT);
	while ( GPIB_PIN_TST(DAV) == 0)
	{
		if(gpib_timeout_test())
   119a0:	88 23       	and	r24, r24
   119a2:	d1 f3       	breq	.-12     	; 0x11998 <gpib_write_str+0x8c>
		{
			if(debuglevel & (GPIB_ERR + GPIB_BUS_OR_CMD_BYTE_MESSAGES))
   119a4:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   119a8:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   119ac:	85 70       	andi	r24, 0x05	; 5
   119ae:	99 27       	eor	r25, r25
   119b0:	89 2b       	or	r24, r25
   119b2:	51 f0       	breq	.+20     	; 0x119c8 <gpib_write_str+0xbc>
				printf("<BUS waiting for DAV==1>\n");
   119b4:	81 e2       	ldi	r24, 0x21	; 33
   119b6:	9f e0       	ldi	r25, 0x0F	; 15
   119b8:	a0 e0       	ldi	r26, 0x00	; 0
   119ba:	ed b7       	in	r30, 0x3d	; 61
   119bc:	fe b7       	in	r31, 0x3e	; 62
   119be:	81 83       	std	Z+1, r24	; 0x01
   119c0:	92 83       	std	Z+2, r25	; 0x02
   119c2:	a3 83       	std	Z+3, r26	; 0x03
   119c4:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
			*status |= (TIMEOUT_FLAG | BUS_ERROR_FLAG);
   119c8:	f8 01       	movw	r30, r16
   119ca:	80 81       	ld	r24, Z
   119cc:	91 81       	ldd	r25, Z+1	; 0x01
   119ce:	90 6c       	ori	r25, 0xC0	; 192
   119d0:	91 83       	std	Z+1, r25	; 0x01
   119d2:	80 83       	st	Z, r24
			return(ind);
   119d4:	c0 e0       	ldi	r28, 0x00	; 0
   119d6:	d0 e0       	ldi	r29, 0x00	; 0
   119d8:	45 c0       	rjmp	.+138    	; 0x11a64 <gpib_write_str+0x158>
   119da:	cd 2e       	mov	r12, r29
   119dc:	dc 2e       	mov	r13, r28

// Wait until DAV is released!
#if 1
	// Wait if DAV = 0 as the bus is busy
    gpib_timeout_set(HTIMEOUT);
	while ( GPIB_PIN_TST(DAV) == 0)
   119de:	c0 e0       	ldi	r28, 0x00	; 0
   119e0:	d0 e0       	ldi	r29, 0x00	; 0
			return(ind);
		}
	}
#endif

    while(ind < size)
   119e2:	ce 15       	cp	r28, r14
   119e4:	df 05       	cpc	r29, r15
   119e6:	1c f5       	brge	.+70     	; 0x11a2e <gpib_write_str+0x122>
    {
        ch = buf[ind++] & 0xff;                   // unsigned
   119e8:	21 96       	adiw	r28, 0x01	; 1
   119ea:	f6 01       	movw	r30, r12
   119ec:	81 91       	ld	r24, Z+
   119ee:	6f 01       	movw	r12, r30
   119f0:	90 e0       	ldi	r25, 0x00	; 0

        if( (*status & EOI_FLAG) && (ind == size ) )
   119f2:	f8 01       	movw	r30, r16
   119f4:	20 81       	ld	r18, Z
   119f6:	31 81       	ldd	r19, Z+1	; 0x01
   119f8:	30 ff       	sbrs	r19, 0
   119fa:	04 c0       	rjmp	.+8      	; 0x11a04 <gpib_write_str+0xf8>
   119fc:	ec 16       	cp	r14, r28
   119fe:	fd 06       	cpc	r15, r29
            ch |= EOI_FLAG;
   11a00:	09 f4       	brne	.+2      	; 0x11a04 <gpib_write_str+0xf8>

/// @return Returns

        val = gpib_write_byte(ch);
   11a02:	91 60       	ori	r25, 0x01	; 1
   11a04:	0b db       	rcall	.-2538   	; 0x1101c <gpib_write_byte>
        *status |= (val & ERROR_MASK);
   11a06:	5c 01       	movw	r10, r24
   11a08:	aa 24       	eor	r10, r10
   11a0a:	f0 ed       	ldi	r31, 0xD0	; 208
   11a0c:	bf 22       	and	r11, r31
   11a0e:	f8 01       	movw	r30, r16
   11a10:	20 81       	ld	r18, Z
   11a12:	31 81       	ldd	r19, Z+1	; 0x01
   11a14:	2a 29       	or	r18, r10
   11a16:	3b 29       	or	r19, r11
   11a18:	31 83       	std	Z+1, r19	; 0x01
   11a1a:	20 83       	st	Z, r18

#if SDEBUG
        if(debuglevel & GPIB_RW_STR_BUS_DECODE)
   11a1c:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   11a20:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
            gpib_decode(val);
   11a24:	30 fd       	sbrc	r19, 0
#endif
        if(val & ERROR_MASK)
   11a26:	cc de       	rcall	.-616    	; 0x117c0 <gpib_decode>
   11a28:	a1 14       	cp	r10, r1
   11a2a:	b1 04       	cpc	r11, r1

    }                                             // while(ind < size)

// End by setting receive mode and set NRFD and NDAC busy until
// we get back to the main loop (this happens very quickly
	gpib_rx_init(1);	// BUSY
   11a2c:	d1 f2       	breq	.-76     	; 0x119e2 <gpib_write_str+0xd6>
   11a2e:	81 e0       	ldi	r24, 0x01	; 1
   11a30:	e0 d9       	rcall	.-3136   	; 0x10df2 <gpib_rx_init>

    if ( ind != size )
   11a32:	ce 15       	cp	r28, r14
   11a34:	df 05       	cpc	r29, r15
   11a36:	b1 f0       	breq	.+44     	; 0x11a64 <gpib_write_str+0x158>
    {
        if(debuglevel & (GPIB_ERR + GPIB_DEVICE_STATE_MESSAGES + GPIB_RW_STR_BUS_DECODE))
   11a38:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   11a3c:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   11a40:	81 72       	andi	r24, 0x21	; 33
   11a42:	91 70       	andi	r25, 0x01	; 1
   11a44:	89 2b       	or	r24, r25
   11a46:	71 f0       	breq	.+28     	; 0x11a64 <gpib_write_str+0x158>
            printf("[gpib_write_str sent(%d) expected(%d)]\n", ind,size);
   11a48:	ed b7       	in	r30, 0x3d	; 61
   11a4a:	fe b7       	in	r31, 0x3e	; 62
   11a4c:	f7 82       	std	Z+7, r15	; 0x07
   11a4e:	e6 82       	std	Z+6, r14	; 0x06
   11a50:	d5 83       	std	Z+5, r29	; 0x05
   11a52:	c4 83       	std	Z+4, r28	; 0x04
   11a54:	89 ef       	ldi	r24, 0xF9	; 249
   11a56:	9e e0       	ldi	r25, 0x0E	; 14
   11a58:	a0 e0       	ldi	r26, 0x00	; 0
   11a5a:	81 83       	std	Z+1, r24	; 0x01
   11a5c:	92 83       	std	Z+2, r25	; 0x02
   11a5e:	a3 83       	std	Z+3, r26	; 0x03
   11a60:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
    }
    return(ind);
}
   11a64:	ce 01       	movw	r24, r28
   11a66:	cd b7       	in	r28, 0x3d	; 61
   11a68:	de b7       	in	r29, 0x3e	; 62
   11a6a:	27 96       	adiw	r28, 0x07	; 7
   11a6c:	ea e0       	ldi	r30, 0x0A	; 10
   11a6e:	0c 94 c8 e8 	jmp	0x1d190	; 0x1d190 <__epilogue_restores__+0x10>

00011a72 <gpib_file_init>:
{
    int index = find_device(PRINTER_TYPE, address, BASE_MSA);
    if(index == -1)
        return(0);
    return(set_active_device(index));
}
   11a72:	ad b7       	in	r26, 0x3d	; 61
   11a74:	be b7       	in	r27, 0x3e	; 62
   11a76:	17 97       	sbiw	r26, 0x07	; 7
   11a78:	0f b6       	in	r0, 0x3f	; 63
   11a7a:	f8 94       	cli
   11a7c:	be bf       	out	0x3e, r27	; 62
   11a7e:	0f be       	out	0x3f, r0	; 63
   11a80:	ad bf       	out	0x3d, r26	; 61
   11a82:	10 92 b7 01 	sts	0x01B7, r1	; 0x8001b7 <debuglevel+0x1>
   11a86:	10 92 b6 01 	sts	0x01B6, r1	; 0x8001b6 <debuglevel>
   11a8a:	88 eb       	ldi	r24, 0xB8	; 184
   11a8c:	91 e0       	ldi	r25, 0x01	; 1
   11a8e:	0e 94 db 9e 	call	0x13db6	; 0x13db6 <Read_Config>
   11a92:	18 16       	cp	r1, r24
   11a94:	19 06       	cpc	r1, r25
   11a96:	8c f4       	brge	.+34     	; 0x11aba <gpib_file_init+0x48>
   11a98:	ed b7       	in	r30, 0x3d	; 61
   11a9a:	fe b7       	in	r31, 0x3e	; 62
   11a9c:	97 83       	std	Z+7, r25	; 0x07
   11a9e:	86 83       	std	Z+6, r24	; 0x06
   11aa0:	88 eb       	ldi	r24, 0xB8	; 184
   11aa2:	91 e0       	ldi	r25, 0x01	; 1
   11aa4:	95 83       	std	Z+5, r25	; 0x05
   11aa6:	84 83       	std	Z+4, r24	; 0x04
   11aa8:	8d ec       	ldi	r24, 0xCD	; 205
   11aaa:	94 e1       	ldi	r25, 0x14	; 20
   11aac:	a0 e0       	ldi	r26, 0x00	; 0
   11aae:	81 83       	std	Z+1, r24	; 0x01
   11ab0:	92 83       	std	Z+2, r25	; 0x02
   11ab2:	a3 83       	std	Z+3, r26	; 0x03
   11ab4:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
   11ab8:	10 c0       	rjmp	.+32     	; 0x11ada <gpib_file_init+0x68>
   11aba:	89 2b       	or	r24, r25
   11abc:	71 f0       	breq	.+28     	; 0x11ada <gpib_file_init+0x68>
   11abe:	88 eb       	ldi	r24, 0xB8	; 184
   11ac0:	91 e0       	ldi	r25, 0x01	; 1
   11ac2:	ed b7       	in	r30, 0x3d	; 61
   11ac4:	fe b7       	in	r31, 0x3e	; 62
   11ac6:	95 83       	std	Z+5, r25	; 0x05
   11ac8:	84 83       	std	Z+4, r24	; 0x04
   11aca:	8c eb       	ldi	r24, 0xBC	; 188
   11acc:	94 e1       	ldi	r25, 0x14	; 20
   11ace:	a0 e0       	ldi	r26, 0x00	; 0
   11ad0:	81 83       	std	Z+1, r24	; 0x01
   11ad2:	92 83       	std	Z+2, r25	; 0x02
   11ad4:	a3 83       	std	Z+3, r26	; 0x03
   11ad6:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
   11ada:	0e 94 e3 9a 	call	0x135c6	; 0x135c6 <set_Config_Defaults>
   11ade:	0e 94 ec 70 	call	0xe1d8	; 0xe1d8 <mmc_wp_status>
   11ae2:	89 2b       	or	r24, r25
   11ae4:	51 f0       	breq	.+20     	; 0x11afa <gpib_file_init+0x88>
   11ae6:	83 ea       	ldi	r24, 0xA3	; 163
   11ae8:	94 e1       	ldi	r25, 0x14	; 20
   11aea:	a0 e0       	ldi	r26, 0x00	; 0
   11aec:	ed b7       	in	r30, 0x3d	; 61
   11aee:	fe b7       	in	r31, 0x3e	; 62
   11af0:	81 83       	std	Z+1, r24	; 0x01
   11af2:	92 83       	std	Z+2, r25	; 0x02
   11af4:	a3 83       	std	Z+3, r26	; 0x03
   11af6:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
   11afa:	ad b7       	in	r26, 0x3d	; 61
   11afc:	be b7       	in	r27, 0x3e	; 62
   11afe:	17 96       	adiw	r26, 0x07	; 7
   11b00:	0f b6       	in	r0, 0x3f	; 63
   11b02:	f8 94       	cli
   11b04:	be bf       	out	0x3e, r27	; 62
   11b06:	0f be       	out	0x3f, r0	; 63
   11b08:	ad bf       	out	0x3d, r26	; 61
   11b0a:	08 95       	ret

00011b0c <SS80_is_MLA>:
   11b0c:	40 e2       	ldi	r20, 0x20	; 32
   11b0e:	50 e0       	ldi	r21, 0x00	; 0
   11b10:	bc 01       	movw	r22, r24
   11b12:	83 e0       	ldi	r24, 0x03	; 3
   11b14:	90 e0       	ldi	r25, 0x00	; 0
   11b16:	0e 94 1b 98 	call	0x13036	; 0x13036 <find_device>
   11b1a:	8f 3f       	cpi	r24, 0xFF	; 255
   11b1c:	31 f0       	breq	.+12     	; 0x11b2a <SS80_is_MLA+0x1e>
   11b1e:	0e 94 44 98 	call	0x13088	; 0x13088 <set_active_device>
   11b22:	08 2e       	mov	r0, r24
   11b24:	00 0c       	add	r0, r0
   11b26:	99 0b       	sbc	r25, r25
   11b28:	08 95       	ret
   11b2a:	80 e0       	ldi	r24, 0x00	; 0
   11b2c:	90 e0       	ldi	r25, 0x00	; 0
   11b2e:	08 95       	ret

00011b30 <SS80_is_MTA>:
   11b30:	40 e4       	ldi	r20, 0x40	; 64
   11b32:	50 e0       	ldi	r21, 0x00	; 0
   11b34:	bc 01       	movw	r22, r24
   11b36:	83 e0       	ldi	r24, 0x03	; 3
   11b38:	90 e0       	ldi	r25, 0x00	; 0
   11b3a:	0e 94 1b 98 	call	0x13036	; 0x13036 <find_device>
   11b3e:	8f 3f       	cpi	r24, 0xFF	; 255
   11b40:	31 f0       	breq	.+12     	; 0x11b4e <SS80_is_MTA+0x1e>
   11b42:	0e 94 44 98 	call	0x13088	; 0x13088 <set_active_device>
   11b46:	08 2e       	mov	r0, r24
   11b48:	00 0c       	add	r0, r0
   11b4a:	99 0b       	sbc	r25, r25
   11b4c:	08 95       	ret
   11b4e:	80 e0       	ldi	r24, 0x00	; 0
   11b50:	90 e0       	ldi	r25, 0x00	; 0
   11b52:	08 95       	ret

00011b54 <SS80_is_MSA>:
   11b54:	40 e6       	ldi	r20, 0x60	; 96
   11b56:	50 e0       	ldi	r21, 0x00	; 0
   11b58:	bc 01       	movw	r22, r24
   11b5a:	83 e0       	ldi	r24, 0x03	; 3
   11b5c:	90 e0       	ldi	r25, 0x00	; 0
   11b5e:	0e 94 1b 98 	call	0x13036	; 0x13036 <find_device>
   11b62:	8f 3f       	cpi	r24, 0xFF	; 255
   11b64:	31 f0       	breq	.+12     	; 0x11b72 <SS80_is_MSA+0x1e>
   11b66:	0e 94 44 98 	call	0x13088	; 0x13088 <set_active_device>
   11b6a:	08 2e       	mov	r0, r24
   11b6c:	00 0c       	add	r0, r0
   11b6e:	99 0b       	sbc	r25, r25
   11b70:	08 95       	ret
   11b72:	80 e0       	ldi	r24, 0x00	; 0
   11b74:	90 e0       	ldi	r25, 0x00	; 0
   11b76:	08 95       	ret

00011b78 <AMIGO_is_MLA>:
   11b78:	40 e2       	ldi	r20, 0x20	; 32
   11b7a:	50 e0       	ldi	r21, 0x00	; 0
   11b7c:	bc 01       	movw	r22, r24
   11b7e:	81 e0       	ldi	r24, 0x01	; 1
   11b80:	90 e0       	ldi	r25, 0x00	; 0
   11b82:	0e 94 1b 98 	call	0x13036	; 0x13036 <find_device>
   11b86:	8f 3f       	cpi	r24, 0xFF	; 255
   11b88:	31 f0       	breq	.+12     	; 0x11b96 <AMIGO_is_MLA+0x1e>
   11b8a:	0e 94 44 98 	call	0x13088	; 0x13088 <set_active_device>
   11b8e:	08 2e       	mov	r0, r24
   11b90:	00 0c       	add	r0, r0
   11b92:	99 0b       	sbc	r25, r25
   11b94:	08 95       	ret
   11b96:	80 e0       	ldi	r24, 0x00	; 0
   11b98:	90 e0       	ldi	r25, 0x00	; 0
   11b9a:	08 95       	ret

00011b9c <AMIGO_is_MTA>:
   11b9c:	40 e4       	ldi	r20, 0x40	; 64
   11b9e:	50 e0       	ldi	r21, 0x00	; 0
   11ba0:	bc 01       	movw	r22, r24
   11ba2:	81 e0       	ldi	r24, 0x01	; 1
   11ba4:	90 e0       	ldi	r25, 0x00	; 0
   11ba6:	0e 94 1b 98 	call	0x13036	; 0x13036 <find_device>
   11baa:	8f 3f       	cpi	r24, 0xFF	; 255
   11bac:	31 f0       	breq	.+12     	; 0x11bba <AMIGO_is_MTA+0x1e>
   11bae:	0e 94 44 98 	call	0x13088	; 0x13088 <set_active_device>
   11bb2:	08 2e       	mov	r0, r24
   11bb4:	00 0c       	add	r0, r0
   11bb6:	99 0b       	sbc	r25, r25
   11bb8:	08 95       	ret
   11bba:	80 e0       	ldi	r24, 0x00	; 0
   11bbc:	90 e0       	ldi	r25, 0x00	; 0
   11bbe:	08 95       	ret

00011bc0 <AMIGO_is_MSA>:
   11bc0:	40 e6       	ldi	r20, 0x60	; 96
   11bc2:	50 e0       	ldi	r21, 0x00	; 0
   11bc4:	bc 01       	movw	r22, r24
   11bc6:	81 e0       	ldi	r24, 0x01	; 1
   11bc8:	90 e0       	ldi	r25, 0x00	; 0
   11bca:	0e 94 1b 98 	call	0x13036	; 0x13036 <find_device>
   11bce:	8f 3f       	cpi	r24, 0xFF	; 255
   11bd0:	31 f0       	breq	.+12     	; 0x11bde <AMIGO_is_MSA+0x1e>
   11bd2:	0e 94 44 98 	call	0x13088	; 0x13088 <set_active_device>
   11bd6:	08 2e       	mov	r0, r24
   11bd8:	00 0c       	add	r0, r0
   11bda:	99 0b       	sbc	r25, r25
   11bdc:	08 95       	ret
   11bde:	80 e0       	ldi	r24, 0x00	; 0
   11be0:	90 e0       	ldi	r25, 0x00	; 0
   11be2:	08 95       	ret

00011be4 <PRINTER_is_MLA>:
   11be4:	40 e2       	ldi	r20, 0x20	; 32
   11be6:	50 e0       	ldi	r21, 0x00	; 0
   11be8:	bc 01       	movw	r22, r24
   11bea:	84 e0       	ldi	r24, 0x04	; 4
   11bec:	90 e0       	ldi	r25, 0x00	; 0
   11bee:	0e 94 1b 98 	call	0x13036	; 0x13036 <find_device>
   11bf2:	8f 3f       	cpi	r24, 0xFF	; 255
   11bf4:	31 f0       	breq	.+12     	; 0x11c02 <PRINTER_is_MLA+0x1e>
   11bf6:	0e 94 44 98 	call	0x13088	; 0x13088 <set_active_device>
   11bfa:	08 2e       	mov	r0, r24
   11bfc:	00 0c       	add	r0, r0
   11bfe:	99 0b       	sbc	r25, r25
   11c00:	08 95       	ret
   11c02:	80 e0       	ldi	r24, 0x00	; 0
   11c04:	90 e0       	ldi	r25, 0x00	; 0
   11c06:	08 95       	ret

00011c08 <PRINTER_is_MTA>:
   11c08:	40 e4       	ldi	r20, 0x40	; 64
   11c0a:	50 e0       	ldi	r21, 0x00	; 0
   11c0c:	bc 01       	movw	r22, r24
   11c0e:	84 e0       	ldi	r24, 0x04	; 4
   11c10:	90 e0       	ldi	r25, 0x00	; 0
   11c12:	0e 94 1b 98 	call	0x13036	; 0x13036 <find_device>
   11c16:	8f 3f       	cpi	r24, 0xFF	; 255
   11c18:	31 f0       	breq	.+12     	; 0x11c26 <PRINTER_is_MTA+0x1e>
   11c1a:	0e 94 44 98 	call	0x13088	; 0x13088 <set_active_device>
   11c1e:	08 2e       	mov	r0, r24
   11c20:	00 0c       	add	r0, r0
   11c22:	99 0b       	sbc	r25, r25
   11c24:	08 95       	ret
   11c26:	80 e0       	ldi	r24, 0x00	; 0
   11c28:	90 e0       	ldi	r25, 0x00	; 0
   11c2a:	08 95       	ret

00011c2c <gpib_init_devices>:
///
/// - Used at power up, Bus IFC or user aborts
/// @return  void
void gpib_init_devices(void)
{
    gpib_bus_init();                              // Not busy - we have to free all pins on the BUS
   11c2c:	aa d8       	rcall	.-3756   	; 0x10d82 <gpib_bus_init>

// Init PPR talking and listening states
// Enable this 14 April 2020 - testing MIke Gore
    gpib_state_init();
   11c2e:	11 d9       	rcall	.-3550   	; 0x10e52 <gpib_state_init>
   11c30:	0e 94 d6 ae 	call	0x15dac	; 0x15dac <SS80_init>

    SS80_init();                                  // SS80 state init
   11c34:	0e 94 6b b4 	call	0x168d6	; 0x168d6 <amigo_init>

#ifdef AMIGO
    amigo_init();                                 // AMIGO state init
   11c38:	0c 94 96 bf 	jmp	0x17f2c	; 0x17f2c <printer_close>
#endif

    printer_close();                              // Close any open fprinter files
   11c3c:	08 95       	ret

00011c3e <gpib_trace_task>:
   11c3e:	0f 93       	push	r16
/// @param name: File name to save log file to.
/// @return  void
///   Exit on Key Press

void gpib_trace_task( char *name , int detail)
{
   11c40:	1f 93       	push	r17
   11c42:	cf 93       	push	r28
   11c44:	df 93       	push	r29
   11c46:	00 d0       	rcall	.+0      	; 0x11c48 <gpib_trace_task+0xa>
   11c48:	00 d0       	rcall	.+0      	; 0x11c4a <gpib_trace_task+0xc>
   11c4a:	1f 92       	push	r1
   11c4c:	eb 01       	movw	r28, r22
    int ch;

    if(name && *name)
   11c4e:	00 97       	sbiw	r24, 0x00	; 0
   11c50:	09 f4       	brne	.+2      	; 0x11c54 <gpib_trace_task+0x16>
   11c52:	44 c0       	rjmp	.+136    	; 0x11cdc <gpib_trace_task+0x9e>
   11c54:	fc 01       	movw	r30, r24
   11c56:	20 81       	ld	r18, Z
   11c58:	22 23       	and	r18, r18
   11c5a:	09 f4       	brne	.+2      	; 0x11c5e <gpib_trace_task+0x20>
   11c5c:	3f c0       	rjmp	.+126    	; 0x11cdc <gpib_trace_task+0x9e>
    {
        name = skipspaces(name);
   11c5e:	0e 94 2b 33 	call	0x6656	; 0x6656 <skipspaces>
   11c62:	8c 01       	movw	r16, r24
        printf("Capturing GPIB BUS to:%s\n", name);
   11c64:	ed b7       	in	r30, 0x3d	; 61
   11c66:	fe b7       	in	r31, 0x3e	; 62
   11c68:	95 83       	std	Z+5, r25	; 0x05
   11c6a:	84 83       	std	Z+4, r24	; 0x04
   11c6c:	89 e8       	ldi	r24, 0x89	; 137
   11c6e:	94 e1       	ldi	r25, 0x14	; 20
   11c70:	a0 e0       	ldi	r26, 0x00	; 0
   11c72:	81 83       	std	Z+1, r24	; 0x01
   11c74:	92 83       	std	Z+2, r25	; 0x02
   11c76:	a3 83       	std	Z+3, r26	; 0x03
   11c78:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
        if(detail)
   11c7c:	20 97       	sbiw	r28, 0x00	; 0
   11c7e:	51 f0       	breq	.+20     	; 0x11c94 <gpib_trace_task+0x56>
            printf("FULL GPIB BUS handshake logging requested\n");
   11c80:	8e e5       	ldi	r24, 0x5E	; 94
   11c82:	94 e1       	ldi	r25, 0x14	; 20
   11c84:	a0 e0       	ldi	r26, 0x00	; 0
   11c86:	ed b7       	in	r30, 0x3d	; 61
   11c88:	fe b7       	in	r31, 0x3e	; 62
   11c8a:	81 83       	std	Z+1, r24	; 0x01
   11c8c:	92 83       	std	Z+2, r25	; 0x02
   11c8e:	a3 83       	std	Z+3, r26	; 0x03
   11c90:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
        printf("Press ANY key to exit\n");
   11c94:	87 e4       	ldi	r24, 0x47	; 71
   11c96:	94 e1       	ldi	r25, 0x14	; 20
   11c98:	a0 e0       	ldi	r26, 0x00	; 0
   11c9a:	ed b7       	in	r30, 0x3d	; 61
   11c9c:	fe b7       	in	r31, 0x3e	; 62
   11c9e:	81 83       	std	Z+1, r24	; 0x01
   11ca0:	92 83       	std	Z+2, r25	; 0x02
   11ca2:	a3 83       	std	Z+3, r26	; 0x03
   11ca4:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>

        gpib_log_fp = fopen(name,"wb");
   11ca8:	6a ef       	ldi	r22, 0xFA	; 250
   11caa:	78 e0       	ldi	r23, 0x08	; 8
   11cac:	c8 01       	movw	r24, r16
   11cae:	0e 94 54 7f 	call	0xfea8	; 0xfea8 <fopen>
   11cb2:	90 93 61 19 	sts	0x1961, r25	; 0x801961 <gpib_log_fp+0x1>
   11cb6:	80 93 60 19 	sts	0x1960, r24	; 0x801960 <gpib_log_fp>
        if(gpib_log_fp == NULL)
   11cba:	89 2b       	or	r24, r25
   11cbc:	b9 f4       	brne	.+46     	; 0x11cec <gpib_trace_task+0xae>
        {
            perror("open failed");
   11cbe:	88 e8       	ldi	r24, 0x88	; 136
   11cc0:	9d e0       	ldi	r25, 0x0D	; 13
   11cc2:	0e 94 85 79 	call	0xf30a	; 0xf30a <perror>
            printf("exiting...\n");
   11cc6:	8b e3       	ldi	r24, 0x3B	; 59
   11cc8:	94 e1       	ldi	r25, 0x14	; 20
   11cca:	a0 e0       	ldi	r26, 0x00	; 0
   11ccc:	ed b7       	in	r30, 0x3d	; 61
   11cce:	fe b7       	in	r31, 0x3e	; 62
   11cd0:	81 83       	std	Z+1, r24	; 0x01
   11cd2:	92 83       	std	Z+2, r25	; 0x02
   11cd4:	a3 83       	std	Z+3, r26	; 0x03
   11cd6:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
            return;
   11cda:	3d c0       	rjmp	.+122    	; 0x11d56 <gpib_trace_task+0x118>
        }
    }
    else
    {
        gpib_log_fp = stdout;
   11cdc:	80 91 c1 1c 	lds	r24, 0x1CC1	; 0x801cc1 <__iob+0x2>
   11ce0:	90 91 c2 1c 	lds	r25, 0x1CC2	; 0x801cc2 <__iob+0x3>
   11ce4:	90 93 61 19 	sts	0x1961, r25	; 0x801961 <gpib_log_fp+0x1>
   11ce8:	80 93 60 19 	sts	0x1960, r24	; 0x801960 <gpib_log_fp>
    }

    // gpib_state_init();                            // Init PPR talking and listening states
	// gpib_state_init is in gpib_init_devices()
    gpib_init_devices();
   11cec:	9f df       	rcall	.-194    	; 0x11c2c <gpib_init_devices>

    gpib_decode_header(gpib_log_fp);
   11cee:	80 91 60 19 	lds	r24, 0x1960	; 0x801960 <gpib_log_fp>
   11cf2:	90 91 61 19 	lds	r25, 0x1961	; 0x801961 <gpib_log_fp+0x1>
   11cf6:	ca da       	rcall	.-2668   	; 0x1128c <gpib_decode_header>
    while(1)                                      // Main loop, forever
    {
        if(uart_keyhit(0))
   11cf8:	80 e0       	ldi	r24, 0x00	; 0
   11cfa:	0e 94 dd 2a 	call	0x55ba	; 0x55ba <uart_keyhit>
   11cfe:	89 2b       	or	r24, r25
            break;

        ch = gpib_read_byte(detail);
   11d00:	31 f4       	brne	.+12     	; 0x11d0e <gpib_trace_task+0xd0>
   11d02:	ce 01       	movw	r24, r28
        if(!detail)
   11d04:	57 dc       	rcall	.-1874   	; 0x115b4 <gpib_read_byte>
   11d06:	20 97       	sbiw	r28, 0x00	; 0
            gpib_decode(ch);
   11d08:	b9 f7       	brne	.-18     	; 0x11cf8 <gpib_trace_task+0xba>
   11d0a:	5a dd       	rcall	.-1356   	; 0x117c0 <gpib_decode>
   11d0c:	f5 cf       	rjmp	.-22     	; 0x11cf8 <gpib_trace_task+0xba>
    }

    printf("Done\n");
   11d0e:	85 e3       	ldi	r24, 0x35	; 53
   11d10:	94 e1       	ldi	r25, 0x14	; 20
   11d12:	a0 e0       	ldi	r26, 0x00	; 0
   11d14:	ed b7       	in	r30, 0x3d	; 61
   11d16:	fe b7       	in	r31, 0x3e	; 62
   11d18:	81 83       	std	Z+1, r24	; 0x01
   11d1a:	92 83       	std	Z+2, r25	; 0x02
   11d1c:	a3 83       	std	Z+3, r26	; 0x03
   11d1e:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
    if(gpib_log_fp)
   11d22:	80 91 60 19 	lds	r24, 0x1960	; 0x801960 <gpib_log_fp>
   11d26:	90 91 61 19 	lds	r25, 0x1961	; 0x801961 <gpib_log_fp+0x1>
   11d2a:	00 97       	sbiw	r24, 0x00	; 0
   11d2c:	a1 f0       	breq	.+40     	; 0x11d56 <gpib_trace_task+0x118>
    {
        fclose(gpib_log_fp);
   11d2e:	0e 94 fe 7d 	call	0xfbfc	; 0xfbfc <fclose>
        printf("Capturing Closed\n");
   11d32:	83 e2       	ldi	r24, 0x23	; 35
   11d34:	94 e1       	ldi	r25, 0x14	; 20
   11d36:	a0 e0       	ldi	r26, 0x00	; 0
   11d38:	ed b7       	in	r30, 0x3d	; 61
   11d3a:	fe b7       	in	r31, 0x3e	; 62
   11d3c:	81 83       	std	Z+1, r24	; 0x01
   11d3e:	92 83       	std	Z+2, r25	; 0x02
   11d40:	a3 83       	std	Z+3, r26	; 0x03
   11d42:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
        gpib_log_fp = stdout;
   11d46:	80 91 c1 1c 	lds	r24, 0x1CC1	; 0x801cc1 <__iob+0x2>
   11d4a:	90 91 c2 1c 	lds	r25, 0x1CC2	; 0x801cc2 <__iob+0x3>
   11d4e:	90 93 61 19 	sts	0x1961, r25	; 0x801961 <gpib_log_fp+0x1>
   11d52:	80 93 60 19 	sts	0x1960, r24	; 0x801960 <gpib_log_fp>
    }
}
   11d56:	cd b7       	in	r28, 0x3d	; 61
   11d58:	de b7       	in	r29, 0x3e	; 62
   11d5a:	25 96       	adiw	r28, 0x05	; 5
   11d5c:	e4 e0       	ldi	r30, 0x04	; 4
   11d5e:	0c 94 ce e8 	jmp	0x1d19c	; 0x1d19c <__epilogue_restores__+0x1c>

00011d62 <gpib_error_test>:
///
/// @return  val
/// @return ABORT flag on user keypress

uint16_t gpib_error_test(uint16_t val)
{
   11d62:	ef 92       	push	r14
   11d64:	ff 92       	push	r15
   11d66:	0f 93       	push	r16
   11d68:	1f 93       	push	r17
   11d6a:	cf 93       	push	r28
   11d6c:	df 93       	push	r29
   11d6e:	00 d0       	rcall	.+0      	; 0x11d70 <gpib_error_test+0xe>
   11d70:	1f 92       	push	r1
   11d72:	7c 01       	movw	r14, r24

    if(val & ERROR_MASK || uart_keyhit(0) || mmc_ins_status() != 1 )
   11d74:	ec 01       	movw	r28, r24
   11d76:	cc 27       	eor	r28, r28
   11d78:	d0 7d       	andi	r29, 0xD0	; 208
   11d7a:	20 97       	sbiw	r28, 0x00	; 0
   11d7c:	61 f0       	breq	.+24     	; 0x11d96 <gpib_error_test+0x34>
    {
        val &= ERROR_MASK;

///@brief IFC is and important state so display it for most messages
        if(debuglevel & (GPIB_ERR + GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_TOP_LEVEL_BUS_DECODE + GPIB_DEVICE_STATE_MESSAGES))
   11d7e:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   11d82:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   11d86:	8d 72       	andi	r24, 0x2D	; 45
   11d88:	99 27       	eor	r25, r25
   11d8a:	87 01       	movw	r16, r14
   11d8c:	00 27       	eor	r16, r16
   11d8e:	10 71       	andi	r17, 0x10	; 16
   11d90:	89 2b       	or	r24, r25
   11d92:	59 f4       	brne	.+22     	; 0x11daa <gpib_error_test+0x48>
   11d94:	17 c0       	rjmp	.+46     	; 0x11dc4 <gpib_error_test+0x62>
/// @return ABORT flag on user keypress

uint16_t gpib_error_test(uint16_t val)
{

    if(val & ERROR_MASK || uart_keyhit(0) || mmc_ins_status() != 1 )
   11d96:	80 e0       	ldi	r24, 0x00	; 0
   11d98:	0e 94 dd 2a 	call	0x55ba	; 0x55ba <uart_keyhit>
   11d9c:	89 2b       	or	r24, r25
   11d9e:	79 f7       	brne	.-34     	; 0x11d7e <gpib_error_test+0x1c>
   11da0:	0e 94 ea 6f 	call	0xdfd4	; 0xdfd4 <mmc_ins_status>
   11da4:	01 97       	sbiw	r24, 0x01	; 1
   11da6:	59 f7       	brne	.-42     	; 0x11d7e <gpib_error_test+0x1c>
   11da8:	62 c0       	rjmp	.+196    	; 0x11e6e <gpib_error_test+0x10c>

///@brief IFC is and important state so display it for most messages
        if(debuglevel & (GPIB_ERR + GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_TOP_LEVEL_BUS_DECODE + GPIB_DEVICE_STATE_MESSAGES))
        {
/// Bus Clear, reseat all states, etc
            if(val & IFC_FLAG)
   11daa:	01 15       	cp	r16, r1
   11dac:	11 05       	cpc	r17, r1
   11dae:	51 f0       	breq	.+20     	; 0x11dc4 <gpib_error_test+0x62>
                printf("<IFC>\n");
   11db0:	8c e1       	ldi	r24, 0x1C	; 28
   11db2:	94 e1       	ldi	r25, 0x14	; 20
   11db4:	a0 e0       	ldi	r26, 0x00	; 0
   11db6:	ed b7       	in	r30, 0x3d	; 61
   11db8:	fe b7       	in	r31, 0x3e	; 62
   11dba:	81 83       	std	Z+1, r24	; 0x01
   11dbc:	92 83       	std	Z+2, r25	; 0x02
   11dbe:	a3 83       	std	Z+3, r26	; 0x03
   11dc0:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
        }

        if(debuglevel & (GPIB_ERR + GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_TOP_LEVEL_BUS_DECODE + GPIB_DEVICE_STATE_MESSAGES))
   11dc4:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   11dc8:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   11dcc:	8d 72       	andi	r24, 0x2D	; 45
   11dce:	99 27       	eor	r25, r25
   11dd0:	89 2b       	or	r24, r25
   11dd2:	c1 f0       	breq	.+48     	; 0x11e04 <gpib_error_test+0xa2>
        {
            if(val & TIMEOUT_FLAG)
   11dd4:	f6 fe       	sbrs	r15, 6
   11dd6:	0a c0       	rjmp	.+20     	; 0x11dec <gpib_error_test+0x8a>
                printf("<TIMEOUT>\n");
   11dd8:	81 e1       	ldi	r24, 0x11	; 17
   11dda:	94 e1       	ldi	r25, 0x14	; 20
   11ddc:	a0 e0       	ldi	r26, 0x00	; 0
   11dde:	ed b7       	in	r30, 0x3d	; 61
   11de0:	fe b7       	in	r31, 0x3e	; 62
   11de2:	81 83       	std	Z+1, r24	; 0x01
   11de4:	92 83       	std	Z+2, r25	; 0x02
   11de6:	a3 83       	std	Z+3, r26	; 0x03
   11de8:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
            if(val & BUS_ERROR_FLAG)
   11dec:	d7 ff       	sbrs	r29, 7
   11dee:	0a c0       	rjmp	.+20     	; 0x11e04 <gpib_error_test+0xa2>
                printf("<BUS>\n");
   11df0:	8a e0       	ldi	r24, 0x0A	; 10
   11df2:	94 e1       	ldi	r25, 0x14	; 20
   11df4:	a0 e0       	ldi	r26, 0x00	; 0
   11df6:	ed b7       	in	r30, 0x3d	; 61
   11df8:	fe b7       	in	r31, 0x3e	; 62
   11dfa:	81 83       	std	Z+1, r24	; 0x01
   11dfc:	92 83       	std	Z+2, r25	; 0x02
   11dfe:	a3 83       	std	Z+3, r26	; 0x03
   11e00:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
        }

        if(uart_keyhit(0))
   11e04:	80 e0       	ldi	r24, 0x00	; 0
   11e06:	0e 94 dd 2a 	call	0x55ba	; 0x55ba <uart_keyhit>
   11e0a:	89 2b       	or	r24, r25
   11e0c:	51 f0       	breq	.+20     	; 0x11e22 <gpib_error_test+0xc0>
            printf("<INTERRUPT>\n");
   11e0e:	8d ef       	ldi	r24, 0xFD	; 253
   11e10:	93 e1       	ldi	r25, 0x13	; 19
   11e12:	a0 e0       	ldi	r26, 0x00	; 0
   11e14:	ed b7       	in	r30, 0x3d	; 61
   11e16:	fe b7       	in	r31, 0x3e	; 62
   11e18:	81 83       	std	Z+1, r24	; 0x01
   11e1a:	92 83       	std	Z+2, r25	; 0x02
   11e1c:	a3 83       	std	Z+3, r26	; 0x03
   11e1e:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>

        if( mmc_ins_status() != 1 )
   11e22:	0e 94 ea 6f 	call	0xdfd4	; 0xdfd4 <mmc_ins_status>
   11e26:	01 97       	sbiw	r24, 0x01	; 1
   11e28:	51 f0       	breq	.+20     	; 0x11e3e <gpib_error_test+0xdc>
            printf("<MEDIA MISSING>\n");
   11e2a:	8c ee       	ldi	r24, 0xEC	; 236
   11e2c:	93 e1       	ldi	r25, 0x13	; 19
   11e2e:	a0 e0       	ldi	r26, 0x00	; 0
   11e30:	ed b7       	in	r30, 0x3d	; 61
   11e32:	fe b7       	in	r31, 0x3e	; 62
   11e34:	81 83       	std	Z+1, r24	; 0x01
   11e36:	92 83       	std	Z+2, r25	; 0x02
   11e38:	a3 83       	std	Z+3, r26	; 0x03
   11e3a:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>

        if(val & IFC_FLAG)
   11e3e:	01 15       	cp	r16, r1
   11e40:	11 05       	cpc	r17, r1
   11e42:	09 f0       	breq	.+2      	; 0x11e46 <gpib_error_test+0xe4>
        {
            gpib_init_devices();
   11e44:	f3 de       	rcall	.-538    	; 0x11c2c <gpib_init_devices>
        }

        if(uart_keyhit(0))
   11e46:	80 e0       	ldi	r24, 0x00	; 0
   11e48:	0e 94 dd 2a 	call	0x55ba	; 0x55ba <uart_keyhit>
   11e4c:	89 2b       	or	r24, r25
        {
            gpib_init_devices();
   11e4e:	11 f0       	breq	.+4      	; 0x11e54 <gpib_error_test+0xf2>
   11e50:	ed de       	rcall	.-550    	; 0x11c2c <gpib_init_devices>
   11e52:	0b c0       	rjmp	.+22     	; 0x11e6a <gpib_error_test+0x108>
            return(ABORT_FLAG);
        }

/// @todo  do we want to always exit here ?
///  low level GPIB functions are still useful even without a DISK
        if( mmc_ins_status() != 1 )
   11e54:	0e 94 ea 6f 	call	0xdfd4	; 0xdfd4 <mmc_ins_status>
   11e58:	01 97       	sbiw	r24, 0x01	; 1
   11e5a:	39 f4       	brne	.+14     	; 0x11e6a <gpib_error_test+0x108>
        {
            return(ABORT_FLAG);
        }

// Wait for IFC free
        if(val & IFC_FLAG )
   11e5c:	01 15       	cp	r16, r1
   11e5e:	11 05       	cpc	r17, r1
   11e60:	31 f0       	breq	.+12     	; 0x11e6e <gpib_error_test+0x10c>
        {
            while(GPIB_IO_RD(IFC) == 0)
   11e62:	54 98       	cbi	0x0a, 4	; 10
   11e64:	4c 9b       	sbis	0x09, 4	; 9
   11e66:	fd cf       	rjmp	.-6      	; 0x11e62 <gpib_error_test+0x100>
   11e68:	02 c0       	rjmp	.+4      	; 0x11e6e <gpib_error_test+0x10c>

/// @todo  do we want to always exit here ?
///  low level GPIB functions are still useful even without a DISK
        if( mmc_ins_status() != 1 )
        {
            return(ABORT_FLAG);
   11e6a:	c1 e0       	ldi	r28, 0x01	; 1
   11e6c:	d0 e0       	ldi	r29, 0x00	; 0
                ;
        }
        return(val);
    }
    return(0);
}
   11e6e:	ce 01       	movw	r24, r28
   11e70:	cd b7       	in	r28, 0x3d	; 61
   11e72:	de b7       	in	r29, 0x3e	; 62
   11e74:	23 96       	adiw	r28, 0x03	; 3
   11e76:	e6 e0       	ldi	r30, 0x06	; 6
   11e78:	0c 94 cc e8 	jmp	0x1d198	; 0x1d198 <__epilogue_restores__+0x18>

00011e7c <GPIB_COMMANDS>:
///
/// @return GPIB status from emulator command.
/// @return 0 if no emulator command processed.

uint16_t GPIB_COMMANDS(uint16_t val, uint8_t unread)
{
   11e7c:	1f 93       	push	r17
   11e7e:	cf 93       	push	r28
   11e80:	df 93       	push	r29
   11e82:	ec 01       	movw	r28, r24
   11e84:	16 2f       	mov	r17, r22
    uint16_t status;

///@brief talking ?
    if(talking != UNT)
   11e86:	80 91 ee 1e 	lds	r24, 0x1EEE	; 0x801eee <talking>
   11e8a:	8f 35       	cpi	r24, 0x5F	; 95
   11e8c:	91 f0       	breq	.+36     	; 0x11eb2 <GPIB_COMMANDS+0x36>
    {

#ifdef AMIGO
        if ( AMIGO_is_MLA(listening) )
   11e8e:	80 91 f0 1e 	lds	r24, 0x1EF0	; 0x801ef0 <listening>
   11e92:	90 e0       	ldi	r25, 0x00	; 0
   11e94:	71 de       	rcall	.-798    	; 0x11b78 <AMIGO_is_MLA>
   11e96:	89 2b       	or	r24, r25
   11e98:	c9 f4       	brne	.+50     	; 0x11ecc <GPIB_COMMANDS+0x50>
            secondary = 0;
            return(status);
        }
#endif                                    // ifdef AMIGO

        if ( SS80_is_MLA(listening) )
   11e9a:	80 91 f0 1e 	lds	r24, 0x1EF0	; 0x801ef0 <listening>
   11e9e:	90 e0       	ldi	r25, 0x00	; 0
   11ea0:	35 de       	rcall	.-918    	; 0x11b0c <SS80_is_MLA>
   11ea2:	89 2b       	or	r24, r25
   11ea4:	11 f5       	brne	.+68     	; 0x11eea <GPIB_COMMANDS+0x6e>
            status = SS80_COMMANDS(secondary);
            secondary = 0;
            return(status);
        }

        if ( PRINTER_is_MLA(listening) )
   11ea6:	80 91 f0 1e 	lds	r24, 0x1EF0	; 0x801ef0 <listening>
   11eaa:	90 e0       	ldi	r25, 0x00	; 0
   11eac:	9b de       	rcall	.-714    	; 0x11be4 <PRINTER_is_MLA>
   11eae:	89 2b       	or	r24, r25
   11eb0:	59 f5       	brne	.+86     	; 0x11f08 <GPIB_COMMANDS+0x8c>
            return(status);
        }
    }

///@brief listening ?
    if(listening != UNL)
   11eb2:	80 91 f0 1e 	lds	r24, 0x1EF0	; 0x801ef0 <listening>
   11eb6:	8f 33       	cpi	r24, 0x3F	; 63
   11eb8:	19 f4       	brne	.+6      	; 0x11ec0 <GPIB_COMMANDS+0x44>
            status = PRINTER_COMMANDS(secondary);
            secondary = 0;
            return(status);
        }
    }
    return(0);
   11eba:	80 e0       	ldi	r24, 0x00	; 0
   11ebc:	90 e0       	ldi	r25, 0x00	; 0
   11ebe:	2e c0       	rjmp	.+92     	; 0x11f1c <GPIB_COMMANDS+0xa0>

///@brief listening ?
    if(listening != UNL)
    {
#ifdef AMIGO
        if ( AMIGO_is_MTA(talking) )
   11ec0:	80 91 ee 1e 	lds	r24, 0x1EEE	; 0x801eee <talking>
   11ec4:	90 e0       	ldi	r25, 0x00	; 0
   11ec6:	6a de       	rcall	.-812    	; 0x11b9c <AMIGO_is_MTA>
   11ec8:	89 2b       	or	r24, r25
   11eca:	49 f0       	breq	.+18     	; 0x11ede <GPIB_COMMANDS+0x62>
        {
            if(unread)
   11ecc:	11 23       	and	r17, r17
   11ece:	11 f0       	breq	.+4      	; 0x11ed4 <GPIB_COMMANDS+0x58>
                gpib_unread(val);
   11ed0:	ce 01       	movw	r24, r28
   11ed2:	58 d8       	rcall	.-3920   	; 0x10f84 <gpib_unread>
   11ed4:	80 91 ef 1e 	lds	r24, 0x1EEF	; 0x801eef <secondary>
            status = AMIGO_COMMANDS(secondary);
   11ed8:	0e 94 91 be 	call	0x17d22	; 0x17d22 <AMIGO_COMMANDS>
   11edc:	1d c0       	rjmp	.+58     	; 0x11f18 <GPIB_COMMANDS+0x9c>
            secondary = 0;
            return(status);
        }
#endif

        if ( SS80_is_MTA(talking) )
   11ede:	80 91 ee 1e 	lds	r24, 0x1EEE	; 0x801eee <talking>
   11ee2:	90 e0       	ldi	r25, 0x00	; 0
   11ee4:	25 de       	rcall	.-950    	; 0x11b30 <SS80_is_MTA>
   11ee6:	89 2b       	or	r24, r25
   11ee8:	49 f0       	breq	.+18     	; 0x11efc <GPIB_COMMANDS+0x80>
        {
            if(unread)
   11eea:	11 23       	and	r17, r17
   11eec:	11 f0       	breq	.+4      	; 0x11ef2 <GPIB_COMMANDS+0x76>
                gpib_unread(val);
   11eee:	ce 01       	movw	r24, r28
   11ef0:	49 d8       	rcall	.-3950   	; 0x10f84 <gpib_unread>
   11ef2:	80 91 ef 1e 	lds	r24, 0x1EEF	; 0x801eef <secondary>
            status = SS80_COMMANDS(secondary);
   11ef6:	0e 94 b7 b2 	call	0x1656e	; 0x1656e <SS80_COMMANDS>
   11efa:	0e c0       	rjmp	.+28     	; 0x11f18 <GPIB_COMMANDS+0x9c>
            secondary = 0;
            return(status);
        }

        if ( PRINTER_is_MTA(talking) )
   11efc:	80 91 ee 1e 	lds	r24, 0x1EEE	; 0x801eee <talking>
   11f00:	90 e0       	ldi	r25, 0x00	; 0
   11f02:	82 de       	rcall	.-764    	; 0x11c08 <PRINTER_is_MTA>
   11f04:	89 2b       	or	r24, r25
   11f06:	c9 f2       	breq	.-78     	; 0x11eba <GPIB_COMMANDS+0x3e>
        {
            if(unread)
   11f08:	11 23       	and	r17, r17
   11f0a:	11 f0       	breq	.+4      	; 0x11f10 <GPIB_COMMANDS+0x94>
                gpib_unread(val);
   11f0c:	ce 01       	movw	r24, r28
   11f0e:	3a d8       	rcall	.-3980   	; 0x10f84 <gpib_unread>
   11f10:	80 91 ef 1e 	lds	r24, 0x1EEF	; 0x801eef <secondary>
            status = PRINTER_COMMANDS(secondary);
   11f14:	0e 94 0a c1 	call	0x18214	; 0x18214 <PRINTER_COMMANDS>
   11f18:	10 92 ef 1e 	sts	0x1EEF, r1	; 0x801eef <secondary>
            secondary = 0;
   11f1c:	df 91       	pop	r29
            return(status);
        }
    }
    return(0);
}
   11f1e:	cf 91       	pop	r28
   11f20:	1f 91       	pop	r17
   11f22:	08 95       	ret

00011f24 <Send_Identify>:
   11f24:	cf 92       	push	r12
///
/// @return  0 on GPIB error returns error flags
/// @see gpib.h ERROR_MASK for a full list.

int Send_Identify(uint8_t ch, uint16_t ID)
{
   11f26:	df 92       	push	r13
   11f28:	ff 92       	push	r15
   11f2a:	0f 93       	push	r16
   11f2c:	1f 93       	push	r17
   11f2e:	cf 93       	push	r28
   11f30:	df 93       	push	r29
   11f32:	cd b7       	in	r28, 0x3d	; 61
   11f34:	de b7       	in	r29, 0x3e	; 62
   11f36:	2b 97       	sbiw	r28, 0x0b	; 11
   11f38:	0f b6       	in	r0, 0x3f	; 63
   11f3a:	f8 94       	cli
   11f3c:	de bf       	out	0x3e, r29	; 62
   11f3e:	0f be       	out	0x3f, r0	; 63
   11f40:	cd bf       	out	0x3d, r28	; 61
   11f42:	f8 2e       	mov	r15, r24
   11f44:	6b 01       	movw	r12, r22
    uint16_t status = EOI_FLAG;
   11f46:	80 e0       	ldi	r24, 0x00	; 0
   11f48:	91 e0       	ldi	r25, 0x01	; 1
   11f4a:	9b 87       	std	Y+11, r25	; 0x0b
   11f4c:	8a 87       	std	Y+10, r24	; 0x0a
    uint8_t tmp[2];

    V2B_MSB(tmp,0,2,ID);
   11f4e:	8b 01       	movw	r16, r22
   11f50:	20 e0       	ldi	r18, 0x00	; 0
   11f52:	30 e0       	ldi	r19, 0x00	; 0
   11f54:	42 e0       	ldi	r20, 0x02	; 2
   11f56:	50 e0       	ldi	r21, 0x00	; 0
   11f58:	60 e0       	ldi	r22, 0x00	; 0
   11f5a:	70 e0       	ldi	r23, 0x00	; 0
   11f5c:	ce 01       	movw	r24, r28
   11f5e:	08 96       	adiw	r24, 0x08	; 8
   11f60:	0e 94 45 c1 	call	0x1828a	; 0x1828a <V2B_MSB>
    if(gpib_write_str(tmp,2, &status) != 2)
   11f64:	ae 01       	movw	r20, r28
   11f66:	46 5f       	subi	r20, 0xF6	; 246
   11f68:	5f 4f       	sbci	r21, 0xFF	; 255
   11f6a:	62 e0       	ldi	r22, 0x02	; 2
   11f6c:	70 e0       	ldi	r23, 0x00	; 0
   11f6e:	ce 01       	movw	r24, r28
   11f70:	08 96       	adiw	r24, 0x08	; 8
   11f72:	cc dc       	rcall	.-1640   	; 0x1190c <gpib_write_str>
   11f74:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   11f78:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   11f7c:	02 97       	sbiw	r24, 0x02	; 2
   11f7e:	79 f0       	breq	.+30     	; 0x11f9e <Send_Identify+0x7a>
    {
        if(debuglevel & (GPIB_ERR + GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   11f80:	25 72       	andi	r18, 0x25	; 37
   11f82:	33 27       	eor	r19, r19
   11f84:	23 2b       	or	r18, r19
   11f86:	f9 f0       	breq	.+62     	; 0x11fc6 <Send_Identify+0xa2>
            printf("[IDENT Unit:%02XH=%04XH FAILED]\n",
   11f88:	ed b7       	in	r30, 0x3d	; 61
   11f8a:	fe b7       	in	r31, 0x3e	; 62
   11f8c:	d7 82       	std	Z+7, r13	; 0x07
   11f8e:	c6 82       	std	Z+6, r12	; 0x06
   11f90:	8f 2d       	mov	r24, r15
   11f92:	90 e0       	ldi	r25, 0x00	; 0
   11f94:	95 83       	std	Z+5, r25	; 0x05
   11f96:	84 83       	std	Z+4, r24	; 0x04
   11f98:	8b ec       	ldi	r24, 0xCB	; 203
   11f9a:	93 e1       	ldi	r25, 0x13	; 19
   11f9c:	0e c0       	rjmp	.+28     	; 0x11fba <Send_Identify+0x96>
                (int)ch,(int)ID);
        return(status & ERROR_MASK);
    }
#if SDEBUG
    if(debuglevel & (GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   11f9e:	24 72       	andi	r18, 0x24	; 36
   11fa0:	33 27       	eor	r19, r19
   11fa2:	23 2b       	or	r18, r19
   11fa4:	81 f0       	breq	.+32     	; 0x11fc6 <Send_Identify+0xa2>
        printf("[IDENT Unit:%02XH=%04XH]\n", (int)ch,(int)ID);
   11fa6:	ed b7       	in	r30, 0x3d	; 61
   11fa8:	fe b7       	in	r31, 0x3e	; 62
   11faa:	d7 82       	std	Z+7, r13	; 0x07
   11fac:	c6 82       	std	Z+6, r12	; 0x06
   11fae:	8f 2d       	mov	r24, r15
   11fb0:	90 e0       	ldi	r25, 0x00	; 0
   11fb2:	95 83       	std	Z+5, r25	; 0x05
   11fb4:	84 83       	std	Z+4, r24	; 0x04
   11fb6:	81 eb       	ldi	r24, 0xB1	; 177
   11fb8:	93 e1       	ldi	r25, 0x13	; 19
   11fba:	a0 e0       	ldi	r26, 0x00	; 0
   11fbc:	81 83       	std	Z+1, r24	; 0x01
   11fbe:	92 83       	std	Z+2, r25	; 0x02
   11fc0:	a3 83       	std	Z+3, r26	; 0x03
   11fc2:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
#endif
    return (status & ERROR_MASK);
   11fc6:	8a 85       	ldd	r24, Y+10	; 0x0a
   11fc8:	9b 85       	ldd	r25, Y+11	; 0x0b
   11fca:	88 27       	eor	r24, r24
   11fcc:	90 7d       	andi	r25, 0xD0	; 208
}
   11fce:	2b 96       	adiw	r28, 0x0b	; 11
   11fd0:	0f b6       	in	r0, 0x3f	; 63
   11fd2:	f8 94       	cli
   11fd4:	de bf       	out	0x3e, r29	; 62
   11fd6:	0f be       	out	0x3f, r0	; 63
   11fd8:	cd bf       	out	0x3d, r28	; 61
   11fda:	df 91       	pop	r29
   11fdc:	cf 91       	pop	r28
   11fde:	1f 91       	pop	r17
   11fe0:	0f 91       	pop	r16
   11fe2:	ff 90       	pop	r15
   11fe4:	df 90       	pop	r13
   11fe6:	cf 90       	pop	r12
   11fe8:	08 95       	ret

00011fea <GPIB>:
/// @return  0 on sucess
/// @return GPIB error flags on fail
/// @see gpib.h ERROR_MASK defines for a full list.

int GPIB(uint8_t ch)
{
   11fea:	00 d0       	rcall	.+0      	; 0x11fec <GPIB+0x2>
   11fec:	00 d0       	rcall	.+0      	; 0x11fee <GPIB+0x4>
   11fee:	1f 92       	push	r1
   11ff0:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   11ff4:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
///@brief Parallel Poll Configure
///TODO
    if(ch == PPC)
   11ff8:	85 30       	cpi	r24, 0x05	; 5
   11ffa:	89 f4       	brne	.+34     	; 0x1201e <GPIB+0x34>
    {
        if(debuglevel & (GPIB_ERR + GPIB_PPR + GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_TODO))
   11ffc:	27 71       	andi	r18, 0x17	; 23
   11ffe:	33 27       	eor	r19, r19
   12000:	23 2b       	or	r18, r19
   12002:	51 f0       	breq	.+20     	; 0x12018 <GPIB+0x2e>
            printf("[PPC unsupported TODO]\n");
   12004:	89 e9       	ldi	r24, 0x99	; 153
   12006:	93 e1       	ldi	r25, 0x13	; 19
   12008:	a0 e0       	ldi	r26, 0x00	; 0
   1200a:	ed b7       	in	r30, 0x3d	; 61
   1200c:	fe b7       	in	r31, 0x3e	; 62
   1200e:	81 83       	std	Z+1, r24	; 0x01
   12010:	92 83       	std	Z+2, r25	; 0x02
   12012:	a3 83       	std	Z+3, r26	; 0x03
   12014:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
        spoll = 0;
   12018:	10 92 eb 1e 	sts	0x1EEB, r1	; 0x801eeb <spoll>
   1201c:	a0 c0       	rjmp	.+320    	; 0x1215e <GPIB+0x174>
        return 0;
    }
///@brief Parallel Poll Unconfigure
///TODO
    if(ch == PPU)
   1201e:	85 31       	cpi	r24, 0x15	; 21
   12020:	39 f4       	brne	.+14     	; 0x12030 <GPIB+0x46>
    {
        if(debuglevel & (GPIB_ERR + GPIB_PPR + GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_TODO))
   12022:	27 71       	andi	r18, 0x17	; 23
   12024:	33 27       	eor	r19, r19
   12026:	23 2b       	or	r18, r19
   12028:	b9 f3       	breq	.-18     	; 0x12018 <GPIB+0x2e>
            printf("[PPU unsupported TODO]\n");
   1202a:	81 e8       	ldi	r24, 0x81	; 129
   1202c:	93 e1       	ldi	r25, 0x13	; 19
   1202e:	ec cf       	rjmp	.-40     	; 0x12008 <GPIB+0x1e>
    }

/// @todo FIXME
#if defined(SPOLL)
///@brief Serial Poll Enable
    if(ch == SPE)
   12030:	88 31       	cpi	r24, 0x18	; 24
   12032:	d9 f4       	brne	.+54     	; 0x1206a <GPIB+0x80>
    {
#if SDEBUG
        if(debuglevel & (GPIB_PPR + GPIB_BUS_OR_CMD_BYTE_MESSAGES))
   12034:	26 70       	andi	r18, 0x06	; 6
   12036:	33 27       	eor	r19, r19
   12038:	23 2b       	or	r18, r19
   1203a:	51 f0       	breq	.+20     	; 0x12050 <GPIB+0x66>
            printf("[SPE]\n");
   1203c:	8a e7       	ldi	r24, 0x7A	; 122
   1203e:	93 e1       	ldi	r25, 0x13	; 19
   12040:	a0 e0       	ldi	r26, 0x00	; 0
   12042:	ed b7       	in	r30, 0x3d	; 61
   12044:	fe b7       	in	r31, 0x3e	; 62
   12046:	81 83       	std	Z+1, r24	; 0x01
   12048:	92 83       	std	Z+2, r25	; 0x02
   1204a:	a3 83       	std	Z+3, r26	; 0x03
   1204c:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
#endif
        spoll = 1;
   12050:	81 e0       	ldi	r24, 0x01	; 1
   12052:	80 93 eb 1e 	sts	0x1EEB, r24	; 0x801eeb <spoll>
        if(SS80_is_MTA(talking))
   12056:	80 91 ee 1e 	lds	r24, 0x1EEE	; 0x801eee <talking>
   1205a:	90 e0       	ldi	r25, 0x00	; 0
   1205c:	69 dd       	rcall	.-1326   	; 0x11b30 <SS80_is_MTA>
   1205e:	89 2b       	or	r24, r25
   12060:	09 f4       	brne	.+2      	; 0x12064 <GPIB+0x7a>
   12062:	7d c0       	rjmp	.+250    	; 0x1215e <GPIB+0x174>
        {
            return( SS80_Report() );
   12064:	0e 94 6a ae 	call	0x15cd4	; 0x15cd4 <SS80_Report>
   12068:	7c c0       	rjmp	.+248    	; 0x12162 <GPIB+0x178>
        }
        return 0;
    }

///@brief Serial Poll Disable
    if(ch == SPD)
   1206a:	89 31       	cpi	r24, 0x19	; 25
   1206c:	39 f4       	brne	.+14     	; 0x1207c <GPIB+0x92>
    {
#if SDEBUG
        if(debuglevel & (GPIB_PPR + GPIB_BUS_OR_CMD_BYTE_MESSAGES))
   1206e:	26 70       	andi	r18, 0x06	; 6
   12070:	33 27       	eor	r19, r19
   12072:	23 2b       	or	r18, r19
   12074:	89 f2       	breq	.-94     	; 0x12018 <GPIB+0x2e>
            printf("[SPD]\n");
   12076:	83 e7       	ldi	r24, 0x73	; 115
   12078:	93 e1       	ldi	r25, 0x13	; 19
   1207a:	c6 cf       	rjmp	.-116    	; 0x12008 <GPIB+0x1e>
        return 0;
    }
#endif                                        // #if defined(SPOLL)

///@brief Selected Device Clear
    if(ch == SDC )
   1207c:	84 30       	cpi	r24, 0x04	; 4
   1207e:	09 f0       	breq	.+2      	; 0x12082 <GPIB+0x98>
   12080:	48 c0       	rjmp	.+144    	; 0x12112 <GPIB+0x128>
    {
#if SDEBUG
        if(debuglevel & GPIB_BUS_OR_CMD_BYTE_MESSAGES)
   12082:	22 ff       	sbrs	r18, 2
   12084:	0a c0       	rjmp	.+20     	; 0x1209a <GPIB+0xb0>
            printf("[SDC]\n");
   12086:	8c e6       	ldi	r24, 0x6C	; 108
   12088:	93 e1       	ldi	r25, 0x13	; 19
   1208a:	a0 e0       	ldi	r26, 0x00	; 0
   1208c:	ed b7       	in	r30, 0x3d	; 61
   1208e:	fe b7       	in	r31, 0x3e	; 62
   12090:	81 83       	std	Z+1, r24	; 0x01
   12092:	92 83       	std	Z+2, r25	; 0x02
   12094:	a3 83       	std	Z+3, r26	; 0x03
   12096:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
#endif
        if(SS80_is_MLA(listening))
   1209a:	80 91 f0 1e 	lds	r24, 0x1EF0	; 0x801ef0 <listening>
   1209e:	90 e0       	ldi	r25, 0x00	; 0
   120a0:	35 dd       	rcall	.-1430   	; 0x11b0c <SS80_is_MLA>
   120a2:	89 2b       	or	r24, r25
   120a4:	d9 f0       	breq	.+54     	; 0x120dc <GPIB+0xf2>
        {
///  Note: Suposed to be unsupported in SS80 - pg 4-2
///  CS80 3-4
#if SDEBUG
            if(debuglevel & (GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   120a6:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   120aa:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   120ae:	84 72       	andi	r24, 0x24	; 36
   120b0:	99 27       	eor	r25, r25
   120b2:	89 2b       	or	r24, r25
   120b4:	51 f0       	breq	.+20     	; 0x120ca <GPIB+0xe0>
                printf("[SDC SS80]\n");
   120b6:	80 e6       	ldi	r24, 0x60	; 96
   120b8:	93 e1       	ldi	r25, 0x13	; 19
   120ba:	a0 e0       	ldi	r26, 0x00	; 0
   120bc:	ed b7       	in	r30, 0x3d	; 61
   120be:	fe b7       	in	r31, 0x3e	; 62
   120c0:	81 83       	std	Z+1, r24	; 0x01
   120c2:	92 83       	std	Z+2, r25	; 0x02
   120c4:	a3 83       	std	Z+3, r26	; 0x03
   120c6:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
#endif
            return(SS80_Selected_Device_Clear(SS80s->unitNO) );
   120ca:	e0 91 66 19 	lds	r30, 0x1966	; 0x801966 <SS80s>
   120ce:	f0 91 67 19 	lds	r31, 0x1967	; 0x801967 <SS80s+0x1>
   120d2:	85 81       	ldd	r24, Z+5	; 0x05
   120d4:	90 e0       	ldi	r25, 0x00	; 0
   120d6:	0e 94 3c af 	call	0x15e78	; 0x15e78 <SS80_Selected_Device_Clear>
   120da:	43 c0       	rjmp	.+134    	; 0x12162 <GPIB+0x178>
        }

#ifdef AMIGO
        if(AMIGO_is_MLA(listening))
   120dc:	80 91 f0 1e 	lds	r24, 0x1EF0	; 0x801ef0 <listening>
   120e0:	90 e0       	ldi	r25, 0x00	; 0
   120e2:	4a dd       	rcall	.-1388   	; 0x11b78 <AMIGO_is_MLA>
   120e4:	89 2b       	or	r24, r25
   120e6:	d9 f1       	breq	.+118    	; 0x1215e <GPIB+0x174>
        {
///  Note: Suposed to be unsupported in SS80 - pg 4-2
#if SDEBUG
            if(debuglevel & (GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   120e8:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   120ec:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   120f0:	84 72       	andi	r24, 0x24	; 36
   120f2:	99 27       	eor	r25, r25
   120f4:	89 2b       	or	r24, r25
   120f6:	51 f0       	breq	.+20     	; 0x1210c <GPIB+0x122>
                printf("[SDC AMIGO]\n");
   120f8:	83 e5       	ldi	r24, 0x53	; 83
   120fa:	93 e1       	ldi	r25, 0x13	; 19
   120fc:	a0 e0       	ldi	r26, 0x00	; 0
   120fe:	ed b7       	in	r30, 0x3d	; 61
   12100:	fe b7       	in	r31, 0x3e	; 62
   12102:	81 83       	std	Z+1, r24	; 0x01
   12104:	92 83       	std	Z+2, r25	; 0x02
   12106:	a3 83       	std	Z+3, r26	; 0x03
   12108:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
#endif
            return( amigo_cmd_clear() );
   1210c:	0e 94 77 b9 	call	0x172ee	; 0x172ee <amigo_cmd_clear>
   12110:	28 c0       	rjmp	.+80     	; 0x12162 <GPIB+0x178>
/// @todo FIXME
        return( 0 );
    }

///@brief   (Universal) Device Clear
    if(ch == DCL )
   12112:	84 31       	cpi	r24, 0x14	; 20
   12114:	99 f4       	brne	.+38     	; 0x1213c <GPIB+0x152>
    {
#if SDEBUG
        if(debuglevel & GPIB_BUS_OR_CMD_BYTE_MESSAGES)
   12116:	22 ff       	sbrs	r18, 2
   12118:	0a c0       	rjmp	.+20     	; 0x1212e <GPIB+0x144>
            printf("[DCL]\n");
   1211a:	8c e4       	ldi	r24, 0x4C	; 76
   1211c:	93 e1       	ldi	r25, 0x13	; 19
   1211e:	a0 e0       	ldi	r26, 0x00	; 0
   12120:	ed b7       	in	r30, 0x3d	; 61
   12122:	fe b7       	in	r31, 0x3e	; 62
   12124:	81 83       	std	Z+1, r24	; 0x01
   12126:	92 83       	std	Z+2, r25	; 0x02
   12128:	a3 83       	std	Z+3, r26	; 0x03
   1212a:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
#endif
        SS80_Universal_Device_Clear();
   1212e:	0e 94 2e af 	call	0x15e5c	; 0x15e5c <SS80_Universal_Device_Clear>

#ifdef AMIGO
        amigo_cmd_clear();
   12132:	0e 94 77 b9 	call	0x172ee	; 0x172ee <amigo_cmd_clear>
#endif

/// @todo Fixme
        printer_close();
   12136:	0e 94 96 bf 	call	0x17f2c	; 0x17f2c <printer_close>
   1213a:	11 c0       	rjmp	.+34     	; 0x1215e <GPIB+0x174>
        return( 0 );
    }

    if(debuglevel & (GPIB_ERR + GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_TODO))
   1213c:	25 71       	andi	r18, 0x15	; 21
   1213e:	33 27       	eor	r19, r19
   12140:	23 2b       	or	r18, r19
   12142:	69 f0       	breq	.+26     	; 0x1215e <GPIB+0x174>
        printf("[GPIB (%02XH) not defined TODO]\n", 0xff & ch);
   12144:	90 e0       	ldi	r25, 0x00	; 0
   12146:	ed b7       	in	r30, 0x3d	; 61
   12148:	fe b7       	in	r31, 0x3e	; 62
   1214a:	95 83       	std	Z+5, r25	; 0x05
   1214c:	84 83       	std	Z+4, r24	; 0x04
   1214e:	8b e2       	ldi	r24, 0x2B	; 43
   12150:	93 e1       	ldi	r25, 0x13	; 19
   12152:	a0 e0       	ldi	r26, 0x00	; 0
   12154:	81 83       	std	Z+1, r24	; 0x01
   12156:	92 83       	std	Z+2, r25	; 0x02
   12158:	a3 83       	std	Z+3, r26	; 0x03
   1215a:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
    return(0);
   1215e:	80 e0       	ldi	r24, 0x00	; 0
   12160:	90 e0       	ldi	r25, 0x00	; 0
}
   12162:	0f 90       	pop	r0
   12164:	0f 90       	pop	r0
   12166:	0f 90       	pop	r0
   12168:	0f 90       	pop	r0
   1216a:	0f 90       	pop	r0
   1216c:	08 95       	ret

0001216e <GPIB_TALK>:
/// @param[in] ch 8 bit talk command
///
/// @return  0

int GPIB_TALK(uint8_t ch)
{
   1216e:	cf 93       	push	r28
   12170:	df 93       	push	r29
   12172:	00 d0       	rcall	.+0      	; 0x12174 <GPIB_TALK+0x6>
   12174:	00 d0       	rcall	.+0      	; 0x12176 <GPIB_TALK+0x8>
   12176:	1f 92       	push	r1

///  NOTE: we must track the "addressed state" of each device
///  so we can determine its state - ie: command vs Secondary states
///  save talking state
    talking_last = talking;
   12178:	90 91 ee 1e 	lds	r25, 0x1EEE	; 0x801eee <talking>
   1217c:	90 93 f1 1e 	sts	0x1EF1, r25	; 0x801ef1 <talking_last>
    talking = ch;
   12180:	80 93 ee 1e 	sts	0x1EEE, r24	; 0x801eee <talking>

    talk_cleanup();

///@brief  Universal Untalk
    if(ch == UNT)
   12184:	8f 35       	cpi	r24, 0x5F	; 95
   12186:	79 f4       	brne	.+30     	; 0x121a6 <GPIB_TALK+0x38>
    {
//FIXME talking = 0 ????
#if SDEBUG
        if(debuglevel & GPIB_BUS_OR_CMD_BYTE_MESSAGES)
   12188:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1218c:	82 ff       	sbrs	r24, 2
   1218e:	7f c0       	rjmp	.+254    	; 0x1228e <GPIB_TALK+0x120>
            printf("[UNT]\n");
   12190:	88 ed       	ldi	r24, 0xD8	; 216
   12192:	92 e1       	ldi	r25, 0x12	; 18
   12194:	a0 e0       	ldi	r26, 0x00	; 0
   12196:	ed b7       	in	r30, 0x3d	; 61
   12198:	fe b7       	in	r31, 0x3e	; 62
   1219a:	81 83       	std	Z+1, r24	; 0x01
   1219c:	92 83       	std	Z+2, r25	; 0x02
   1219e:	a3 83       	std	Z+3, r26	; 0x03
   121a0:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
   121a4:	74 c0       	rjmp	.+232    	; 0x1228e <GPIB_TALK+0x120>
#endif
        return(0);
    }

    if(SS80_is_MTA(ch))
   121a6:	c8 2f       	mov	r28, r24
   121a8:	d0 e0       	ldi	r29, 0x00	; 0
   121aa:	ce 01       	movw	r24, r28
   121ac:	c1 dc       	rcall	.-1662   	; 0x11b30 <SS80_is_MTA>
   121ae:	89 2b       	or	r24, r25
   121b0:	e1 f0       	breq	.+56     	; 0x121ea <GPIB_TALK+0x7c>
    {
#if SDEBUG
        if(debuglevel & (GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   121b2:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   121b6:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   121ba:	84 72       	andi	r24, 0x24	; 36
   121bc:	99 27       	eor	r25, r25
   121be:	89 2b       	or	r24, r25
   121c0:	61 f0       	breq	.+24     	; 0x121da <GPIB_TALK+0x6c>
            printf("[TA %02XH SS80]\n", 0xff & ch);
   121c2:	ed b7       	in	r30, 0x3d	; 61
   121c4:	fe b7       	in	r31, 0x3e	; 62
   121c6:	d5 83       	std	Z+5, r29	; 0x05
   121c8:	c4 83       	std	Z+4, r28	; 0x04
   121ca:	87 ec       	ldi	r24, 0xC7	; 199
   121cc:	92 e1       	ldi	r25, 0x12	; 18
   121ce:	a0 e0       	ldi	r26, 0x00	; 0
   121d0:	81 83       	std	Z+1, r24	; 0x01
   121d2:	92 83       	std	Z+2, r25	; 0x02
   121d4:	a3 83       	std	Z+3, r26	; 0x03
   121d6:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
#endif

        if (spoll)
   121da:	80 91 eb 1e 	lds	r24, 0x1EEB	; 0x801eeb <spoll>
   121de:	88 23       	and	r24, r24
   121e0:	09 f4       	brne	.+2      	; 0x121e4 <GPIB_TALK+0x76>
   121e2:	55 c0       	rjmp	.+170    	; 0x1228e <GPIB_TALK+0x120>
        {
            SS80_Report();
   121e4:	0e 94 6a ae 	call	0x15cd4	; 0x15cd4 <SS80_Report>
   121e8:	52 c0       	rjmp	.+164    	; 0x1228e <GPIB_TALK+0x120>
        }
        return(0);
    }

#ifdef AMIGO
    if(AMIGO_is_MTA(ch))
   121ea:	ce 01       	movw	r24, r28
   121ec:	d7 dc       	rcall	.-1618   	; 0x11b9c <AMIGO_is_MTA>
   121ee:	89 2b       	or	r24, r25
   121f0:	81 f0       	breq	.+32     	; 0x12212 <GPIB_TALK+0xa4>
    {
#if SDEBUG
        if(debuglevel & (GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   121f2:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   121f6:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   121fa:	84 72       	andi	r24, 0x24	; 36
   121fc:	99 27       	eor	r25, r25
   121fe:	89 2b       	or	r24, r25
   12200:	09 f4       	brne	.+2      	; 0x12204 <GPIB_TALK+0x96>
   12202:	45 c0       	rjmp	.+138    	; 0x1228e <GPIB_TALK+0x120>
            printf("[TA %02XH AMIGO]\n", 0xff & ch);
   12204:	ed b7       	in	r30, 0x3d	; 61
   12206:	fe b7       	in	r31, 0x3e	; 62
   12208:	d5 83       	std	Z+5, r29	; 0x05
   1220a:	c4 83       	std	Z+4, r28	; 0x04
   1220c:	85 eb       	ldi	r24, 0xB5	; 181
   1220e:	92 e1       	ldi	r25, 0x12	; 18
#endif
        return(0);
    }
#endif                                        // #ifdef AMIGO

    if(PRINTER_is_MTA(ch))
   12210:	38 c0       	rjmp	.+112    	; 0x12282 <GPIB_TALK+0x114>
   12212:	ce 01       	movw	r24, r28
   12214:	f9 dc       	rcall	.-1550   	; 0x11c08 <PRINTER_is_MTA>
   12216:	89 2b       	or	r24, r25
   12218:	79 f0       	breq	.+30     	; 0x12238 <GPIB_TALK+0xca>
    {
#if SDEBUG
        if(debuglevel & (GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   1221a:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1221e:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   12222:	84 72       	andi	r24, 0x24	; 36
   12224:	99 27       	eor	r25, r25
   12226:	89 2b       	or	r24, r25
   12228:	91 f1       	breq	.+100    	; 0x1228e <GPIB_TALK+0x120>
            printf("[TA %02XH PRINTER]\n", 0xff & ch);
   1222a:	ed b7       	in	r30, 0x3d	; 61
   1222c:	fe b7       	in	r31, 0x3e	; 62
   1222e:	d5 83       	std	Z+5, r29	; 0x05
   12230:	c4 83       	std	Z+4, r28	; 0x04
   12232:	81 ea       	ldi	r24, 0xA1	; 161
   12234:	92 e1       	ldi	r25, 0x12	; 18
   12236:	25 c0       	rjmp	.+74     	; 0x12282 <GPIB_TALK+0x114>
#endif
        return(0);
    }

    if(PRINTER_is_MLA(listening))
   12238:	80 91 f0 1e 	lds	r24, 0x1EF0	; 0x801ef0 <listening>
   1223c:	90 e0       	ldi	r25, 0x00	; 0
   1223e:	d2 dc       	rcall	.-1628   	; 0x11be4 <PRINTER_is_MLA>
   12240:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   12244:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   12248:	89 2b       	or	r24, r25
   1224a:	99 f0       	breq	.+38     	; 0x12272 <GPIB_TALK+0x104>
    {
        if(debuglevel & (GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   1224c:	24 72       	andi	r18, 0x24	; 36
   1224e:	33 27       	eor	r19, r19
   12250:	23 2b       	or	r18, r19
   12252:	51 f0       	breq	.+20     	; 0x12268 <GPIB_TALK+0xfa>
            printf("[PRINTER OPEN]\n");
   12254:	81 e9       	ldi	r24, 0x91	; 145
   12256:	92 e1       	ldi	r25, 0x12	; 18
   12258:	a0 e0       	ldi	r26, 0x00	; 0
   1225a:	ed b7       	in	r30, 0x3d	; 61
   1225c:	fe b7       	in	r31, 0x3e	; 62
   1225e:	81 83       	std	Z+1, r24	; 0x01
   12260:	92 83       	std	Z+2, r25	; 0x02
   12262:	a3 83       	std	Z+3, r26	; 0x03
   12264:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
        printer_open(NULL);
   12268:	80 e0       	ldi	r24, 0x00	; 0
   1226a:	90 e0       	ldi	r25, 0x00	; 0
   1226c:	0e 94 ee bf 	call	0x17fdc	; 0x17fdc <printer_open>
   12270:	0e c0       	rjmp	.+28     	; 0x1228e <GPIB_TALK+0x120>
        return(0);
    }

#if SDEBUG
    if(debuglevel & GPIB_BUS_OR_CMD_BYTE_MESSAGES)
   12272:	22 ff       	sbrs	r18, 2
   12274:	0c c0       	rjmp	.+24     	; 0x1228e <GPIB_TALK+0x120>
        printf("[TA %02XH]\n", 0xff & ch);
   12276:	ed b7       	in	r30, 0x3d	; 61
   12278:	fe b7       	in	r31, 0x3e	; 62
   1227a:	d5 83       	std	Z+5, r29	; 0x05
   1227c:	c4 83       	std	Z+4, r28	; 0x04
   1227e:	85 e8       	ldi	r24, 0x85	; 133
   12280:	92 e1       	ldi	r25, 0x12	; 18
   12282:	a0 e0       	ldi	r26, 0x00	; 0
   12284:	81 83       	std	Z+1, r24	; 0x01
   12286:	92 83       	std	Z+2, r25	; 0x02
   12288:	a3 83       	std	Z+3, r26	; 0x03
   1228a:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
#endif
    return(0);
}                                                 // Talk Address primary address group
   1228e:	80 e0       	ldi	r24, 0x00	; 0
   12290:	90 e0       	ldi	r25, 0x00	; 0
   12292:	cd b7       	in	r28, 0x3d	; 61
   12294:	de b7       	in	r29, 0x3e	; 62
   12296:	25 96       	adiw	r28, 0x05	; 5
   12298:	e2 e0       	ldi	r30, 0x02	; 2
   1229a:	0c 94 d0 e8 	jmp	0x1d1a0	; 0x1d1a0 <__epilogue_restores__+0x20>

0001229e <GPIB_SECONDARY_ADDRESS>:
///
/// @param[in] ch 8 bit secondary address.
///
/// @return  0
int GPIB_SECONDARY_ADDRESS(uint8_t ch)
{
   1229e:	a9 e0       	ldi	r26, 0x09	; 9
   122a0:	b0 e0       	ldi	r27, 0x00	; 0
   122a2:	e5 e5       	ldi	r30, 0x55	; 85
   122a4:	f1 e9       	ldi	r31, 0x91	; 145
   122a6:	0c 94 b3 e8 	jmp	0x1d166	; 0x1d166 <__prologue_saves__+0x1e>
   122aa:	18 2f       	mov	r17, r24
///  note: any errors will reset lastcmd
///  Universal Talk mode
///  Treat this as a Secondary Address ?
///  SS80 Ident 4-31
///  If we have our secondary address then send IDENT
    if(SS80_is_MSA(ch) )
   122ac:	c8 2f       	mov	r28, r24
   122ae:	d0 e0       	ldi	r29, 0x00	; 0
   122b0:	ce 01       	movw	r24, r28
   122b2:	50 dc       	rcall	.-1888   	; 0x11b54 <SS80_is_MSA>
   122b4:	89 2b       	or	r24, r25
   122b6:	09 f1       	breq	.+66     	; 0x122fa <GPIB_SECONDARY_ADDRESS+0x5c>
    {
#if SDEBUG
        if(debuglevel & (GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   122b8:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   122bc:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   122c0:	84 72       	andi	r24, 0x24	; 36
   122c2:	99 27       	eor	r25, r25
   122c4:	89 2b       	or	r24, r25
   122c6:	61 f0       	breq	.+24     	; 0x122e0 <GPIB_SECONDARY_ADDRESS+0x42>
            printf("[SA %02XH SS80]\n", 0xff & ch);
   122c8:	ed b7       	in	r30, 0x3d	; 61
   122ca:	fe b7       	in	r31, 0x3e	; 62
   122cc:	d5 83       	std	Z+5, r29	; 0x05
   122ce:	c4 83       	std	Z+4, r28	; 0x04
   122d0:	84 e7       	ldi	r24, 0x74	; 116
   122d2:	92 e1       	ldi	r25, 0x12	; 18
   122d4:	a0 e0       	ldi	r26, 0x00	; 0
   122d6:	81 83       	std	Z+1, r24	; 0x01
   122d8:	92 83       	std	Z+2, r25	; 0x02
   122da:	a3 83       	std	Z+3, r26	; 0x03
   122dc:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
#endif
///@brief ch = secondary address
        gpib_disable_PPR(SS80p->HEADER.PPR);
   122e0:	e0 91 68 19 	lds	r30, 0x1968	; 0x801968 <SS80p>
   122e4:	f0 91 69 19 	lds	r31, 0x1969	; 0x801969 <SS80p+0x1>
   122e8:	81 81       	ldd	r24, Z+1	; 0x01
   122ea:	90 e0       	ldi	r25, 0x00	; 0
   122ec:	0e 94 8c 87 	call	0x10f18	; 0x10f18 <gpib_disable_PPR>
        return(Send_Identify( ch, SS80p->CONFIG.ID) );
   122f0:	e0 91 68 19 	lds	r30, 0x1968	; 0x801968 <SS80p>
   122f4:	f0 91 69 19 	lds	r31, 0x1969	; 0x801969 <SS80p+0x1>
   122f8:	25 c0       	rjmp	.+74     	; 0x12344 <GPIB_SECONDARY_ADDRESS+0xa6>

    }

#ifdef AMIGO
    if(AMIGO_is_MSA(ch) )
   122fa:	ce 01       	movw	r24, r28
   122fc:	61 dc       	rcall	.-1854   	; 0x11bc0 <AMIGO_is_MSA>
   122fe:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   12302:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   12306:	89 2b       	or	r24, r25
   12308:	11 f1       	breq	.+68     	; 0x1234e <GPIB_SECONDARY_ADDRESS+0xb0>
    {
/// @todo
///     Two identify bytes should be repeated until untalked
#if SDEBUG
        if(debuglevel & (GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   1230a:	c9 01       	movw	r24, r18
   1230c:	84 72       	andi	r24, 0x24	; 36
   1230e:	99 27       	eor	r25, r25
   12310:	89 2b       	or	r24, r25
   12312:	61 f0       	breq	.+24     	; 0x1232c <GPIB_SECONDARY_ADDRESS+0x8e>
            printf("[SA %02XH AMIGO]\n", 0xff & ch);
   12314:	ed b7       	in	r30, 0x3d	; 61
   12316:	fe b7       	in	r31, 0x3e	; 62
   12318:	d5 83       	std	Z+5, r29	; 0x05
   1231a:	c4 83       	std	Z+4, r28	; 0x04
   1231c:	82 e6       	ldi	r24, 0x62	; 98
   1231e:	92 e1       	ldi	r25, 0x12	; 18
   12320:	a0 e0       	ldi	r26, 0x00	; 0
   12322:	81 83       	std	Z+1, r24	; 0x01
   12324:	92 83       	std	Z+2, r25	; 0x02
   12326:	a3 83       	std	Z+3, r26	; 0x03
   12328:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
#endif
///@brief ch = secondary address
        gpib_disable_PPR(AMIGOp->HEADER.PPR);
   1232c:	e0 91 64 19 	lds	r30, 0x1964	; 0x801964 <AMIGOp>
   12330:	f0 91 65 19 	lds	r31, 0x1965	; 0x801965 <AMIGOp+0x1>
   12334:	81 81       	ldd	r24, Z+1	; 0x01
   12336:	90 e0       	ldi	r25, 0x00	; 0
   12338:	0e 94 8c 87 	call	0x10f18	; 0x10f18 <gpib_disable_PPR>
        return( Send_Identify( ch, AMIGOp->CONFIG.ID) );
   1233c:	e0 91 64 19 	lds	r30, 0x1964	; 0x801964 <AMIGOp>
   12340:	f0 91 65 19 	lds	r31, 0x1965	; 0x801965 <AMIGOp+0x1>
   12344:	66 81       	ldd	r22, Z+6	; 0x06
   12346:	77 81       	ldd	r23, Z+7	; 0x07
   12348:	81 2f       	mov	r24, r17
   1234a:	ec dd       	rcall	.-1064   	; 0x11f24 <Send_Identify>
   1234c:	1d c0       	rjmp	.+58     	; 0x12388 <GPIB_SECONDARY_ADDRESS+0xea>
    }
#endif                                        // #ifdef AMIGO

#if SDEBUG
    if(debuglevel & (GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   1234e:	c9 01       	movw	r24, r18
   12350:	84 72       	andi	r24, 0x24	; 36
   12352:	99 27       	eor	r25, r25
   12354:	00 97       	sbiw	r24, 0x00	; 0
   12356:	c1 f0       	breq	.+48     	; 0x12388 <GPIB_SECONDARY_ADDRESS+0xea>
        printf("[SA %02XH, listen:%02XH, talk:%02XH]\n",
   12358:	80 91 ee 1e 	lds	r24, 0x1EEE	; 0x801eee <talking>
   1235c:	90 e0       	ldi	r25, 0x00	; 0
   1235e:	ed b7       	in	r30, 0x3d	; 61
   12360:	fe b7       	in	r31, 0x3e	; 62
   12362:	91 87       	std	Z+9, r25	; 0x09
   12364:	80 87       	std	Z+8, r24	; 0x08
   12366:	80 91 f0 1e 	lds	r24, 0x1EF0	; 0x801ef0 <listening>
   1236a:	90 e0       	ldi	r25, 0x00	; 0
   1236c:	97 83       	std	Z+7, r25	; 0x07
   1236e:	86 83       	std	Z+6, r24	; 0x06
   12370:	d5 83       	std	Z+5, r29	; 0x05
   12372:	c4 83       	std	Z+4, r28	; 0x04
   12374:	8c e3       	ldi	r24, 0x3C	; 60
   12376:	92 e1       	ldi	r25, 0x12	; 18
   12378:	a0 e0       	ldi	r26, 0x00	; 0
   1237a:	81 83       	std	Z+1, r24	; 0x01
   1237c:	92 83       	std	Z+2, r25	; 0x02
   1237e:	a3 83       	std	Z+3, r26	; 0x03
   12380:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
            0xff & ch, 0xff & listening, 0xff & talking);
#endif
    return(0);
   12384:	80 e0       	ldi	r24, 0x00	; 0
   12386:	90 e0       	ldi	r25, 0x00	; 0
}
   12388:	cd b7       	in	r28, 0x3d	; 61
   1238a:	de b7       	in	r29, 0x3e	; 62
   1238c:	29 96       	adiw	r28, 0x09	; 9
   1238e:	e3 e0       	ldi	r30, 0x03	; 3
   12390:	0c 94 cf e8 	jmp	0x1d19e	; 0x1d19e <__epilogue_restores__+0x1e>

00012394 <listen_cleanup>:
/// - Used to cleanup or close at the end of any listen address transition.
/// - Also called when GPIB bus reset or unlisten.
/// For now we just use this to close printer capture
/// @return  void
void listen_cleanup()
{
   12394:	00 d0       	rcall	.+0      	; 0x12396 <listen_cleanup+0x2>
   12396:	1f 92       	push	r1
    if(listening_last)
   12398:	60 91 ea 1e 	lds	r22, 0x1EEA	; 0x801eea <listening_last>
   1239c:	66 23       	and	r22, r22
   1239e:	e1 f0       	breq	.+56     	; 0x123d8 <listen_cleanup+0x44>
    {
        int index = find_device(PRINTER_TYPE, listening_last, BASE_MLA);
   123a0:	70 e0       	ldi	r23, 0x00	; 0
   123a2:	40 e2       	ldi	r20, 0x20	; 32
   123a4:	50 e0       	ldi	r21, 0x00	; 0
   123a6:	84 e0       	ldi	r24, 0x04	; 4
   123a8:	90 e0       	ldi	r25, 0x00	; 0
   123aa:	45 d6       	rcall	.+3210   	; 0x13036 <find_device>
        if(index == -1)
   123ac:	8f 3f       	cpi	r24, 0xFF	; 255
   123ae:	a1 f0       	breq	.+40     	; 0x123d8 <listen_cleanup+0x44>
            return;

//We should not set the active device globally
//FIXME if we have to then printer close should temprarily do so
        if(debuglevel & (GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   123b0:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   123b4:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   123b8:	84 72       	andi	r24, 0x24	; 36
   123ba:	99 27       	eor	r25, r25
   123bc:	89 2b       	or	r24, r25
   123be:	51 f0       	breq	.+20     	; 0x123d4 <listen_cleanup+0x40>
            printf("[PRINTER close]\n");
   123c0:	8b e2       	ldi	r24, 0x2B	; 43
   123c2:	92 e1       	ldi	r25, 0x12	; 18
   123c4:	a0 e0       	ldi	r26, 0x00	; 0
   123c6:	ed b7       	in	r30, 0x3d	; 61
   123c8:	fe b7       	in	r31, 0x3e	; 62
   123ca:	81 83       	std	Z+1, r24	; 0x01
   123cc:	92 83       	std	Z+2, r25	; 0x02
   123ce:	a3 83       	std	Z+3, r26	; 0x03
   123d0:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
        printer_close();
   123d4:	0e 94 96 bf 	call	0x17f2c	; 0x17f2c <printer_close>
    }
}
   123d8:	0f 90       	pop	r0
   123da:	0f 90       	pop	r0
   123dc:	0f 90       	pop	r0
   123de:	08 95       	ret

000123e0 <GPIB_LISTEN>:
/// @param[in] ch 8 bit listen command
///
/// @return  0

int GPIB_LISTEN(uint8_t ch)
{
   123e0:	cf 93       	push	r28
   123e2:	df 93       	push	r29
   123e4:	00 d0       	rcall	.+0      	; 0x123e6 <GPIB_LISTEN+0x6>
   123e6:	00 d0       	rcall	.+0      	; 0x123e8 <GPIB_LISTEN+0x8>
   123e8:	1f 92       	push	r1
   123ea:	c8 2f       	mov	r28, r24
    listening_last = listening;
   123ec:	80 91 f0 1e 	lds	r24, 0x1EF0	; 0x801ef0 <listening>
   123f0:	80 93 ea 1e 	sts	0x1EEA, r24	; 0x801eea <listening_last>
    listening = ch;
   123f4:	c0 93 f0 1e 	sts	0x1EF0, r28	; 0x801ef0 <listening>

    listen_cleanup();
   123f8:	cd df       	rcall	.-102    	; 0x12394 <listen_cleanup>

///  NOTE: we must track the "addressed state" of each device
///  so we can determine its state - ie: command vs Secondary states
///@brief  Universal Unlisten
    if(ch == UNL)
   123fa:	cf 33       	cpi	r28, 0x3F	; 63
   123fc:	19 f5       	brne	.+70     	; 0x12444 <GPIB_LISTEN+0x64>
    {
        listening = 0;
   123fe:	10 92 f0 1e 	sts	0x1EF0, r1	; 0x801ef0 <listening>

#if SDEBUG
        if(debuglevel & GPIB_BUS_OR_CMD_BYTE_MESSAGES)
   12402:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   12406:	82 ff       	sbrs	r24, 2
   12408:	74 c0       	rjmp	.+232    	; 0x124f2 <GPIB_LISTEN+0x112>
        {
            printf("[UNL]\n");
   1240a:	84 e2       	ldi	r24, 0x24	; 36
   1240c:	93 e1       	ldi	r25, 0x13	; 19
   1240e:	a0 e0       	ldi	r26, 0x00	; 0
   12410:	ed b7       	in	r30, 0x3d	; 61
   12412:	fe b7       	in	r31, 0x3e	; 62
   12414:	81 83       	std	Z+1, r24	; 0x01
   12416:	92 83       	std	Z+2, r25	; 0x02
   12418:	a3 83       	std	Z+3, r26	; 0x03
   1241a:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
///@brief add a line break if we both Untalk and Unlisten
            if(lastcmd == UNT)
   1241e:	80 91 e8 1c 	lds	r24, 0x1CE8	; 0x801ce8 <lastcmd>
   12422:	90 91 e9 1c 	lds	r25, 0x1CE9	; 0x801ce9 <lastcmd+0x1>
   12426:	8f 35       	cpi	r24, 0x5F	; 95
   12428:	91 05       	cpc	r25, r1
   1242a:	09 f0       	breq	.+2      	; 0x1242e <GPIB_LISTEN+0x4e>
   1242c:	62 c0       	rjmp	.+196    	; 0x124f2 <GPIB_LISTEN+0x112>
                printf("\n");
   1242e:	82 e2       	ldi	r24, 0x22	; 34
   12430:	93 e1       	ldi	r25, 0x13	; 19
   12432:	a0 e0       	ldi	r26, 0x00	; 0
   12434:	ed b7       	in	r30, 0x3d	; 61
   12436:	fe b7       	in	r31, 0x3e	; 62
   12438:	81 83       	std	Z+1, r24	; 0x01
   1243a:	92 83       	std	Z+2, r25	; 0x02
   1243c:	a3 83       	std	Z+3, r26	; 0x03
   1243e:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
   12442:	57 c0       	rjmp	.+174    	; 0x124f2 <GPIB_LISTEN+0x112>
#endif
        return(0);
    }

#ifdef AMIGO
    if(AMIGO_is_MLA(ch))
   12444:	d0 e0       	ldi	r29, 0x00	; 0
   12446:	ce 01       	movw	r24, r28
   12448:	97 db       	rcall	.-2258   	; 0x11b78 <AMIGO_is_MLA>
   1244a:	89 2b       	or	r24, r25
   1244c:	81 f0       	breq	.+32     	; 0x1246e <GPIB_LISTEN+0x8e>
    {
#if SDEBUG
        if(debuglevel & (GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   1244e:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   12452:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   12456:	84 72       	andi	r24, 0x24	; 36
   12458:	99 27       	eor	r25, r25
   1245a:	89 2b       	or	r24, r25
   1245c:	09 f4       	brne	.+2      	; 0x12460 <GPIB_LISTEN+0x80>
   1245e:	49 c0       	rjmp	.+146    	; 0x124f2 <GPIB_LISTEN+0x112>
            printf("[LA %02XH AMIGO]\n", 0xff & ch);
   12460:	ed b7       	in	r30, 0x3d	; 61
   12462:	fe b7       	in	r31, 0x3e	; 62
   12464:	d5 83       	std	Z+5, r29	; 0x05
   12466:	c4 83       	std	Z+4, r28	; 0x04
   12468:	80 e1       	ldi	r24, 0x10	; 16
   1246a:	93 e1       	ldi	r25, 0x13	; 19
#endif
        return(0);
    }
#endif                                        // #ifdef AMIGO

    if(SS80_is_MLA(ch))
   1246c:	3c c0       	rjmp	.+120    	; 0x124e6 <GPIB_LISTEN+0x106>
   1246e:	ce 01       	movw	r24, r28
   12470:	4d db       	rcall	.-2406   	; 0x11b0c <SS80_is_MLA>
   12472:	89 2b       	or	r24, r25
   12474:	79 f0       	breq	.+30     	; 0x12494 <GPIB_LISTEN+0xb4>
    {
#if SDEBUG
        if(debuglevel & (GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   12476:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1247a:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1247e:	84 72       	andi	r24, 0x24	; 36
   12480:	99 27       	eor	r25, r25
   12482:	89 2b       	or	r24, r25
   12484:	b1 f1       	breq	.+108    	; 0x124f2 <GPIB_LISTEN+0x112>
            printf("[LA %02XH SS80]\n", 0xff & ch);
   12486:	ed b7       	in	r30, 0x3d	; 61
   12488:	fe b7       	in	r31, 0x3e	; 62
   1248a:	d5 83       	std	Z+5, r29	; 0x05
   1248c:	c4 83       	std	Z+4, r28	; 0x04
   1248e:	8f ef       	ldi	r24, 0xFF	; 255
   12490:	92 e1       	ldi	r25, 0x12	; 18
#endif
        return(0);
    }

    if(PRINTER_is_MLA(ch))
   12492:	29 c0       	rjmp	.+82     	; 0x124e6 <GPIB_LISTEN+0x106>
   12494:	ce 01       	movw	r24, r28
   12496:	a6 db       	rcall	.-2228   	; 0x11be4 <PRINTER_is_MLA>
   12498:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   1249c:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   124a0:	89 2b       	or	r24, r25
   124a2:	c9 f0       	breq	.+50     	; 0x124d6 <GPIB_LISTEN+0xf6>
    {
#if SDEBUG
        if(debuglevel & (GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   124a4:	24 72       	andi	r18, 0x24	; 36
   124a6:	33 27       	eor	r19, r19
   124a8:	23 2b       	or	r18, r19
   124aa:	61 f0       	breq	.+24     	; 0x124c4 <GPIB_LISTEN+0xe4>
            printf("[LA %02XH PRINTER]\n", 0xff & ch);
   124ac:	ed b7       	in	r30, 0x3d	; 61
   124ae:	fe b7       	in	r31, 0x3e	; 62
   124b0:	d5 83       	std	Z+5, r29	; 0x05
   124b2:	c4 83       	std	Z+4, r28	; 0x04
   124b4:	8b ee       	ldi	r24, 0xEB	; 235
   124b6:	92 e1       	ldi	r25, 0x12	; 18
   124b8:	a0 e0       	ldi	r26, 0x00	; 0
   124ba:	81 83       	std	Z+1, r24	; 0x01
   124bc:	92 83       	std	Z+2, r25	; 0x02
   124be:	a3 83       	std	Z+3, r26	; 0x03
   124c0:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
#endif
        if(talking != UNT)
   124c4:	80 91 ee 1e 	lds	r24, 0x1EEE	; 0x801eee <talking>
   124c8:	8f 35       	cpi	r24, 0x5F	; 95
   124ca:	99 f0       	breq	.+38     	; 0x124f2 <GPIB_LISTEN+0x112>
        {
///@brief NULL creates a file named based on date and time
// FIXME use printer structure to permit multiple printers
            printer_open(NULL);
   124cc:	80 e0       	ldi	r24, 0x00	; 0
   124ce:	90 e0       	ldi	r25, 0x00	; 0
   124d0:	0e 94 ee bf 	call	0x17fdc	; 0x17fdc <printer_open>
   124d4:	0e c0       	rjmp	.+28     	; 0x124f2 <GPIB_LISTEN+0x112>
        }
        return(0);
    }
#if SDEBUG
    if(debuglevel & GPIB_BUS_OR_CMD_BYTE_MESSAGES)
   124d6:	22 ff       	sbrs	r18, 2
   124d8:	0c c0       	rjmp	.+24     	; 0x124f2 <GPIB_LISTEN+0x112>
        printf("[LA %02XH]\n", 0xff & ch);
   124da:	ed b7       	in	r30, 0x3d	; 61
   124dc:	fe b7       	in	r31, 0x3e	; 62
   124de:	d5 83       	std	Z+5, r29	; 0x05
   124e0:	c4 83       	std	Z+4, r28	; 0x04
   124e2:	8f ed       	ldi	r24, 0xDF	; 223
   124e4:	92 e1       	ldi	r25, 0x12	; 18
   124e6:	a0 e0       	ldi	r26, 0x00	; 0
   124e8:	81 83       	std	Z+1, r24	; 0x01
   124ea:	92 83       	std	Z+2, r25	; 0x02
   124ec:	a3 83       	std	Z+3, r26	; 0x03
   124ee:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
#endif
    return(0);
}                                                 // Listen Primary Address group
   124f2:	80 e0       	ldi	r24, 0x00	; 0
   124f4:	90 e0       	ldi	r25, 0x00	; 0
   124f6:	cd b7       	in	r28, 0x3d	; 61
   124f8:	de b7       	in	r29, 0x3e	; 62
   124fa:	25 96       	adiw	r28, 0x05	; 5
   124fc:	e2 e0       	ldi	r30, 0x02	; 2
   124fe:	0c 94 d0 e8 	jmp	0x1d1a0	; 0x1d1a0 <__epilogue_restores__+0x20>

00012502 <gpib_task>:
/// - Reads and processes GPIB control or data bytes
/// and calls emulator task.
/// @return  void

void gpib_task(void)
{
   12502:	cf 93       	push	r28
   12504:	df 93       	push	r29
    uint16_t val;
    uint8_t ch;
    uint16_t status;

    gpib_init_devices();                          // Init devices
   12506:	92 db       	rcall	.-2268   	; 0x11c2c <gpib_init_devices>
	// gpib_state_init() is now done in gpib_init_devices
    // gpib_state_init();                            // Init PPR talking and listening states

    gpib_log_fp = NULL;
   12508:	10 92 61 19 	sts	0x1961, r1	; 0x801961 <gpib_log_fp+0x1>
   1250c:	10 92 60 19 	sts	0x1960, r1	; 0x801960 <gpib_log_fp>

    while(1)
    {


        val = gpib_read_byte(NO_TRACE);
   12510:	80 e0       	ldi	r24, 0x00	; 0
   12512:	90 e0       	ldi	r25, 0x00	; 0
   12514:	4f d8       	rcall	.-3938   	; 0x115b4 <gpib_read_byte>
   12516:	ec 01       	movw	r28, r24

#if SDEBUG
        if(debuglevel & GPIB_TOP_LEVEL_BUS_DECODE)
   12518:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1251c:	83 ff       	sbrs	r24, 3
            gpib_decode(val);
   1251e:	02 c0       	rjmp	.+4      	; 0x12524 <gpib_task+0x22>
   12520:	ce 01       	movw	r24, r28
   12522:	4e d9       	rcall	.-3428   	; 0x117c0 <gpib_decode>
#endif
        status = gpib_error_test(val);
   12524:	ce 01       	movw	r24, r28
   12526:	1d dc       	rcall	.-1990   	; 0x11d62 <gpib_error_test>
        if(status & ABORT_FLAG)
        {
            return;
        }
        else if(status & MEDIA_FLAG)
   12528:	9c 01       	movw	r18, r24
   1252a:	23 70       	andi	r18, 0x03	; 3
   1252c:	33 27       	eor	r19, r19
   1252e:	23 2b       	or	r18, r19
   12530:	09 f0       	breq	.+2      	; 0x12534 <gpib_task+0x32>
   12532:	43 c0       	rjmp	.+134    	; 0x125ba <gpib_task+0xb8>
        {
            return;
        }
        else if(status)
   12534:	89 2b       	or	r24, r25
   12536:	61 f7       	brne	.-40     	; 0x12510 <gpib_task+0xe>
        {
            continue;
        }
///@brief GPIB commands with ATN set (COMMANDS)
        if(val & ATN_FLAG)
   12538:	d2 ff       	sbrs	r29, 2
   1253a:	26 c0       	rjmp	.+76     	; 0x12588 <gpib_task+0x86>
        {
            ch = val & CMD_MASK;
   1253c:	8c 2f       	mov	r24, r28
   1253e:	8f 77       	andi	r24, 0x7F	; 127
            if(ch <= 0x1f)
   12540:	80 32       	cpi	r24, 0x20	; 32
            {
                GPIB(ch);
   12542:	10 f4       	brcc	.+4      	; 0x12548 <gpib_task+0x46>
   12544:	52 dd       	rcall	.-1372   	; 0x11fea <GPIB>
                continue;
   12546:	e4 cf       	rjmp	.-56     	; 0x12510 <gpib_task+0xe>
            }
///@brief GPIB listen
            if(ch >= 0x20 && ch <= 0x3f)
   12548:	90 ee       	ldi	r25, 0xE0	; 224
   1254a:	98 0f       	add	r25, r24
   1254c:	90 32       	cpi	r25, 0x20	; 32
            {
                GPIB_LISTEN(ch);
   1254e:	10 f4       	brcc	.+4      	; 0x12554 <gpib_task+0x52>
   12550:	47 df       	rcall	.-370    	; 0x123e0 <GPIB_LISTEN>
                continue;
   12552:	de cf       	rjmp	.-68     	; 0x12510 <gpib_task+0xe>
            }
///@brief GPIB talk
            if(ch >= 0x40 && ch <= 0x5f)
   12554:	90 ec       	ldi	r25, 0xC0	; 192
   12556:	98 0f       	add	r25, r24
   12558:	90 32       	cpi	r25, 0x20	; 32
            {
                GPIB_TALK(ch);
   1255a:	10 f4       	brcc	.+4      	; 0x12560 <gpib_task+0x5e>
   1255c:	08 de       	rcall	.-1008   	; 0x1216e <GPIB_TALK>
                continue;
   1255e:	d8 cf       	rjmp	.-80     	; 0x12510 <gpib_task+0xe>
            }

///@brief GPIB secondary
/// Note: We know ch >= 0x60 && ch <= 0x7f because of previous tests

            if( listening && lastcmd == UNT)
   12560:	90 91 f0 1e 	lds	r25, 0x1EF0	; 0x801ef0 <listening>
   12564:	99 23       	and	r25, r25
   12566:	59 f0       	breq	.+22     	; 0x1257e <gpib_task+0x7c>
   12568:	20 91 e8 1c 	lds	r18, 0x1CE8	; 0x801ce8 <lastcmd>
   1256c:	30 91 e9 1c 	lds	r19, 0x1CE9	; 0x801ce9 <lastcmd+0x1>
   12570:	2f 35       	cpi	r18, 0x5F	; 95
   12572:	31 05       	cpc	r19, r1
            {
                secondary = 0;
   12574:	21 f4       	brne	.+8      	; 0x1257e <gpib_task+0x7c>
   12576:	10 92 ef 1e 	sts	0x1EEF, r1	; 0x801eef <secondary>
                GPIB_SECONDARY_ADDRESS(ch);
   1257a:	91 de       	rcall	.-734    	; 0x1229e <GPIB_SECONDARY_ADDRESS>
                continue;
   1257c:	c9 cf       	rjmp	.-110    	; 0x12510 <gpib_task+0xe>
            }

///@brief We have to keep track of secondary address that may happen out of order with older AMIGO protocol
/// this method works for SS80 as well
            secondary = ch;
   1257e:	80 93 ef 1e 	sts	0x1EEF, r24	; 0x801eef <secondary>
///@brief GPIB_COMMANDS does most of the work
            status = GPIB_COMMANDS(secondary,0);
   12582:	60 e0       	ldi	r22, 0x00	; 0
   12584:	90 e0       	ldi	r25, 0x00	; 0
        }                                         // GPIB ATN

///@brief GPIB commands without ATN set (DATA)
        else                                      // GPIB Data
        {
            if ( PRINTER_is_MLA(listening) )
   12586:	12 c0       	rjmp	.+36     	; 0x125ac <gpib_task+0xaa>
   12588:	80 91 f0 1e 	lds	r24, 0x1EF0	; 0x801ef0 <listening>
   1258c:	90 e0       	ldi	r25, 0x00	; 0
   1258e:	2a db       	rcall	.-2476   	; 0x11be4 <PRINTER_is_MLA>
   12590:	89 2b       	or	r24, r25
   12592:	29 f0       	breq	.+10     	; 0x1259e <gpib_task+0x9c>
            {
                printer_buffer( 0xff & val );
   12594:	ce 01       	movw	r24, r28
   12596:	99 27       	eor	r25, r25
   12598:	0e 94 91 c0 	call	0x18122	; 0x18122 <printer_buffer>
                continue;
   1259c:	b9 cf       	rjmp	.-142    	; 0x12510 <gpib_task+0xe>
            }

            if(!secondary)
   1259e:	80 91 ef 1e 	lds	r24, 0x1EEF	; 0x801eef <secondary>
   125a2:	88 23       	and	r24, r24
                continue;

// ONLY secondar commands at this point
///@brief GPIB_COMMANDS does most of the work
            status = GPIB_COMMANDS(val,1);
   125a4:	09 f4       	brne	.+2      	; 0x125a8 <gpib_task+0xa6>
   125a6:	b4 cf       	rjmp	.-152    	; 0x12510 <gpib_task+0xe>
   125a8:	61 e0       	ldi	r22, 0x01	; 1
   125aa:	ce 01       	movw	r24, r28
            status = gpib_error_test(status);
   125ac:	67 dc       	rcall	.-1842   	; 0x11e7c <GPIB_COMMANDS>
   125ae:	d9 db       	rcall	.-2126   	; 0x11d62 <gpib_error_test>

            if(status & ( ABORT_FLAG | MEDIA_FLAG ))
   125b0:	83 70       	andi	r24, 0x03	; 3
   125b2:	99 27       	eor	r25, r25
   125b4:	89 2b       	or	r24, r25
   125b6:	09 f4       	brne	.+2      	; 0x125ba <gpib_task+0xb8>
   125b8:	ab cf       	rjmp	.-170    	; 0x12510 <gpib_task+0xe>
            }
            continue;
        }
    }                                             // while(1)
    return;
}
   125ba:	df 91       	pop	r29
   125bc:	cf 91       	pop	r28
   125be:	08 95       	ret

000125c0 <talk_cleanup>:
/// - Not used in this emulator.
///
/// @return  void

void talk_cleanup()
{
   125c0:	08 95       	ret

000125c2 <gpib_help>:
/// @brief
///  Help Menu for User invoked GPIB functions and tasks
///  See: int gpib_tests(char *str)
/// @return  void
void gpib_help(int full)
{
   125c2:	cf 93       	push	r28
   125c4:	df 93       	push	r29
   125c6:	00 d0       	rcall	.+0      	; 0x125c8 <gpib_help+0x6>
   125c8:	1f 92       	push	r1
   125ca:	ec 01       	movw	r28, r24
    printf("gpib      help\n");
   125cc:	8d ee       	ldi	r24, 0xED	; 237
   125ce:	95 e1       	ldi	r25, 0x15	; 21
   125d0:	a0 e0       	ldi	r26, 0x00	; 0
   125d2:	ed b7       	in	r30, 0x3d	; 61
   125d4:	fe b7       	in	r31, 0x3e	; 62
   125d6:	81 83       	std	Z+1, r24	; 0x01
   125d8:	92 83       	std	Z+2, r25	; 0x02
   125da:	a3 83       	std	Z+3, r26	; 0x03
   125dc:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
    if(full)
   125e0:	cd 2b       	or	r28, r29
   125e2:	51 f0       	breq	.+20     	; 0x125f8 <gpib_help+0x36>
    {
        printf("Note: gpib prefix is optional\n"
   125e4:	8c ee       	ldi	r24, 0xEC	; 236
   125e6:	94 e1       	ldi	r25, 0x14	; 20
   125e8:	a0 e0       	ldi	r26, 0x00	; 0
   125ea:	ed b7       	in	r30, 0x3d	; 61
   125ec:	fe b7       	in	r31, 0x3e	; 62
   125ee:	81 83       	std	Z+1, r24	; 0x01
   125f0:	92 83       	std	Z+2, r25	; 0x02
   125f2:	a3 83       	std	Z+3, r26	; 0x03
   125f4:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
            "gpib ppr_set XX\n"
            "\n"
#endif
            );
	}
}
   125f8:	cd b7       	in	r28, 0x3d	; 61
   125fa:	de b7       	in	r29, 0x3e	; 62
   125fc:	23 96       	adiw	r28, 0x03	; 3
   125fe:	e2 e0       	ldi	r30, 0x02	; 2
   12600:	0c 94 d0 e8 	jmp	0x1d1a0	; 0x1d1a0 <__epilogue_restores__+0x20>

00012604 <gpib_tests>:

/// @brief GPIB user tests
///  User invoked GPIB functions and tasks
/// @return  1 matched token, 0 if not
int gpib_tests(int argc, char * argv[])
{
   12604:	a5 e0       	ldi	r26, 0x05	; 5
   12606:	b0 e0       	ldi	r27, 0x00	; 0
   12608:	e8 e0       	ldi	r30, 0x08	; 8
   1260a:	f3 e9       	ldi	r31, 0x93	; 147
   1260c:	0c 94 ae e8 	jmp	0x1d15c	; 0x1d15c <__prologue_saves__+0x14>

    char *ptr;
    int ind;

    ind = 0;
    ptr = argv[ind++];
   12610:	fb 01       	movw	r30, r22
   12612:	00 81       	ld	r16, Z
   12614:	11 81       	ldd	r17, Z+1	; 0x01

    if(!ptr)
   12616:	01 15       	cp	r16, r1
   12618:	11 05       	cpc	r17, r1
   1261a:	19 f4       	brne	.+6      	; 0x12622 <gpib_tests+0x1e>
        return(0);
   1261c:	80 e0       	ldi	r24, 0x00	; 0
   1261e:	90 e0       	ldi	r25, 0x00	; 0
   12620:	8f c0       	rjmp	.+286    	; 0x12740 <gpib_tests+0x13c>
   12622:	7b 01       	movw	r14, r22
   12624:	6c 01       	movw	r12, r24

    if( MATCH(ptr,"gpib") )
   12626:	64 e9       	ldi	r22, 0x94	; 148
   12628:	7d e0       	ldi	r23, 0x0D	; 13
   1262a:	c8 01       	movw	r24, r16
   1262c:	0e 94 35 33 	call	0x666a	; 0x666a <MATCH>
   12630:	89 2b       	or	r24, r25
   12632:	a1 f0       	breq	.+40     	; 0x1265c <gpib_tests+0x58>
    {
        ptr = argv[ind++];
   12634:	f7 01       	movw	r30, r14
   12636:	02 81       	ldd	r16, Z+2	; 0x02
   12638:	13 81       	ldd	r17, Z+3	; 0x03
        if ( !ptr || MATCH(ptr,"help") )
   1263a:	01 15       	cp	r16, r1
   1263c:	11 05       	cpc	r17, r1
   1263e:	21 f4       	brne	.+8      	; 0x12648 <gpib_tests+0x44>
        {
            gpib_help(1);
   12640:	81 e0       	ldi	r24, 0x01	; 1
   12642:	90 e0       	ldi	r25, 0x00	; 0
   12644:	be df       	rcall	.-132    	; 0x125c2 <gpib_help>
   12646:	7a c0       	rjmp	.+244    	; 0x1273c <gpib_tests+0x138>
        return(0);

    if( MATCH(ptr,"gpib") )
    {
        ptr = argv[ind++];
        if ( !ptr || MATCH(ptr,"help") )
   12648:	62 e6       	ldi	r22, 0x62	; 98
   1264a:	76 e1       	ldi	r23, 0x16	; 22
   1264c:	c8 01       	movw	r24, r16
   1264e:	0e 94 35 33 	call	0x666a	; 0x666a <MATCH>
   12652:	89 2b       	or	r24, r25
   12654:	a9 f7       	brne	.-22     	; 0x12640 <gpib_tests+0x3c>
    if(!ptr)
        return(0);

    if( MATCH(ptr,"gpib") )
    {
        ptr = argv[ind++];
   12656:	c2 e0       	ldi	r28, 0x02	; 2
   12658:	d0 e0       	ldi	r29, 0x00	; 0
   1265a:	02 c0       	rjmp	.+4      	; 0x12660 <gpib_tests+0x5c>

    char *ptr;
    int ind;

    ind = 0;
    ptr = argv[ind++];
   1265c:	c1 e0       	ldi	r28, 0x01	; 1
   1265e:	d0 e0       	ldi	r29, 0x00	; 0
            gpib_help(1);
            return(1);
        }
    }

    if (MATCHI(ptr,"debug") )
   12660:	69 e9       	ldi	r22, 0x99	; 153
   12662:	7d e0       	ldi	r23, 0x0D	; 13
   12664:	c8 01       	movw	r24, r16
   12666:	0e 94 49 33 	call	0x6692	; 0x6692 <MATCHI>
   1266a:	89 2b       	or	r24, r25
   1266c:	29 f1       	breq	.+74     	; 0x126b8 <gpib_tests+0xb4>
    {
        ptr = argv[ind];
   1266e:	fe 01       	movw	r30, r28
   12670:	ee 0f       	add	r30, r30
   12672:	ff 1f       	adc	r31, r31
   12674:	ee 0d       	add	r30, r14
   12676:	ff 1d       	adc	r31, r15
        if(*ptr == '=')
   12678:	01 90       	ld	r0, Z+
   1267a:	f0 81       	ld	r31, Z
   1267c:	e0 2d       	mov	r30, r0
   1267e:	80 81       	ld	r24, Z
   12680:	8d 33       	cpi	r24, 0x3D	; 61
   12682:	09 f4       	brne	.+2      	; 0x12686 <gpib_tests+0x82>
            ++ind;
   12684:	21 96       	adiw	r28, 0x01	; 1
        debuglevel = get_value(argv[ind]);
   12686:	cc 0f       	add	r28, r28
   12688:	dd 1f       	adc	r29, r29
   1268a:	ce 0d       	add	r28, r14
   1268c:	df 1d       	adc	r29, r15
   1268e:	88 81       	ld	r24, Y
   12690:	99 81       	ldd	r25, Y+1	; 0x01
   12692:	0e 94 40 34 	call	0x6880	; 0x6880 <get_value>
   12696:	70 93 b7 01 	sts	0x01B7, r23	; 0x8001b7 <debuglevel+0x1>
   1269a:	60 93 b6 01 	sts	0x01B6, r22	; 0x8001b6 <debuglevel>
        printf("debug=%04XH\n", debuglevel);
   1269e:	ed b7       	in	r30, 0x3d	; 61
   126a0:	fe b7       	in	r31, 0x3e	; 62
   126a2:	75 83       	std	Z+5, r23	; 0x05
   126a4:	64 83       	std	Z+4, r22	; 0x04
   126a6:	8f ed       	ldi	r24, 0xDF	; 223
   126a8:	94 e1       	ldi	r25, 0x14	; 20
   126aa:	a0 e0       	ldi	r26, 0x00	; 0
   126ac:	81 83       	std	Z+1, r24	; 0x01
   126ae:	92 83       	std	Z+2, r25	; 0x02
   126b0:	a3 83       	std	Z+3, r26	; 0x03
   126b2:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
   126b6:	42 c0       	rjmp	.+132    	; 0x1273c <gpib_tests+0x138>
        return(1);
    }

    if (MATCHI(ptr,"elapsed_reset") )
   126b8:	6f e9       	ldi	r22, 0x9F	; 159
   126ba:	7d e0       	ldi	r23, 0x0D	; 13
   126bc:	c8 01       	movw	r24, r16
   126be:	0e 94 49 33 	call	0x6692	; 0x6692 <MATCHI>
   126c2:	89 2b       	or	r24, r25
   126c4:	19 f0       	breq	.+6      	; 0x126cc <gpib_tests+0xc8>
    {
        gpib_timer_elapsed_begin();
   126c6:	0e 94 7c 86 	call	0x10cf8	; 0x10cf8 <gpib_timer_elapsed_begin>
   126ca:	38 c0       	rjmp	.+112    	; 0x1273c <gpib_tests+0x138>
        return(1);
    }

    if (MATCHI(ptr,"elapsed") )
   126cc:	6d ea       	ldi	r22, 0xAD	; 173
   126ce:	7d e0       	ldi	r23, 0x0D	; 13
   126d0:	c8 01       	movw	r24, r16
   126d2:	0e 94 49 33 	call	0x6692	; 0x6692 <MATCHI>
   126d6:	89 2b       	or	r24, r25
   126d8:	29 f0       	breq	.+10     	; 0x126e4 <gpib_tests+0xe0>
    {
        gpib_timer_elapsed_end("gpib elapsed:");
   126da:	85 eb       	ldi	r24, 0xB5	; 181
   126dc:	9d e0       	ldi	r25, 0x0D	; 13
   126de:	0e 94 8e 86 	call	0x10d1c	; 0x10d1c <gpib_timer_elapsed_end>
   126e2:	2c c0       	rjmp	.+88     	; 0x1273c <gpib_tests+0x138>
        return(1);
    }

    if (MATCHI(ptr,"task") )
   126e4:	63 ec       	ldi	r22, 0xC3	; 195
   126e6:	7d e0       	ldi	r23, 0x0D	; 13
   126e8:	c8 01       	movw	r24, r16
   126ea:	0e 94 49 33 	call	0x6692	; 0x6692 <MATCHI>
   126ee:	89 2b       	or	r24, r25
    {
        gpib_task();
   126f0:	11 f0       	breq	.+4      	; 0x126f6 <gpib_tests+0xf2>
   126f2:	07 df       	rcall	.-498    	; 0x12502 <gpib_task>
   126f4:	23 c0       	rjmp	.+70     	; 0x1273c <gpib_tests+0x138>
        return(1);
    }

    if (MATCHARGS(ptr,"trace", (ind+1) ,argc))
   126f6:	21 96       	adiw	r28, 0x01	; 1
   126f8:	96 01       	movw	r18, r12
   126fa:	ae 01       	movw	r20, r28
   126fc:	68 ec       	ldi	r22, 0xC8	; 200
   126fe:	7d e0       	ldi	r23, 0x0D	; 13
   12700:	c8 01       	movw	r24, r16
   12702:	0e 94 5d 33 	call	0x66ba	; 0x66ba <MATCHARGS>
   12706:	89 2b       	or	r24, r25
   12708:	09 f4       	brne	.+2      	; 0x1270c <gpib_tests+0x108>
   1270a:	88 cf       	rjmp	.-240    	; 0x1261c <gpib_tests+0x18>
    {
        int detail = 0;
        if(argv[ind+1] && MATCH(argv[ind+1],"BUS"))
   1270c:	cc 0f       	add	r28, r28
   1270e:	dd 1f       	adc	r29, r29
   12710:	ce 0d       	add	r28, r14
   12712:	df 1d       	adc	r29, r15
   12714:	88 81       	ld	r24, Y
   12716:	99 81       	ldd	r25, Y+1	; 0x01
   12718:	00 97       	sbiw	r24, 0x00	; 0
   1271a:	51 f0       	breq	.+20     	; 0x12730 <gpib_tests+0x12c>
   1271c:	6e ec       	ldi	r22, 0xCE	; 206
   1271e:	7d e0       	ldi	r23, 0x0D	; 13
   12720:	0e 94 35 33 	call	0x666a	; 0x666a <MATCH>
        return(1);
    }

    if (MATCHARGS(ptr,"trace", (ind+1) ,argc))
    {
        int detail = 0;
   12724:	61 e0       	ldi	r22, 0x01	; 1
   12726:	70 e0       	ldi	r23, 0x00	; 0
   12728:	89 2b       	or	r24, r25
   1272a:	21 f4       	brne	.+8      	; 0x12734 <gpib_tests+0x130>
   1272c:	60 e0       	ldi	r22, 0x00	; 0
   1272e:	02 c0       	rjmp	.+4      	; 0x12734 <gpib_tests+0x130>
   12730:	60 e0       	ldi	r22, 0x00	; 0
   12732:	70 e0       	ldi	r23, 0x00	; 0
        if(argv[ind+1] && MATCH(argv[ind+1],"BUS"))
            detail = 1;
        gpib_trace_task(argv[ind], detail);
   12734:	22 97       	sbiw	r28, 0x02	; 2
   12736:	88 81       	ld	r24, Y
   12738:	99 81       	ldd	r25, Y+1	; 0x01
   1273a:	81 da       	rcall	.-2814   	; 0x11c3e <gpib_trace_task>
        return(1);
   1273c:	81 e0       	ldi	r24, 0x01	; 1
   1273e:	90 e0       	ldi	r25, 0x00	; 0
        return(1);
    }
#endif                                        // #ifdef GPIB_EXTENDED_TESTS

    return(0);
}
   12740:	cd b7       	in	r28, 0x3d	; 61
   12742:	de b7       	in	r29, 0x3e	; 62
   12744:	25 96       	adiw	r28, 0x05	; 5
   12746:	e8 e0       	ldi	r30, 0x08	; 8
   12748:	0c 94 ca e8 	jmp	0x1d194	; 0x1d194 <__epilogue_restores__+0x14>

0001274c <tok_index>:

	if(index_ppr(ppr) == -1)
		return(1);
	printf("WARNING PPR (%d) already in use\n", (int)ppr);
	return(0);
}
   1274c:	0f 93       	push	r16
   1274e:	1f 93       	push	r17
   12750:	cf 93       	push	r28
   12752:	8c 01       	movw	r16, r24
   12754:	c0 e0       	ldi	r28, 0x00	; 0
   12756:	24 e0       	ldi	r18, 0x04	; 4
   12758:	c2 02       	muls	r28, r18
   1275a:	f0 01       	movw	r30, r0
   1275c:	11 24       	eor	r1, r1
   1275e:	ec 53       	subi	r30, 0x3C	; 60
   12760:	fe 4f       	sbci	r31, 0xFE	; 254
   12762:	82 81       	ldd	r24, Z+2	; 0x02
   12764:	93 81       	ldd	r25, Z+3	; 0x03
   12766:	01 96       	adiw	r24, 0x01	; 1
   12768:	49 f0       	breq	.+18     	; 0x1277c <tok_index+0x30>
   1276a:	60 81       	ld	r22, Z
   1276c:	71 81       	ldd	r23, Z+1	; 0x01
   1276e:	c8 01       	movw	r24, r16
   12770:	0e 94 49 33 	call	0x6692	; 0x6692 <MATCHI>
   12774:	89 2b       	or	r24, r25
   12776:	21 f4       	brne	.+8      	; 0x12780 <tok_index+0x34>
   12778:	cf 5f       	subi	r28, 0xFF	; 255
   1277a:	ed cf       	rjmp	.-38     	; 0x12756 <tok_index+0xa>
   1277c:	8f ef       	ldi	r24, 0xFF	; 255
   1277e:	01 c0       	rjmp	.+2      	; 0x12782 <tok_index+0x36>
   12780:	8c 2f       	mov	r24, r28
   12782:	cf 91       	pop	r28
   12784:	1f 91       	pop	r17
   12786:	0f 91       	pop	r16
   12788:	08 95       	ret

0001278a <tok_name>:
   1278a:	e4 ec       	ldi	r30, 0xC4	; 196
   1278c:	f1 e0       	ldi	r31, 0x01	; 1
   1278e:	20 e0       	ldi	r18, 0x00	; 0
   12790:	30 e0       	ldi	r19, 0x00	; 0
   12792:	90 e0       	ldi	r25, 0x00	; 0
   12794:	42 81       	ldd	r20, Z+2	; 0x02
   12796:	53 81       	ldd	r21, Z+3	; 0x03
   12798:	4f 3f       	cpi	r20, 0xFF	; 255
   1279a:	6f ef       	ldi	r22, 0xFF	; 255
   1279c:	56 07       	cpc	r21, r22
   1279e:	89 f0       	breq	.+34     	; 0x127c2 <tok_name+0x38>
   127a0:	34 96       	adiw	r30, 0x04	; 4
   127a2:	48 17       	cp	r20, r24
   127a4:	59 07       	cpc	r21, r25
   127a6:	51 f4       	brne	.+20     	; 0x127bc <tok_name+0x32>
   127a8:	22 0f       	add	r18, r18
   127aa:	33 1f       	adc	r19, r19
   127ac:	22 0f       	add	r18, r18
   127ae:	33 1f       	adc	r19, r19
   127b0:	f9 01       	movw	r30, r18
   127b2:	ec 53       	subi	r30, 0x3C	; 60
   127b4:	fe 4f       	sbci	r31, 0xFE	; 254
   127b6:	80 81       	ld	r24, Z
   127b8:	91 81       	ldd	r25, Z+1	; 0x01
   127ba:	08 95       	ret
   127bc:	2f 5f       	subi	r18, 0xFF	; 255
   127be:	3f 4f       	sbci	r19, 0xFF	; 255
   127c0:	e9 cf       	rjmp	.-46     	; 0x12794 <tok_name+0xa>
   127c2:	8e e0       	ldi	r24, 0x0E	; 14
   127c4:	9c e0       	ldi	r25, 0x0C	; 12
   127c6:	08 95       	ret

000127c8 <print_tok_val>:
   127c8:	cf 92       	push	r12
   127ca:	df 92       	push	r13
   127cc:	ef 92       	push	r14
   127ce:	ff 92       	push	r15
   127d0:	0f 93       	push	r16
   127d2:	1f 93       	push	r17
   127d4:	cf 93       	push	r28
   127d6:	ad b7       	in	r26, 0x3d	; 61
   127d8:	be b7       	in	r27, 0x3e	; 62
   127da:	1d 97       	sbiw	r26, 0x0d	; 13
   127dc:	0f b6       	in	r0, 0x3f	; 63
   127de:	f8 94       	cli
   127e0:	be bf       	out	0x3e, r27	; 62
   127e2:	0f be       	out	0x3f, r0	; 63
   127e4:	ad bf       	out	0x3d, r26	; 61
   127e6:	c6 2f       	mov	r28, r22
   127e8:	69 01       	movw	r12, r18
   127ea:	7a 01       	movw	r14, r20
   127ec:	ce df       	rcall	.-100    	; 0x1278a <tok_name>
   127ee:	8c 01       	movw	r16, r24
   127f0:	cc 23       	and	r28, r28
   127f2:	31 f0       	breq	.+12     	; 0x12800 <print_tok_val+0x38>
   127f4:	80 e2       	ldi	r24, 0x20	; 32
   127f6:	90 e0       	ldi	r25, 0x00	; 0
   127f8:	0e 94 66 77 	call	0xeecc	; 0xeecc <putchar>
   127fc:	c1 50       	subi	r28, 0x01	; 1
   127fe:	f8 cf       	rjmp	.-16     	; 0x127f0 <print_tok_val+0x28>
   12800:	ed b7       	in	r30, 0x3d	; 61
   12802:	fe b7       	in	r31, 0x3e	; 62
   12804:	c2 86       	std	Z+10, r12	; 0x0a
   12806:	d3 86       	std	Z+11, r13	; 0x0b
   12808:	e4 86       	std	Z+12, r14	; 0x0c
   1280a:	f5 86       	std	Z+13, r15	; 0x0d
   1280c:	c6 82       	std	Z+6, r12	; 0x06
   1280e:	d7 82       	std	Z+7, r13	; 0x07
   12810:	e0 86       	std	Z+8, r14	; 0x08
   12812:	f1 86       	std	Z+9, r15	; 0x09
   12814:	15 83       	std	Z+5, r17	; 0x05
   12816:	04 83       	std	Z+4, r16	; 0x04
   12818:	80 e6       	ldi	r24, 0x60	; 96
   1281a:	90 e2       	ldi	r25, 0x20	; 32
   1281c:	a0 e0       	ldi	r26, 0x00	; 0
   1281e:	81 83       	std	Z+1, r24	; 0x01
   12820:	92 83       	std	Z+2, r25	; 0x02
   12822:	a3 83       	std	Z+3, r26	; 0x03
   12824:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
   12828:	ad b7       	in	r26, 0x3d	; 61
   1282a:	be b7       	in	r27, 0x3e	; 62
   1282c:	1d 96       	adiw	r26, 0x0d	; 13
   1282e:	0f b6       	in	r0, 0x3f	; 63
   12830:	f8 94       	cli
   12832:	be bf       	out	0x3e, r27	; 62
   12834:	0f be       	out	0x3f, r0	; 63
   12836:	ad bf       	out	0x3d, r26	; 61
   12838:	cf 91       	pop	r28
   1283a:	1f 91       	pop	r17
   1283c:	0f 91       	pop	r16
   1283e:	ff 90       	pop	r15
   12840:	ef 90       	pop	r14
   12842:	df 90       	pop	r13
   12844:	cf 90       	pop	r12
   12846:	08 95       	ret

00012848 <print_tok_str>:
   12848:	ef 92       	push	r14
   1284a:	ff 92       	push	r15
   1284c:	0f 93       	push	r16
   1284e:	1f 93       	push	r17
   12850:	cf 93       	push	r28
   12852:	ad b7       	in	r26, 0x3d	; 61
   12854:	be b7       	in	r27, 0x3e	; 62
   12856:	17 97       	sbiw	r26, 0x07	; 7
   12858:	0f b6       	in	r0, 0x3f	; 63
   1285a:	f8 94       	cli
   1285c:	be bf       	out	0x3e, r27	; 62
   1285e:	0f be       	out	0x3f, r0	; 63
   12860:	ad bf       	out	0x3d, r26	; 61
   12862:	c6 2f       	mov	r28, r22
   12864:	7a 01       	movw	r14, r20
   12866:	91 df       	rcall	.-222    	; 0x1278a <tok_name>
   12868:	8c 01       	movw	r16, r24
   1286a:	cc 23       	and	r28, r28
   1286c:	31 f0       	breq	.+12     	; 0x1287a <print_tok_str+0x32>
   1286e:	80 e2       	ldi	r24, 0x20	; 32
   12870:	90 e0       	ldi	r25, 0x00	; 0
   12872:	0e 94 66 77 	call	0xeecc	; 0xeecc <putchar>
   12876:	c1 50       	subi	r28, 0x01	; 1
   12878:	f8 cf       	rjmp	.-16     	; 0x1286a <print_tok_str+0x22>
   1287a:	ed b7       	in	r30, 0x3d	; 61
   1287c:	fe b7       	in	r31, 0x3e	; 62
   1287e:	f7 82       	std	Z+7, r15	; 0x07
   12880:	e6 82       	std	Z+6, r14	; 0x06
   12882:	15 83       	std	Z+5, r17	; 0x05
   12884:	04 83       	std	Z+4, r16	; 0x04
   12886:	84 e5       	ldi	r24, 0x54	; 84
   12888:	90 e2       	ldi	r25, 0x20	; 32
   1288a:	a0 e0       	ldi	r26, 0x00	; 0
   1288c:	81 83       	std	Z+1, r24	; 0x01
   1288e:	92 83       	std	Z+2, r25	; 0x02
   12890:	a3 83       	std	Z+3, r26	; 0x03
   12892:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
   12896:	ad b7       	in	r26, 0x3d	; 61
   12898:	be b7       	in	r27, 0x3e	; 62
   1289a:	17 96       	adiw	r26, 0x07	; 7
   1289c:	0f b6       	in	r0, 0x3f	; 63
   1289e:	f8 94       	cli
   128a0:	be bf       	out	0x3e, r27	; 62
   128a2:	0f be       	out	0x3f, r0	; 63
   128a4:	ad bf       	out	0x3d, r26	; 61
   128a6:	cf 91       	pop	r28
   128a8:	1f 91       	pop	r17
   128aa:	0f 91       	pop	r16
   128ac:	ff 90       	pop	r15
   128ae:	ef 90       	pop	r14
   128b0:	08 95       	ret

000128b2 <print_tok>:
   128b2:	0f 93       	push	r16
   128b4:	1f 93       	push	r17
   128b6:	cf 93       	push	r28
   128b8:	00 d0       	rcall	.+0      	; 0x128ba <print_tok+0x8>
   128ba:	00 d0       	rcall	.+0      	; 0x128bc <print_tok+0xa>
   128bc:	1f 92       	push	r1
   128be:	c6 2f       	mov	r28, r22
   128c0:	64 df       	rcall	.-312    	; 0x1278a <tok_name>
   128c2:	8c 01       	movw	r16, r24
   128c4:	cc 23       	and	r28, r28
   128c6:	31 f0       	breq	.+12     	; 0x128d4 <print_tok+0x22>
   128c8:	80 e2       	ldi	r24, 0x20	; 32
   128ca:	90 e0       	ldi	r25, 0x00	; 0
   128cc:	0e 94 66 77 	call	0xeecc	; 0xeecc <putchar>
   128d0:	c1 50       	subi	r28, 0x01	; 1
   128d2:	f8 cf       	rjmp	.-16     	; 0x128c4 <print_tok+0x12>
   128d4:	ed b7       	in	r30, 0x3d	; 61
   128d6:	fe b7       	in	r31, 0x3e	; 62
   128d8:	15 83       	std	Z+5, r17	; 0x05
   128da:	04 83       	std	Z+4, r16	; 0x04
   128dc:	80 e5       	ldi	r24, 0x50	; 80
   128de:	90 e2       	ldi	r25, 0x20	; 32
   128e0:	a0 e0       	ldi	r26, 0x00	; 0
   128e2:	81 83       	std	Z+1, r24	; 0x01
   128e4:	92 83       	std	Z+2, r25	; 0x02
   128e6:	a3 83       	std	Z+3, r26	; 0x03
   128e8:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
   128ec:	0f 90       	pop	r0
   128ee:	0f 90       	pop	r0
   128f0:	0f 90       	pop	r0
   128f2:	0f 90       	pop	r0
   128f4:	0f 90       	pop	r0
   128f6:	cf 91       	pop	r28
   128f8:	1f 91       	pop	r17
   128fa:	0f 91       	pop	r16
   128fc:	08 95       	ret

000128fe <display_Addresses>:
   128fe:	2f 92       	push	r2
   12900:	3f 92       	push	r3
   12902:	4f 92       	push	r4
   12904:	6f 92       	push	r6
   12906:	7f 92       	push	r7
   12908:	8f 92       	push	r8
   1290a:	cf 92       	push	r12
   1290c:	df 92       	push	r13
   1290e:	ef 92       	push	r14
   12910:	0f 93       	push	r16
   12912:	1f 93       	push	r17
   12914:	cf 93       	push	r28
   12916:	df 93       	push	r29
   12918:	cd b7       	in	r28, 0x3d	; 61
   1291a:	de b7       	in	r29, 0x3e	; 62
   1291c:	2a 97       	sbiw	r28, 0x0a	; 10
   1291e:	0f b6       	in	r0, 0x3f	; 63
   12920:	f8 94       	cli
   12922:	de bf       	out	0x3e, r29	; 62
   12924:	0f be       	out	0x3f, r0	; 63
   12926:	cd bf       	out	0x3d, r28	; 61
   12928:	8a e1       	ldi	r24, 0x1A	; 26
   1292a:	9d e1       	ldi	r25, 0x1D	; 29
   1292c:	a0 e0       	ldi	r26, 0x00	; 0
   1292e:	ed b7       	in	r30, 0x3d	; 61
   12930:	fe b7       	in	r31, 0x3e	; 62
   12932:	81 83       	std	Z+1, r24	; 0x01
   12934:	92 83       	std	Z+2, r25	; 0x02
   12936:	a3 83       	std	Z+3, r26	; 0x03
   12938:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
   1293c:	04 ef       	ldi	r16, 0xF4	; 244
   1293e:	1e e1       	ldi	r17, 0x1E	; 30
   12940:	8c ef       	ldi	r24, 0xFC	; 252
   12942:	9c e1       	ldi	r25, 0x1C	; 28
   12944:	6c 01       	movw	r12, r24
   12946:	e1 2c       	mov	r14, r1
   12948:	8e ef       	ldi	r24, 0xFE	; 254
   1294a:	9c e1       	ldi	r25, 0x1C	; 28
   1294c:	3c 01       	movw	r6, r24
   1294e:	81 2c       	mov	r8, r1
   12950:	87 e0       	ldi	r24, 0x07	; 7
   12952:	9d e1       	ldi	r25, 0x1D	; 29
   12954:	1c 01       	movw	r2, r24
   12956:	41 2c       	mov	r4, r1
   12958:	81 e1       	ldi	r24, 0x11	; 17
   1295a:	9d e1       	ldi	r25, 0x1D	; 29
   1295c:	9c 01       	movw	r18, r24
   1295e:	40 e0       	ldi	r20, 0x00	; 0
   12960:	2e 83       	std	Y+6, r18	; 0x06
   12962:	3f 83       	std	Y+7, r19	; 0x07
   12964:	48 87       	std	Y+8, r20	; 0x08
   12966:	f8 01       	movw	r30, r16
   12968:	80 81       	ld	r24, Z
   1296a:	88 23       	and	r24, r24
   1296c:	09 f4       	brne	.+2      	; 0x12970 <display_Addresses+0x72>
   1296e:	76 c0       	rjmp	.+236    	; 0x12a5c <display_Addresses+0x15e>
   12970:	83 30       	cpi	r24, 0x03	; 3
   12972:	21 f0       	breq	.+8      	; 0x1297c <display_Addresses+0x7e>
   12974:	81 30       	cpi	r24, 0x01	; 1
   12976:	09 f0       	breq	.+2      	; 0x1297a <display_Addresses+0x7c>
   12978:	57 c0       	rjmp	.+174    	; 0x12a28 <display_Addresses+0x12a>
   1297a:	1f c0       	rjmp	.+62     	; 0x129ba <display_Addresses+0xbc>
   1297c:	f8 01       	movw	r30, r16
   1297e:	87 81       	ldd	r24, Z+7	; 0x07
   12980:	90 85       	ldd	r25, Z+8	; 0x08
   12982:	90 93 69 19 	sts	0x1969, r25	; 0x801969 <SS80p+0x1>
   12986:	80 93 68 19 	sts	0x1968, r24	; 0x801968 <SS80p>
   1298a:	fc 01       	movw	r30, r24
   1298c:	84 81       	ldd	r24, Z+4	; 0x04
   1298e:	95 81       	ldd	r25, Z+5	; 0x05
   12990:	ed b7       	in	r30, 0x3d	; 61
   12992:	fe b7       	in	r31, 0x3e	; 62
   12994:	95 83       	std	Z+5, r25	; 0x05
   12996:	84 83       	std	Z+4, r24	; 0x04
   12998:	2e 81       	ldd	r18, Y+6	; 0x06
   1299a:	3f 81       	ldd	r19, Y+7	; 0x07
   1299c:	48 85       	ldd	r20, Y+8	; 0x08
   1299e:	21 83       	std	Z+1, r18	; 0x01
   129a0:	32 83       	std	Z+2, r19	; 0x02
   129a2:	43 83       	std	Z+3, r20	; 0x03
   129a4:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
   129a8:	e0 91 68 19 	lds	r30, 0x1968	; 0x801968 <SS80p>
   129ac:	f0 91 69 19 	lds	r31, 0x1969	; 0x801969 <SS80p+0x1>
   129b0:	42 81       	ldd	r20, Z+2	; 0x02
   129b2:	53 81       	ldd	r21, Z+3	; 0x03
   129b4:	64 e0       	ldi	r22, 0x04	; 4
   129b6:	82 e1       	ldi	r24, 0x12	; 18
   129b8:	47 df       	rcall	.-370    	; 0x12848 <print_tok_str>
   129ba:	f8 01       	movw	r30, r16
   129bc:	80 81       	ld	r24, Z
   129be:	81 30       	cpi	r24, 0x01	; 1
   129c0:	d9 f4       	brne	.+54     	; 0x129f8 <display_Addresses+0xfa>
   129c2:	87 81       	ldd	r24, Z+7	; 0x07
   129c4:	90 85       	ldd	r25, Z+8	; 0x08
   129c6:	90 93 65 19 	sts	0x1965, r25	; 0x801965 <AMIGOp+0x1>
   129ca:	80 93 64 19 	sts	0x1964, r24	; 0x801964 <AMIGOp>
   129ce:	fc 01       	movw	r30, r24
   129d0:	84 81       	ldd	r24, Z+4	; 0x04
   129d2:	95 81       	ldd	r25, Z+5	; 0x05
   129d4:	ed b7       	in	r30, 0x3d	; 61
   129d6:	fe b7       	in	r31, 0x3e	; 62
   129d8:	95 83       	std	Z+5, r25	; 0x05
   129da:	84 83       	std	Z+4, r24	; 0x04
   129dc:	21 82       	std	Z+1, r2	; 0x01
   129de:	32 82       	std	Z+2, r3	; 0x02
   129e0:	43 82       	std	Z+3, r4	; 0x03
   129e2:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
   129e6:	e0 91 64 19 	lds	r30, 0x1964	; 0x801964 <AMIGOp>
   129ea:	f0 91 65 19 	lds	r31, 0x1965	; 0x801965 <AMIGOp+0x1>
   129ee:	42 81       	ldd	r20, Z+2	; 0x02
   129f0:	53 81       	ldd	r21, Z+3	; 0x03
   129f2:	64 e0       	ldi	r22, 0x04	; 4
   129f4:	82 e1       	ldi	r24, 0x12	; 18
   129f6:	28 df       	rcall	.-432    	; 0x12848 <print_tok_str>
   129f8:	f8 01       	movw	r30, r16
   129fa:	21 81       	ldd	r18, Z+1	; 0x01
   129fc:	30 e0       	ldi	r19, 0x00	; 0
   129fe:	40 e0       	ldi	r20, 0x00	; 0
   12a00:	50 e0       	ldi	r21, 0x00	; 0
   12a02:	64 e0       	ldi	r22, 0x04	; 4
   12a04:	81 e0       	ldi	r24, 0x01	; 1
   12a06:	e0 de       	rcall	.-576    	; 0x127c8 <print_tok_val>
   12a08:	f8 01       	movw	r30, r16
   12a0a:	22 81       	ldd	r18, Z+2	; 0x02
   12a0c:	30 e0       	ldi	r19, 0x00	; 0
   12a0e:	40 e0       	ldi	r20, 0x00	; 0
   12a10:	50 e0       	ldi	r21, 0x00	; 0
   12a12:	64 e0       	ldi	r22, 0x04	; 4
   12a14:	8f e1       	ldi	r24, 0x1F	; 31
   12a16:	d8 de       	rcall	.-592    	; 0x127c8 <print_tok_val>
   12a18:	f8 01       	movw	r30, r16
   12a1a:	23 81       	ldd	r18, Z+3	; 0x03
   12a1c:	34 81       	ldd	r19, Z+4	; 0x04
   12a1e:	45 81       	ldd	r20, Z+5	; 0x05
   12a20:	56 81       	ldd	r21, Z+6	; 0x06
   12a22:	64 e0       	ldi	r22, 0x04	; 4
   12a24:	83 e0       	ldi	r24, 0x03	; 3
   12a26:	d0 de       	rcall	.-608    	; 0x127c8 <print_tok_val>
   12a28:	f8 01       	movw	r30, r16
   12a2a:	80 81       	ld	r24, Z
   12a2c:	84 30       	cpi	r24, 0x04	; 4
   12a2e:	79 f4       	brne	.+30     	; 0x12a4e <display_Addresses+0x150>
   12a30:	ed b7       	in	r30, 0x3d	; 61
   12a32:	fe b7       	in	r31, 0x3e	; 62
   12a34:	61 82       	std	Z+1, r6	; 0x01
   12a36:	72 82       	std	Z+2, r7	; 0x02
   12a38:	83 82       	std	Z+3, r8	; 0x03
   12a3a:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
   12a3e:	f8 01       	movw	r30, r16
   12a40:	21 81       	ldd	r18, Z+1	; 0x01
   12a42:	30 e0       	ldi	r19, 0x00	; 0
   12a44:	40 e0       	ldi	r20, 0x00	; 0
   12a46:	50 e0       	ldi	r21, 0x00	; 0
   12a48:	64 e0       	ldi	r22, 0x04	; 4
   12a4a:	81 e0       	ldi	r24, 0x01	; 1
   12a4c:	bd de       	rcall	.-646    	; 0x127c8 <print_tok_val>
   12a4e:	ed b7       	in	r30, 0x3d	; 61
   12a50:	fe b7       	in	r31, 0x3e	; 62
   12a52:	c1 82       	std	Z+1, r12	; 0x01
   12a54:	d2 82       	std	Z+2, r13	; 0x02
   12a56:	e3 82       	std	Z+3, r14	; 0x03
   12a58:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
   12a5c:	05 5f       	subi	r16, 0xF5	; 245
   12a5e:	1f 4f       	sbci	r17, 0xFF	; 255
   12a60:	ff e1       	ldi	r31, 0x1F	; 31
   12a62:	08 37       	cpi	r16, 0x78	; 120
   12a64:	1f 07       	cpc	r17, r31
   12a66:	09 f0       	breq	.+2      	; 0x12a6a <display_Addresses+0x16c>
   12a68:	7e cf       	rjmp	.-260    	; 0x12966 <display_Addresses+0x68>
   12a6a:	8a ef       	ldi	r24, 0xFA	; 250
   12a6c:	9c e1       	ldi	r25, 0x1C	; 28
   12a6e:	a0 e0       	ldi	r26, 0x00	; 0
   12a70:	ed b7       	in	r30, 0x3d	; 61
   12a72:	fe b7       	in	r31, 0x3e	; 62
   12a74:	81 83       	std	Z+1, r24	; 0x01
   12a76:	92 83       	std	Z+2, r25	; 0x02
   12a78:	a3 83       	std	Z+3, r26	; 0x03
   12a7a:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
   12a7e:	2a 96       	adiw	r28, 0x0a	; 10
   12a80:	0f b6       	in	r0, 0x3f	; 63
   12a82:	f8 94       	cli
   12a84:	de bf       	out	0x3e, r29	; 62
   12a86:	0f be       	out	0x3f, r0	; 63
   12a88:	cd bf       	out	0x3d, r28	; 61
   12a8a:	df 91       	pop	r29
   12a8c:	cf 91       	pop	r28
   12a8e:	1f 91       	pop	r17
   12a90:	0f 91       	pop	r16
   12a92:	ef 90       	pop	r14
   12a94:	df 90       	pop	r13
   12a96:	cf 90       	pop	r12
   12a98:	8f 90       	pop	r8
   12a9a:	7f 90       	pop	r7
   12a9c:	6f 90       	pop	r6
   12a9e:	4f 90       	pop	r4
   12aa0:	3f 90       	pop	r3
   12aa2:	2f 90       	pop	r2
   12aa4:	08 95       	ret

00012aa6 <display_Config>:
   12aa6:	2f 92       	push	r2
   12aa8:	3f 92       	push	r3
   12aaa:	4f 92       	push	r4
   12aac:	6f 92       	push	r6
   12aae:	7f 92       	push	r7
   12ab0:	8f 92       	push	r8
   12ab2:	af 92       	push	r10
   12ab4:	bf 92       	push	r11
   12ab6:	cf 92       	push	r12
   12ab8:	df 92       	push	r13
   12aba:	ef 92       	push	r14
   12abc:	0f 93       	push	r16
   12abe:	1f 93       	push	r17
   12ac0:	cf 93       	push	r28
   12ac2:	df 93       	push	r29
   12ac4:	cd b7       	in	r28, 0x3d	; 61
   12ac6:	de b7       	in	r29, 0x3e	; 62
   12ac8:	62 97       	sbiw	r28, 0x12	; 18
   12aca:	0f b6       	in	r0, 0x3f	; 63
   12acc:	f8 94       	cli
   12ace:	de bf       	out	0x3e, r29	; 62
   12ad0:	0f be       	out	0x3f, r0	; 63
   12ad2:	cd bf       	out	0x3d, r28	; 61
   12ad4:	5c 01       	movw	r10, r24
   12ad6:	8a ed       	ldi	r24, 0xDA	; 218
   12ad8:	9c e1       	ldi	r25, 0x1C	; 28
   12ada:	a0 e0       	ldi	r26, 0x00	; 0
   12adc:	ed b7       	in	r30, 0x3d	; 61
   12ade:	fe b7       	in	r31, 0x3e	; 62
   12ae0:	81 83       	std	Z+1, r24	; 0x01
   12ae2:	92 83       	std	Z+2, r25	; 0x02
   12ae4:	a3 83       	std	Z+3, r26	; 0x03
   12ae6:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
   12aea:	04 ef       	ldi	r16, 0xF4	; 244
   12aec:	1e e1       	ldi	r17, 0x1E	; 30
   12aee:	8f e5       	ldi	r24, 0x5F	; 95
   12af0:	9c e1       	ldi	r25, 0x1C	; 28
   12af2:	9c 01       	movw	r18, r24
   12af4:	40 e0       	ldi	r20, 0x00	; 0
   12af6:	28 87       	std	Y+8, r18	; 0x08
   12af8:	39 87       	std	Y+9, r19	; 0x09
   12afa:	4a 87       	std	Y+10, r20	; 0x0a
   12afc:	84 e9       	ldi	r24, 0x94	; 148
   12afe:	9c e1       	ldi	r25, 0x1C	; 28
   12b00:	6c 01       	movw	r12, r24
   12b02:	e1 2c       	mov	r14, r1
   12b04:	85 e7       	ldi	r24, 0x75	; 117
   12b06:	9c e1       	ldi	r25, 0x1C	; 28
   12b08:	3c 01       	movw	r6, r24
   12b0a:	81 2c       	mov	r8, r1
   12b0c:	81 e6       	ldi	r24, 0x61	; 97
   12b0e:	9c e1       	ldi	r25, 0x1C	; 28
   12b10:	1c 01       	movw	r2, r24
   12b12:	41 2c       	mov	r4, r1
   12b14:	81 ed       	ldi	r24, 0xD1	; 209
   12b16:	9c e1       	ldi	r25, 0x1C	; 28
   12b18:	9c 01       	movw	r18, r24
   12b1a:	40 e0       	ldi	r20, 0x00	; 0
   12b1c:	2b 87       	std	Y+11, r18	; 0x0b
   12b1e:	3c 87       	std	Y+12, r19	; 0x0c
   12b20:	4d 87       	std	Y+13, r20	; 0x0d
   12b22:	82 eb       	ldi	r24, 0xB2	; 178
   12b24:	9c e1       	ldi	r25, 0x1C	; 28
   12b26:	9c 01       	movw	r18, r24
   12b28:	40 e0       	ldi	r20, 0x00	; 0
   12b2a:	2e 87       	std	Y+14, r18	; 0x0e
   12b2c:	3f 87       	std	Y+15, r19	; 0x0f
   12b2e:	48 8b       	std	Y+16, r20	; 0x10
   12b30:	f8 01       	movw	r30, r16
   12b32:	80 81       	ld	r24, Z
   12b34:	88 23       	and	r24, r24
   12b36:	09 f4       	brne	.+2      	; 0x12b3a <display_Config+0x94>
   12b38:	16 c2       	rjmp	.+1068   	; 0x12f66 <display_Config+0x4c0>
   12b3a:	83 30       	cpi	r24, 0x03	; 3
   12b3c:	09 f0       	breq	.+2      	; 0x12b40 <display_Config+0x9a>
   12b3e:	3f c1       	rjmp	.+638    	; 0x12dbe <display_Config+0x318>
   12b40:	27 81       	ldd	r18, Z+7	; 0x07
   12b42:	30 85       	ldd	r19, Z+8	; 0x08
   12b44:	3a 8b       	std	Y+18, r19	; 0x12
   12b46:	29 8b       	std	Y+17, r18	; 0x11
   12b48:	f9 01       	movw	r30, r18
   12b4a:	84 81       	ldd	r24, Z+4	; 0x04
   12b4c:	95 81       	ldd	r25, Z+5	; 0x05
   12b4e:	ed b7       	in	r30, 0x3d	; 61
   12b50:	fe b7       	in	r31, 0x3e	; 62
   12b52:	95 83       	std	Z+5, r25	; 0x05
   12b54:	84 83       	std	Z+4, r24	; 0x04
   12b56:	2b 85       	ldd	r18, Y+11	; 0x0b
   12b58:	3c 85       	ldd	r19, Y+12	; 0x0c
   12b5a:	4d 85       	ldd	r20, Y+13	; 0x0d
   12b5c:	21 83       	std	Z+1, r18	; 0x01
   12b5e:	32 83       	std	Z+2, r19	; 0x02
   12b60:	43 83       	std	Z+3, r20	; 0x03
   12b62:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
   12b66:	e9 89       	ldd	r30, Y+17	; 0x11
   12b68:	fa 89       	ldd	r31, Y+18	; 0x12
   12b6a:	80 81       	ld	r24, Z
   12b6c:	90 e0       	ldi	r25, 0x00	; 0
   12b6e:	ed b7       	in	r30, 0x3d	; 61
   12b70:	fe b7       	in	r31, 0x3e	; 62
   12b72:	95 83       	std	Z+5, r25	; 0x05
   12b74:	84 83       	std	Z+4, r24	; 0x04
   12b76:	2e 85       	ldd	r18, Y+14	; 0x0e
   12b78:	3f 85       	ldd	r19, Y+15	; 0x0f
   12b7a:	48 89       	ldd	r20, Y+16	; 0x10
   12b7c:	21 83       	std	Z+1, r18	; 0x01
   12b7e:	32 83       	std	Z+2, r19	; 0x02
   12b80:	43 83       	std	Z+3, r20	; 0x03
   12b82:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
   12b86:	64 e0       	ldi	r22, 0x04	; 4
   12b88:	89 e0       	ldi	r24, 0x09	; 9
   12b8a:	93 de       	rcall	.-730    	; 0x128b2 <print_tok>
   12b8c:	e9 89       	ldd	r30, Y+17	; 0x11
   12b8e:	fa 89       	ldd	r31, Y+18	; 0x12
   12b90:	20 81       	ld	r18, Z
   12b92:	30 e0       	ldi	r19, 0x00	; 0
   12b94:	40 e0       	ldi	r20, 0x00	; 0
   12b96:	50 e0       	ldi	r21, 0x00	; 0
   12b98:	68 e0       	ldi	r22, 0x08	; 8
   12b9a:	81 e0       	ldi	r24, 0x01	; 1
   12b9c:	15 de       	rcall	.-982    	; 0x127c8 <print_tok_val>
   12b9e:	e9 89       	ldd	r30, Y+17	; 0x11
   12ba0:	fa 89       	ldd	r31, Y+18	; 0x12
   12ba2:	21 81       	ldd	r18, Z+1	; 0x01
   12ba4:	30 e0       	ldi	r19, 0x00	; 0
   12ba6:	40 e0       	ldi	r20, 0x00	; 0
   12ba8:	50 e0       	ldi	r21, 0x00	; 0
   12baa:	68 e0       	ldi	r22, 0x08	; 8
   12bac:	8f e1       	ldi	r24, 0x1F	; 31
   12bae:	0c de       	rcall	.-1000   	; 0x127c8 <print_tok_val>
   12bb0:	e9 89       	ldd	r30, Y+17	; 0x11
   12bb2:	fa 89       	ldd	r31, Y+18	; 0x12
   12bb4:	42 81       	ldd	r20, Z+2	; 0x02
   12bb6:	53 81       	ldd	r21, Z+3	; 0x03
   12bb8:	68 e0       	ldi	r22, 0x08	; 8
   12bba:	82 e1       	ldi	r24, 0x12	; 18
   12bbc:	45 de       	rcall	.-886    	; 0x12848 <print_tok_str>
   12bbe:	64 e0       	ldi	r22, 0x04	; 4
   12bc0:	81 e1       	ldi	r24, 0x11	; 17
   12bc2:	77 de       	rcall	.-786    	; 0x128b2 <print_tok>
   12bc4:	64 e0       	ldi	r22, 0x04	; 4
   12bc6:	85 e1       	ldi	r24, 0x15	; 21
   12bc8:	74 de       	rcall	.-792    	; 0x128b2 <print_tok>
   12bca:	e9 89       	ldd	r30, Y+17	; 0x11
   12bcc:	fa 89       	ldd	r31, Y+18	; 0x12
   12bce:	26 81       	ldd	r18, Z+6	; 0x06
   12bd0:	37 81       	ldd	r19, Z+7	; 0x07
   12bd2:	40 e0       	ldi	r20, 0x00	; 0
   12bd4:	50 e0       	ldi	r21, 0x00	; 0
   12bd6:	68 e0       	ldi	r22, 0x08	; 8
   12bd8:	87 e1       	ldi	r24, 0x17	; 23
   12bda:	f6 dd       	rcall	.-1044   	; 0x127c8 <print_tok_val>
   12bdc:	64 e0       	ldi	r22, 0x04	; 4
   12bde:	81 e1       	ldi	r24, 0x11	; 17
   12be0:	68 de       	rcall	.-816    	; 0x128b2 <print_tok>
   12be2:	a1 14       	cp	r10, r1
   12be4:	b1 04       	cpc	r11, r1
   12be6:	09 f1       	breq	.+66     	; 0x12c2a <display_Config+0x184>
   12be8:	64 e0       	ldi	r22, 0x04	; 4
   12bea:	8b e0       	ldi	r24, 0x0B	; 11
   12bec:	62 de       	rcall	.-828    	; 0x128b2 <print_tok>
   12bee:	e9 89       	ldd	r30, Y+17	; 0x11
   12bf0:	fa 89       	ldd	r31, Y+18	; 0x12
   12bf2:	20 85       	ldd	r18, Z+8	; 0x08
   12bf4:	31 85       	ldd	r19, Z+9	; 0x09
   12bf6:	40 e0       	ldi	r20, 0x00	; 0
   12bf8:	50 e0       	ldi	r21, 0x00	; 0
   12bfa:	68 e0       	ldi	r22, 0x08	; 8
   12bfc:	88 e2       	ldi	r24, 0x28	; 40
   12bfe:	e4 dd       	rcall	.-1080   	; 0x127c8 <print_tok_val>
   12c00:	e9 89       	ldd	r30, Y+17	; 0x11
   12c02:	fa 89       	ldd	r31, Y+18	; 0x12
   12c04:	22 85       	ldd	r18, Z+10	; 0x0a
   12c06:	33 85       	ldd	r19, Z+11	; 0x0b
   12c08:	40 e0       	ldi	r20, 0x00	; 0
   12c0a:	50 e0       	ldi	r21, 0x00	; 0
   12c0c:	68 e0       	ldi	r22, 0x08	; 8
   12c0e:	85 e2       	ldi	r24, 0x25	; 37
   12c10:	db dd       	rcall	.-1098   	; 0x127c8 <print_tok_val>
   12c12:	e9 89       	ldd	r30, Y+17	; 0x11
   12c14:	fa 89       	ldd	r31, Y+18	; 0x12
   12c16:	24 85       	ldd	r18, Z+12	; 0x0c
   12c18:	30 e0       	ldi	r19, 0x00	; 0
   12c1a:	40 e0       	ldi	r20, 0x00	; 0
   12c1c:	50 e0       	ldi	r21, 0x00	; 0
   12c1e:	68 e0       	ldi	r22, 0x08	; 8
   12c20:	86 e2       	ldi	r24, 0x26	; 38
   12c22:	d2 dd       	rcall	.-1116   	; 0x127c8 <print_tok_val>
   12c24:	64 e0       	ldi	r22, 0x04	; 4
   12c26:	81 e1       	ldi	r24, 0x11	; 17
   12c28:	44 de       	rcall	.-888    	; 0x128b2 <print_tok>
   12c2a:	64 e0       	ldi	r22, 0x04	; 4
   12c2c:	87 e2       	ldi	r24, 0x27	; 39
   12c2e:	41 de       	rcall	.-894    	; 0x128b2 <print_tok>
   12c30:	a1 14       	cp	r10, r1
   12c32:	b1 04       	cpc	r11, r1
   12c34:	49 f0       	breq	.+18     	; 0x12c48 <display_Config+0x1a2>
   12c36:	e9 89       	ldd	r30, Y+17	; 0x11
   12c38:	fa 89       	ldd	r31, Y+18	; 0x12
   12c3a:	25 85       	ldd	r18, Z+13	; 0x0d
   12c3c:	30 e0       	ldi	r19, 0x00	; 0
   12c3e:	40 e0       	ldi	r20, 0x00	; 0
   12c40:	50 e0       	ldi	r21, 0x00	; 0
   12c42:	68 e0       	ldi	r22, 0x08	; 8
   12c44:	89 e2       	ldi	r24, 0x29	; 41
   12c46:	c0 dd       	rcall	.-1152   	; 0x127c8 <print_tok_val>
   12c48:	e9 89       	ldd	r30, Y+17	; 0x11
   12c4a:	fa 89       	ldd	r31, Y+18	; 0x12
   12c4c:	26 85       	ldd	r18, Z+14	; 0x0e
   12c4e:	37 85       	ldd	r19, Z+15	; 0x0f
   12c50:	40 89       	ldd	r20, Z+16	; 0x10
   12c52:	51 89       	ldd	r21, Z+17	; 0x11
   12c54:	68 e0       	ldi	r22, 0x08	; 8
   12c56:	8f e0       	ldi	r24, 0x0F	; 15
   12c58:	b7 dd       	rcall	.-1170   	; 0x127c8 <print_tok_val>
   12c5a:	a1 14       	cp	r10, r1
   12c5c:	b1 04       	cpc	r11, r1
   12c5e:	09 f4       	brne	.+2      	; 0x12c62 <display_Config+0x1bc>
   12c60:	5a c0       	rjmp	.+180    	; 0x12d16 <display_Config+0x270>
   12c62:	e9 89       	ldd	r30, Y+17	; 0x11
   12c64:	fa 89       	ldd	r31, Y+18	; 0x12
   12c66:	22 89       	ldd	r18, Z+18	; 0x12
   12c68:	33 89       	ldd	r19, Z+19	; 0x13
   12c6a:	40 e0       	ldi	r20, 0x00	; 0
   12c6c:	50 e0       	ldi	r21, 0x00	; 0
   12c6e:	68 e0       	ldi	r22, 0x08	; 8
   12c70:	87 e0       	ldi	r24, 0x07	; 7
   12c72:	aa dd       	rcall	.-1196   	; 0x127c8 <print_tok_val>
   12c74:	e9 89       	ldd	r30, Y+17	; 0x11
   12c76:	fa 89       	ldd	r31, Y+18	; 0x12
   12c78:	24 89       	ldd	r18, Z+20	; 0x14
   12c7a:	30 e0       	ldi	r19, 0x00	; 0
   12c7c:	40 e0       	ldi	r20, 0x00	; 0
   12c7e:	50 e0       	ldi	r21, 0x00	; 0
   12c80:	68 e0       	ldi	r22, 0x08	; 8
   12c82:	85 e0       	ldi	r24, 0x05	; 5
   12c84:	a1 dd       	rcall	.-1214   	; 0x127c8 <print_tok_val>
   12c86:	e9 89       	ldd	r30, Y+17	; 0x11
   12c88:	fa 89       	ldd	r31, Y+18	; 0x12
   12c8a:	25 89       	ldd	r18, Z+21	; 0x15
   12c8c:	30 e0       	ldi	r19, 0x00	; 0
   12c8e:	40 e0       	ldi	r20, 0x00	; 0
   12c90:	50 e0       	ldi	r21, 0x00	; 0
   12c92:	68 e0       	ldi	r22, 0x08	; 8
   12c94:	86 e0       	ldi	r24, 0x06	; 6
   12c96:	98 dd       	rcall	.-1232   	; 0x127c8 <print_tok_val>
   12c98:	e9 89       	ldd	r30, Y+17	; 0x11
   12c9a:	fa 89       	ldd	r31, Y+18	; 0x12
   12c9c:	26 89       	ldd	r18, Z+22	; 0x16
   12c9e:	37 89       	ldd	r19, Z+23	; 0x17
   12ca0:	40 e0       	ldi	r20, 0x00	; 0
   12ca2:	50 e0       	ldi	r21, 0x00	; 0
   12ca4:	68 e0       	ldi	r22, 0x08	; 8
   12ca6:	84 e0       	ldi	r24, 0x04	; 4
   12ca8:	8f dd       	rcall	.-1250   	; 0x127c8 <print_tok_val>
   12caa:	e9 89       	ldd	r30, Y+17	; 0x11
   12cac:	fa 89       	ldd	r31, Y+18	; 0x12
   12cae:	20 8d       	ldd	r18, Z+24	; 0x18
   12cb0:	31 8d       	ldd	r19, Z+25	; 0x19
   12cb2:	40 e0       	ldi	r20, 0x00	; 0
   12cb4:	50 e0       	ldi	r21, 0x00	; 0
   12cb6:	68 e0       	ldi	r22, 0x08	; 8
   12cb8:	8a e0       	ldi	r24, 0x0A	; 10
   12cba:	86 dd       	rcall	.-1268   	; 0x127c8 <print_tok_val>
   12cbc:	e9 89       	ldd	r30, Y+17	; 0x11
   12cbe:	fa 89       	ldd	r31, Y+18	; 0x12
   12cc0:	22 8d       	ldd	r18, Z+26	; 0x1a
   12cc2:	33 8d       	ldd	r19, Z+27	; 0x1b
   12cc4:	40 e0       	ldi	r20, 0x00	; 0
   12cc6:	50 e0       	ldi	r21, 0x00	; 0
   12cc8:	68 e0       	ldi	r22, 0x08	; 8
   12cca:	8e e1       	ldi	r24, 0x1E	; 30
   12ccc:	7d dd       	rcall	.-1286   	; 0x127c8 <print_tok_val>
   12cce:	e9 89       	ldd	r30, Y+17	; 0x11
   12cd0:	fa 89       	ldd	r31, Y+18	; 0x12
   12cd2:	24 8d       	ldd	r18, Z+28	; 0x1c
   12cd4:	35 8d       	ldd	r19, Z+29	; 0x1d
   12cd6:	40 e0       	ldi	r20, 0x00	; 0
   12cd8:	50 e0       	ldi	r21, 0x00	; 0
   12cda:	68 e0       	ldi	r22, 0x08	; 8
   12cdc:	80 e0       	ldi	r24, 0x00	; 0
   12cde:	74 dd       	rcall	.-1304   	; 0x127c8 <print_tok_val>
   12ce0:	e9 89       	ldd	r30, Y+17	; 0x11
   12ce2:	fa 89       	ldd	r31, Y+18	; 0x12
   12ce4:	26 8d       	ldd	r18, Z+30	; 0x1e
   12ce6:	30 e0       	ldi	r19, 0x00	; 0
   12ce8:	40 e0       	ldi	r20, 0x00	; 0
   12cea:	50 e0       	ldi	r21, 0x00	; 0
   12cec:	68 e0       	ldi	r22, 0x08	; 8
   12cee:	8c e1       	ldi	r24, 0x1C	; 28
   12cf0:	6b dd       	rcall	.-1322   	; 0x127c8 <print_tok_val>
   12cf2:	e9 89       	ldd	r30, Y+17	; 0x11
   12cf4:	fa 89       	ldd	r31, Y+18	; 0x12
   12cf6:	27 8d       	ldd	r18, Z+31	; 0x1f
   12cf8:	30 e0       	ldi	r19, 0x00	; 0
   12cfa:	40 e0       	ldi	r20, 0x00	; 0
   12cfc:	50 e0       	ldi	r21, 0x00	; 0
   12cfe:	68 e0       	ldi	r22, 0x08	; 8
   12d00:	83 e1       	ldi	r24, 0x13	; 19
   12d02:	62 dd       	rcall	.-1340   	; 0x127c8 <print_tok_val>
   12d04:	e9 89       	ldd	r30, Y+17	; 0x11
   12d06:	fa 89       	ldd	r31, Y+18	; 0x12
   12d08:	20 a1       	ldd	r18, Z+32	; 0x20
   12d0a:	30 e0       	ldi	r19, 0x00	; 0
   12d0c:	40 e0       	ldi	r20, 0x00	; 0
   12d0e:	50 e0       	ldi	r21, 0x00	; 0
   12d10:	68 e0       	ldi	r22, 0x08	; 8
   12d12:	81 e2       	ldi	r24, 0x21	; 33
   12d14:	59 dd       	rcall	.-1358   	; 0x127c8 <print_tok_val>
   12d16:	64 e0       	ldi	r22, 0x04	; 4
   12d18:	81 e1       	ldi	r24, 0x11	; 17
   12d1a:	cb dd       	rcall	.-1130   	; 0x128b2 <print_tok>
   12d1c:	a1 14       	cp	r10, r1
   12d1e:	b1 04       	cpc	r11, r1
   12d20:	99 f1       	breq	.+102    	; 0x12d88 <display_Config+0x2e2>
   12d22:	64 e0       	ldi	r22, 0x04	; 4
   12d24:	8a e2       	ldi	r24, 0x2A	; 42
   12d26:	c5 dd       	rcall	.-1142   	; 0x128b2 <print_tok>
   12d28:	e9 89       	ldd	r30, Y+17	; 0x11
   12d2a:	fa 89       	ldd	r31, Y+18	; 0x12
   12d2c:	21 a1       	ldd	r18, Z+33	; 0x21
   12d2e:	32 a1       	ldd	r19, Z+34	; 0x22
   12d30:	43 a1       	ldd	r20, Z+35	; 0x23
   12d32:	54 a1       	ldd	r21, Z+36	; 0x24
   12d34:	68 e0       	ldi	r22, 0x08	; 8
   12d36:	8a e1       	ldi	r24, 0x1A	; 26
   12d38:	47 dd       	rcall	.-1394   	; 0x127c8 <print_tok_val>
   12d3a:	e9 89       	ldd	r30, Y+17	; 0x11
   12d3c:	fa 89       	ldd	r31, Y+18	; 0x12
   12d3e:	25 a1       	ldd	r18, Z+37	; 0x25
   12d40:	30 e0       	ldi	r19, 0x00	; 0
   12d42:	40 e0       	ldi	r20, 0x00	; 0
   12d44:	50 e0       	ldi	r21, 0x00	; 0
   12d46:	68 e0       	ldi	r22, 0x08	; 8
   12d48:	8b e1       	ldi	r24, 0x1B	; 27
   12d4a:	3e dd       	rcall	.-1412   	; 0x127c8 <print_tok_val>
   12d4c:	e9 89       	ldd	r30, Y+17	; 0x11
   12d4e:	fa 89       	ldd	r31, Y+18	; 0x12
   12d50:	26 a1       	ldd	r18, Z+38	; 0x26
   12d52:	37 a1       	ldd	r19, Z+39	; 0x27
   12d54:	40 e0       	ldi	r20, 0x00	; 0
   12d56:	50 e0       	ldi	r21, 0x00	; 0
   12d58:	68 e0       	ldi	r22, 0x08	; 8
   12d5a:	8d e1       	ldi	r24, 0x1D	; 29
   12d5c:	35 dd       	rcall	.-1430   	; 0x127c8 <print_tok_val>
   12d5e:	e9 89       	ldd	r30, Y+17	; 0x11
   12d60:	fa 89       	ldd	r31, Y+18	; 0x12
   12d62:	20 a5       	ldd	r18, Z+40	; 0x28
   12d64:	31 a5       	ldd	r19, Z+41	; 0x29
   12d66:	42 a5       	ldd	r20, Z+42	; 0x2a
   12d68:	53 a5       	ldd	r21, Z+43	; 0x2b
   12d6a:	68 e0       	ldi	r22, 0x08	; 8
   12d6c:	89 e1       	ldi	r24, 0x19	; 25
   12d6e:	2c dd       	rcall	.-1448   	; 0x127c8 <print_tok_val>
   12d70:	e9 89       	ldd	r30, Y+17	; 0x11
   12d72:	fa 89       	ldd	r31, Y+18	; 0x12
   12d74:	24 a5       	ldd	r18, Z+44	; 0x2c
   12d76:	30 e0       	ldi	r19, 0x00	; 0
   12d78:	40 e0       	ldi	r20, 0x00	; 0
   12d7a:	50 e0       	ldi	r21, 0x00	; 0
   12d7c:	68 e0       	ldi	r22, 0x08	; 8
   12d7e:	88 e1       	ldi	r24, 0x18	; 24
   12d80:	23 dd       	rcall	.-1466   	; 0x127c8 <print_tok_val>
   12d82:	64 e0       	ldi	r22, 0x04	; 4
   12d84:	81 e1       	ldi	r24, 0x11	; 17
   12d86:	95 dd       	rcall	.-1238   	; 0x128b2 <print_tok>
   12d88:	e9 89       	ldd	r30, Y+17	; 0x11
   12d8a:	fa 89       	ldd	r31, Y+18	; 0x12
   12d8c:	80 a5       	ldd	r24, Z+40	; 0x28
   12d8e:	91 a5       	ldd	r25, Z+41	; 0x29
   12d90:	a2 a5       	ldd	r26, Z+42	; 0x2a
   12d92:	b3 a5       	ldd	r27, Z+43	; 0x2b
   12d94:	01 96       	adiw	r24, 0x01	; 1
   12d96:	a1 1d       	adc	r26, r1
   12d98:	b1 1d       	adc	r27, r1
   12d9a:	ed b7       	in	r30, 0x3d	; 61
   12d9c:	fe b7       	in	r31, 0x3e	; 62
   12d9e:	84 83       	std	Z+4, r24	; 0x04
   12da0:	95 83       	std	Z+5, r25	; 0x05
   12da2:	a6 83       	std	Z+6, r26	; 0x06
   12da4:	b7 83       	std	Z+7, r27	; 0x07
   12da6:	2e e9       	ldi	r18, 0x9E	; 158
   12da8:	3c e1       	ldi	r19, 0x1C	; 28
   12daa:	c9 01       	movw	r24, r18
   12dac:	a0 e0       	ldi	r26, 0x00	; 0
   12dae:	81 83       	std	Z+1, r24	; 0x01
   12db0:	92 83       	std	Z+2, r25	; 0x02
   12db2:	a3 83       	std	Z+3, r26	; 0x03
   12db4:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
   12db8:	60 e0       	ldi	r22, 0x00	; 0
   12dba:	81 e1       	ldi	r24, 0x11	; 17
   12dbc:	7a dd       	rcall	.-1292   	; 0x128b2 <print_tok>
   12dbe:	f8 01       	movw	r30, r16
   12dc0:	80 81       	ld	r24, Z
   12dc2:	81 30       	cpi	r24, 0x01	; 1
   12dc4:	09 f0       	breq	.+2      	; 0x12dc8 <display_Config+0x322>
   12dc6:	a8 c0       	rjmp	.+336    	; 0x12f18 <display_Config+0x472>
   12dc8:	27 81       	ldd	r18, Z+7	; 0x07
   12dca:	30 85       	ldd	r19, Z+8	; 0x08
   12dcc:	3a 8b       	std	Y+18, r19	; 0x12
   12dce:	29 8b       	std	Y+17, r18	; 0x11
   12dd0:	f9 01       	movw	r30, r18
   12dd2:	84 81       	ldd	r24, Z+4	; 0x04
   12dd4:	95 81       	ldd	r25, Z+5	; 0x05
   12dd6:	ed b7       	in	r30, 0x3d	; 61
   12dd8:	fe b7       	in	r31, 0x3e	; 62
   12dda:	95 83       	std	Z+5, r25	; 0x05
   12ddc:	84 83       	std	Z+4, r24	; 0x04
   12dde:	c1 82       	std	Z+1, r12	; 0x01
   12de0:	d2 82       	std	Z+2, r13	; 0x02
   12de2:	e3 82       	std	Z+3, r14	; 0x03
   12de4:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
   12de8:	e9 89       	ldd	r30, Y+17	; 0x11
   12dea:	fa 89       	ldd	r31, Y+18	; 0x12
   12dec:	80 81       	ld	r24, Z
   12dee:	90 e0       	ldi	r25, 0x00	; 0
   12df0:	ed b7       	in	r30, 0x3d	; 61
   12df2:	fe b7       	in	r31, 0x3e	; 62
   12df4:	95 83       	std	Z+5, r25	; 0x05
   12df6:	84 83       	std	Z+4, r24	; 0x04
   12df8:	61 82       	std	Z+1, r6	; 0x01
   12dfa:	72 82       	std	Z+2, r7	; 0x02
   12dfc:	83 82       	std	Z+3, r8	; 0x03
   12dfe:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
   12e02:	64 e0       	ldi	r22, 0x04	; 4
   12e04:	85 e1       	ldi	r24, 0x15	; 21
   12e06:	55 dd       	rcall	.-1366   	; 0x128b2 <print_tok>
   12e08:	e9 89       	ldd	r30, Y+17	; 0x11
   12e0a:	fa 89       	ldd	r31, Y+18	; 0x12
   12e0c:	20 81       	ld	r18, Z
   12e0e:	30 e0       	ldi	r19, 0x00	; 0
   12e10:	40 e0       	ldi	r20, 0x00	; 0
   12e12:	50 e0       	ldi	r21, 0x00	; 0
   12e14:	68 e0       	ldi	r22, 0x08	; 8
   12e16:	81 e0       	ldi	r24, 0x01	; 1
   12e18:	d7 dc       	rcall	.-1618   	; 0x127c8 <print_tok_val>
   12e1a:	e9 89       	ldd	r30, Y+17	; 0x11
   12e1c:	fa 89       	ldd	r31, Y+18	; 0x12
   12e1e:	21 81       	ldd	r18, Z+1	; 0x01
   12e20:	30 e0       	ldi	r19, 0x00	; 0
   12e22:	40 e0       	ldi	r20, 0x00	; 0
   12e24:	50 e0       	ldi	r21, 0x00	; 0
   12e26:	68 e0       	ldi	r22, 0x08	; 8
   12e28:	8f e1       	ldi	r24, 0x1F	; 31
   12e2a:	ce dc       	rcall	.-1636   	; 0x127c8 <print_tok_val>
   12e2c:	e9 89       	ldd	r30, Y+17	; 0x11
   12e2e:	fa 89       	ldd	r31, Y+18	; 0x12
   12e30:	42 81       	ldd	r20, Z+2	; 0x02
   12e32:	53 81       	ldd	r21, Z+3	; 0x03
   12e34:	68 e0       	ldi	r22, 0x08	; 8
   12e36:	82 e1       	ldi	r24, 0x12	; 18
   12e38:	07 dd       	rcall	.-1522   	; 0x12848 <print_tok_str>
   12e3a:	64 e0       	ldi	r22, 0x04	; 4
   12e3c:	81 e1       	ldi	r24, 0x11	; 17
   12e3e:	39 dd       	rcall	.-1422   	; 0x128b2 <print_tok>
   12e40:	64 e0       	ldi	r22, 0x04	; 4
   12e42:	89 e0       	ldi	r24, 0x09	; 9
   12e44:	36 dd       	rcall	.-1428   	; 0x128b2 <print_tok>
   12e46:	e9 89       	ldd	r30, Y+17	; 0x11
   12e48:	fa 89       	ldd	r31, Y+18	; 0x12
   12e4a:	26 81       	ldd	r18, Z+6	; 0x06
   12e4c:	37 81       	ldd	r19, Z+7	; 0x07
   12e4e:	40 e0       	ldi	r20, 0x00	; 0
   12e50:	50 e0       	ldi	r21, 0x00	; 0
   12e52:	68 e0       	ldi	r22, 0x08	; 8
   12e54:	87 e1       	ldi	r24, 0x17	; 23
   12e56:	b8 dc       	rcall	.-1680   	; 0x127c8 <print_tok_val>
   12e58:	64 e0       	ldi	r22, 0x04	; 4
   12e5a:	81 e1       	ldi	r24, 0x11	; 17
   12e5c:	2a dd       	rcall	.-1452   	; 0x128b2 <print_tok>
   12e5e:	a1 14       	cp	r10, r1
   12e60:	b1 04       	cpc	r11, r1
   12e62:	91 f1       	breq	.+100    	; 0x12ec8 <display_Config+0x422>
   12e64:	64 e0       	ldi	r22, 0x04	; 4
   12e66:	84 e1       	ldi	r24, 0x14	; 20
   12e68:	24 dd       	rcall	.-1464   	; 0x128b2 <print_tok>
   12e6a:	e9 89       	ldd	r30, Y+17	; 0x11
   12e6c:	fa 89       	ldd	r31, Y+18	; 0x12
   12e6e:	20 85       	ldd	r18, Z+8	; 0x08
   12e70:	31 85       	ldd	r19, Z+9	; 0x09
   12e72:	03 2e       	mov	r0, r19
   12e74:	00 0c       	add	r0, r0
   12e76:	44 0b       	sbc	r20, r20
   12e78:	55 0b       	sbc	r21, r21
   12e7a:	68 e0       	ldi	r22, 0x08	; 8
   12e7c:	88 e0       	ldi	r24, 0x08	; 8
   12e7e:	a4 dc       	rcall	.-1720   	; 0x127c8 <print_tok_val>
   12e80:	e9 89       	ldd	r30, Y+17	; 0x11
   12e82:	fa 89       	ldd	r31, Y+18	; 0x12
   12e84:	22 85       	ldd	r18, Z+10	; 0x0a
   12e86:	33 85       	ldd	r19, Z+11	; 0x0b
   12e88:	03 2e       	mov	r0, r19
   12e8a:	00 0c       	add	r0, r0
   12e8c:	44 0b       	sbc	r20, r20
   12e8e:	55 0b       	sbc	r21, r21
   12e90:	68 e0       	ldi	r22, 0x08	; 8
   12e92:	82 e2       	ldi	r24, 0x22	; 34
   12e94:	99 dc       	rcall	.-1742   	; 0x127c8 <print_tok_val>
   12e96:	e9 89       	ldd	r30, Y+17	; 0x11
   12e98:	fa 89       	ldd	r31, Y+18	; 0x12
   12e9a:	24 85       	ldd	r18, Z+12	; 0x0c
   12e9c:	35 85       	ldd	r19, Z+13	; 0x0d
   12e9e:	03 2e       	mov	r0, r19
   12ea0:	00 0c       	add	r0, r0
   12ea2:	44 0b       	sbc	r20, r20
   12ea4:	55 0b       	sbc	r21, r21
   12ea6:	68 e0       	ldi	r22, 0x08	; 8
   12ea8:	86 e1       	ldi	r24, 0x16	; 22
   12eaa:	8e dc       	rcall	.-1764   	; 0x127c8 <print_tok_val>
   12eac:	e9 89       	ldd	r30, Y+17	; 0x11
   12eae:	fa 89       	ldd	r31, Y+18	; 0x12
   12eb0:	26 85       	ldd	r18, Z+14	; 0x0e
   12eb2:	37 85       	ldd	r19, Z+15	; 0x0f
   12eb4:	03 2e       	mov	r0, r19
   12eb6:	00 0c       	add	r0, r0
   12eb8:	44 0b       	sbc	r20, r20
   12eba:	55 0b       	sbc	r21, r21
   12ebc:	68 e0       	ldi	r22, 0x08	; 8
   12ebe:	8d e0       	ldi	r24, 0x0D	; 13
   12ec0:	83 dc       	rcall	.-1786   	; 0x127c8 <print_tok_val>
   12ec2:	64 e0       	ldi	r22, 0x04	; 4
   12ec4:	81 e1       	ldi	r24, 0x11	; 17
   12ec6:	f5 dc       	rcall	.-1558   	; 0x128b2 <print_tok>
   12ec8:	e9 89       	ldd	r30, Y+17	; 0x11
   12eca:	fa 89       	ldd	r31, Y+18	; 0x12
   12ecc:	46 85       	ldd	r20, Z+14	; 0x0e
   12ece:	57 85       	ldd	r21, Z+15	; 0x0f
   12ed0:	22 85       	ldd	r18, Z+10	; 0x0a
   12ed2:	33 85       	ldd	r19, Z+11	; 0x0b
   12ed4:	42 9f       	mul	r20, r18
   12ed6:	c0 01       	movw	r24, r0
   12ed8:	43 9f       	mul	r20, r19
   12eda:	90 0d       	add	r25, r0
   12edc:	52 9f       	mul	r21, r18
   12ede:	90 0d       	add	r25, r0
   12ee0:	11 24       	eor	r1, r1
   12ee2:	44 85       	ldd	r20, Z+12	; 0x0c
   12ee4:	55 85       	ldd	r21, Z+13	; 0x0d
   12ee6:	84 9f       	mul	r24, r20
   12ee8:	90 01       	movw	r18, r0
   12eea:	85 9f       	mul	r24, r21
   12eec:	30 0d       	add	r19, r0
   12eee:	94 9f       	mul	r25, r20
   12ef0:	30 0d       	add	r19, r0
   12ef2:	11 24       	eor	r1, r1
   12ef4:	c9 01       	movw	r24, r18
   12ef6:	33 0f       	add	r19, r19
   12ef8:	aa 0b       	sbc	r26, r26
   12efa:	bb 0b       	sbc	r27, r27
   12efc:	ed b7       	in	r30, 0x3d	; 61
   12efe:	fe b7       	in	r31, 0x3e	; 62
   12f00:	84 83       	std	Z+4, r24	; 0x04
   12f02:	95 83       	std	Z+5, r25	; 0x05
   12f04:	a6 83       	std	Z+6, r26	; 0x06
   12f06:	b7 83       	std	Z+7, r27	; 0x07
   12f08:	21 82       	std	Z+1, r2	; 0x01
   12f0a:	32 82       	std	Z+2, r3	; 0x02
   12f0c:	43 82       	std	Z+3, r4	; 0x03
   12f0e:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
   12f12:	60 e0       	ldi	r22, 0x00	; 0
   12f14:	81 e1       	ldi	r24, 0x11	; 17
   12f16:	cd dc       	rcall	.-1638   	; 0x128b2 <print_tok>
   12f18:	f8 01       	movw	r30, r16
   12f1a:	80 81       	ld	r24, Z
   12f1c:	84 30       	cpi	r24, 0x04	; 4
   12f1e:	c9 f4       	brne	.+50     	; 0x12f52 <display_Config+0x4ac>
   12f20:	27 81       	ldd	r18, Z+7	; 0x07
   12f22:	30 85       	ldd	r19, Z+8	; 0x08
   12f24:	3a 8b       	std	Y+18, r19	; 0x12
   12f26:	29 8b       	std	Y+17, r18	; 0x11
   12f28:	60 e0       	ldi	r22, 0x00	; 0
   12f2a:	80 e2       	ldi	r24, 0x20	; 32
   12f2c:	c2 dc       	rcall	.-1660   	; 0x128b2 <print_tok>
   12f2e:	64 e0       	ldi	r22, 0x04	; 4
   12f30:	89 e0       	ldi	r24, 0x09	; 9
   12f32:	bf dc       	rcall	.-1666   	; 0x128b2 <print_tok>
   12f34:	e9 89       	ldd	r30, Y+17	; 0x11
   12f36:	fa 89       	ldd	r31, Y+18	; 0x12
   12f38:	20 81       	ld	r18, Z
   12f3a:	30 e0       	ldi	r19, 0x00	; 0
   12f3c:	40 e0       	ldi	r20, 0x00	; 0
   12f3e:	50 e0       	ldi	r21, 0x00	; 0
   12f40:	68 e0       	ldi	r22, 0x08	; 8
   12f42:	81 e0       	ldi	r24, 0x01	; 1
   12f44:	41 dc       	rcall	.-1918   	; 0x127c8 <print_tok_val>
   12f46:	64 e0       	ldi	r22, 0x04	; 4
   12f48:	81 e1       	ldi	r24, 0x11	; 17
   12f4a:	b3 dc       	rcall	.-1690   	; 0x128b2 <print_tok>
   12f4c:	60 e0       	ldi	r22, 0x00	; 0
   12f4e:	81 e1       	ldi	r24, 0x11	; 17
   12f50:	b0 dc       	rcall	.-1696   	; 0x128b2 <print_tok>
   12f52:	28 85       	ldd	r18, Y+8	; 0x08
   12f54:	39 85       	ldd	r19, Y+9	; 0x09
   12f56:	4a 85       	ldd	r20, Y+10	; 0x0a
   12f58:	ed b7       	in	r30, 0x3d	; 61
   12f5a:	fe b7       	in	r31, 0x3e	; 62
   12f5c:	21 83       	std	Z+1, r18	; 0x01
   12f5e:	32 83       	std	Z+2, r19	; 0x02
   12f60:	43 83       	std	Z+3, r20	; 0x03
   12f62:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
   12f66:	05 5f       	subi	r16, 0xF5	; 245
   12f68:	1f 4f       	sbci	r17, 0xFF	; 255
   12f6a:	28 e7       	ldi	r18, 0x78	; 120
   12f6c:	3f e1       	ldi	r19, 0x1F	; 31
   12f6e:	20 17       	cp	r18, r16
   12f70:	31 07       	cpc	r19, r17
   12f72:	09 f0       	breq	.+2      	; 0x12f76 <display_Config+0x4d0>
   12f74:	dd cd       	rjmp	.-1094   	; 0x12b30 <display_Config+0x8a>
   12f76:	8d e5       	ldi	r24, 0x5D	; 93
   12f78:	9c e1       	ldi	r25, 0x1C	; 28
   12f7a:	a0 e0       	ldi	r26, 0x00	; 0
   12f7c:	ed b7       	in	r30, 0x3d	; 61
   12f7e:	fe b7       	in	r31, 0x3e	; 62
   12f80:	81 83       	std	Z+1, r24	; 0x01
   12f82:	92 83       	std	Z+2, r25	; 0x02
   12f84:	a3 83       	std	Z+3, r26	; 0x03
   12f86:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
   12f8a:	62 96       	adiw	r28, 0x12	; 18
   12f8c:	0f b6       	in	r0, 0x3f	; 63
   12f8e:	f8 94       	cli
   12f90:	de bf       	out	0x3e, r29	; 62
   12f92:	0f be       	out	0x3f, r0	; 63
   12f94:	cd bf       	out	0x3d, r28	; 61
   12f96:	df 91       	pop	r29
   12f98:	cf 91       	pop	r28
   12f9a:	1f 91       	pop	r17
   12f9c:	0f 91       	pop	r16
   12f9e:	ef 90       	pop	r14
   12fa0:	df 90       	pop	r13
   12fa2:	cf 90       	pop	r12
   12fa4:	bf 90       	pop	r11
   12fa6:	af 90       	pop	r10
   12fa8:	8f 90       	pop	r8
   12faa:	7f 90       	pop	r7
   12fac:	6f 90       	pop	r6
   12fae:	4f 90       	pop	r4
   12fb0:	3f 90       	pop	r3
   12fb2:	2f 90       	pop	r2
   12fb4:	08 95       	ret

00012fb6 <find_type>:
   12fb6:	e4 ef       	ldi	r30, 0xF4	; 244
   12fb8:	fe e1       	ldi	r31, 0x1E	; 30
   12fba:	20 e0       	ldi	r18, 0x00	; 0
   12fbc:	30 e0       	ldi	r19, 0x00	; 0
   12fbe:	40 81       	ld	r20, Z
   12fc0:	50 e0       	ldi	r21, 0x00	; 0
   12fc2:	48 17       	cp	r20, r24
   12fc4:	59 07       	cpc	r21, r25
   12fc6:	11 f4       	brne	.+4      	; 0x12fcc <find_type+0x16>
   12fc8:	82 2f       	mov	r24, r18
   12fca:	08 95       	ret
   12fcc:	2f 5f       	subi	r18, 0xFF	; 255
   12fce:	3f 4f       	sbci	r19, 0xFF	; 255
   12fd0:	3b 96       	adiw	r30, 0x0b	; 11
   12fd2:	2c 30       	cpi	r18, 0x0C	; 12
   12fd4:	31 05       	cpc	r19, r1
   12fd6:	99 f7       	brne	.-26     	; 0x12fbe <find_type+0x8>
   12fd8:	8f ef       	ldi	r24, 0xFF	; 255
   12fda:	08 95       	ret

00012fdc <count_drive_types>:
   12fdc:	e4 ef       	ldi	r30, 0xF4	; 244
   12fde:	fe e1       	ldi	r31, 0x1E	; 30
   12fe0:	20 e0       	ldi	r18, 0x00	; 0
   12fe2:	30 e0       	ldi	r19, 0x00	; 0
   12fe4:	90 81       	ld	r25, Z
   12fe6:	98 13       	cpse	r25, r24
   12fe8:	02 c0       	rjmp	.+4      	; 0x12fee <count_drive_types+0x12>
   12fea:	2f 5f       	subi	r18, 0xFF	; 255
   12fec:	3f 4f       	sbci	r19, 0xFF	; 255
   12fee:	3b 96       	adiw	r30, 0x0b	; 11
   12ff0:	9f e1       	ldi	r25, 0x1F	; 31
   12ff2:	e8 37       	cpi	r30, 0x78	; 120
   12ff4:	f9 07       	cpc	r31, r25
   12ff6:	b1 f7       	brne	.-20     	; 0x12fe4 <count_drive_types+0x8>
   12ff8:	82 2f       	mov	r24, r18
   12ffa:	08 95       	ret

00012ffc <type_to_str>:
   12ffc:	00 97       	sbiw	r24, 0x00	; 0
   12ffe:	59 f0       	breq	.+22     	; 0x13016 <type_to_str+0x1a>
   13000:	81 30       	cpi	r24, 0x01	; 1
   13002:	91 05       	cpc	r25, r1
   13004:	59 f0       	breq	.+22     	; 0x1301c <type_to_str+0x20>
   13006:	83 30       	cpi	r24, 0x03	; 3
   13008:	91 05       	cpc	r25, r1
   1300a:	59 f0       	breq	.+22     	; 0x13022 <type_to_str+0x26>
   1300c:	04 97       	sbiw	r24, 0x04	; 4
   1300e:	61 f0       	breq	.+24     	; 0x13028 <type_to_str+0x2c>
   13010:	8c ef       	ldi	r24, 0xFC	; 252
   13012:	9d e0       	ldi	r25, 0x0D	; 13
   13014:	08 95       	ret
   13016:	82 ed       	ldi	r24, 0xD2	; 210
   13018:	9d e0       	ldi	r25, 0x0D	; 13
   1301a:	08 95       	ret
   1301c:	8a ed       	ldi	r24, 0xDA	; 218
   1301e:	9d e0       	ldi	r25, 0x0D	; 13
   13020:	08 95       	ret
   13022:	82 ef       	ldi	r24, 0xF2	; 242
   13024:	9d e0       	ldi	r25, 0x0D	; 13
   13026:	08 95       	ret
   13028:	85 ee       	ldi	r24, 0xE5	; 229
   1302a:	9d e0       	ldi	r25, 0x0D	; 13
   1302c:	08 95       	ret

0001302e <find_free>:
   1302e:	80 e0       	ldi	r24, 0x00	; 0
   13030:	90 e0       	ldi	r25, 0x00	; 0
   13032:	c1 cf       	rjmp	.-126    	; 0x12fb6 <find_type>
   13034:	08 95       	ret

00013036 <find_device>:
   13036:	9b 01       	movw	r18, r22
   13038:	20 52       	subi	r18, 0x20	; 32
   1303a:	31 09       	sbc	r19, r1
   1303c:	2f 35       	cpi	r18, 0x5F	; 95
   1303e:	31 05       	cpc	r19, r1
   13040:	08 f5       	brcc	.+66     	; 0x13084 <find_device+0x4e>
   13042:	64 17       	cp	r22, r20
   13044:	75 07       	cpc	r23, r21
   13046:	f4 f0       	brlt	.+60     	; 0x13084 <find_device+0x4e>
   13048:	9a 01       	movw	r18, r20
   1304a:	22 5e       	subi	r18, 0xE2	; 226
   1304c:	3f 4f       	sbci	r19, 0xFF	; 255
   1304e:	26 17       	cp	r18, r22
   13050:	37 07       	cpc	r19, r23
   13052:	c4 f0       	brlt	.+48     	; 0x13084 <find_device+0x4e>
   13054:	64 1b       	sub	r22, r20
   13056:	75 0b       	sbc	r23, r21
   13058:	e4 ef       	ldi	r30, 0xF4	; 244
   1305a:	fe e1       	ldi	r31, 0x1E	; 30
   1305c:	20 e0       	ldi	r18, 0x00	; 0
   1305e:	30 e0       	ldi	r19, 0x00	; 0
   13060:	40 81       	ld	r20, Z
   13062:	50 e0       	ldi	r21, 0x00	; 0
   13064:	48 17       	cp	r20, r24
   13066:	59 07       	cpc	r21, r25
   13068:	39 f4       	brne	.+14     	; 0x13078 <find_device+0x42>
   1306a:	41 81       	ldd	r20, Z+1	; 0x01
   1306c:	50 e0       	ldi	r21, 0x00	; 0
   1306e:	64 17       	cp	r22, r20
   13070:	75 07       	cpc	r23, r21
   13072:	11 f4       	brne	.+4      	; 0x13078 <find_device+0x42>
   13074:	82 2f       	mov	r24, r18
   13076:	08 95       	ret
   13078:	2f 5f       	subi	r18, 0xFF	; 255
   1307a:	3f 4f       	sbci	r19, 0xFF	; 255
   1307c:	3b 96       	adiw	r30, 0x0b	; 11
   1307e:	2c 30       	cpi	r18, 0x0C	; 12
   13080:	31 05       	cpc	r19, r1
   13082:	71 f7       	brne	.-36     	; 0x13060 <find_device+0x2a>
   13084:	8f ef       	ldi	r24, 0xFF	; 255
   13086:	08 95       	ret

00013088 <set_active_device>:
   13088:	a9 e0       	ldi	r26, 0x09	; 9
   1308a:	b0 e0       	ldi	r27, 0x00	; 0
   1308c:	ea e4       	ldi	r30, 0x4A	; 74
   1308e:	f8 e9       	ldi	r31, 0x98	; 152
   13090:	0c 94 b2 e8 	jmp	0x1d164	; 0x1d164 <__prologue_saves__+0x1c>
   13094:	8f 3f       	cpi	r24, 0xFF	; 255
   13096:	09 f4       	brne	.+2      	; 0x1309a <set_active_device+0x12>
   13098:	b5 c0       	rjmp	.+362    	; 0x13204 <set_active_device+0x17c>
   1309a:	e8 2f       	mov	r30, r24
   1309c:	8c 30       	cpi	r24, 0x0C	; 12
   1309e:	a0 f0       	brcs	.+40     	; 0x130c8 <set_active_device+0x40>
   130a0:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   130a4:	80 ff       	sbrs	r24, 0
   130a6:	ae c0       	rjmp	.+348    	; 0x13204 <set_active_device+0x17c>
   130a8:	0e 2e       	mov	r0, r30
   130aa:	00 0c       	add	r0, r0
   130ac:	ff 0b       	sbc	r31, r31
   130ae:	cd b7       	in	r28, 0x3d	; 61
   130b0:	de b7       	in	r29, 0x3e	; 62
   130b2:	fd 83       	std	Y+5, r31	; 0x05
   130b4:	ec 83       	std	Y+4, r30	; 0x04
   130b6:	88 e3       	ldi	r24, 0x38	; 56
   130b8:	9c e1       	ldi	r25, 0x1C	; 28
   130ba:	a0 e0       	ldi	r26, 0x00	; 0
   130bc:	89 83       	std	Y+1, r24	; 0x01
   130be:	9a 83       	std	Y+2, r25	; 0x02
   130c0:	ab 83       	std	Y+3, r26	; 0x03
   130c2:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
   130c6:	9e c0       	rjmp	.+316    	; 0x13204 <set_active_device+0x17c>
   130c8:	08 2f       	mov	r16, r24
   130ca:	88 0f       	add	r24, r24
   130cc:	11 0b       	sbc	r17, r17
   130ce:	8b e0       	ldi	r24, 0x0B	; 11
   130d0:	e8 02       	muls	r30, r24
   130d2:	f0 01       	movw	r30, r0
   130d4:	11 24       	eor	r1, r1
   130d6:	ec 50       	subi	r30, 0x0C	; 12
   130d8:	f1 4e       	sbci	r31, 0xE1	; 225
   130da:	81 81       	ldd	r24, Z+1	; 0x01
   130dc:	8f 31       	cpi	r24, 0x1F	; 31
   130de:	a0 f0       	brcs	.+40     	; 0x13108 <set_active_device+0x80>
   130e0:	90 91 b6 01 	lds	r25, 0x01B6	; 0x8001b6 <debuglevel>
   130e4:	90 ff       	sbrs	r25, 0
   130e6:	8e c0       	rjmp	.+284    	; 0x13204 <set_active_device+0x17c>
   130e8:	90 e0       	ldi	r25, 0x00	; 0
   130ea:	cd b7       	in	r28, 0x3d	; 61
   130ec:	de b7       	in	r29, 0x3e	; 62
   130ee:	9f 83       	std	Y+7, r25	; 0x07
   130f0:	8e 83       	std	Y+6, r24	; 0x06
   130f2:	1d 83       	std	Y+5, r17	; 0x05
   130f4:	0c 83       	std	Y+4, r16	; 0x04
   130f6:	8f ef       	ldi	r24, 0xFF	; 255
   130f8:	9b e1       	ldi	r25, 0x1B	; 27
   130fa:	a0 e0       	ldi	r26, 0x00	; 0
   130fc:	89 83       	std	Y+1, r24	; 0x01
   130fe:	9a 83       	std	Y+2, r25	; 0x02
   13100:	ab 83       	std	Y+3, r26	; 0x03
   13102:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
   13106:	7e c0       	rjmp	.+252    	; 0x13204 <set_active_device+0x17c>
   13108:	20 81       	ld	r18, Z
   1310a:	c2 2f       	mov	r28, r18
   1310c:	d0 e0       	ldi	r29, 0x00	; 0
   1310e:	87 81       	ldd	r24, Z+7	; 0x07
   13110:	90 85       	ldd	r25, Z+8	; 0x08
   13112:	00 97       	sbiw	r24, 0x00	; 0
   13114:	89 f4       	brne	.+34     	; 0x13138 <set_active_device+0xb0>
   13116:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1311a:	80 ff       	sbrs	r24, 0
   1311c:	73 c0       	rjmp	.+230    	; 0x13204 <set_active_device+0x17c>
   1311e:	ce 01       	movw	r24, r28
   13120:	6d df       	rcall	.-294    	; 0x12ffc <type_to_str>
   13122:	ed b7       	in	r30, 0x3d	; 61
   13124:	fe b7       	in	r31, 0x3e	; 62
   13126:	91 87       	std	Z+9, r25	; 0x09
   13128:	80 87       	std	Z+8, r24	; 0x08
   1312a:	d7 83       	std	Z+7, r29	; 0x07
   1312c:	c6 83       	std	Z+6, r28	; 0x06
   1312e:	15 83       	std	Z+5, r17	; 0x05
   13130:	04 83       	std	Z+4, r16	; 0x04
   13132:	8a ec       	ldi	r24, 0xCA	; 202
   13134:	9b e1       	ldi	r25, 0x1B	; 27
   13136:	5e c0       	rjmp	.+188    	; 0x131f4 <set_active_device+0x16c>
   13138:	20 97       	sbiw	r28, 0x00	; 0
   1313a:	91 f4       	brne	.+36     	; 0x13160 <set_active_device+0xd8>
   1313c:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   13140:	80 ff       	sbrs	r24, 0
   13142:	60 c0       	rjmp	.+192    	; 0x13204 <set_active_device+0x17c>
   13144:	80 e0       	ldi	r24, 0x00	; 0
   13146:	90 e0       	ldi	r25, 0x00	; 0
   13148:	59 df       	rcall	.-334    	; 0x12ffc <type_to_str>
   1314a:	ed b7       	in	r30, 0x3d	; 61
   1314c:	fe b7       	in	r31, 0x3e	; 62
   1314e:	91 87       	std	Z+9, r25	; 0x09
   13150:	80 87       	std	Z+8, r24	; 0x08
   13152:	17 82       	std	Z+7, r1	; 0x07
   13154:	16 82       	std	Z+6, r1	; 0x06
   13156:	15 83       	std	Z+5, r17	; 0x05
   13158:	04 83       	std	Z+4, r16	; 0x04
   1315a:	85 e9       	ldi	r24, 0x95	; 149
   1315c:	9b e1       	ldi	r25, 0x1B	; 27
   1315e:	4a c0       	rjmp	.+148    	; 0x131f4 <set_active_device+0x16c>
   13160:	c4 30       	cpi	r28, 0x04	; 4
   13162:	d1 05       	cpc	r29, r1
   13164:	29 f4       	brne	.+10     	; 0x13170 <set_active_device+0xe8>
   13166:	90 93 6b 19 	sts	0x196B, r25	; 0x80196b <PRINTERp+0x1>
   1316a:	80 93 6a 19 	sts	0x196A, r24	; 0x80196a <PRINTERp>
   1316e:	30 c0       	rjmp	.+96     	; 0x131d0 <set_active_device+0x148>
   13170:	2d 7f       	andi	r18, 0xFD	; 253
   13172:	21 30       	cpi	r18, 0x01	; 1
   13174:	79 f5       	brne	.+94     	; 0x131d4 <set_active_device+0x14c>
   13176:	21 85       	ldd	r18, Z+9	; 0x09
   13178:	32 85       	ldd	r19, Z+10	; 0x0a
   1317a:	21 15       	cp	r18, r1
   1317c:	31 05       	cpc	r19, r1
   1317e:	89 f4       	brne	.+34     	; 0x131a2 <set_active_device+0x11a>
   13180:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   13184:	80 ff       	sbrs	r24, 0
   13186:	3e c0       	rjmp	.+124    	; 0x13204 <set_active_device+0x17c>
   13188:	ce 01       	movw	r24, r28
   1318a:	38 df       	rcall	.-400    	; 0x12ffc <type_to_str>
   1318c:	ed b7       	in	r30, 0x3d	; 61
   1318e:	fe b7       	in	r31, 0x3e	; 62
   13190:	91 87       	std	Z+9, r25	; 0x09
   13192:	80 87       	std	Z+8, r24	; 0x08
   13194:	d7 83       	std	Z+7, r29	; 0x07
   13196:	c6 83       	std	Z+6, r28	; 0x06
   13198:	15 83       	std	Z+5, r17	; 0x05
   1319a:	04 83       	std	Z+4, r16	; 0x04
   1319c:	8d e5       	ldi	r24, 0x5D	; 93
   1319e:	9b e1       	ldi	r25, 0x1B	; 27
   131a0:	29 c0       	rjmp	.+82     	; 0x131f4 <set_active_device+0x16c>
   131a2:	c1 30       	cpi	r28, 0x01	; 1
   131a4:	d1 05       	cpc	r29, r1
   131a6:	49 f4       	brne	.+18     	; 0x131ba <set_active_device+0x132>
   131a8:	90 93 65 19 	sts	0x1965, r25	; 0x801965 <AMIGOp+0x1>
   131ac:	80 93 64 19 	sts	0x1964, r24	; 0x801964 <AMIGOp>
   131b0:	30 93 63 19 	sts	0x1963, r19	; 0x801963 <AMIGOs+0x1>
   131b4:	20 93 62 19 	sts	0x1962, r18	; 0x801962 <AMIGOs>
   131b8:	0b c0       	rjmp	.+22     	; 0x131d0 <set_active_device+0x148>
   131ba:	c3 30       	cpi	r28, 0x03	; 3
   131bc:	d1 05       	cpc	r29, r1
   131be:	51 f4       	brne	.+20     	; 0x131d4 <set_active_device+0x14c>
   131c0:	90 93 69 19 	sts	0x1969, r25	; 0x801969 <SS80p+0x1>
   131c4:	80 93 68 19 	sts	0x1968, r24	; 0x801968 <SS80p>
   131c8:	30 93 67 19 	sts	0x1967, r19	; 0x801967 <SS80s+0x1>
   131cc:	20 93 66 19 	sts	0x1966, r18	; 0x801966 <SS80s>
   131d0:	81 e0       	ldi	r24, 0x01	; 1
   131d2:	19 c0       	rjmp	.+50     	; 0x13206 <set_active_device+0x17e>
   131d4:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   131d8:	80 ff       	sbrs	r24, 0
   131da:	14 c0       	rjmp	.+40     	; 0x13204 <set_active_device+0x17c>
   131dc:	ce 01       	movw	r24, r28
   131de:	0e df       	rcall	.-484    	; 0x12ffc <type_to_str>
   131e0:	ed b7       	in	r30, 0x3d	; 61
   131e2:	fe b7       	in	r31, 0x3e	; 62
   131e4:	91 87       	std	Z+9, r25	; 0x09
   131e6:	80 87       	std	Z+8, r24	; 0x08
   131e8:	d7 83       	std	Z+7, r29	; 0x07
   131ea:	c6 83       	std	Z+6, r28	; 0x06
   131ec:	15 83       	std	Z+5, r17	; 0x05
   131ee:	04 83       	std	Z+4, r16	; 0x04
   131f0:	82 e3       	ldi	r24, 0x32	; 50
   131f2:	9b e1       	ldi	r25, 0x1B	; 27
   131f4:	a0 e0       	ldi	r26, 0x00	; 0
   131f6:	cd b7       	in	r28, 0x3d	; 61
   131f8:	de b7       	in	r29, 0x3e	; 62
   131fa:	89 83       	std	Y+1, r24	; 0x01
   131fc:	9a 83       	std	Y+2, r25	; 0x02
   131fe:	ab 83       	std	Y+3, r26	; 0x03
   13200:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
   13204:	80 e0       	ldi	r24, 0x00	; 0
   13206:	cd b7       	in	r28, 0x3d	; 61
   13208:	de b7       	in	r29, 0x3e	; 62
   1320a:	29 96       	adiw	r28, 0x09	; 9
   1320c:	e4 e0       	ldi	r30, 0x04	; 4
   1320e:	0c 94 ce e8 	jmp	0x1d19c	; 0x1d19c <__epilogue_restores__+0x1c>

00013212 <SS80_Set_Defaults>:
   13212:	0f 93       	push	r16
   13214:	1f 93       	push	r17
   13216:	cf 93       	push	r28
   13218:	df 93       	push	r29
   1321a:	18 2f       	mov	r17, r24
   1321c:	82 e0       	ldi	r24, 0x02	; 2
   1321e:	90 e0       	ldi	r25, 0x00	; 0
   13220:	ca de       	rcall	.-620    	; 0x12fb6 <find_type>
   13222:	87 fd       	sbrc	r24, 7
   13224:	69 c0       	rjmp	.+210    	; 0x132f8 <SS80_Set_Defaults+0xe6>
   13226:	2b e0       	ldi	r18, 0x0B	; 11
   13228:	12 03       	mulsu	r17, r18
   1322a:	e0 01       	movw	r28, r0
   1322c:	11 24       	eor	r1, r1
   1322e:	cc 50       	subi	r28, 0x0C	; 12
   13230:	d1 4e       	sbci	r29, 0xE1	; 225
   13232:	0f 80       	ldd	r0, Y+7	; 0x07
   13234:	d8 85       	ldd	r29, Y+8	; 0x08
   13236:	c0 2d       	mov	r28, r0
   13238:	38 2f       	mov	r19, r24
   1323a:	32 03       	mulsu	r19, r18
   1323c:	f0 01       	movw	r30, r0
   1323e:	11 24       	eor	r1, r1
   13240:	ec 50       	subi	r30, 0x0C	; 12
   13242:	f1 4e       	sbci	r31, 0xE1	; 225
   13244:	07 81       	ldd	r16, Z+7	; 0x07
   13246:	10 85       	ldd	r17, Z+8	; 0x08
   13248:	f8 01       	movw	r30, r16
   1324a:	80 81       	ld	r24, Z
   1324c:	88 83       	st	Y, r24
   1324e:	81 81       	ldd	r24, Z+1	; 0x01
   13250:	89 83       	std	Y+1, r24	; 0x01
   13252:	82 81       	ldd	r24, Z+2	; 0x02
   13254:	93 81       	ldd	r25, Z+3	; 0x03
   13256:	0e 94 eb 32 	call	0x65d6	; 0x65d6 <stralloc>
   1325a:	9b 83       	std	Y+3, r25	; 0x03
   1325c:	8a 83       	std	Y+2, r24	; 0x02
   1325e:	f8 01       	movw	r30, r16
   13260:	86 81       	ldd	r24, Z+6	; 0x06
   13262:	97 81       	ldd	r25, Z+7	; 0x07
   13264:	9f 83       	std	Y+7, r25	; 0x07
   13266:	8e 83       	std	Y+6, r24	; 0x06
   13268:	80 85       	ldd	r24, Z+8	; 0x08
   1326a:	91 85       	ldd	r25, Z+9	; 0x09
   1326c:	99 87       	std	Y+9, r25	; 0x09
   1326e:	88 87       	std	Y+8, r24	; 0x08
   13270:	82 85       	ldd	r24, Z+10	; 0x0a
   13272:	93 85       	ldd	r25, Z+11	; 0x0b
   13274:	9b 87       	std	Y+11, r25	; 0x0b
   13276:	8a 87       	std	Y+10, r24	; 0x0a
   13278:	84 85       	ldd	r24, Z+12	; 0x0c
   1327a:	8c 87       	std	Y+12, r24	; 0x0c
   1327c:	85 85       	ldd	r24, Z+13	; 0x0d
   1327e:	8d 87       	std	Y+13, r24	; 0x0d
   13280:	86 85       	ldd	r24, Z+14	; 0x0e
   13282:	97 85       	ldd	r25, Z+15	; 0x0f
   13284:	a0 89       	ldd	r26, Z+16	; 0x10
   13286:	b1 89       	ldd	r27, Z+17	; 0x11
   13288:	8e 87       	std	Y+14, r24	; 0x0e
   1328a:	9f 87       	std	Y+15, r25	; 0x0f
   1328c:	a8 8b       	std	Y+16, r26	; 0x10
   1328e:	b9 8b       	std	Y+17, r27	; 0x11
   13290:	82 89       	ldd	r24, Z+18	; 0x12
   13292:	93 89       	ldd	r25, Z+19	; 0x13
   13294:	9b 8b       	std	Y+19, r25	; 0x13
   13296:	8a 8b       	std	Y+18, r24	; 0x12
   13298:	84 89       	ldd	r24, Z+20	; 0x14
   1329a:	8c 8b       	std	Y+20, r24	; 0x14
   1329c:	85 89       	ldd	r24, Z+21	; 0x15
   1329e:	8d 8b       	std	Y+21, r24	; 0x15
   132a0:	86 89       	ldd	r24, Z+22	; 0x16
   132a2:	97 89       	ldd	r25, Z+23	; 0x17
   132a4:	9f 8b       	std	Y+23, r25	; 0x17
   132a6:	8e 8b       	std	Y+22, r24	; 0x16
   132a8:	80 8d       	ldd	r24, Z+24	; 0x18
   132aa:	91 8d       	ldd	r25, Z+25	; 0x19
   132ac:	99 8f       	std	Y+25, r25	; 0x19
   132ae:	88 8f       	std	Y+24, r24	; 0x18
   132b0:	82 8d       	ldd	r24, Z+26	; 0x1a
   132b2:	93 8d       	ldd	r25, Z+27	; 0x1b
   132b4:	9b 8f       	std	Y+27, r25	; 0x1b
   132b6:	8a 8f       	std	Y+26, r24	; 0x1a
   132b8:	84 8d       	ldd	r24, Z+28	; 0x1c
   132ba:	95 8d       	ldd	r25, Z+29	; 0x1d
   132bc:	9d 8f       	std	Y+29, r25	; 0x1d
   132be:	8c 8f       	std	Y+28, r24	; 0x1c
   132c0:	86 8d       	ldd	r24, Z+30	; 0x1e
   132c2:	8e 8f       	std	Y+30, r24	; 0x1e
   132c4:	87 8d       	ldd	r24, Z+31	; 0x1f
   132c6:	8f 8f       	std	Y+31, r24	; 0x1f
   132c8:	81 a1       	ldd	r24, Z+33	; 0x21
   132ca:	92 a1       	ldd	r25, Z+34	; 0x22
   132cc:	a3 a1       	ldd	r26, Z+35	; 0x23
   132ce:	b4 a1       	ldd	r27, Z+36	; 0x24
   132d0:	89 a3       	std	Y+33, r24	; 0x21
   132d2:	9a a3       	std	Y+34, r25	; 0x22
   132d4:	ab a3       	std	Y+35, r26	; 0x23
   132d6:	bc a3       	std	Y+36, r27	; 0x24
   132d8:	85 a1       	ldd	r24, Z+37	; 0x25
   132da:	8d a3       	std	Y+37, r24	; 0x25
   132dc:	86 a1       	ldd	r24, Z+38	; 0x26
   132de:	97 a1       	ldd	r25, Z+39	; 0x27
   132e0:	9f a3       	std	Y+39, r25	; 0x27
   132e2:	8e a3       	std	Y+38, r24	; 0x26
   132e4:	80 a5       	ldd	r24, Z+40	; 0x28
   132e6:	91 a5       	ldd	r25, Z+41	; 0x29
   132e8:	a2 a5       	ldd	r26, Z+42	; 0x2a
   132ea:	b3 a5       	ldd	r27, Z+43	; 0x2b
   132ec:	88 a7       	std	Y+40, r24	; 0x28
   132ee:	99 a7       	std	Y+41, r25	; 0x29
   132f0:	aa a7       	std	Y+42, r26	; 0x2a
   132f2:	bb a7       	std	Y+43, r27	; 0x2b
   132f4:	84 a5       	ldd	r24, Z+44	; 0x2c
   132f6:	8c a7       	std	Y+44, r24	; 0x2c
   132f8:	df 91       	pop	r29
   132fa:	cf 91       	pop	r28
   132fc:	1f 91       	pop	r17
   132fe:	0f 91       	pop	r16
   13300:	08 95       	ret

00013302 <free_device>:
   13302:	0f 93       	push	r16
   13304:	1f 93       	push	r17
   13306:	cf 93       	push	r28
   13308:	df 93       	push	r29
   1330a:	8c 30       	cpi	r24, 0x0C	; 12
   1330c:	08 f0       	brcs	.+2      	; 0x13310 <free_device+0xe>
   1330e:	55 c0       	rjmp	.+170    	; 0x133ba <free_device+0xb8>
   13310:	08 2f       	mov	r16, r24
   13312:	08 2e       	mov	r0, r24
   13314:	00 0c       	add	r0, r0
   13316:	11 0b       	sbc	r17, r17
   13318:	9b e0       	ldi	r25, 0x0B	; 11
   1331a:	89 02       	muls	r24, r25
   1331c:	f0 01       	movw	r30, r0
   1331e:	11 24       	eor	r1, r1
   13320:	ec 50       	subi	r30, 0x0C	; 12
   13322:	f1 4e       	sbci	r31, 0xE1	; 225
   13324:	80 81       	ld	r24, Z
   13326:	83 30       	cpi	r24, 0x03	; 3
   13328:	51 f4       	brne	.+20     	; 0x1333e <free_device+0x3c>
   1332a:	c7 81       	ldd	r28, Z+7	; 0x07
   1332c:	d0 85       	ldd	r29, Z+8	; 0x08
   1332e:	8a 81       	ldd	r24, Y+2	; 0x02
   13330:	9b 81       	ldd	r25, Y+3	; 0x03
   13332:	0e 94 74 28 	call	0x50e8	; 0x50e8 <safefree>
   13336:	8c 81       	ldd	r24, Y+4	; 0x04
   13338:	9d 81       	ldd	r25, Y+5	; 0x05
   1333a:	0e 94 74 28 	call	0x50e8	; 0x50e8 <safefree>
   1333e:	8b e0       	ldi	r24, 0x0B	; 11
   13340:	80 9f       	mul	r24, r16
   13342:	f0 01       	movw	r30, r0
   13344:	81 9f       	mul	r24, r17
   13346:	f0 0d       	add	r31, r0
   13348:	11 24       	eor	r1, r1
   1334a:	ec 50       	subi	r30, 0x0C	; 12
   1334c:	f1 4e       	sbci	r31, 0xE1	; 225
   1334e:	80 81       	ld	r24, Z
   13350:	81 30       	cpi	r24, 0x01	; 1
   13352:	51 f4       	brne	.+20     	; 0x13368 <free_device+0x66>
   13354:	c7 81       	ldd	r28, Z+7	; 0x07
   13356:	d0 85       	ldd	r29, Z+8	; 0x08
   13358:	8a 81       	ldd	r24, Y+2	; 0x02
   1335a:	9b 81       	ldd	r25, Y+3	; 0x03
   1335c:	0e 94 74 28 	call	0x50e8	; 0x50e8 <safefree>
   13360:	8c 81       	ldd	r24, Y+4	; 0x04
   13362:	9d 81       	ldd	r25, Y+5	; 0x05
   13364:	0e 94 74 28 	call	0x50e8	; 0x50e8 <safefree>
   13368:	8b e0       	ldi	r24, 0x0B	; 11
   1336a:	80 9f       	mul	r24, r16
   1336c:	f0 01       	movw	r30, r0
   1336e:	81 9f       	mul	r24, r17
   13370:	f0 0d       	add	r31, r0
   13372:	11 24       	eor	r1, r1
   13374:	ec 50       	subi	r30, 0x0C	; 12
   13376:	f1 4e       	sbci	r31, 0xE1	; 225
   13378:	80 81       	ld	r24, Z
   1337a:	84 30       	cpi	r24, 0x04	; 4
   1337c:	11 f4       	brne	.+4      	; 0x13382 <free_device+0x80>
   1337e:	0e 94 96 bf 	call	0x17f2c	; 0x17f2c <printer_close>
   13382:	8b e0       	ldi	r24, 0x0B	; 11
   13384:	80 9f       	mul	r24, r16
   13386:	e0 01       	movw	r28, r0
   13388:	81 9f       	mul	r24, r17
   1338a:	d0 0d       	add	r29, r0
   1338c:	11 24       	eor	r1, r1
   1338e:	cc 50       	subi	r28, 0x0C	; 12
   13390:	d1 4e       	sbci	r29, 0xE1	; 225
   13392:	8f 81       	ldd	r24, Y+7	; 0x07
   13394:	98 85       	ldd	r25, Y+8	; 0x08
   13396:	0e 94 74 28 	call	0x50e8	; 0x50e8 <safefree>
   1339a:	89 85       	ldd	r24, Y+9	; 0x09
   1339c:	9a 85       	ldd	r25, Y+10	; 0x0a
   1339e:	0e 94 74 28 	call	0x50e8	; 0x50e8 <safefree>
   133a2:	18 82       	st	Y, r1
   133a4:	19 82       	std	Y+1, r1	; 0x01
   133a6:	8f ef       	ldi	r24, 0xFF	; 255
   133a8:	8a 83       	std	Y+2, r24	; 0x02
   133aa:	1b 82       	std	Y+3, r1	; 0x03
   133ac:	1c 82       	std	Y+4, r1	; 0x04
   133ae:	1d 82       	std	Y+5, r1	; 0x05
   133b0:	1e 82       	std	Y+6, r1	; 0x06
   133b2:	18 86       	std	Y+8, r1	; 0x08
   133b4:	1f 82       	std	Y+7, r1	; 0x07
   133b6:	1a 86       	std	Y+10, r1	; 0x0a
   133b8:	19 86       	std	Y+9, r1	; 0x09
   133ba:	df 91       	pop	r29
   133bc:	cf 91       	pop	r28
   133be:	1f 91       	pop	r17
   133c0:	0f 91       	pop	r16
   133c2:	08 95       	ret

000133c4 <alloc_device>:
   133c4:	0f 93       	push	r16
   133c6:	1f 93       	push	r17
   133c8:	cf 93       	push	r28
   133ca:	ad b7       	in	r26, 0x3d	; 61
   133cc:	be b7       	in	r27, 0x3e	; 62
   133ce:	17 97       	sbiw	r26, 0x07	; 7
   133d0:	0f b6       	in	r0, 0x3f	; 63
   133d2:	f8 94       	cli
   133d4:	be bf       	out	0x3e, r27	; 62
   133d6:	0f be       	out	0x3f, r0	; 63
   133d8:	ad bf       	out	0x3d, r26	; 61
   133da:	8c 01       	movw	r16, r24
   133dc:	28 de       	rcall	.-944    	; 0x1302e <find_free>
   133de:	c8 2f       	mov	r28, r24
   133e0:	8f 3f       	cpi	r24, 0xFF	; 255
   133e2:	89 f4       	brne	.+34     	; 0x13406 <alloc_device+0x42>
   133e4:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   133e8:	80 ff       	sbrs	r24, 0
   133ea:	98 c0       	rjmp	.+304    	; 0x1351c <alloc_device+0x158>
   133ec:	ed b7       	in	r30, 0x3d	; 61
   133ee:	fe b7       	in	r31, 0x3e	; 62
   133f0:	15 83       	std	Z+5, r17	; 0x05
   133f2:	04 83       	std	Z+4, r16	; 0x04
   133f4:	8e e0       	ldi	r24, 0x0E	; 14
   133f6:	9b e1       	ldi	r25, 0x1B	; 27
   133f8:	a0 e0       	ldi	r26, 0x00	; 0
   133fa:	81 83       	std	Z+1, r24	; 0x01
   133fc:	92 83       	std	Z+2, r25	; 0x02
   133fe:	a3 83       	std	Z+3, r26	; 0x03
   13400:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
   13404:	8b c0       	rjmp	.+278    	; 0x1351c <alloc_device+0x158>
   13406:	02 30       	cpi	r16, 0x02	; 2
   13408:	11 05       	cpc	r17, r1
   1340a:	c1 f1       	breq	.+112    	; 0x1347c <alloc_device+0xb8>
   1340c:	dc f4       	brge	.+54     	; 0x13444 <alloc_device+0x80>
   1340e:	01 30       	cpi	r16, 0x01	; 1
   13410:	11 05       	cpc	r17, r1
   13412:	09 f0       	breq	.+2      	; 0x13416 <alloc_device+0x52>
   13414:	6e c0       	rjmp	.+220    	; 0x134f2 <alloc_device+0x12e>
   13416:	fb e0       	ldi	r31, 0x0B	; 11
   13418:	8f 02       	muls	r24, r31
   1341a:	80 01       	movw	r16, r0
   1341c:	11 24       	eor	r1, r1
   1341e:	0c 50       	subi	r16, 0x0C	; 12
   13420:	11 4e       	sbci	r17, 0xE1	; 225
   13422:	81 e0       	ldi	r24, 0x01	; 1
   13424:	f8 01       	movw	r30, r16
   13426:	80 83       	st	Z, r24
   13428:	61 e0       	ldi	r22, 0x01	; 1
   1342a:	70 e0       	ldi	r23, 0x00	; 0
   1342c:	87 e1       	ldi	r24, 0x17	; 23
   1342e:	90 e0       	ldi	r25, 0x00	; 0
   13430:	0e 94 28 28 	call	0x5050	; 0x5050 <safecalloc>
   13434:	f8 01       	movw	r30, r16
   13436:	90 87       	std	Z+8, r25	; 0x08
   13438:	87 83       	std	Z+7, r24	; 0x07
   1343a:	61 e0       	ldi	r22, 0x01	; 1
   1343c:	70 e0       	ldi	r23, 0x00	; 0
   1343e:	88 e1       	ldi	r24, 0x18	; 24
   13440:	90 e0       	ldi	r25, 0x00	; 0
   13442:	51 c0       	rjmp	.+162    	; 0x134e6 <alloc_device+0x122>
   13444:	03 30       	cpi	r16, 0x03	; 3
   13446:	11 05       	cpc	r17, r1
   13448:	81 f1       	breq	.+96     	; 0x134aa <alloc_device+0xe6>
   1344a:	04 30       	cpi	r16, 0x04	; 4
   1344c:	11 05       	cpc	r17, r1
   1344e:	09 f0       	breq	.+2      	; 0x13452 <alloc_device+0x8e>
   13450:	50 c0       	rjmp	.+160    	; 0x134f2 <alloc_device+0x12e>
   13452:	fb e0       	ldi	r31, 0x0B	; 11
   13454:	8f 02       	muls	r24, r31
   13456:	80 01       	movw	r16, r0
   13458:	11 24       	eor	r1, r1
   1345a:	0c 50       	subi	r16, 0x0C	; 12
   1345c:	11 4e       	sbci	r17, 0xE1	; 225
   1345e:	84 e0       	ldi	r24, 0x04	; 4
   13460:	f8 01       	movw	r30, r16
   13462:	80 83       	st	Z, r24
   13464:	61 e0       	ldi	r22, 0x01	; 1
   13466:	70 e0       	ldi	r23, 0x00	; 0
   13468:	8d e0       	ldi	r24, 0x0D	; 13
   1346a:	90 e0       	ldi	r25, 0x00	; 0
   1346c:	0e 94 28 28 	call	0x5050	; 0x5050 <safecalloc>
   13470:	f8 01       	movw	r30, r16
   13472:	90 87       	std	Z+8, r25	; 0x08
   13474:	87 83       	std	Z+7, r24	; 0x07
   13476:	12 86       	std	Z+10, r1	; 0x0a
   13478:	11 86       	std	Z+9, r1	; 0x09
   1347a:	50 c0       	rjmp	.+160    	; 0x1351c <alloc_device+0x158>
   1347c:	fb e0       	ldi	r31, 0x0B	; 11
   1347e:	8f 02       	muls	r24, r31
   13480:	80 01       	movw	r16, r0
   13482:	11 24       	eor	r1, r1
   13484:	0c 50       	subi	r16, 0x0C	; 12
   13486:	11 4e       	sbci	r17, 0xE1	; 225
   13488:	82 e0       	ldi	r24, 0x02	; 2
   1348a:	f8 01       	movw	r30, r16
   1348c:	80 83       	st	Z, r24
   1348e:	61 e0       	ldi	r22, 0x01	; 1
   13490:	70 e0       	ldi	r23, 0x00	; 0
   13492:	84 e3       	ldi	r24, 0x34	; 52
   13494:	90 e0       	ldi	r25, 0x00	; 0
   13496:	0e 94 28 28 	call	0x5050	; 0x5050 <safecalloc>
   1349a:	f8 01       	movw	r30, r16
   1349c:	90 87       	std	Z+8, r25	; 0x08
   1349e:	87 83       	std	Z+7, r24	; 0x07
   134a0:	61 e0       	ldi	r22, 0x01	; 1
   134a2:	70 e0       	ldi	r23, 0x00	; 0
   134a4:	86 e1       	ldi	r24, 0x16	; 22
   134a6:	90 e0       	ldi	r25, 0x00	; 0
   134a8:	1e c0       	rjmp	.+60     	; 0x134e6 <alloc_device+0x122>
   134aa:	fb e0       	ldi	r31, 0x0B	; 11
   134ac:	8f 02       	muls	r24, r31
   134ae:	80 01       	movw	r16, r0
   134b0:	11 24       	eor	r1, r1
   134b2:	0c 50       	subi	r16, 0x0C	; 12
   134b4:	11 4e       	sbci	r17, 0xE1	; 225
   134b6:	83 e0       	ldi	r24, 0x03	; 3
   134b8:	f8 01       	movw	r30, r16
   134ba:	80 83       	st	Z, r24
   134bc:	61 e0       	ldi	r22, 0x01	; 1
   134be:	70 e0       	ldi	r23, 0x00	; 0
   134c0:	84 e3       	ldi	r24, 0x34	; 52
   134c2:	90 e0       	ldi	r25, 0x00	; 0
   134c4:	0e 94 28 28 	call	0x5050	; 0x5050 <safecalloc>
   134c8:	f8 01       	movw	r30, r16
   134ca:	90 87       	std	Z+8, r25	; 0x08
   134cc:	87 83       	std	Z+7, r24	; 0x07
   134ce:	61 e0       	ldi	r22, 0x01	; 1
   134d0:	70 e0       	ldi	r23, 0x00	; 0
   134d2:	86 e1       	ldi	r24, 0x16	; 22
   134d4:	90 e0       	ldi	r25, 0x00	; 0
   134d6:	0e 94 28 28 	call	0x5050	; 0x5050 <safecalloc>
   134da:	f8 01       	movw	r30, r16
   134dc:	92 87       	std	Z+10, r25	; 0x0a
   134de:	81 87       	std	Z+9, r24	; 0x09
   134e0:	8c 2f       	mov	r24, r28
   134e2:	97 de       	rcall	.-722    	; 0x13212 <SS80_Set_Defaults>
   134e4:	1b c0       	rjmp	.+54     	; 0x1351c <alloc_device+0x158>
   134e6:	0e 94 28 28 	call	0x5050	; 0x5050 <safecalloc>
   134ea:	f8 01       	movw	r30, r16
   134ec:	92 87       	std	Z+10, r25	; 0x0a
   134ee:	81 87       	std	Z+9, r24	; 0x09
   134f0:	15 c0       	rjmp	.+42     	; 0x1351c <alloc_device+0x158>
   134f2:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   134f6:	80 ff       	sbrs	r24, 0
   134f8:	10 c0       	rjmp	.+32     	; 0x1351a <alloc_device+0x156>
   134fa:	c8 01       	movw	r24, r16
   134fc:	7f dd       	rcall	.-1282   	; 0x12ffc <type_to_str>
   134fe:	ed b7       	in	r30, 0x3d	; 61
   13500:	fe b7       	in	r31, 0x3e	; 62
   13502:	97 83       	std	Z+7, r25	; 0x07
   13504:	86 83       	std	Z+6, r24	; 0x06
   13506:	15 83       	std	Z+5, r17	; 0x05
   13508:	04 83       	std	Z+4, r16	; 0x04
   1350a:	8c ee       	ldi	r24, 0xEC	; 236
   1350c:	9a e1       	ldi	r25, 0x1A	; 26
   1350e:	a0 e0       	ldi	r26, 0x00	; 0
   13510:	81 83       	std	Z+1, r24	; 0x01
   13512:	92 83       	std	Z+2, r25	; 0x02
   13514:	a3 83       	std	Z+3, r26	; 0x03
   13516:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
   1351a:	cf ef       	ldi	r28, 0xFF	; 255
   1351c:	8c 2f       	mov	r24, r28
   1351e:	ad b7       	in	r26, 0x3d	; 61
   13520:	be b7       	in	r27, 0x3e	; 62
   13522:	17 96       	adiw	r26, 0x07	; 7
   13524:	0f b6       	in	r0, 0x3f	; 63
   13526:	f8 94       	cli
   13528:	be bf       	out	0x3e, r27	; 62
   1352a:	0f be       	out	0x3f, r0	; 63
   1352c:	ad bf       	out	0x3d, r26	; 61
   1352e:	cf 91       	pop	r28
   13530:	1f 91       	pop	r17
   13532:	0f 91       	pop	r16
   13534:	08 95       	ret

00013536 <init_Devices>:
   13536:	10 92 77 19 	sts	0x1977, r1	; 0x801977 <stack_ind+0x1>
   1353a:	10 92 76 19 	sts	0x1976, r1	; 0x801976 <stack_ind>
   1353e:	e4 ef       	ldi	r30, 0xF4	; 244
   13540:	fe e1       	ldi	r31, 0x1E	; 30
   13542:	8f ef       	ldi	r24, 0xFF	; 255
   13544:	10 82       	st	Z, r1
   13546:	11 82       	std	Z+1, r1	; 0x01
   13548:	82 83       	std	Z+2, r24	; 0x02
   1354a:	13 82       	std	Z+3, r1	; 0x03
   1354c:	14 82       	std	Z+4, r1	; 0x04
   1354e:	15 82       	std	Z+5, r1	; 0x05
   13550:	16 82       	std	Z+6, r1	; 0x06
   13552:	10 86       	std	Z+8, r1	; 0x08
   13554:	17 82       	std	Z+7, r1	; 0x07
   13556:	12 86       	std	Z+10, r1	; 0x0a
   13558:	11 86       	std	Z+9, r1	; 0x09
   1355a:	3b 96       	adiw	r30, 0x0b	; 11
   1355c:	9f e1       	ldi	r25, 0x1F	; 31
   1355e:	e8 37       	cpi	r30, 0x78	; 120
   13560:	f9 07       	cpc	r31, r25
   13562:	81 f7       	brne	.-32     	; 0x13544 <init_Devices+0xe>
   13564:	08 95       	ret

00013566 <push_state>:
   13566:	20 91 76 19 	lds	r18, 0x1976	; 0x801976 <stack_ind>
   1356a:	30 91 77 19 	lds	r19, 0x1977	; 0x801977 <stack_ind+0x1>
   1356e:	25 30       	cpi	r18, 0x05	; 5
   13570:	31 05       	cpc	r19, r1
   13572:	7c f4       	brge	.+30     	; 0x13592 <push_state+0x2c>
   13574:	a9 01       	movw	r20, r18
   13576:	4f 5f       	subi	r20, 0xFF	; 255
   13578:	5f 4f       	sbci	r21, 0xFF	; 255
   1357a:	50 93 77 19 	sts	0x1977, r21	; 0x801977 <stack_ind+0x1>
   1357e:	40 93 76 19 	sts	0x1976, r20	; 0x801976 <stack_ind>
   13582:	22 0f       	add	r18, r18
   13584:	33 1f       	adc	r19, r19
   13586:	f9 01       	movw	r30, r18
   13588:	e4 59       	subi	r30, 0x94	; 148
   1358a:	f6 4e       	sbci	r31, 0xE6	; 230
   1358c:	80 83       	st	Z, r24
   1358e:	91 83       	std	Z+1, r25	; 0x01
   13590:	08 95       	ret
   13592:	80 e0       	ldi	r24, 0x00	; 0
   13594:	90 e0       	ldi	r25, 0x00	; 0
   13596:	08 95       	ret

00013598 <pop_state>:
   13598:	80 91 76 19 	lds	r24, 0x1976	; 0x801976 <stack_ind>
   1359c:	90 91 77 19 	lds	r25, 0x1977	; 0x801977 <stack_ind+0x1>
   135a0:	18 16       	cp	r1, r24
   135a2:	19 06       	cpc	r1, r25
   135a4:	6c f4       	brge	.+26     	; 0x135c0 <pop_state+0x28>
   135a6:	01 97       	sbiw	r24, 0x01	; 1
   135a8:	90 93 77 19 	sts	0x1977, r25	; 0x801977 <stack_ind+0x1>
   135ac:	80 93 76 19 	sts	0x1976, r24	; 0x801976 <stack_ind>
   135b0:	88 0f       	add	r24, r24
   135b2:	99 1f       	adc	r25, r25
   135b4:	fc 01       	movw	r30, r24
   135b6:	e4 59       	subi	r30, 0x94	; 148
   135b8:	f6 4e       	sbci	r31, 0xE6	; 230
   135ba:	80 81       	ld	r24, Z
   135bc:	91 81       	ldd	r25, Z+1	; 0x01
   135be:	08 95       	ret
   135c0:	80 e0       	ldi	r24, 0x00	; 0
   135c2:	90 e0       	ldi	r25, 0x00	; 0
   135c4:	08 95       	ret

000135c6 <set_Config_Defaults>:
   135c6:	08 95       	ret

000135c8 <hpdir_set_device>:
   135c8:	cf 93       	push	r28
   135ca:	df 93       	push	r29
   135cc:	00 d0       	rcall	.+0      	; 0x135ce <hpdir_set_device+0x6>
   135ce:	1f 92       	push	r1
   135d0:	2b e0       	ldi	r18, 0x0B	; 11
   135d2:	82 02       	muls	r24, r18
   135d4:	c0 01       	movw	r24, r0
   135d6:	11 24       	eor	r1, r1
   135d8:	fc 01       	movw	r30, r24
   135da:	ec 50       	subi	r30, 0x0C	; 12
   135dc:	f1 4e       	sbci	r31, 0xE1	; 225
   135de:	80 81       	ld	r24, Z
   135e0:	83 30       	cpi	r24, 0x03	; 3
   135e2:	a1 f5       	brne	.+104    	; 0x1364c <hpdir_set_device+0x84>
   135e4:	c7 81       	ldd	r28, Z+7	; 0x07
   135e6:	d0 85       	ldd	r29, Z+8	; 0x08
   135e8:	80 91 f8 1f 	lds	r24, 0x1FF8	; 0x801ff8 <hpdir+0x80>
   135ec:	90 91 f9 1f 	lds	r25, 0x1FF9	; 0x801ff9 <hpdir+0x81>
   135f0:	9f 83       	std	Y+7, r25	; 0x07
   135f2:	8e 83       	std	Y+6, r24	; 0x06
   135f4:	80 91 04 20 	lds	r24, 0x2004	; 0x802004 <hpdir+0x8c>
   135f8:	90 91 05 20 	lds	r25, 0x2005	; 0x802005 <hpdir+0x8d>
   135fc:	a0 91 06 20 	lds	r26, 0x2006	; 0x802006 <hpdir+0x8e>
   13600:	b0 91 07 20 	lds	r27, 0x2007	; 0x802007 <hpdir+0x8f>
   13604:	8e 87       	std	Y+14, r24	; 0x0e
   13606:	9f 87       	std	Y+15, r25	; 0x0f
   13608:	a8 8b       	std	Y+16, r26	; 0x10
   1360a:	b9 8b       	std	Y+17, r27	; 0x11
   1360c:	80 91 18 20 	lds	r24, 0x2018	; 0x802018 <hpdir+0xa0>
   13610:	90 91 19 20 	lds	r25, 0x2019	; 0x802019 <hpdir+0xa1>
   13614:	9b 8b       	std	Y+19, r25	; 0x13
   13616:	8a 8b       	std	Y+18, r24	; 0x12
   13618:	19 a2       	std	Y+33, r1	; 0x21
   1361a:	1a a2       	std	Y+34, r1	; 0x22
   1361c:	1b a2       	std	Y+35, r1	; 0x23
   1361e:	1c a2       	std	Y+36, r1	; 0x24
   13620:	1d a2       	std	Y+37, r1	; 0x25
   13622:	1f a2       	std	Y+39, r1	; 0x27
   13624:	1e a2       	std	Y+38, r1	; 0x26
   13626:	80 91 24 20 	lds	r24, 0x2024	; 0x802024 <hpdir+0xac>
   1362a:	90 91 25 20 	lds	r25, 0x2025	; 0x802025 <hpdir+0xad>
   1362e:	a0 91 26 20 	lds	r26, 0x2026	; 0x802026 <hpdir+0xae>
   13632:	b0 91 27 20 	lds	r27, 0x2027	; 0x802027 <hpdir+0xaf>
   13636:	ac 01       	movw	r20, r24
   13638:	bd 01       	movw	r22, r26
   1363a:	41 50       	subi	r20, 0x01	; 1
   1363c:	51 09       	sbc	r21, r1
   1363e:	61 09       	sbc	r22, r1
   13640:	71 09       	sbc	r23, r1
   13642:	48 a7       	std	Y+40, r20	; 0x28
   13644:	59 a7       	std	Y+41, r21	; 0x29
   13646:	6a a7       	std	Y+42, r22	; 0x2a
   13648:	7b a7       	std	Y+43, r23	; 0x2b
   1364a:	2a c0       	rjmp	.+84     	; 0x136a0 <hpdir_set_device+0xd8>
   1364c:	81 30       	cpi	r24, 0x01	; 1
   1364e:	a1 f5       	brne	.+104    	; 0x136b8 <hpdir_set_device+0xf0>
   13650:	c7 81       	ldd	r28, Z+7	; 0x07
   13652:	d0 85       	ldd	r29, Z+8	; 0x08
   13654:	80 91 f8 1f 	lds	r24, 0x1FF8	; 0x801ff8 <hpdir+0x80>
   13658:	90 91 f9 1f 	lds	r25, 0x1FF9	; 0x801ff9 <hpdir+0x81>
   1365c:	9f 83       	std	Y+7, r25	; 0x07
   1365e:	8e 83       	std	Y+6, r24	; 0x06
   13660:	80 91 18 20 	lds	r24, 0x2018	; 0x802018 <hpdir+0xa0>
   13664:	90 91 19 20 	lds	r25, 0x2019	; 0x802019 <hpdir+0xa1>
   13668:	99 87       	std	Y+9, r25	; 0x09
   1366a:	88 87       	std	Y+8, r24	; 0x08
   1366c:	80 91 14 20 	lds	r24, 0x2014	; 0x802014 <hpdir+0x9c>
   13670:	90 91 15 20 	lds	r25, 0x2015	; 0x802015 <hpdir+0x9d>
   13674:	9b 87       	std	Y+11, r25	; 0x0b
   13676:	8a 87       	std	Y+10, r24	; 0x0a
   13678:	80 91 10 20 	lds	r24, 0x2010	; 0x802010 <hpdir+0x98>
   1367c:	90 91 11 20 	lds	r25, 0x2011	; 0x802011 <hpdir+0x99>
   13680:	9d 87       	std	Y+13, r25	; 0x0d
   13682:	8c 87       	std	Y+12, r24	; 0x0c
   13684:	80 91 0c 20 	lds	r24, 0x200C	; 0x80200c <hpdir+0x94>
   13688:	90 91 0d 20 	lds	r25, 0x200D	; 0x80200d <hpdir+0x95>
   1368c:	9f 87       	std	Y+15, r25	; 0x0f
   1368e:	8e 87       	std	Y+14, r24	; 0x0e
   13690:	80 91 24 20 	lds	r24, 0x2024	; 0x802024 <hpdir+0xac>
   13694:	90 91 25 20 	lds	r25, 0x2025	; 0x802025 <hpdir+0xad>
   13698:	a0 91 26 20 	lds	r26, 0x2026	; 0x802026 <hpdir+0xae>
   1369c:	b0 91 27 20 	lds	r27, 0x2027	; 0x802027 <hpdir+0xaf>
   136a0:	83 83       	std	Z+3, r24	; 0x03
   136a2:	94 83       	std	Z+4, r25	; 0x04
   136a4:	a5 83       	std	Z+5, r26	; 0x05
   136a6:	b6 83       	std	Z+6, r27	; 0x06
   136a8:	88 e7       	ldi	r24, 0x78	; 120
   136aa:	9f e1       	ldi	r25, 0x1F	; 31
   136ac:	0e 94 eb 32 	call	0x65d6	; 0x65d6 <stralloc>
   136b0:	9d 83       	std	Y+5, r25	; 0x05
   136b2:	8c 83       	std	Y+4, r24	; 0x04
   136b4:	81 e0       	ldi	r24, 0x01	; 1
   136b6:	0b c0       	rjmp	.+22     	; 0x136ce <hpdir_set_device+0x106>
   136b8:	84 ec       	ldi	r24, 0xC4	; 196
   136ba:	9a e1       	ldi	r25, 0x1A	; 26
   136bc:	a0 e0       	ldi	r26, 0x00	; 0
   136be:	ed b7       	in	r30, 0x3d	; 61
   136c0:	fe b7       	in	r31, 0x3e	; 62
   136c2:	81 83       	std	Z+1, r24	; 0x01
   136c4:	92 83       	std	Z+2, r25	; 0x02
   136c6:	a3 83       	std	Z+3, r26	; 0x03
   136c8:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
   136cc:	80 e0       	ldi	r24, 0x00	; 0
   136ce:	cd b7       	in	r28, 0x3d	; 61
   136d0:	de b7       	in	r29, 0x3e	; 62
   136d2:	23 96       	adiw	r28, 0x03	; 3
   136d4:	e2 e0       	ldi	r30, 0x02	; 2
   136d6:	0c 94 d0 e8 	jmp	0x1d1a0	; 0x1d1a0 <__epilogue_restores__+0x20>

000136da <hpdir_set_parameters>:
   136da:	cf 93       	push	r28
   136dc:	00 d0       	rcall	.+0      	; 0x136de <hpdir_set_parameters+0x4>
   136de:	1f 92       	push	r1
   136e0:	c8 2f       	mov	r28, r24
   136e2:	cb 01       	movw	r24, r22
   136e4:	41 e0       	ldi	r20, 0x01	; 1
   136e6:	50 e0       	ldi	r21, 0x00	; 0
   136e8:	60 e0       	ldi	r22, 0x00	; 0
   136ea:	70 e0       	ldi	r23, 0x00	; 0
   136ec:	0e 94 f0 a4 	call	0x149e0	; 0x149e0 <hpdir_find_drive>
   136f0:	89 2b       	or	r24, r25
   136f2:	19 f0       	breq	.+6      	; 0x136fa <hpdir_set_parameters+0x20>
   136f4:	8c 2f       	mov	r24, r28
   136f6:	68 df       	rcall	.-304    	; 0x135c8 <hpdir_set_device>
   136f8:	0b c0       	rjmp	.+22     	; 0x13710 <hpdir_set_parameters+0x36>
   136fa:	8c e9       	ldi	r24, 0x9C	; 156
   136fc:	9a e1       	ldi	r25, 0x1A	; 26
   136fe:	a0 e0       	ldi	r26, 0x00	; 0
   13700:	ed b7       	in	r30, 0x3d	; 61
   13702:	fe b7       	in	r31, 0x3e	; 62
   13704:	81 83       	std	Z+1, r24	; 0x01
   13706:	92 83       	std	Z+2, r25	; 0x02
   13708:	a3 83       	std	Z+3, r26	; 0x03
   1370a:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
   1370e:	80 e0       	ldi	r24, 0x00	; 0
   13710:	0f 90       	pop	r0
   13712:	0f 90       	pop	r0
   13714:	0f 90       	pop	r0
   13716:	cf 91       	pop	r28
   13718:	08 95       	ret

0001371a <format_drives>:
   1371a:	2f 92       	push	r2
   1371c:	3f 92       	push	r3
   1371e:	4f 92       	push	r4
   13720:	5f 92       	push	r5
   13722:	6f 92       	push	r6
   13724:	7f 92       	push	r7
   13726:	8f 92       	push	r8
   13728:	af 92       	push	r10
   1372a:	bf 92       	push	r11
   1372c:	cf 92       	push	r12
   1372e:	df 92       	push	r13
   13730:	ef 92       	push	r14
   13732:	ff 92       	push	r15
   13734:	0f 93       	push	r16
   13736:	1f 93       	push	r17
   13738:	cf 93       	push	r28
   1373a:	df 93       	push	r29
   1373c:	cd b7       	in	r28, 0x3d	; 61
   1373e:	de b7       	in	r29, 0x3e	; 62
   13740:	ce 56       	subi	r28, 0x6E	; 110
   13742:	d1 09       	sbc	r29, r1
   13744:	0f b6       	in	r0, 0x3f	; 63
   13746:	f8 94       	cli
   13748:	de bf       	out	0x3e, r29	; 62
   1374a:	0f be       	out	0x3f, r0	; 63
   1374c:	cd bf       	out	0x3d, r28	; 61
   1374e:	84 ef       	ldi	r24, 0xF4	; 244
   13750:	c8 2e       	mov	r12, r24
   13752:	8e e1       	ldi	r24, 0x1E	; 30
   13754:	d8 2e       	mov	r13, r24
   13756:	a0 96       	adiw	r28, 0x20	; 32
   13758:	1f ae       	std	Y+63, r1	; 0x3f
   1375a:	1e ae       	std	Y+62, r1	; 0x3e
   1375c:	a0 97       	sbiw	r28, 0x20	; 32
   1375e:	6e 96       	adiw	r28, 0x1e	; 30
   13760:	1f ae       	std	Y+63, r1	; 0x3f
   13762:	1e ae       	std	Y+62, r1	; 0x3e
   13764:	6e 97       	sbiw	r28, 0x1e	; 30
   13766:	6c 96       	adiw	r28, 0x1c	; 28
   13768:	1f ae       	std	Y+63, r1	; 0x3f
   1376a:	1e ae       	std	Y+62, r1	; 0x3e
   1376c:	6c 97       	sbiw	r28, 0x1c	; 28
   1376e:	89 e7       	ldi	r24, 0x79	; 121
   13770:	99 e1       	ldi	r25, 0x19	; 25
   13772:	9c 01       	movw	r18, r24
   13774:	40 e0       	ldi	r20, 0x00	; 0
   13776:	a3 96       	adiw	r28, 0x23	; 35
   13778:	2d af       	std	Y+61, r18	; 0x3d
   1377a:	3e af       	std	Y+62, r19	; 0x3e
   1377c:	4f af       	std	Y+63, r20	; 0x3f
   1377e:	a3 97       	sbiw	r28, 0x23	; 35
   13780:	81 e7       	ldi	r24, 0x71	; 113
   13782:	99 e1       	ldi	r25, 0x19	; 25
   13784:	9c 01       	movw	r18, r24
   13786:	40 e0       	ldi	r20, 0x00	; 0
   13788:	a6 96       	adiw	r28, 0x26	; 38
   1378a:	2d af       	std	Y+61, r18	; 0x3d
   1378c:	3e af       	std	Y+62, r19	; 0x3e
   1378e:	4f af       	std	Y+63, r20	; 0x3f
   13790:	a6 97       	sbiw	r28, 0x26	; 38
   13792:	83 e9       	ldi	r24, 0x93	; 147
   13794:	99 e1       	ldi	r25, 0x19	; 25
   13796:	9c 01       	movw	r18, r24
   13798:	40 e0       	ldi	r20, 0x00	; 0
   1379a:	a9 96       	adiw	r28, 0x29	; 41
   1379c:	2d af       	std	Y+61, r18	; 0x3d
   1379e:	3e af       	std	Y+62, r19	; 0x3e
   137a0:	4f af       	std	Y+63, r20	; 0x3f
   137a2:	a9 97       	sbiw	r28, 0x29	; 41
   137a4:	8d eb       	ldi	r24, 0xBD	; 189
   137a6:	99 e1       	ldi	r25, 0x19	; 25
   137a8:	9c 01       	movw	r18, r24
   137aa:	40 e0       	ldi	r20, 0x00	; 0
   137ac:	ac 96       	adiw	r28, 0x2c	; 44
   137ae:	2d af       	std	Y+61, r18	; 0x3d
   137b0:	3e af       	std	Y+62, r19	; 0x3e
   137b2:	4f af       	std	Y+63, r20	; 0x3f
   137b4:	ac 97       	sbiw	r28, 0x2c	; 44
   137b6:	85 eb       	ldi	r24, 0xB5	; 181
   137b8:	99 e1       	ldi	r25, 0x19	; 25
   137ba:	9c 01       	movw	r18, r24
   137bc:	40 e0       	ldi	r20, 0x00	; 0
   137be:	af 96       	adiw	r28, 0x2f	; 47
   137c0:	2d af       	std	Y+61, r18	; 0x3d
   137c2:	3e af       	std	Y+62, r19	; 0x3e
   137c4:	4f af       	std	Y+63, r20	; 0x3f
   137c6:	af 97       	sbiw	r28, 0x2f	; 47
   137c8:	87 ed       	ldi	r24, 0xD7	; 215
   137ca:	99 e1       	ldi	r25, 0x19	; 25
   137cc:	3c 01       	movw	r6, r24
   137ce:	81 2c       	mov	r8, r1
   137d0:	f6 01       	movw	r30, r12
   137d2:	80 81       	ld	r24, Z
   137d4:	88 23       	and	r24, r24
   137d6:	09 f4       	brne	.+2      	; 0x137da <format_drives+0xc0>
   137d8:	f1 c0       	rjmp	.+482    	; 0x139bc <format_drives+0x2a2>
   137da:	83 30       	cpi	r24, 0x03	; 3
   137dc:	09 f0       	breq	.+2      	; 0x137e0 <format_drives+0xc6>
   137de:	71 c0       	rjmp	.+226    	; 0x138c2 <format_drives+0x1a8>
   137e0:	a7 80       	ldd	r10, Z+7	; 0x07
   137e2:	b0 84       	ldd	r11, Z+8	; 0x08
   137e4:	be 01       	movw	r22, r28
   137e6:	66 5f       	subi	r22, 0xF6	; 246
   137e8:	7f 4f       	sbci	r23, 0xFF	; 255
   137ea:	f5 01       	movw	r30, r10
   137ec:	82 81       	ldd	r24, Z+2	; 0x02
   137ee:	93 81       	ldd	r25, Z+3	; 0x03
   137f0:	0e 94 59 7a 	call	0xf4b2	; 0xf4b2 <stat>
   137f4:	01 96       	adiw	r24, 0x01	; 1
   137f6:	09 f0       	breq	.+2      	; 0x137fa <format_drives+0xe0>
   137f8:	64 c0       	rjmp	.+200    	; 0x138c2 <format_drives+0x1a8>
   137fa:	f5 01       	movw	r30, r10
   137fc:	82 89       	ldd	r24, Z+18	; 0x12
   137fe:	93 89       	ldd	r25, Z+19	; 0x13
   13800:	81 15       	cp	r24, r1
   13802:	91 40       	sbci	r25, 0x01	; 1
   13804:	31 f0       	breq	.+12     	; 0x13812 <format_drives+0xf8>
   13806:	ed b7       	in	r30, 0x3d	; 61
   13808:	fe b7       	in	r31, 0x3e	; 62
   1380a:	61 82       	std	Z+1, r6	; 0x01
   1380c:	72 82       	std	Z+2, r7	; 0x02
   1380e:	83 82       	std	Z+3, r8	; 0x03
   13810:	7a c0       	rjmp	.+244    	; 0x13906 <format_drives+0x1ec>
   13812:	f6 01       	movw	r30, r12
   13814:	23 80       	ldd	r2, Z+3	; 0x03
   13816:	34 80       	ldd	r3, Z+4	; 0x04
   13818:	45 80       	ldd	r4, Z+5	; 0x05
   1381a:	56 80       	ldd	r5, Z+6	; 0x06
   1381c:	ed b7       	in	r30, 0x3d	; 61
   1381e:	fe b7       	in	r31, 0x3e	; 62
   13820:	26 82       	std	Z+6, r2	; 0x06
   13822:	37 82       	std	Z+7, r3	; 0x07
   13824:	40 86       	std	Z+8, r4	; 0x08
   13826:	51 86       	std	Z+9, r5	; 0x09
   13828:	f5 01       	movw	r30, r10
   1382a:	82 81       	ldd	r24, Z+2	; 0x02
   1382c:	93 81       	ldd	r25, Z+3	; 0x03
   1382e:	ed b7       	in	r30, 0x3d	; 61
   13830:	fe b7       	in	r31, 0x3e	; 62
   13832:	95 83       	std	Z+5, r25	; 0x05
   13834:	84 83       	std	Z+4, r24	; 0x04
   13836:	ac 96       	adiw	r28, 0x2c	; 44
   13838:	2d ad       	ldd	r18, Y+61	; 0x3d
   1383a:	3e ad       	ldd	r19, Y+62	; 0x3e
   1383c:	4f ad       	ldd	r20, Y+63	; 0x3f
   1383e:	ac 97       	sbiw	r28, 0x2c	; 44
   13840:	21 83       	std	Z+1, r18	; 0x01
   13842:	32 83       	std	Z+2, r19	; 0x02
   13844:	43 83       	std	Z+3, r20	; 0x03
   13846:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
   1384a:	6e 96       	adiw	r28, 0x1e	; 30
   1384c:	2e ad       	ldd	r18, Y+62	; 0x3e
   1384e:	3f ad       	ldd	r19, Y+63	; 0x3f
   13850:	6e 97       	sbiw	r28, 0x1e	; 30
   13852:	ed b7       	in	r30, 0x3d	; 61
   13854:	fe b7       	in	r31, 0x3e	; 62
   13856:	37 83       	std	Z+7, r19	; 0x07
   13858:	26 83       	std	Z+6, r18	; 0x06
   1385a:	af 96       	adiw	r28, 0x2f	; 47
   1385c:	8d ad       	ldd	r24, Y+61	; 0x3d
   1385e:	9e ad       	ldd	r25, Y+62	; 0x3e
   13860:	af ad       	ldd	r26, Y+63	; 0x3f
   13862:	af 97       	sbiw	r28, 0x2f	; 47
   13864:	83 83       	std	Z+3, r24	; 0x03
   13866:	94 83       	std	Z+4, r25	; 0x04
   13868:	a5 83       	std	Z+5, r26	; 0x05
   1386a:	2a e3       	ldi	r18, 0x3A	; 58
   1386c:	30 e0       	ldi	r19, 0x00	; 0
   1386e:	2c 0f       	add	r18, r28
   13870:	3d 1f       	adc	r19, r29
   13872:	32 83       	std	Z+2, r19	; 0x02
   13874:	21 83       	std	Z+1, r18	; 0x01
   13876:	0e 94 e8 47 	call	0x8fd0	; 0x8fd0 <sprintf_P>
   1387a:	f5 01       	movw	r30, r10
   1387c:	a2 80       	ldd	r10, Z+2	; 0x02
   1387e:	b3 80       	ldd	r11, Z+3	; 0x03
   13880:	c2 01       	movw	r24, r4
   13882:	b1 01       	movw	r22, r2
   13884:	0e 94 d3 a4 	call	0x149a6	; 0x149a6 <lif_dir_count>
   13888:	9b 01       	movw	r18, r22
   1388a:	ac 01       	movw	r20, r24
   1388c:	82 01       	movw	r16, r4
   1388e:	71 01       	movw	r14, r2
   13890:	be 01       	movw	r22, r28
   13892:	66 5c       	subi	r22, 0xC6	; 198
   13894:	7f 4f       	sbci	r23, 0xFF	; 255
   13896:	c5 01       	movw	r24, r10
   13898:	0e 94 cd df 	call	0x1bf9a	; 0x1bf9a <lif_create_image>
   1389c:	6c 96       	adiw	r28, 0x1c	; 28
   1389e:	2e ad       	ldd	r18, Y+62	; 0x3e
   138a0:	3f ad       	ldd	r19, Y+63	; 0x3f
   138a2:	6c 97       	sbiw	r28, 0x1c	; 28
   138a4:	2f 5f       	subi	r18, 0xFF	; 255
   138a6:	3f 4f       	sbci	r19, 0xFF	; 255
   138a8:	6c 96       	adiw	r28, 0x1c	; 28
   138aa:	3f af       	std	Y+63, r19	; 0x3f
   138ac:	2e af       	std	Y+62, r18	; 0x3e
   138ae:	6c 97       	sbiw	r28, 0x1c	; 28
   138b0:	6e 96       	adiw	r28, 0x1e	; 30
   138b2:	8e ad       	ldd	r24, Y+62	; 0x3e
   138b4:	9f ad       	ldd	r25, Y+63	; 0x3f
   138b6:	6e 97       	sbiw	r28, 0x1e	; 30
   138b8:	01 96       	adiw	r24, 0x01	; 1
   138ba:	6e 96       	adiw	r28, 0x1e	; 30
   138bc:	9f af       	std	Y+63, r25	; 0x3f
   138be:	8e af       	std	Y+62, r24	; 0x3e
   138c0:	6e 97       	sbiw	r28, 0x1e	; 30
   138c2:	f6 01       	movw	r30, r12
   138c4:	80 81       	ld	r24, Z
   138c6:	81 30       	cpi	r24, 0x01	; 1
   138c8:	09 f0       	breq	.+2      	; 0x138cc <format_drives+0x1b2>
   138ca:	78 c0       	rjmp	.+240    	; 0x139bc <format_drives+0x2a2>
   138cc:	a7 80       	ldd	r10, Z+7	; 0x07
   138ce:	b0 84       	ldd	r11, Z+8	; 0x08
   138d0:	be 01       	movw	r22, r28
   138d2:	66 5f       	subi	r22, 0xF6	; 246
   138d4:	7f 4f       	sbci	r23, 0xFF	; 255
   138d6:	f5 01       	movw	r30, r10
   138d8:	82 81       	ldd	r24, Z+2	; 0x02
   138da:	93 81       	ldd	r25, Z+3	; 0x03
   138dc:	0e 94 59 7a 	call	0xf4b2	; 0xf4b2 <stat>
   138e0:	01 96       	adiw	r24, 0x01	; 1
   138e2:	09 f0       	breq	.+2      	; 0x138e6 <format_drives+0x1cc>
   138e4:	6b c0       	rjmp	.+214    	; 0x139bc <format_drives+0x2a2>
   138e6:	f5 01       	movw	r30, r10
   138e8:	80 85       	ldd	r24, Z+8	; 0x08
   138ea:	91 85       	ldd	r25, Z+9	; 0x09
   138ec:	81 15       	cp	r24, r1
   138ee:	91 40       	sbci	r25, 0x01	; 1
   138f0:	69 f0       	breq	.+26     	; 0x1390c <format_drives+0x1f2>
   138f2:	a9 96       	adiw	r28, 0x29	; 41
   138f4:	2d ad       	ldd	r18, Y+61	; 0x3d
   138f6:	3e ad       	ldd	r19, Y+62	; 0x3e
   138f8:	4f ad       	ldd	r20, Y+63	; 0x3f
   138fa:	a9 97       	sbiw	r28, 0x29	; 41
   138fc:	ed b7       	in	r30, 0x3d	; 61
   138fe:	fe b7       	in	r31, 0x3e	; 62
   13900:	21 83       	std	Z+1, r18	; 0x01
   13902:	32 83       	std	Z+2, r19	; 0x02
   13904:	43 83       	std	Z+3, r20	; 0x03
   13906:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
   1390a:	58 c0       	rjmp	.+176    	; 0x139bc <format_drives+0x2a2>
   1390c:	f6 01       	movw	r30, r12
   1390e:	23 80       	ldd	r2, Z+3	; 0x03
   13910:	34 80       	ldd	r3, Z+4	; 0x04
   13912:	45 80       	ldd	r4, Z+5	; 0x05
   13914:	56 80       	ldd	r5, Z+6	; 0x06
   13916:	ed b7       	in	r30, 0x3d	; 61
   13918:	fe b7       	in	r31, 0x3e	; 62
   1391a:	26 82       	std	Z+6, r2	; 0x06
   1391c:	37 82       	std	Z+7, r3	; 0x07
   1391e:	40 86       	std	Z+8, r4	; 0x08
   13920:	51 86       	std	Z+9, r5	; 0x09
   13922:	f5 01       	movw	r30, r10
   13924:	82 81       	ldd	r24, Z+2	; 0x02
   13926:	93 81       	ldd	r25, Z+3	; 0x03
   13928:	ed b7       	in	r30, 0x3d	; 61
   1392a:	fe b7       	in	r31, 0x3e	; 62
   1392c:	95 83       	std	Z+5, r25	; 0x05
   1392e:	84 83       	std	Z+4, r24	; 0x04
   13930:	a3 96       	adiw	r28, 0x23	; 35
   13932:	2d ad       	ldd	r18, Y+61	; 0x3d
   13934:	3e ad       	ldd	r19, Y+62	; 0x3e
   13936:	4f ad       	ldd	r20, Y+63	; 0x3f
   13938:	a3 97       	sbiw	r28, 0x23	; 35
   1393a:	21 83       	std	Z+1, r18	; 0x01
   1393c:	32 83       	std	Z+2, r19	; 0x02
   1393e:	43 83       	std	Z+3, r20	; 0x03
   13940:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
   13944:	a0 96       	adiw	r28, 0x20	; 32
   13946:	2e ad       	ldd	r18, Y+62	; 0x3e
   13948:	3f ad       	ldd	r19, Y+63	; 0x3f
   1394a:	a0 97       	sbiw	r28, 0x20	; 32
   1394c:	ed b7       	in	r30, 0x3d	; 61
   1394e:	fe b7       	in	r31, 0x3e	; 62
   13950:	37 83       	std	Z+7, r19	; 0x07
   13952:	26 83       	std	Z+6, r18	; 0x06
   13954:	a6 96       	adiw	r28, 0x26	; 38
   13956:	8d ad       	ldd	r24, Y+61	; 0x3d
   13958:	9e ad       	ldd	r25, Y+62	; 0x3e
   1395a:	af ad       	ldd	r26, Y+63	; 0x3f
   1395c:	a6 97       	sbiw	r28, 0x26	; 38
   1395e:	83 83       	std	Z+3, r24	; 0x03
   13960:	94 83       	std	Z+4, r25	; 0x04
   13962:	a5 83       	std	Z+5, r26	; 0x05
   13964:	2a e3       	ldi	r18, 0x3A	; 58
   13966:	30 e0       	ldi	r19, 0x00	; 0
   13968:	2c 0f       	add	r18, r28
   1396a:	3d 1f       	adc	r19, r29
   1396c:	32 83       	std	Z+2, r19	; 0x02
   1396e:	21 83       	std	Z+1, r18	; 0x01
   13970:	0e 94 e8 47 	call	0x8fd0	; 0x8fd0 <sprintf_P>
   13974:	f5 01       	movw	r30, r10
   13976:	a2 80       	ldd	r10, Z+2	; 0x02
   13978:	b3 80       	ldd	r11, Z+3	; 0x03
   1397a:	c2 01       	movw	r24, r4
   1397c:	b1 01       	movw	r22, r2
   1397e:	0e 94 d3 a4 	call	0x149a6	; 0x149a6 <lif_dir_count>
   13982:	9b 01       	movw	r18, r22
   13984:	ac 01       	movw	r20, r24
   13986:	82 01       	movw	r16, r4
   13988:	71 01       	movw	r14, r2
   1398a:	be 01       	movw	r22, r28
   1398c:	66 5c       	subi	r22, 0xC6	; 198
   1398e:	7f 4f       	sbci	r23, 0xFF	; 255
   13990:	c5 01       	movw	r24, r10
   13992:	0e 94 cd df 	call	0x1bf9a	; 0x1bf9a <lif_create_image>
   13996:	6c 96       	adiw	r28, 0x1c	; 28
   13998:	2e ad       	ldd	r18, Y+62	; 0x3e
   1399a:	3f ad       	ldd	r19, Y+63	; 0x3f
   1399c:	6c 97       	sbiw	r28, 0x1c	; 28
   1399e:	2f 5f       	subi	r18, 0xFF	; 255
   139a0:	3f 4f       	sbci	r19, 0xFF	; 255
   139a2:	6c 96       	adiw	r28, 0x1c	; 28
   139a4:	3f af       	std	Y+63, r19	; 0x3f
   139a6:	2e af       	std	Y+62, r18	; 0x3e
   139a8:	6c 97       	sbiw	r28, 0x1c	; 28
   139aa:	a0 96       	adiw	r28, 0x20	; 32
   139ac:	8e ad       	ldd	r24, Y+62	; 0x3e
   139ae:	9f ad       	ldd	r25, Y+63	; 0x3f
   139b0:	a0 97       	sbiw	r28, 0x20	; 32
   139b2:	01 96       	adiw	r24, 0x01	; 1
   139b4:	a0 96       	adiw	r28, 0x20	; 32
   139b6:	9f af       	std	Y+63, r25	; 0x3f
   139b8:	8e af       	std	Y+62, r24	; 0x3e
   139ba:	a0 97       	sbiw	r28, 0x20	; 32
   139bc:	9b e0       	ldi	r25, 0x0B	; 11
   139be:	c9 0e       	add	r12, r25
   139c0:	d1 1c       	adc	r13, r1
   139c2:	a8 e7       	ldi	r26, 0x78	; 120
   139c4:	ca 16       	cp	r12, r26
   139c6:	af e1       	ldi	r26, 0x1F	; 31
   139c8:	da 06       	cpc	r13, r26
   139ca:	09 f0       	breq	.+2      	; 0x139ce <format_drives+0x2b4>
   139cc:	01 cf       	rjmp	.-510    	; 0x137d0 <format_drives+0xb6>
   139ce:	6c 96       	adiw	r28, 0x1c	; 28
   139d0:	ee ad       	ldd	r30, Y+62	; 0x3e
   139d2:	ff ad       	ldd	r31, Y+63	; 0x3f
   139d4:	6c 97       	sbiw	r28, 0x1c	; 28
   139d6:	ef 2b       	or	r30, r31
   139d8:	11 f0       	breq	.+4      	; 0x139de <format_drives+0x2c4>
   139da:	0e 94 0b 33 	call	0x6616	; 0x6616 <sep>
   139de:	c2 59       	subi	r28, 0x92	; 146
   139e0:	df 4f       	sbci	r29, 0xFF	; 255
   139e2:	0f b6       	in	r0, 0x3f	; 63
   139e4:	f8 94       	cli
   139e6:	de bf       	out	0x3e, r29	; 62
   139e8:	0f be       	out	0x3f, r0	; 63
   139ea:	cd bf       	out	0x3d, r28	; 61
   139ec:	df 91       	pop	r29
   139ee:	cf 91       	pop	r28
   139f0:	1f 91       	pop	r17
   139f2:	0f 91       	pop	r16
   139f4:	ff 90       	pop	r15
   139f6:	ef 90       	pop	r14
   139f8:	df 90       	pop	r13
   139fa:	cf 90       	pop	r12
   139fc:	bf 90       	pop	r11
   139fe:	af 90       	pop	r10
   13a00:	8f 90       	pop	r8
   13a02:	7f 90       	pop	r7
   13a04:	6f 90       	pop	r6
   13a06:	5f 90       	pop	r5
   13a08:	4f 90       	pop	r4
   13a0a:	3f 90       	pop	r3
   13a0c:	2f 90       	pop	r2
   13a0e:	08 95       	ret

00013a10 <drives_help>:
   13a10:	00 d0       	rcall	.+0      	; 0x13a12 <drives_help+0x2>
   13a12:	1f 92       	push	r1
   13a14:	81 11       	cpse	r24, r1
   13a16:	03 c0       	rjmp	.+6      	; 0x13a1e <drives_help+0xe>
   13a18:	81 e6       	ldi	r24, 0x61	; 97
   13a1a:	99 e1       	ldi	r25, 0x19	; 25
   13a1c:	02 c0       	rjmp	.+4      	; 0x13a22 <drives_help+0x12>
   13a1e:	8c e7       	ldi	r24, 0x7C	; 124
   13a20:	97 e1       	ldi	r25, 0x17	; 23
   13a22:	a0 e0       	ldi	r26, 0x00	; 0
   13a24:	ed b7       	in	r30, 0x3d	; 61
   13a26:	fe b7       	in	r31, 0x3e	; 62
   13a28:	81 83       	std	Z+1, r24	; 0x01
   13a2a:	92 83       	std	Z+2, r25	; 0x02
   13a2c:	a3 83       	std	Z+3, r26	; 0x03
   13a2e:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
   13a32:	0f 90       	pop	r0
   13a34:	0f 90       	pop	r0
   13a36:	0f 90       	pop	r0
   13a38:	08 95       	ret

00013a3a <mount_usage>:
   13a3a:	00 d0       	rcall	.+0      	; 0x13a3c <mount_usage+0x2>
   13a3c:	1f 92       	push	r1
   13a3e:	83 e7       	ldi	r24, 0x73	; 115
   13a40:	97 e1       	ldi	r25, 0x17	; 23
   13a42:	a0 e0       	ldi	r26, 0x00	; 0
   13a44:	ed b7       	in	r30, 0x3d	; 61
   13a46:	fe b7       	in	r31, 0x3e	; 62
   13a48:	81 83       	std	Z+1, r24	; 0x01
   13a4a:	92 83       	std	Z+2, r25	; 0x02
   13a4c:	a3 83       	std	Z+3, r26	; 0x03
   13a4e:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
   13a52:	81 e0       	ldi	r24, 0x01	; 1
   13a54:	dd df       	rcall	.-70     	; 0x13a10 <drives_help>
   13a56:	0f 90       	pop	r0
   13a58:	0f 90       	pop	r0
   13a5a:	0f 90       	pop	r0
   13a5c:	08 95       	ret

00013a5e <index_address>:
   13a5e:	e4 ef       	ldi	r30, 0xF4	; 244
   13a60:	fe e1       	ldi	r31, 0x1E	; 30
   13a62:	90 e0       	ldi	r25, 0x00	; 0
   13a64:	28 2f       	mov	r18, r24
   13a66:	88 0f       	add	r24, r24
   13a68:	33 0b       	sbc	r19, r19
   13a6a:	80 81       	ld	r24, Z
   13a6c:	88 23       	and	r24, r24
   13a6e:	29 f0       	breq	.+10     	; 0x13a7a <index_address+0x1c>
   13a70:	41 81       	ldd	r20, Z+1	; 0x01
   13a72:	50 e0       	ldi	r21, 0x00	; 0
   13a74:	42 17       	cp	r20, r18
   13a76:	53 07       	cpc	r21, r19
   13a78:	31 f0       	breq	.+12     	; 0x13a86 <index_address+0x28>
   13a7a:	9f 5f       	subi	r25, 0xFF	; 255
   13a7c:	3b 96       	adiw	r30, 0x0b	; 11
   13a7e:	9c 30       	cpi	r25, 0x0C	; 12
   13a80:	a1 f7       	brne	.-24     	; 0x13a6a <index_address+0xc>
   13a82:	8f ef       	ldi	r24, 0xFF	; 255
   13a84:	08 95       	ret
   13a86:	89 2f       	mov	r24, r25
   13a88:	08 95       	ret

00013a8a <umount>:

/// ===============================================
/// @brief umount disks - testing
/// @return Devices[] index on success, -1 on error
int8_t umount(int argc, char *argv[])
{
   13a8a:	cf 93       	push	r28
   13a8c:	df 93       	push	r29
   13a8e:	00 d0       	rcall	.+0      	; 0x13a90 <umount+0x6>
   13a90:	00 d0       	rcall	.+0      	; 0x13a92 <umount+0x8>
   13a92:	1f 92       	push	r1
   13a94:	eb 01       	movw	r28, r22

	int8_t address;
	int8_t index;

	if(argc != 2)
   13a96:	02 97       	sbiw	r24, 0x02	; 2
   13a98:	f1 f0       	breq	.+60     	; 0x13ad6 <umount+0x4c>
	{
		printf("Usage:\n");
   13a9a:	8b e6       	ldi	r24, 0x6B	; 107
   13a9c:	97 e1       	ldi	r25, 0x17	; 23
   13a9e:	a0 e0       	ldi	r26, 0x00	; 0
   13aa0:	ed b7       	in	r30, 0x3d	; 61
   13aa2:	fe b7       	in	r31, 0x3e	; 62
   13aa4:	81 83       	std	Z+1, r24	; 0x01
   13aa6:	92 83       	std	Z+2, r25	; 0x02
   13aa8:	a3 83       	std	Z+3, r26	; 0x03
   13aaa:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
		printf("  umount address\n");
   13aae:	89 e5       	ldi	r24, 0x59	; 89
   13ab0:	97 e1       	ldi	r25, 0x17	; 23
   13ab2:	a0 e0       	ldi	r26, 0x00	; 0
   13ab4:	ed b7       	in	r30, 0x3d	; 61
   13ab6:	fe b7       	in	r31, 0x3e	; 62
   13ab8:	81 83       	std	Z+1, r24	; 0x01
   13aba:	92 83       	std	Z+2, r25	; 0x02
   13abc:	a3 83       	std	Z+3, r26	; 0x03
   13abe:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
		printf("  - address is the device address\n");
   13ac2:	86 e3       	ldi	r24, 0x36	; 54
   13ac4:	97 e1       	ldi	r25, 0x17	; 23
   13ac6:	a0 e0       	ldi	r26, 0x00	; 0
   13ac8:	ed b7       	in	r30, 0x3d	; 61
   13aca:	fe b7       	in	r31, 0x3e	; 62
   13acc:	81 83       	std	Z+1, r24	; 0x01
   13ace:	92 83       	std	Z+2, r25	; 0x02
   13ad0:	a3 83       	std	Z+3, r26	; 0x03
   13ad2:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
	}
	address = atoi(argv[1]);
   13ad6:	8a 81       	ldd	r24, Y+2	; 0x02
   13ad8:	9b 81       	ldd	r25, Y+3	; 0x03
   13ada:	0e 94 95 48 	call	0x912a	; 0x912a <atoi>
   13ade:	d8 2f       	mov	r29, r24
	index = index_address(address);
   13ae0:	be df       	rcall	.-132    	; 0x13a5e <index_address>
   13ae2:	c8 2f       	mov	r28, r24
	if(index == -1)
   13ae4:	8f 3f       	cpi	r24, 0xFF	; 255
   13ae6:	89 f4       	brne	.+34     	; 0x13b0a <umount+0x80>
	{
		printf("umount address:[%d] NOT found\n", address);
   13ae8:	8d 2f       	mov	r24, r29
   13aea:	dd 0f       	add	r29, r29
   13aec:	99 0b       	sbc	r25, r25
   13aee:	ed b7       	in	r30, 0x3d	; 61
   13af0:	fe b7       	in	r31, 0x3e	; 62
   13af2:	95 83       	std	Z+5, r25	; 0x05
   13af4:	84 83       	std	Z+4, r24	; 0x04
   13af6:	87 e1       	ldi	r24, 0x17	; 23
   13af8:	97 e1       	ldi	r25, 0x17	; 23
   13afa:	a0 e0       	ldi	r26, 0x00	; 0
   13afc:	81 83       	std	Z+1, r24	; 0x01
   13afe:	92 83       	std	Z+2, r25	; 0x02
   13b00:	a3 83       	std	Z+3, r26	; 0x03
   13b02:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
		return(-1);
   13b06:	8f ef       	ldi	r24, 0xFF	; 255
	}
	free_device(index);
   13b08:	02 c0       	rjmp	.+4      	; 0x13b0e <umount+0x84>
   13b0a:	fb db       	rcall	.-2058   	; 0x13302 <free_device>
	return(index);
   13b0c:	8c 2f       	mov	r24, r28
}
   13b0e:	cd b7       	in	r28, 0x3d	; 61
   13b10:	de b7       	in	r29, 0x3e	; 62
   13b12:	25 96       	adiw	r28, 0x05	; 5
   13b14:	e2 e0       	ldi	r30, 0x02	; 2
   13b16:	0c 94 d0 e8 	jmp	0x1d1a0	; 0x1d1a0 <__epilogue_restores__+0x20>

00013b1a <display_mount>:
	return(1);
}


void display_mount(int8_t index )
{
   13b1a:	a9 e0       	ldi	r26, 0x09	; 9
   13b1c:	b0 e0       	ldi	r27, 0x00	; 0
   13b1e:	e3 e9       	ldi	r30, 0x93	; 147
   13b20:	fd e9       	ldi	r31, 0x9D	; 157
   13b22:	0c 94 b2 e8 	jmp	0x1d164	; 0x1d164 <__prologue_saves__+0x1c>
#ifdef AMIGO
///@brief Active AMIGO Device
    AMIGODiskType *AMIGOp = NULL;
#endif

	if(Devices[index].TYPE == NO_TYPE)
   13b26:	08 2f       	mov	r16, r24
   13b28:	08 2e       	mov	r0, r24
   13b2a:	00 0c       	add	r0, r0
   13b2c:	11 0b       	sbc	r17, r17
   13b2e:	9b e0       	ldi	r25, 0x0B	; 11
   13b30:	89 02       	muls	r24, r25
   13b32:	f0 01       	movw	r30, r0
   13b34:	11 24       	eor	r1, r1
   13b36:	ec 50       	subi	r30, 0x0C	; 12
   13b38:	f1 4e       	sbci	r31, 0xE1	; 225
   13b3a:	80 81       	ld	r24, Z
   13b3c:	88 23       	and	r24, r24
   13b3e:	09 f4       	brne	.+2      	; 0x13b42 <display_mount+0x28>
   13b40:	5f c0       	rjmp	.+190    	; 0x13c00 <display_mount+0xe6>
		return;

	if(Devices[index].TYPE == SS80_TYPE)
   13b42:	83 30       	cpi	r24, 0x03	; 3
   13b44:	c9 f4       	brne	.+50     	; 0x13b78 <display_mount+0x5e>
	{
		SS80p= (SS80DiskType *)Devices[index].dev;
   13b46:	07 80       	ldd	r0, Z+7	; 0x07
   13b48:	f0 85       	ldd	r31, Z+8	; 0x08
   13b4a:	e0 2d       	mov	r30, r0

		printf("SS80    %-8s %2d %s\n", SS80p->HEADER.model, (int) SS80p->HEADER.ADDRESS, SS80p->HEADER.NAME);
   13b4c:	82 81       	ldd	r24, Z+2	; 0x02
   13b4e:	93 81       	ldd	r25, Z+3	; 0x03
   13b50:	cd b7       	in	r28, 0x3d	; 61
   13b52:	de b7       	in	r29, 0x3e	; 62
   13b54:	99 87       	std	Y+9, r25	; 0x09
   13b56:	88 87       	std	Y+8, r24	; 0x08
   13b58:	80 81       	ld	r24, Z
   13b5a:	90 e0       	ldi	r25, 0x00	; 0
   13b5c:	9f 83       	std	Y+7, r25	; 0x07
   13b5e:	8e 83       	std	Y+6, r24	; 0x06
   13b60:	84 81       	ldd	r24, Z+4	; 0x04
   13b62:	95 81       	ldd	r25, Z+5	; 0x05
   13b64:	9d 83       	std	Y+5, r25	; 0x05
   13b66:	8c 83       	std	Y+4, r24	; 0x04
   13b68:	86 e3       	ldi	r24, 0x36	; 54
   13b6a:	96 e1       	ldi	r25, 0x16	; 22
   13b6c:	a0 e0       	ldi	r26, 0x00	; 0
   13b6e:	89 83       	std	Y+1, r24	; 0x01
   13b70:	9a 83       	std	Y+2, r25	; 0x02
   13b72:	ab 83       	std	Y+3, r26	; 0x03
   13b74:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
	}

#ifdef AMIGO
	if(Devices[index].TYPE == AMIGO_TYPE )
   13b78:	8b e0       	ldi	r24, 0x0B	; 11
   13b7a:	80 9f       	mul	r24, r16
   13b7c:	f0 01       	movw	r30, r0
   13b7e:	81 9f       	mul	r24, r17
   13b80:	f0 0d       	add	r31, r0
   13b82:	11 24       	eor	r1, r1
   13b84:	ec 50       	subi	r30, 0x0C	; 12
   13b86:	f1 4e       	sbci	r31, 0xE1	; 225
   13b88:	80 81       	ld	r24, Z
   13b8a:	81 30       	cpi	r24, 0x01	; 1
   13b8c:	c9 f4       	brne	.+50     	; 0x13bc0 <display_mount+0xa6>
	{
		AMIGOp = (AMIGODiskType *)Devices[index].dev;
   13b8e:	07 80       	ldd	r0, Z+7	; 0x07
   13b90:	f0 85       	ldd	r31, Z+8	; 0x08
   13b92:	e0 2d       	mov	r30, r0
		printf("AMIGO   %-8s %2d %s\n", AMIGOp->HEADER.model, (int) AMIGOp->HEADER.ADDRESS, AMIGOp->HEADER.NAME);
   13b94:	82 81       	ldd	r24, Z+2	; 0x02
   13b96:	93 81       	ldd	r25, Z+3	; 0x03
   13b98:	cd b7       	in	r28, 0x3d	; 61
   13b9a:	de b7       	in	r29, 0x3e	; 62
   13b9c:	99 87       	std	Y+9, r25	; 0x09
   13b9e:	88 87       	std	Y+8, r24	; 0x08
   13ba0:	80 81       	ld	r24, Z
   13ba2:	90 e0       	ldi	r25, 0x00	; 0
   13ba4:	9f 83       	std	Y+7, r25	; 0x07
   13ba6:	8e 83       	std	Y+6, r24	; 0x06
   13ba8:	84 81       	ldd	r24, Z+4	; 0x04
   13baa:	95 81       	ldd	r25, Z+5	; 0x05
   13bac:	9d 83       	std	Y+5, r25	; 0x05
   13bae:	8c 83       	std	Y+4, r24	; 0x04
   13bb0:	81 e2       	ldi	r24, 0x21	; 33
   13bb2:	96 e1       	ldi	r25, 0x16	; 22
   13bb4:	a0 e0       	ldi	r26, 0x00	; 0
   13bb6:	89 83       	std	Y+1, r24	; 0x01
   13bb8:	9a 83       	std	Y+2, r25	; 0x02
   13bba:	ab 83       	std	Y+3, r26	; 0x03
   13bbc:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
	}
#endif                                    // #ifdef AMIGO

	if(Devices[index].TYPE == PRINTER_TYPE )
   13bc0:	8b e0       	ldi	r24, 0x0B	; 11
   13bc2:	80 9f       	mul	r24, r16
   13bc4:	f0 01       	movw	r30, r0
   13bc6:	81 9f       	mul	r24, r17
   13bc8:	f0 0d       	add	r31, r0
   13bca:	11 24       	eor	r1, r1
   13bcc:	ec 50       	subi	r30, 0x0C	; 12
   13bce:	f1 4e       	sbci	r31, 0xE1	; 225
   13bd0:	80 81       	ld	r24, Z
   13bd2:	84 30       	cpi	r24, 0x04	; 4
   13bd4:	a9 f4       	brne	.+42     	; 0x13c00 <display_mount+0xe6>
	{
            PRINTERp= (PRINTERDeviceType *)Devices[index].dev;
            printf("PRINTER %-8s %2d\n", " ", (int) PRINTERp->HEADER.ADDRESS);
   13bd6:	07 80       	ldd	r0, Z+7	; 0x07
   13bd8:	f0 85       	ldd	r31, Z+8	; 0x08
   13bda:	e0 2d       	mov	r30, r0
   13bdc:	80 81       	ld	r24, Z
   13bde:	90 e0       	ldi	r25, 0x00	; 0
   13be0:	cd b7       	in	r28, 0x3d	; 61
   13be2:	de b7       	in	r29, 0x3e	; 62
   13be4:	9f 83       	std	Y+7, r25	; 0x07
   13be6:	8e 83       	std	Y+6, r24	; 0x06
   13be8:	89 e6       	ldi	r24, 0x69	; 105
   13bea:	94 e0       	ldi	r25, 0x04	; 4
   13bec:	9d 83       	std	Y+5, r25	; 0x05
   13bee:	8c 83       	std	Y+4, r24	; 0x04
   13bf0:	8f e0       	ldi	r24, 0x0F	; 15
   13bf2:	96 e1       	ldi	r25, 0x16	; 22
   13bf4:	a0 e0       	ldi	r26, 0x00	; 0
   13bf6:	89 83       	std	Y+1, r24	; 0x01
   13bf8:	9a 83       	std	Y+2, r25	; 0x02
   13bfa:	ab 83       	std	Y+3, r26	; 0x03
   13bfc:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
	}
}
   13c00:	cd b7       	in	r28, 0x3d	; 61
   13c02:	de b7       	in	r29, 0x3e	; 62
   13c04:	29 96       	adiw	r28, 0x09	; 9
   13c06:	e4 e0       	ldi	r30, 0x04	; 4
   13c08:	0c 94 ce e8 	jmp	0x1d19c	; 0x1d19c <__epilogue_restores__+0x1c>

00013c0c <verify_device>:

/// ===============================================
/// @brief Verify a device and delete it is there are any errors
/// @return  1 = OK 0 = ERROR
int8_t verify_device(int8_t index)
{
   13c0c:	a5 e0       	ldi	r26, 0x05	; 5
   13c0e:	b0 e0       	ldi	r27, 0x00	; 0
   13c10:	ec e0       	ldi	r30, 0x0C	; 12
   13c12:	fe e9       	ldi	r31, 0x9E	; 158
   13c14:	0c 94 af e8 	jmp	0x1d15e	; 0x1d15e <__prologue_saves__+0x16>
#ifdef AMIGO
///@brief Active AMIGO Device
    AMIGODiskType *AMIGOp = NULL;
#endif

    if(Devices[index].TYPE == NO_TYPE)
   13c18:	e8 2e       	mov	r14, r24
   13c1a:	08 2e       	mov	r0, r24
   13c1c:	00 0c       	add	r0, r0
   13c1e:	ff 08       	sbc	r15, r15
   13c20:	9b e0       	ldi	r25, 0x0B	; 11
   13c22:	89 02       	muls	r24, r25
   13c24:	f0 01       	movw	r30, r0
   13c26:	11 24       	eor	r1, r1
   13c28:	ec 50       	subi	r30, 0x0C	; 12
   13c2a:	f1 4e       	sbci	r31, 0xE1	; 225
   13c2c:	10 81       	ld	r17, Z
   13c2e:	11 23       	and	r17, r17
   13c30:	09 f1       	breq	.+66     	; 0x13c74 <verify_device+0x68>
   13c32:	d8 2e       	mov	r13, r24
        return(ret);

	address = Devices[index].ADDRESS;
   13c34:	81 81       	ldd	r24, Z+1	; 0x01
    type = Devices[index].TYPE;
	ppr = Devices[index].PPR;
   13c36:	02 81       	ldd	r16, Z+2	; 0x02

	if(address < 0 || address > 31)
   13c38:	80 32       	cpi	r24, 0x20	; 32
   13c3a:	78 f0       	brcs	.+30     	; 0x13c5a <verify_device+0x4e>
	{
		printf("Address (%d) out of range\n", (int) address);
   13c3c:	90 e0       	ldi	r25, 0x00	; 0
   13c3e:	ed b7       	in	r30, 0x3d	; 61
   13c40:	fe b7       	in	r31, 0x3e	; 62
   13c42:	95 83       	std	Z+5, r25	; 0x05
   13c44:	84 83       	std	Z+4, r24	; 0x04
   13c46:	81 e8       	ldi	r24, 0x81	; 129
   13c48:	9a e1       	ldi	r25, 0x1A	; 26
   13c4a:	a0 e0       	ldi	r26, 0x00	; 0
   13c4c:	81 83       	std	Z+1, r24	; 0x01
   13c4e:	92 83       	std	Z+2, r25	; 0x02
   13c50:	a3 83       	std	Z+3, r26	; 0x03
   13c52:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
		ret = 0;
   13c56:	80 e0       	ldi	r24, 0x00	; 0
   13c58:	01 c0       	rjmp	.+2      	; 0x13c5c <verify_device+0x50>
int8_t verify_device(int8_t index)
{
    long sectors;
	int8_t type;
	int address,ppr;
	int8_t ret = 1;	
   13c5a:	81 e0       	ldi	r24, 0x01	; 1
	}
	addr_bits |= addr_mask;

	
	// Printers do not use PPR
	if(type == PRINTER_TYPE)
   13c5c:	14 30       	cpi	r17, 0x04	; 4
   13c5e:	61 f4       	brne	.+24     	; 0x13c78 <verify_device+0x6c>
	{
		Devices[index].PPR = 0xff;
   13c60:	8b e0       	ldi	r24, 0x0B	; 11
   13c62:	8e 9d       	mul	r24, r14
   13c64:	f0 01       	movw	r30, r0
   13c66:	8f 9d       	mul	r24, r15
   13c68:	f0 0d       	add	r31, r0
   13c6a:	11 24       	eor	r1, r1
   13c6c:	ec 50       	subi	r30, 0x0C	; 12
   13c6e:	f1 4e       	sbci	r31, 0xE1	; 225
   13c70:	8f ef       	ldi	r24, 0xFF	; 255
   13c72:	82 83       	std	Z+2, r24	; 0x02
		return(1);
   13c74:	81 e0       	ldi	r24, 0x01	; 1
   13c76:	90 c0       	rjmp	.+288    	; 0x13d98 <verify_device+0x18c>
	}
	if(type == SS80_TYPE || AMIGO_TYPE)
	{
		if(ppr < 0 || ppr > 7)
   13c78:	08 30       	cpi	r16, 0x08	; 8
   13c7a:	08 f0       	brcs	.+2      	; 0x13c7e <verify_device+0x72>
		{
			ret = 0;
   13c7c:	80 e0       	ldi	r24, 0x00	; 0
			printf("PPR (%d) duplicated\n", (int) ppr);
			ret = 0;
		}
		ppr_bits |= ppr_mask;
	}
    if(type == SS80_TYPE)
   13c7e:	13 30       	cpi	r17, 0x03	; 3
   13c80:	79 f5       	brne	.+94     	; 0x13ce0 <verify_device+0xd4>
    {
        SS80p= (SS80DiskType *)Devices[index].dev;
   13c82:	9b e0       	ldi	r25, 0x0B	; 11
   13c84:	9e 9d       	mul	r25, r14
   13c86:	f0 01       	movw	r30, r0
   13c88:	9f 9d       	mul	r25, r15
   13c8a:	f0 0d       	add	r31, r0
   13c8c:	11 24       	eor	r1, r1
   13c8e:	ec 50       	subi	r30, 0x0C	; 12
   13c90:	f1 4e       	sbci	r31, 0xE1	; 225
   13c92:	c7 81       	ldd	r28, Z+7	; 0x07
   13c94:	d0 85       	ldd	r29, Z+8	; 0x08
        if( SS80p->UNIT.BYTES_PER_BLOCK != 256)
   13c96:	2a 89       	ldd	r18, Y+18	; 0x12
   13c98:	3b 89       	ldd	r19, Y+19	; 0x13
   13c9a:	21 15       	cp	r18, r1
   13c9c:	31 40       	sbci	r19, 0x01	; 1
   13c9e:	79 f0       	breq	.+30     	; 0x13cbe <verify_device+0xb2>
        {
// SS80p->UNIT.BYTES_PER_BLOCK = 256;
            printf("Warning: %s BYTES_PER_BLOCK != 256, Adjusting to 256\n", SS80p->HEADER.model);
   13ca0:	8c 81       	ldd	r24, Y+4	; 0x04
   13ca2:	9d 81       	ldd	r25, Y+5	; 0x05
   13ca4:	ed b7       	in	r30, 0x3d	; 61
   13ca6:	fe b7       	in	r31, 0x3e	; 62
   13ca8:	95 83       	std	Z+5, r25	; 0x05
   13caa:	84 83       	std	Z+4, r24	; 0x04
   13cac:	8b e4       	ldi	r24, 0x4B	; 75
   13cae:	9a e1       	ldi	r25, 0x1A	; 26
   13cb0:	a0 e0       	ldi	r26, 0x00	; 0
   13cb2:	81 83       	std	Z+1, r24	; 0x01
   13cb4:	92 83       	std	Z+2, r25	; 0x02
   13cb6:	a3 83       	std	Z+3, r26	; 0x03
   13cb8:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
			ret = 0;
   13cbc:	80 e0       	ldi	r24, 0x00	; 0
        }
        sectors = SS80p->VOLUME.MAX_BLOCK_NUMBER+1;
        Devices[index].BLOCKS = sectors;
   13cbe:	9b e0       	ldi	r25, 0x0B	; 11
   13cc0:	9e 9d       	mul	r25, r14
   13cc2:	f0 01       	movw	r30, r0
   13cc4:	9f 9d       	mul	r25, r15
   13cc6:	f0 0d       	add	r31, r0
   13cc8:	11 24       	eor	r1, r1
   13cca:	ec 50       	subi	r30, 0x0C	; 12
   13ccc:	f1 4e       	sbci	r31, 0xE1	; 225
   13cce:	48 a5       	ldd	r20, Y+40	; 0x28
   13cd0:	59 a5       	ldd	r21, Y+41	; 0x29
   13cd2:	6a a5       	ldd	r22, Y+42	; 0x2a
   13cd4:	7b a5       	ldd	r23, Y+43	; 0x2b
   13cd6:	4f 5f       	subi	r20, 0xFF	; 255
   13cd8:	5f 4f       	sbci	r21, 0xFF	; 255
   13cda:	6f 4f       	sbci	r22, 0xFF	; 255
   13cdc:	7f 4f       	sbci	r23, 0xFF	; 255
   13cde:	47 c0       	rjmp	.+142    	; 0x13d6e <verify_device+0x162>
    }                                         // SS80_TYPE

#ifdef AMIGO
    if(type == AMIGO_TYPE )
   13ce0:	11 30       	cpi	r17, 0x01	; 1
   13ce2:	09 f0       	breq	.+2      	; 0x13ce6 <verify_device+0xda>
   13ce4:	48 c0       	rjmp	.+144    	; 0x13d76 <verify_device+0x16a>
    {
        AMIGOp = (AMIGODiskType *)Devices[index].dev;
   13ce6:	9b e0       	ldi	r25, 0x0B	; 11
   13ce8:	9e 9d       	mul	r25, r14
   13cea:	f0 01       	movw	r30, r0
   13cec:	9f 9d       	mul	r25, r15
   13cee:	f0 0d       	add	r31, r0
   13cf0:	11 24       	eor	r1, r1
   13cf2:	ec 50       	subi	r30, 0x0C	; 12
   13cf4:	f1 4e       	sbci	r31, 0xE1	; 225
   13cf6:	c7 81       	ldd	r28, Z+7	; 0x07
   13cf8:	d0 85       	ldd	r29, Z+8	; 0x08
        if( AMIGOp->GEOMETRY.BYTES_PER_SECTOR != 256)
   13cfa:	28 85       	ldd	r18, Y+8	; 0x08
   13cfc:	39 85       	ldd	r19, Y+9	; 0x09
   13cfe:	21 15       	cp	r18, r1
   13d00:	31 40       	sbci	r19, 0x01	; 1
   13d02:	a9 f0       	breq	.+42     	; 0x13d2e <verify_device+0x122>
        {
            AMIGOp->GEOMETRY.BYTES_PER_SECTOR = 256;
   13d04:	80 e0       	ldi	r24, 0x00	; 0
   13d06:	91 e0       	ldi	r25, 0x01	; 1
   13d08:	99 87       	std	Y+9, r25	; 0x09
   13d0a:	88 87       	std	Y+8, r24	; 0x08
            printf("Warning: %s BYTES_PER_SECTOR != 256, Adjusting to 256\n", SS80p->HEADER.model);
   13d0c:	80 91 04 00 	lds	r24, 0x0004	; 0x800004 <__TEXT_REGION_LENGTH__+0x7e0004>
   13d10:	90 91 05 00 	lds	r25, 0x0005	; 0x800005 <__TEXT_REGION_LENGTH__+0x7e0005>
   13d14:	ed b7       	in	r30, 0x3d	; 61
   13d16:	fe b7       	in	r31, 0x3e	; 62
   13d18:	95 83       	std	Z+5, r25	; 0x05
   13d1a:	84 83       	std	Z+4, r24	; 0x04
   13d1c:	84 e1       	ldi	r24, 0x14	; 20
   13d1e:	9a e1       	ldi	r25, 0x1A	; 26
   13d20:	a0 e0       	ldi	r26, 0x00	; 0
   13d22:	81 83       	std	Z+1, r24	; 0x01
   13d24:	92 83       	std	Z+2, r25	; 0x02
   13d26:	a3 83       	std	Z+3, r26	; 0x03
   13d28:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
			ret = 0;
   13d2c:	80 e0       	ldi	r24, 0x00	; 0
        }
        sectors = AMIGOp->GEOMETRY.SECTORS_PER_TRACK
            * AMIGOp->GEOMETRY.HEADS
            * AMIGOp->GEOMETRY.CYLINDERS;
        Devices[index].BLOCKS = sectors;
   13d2e:	9b e0       	ldi	r25, 0x0B	; 11
   13d30:	9e 9d       	mul	r25, r14
   13d32:	f0 01       	movw	r30, r0
   13d34:	9f 9d       	mul	r25, r15
   13d36:	f0 0d       	add	r31, r0
   13d38:	11 24       	eor	r1, r1
   13d3a:	ec 50       	subi	r30, 0x0C	; 12
   13d3c:	f1 4e       	sbci	r31, 0xE1	; 225
   13d3e:	4a 85       	ldd	r20, Y+10	; 0x0a
   13d40:	5b 85       	ldd	r21, Y+11	; 0x0b
   13d42:	2c 85       	ldd	r18, Y+12	; 0x0c
   13d44:	3d 85       	ldd	r19, Y+13	; 0x0d
   13d46:	42 9f       	mul	r20, r18
   13d48:	b0 01       	movw	r22, r0
   13d4a:	43 9f       	mul	r20, r19
   13d4c:	70 0d       	add	r23, r0
   13d4e:	52 9f       	mul	r21, r18
   13d50:	70 0d       	add	r23, r0
   13d52:	11 24       	eor	r1, r1
   13d54:	2e 85       	ldd	r18, Y+14	; 0x0e
   13d56:	3f 85       	ldd	r19, Y+15	; 0x0f
   13d58:	62 9f       	mul	r22, r18
   13d5a:	a0 01       	movw	r20, r0
   13d5c:	63 9f       	mul	r22, r19
   13d5e:	50 0d       	add	r21, r0
   13d60:	72 9f       	mul	r23, r18
   13d62:	50 0d       	add	r21, r0
   13d64:	11 24       	eor	r1, r1
   13d66:	05 2e       	mov	r0, r21
   13d68:	00 0c       	add	r0, r0
   13d6a:	66 0b       	sbc	r22, r22
   13d6c:	77 0b       	sbc	r23, r23
   13d6e:	43 83       	std	Z+3, r20	; 0x03
   13d70:	54 83       	std	Z+4, r21	; 0x04
   13d72:	65 83       	std	Z+5, r22	; 0x05
   13d74:	76 83       	std	Z+6, r23	; 0x06
    }
#endif                                    // #ifdef AMIGO
	if(!ret)
   13d76:	81 11       	cpse	r24, r1
   13d78:	7d cf       	rjmp	.-262    	; 0x13c74 <verify_device+0x68>
	{
		printf("Device errors - removing: ");
   13d7a:	89 ef       	ldi	r24, 0xF9	; 249
   13d7c:	99 e1       	ldi	r25, 0x19	; 25
   13d7e:	a0 e0       	ldi	r26, 0x00	; 0
   13d80:	ed b7       	in	r30, 0x3d	; 61
   13d82:	fe b7       	in	r31, 0x3e	; 62
   13d84:	81 83       	std	Z+1, r24	; 0x01
   13d86:	92 83       	std	Z+2, r25	; 0x02
   13d88:	a3 83       	std	Z+3, r26	; 0x03
   13d8a:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
		display_mount(index);	
   13d8e:	8d 2d       	mov	r24, r13
   13d90:	c4 de       	rcall	.-632    	; 0x13b1a <display_mount>
		free_device(index);
   13d92:	8d 2d       	mov	r24, r13
   13d94:	b6 da       	rcall	.-2708   	; 0x13302 <free_device>
   13d96:	80 e0       	ldi	r24, 0x00	; 0
	}
	return(ret);
}
   13d98:	cd b7       	in	r28, 0x3d	; 61
   13d9a:	de b7       	in	r29, 0x3e	; 62
   13d9c:	25 96       	adiw	r28, 0x05	; 5
   13d9e:	e7 e0       	ldi	r30, 0x07	; 7
   13da0:	0c 94 cb e8 	jmp	0x1d196	; 0x1d196 <__epilogue_restores__+0x16>

00013da4 <verify_devices>:

/// ===============================================
/// @brief Post process and Verify all devices
/// @return  1 = OK 0 = ERROR
void verify_devices()
{
   13da4:	cf 93       	push	r28
	int8_t i;

	for(i=0;i<MAX_DEVICES;++i)
   13da6:	c0 e0       	ldi	r28, 0x00	; 0
		verify_device(i);
   13da8:	8c 2f       	mov	r24, r28
   13daa:	30 df       	rcall	.-416    	; 0x13c0c <verify_device>
   13dac:	cf 5f       	subi	r28, 0xFF	; 255
/// @return  1 = OK 0 = ERROR
void verify_devices()
{
	int8_t i;

	for(i=0;i<MAX_DEVICES;++i)
   13dae:	cc 30       	cpi	r28, 0x0C	; 12
   13db0:	d9 f7       	brne	.-10     	; 0x13da8 <verify_devices+0x4>
		verify_device(i);

}
   13db2:	cf 91       	pop	r28
   13db4:	08 95       	ret

00013db6 <Read_Config>:
/// Set all drive parameters and debuglevel
///
/// @param name: config file name to process
/// @return  number of parse errors
int Read_Config(char *name)
{
   13db6:	ae e1       	ldi	r26, 0x1E	; 30
   13db8:	b1 e0       	ldi	r27, 0x01	; 1
   13dba:	e1 ee       	ldi	r30, 0xE1	; 225
   13dbc:	fe e9       	ldi	r31, 0x9E	; 158
   13dbe:	0c 94 a4 e8 	jmp	0x1d148	; 0x1d148 <__prologue_saves__>
   13dc2:	8c 01       	movw	r16, r24
	int8_t address;

    char str[128];
    char token[128];

    init_Devices();
   13dc4:	b8 db       	rcall	.-2192   	; 0x13536 <init_Devices>

    printf("Reading: %s\n", name);
   13dc6:	ed b7       	in	r30, 0x3d	; 61
   13dc8:	fe b7       	in	r31, 0x3e	; 62
   13dca:	15 83       	std	Z+5, r17	; 0x05
   13dcc:	04 83       	std	Z+4, r16	; 0x04
   13dce:	83 e4       	ldi	r24, 0x43	; 67
   13dd0:	90 e2       	ldi	r25, 0x20	; 32
   13dd2:	a0 e0       	ldi	r26, 0x00	; 0
   13dd4:	81 83       	std	Z+1, r24	; 0x01
   13dd6:	92 83       	std	Z+2, r25	; 0x02
   13dd8:	a3 83       	std	Z+3, r26	; 0x03
   13dda:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
    cfg = fopen(name, "rb");
   13dde:	6c ee       	ldi	r22, 0xEC	; 236
   13de0:	78 e0       	ldi	r23, 0x08	; 8
   13de2:	c8 01       	movw	r24, r16
   13de4:	0e 94 54 7f 	call	0xfea8	; 0xfea8 <fopen>
   13de8:	c5 5f       	subi	r28, 0xF5	; 245
   13dea:	de 4f       	sbci	r29, 0xFE	; 254
   13dec:	99 83       	std	Y+1, r25	; 0x01
   13dee:	88 83       	st	Y, r24
   13df0:	cb 50       	subi	r28, 0x0B	; 11
   13df2:	d1 40       	sbci	r29, 0x01	; 1
    if(cfg == NULL)
   13df4:	89 2b       	or	r24, r25
   13df6:	09 f4       	brne	.+2      	; 0x13dfa <Read_Config+0x44>
   13df8:	58 c0       	rjmp	.+176    	; 0x13eaa <Read_Config+0xf4>
   13dfa:	21 2c       	mov	r2, r1
   13dfc:	31 2c       	mov	r3, r1
   13dfe:	c8 5f       	subi	r28, 0xF8	; 248
   13e00:	de 4f       	sbci	r29, 0xFE	; 254
   13e02:	18 82       	st	Y, r1
   13e04:	c8 50       	subi	r28, 0x08	; 8
   13e06:	d1 40       	sbci	r29, 0x01	; 1
   13e08:	41 2c       	mov	r4, r1
   13e0a:	51 2c       	mov	r5, r1
   13e0c:	e1 2c       	mov	r14, r1
   13e0e:	f1 2c       	mov	r15, r1
   13e10:	c7 5f       	subi	r28, 0xF7	; 247
   13e12:	de 4f       	sbci	r29, 0xFE	; 254
   13e14:	19 82       	std	Y+1, r1	; 0x01
   13e16:	18 82       	st	Y, r1
   13e18:	c9 50       	subi	r28, 0x09	; 9
   13e1a:	d1 40       	sbci	r29, 0x01	; 1
   13e1c:	c1 2c       	mov	r12, r1
   13e1e:	d1 2c       	mov	r13, r1
   13e20:	61 2c       	mov	r6, r1
   13e22:	71 2c       	mov	r7, r1
                        break;
                }
                break;
#endif                                // #ifdef AMIGO
            default:
                printf("Unexpected STATE: %s, at line:%d\n", ptr,lines);
   13e24:	82 e9       	ldi	r24, 0x92	; 146
   13e26:	9d e1       	ldi	r25, 0x1D	; 29
   13e28:	9c 01       	movw	r18, r24
   13e2a:	40 e0       	ldi	r20, 0x00	; 0
   13e2c:	c3 5f       	subi	r28, 0xF3	; 243
   13e2e:	de 4f       	sbci	r29, 0xFE	; 254
   13e30:	28 83       	st	Y, r18
   13e32:	39 83       	std	Y+1, r19	; 0x01
   13e34:	4a 83       	std	Y+2, r20	; 0x02
   13e36:	cd 50       	subi	r28, 0x0D	; 13
   13e38:	d1 40       	sbci	r29, 0x01	; 1
                        break;
                    case TOK_CYLINDERS:
                        AMIGOp->GEOMETRY.CYLINDERS = val.w;
                        break;
                    default:
                        printf("Unexpected AMIGO GEMETRY token: %s, at line:%d\n", ptr,lines);
   13e3a:	84 eb       	ldi	r24, 0xB4	; 180
   13e3c:	9d e1       	ldi	r25, 0x1D	; 29
   13e3e:	9c 01       	movw	r18, r24
   13e40:	40 e0       	ldi	r20, 0x00	; 0
   13e42:	c0 5f       	subi	r28, 0xF0	; 240
   13e44:	de 4f       	sbci	r29, 0xFE	; 254
   13e46:	28 83       	st	Y, r18
   13e48:	39 83       	std	Y+1, r19	; 0x01
   13e4a:	4a 83       	std	Y+2, r20	; 0x02
   13e4c:	c0 51       	subi	r28, 0x10	; 16
   13e4e:	d1 40       	sbci	r29, 0x01	; 1
                {
                    AMIGOp->CONFIG.ID = val.w;
                }
                else
                {
                    printf("Unexpected AMIGO CONFIG token: %s, at line:%d\n", ptr,lines);
   13e50:	84 ee       	ldi	r24, 0xE4	; 228
   13e52:	9d e1       	ldi	r25, 0x1D	; 29
   13e54:	9c 01       	movw	r18, r24
   13e56:	40 e0       	ldi	r20, 0x00	; 0
   13e58:	cd 5e       	subi	r28, 0xED	; 237
   13e5a:	de 4f       	sbci	r29, 0xFE	; 254
   13e5c:	28 83       	st	Y, r18
   13e5e:	39 83       	std	Y+1, r19	; 0x01
   13e60:	4a 83       	std	Y+2, r20	; 0x02
   13e62:	c3 51       	subi	r28, 0x13	; 19
   13e64:	d1 40       	sbci	r29, 0x01	; 1
                        break;
                    case TOK_FILE:
                        AMIGOp->HEADER.NAME = stralloc(token);
                        break;
                    default:
                        printf("Unexpected HEADER CONFIG token: %s, at line:%d\n", ptr,lines);
   13e66:	83 e1       	ldi	r24, 0x13	; 19
   13e68:	9e e1       	ldi	r25, 0x1E	; 30
   13e6a:	9c 01       	movw	r18, r24
   13e6c:	40 e0       	ldi	r20, 0x00	; 0
   13e6e:	ca 5e       	subi	r28, 0xEA	; 234
   13e70:	de 4f       	sbci	r29, 0xFE	; 254
   13e72:	28 83       	st	Y, r18
   13e74:	39 83       	std	Y+1, r19	; 0x01
   13e76:	4a 83       	std	Y+2, r20	; 0x02
   13e78:	c6 51       	subi	r28, 0x16	; 22
   13e7a:	d1 40       	sbci	r29, 0x01	; 1
                    case TOK_GEOMETRY:
                        push_state(state);
                        state = AMIGO_GEOMETRY;
                        break;
                    default:
                        printf("Unexpected AMIGO START token: %s, at line:%d\n", ptr,lines);
   13e7c:	83 e4       	ldi	r24, 0x43	; 67
   13e7e:	9e e1       	ldi	r25, 0x1E	; 30
   13e80:	9c 01       	movw	r18, r24
   13e82:	40 e0       	ldi	r20, 0x00	; 0
   13e84:	c7 5e       	subi	r28, 0xE7	; 231
   13e86:	de 4f       	sbci	r29, 0xFE	; 254
   13e88:	28 83       	st	Y, r18
   13e8a:	39 83       	std	Y+1, r19	; 0x01
   13e8c:	4a 83       	std	Y+2, r20	; 0x02
   13e8e:	c9 51       	subi	r28, 0x19	; 25
   13e90:	d1 40       	sbci	r29, 0x01	; 1
                        break;
                    case TOK_INTERLEAVE:
                        SS80p->VOLUME.INTERLEAVE = val.b;
                        break;
                    default:
                        printf("Unexpected SS80 VOLUME token: %s, at line:%d\n", ptr,lines);
   13e92:	81 e7       	ldi	r24, 0x71	; 113
   13e94:	9e e1       	ldi	r25, 0x1E	; 30
   13e96:	9c 01       	movw	r18, r24
   13e98:	40 e0       	ldi	r20, 0x00	; 0
   13e9a:	c4 5e       	subi	r28, 0xE4	; 228
   13e9c:	de 4f       	sbci	r29, 0xFE	; 254
   13e9e:	28 83       	st	Y, r18
   13ea0:	39 83       	std	Y+1, r19	; 0x01
   13ea2:	4a 83       	std	Y+2, r20	; 0x02
   13ea4:	cc 51       	subi	r28, 0x1C	; 28
   13ea6:	d1 40       	sbci	r29, 0x01	; 1
   13ea8:	26 c0       	rjmp	.+76     	; 0x13ef6 <Read_Config+0x140>
    cfg = fopen(name, "rb");
    if(cfg == NULL)
    {
        ++errors;
//FIXME
        perror("Read_Config - open");
   13eaa:	84 e2       	ldi	r24, 0x24	; 36
   13eac:	9e e0       	ldi	r25, 0x0E	; 14
   13eae:	0e 94 85 79 	call	0xf30a	; 0xf30a <perror>
        printf("Read_Config: open(%s) failed\n", name);
   13eb2:	ed b7       	in	r30, 0x3d	; 61
   13eb4:	fe b7       	in	r31, 0x3e	; 62
   13eb6:	15 83       	std	Z+5, r17	; 0x05
   13eb8:	04 83       	std	Z+4, r16	; 0x04
   13eba:	85 e2       	ldi	r24, 0x25	; 37
   13ebc:	90 e2       	ldi	r25, 0x20	; 32
   13ebe:	a0 e0       	ldi	r26, 0x00	; 0
   13ec0:	81 83       	std	Z+1, r24	; 0x01
   13ec2:	92 83       	std	Z+2, r25	; 0x02
   13ec4:	a3 83       	std	Z+3, r26	; 0x03
   13ec6:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
        set_Config_Defaults();
        return(errors);
   13eca:	81 e0       	ldi	r24, 0x01	; 1
   13ecc:	90 e0       	ldi	r25, 0x00	; 0
   13ece:	70 c3       	rjmp	.+1760   	; 0x145b0 <Read_Config+0x7fa>
    }

    while( (ptr = fgets(str, sizeof(str)-2, cfg)) != NULL)
    {
        ++lines;
   13ed0:	ff ef       	ldi	r31, 0xFF	; 255
   13ed2:	2f 1a       	sub	r2, r31
   13ed4:	3f 0a       	sbc	r3, r31

        ptr = get_token(str, token, sizeof(token)-2);
   13ed6:	4e e7       	ldi	r20, 0x7E	; 126
   13ed8:	50 e0       	ldi	r21, 0x00	; 0
   13eda:	9e 01       	movw	r18, r28
   13edc:	28 5f       	subi	r18, 0xF8	; 248
   13ede:	3f 4f       	sbci	r19, 0xFF	; 255
   13ee0:	49 01       	movw	r8, r18
   13ee2:	b9 01       	movw	r22, r18
   13ee4:	ce 01       	movw	r24, r28
   13ee6:	88 57       	subi	r24, 0x78	; 120
   13ee8:	9f 4f       	sbci	r25, 0xFF	; 255
   13eea:	0e 94 fd 33 	call	0x67fa	; 0x67fa <get_token>
   13eee:	5c 01       	movw	r10, r24

// Skip comments
        if(token[0] == 0 || token[0]  == '#')
   13ef0:	88 85       	ldd	r24, Y+8	; 0x08
   13ef2:	81 11       	cpse	r24, r1
   13ef4:	10 c0       	rjmp	.+32     	; 0x13f16 <Read_Config+0x160>
        printf("Read_Config: open(%s) failed\n", name);
        set_Config_Defaults();
        return(errors);
    }

    while( (ptr = fgets(str, sizeof(str)-2, cfg)) != NULL)
   13ef6:	c5 5f       	subi	r28, 0xF5	; 245
   13ef8:	de 4f       	sbci	r29, 0xFE	; 254
   13efa:	48 81       	ld	r20, Y
   13efc:	59 81       	ldd	r21, Y+1	; 0x01
   13efe:	cb 50       	subi	r28, 0x0B	; 11
   13f00:	d1 40       	sbci	r29, 0x01	; 1
   13f02:	6e e7       	ldi	r22, 0x7E	; 126
   13f04:	70 e0       	ldi	r23, 0x00	; 0
   13f06:	ce 01       	movw	r24, r28
   13f08:	88 57       	subi	r24, 0x78	; 120
   13f0a:	9f 4f       	sbci	r25, 0xFF	; 255
   13f0c:	0e 94 6c 77 	call	0xeed8	; 0xeed8 <fgets>
   13f10:	89 2b       	or	r24, r25
   13f12:	f1 f6       	brne	.-68     	; 0x13ed0 <Read_Config+0x11a>
   13f14:	0d c3       	rjmp	.+1562   	; 0x14530 <Read_Config+0x77a>
        ++lines;

        ptr = get_token(str, token, sizeof(token)-2);

// Skip comments
        if(token[0] == 0 || token[0]  == '#')
   13f16:	83 32       	cpi	r24, 0x23	; 35
   13f18:	71 f3       	breq	.-36     	; 0x13ef6 <Read_Config+0x140>
            continue;

        val.l = 0;
        tok = TOK_INVALID;

        if( ( ind = tok_index(token) )  == -1)
   13f1a:	c4 01       	movw	r24, r8
   13f1c:	0e 94 a6 93 	call	0x1274c	; 0x1274c <tok_index>
   13f20:	8f 3f       	cpi	r24, 0xFF	; 255
   13f22:	49 f4       	brne	.+18     	; 0x13f36 <Read_Config+0x180>
        {
            printf("Unexpected token: %s, at line:%d\n", token,lines);
   13f24:	ed b7       	in	r30, 0x3d	; 61
   13f26:	fe b7       	in	r31, 0x3e	; 62
   13f28:	37 82       	std	Z+7, r3	; 0x07
   13f2a:	26 82       	std	Z+6, r2	; 0x06
   13f2c:	95 82       	std	Z+5, r9	; 0x05
   13f2e:	84 82       	std	Z+4, r8	; 0x04
   13f30:	83 e0       	ldi	r24, 0x03	; 3
   13f32:	90 e2       	ldi	r25, 0x20	; 32
   13f34:	c4 c0       	rjmp	.+392    	; 0x140be <Read_Config+0x308>
            ++errors;
            continue;
        }
        tok = tokens[ind].tok;
   13f36:	24 e0       	ldi	r18, 0x04	; 4
   13f38:	82 02       	muls	r24, r18
   13f3a:	f0 01       	movw	r30, r0
   13f3c:	11 24       	eor	r1, r1
   13f3e:	ec 53       	subi	r30, 0x3C	; 60
   13f40:	fe 4f       	sbci	r31, 0xFE	; 254
   13f42:	02 81       	ldd	r16, Z+2	; 0x02
   13f44:	13 81       	ldd	r17, Z+3	; 0x03

// get optional argument
        ptr = get_token(ptr, token, sizeof(token)-2);
   13f46:	4e e7       	ldi	r20, 0x7E	; 126
   13f48:	50 e0       	ldi	r21, 0x00	; 0
   13f4a:	b4 01       	movw	r22, r8
   13f4c:	c5 01       	movw	r24, r10
   13f4e:	0e 94 fd 33 	call	0x67fa	; 0x67fa <get_token>
   13f52:	5c 01       	movw	r10, r24
        if(MATCH(token,"="))
   13f54:	67 e3       	ldi	r22, 0x37	; 55
   13f56:	7e e0       	ldi	r23, 0x0E	; 14
   13f58:	c4 01       	movw	r24, r8
   13f5a:	0e 94 35 33 	call	0x666a	; 0x666a <MATCH>
   13f5e:	89 2b       	or	r24, r25
   13f60:	39 f0       	breq	.+14     	; 0x13f70 <Read_Config+0x1ba>
            ptr = get_token(ptr, token, sizeof(token)-2);
   13f62:	4e e7       	ldi	r20, 0x7E	; 126
   13f64:	50 e0       	ldi	r21, 0x00	; 0
   13f66:	b4 01       	movw	r22, r8
   13f68:	c5 01       	movw	r24, r10
   13f6a:	0e 94 fd 33 	call	0x67fa	; 0x67fa <get_token>
   13f6e:	5c 01       	movw	r10, r24
        val.l = get_value(token);
   13f70:	c4 01       	movw	r24, r8
   13f72:	0e 94 40 34 	call	0x6880	; 0x6880 <get_value>
        val.w = (uint16_t) 0xFFFF & val.l;
        val.b = (uint8_t) 0xFF & val.l;

//FIXME check for state and last state
        if(tok == TOK_END )
   13f76:	01 31       	cpi	r16, 0x11	; 17
   13f78:	11 05       	cpc	r17, r1
        {
            state = pop_state();
   13f7a:	19 f4       	brne	.+6      	; 0x13f82 <Read_Config+0x1cc>
   13f7c:	0d db       	rcall	.-2534   	; 0x13598 <pop_state>
   13f7e:	3c 01       	movw	r6, r24
            continue;
   13f80:	ba cf       	rjmp	.-140    	; 0x13ef6 <Read_Config+0x140>
        }

        switch(state)
   13f82:	30 e1       	ldi	r19, 0x10	; 16
   13f84:	63 16       	cp	r6, r19
   13f86:	71 04       	cpc	r7, r1
   13f88:	08 f0       	brcs	.+2      	; 0x13f8c <Read_Config+0x1d6>
   13f8a:	bc c2       	rjmp	.+1400   	; 0x14504 <Read_Config+0x74e>
   13f8c:	f3 01       	movw	r30, r6
   13f8e:	ea 53       	subi	r30, 0x3A	; 58
   13f90:	ff 4f       	sbci	r31, 0xFF	; 255
   13f92:	0c 94 75 e8 	jmp	0x1d0ea	; 0x1d0ea <__tablejump2__>
        {
            case START_STATE:
                switch(tok)
   13f96:	0e 30       	cpi	r16, 0x0E	; 14
   13f98:	11 05       	cpc	r17, r1
   13f9a:	09 f4       	brne	.+2      	; 0x13f9e <Read_Config+0x1e8>
   13f9c:	83 c0       	rjmp	.+262    	; 0x140a4 <Read_Config+0x2ee>
   13f9e:	44 f4       	brge	.+16     	; 0x13fb0 <Read_Config+0x1fa>
   13fa0:	02 30       	cpi	r16, 0x02	; 2
   13fa2:	11 05       	cpc	r17, r1
   13fa4:	09 f4       	brne	.+2      	; 0x13fa8 <Read_Config+0x1f2>
   13fa6:	42 c0       	rjmp	.+132    	; 0x1402c <Read_Config+0x276>
   13fa8:	0c 30       	cpi	r16, 0x0C	; 12
   13faa:	11 05       	cpc	r17, r1
   13fac:	19 f1       	breq	.+70     	; 0x13ff4 <Read_Config+0x23e>
   13fae:	7f c0       	rjmp	.+254    	; 0x140ae <Read_Config+0x2f8>
   13fb0:	03 32       	cpi	r16, 0x23	; 35
   13fb2:	11 05       	cpc	r17, r1
   13fb4:	f9 f0       	breq	.+62     	; 0x13ff4 <Read_Config+0x23e>
   13fb6:	04 32       	cpi	r16, 0x24	; 36
   13fb8:	11 05       	cpc	r17, r1
   13fba:	29 f0       	breq	.+10     	; 0x13fc6 <Read_Config+0x210>
   13fbc:	00 32       	cpi	r16, 0x20	; 32
   13fbe:	11 05       	cpc	r17, r1
   13fc0:	09 f0       	breq	.+2      	; 0x13fc4 <Read_Config+0x20e>
   13fc2:	75 c0       	rjmp	.+234    	; 0x140ae <Read_Config+0x2f8>
   13fc4:	4f c0       	rjmp	.+158    	; 0x14064 <Read_Config+0x2ae>
                {
                    case TOK_SS80_DEFAULT:
                        push_state(state);
   13fc6:	80 e0       	ldi	r24, 0x00	; 0
   13fc8:	90 e0       	ldi	r25, 0x00	; 0
   13fca:	cd da       	rcall	.-2662   	; 0x13566 <push_state>
                        state = SS80_STATE;
                        index = alloc_device(SS80_DEFAULT_TYPE);
   13fcc:	82 e0       	ldi	r24, 0x02	; 2
   13fce:	90 e0       	ldi	r25, 0x00	; 0
   13fd0:	f9 d9       	rcall	.-3086   	; 0x133c4 <alloc_device>
   13fd2:	c8 5f       	subi	r28, 0xF8	; 248
   13fd4:	de 4f       	sbci	r29, 0xFE	; 254
   13fd6:	88 83       	st	Y, r24
   13fd8:	c8 50       	subi	r28, 0x08	; 8
   13fda:	d1 40       	sbci	r29, 0x01	; 1
   13fdc:	8f 3f       	cpi	r24, 0xFF	; 255
                        if(index == -1)
   13fde:	09 f4       	brne	.+2      	; 0x13fe2 <Read_Config+0x22c>
   13fe0:	8a cf       	rjmp	.-236    	; 0x13ef6 <Read_Config+0x140>
   13fe2:	4b e0       	ldi	r20, 0x0B	; 11
                            state = START_STATE;
                        else
                            SS80p = (SS80DiskType *) Devices[index].dev;
   13fe4:	84 02       	muls	r24, r20
   13fe6:	f0 01       	movw	r30, r0
   13fe8:	11 24       	eor	r1, r1
   13fea:	ec 50       	subi	r30, 0x0C	; 12
   13fec:	f1 4e       	sbci	r31, 0xE1	; 225
   13fee:	e7 80       	ldd	r14, Z+7	; 0x07
   13ff0:	f0 84       	ldd	r15, Z+8	; 0x08
   13ff2:	18 c0       	rjmp	.+48     	; 0x14024 <Read_Config+0x26e>
                        break;
                    case TOK_SS80:
                    case TOK_CS80:
                        push_state(state);
   13ff4:	80 e0       	ldi	r24, 0x00	; 0
   13ff6:	90 e0       	ldi	r25, 0x00	; 0
   13ff8:	b6 da       	rcall	.-2708   	; 0x13566 <push_state>
                        state = SS80_STATE;
                        index = alloc_device(SS80_TYPE);
   13ffa:	83 e0       	ldi	r24, 0x03	; 3
   13ffc:	90 e0       	ldi	r25, 0x00	; 0
   13ffe:	e2 d9       	rcall	.-3132   	; 0x133c4 <alloc_device>
   14000:	c8 5f       	subi	r28, 0xF8	; 248
   14002:	de 4f       	sbci	r29, 0xFE	; 254
   14004:	88 83       	st	Y, r24
   14006:	c8 50       	subi	r28, 0x08	; 8
   14008:	d1 40       	sbci	r29, 0x01	; 1
   1400a:	8f 3f       	cpi	r24, 0xFF	; 255
                        if(index == -1)
   1400c:	09 f4       	brne	.+2      	; 0x14010 <Read_Config+0x25a>
   1400e:	73 cf       	rjmp	.-282    	; 0x13ef6 <Read_Config+0x140>
   14010:	9b e0       	ldi	r25, 0x0B	; 11
                        {
                            state = START_STATE;
                        }
                        else
                        {
                            SS80p = (SS80DiskType *) Devices[index].dev;
   14012:	89 02       	muls	r24, r25
   14014:	f0 01       	movw	r30, r0
   14016:	11 24       	eor	r1, r1
   14018:	ec 50       	subi	r30, 0x0C	; 12
   1401a:	f1 4e       	sbci	r31, 0xE1	; 225
   1401c:	e7 80       	ldd	r14, Z+7	; 0x07
   1401e:	f0 84       	ldd	r15, Z+8	; 0x08
                            hpdir_set_parameters(index,token); // also SS80p->HEADER.model
   14020:	b4 01       	movw	r22, r8
   14022:	5b db       	rcall	.-2378   	; 0x136da <hpdir_set_parameters>
   14024:	66 24       	eor	r6, r6
                            SS80p = (SS80DiskType *) Devices[index].dev;
                        break;
                    case TOK_SS80:
                    case TOK_CS80:
                        push_state(state);
                        state = SS80_STATE;
   14026:	63 94       	inc	r6
   14028:	71 2c       	mov	r7, r1
                            hpdir_set_parameters(index,token); // also SS80p->HEADER.model
                        }
                        break;
#ifdef AMIGO
                    case TOK_AMIGO:
                        push_state(state);
   1402a:	65 cf       	rjmp	.-310    	; 0x13ef6 <Read_Config+0x140>
   1402c:	80 e0       	ldi	r24, 0x00	; 0
   1402e:	90 e0       	ldi	r25, 0x00	; 0
   14030:	9a da       	rcall	.-2764   	; 0x13566 <push_state>
                        state = AMIGO_STATE;
                        index = alloc_device(AMIGO_TYPE);
   14032:	81 e0       	ldi	r24, 0x01	; 1
   14034:	90 e0       	ldi	r25, 0x00	; 0
   14036:	c6 d9       	rcall	.-3188   	; 0x133c4 <alloc_device>
   14038:	c8 5f       	subi	r28, 0xF8	; 248
   1403a:	de 4f       	sbci	r29, 0xFE	; 254
   1403c:	88 83       	st	Y, r24
   1403e:	c8 50       	subi	r28, 0x08	; 8
   14040:	d1 40       	sbci	r29, 0x01	; 1
   14042:	8f 3f       	cpi	r24, 0xFF	; 255
                        if(index == -1)
   14044:	09 f4       	brne	.+2      	; 0x14048 <Read_Config+0x292>
   14046:	57 cf       	rjmp	.-338    	; 0x13ef6 <Read_Config+0x140>
   14048:	ab e0       	ldi	r26, 0x0B	; 11
                        {
                            state = START_STATE;
                        }
                        else
                        {
                            AMIGOp = (AMIGODiskType *) Devices[index].dev;
   1404a:	8a 02       	muls	r24, r26
   1404c:	f0 01       	movw	r30, r0
   1404e:	11 24       	eor	r1, r1
   14050:	ec 50       	subi	r30, 0x0C	; 12
   14052:	f1 4e       	sbci	r31, 0xE1	; 225
   14054:	47 80       	ldd	r4, Z+7	; 0x07
   14056:	50 84       	ldd	r5, Z+8	; 0x08
                            hpdir_set_parameters(index,token); // also sets AMIGOp->HEADER.model
   14058:	b4 01       	movw	r22, r8
   1405a:	3f db       	rcall	.-2434   	; 0x136da <hpdir_set_parameters>
                        }
                        break;
#ifdef AMIGO
                    case TOK_AMIGO:
                        push_state(state);
                        state = AMIGO_STATE;
   1405c:	aa e0       	ldi	r26, 0x0A	; 10
   1405e:	6a 2e       	mov	r6, r26
   14060:	71 2c       	mov	r7, r1
   14062:	49 cf       	rjmp	.-366    	; 0x13ef6 <Read_Config+0x140>
                            hpdir_set_parameters(index,token); // also sets AMIGOp->HEADER.model
                        }
                        break;
#endif
                    case TOK_PRINTER:
                        push_state(state);
   14064:	80 e0       	ldi	r24, 0x00	; 0
   14066:	90 e0       	ldi	r25, 0x00	; 0
   14068:	7e da       	rcall	.-2820   	; 0x13566 <push_state>
   1406a:	84 e0       	ldi	r24, 0x04	; 4
                        state = PRINTER_STATE;
                        index = alloc_device(PRINTER_TYPE);
   1406c:	90 e0       	ldi	r25, 0x00	; 0
   1406e:	aa d9       	rcall	.-3244   	; 0x133c4 <alloc_device>
   14070:	c8 5f       	subi	r28, 0xF8	; 248
   14072:	de 4f       	sbci	r29, 0xFE	; 254
   14074:	88 83       	st	Y, r24
   14076:	c8 50       	subi	r28, 0x08	; 8
   14078:	d1 40       	sbci	r29, 0x01	; 1
   1407a:	8f 3f       	cpi	r24, 0xFF	; 255
   1407c:	09 f4       	brne	.+2      	; 0x14080 <Read_Config+0x2ca>
                        if(index == -1)
   1407e:	3b cf       	rjmp	.-394    	; 0x13ef6 <Read_Config+0x140>
   14080:	bb e0       	ldi	r27, 0x0B	; 11
   14082:	8b 02       	muls	r24, r27
                            state = START_STATE;
                        else
                            PRINTERp = (PRINTERDeviceType *) Devices[index].dev;
   14084:	f0 01       	movw	r30, r0
   14086:	11 24       	eor	r1, r1
   14088:	ec 50       	subi	r30, 0x0C	; 12
   1408a:	f1 4e       	sbci	r31, 0xE1	; 225
   1408c:	27 81       	ldd	r18, Z+7	; 0x07
   1408e:	30 85       	ldd	r19, Z+8	; 0x08
   14090:	c7 5f       	subi	r28, 0xF7	; 247
   14092:	de 4f       	sbci	r29, 0xFE	; 254
   14094:	39 83       	std	Y+1, r19	; 0x01
   14096:	28 83       	st	Y, r18
   14098:	c9 50       	subi	r28, 0x09	; 9
   1409a:	d1 40       	sbci	r29, 0x01	; 1
   1409c:	fe e0       	ldi	r31, 0x0E	; 14
   1409e:	6f 2e       	mov	r6, r31
                        }
                        break;
#endif
                    case TOK_PRINTER:
                        push_state(state);
                        state = PRINTER_STATE;
   140a0:	71 2c       	mov	r7, r1
   140a2:	29 cf       	rjmp	.-430    	; 0x13ef6 <Read_Config+0x140>
   140a4:	60 93 b6 01 	sts	0x01B6, r22	; 0x8001b6 <debuglevel>
                            state = START_STATE;
                        else
                            PRINTERp = (PRINTERDeviceType *) Devices[index].dev;
                        break;
                    case TOK_DEBUG:
                        debuglevel = val.w;
   140a8:	70 93 b7 01 	sts	0x01B7, r23	; 0x8001b7 <debuglevel+0x1>
   140ac:	24 cf       	rjmp	.-440    	; 0x13ef6 <Read_Config+0x140>
   140ae:	ed b7       	in	r30, 0x3d	; 61
                        break;
   140b0:	fe b7       	in	r31, 0x3e	; 62
                    default:
                        printf("Unexpected token: %s, at line:%d\n", ptr,lines);
   140b2:	37 82       	std	Z+7, r3	; 0x07
   140b4:	26 82       	std	Z+6, r2	; 0x06
   140b6:	b5 82       	std	Z+5, r11	; 0x05
   140b8:	a4 82       	std	Z+4, r10	; 0x04
   140ba:	81 ee       	ldi	r24, 0xE1	; 225
   140bc:	9f e1       	ldi	r25, 0x1F	; 31
   140be:	a0 e0       	ldi	r26, 0x00	; 0
   140c0:	81 83       	std	Z+1, r24	; 0x01
   140c2:	92 83       	std	Z+2, r25	; 0x02
   140c4:	a3 83       	std	Z+3, r26	; 0x03
   140c6:	2e c2       	rjmp	.+1116   	; 0x14524 <Read_Config+0x76e>
   140c8:	09 30       	cpi	r16, 0x09	; 9
                        break;
                }
                break;

            case PRINTER_STATE:
                if(tok == TOK_CONFIG)
   140ca:	11 05       	cpc	r17, r1
   140cc:	39 f4       	brne	.+14     	; 0x140dc <Read_Config+0x326>
   140ce:	8e e0       	ldi	r24, 0x0E	; 14
                {
                    push_state(state);
   140d0:	90 e0       	ldi	r25, 0x00	; 0
   140d2:	49 da       	rcall	.-2926   	; 0x13566 <push_state>
   140d4:	ef e0       	ldi	r30, 0x0F	; 15
   140d6:	6e 2e       	mov	r6, r30
                    state = PRINTER_CONFIG;
   140d8:	71 2c       	mov	r7, r1
   140da:	0d cf       	rjmp	.-486    	; 0x13ef6 <Read_Config+0x140>
   140dc:	ed b7       	in	r30, 0x3d	; 61
                {
                    printf("Unexpected PRINTER token: %s, at line:%d\n", ptr,lines);
                    ++errors;
                    break;
                }
                break;
   140de:	fe b7       	in	r31, 0x3e	; 62
                    push_state(state);
                    state = PRINTER_CONFIG;
                }
                else
                {
                    printf("Unexpected PRINTER token: %s, at line:%d\n", ptr,lines);
   140e0:	37 82       	std	Z+7, r3	; 0x07
   140e2:	26 82       	std	Z+6, r2	; 0x06
   140e4:	b5 82       	std	Z+5, r11	; 0x05
   140e6:	a4 82       	std	Z+4, r10	; 0x04
   140e8:	87 eb       	ldi	r24, 0xB7	; 183
   140ea:	9f e1       	ldi	r25, 0x1F	; 31
   140ec:	e8 cf       	rjmp	.-48     	; 0x140be <Read_Config+0x308>
   140ee:	01 30       	cpi	r16, 0x01	; 1
   140f0:	11 05       	cpc	r17, r1
                    break;
                }
                break;

            case PRINTER_CONFIG:
                if(tok == TOK_ADDRESS)
   140f2:	c1 f4       	brne	.+48     	; 0x14124 <Read_Config+0x36e>
   140f4:	c8 5f       	subi	r28, 0xF8	; 248
   140f6:	de 4f       	sbci	r29, 0xFE	; 254
                {
					address = val.b;
                    Devices[index].ADDRESS = address;
   140f8:	28 81       	ld	r18, Y
   140fa:	c8 50       	subi	r28, 0x08	; 8
   140fc:	d1 40       	sbci	r29, 0x01	; 1
   140fe:	3b e0       	ldi	r19, 0x0B	; 11
   14100:	23 02       	muls	r18, r19
   14102:	f0 01       	movw	r30, r0
   14104:	11 24       	eor	r1, r1
   14106:	ec 50       	subi	r30, 0x0C	; 12
   14108:	f1 4e       	sbci	r31, 0xE1	; 225
   1410a:	61 83       	std	Z+1, r22	; 0x01
   1410c:	c7 5f       	subi	r28, 0xF7	; 247
   1410e:	de 4f       	sbci	r29, 0xFE	; 254
                    PRINTERp->HEADER.ADDRESS  = address;
   14110:	a8 81       	ld	r26, Y
   14112:	b9 81       	ldd	r27, Y+1	; 0x01
   14114:	c9 50       	subi	r28, 0x09	; 9
   14116:	d1 40       	sbci	r29, 0x01	; 1
   14118:	6c 93       	st	X, r22
   1411a:	8f ef       	ldi	r24, 0xFF	; 255
   1411c:	82 83       	std	Z+2, r24	; 0x02
// NO PPR
                    Devices[index].PPR = 0xff;
   1411e:	fd 01       	movw	r30, r26
   14120:	81 83       	std	Z+1, r24	; 0x01
                    PRINTERp->HEADER.PPR = 0xff;
   14122:	e9 ce       	rjmp	.-558    	; 0x13ef6 <Read_Config+0x140>
   14124:	ed b7       	in	r30, 0x3d	; 61
   14126:	fe b7       	in	r31, 0x3e	; 62
                }
                else
                {
                    printf("Unexpected PRINTER CONFIG token: %s, at line:%d\n", ptr,lines);
   14128:	37 82       	std	Z+7, r3	; 0x07
   1412a:	26 82       	std	Z+6, r2	; 0x06
   1412c:	b5 82       	std	Z+5, r11	; 0x05
   1412e:	a4 82       	std	Z+4, r10	; 0x04
   14130:	86 e8       	ldi	r24, 0x86	; 134
   14132:	9f e1       	ldi	r25, 0x1F	; 31
   14134:	c4 cf       	rjmp	.-120    	; 0x140be <Read_Config+0x308>
   14136:	05 31       	cpi	r16, 0x15	; 21
                    ++errors;
                }
                break;

            case SS80_STATE:
                switch(tok)
   14138:	11 05       	cpc	r17, r1
   1413a:	d9 f0       	breq	.+54     	; 0x14172 <Read_Config+0x3bc>
   1413c:	6c f4       	brge	.+26     	; 0x14158 <Read_Config+0x3a2>
   1413e:	09 30       	cpi	r16, 0x09	; 9
   14140:	11 05       	cpc	r17, r1
   14142:	f1 f0       	breq	.+60     	; 0x14180 <Read_Config+0x3ca>
   14144:	0b 30       	cpi	r16, 0x0B	; 11
   14146:	11 05       	cpc	r17, r1
   14148:	49 f5       	brne	.+82     	; 0x1419c <Read_Config+0x3e6>
   1414a:	81 e0       	ldi	r24, 0x01	; 1
                    case TOK_CONFIG:
                        push_state(state);
                        state = SS80_CONFIG;
                        break;
                    case TOK_CONTROLLER:
                        push_state(state);
   1414c:	90 e0       	ldi	r25, 0x00	; 0
   1414e:	0b da       	rcall	.-3050   	; 0x13566 <push_state>
   14150:	54 e0       	ldi	r21, 0x04	; 4
                        state = SS80_CONTROLLER;
   14152:	65 2e       	mov	r6, r21
   14154:	71 2c       	mov	r7, r1
   14156:	cf ce       	rjmp	.-610    	; 0x13ef6 <Read_Config+0x140>
                        break;
   14158:	07 32       	cpi	r16, 0x27	; 39
                    ++errors;
                }
                break;

            case SS80_STATE:
                switch(tok)
   1415a:	11 05       	cpc	r17, r1
   1415c:	c1 f0       	breq	.+48     	; 0x1418e <Read_Config+0x3d8>
   1415e:	0a 32       	cpi	r16, 0x2A	; 42
   14160:	11 05       	cpc	r17, r1
   14162:	e1 f4       	brne	.+56     	; 0x1419c <Read_Config+0x3e6>
                    case TOK_UNIT:
                        push_state(state);
                        state = SS80_UNIT;
                        break;
                    case TOK_VOLUME:
                        push_state(state);
   14164:	81 e0       	ldi	r24, 0x01	; 1
   14166:	90 e0       	ldi	r25, 0x00	; 0
   14168:	fe d9       	rcall	.-3076   	; 0x13566 <push_state>
                        state = SS80_VOLUME;
   1416a:	36 e0       	ldi	r19, 0x06	; 6
   1416c:	63 2e       	mov	r6, r19
   1416e:	71 2c       	mov	r7, r1
                        break;
   14170:	c2 ce       	rjmp	.-636    	; 0x13ef6 <Read_Config+0x140>

            case SS80_STATE:
                switch(tok)
                {
                    case TOK_HEADER:
                        push_state(state);
   14172:	81 e0       	ldi	r24, 0x01	; 1
   14174:	90 e0       	ldi	r25, 0x00	; 0
   14176:	f7 d9       	rcall	.-3090   	; 0x13566 <push_state>
                        state = SS80_HEADER;
   14178:	72 e0       	ldi	r23, 0x02	; 2
   1417a:	67 2e       	mov	r6, r23
   1417c:	71 2c       	mov	r7, r1
                        break;
   1417e:	bb ce       	rjmp	.-650    	; 0x13ef6 <Read_Config+0x140>
                    case TOK_CONFIG:
                        push_state(state);
   14180:	81 e0       	ldi	r24, 0x01	; 1
   14182:	90 e0       	ldi	r25, 0x00	; 0
   14184:	f0 d9       	rcall	.-3104   	; 0x13566 <push_state>
   14186:	63 e0       	ldi	r22, 0x03	; 3
                        state = SS80_CONFIG;
   14188:	66 2e       	mov	r6, r22
   1418a:	71 2c       	mov	r7, r1
   1418c:	b4 ce       	rjmp	.-664    	; 0x13ef6 <Read_Config+0x140>
                        break;
   1418e:	81 e0       	ldi	r24, 0x01	; 1
                    case TOK_CONTROLLER:
                        push_state(state);
                        state = SS80_CONTROLLER;
                        break;
                    case TOK_UNIT:
                        push_state(state);
   14190:	90 e0       	ldi	r25, 0x00	; 0
   14192:	e9 d9       	rcall	.-3118   	; 0x13566 <push_state>
   14194:	45 e0       	ldi	r20, 0x05	; 5
   14196:	64 2e       	mov	r6, r20
                        state = SS80_UNIT;
   14198:	71 2c       	mov	r7, r1
   1419a:	ad ce       	rjmp	.-678    	; 0x13ef6 <Read_Config+0x140>
   1419c:	ed b7       	in	r30, 0x3d	; 61
                        break;
   1419e:	fe b7       	in	r31, 0x3e	; 62
                    case TOK_VOLUME:
                        push_state(state);
                        state = SS80_VOLUME;
                        break;
                    default:
                        printf("Unexpected SS80 START token: %s, at line:%d\n", ptr,lines);
   141a0:	37 82       	std	Z+7, r3	; 0x07
   141a2:	26 82       	std	Z+6, r2	; 0x06
   141a4:	b5 82       	std	Z+5, r11	; 0x05
   141a6:	a4 82       	std	Z+4, r10	; 0x04
   141a8:	89 e5       	ldi	r24, 0x59	; 89
   141aa:	9f e1       	ldi	r25, 0x1F	; 31
   141ac:	88 cf       	rjmp	.-240    	; 0x140be <Read_Config+0x308>
   141ae:	02 31       	cpi	r16, 0x12	; 18
   141b0:	11 05       	cpc	r17, r1
                        break;
                }
                break;

            case SS80_HEADER:
                switch(tok)
   141b2:	11 f1       	breq	.+68     	; 0x141f8 <Read_Config+0x442>
   141b4:	0f 31       	cpi	r16, 0x1F	; 31
   141b6:	11 05       	cpc	r17, r1
   141b8:	89 f0       	breq	.+34     	; 0x141dc <Read_Config+0x426>
   141ba:	01 30       	cpi	r16, 0x01	; 1
   141bc:	11 05       	cpc	r17, r1
   141be:	09 f5       	brne	.+66     	; 0x14202 <Read_Config+0x44c>
   141c0:	c8 5f       	subi	r28, 0xF8	; 248
   141c2:	de 4f       	sbci	r29, 0xFE	; 254
                {
                    case TOK_ADDRESS:
						address = val.b;
                        Devices[index].ADDRESS = address;
   141c4:	28 81       	ld	r18, Y
   141c6:	c8 50       	subi	r28, 0x08	; 8
   141c8:	d1 40       	sbci	r29, 0x01	; 1
   141ca:	3b e0       	ldi	r19, 0x0B	; 11
   141cc:	23 02       	muls	r18, r19
   141ce:	f0 01       	movw	r30, r0
   141d0:	11 24       	eor	r1, r1
   141d2:	ec 50       	subi	r30, 0x0C	; 12
   141d4:	f1 4e       	sbci	r31, 0xE1	; 225
   141d6:	61 83       	std	Z+1, r22	; 0x01
   141d8:	d7 01       	movw	r26, r14
   141da:	33 c1       	rjmp	.+614    	; 0x14442 <Read_Config+0x68c>
                        SS80p->HEADER.ADDRESS  = address;
   141dc:	c8 5f       	subi	r28, 0xF8	; 248
   141de:	de 4f       	sbci	r29, 0xFE	; 254
                        break;
                    case TOK_PPR:
						ppr = val.b;
                        Devices[index].PPR = ppr;
   141e0:	b8 81       	ld	r27, Y
   141e2:	c8 50       	subi	r28, 0x08	; 8
   141e4:	d1 40       	sbci	r29, 0x01	; 1
   141e6:	2b e0       	ldi	r18, 0x0B	; 11
   141e8:	b2 02       	muls	r27, r18
   141ea:	f0 01       	movw	r30, r0
   141ec:	11 24       	eor	r1, r1
   141ee:	ec 50       	subi	r30, 0x0C	; 12
   141f0:	f1 4e       	sbci	r31, 0xE1	; 225
   141f2:	62 83       	std	Z+2, r22	; 0x02
   141f4:	f7 01       	movw	r30, r14
   141f6:	27 c1       	rjmp	.+590    	; 0x14446 <Read_Config+0x690>
                        SS80p->HEADER.PPR = ppr;
   141f8:	c4 01       	movw	r24, r8
   141fa:	0e 94 eb 32 	call	0x65d6	; 0x65d6 <stralloc>
                        break;
                    case TOK_FILE:
                        SS80p->HEADER.NAME = stralloc(token);
   141fe:	f7 01       	movw	r30, r14
   14200:	28 c1       	rjmp	.+592    	; 0x14452 <Read_Config+0x69c>
   14202:	ed b7       	in	r30, 0x3d	; 61
   14204:	fe b7       	in	r31, 0x3e	; 62
                        break;
                    default:
                        printf("Unexpected SS80 CONFIG token: %s, at line:%d\n", ptr,lines);
   14206:	37 82       	std	Z+7, r3	; 0x07
   14208:	26 82       	std	Z+6, r2	; 0x06
   1420a:	b5 82       	std	Z+5, r11	; 0x05
   1420c:	a4 82       	std	Z+4, r10	; 0x04
   1420e:	8b e2       	ldi	r24, 0x2B	; 43
   14210:	9f e1       	ldi	r25, 0x1F	; 31
   14212:	55 cf       	rjmp	.-342    	; 0x140be <Read_Config+0x308>
   14214:	07 31       	cpi	r16, 0x17	; 23
   14216:	11 05       	cpc	r17, r1
                        break;
                }
                break;

            case SS80_CONFIG:
                if(tok == TOK_ID )
   14218:	21 f4       	brne	.+8      	; 0x14222 <Read_Config+0x46c>
   1421a:	96 2f       	mov	r25, r22
   1421c:	87 2f       	mov	r24, r23
                {
                    SS80p->CONFIG.ID = val.w;
   1421e:	f7 01       	movw	r30, r14
   14220:	2f c1       	rjmp	.+606    	; 0x14480 <Read_Config+0x6ca>
   14222:	ed b7       	in	r30, 0x3d	; 61
   14224:	fe b7       	in	r31, 0x3e	; 62
                }
                else
                {
                    printf("Unexpected SS80 CONFIG token: %s, at line:%d\n", ptr,lines);
   14226:	37 82       	std	Z+7, r3	; 0x07
   14228:	26 82       	std	Z+6, r2	; 0x06
   1422a:	b5 82       	std	Z+5, r11	; 0x05
   1422c:	a4 82       	std	Z+4, r10	; 0x04
   1422e:	8d ef       	ldi	r24, 0xFD	; 253
   14230:	9e e1       	ldi	r25, 0x1E	; 30
   14232:	45 cf       	rjmp	.-374    	; 0x140be <Read_Config+0x308>
   14234:	06 32       	cpi	r16, 0x26	; 38
   14236:	11 05       	cpc	r17, r1
                    ++errors;
                }
                break;

            case SS80_CONTROLLER:
                switch(tok)
   14238:	71 f0       	breq	.+28     	; 0x14256 <Read_Config+0x4a0>
   1423a:	08 32       	cpi	r16, 0x28	; 40
   1423c:	11 05       	cpc	r17, r1
   1423e:	39 f0       	breq	.+14     	; 0x1424e <Read_Config+0x498>
   14240:	05 32       	cpi	r16, 0x25	; 37
   14242:	11 05       	cpc	r17, r1
   14244:	59 f4       	brne	.+22     	; 0x1425c <Read_Config+0x4a6>
   14246:	96 2f       	mov	r25, r22
   14248:	87 2f       	mov	r24, r23
                {
                    case TOK_UNITS_INSTALLED:
                        SS80p->CONTROLLER.UNITS_INSTALLED = val.w;
                        break;
                    case TOK_TRANSFER_RATE:
                        SS80p->CONTROLLER.TRANSFER_RATE = val.w;
   1424a:	f7 01       	movw	r30, r14
   1424c:	42 c1       	rjmp	.+644    	; 0x144d2 <Read_Config+0x71c>
   1424e:	96 2f       	mov	r25, r22
   14250:	87 2f       	mov	r24, r23

            case SS80_CONTROLLER:
                switch(tok)
                {
                    case TOK_UNITS_INSTALLED:
                        SS80p->CONTROLLER.UNITS_INSTALLED = val.w;
   14252:	f7 01       	movw	r30, r14
   14254:	3b c1       	rjmp	.+630    	; 0x144cc <Read_Config+0x716>
   14256:	f7 01       	movw	r30, r14
   14258:	64 87       	std	Z+12, r22	; 0x0c
                        break;
                    case TOK_TRANSFER_RATE:
                        SS80p->CONTROLLER.TRANSFER_RATE = val.w;
                        break;
                    case TOK_TYPE:
                        SS80p->CONTROLLER.TYPE = val.b;
   1425a:	4d ce       	rjmp	.-870    	; 0x13ef6 <Read_Config+0x140>
   1425c:	ed b7       	in	r30, 0x3d	; 61
                        break;
   1425e:	fe b7       	in	r31, 0x3e	; 62
                    default:
                        printf("Unexpected SS80 CONTROLLER token: %s, at line:%d\n", ptr,lines);
   14260:	37 82       	std	Z+7, r3	; 0x07
   14262:	26 82       	std	Z+6, r2	; 0x06
   14264:	b5 82       	std	Z+5, r11	; 0x05
   14266:	a4 82       	std	Z+4, r10	; 0x04
   14268:	8b ec       	ldi	r24, 0xCB	; 203
   1426a:	9e e1       	ldi	r25, 0x1E	; 30
   1426c:	28 cf       	rjmp	.-432    	; 0x140be <Read_Config+0x308>
   1426e:	0a 30       	cpi	r16, 0x0A	; 10
   14270:	11 05       	cpc	r17, r1
                        break;
                }
                break;

            case SS80_UNIT:
                switch(tok)
   14272:	09 f4       	brne	.+2      	; 0x14276 <Read_Config+0x4c0>
   14274:	45 c0       	rjmp	.+138    	; 0x14300 <Read_Config+0x54a>
   14276:	d4 f4       	brge	.+52     	; 0x142ac <Read_Config+0x4f6>
   14278:	05 30       	cpi	r16, 0x05	; 5
   1427a:	11 05       	cpc	r17, r1
   1427c:	d1 f1       	breq	.+116    	; 0x142f2 <Read_Config+0x53c>
   1427e:	64 f4       	brge	.+24     	; 0x14298 <Read_Config+0x4e2>
   14280:	01 15       	cp	r16, r1
   14282:	11 05       	cpc	r17, r1
   14284:	09 f4       	brne	.+2      	; 0x14288 <Read_Config+0x4d2>
   14286:	40 c0       	rjmp	.+128    	; 0x14308 <Read_Config+0x552>
   14288:	04 30       	cpi	r16, 0x04	; 4
   1428a:	11 05       	cpc	r17, r1
   1428c:	09 f0       	breq	.+2      	; 0x14290 <Read_Config+0x4da>
   1428e:	46 c0       	rjmp	.+140    	; 0x1431c <Read_Config+0x566>
   14290:	f7 01       	movw	r30, r14
   14292:	66 8b       	std	Z+22, r22	; 0x16
                        break;
                    case TOK_BURST_SIZE:
                        SS80p->UNIT.BURST_SIZE = val.b;
                        break;
                    case TOK_BLOCK_TIME:
                        SS80p->UNIT.BLOCK_TIME = val.w;
   14294:	77 8b       	std	Z+23, r23	; 0x17
   14296:	2f ce       	rjmp	.-930    	; 0x13ef6 <Read_Config+0x140>
   14298:	06 30       	cpi	r16, 0x06	; 6
                        break;
   1429a:	11 05       	cpc	r17, r1
                        break;
                }
                break;

            case SS80_UNIT:
                switch(tok)
   1429c:	71 f1       	breq	.+92     	; 0x142fa <Read_Config+0x544>
   1429e:	07 30       	cpi	r16, 0x07	; 7
   142a0:	11 05       	cpc	r17, r1
   142a2:	e1 f5       	brne	.+120    	; 0x1431c <Read_Config+0x566>
   142a4:	f7 01       	movw	r30, r14
   142a6:	62 8b       	std	Z+18, r22	; 0x12
                        break;
                    case TOK_DEVICE_NUMBER:
                        SS80p->UNIT.DEVICE_NUMBER = val.l;
                        break;
                    case TOK_BYTES_PER_BLOCK:
                        SS80p->UNIT.BYTES_PER_BLOCK = val.w;
   142a8:	73 8b       	std	Z+19, r23	; 0x13
   142aa:	25 ce       	rjmp	.-950    	; 0x13ef6 <Read_Config+0x140>
   142ac:	0c 31       	cpi	r16, 0x1C	; 28
                        break;
   142ae:	11 05       	cpc	r17, r1
                        break;
                }
                break;

            case SS80_UNIT:
                switch(tok)
   142b0:	79 f1       	breq	.+94     	; 0x14310 <Read_Config+0x55a>
   142b2:	4c f4       	brge	.+18     	; 0x142c6 <Read_Config+0x510>
   142b4:	0f 30       	cpi	r16, 0x0F	; 15
   142b6:	11 05       	cpc	r17, r1
   142b8:	b1 f0       	breq	.+44     	; 0x142e6 <Read_Config+0x530>
   142ba:	03 31       	cpi	r16, 0x13	; 19
   142bc:	11 05       	cpc	r17, r1
   142be:	71 f5       	brne	.+92     	; 0x1431c <Read_Config+0x566>
   142c0:	f7 01       	movw	r30, r14
   142c2:	67 8f       	std	Z+31, r22	; 0x1f
                        break;
                    case TOK_MAXIMUM_INTERLEAVE:
                        SS80p->UNIT.MAXIMUM_INTERLEAVE = val.b;
                        break;
                    case TOK_FIXED_VOLUMES:
                        SS80p->UNIT.FIXED_VOLUMES = val.b;
   142c4:	18 ce       	rjmp	.-976    	; 0x13ef6 <Read_Config+0x140>
   142c6:	01 32       	cpi	r16, 0x21	; 33
                        break;
   142c8:	11 05       	cpc	r17, r1
                        break;
                }
                break;

            case SS80_UNIT:
                switch(tok)
   142ca:	29 f1       	breq	.+74     	; 0x14316 <Read_Config+0x560>
   142cc:	09 32       	cpi	r16, 0x29	; 41
   142ce:	11 05       	cpc	r17, r1
   142d0:	39 f0       	breq	.+14     	; 0x142e0 <Read_Config+0x52a>
   142d2:	0e 31       	cpi	r16, 0x1E	; 30
   142d4:	11 05       	cpc	r17, r1
   142d6:	11 f5       	brne	.+68     	; 0x1431c <Read_Config+0x566>
   142d8:	f7 01       	movw	r30, r14
   142da:	62 8f       	std	Z+26, r22	; 0x1a
                        break;
                    case TOK_CONTINUOUS_TRANSFER_RATE:
                        SS80p->UNIT.CONTINUOUS_TRANSFER_RATE = val.w;
                        break;
                    case TOK_OPTIMAL_RETRY_TIME:
                        SS80p->UNIT.OPTIMAL_RETRY_TIME = val.w;
   142dc:	73 8f       	std	Z+27, r23	; 0x1b
   142de:	0b ce       	rjmp	.-1002   	; 0x13ef6 <Read_Config+0x140>
   142e0:	f7 01       	movw	r30, r14
                        break;
   142e2:	65 87       	std	Z+13, r22	; 0x0d

            case SS80_UNIT:
                switch(tok)
                {
                    case TOK_UNIT_TYPE:
                        SS80p->UNIT.UNIT_TYPE = val.b;
   142e4:	08 ce       	rjmp	.-1008   	; 0x13ef6 <Read_Config+0x140>
   142e6:	f7 01       	movw	r30, r14
                        break;
   142e8:	66 87       	std	Z+14, r22	; 0x0e
                    case TOK_DEVICE_NUMBER:
                        SS80p->UNIT.DEVICE_NUMBER = val.l;
   142ea:	77 87       	std	Z+15, r23	; 0x0f
   142ec:	80 8b       	std	Z+16, r24	; 0x10
   142ee:	91 8b       	std	Z+17, r25	; 0x11
   142f0:	02 ce       	rjmp	.-1020   	; 0x13ef6 <Read_Config+0x140>
   142f2:	61 70       	andi	r22, 0x01	; 1
                        break;
   142f4:	f7 01       	movw	r30, r14
                    case TOK_BYTES_PER_BLOCK:
                        SS80p->UNIT.BYTES_PER_BLOCK = val.w;
                        break;
                    case TOK_BUFFERED_BLOCKS:
                        SS80p->UNIT.BUFFERED_BLOCKS = 1 & val.b;
   142f6:	64 8b       	std	Z+20, r22	; 0x14
   142f8:	fe cd       	rjmp	.-1028   	; 0x13ef6 <Read_Config+0x140>
   142fa:	f7 01       	movw	r30, r14
                        break;
   142fc:	65 8b       	std	Z+21, r22	; 0x15
                    case TOK_BURST_SIZE:
                        SS80p->UNIT.BURST_SIZE = val.b;
   142fe:	fb cd       	rjmp	.-1034   	; 0x13ef6 <Read_Config+0x140>
   14300:	f7 01       	movw	r30, r14
                        break;
   14302:	60 8f       	std	Z+24, r22	; 0x18
                    case TOK_BLOCK_TIME:
                        SS80p->UNIT.BLOCK_TIME = val.w;
                        break;
                    case TOK_CONTINUOUS_TRANSFER_RATE:
                        SS80p->UNIT.CONTINUOUS_TRANSFER_RATE = val.w;
   14304:	71 8f       	std	Z+25, r23	; 0x19
   14306:	f7 cd       	rjmp	.-1042   	; 0x13ef6 <Read_Config+0x140>
   14308:	f7 01       	movw	r30, r14
                        break;
   1430a:	64 8f       	std	Z+28, r22	; 0x1c
                    case TOK_OPTIMAL_RETRY_TIME:
                        SS80p->UNIT.OPTIMAL_RETRY_TIME = val.w;
                        break;
                    case TOK_ACCESS_TIME:
                        SS80p->UNIT.ACCESS_TIME = val.w;
   1430c:	75 8f       	std	Z+29, r23	; 0x1d
   1430e:	f3 cd       	rjmp	.-1050   	; 0x13ef6 <Read_Config+0x140>
   14310:	f7 01       	movw	r30, r14
                        break;
   14312:	66 8f       	std	Z+30, r22	; 0x1e
                    case TOK_MAXIMUM_INTERLEAVE:
                        SS80p->UNIT.MAXIMUM_INTERLEAVE = val.b;
   14314:	f0 cd       	rjmp	.-1056   	; 0x13ef6 <Read_Config+0x140>
   14316:	f7 01       	movw	r30, r14
                        break;
   14318:	60 a3       	std	Z+32, r22	; 0x20
                    case TOK_FIXED_VOLUMES:
                        SS80p->UNIT.FIXED_VOLUMES = val.b;
                        break;
                    case TOK_REMOVABLE_VOLUMES:
                        SS80p->UNIT.REMOVABLE_VOLUMES = val.b;
   1431a:	ed cd       	rjmp	.-1062   	; 0x13ef6 <Read_Config+0x140>
   1431c:	ed b7       	in	r30, 0x3d	; 61
                        break;
   1431e:	fe b7       	in	r31, 0x3e	; 62
                    default:
                        printf("Unexpected SS80 UNIT token: %s, at line:%d\n", ptr,lines);
   14320:	37 82       	std	Z+7, r3	; 0x07
   14322:	26 82       	std	Z+6, r2	; 0x06
   14324:	b5 82       	std	Z+5, r11	; 0x05
   14326:	a4 82       	std	Z+4, r10	; 0x04
   14328:	8f e9       	ldi	r24, 0x9F	; 159
   1432a:	9e e1       	ldi	r25, 0x1E	; 30
   1432c:	c8 ce       	rjmp	.-624    	; 0x140be <Read_Config+0x308>
   1432e:	0a 31       	cpi	r16, 0x1A	; 26
   14330:	11 05       	cpc	r17, r1
                        break;
                }
                break;

            case SS80_VOLUME:
                switch(tok)
   14332:	b9 f0       	breq	.+46     	; 0x14362 <Read_Config+0x5ac>
   14334:	64 f4       	brge	.+24     	; 0x1434e <Read_Config+0x598>
   14336:	08 31       	cpi	r16, 0x18	; 24
   14338:	11 05       	cpc	r17, r1
   1433a:	e1 f0       	breq	.+56     	; 0x14374 <Read_Config+0x5be>
   1433c:	09 31       	cpi	r16, 0x19	; 25
   1433e:	11 05       	cpc	r17, r1
   14340:	e1 f4       	brne	.+56     	; 0x1437a <Read_Config+0x5c4>
   14342:	f7 01       	movw	r30, r14
   14344:	60 a7       	std	Z+40, r22	; 0x28
                        break;
                    case TOK_MAX_SECTOR:
                        SS80p->VOLUME.MAX_SECTOR = val.w;
                        break;
                    case TOK_MAX_BLOCK_NUMBER:
                        SS80p->VOLUME.MAX_BLOCK_NUMBER = val.l;
   14346:	71 a7       	std	Z+41, r23	; 0x29
   14348:	82 a7       	std	Z+42, r24	; 0x2a
   1434a:	93 a7       	std	Z+43, r25	; 0x2b
   1434c:	d4 cd       	rjmp	.-1112   	; 0x13ef6 <Read_Config+0x140>
   1434e:	0b 31       	cpi	r16, 0x1B	; 27
                        break;
   14350:	11 05       	cpc	r17, r1
                        break;
                }
                break;

            case SS80_VOLUME:
                switch(tok)
   14352:	69 f0       	breq	.+26     	; 0x1436e <Read_Config+0x5b8>
   14354:	0d 31       	cpi	r16, 0x1D	; 29
   14356:	11 05       	cpc	r17, r1
   14358:	81 f4       	brne	.+32     	; 0x1437a <Read_Config+0x5c4>
   1435a:	f7 01       	movw	r30, r14
   1435c:	66 a3       	std	Z+38, r22	; 0x26
                        break;
                    case TOK_MAX_HEAD:
                        SS80p->VOLUME.MAX_HEAD = val.b;
                        break;
                    case TOK_MAX_SECTOR:
                        SS80p->VOLUME.MAX_SECTOR = val.w;
   1435e:	77 a3       	std	Z+39, r23	; 0x27
   14360:	ca cd       	rjmp	.-1132   	; 0x13ef6 <Read_Config+0x140>
   14362:	f7 01       	movw	r30, r14
                        break;
   14364:	61 a3       	std	Z+33, r22	; 0x21

            case SS80_VOLUME:
                switch(tok)
                {
                    case TOK_MAX_CYLINDER:
                        SS80p->VOLUME.MAX_CYLINDER = val.l;
   14366:	72 a3       	std	Z+34, r23	; 0x22
   14368:	83 a3       	std	Z+35, r24	; 0x23
   1436a:	94 a3       	std	Z+36, r25	; 0x24
   1436c:	c4 cd       	rjmp	.-1144   	; 0x13ef6 <Read_Config+0x140>
   1436e:	f7 01       	movw	r30, r14
                        break;
   14370:	65 a3       	std	Z+37, r22	; 0x25
                    case TOK_MAX_HEAD:
                        SS80p->VOLUME.MAX_HEAD = val.b;
   14372:	c1 cd       	rjmp	.-1150   	; 0x13ef6 <Read_Config+0x140>
   14374:	f7 01       	movw	r30, r14
                        break;
   14376:	64 a7       	std	Z+44, r22	; 0x2c
                        break;
                    case TOK_MAX_BLOCK_NUMBER:
                        SS80p->VOLUME.MAX_BLOCK_NUMBER = val.l;
                        break;
                    case TOK_INTERLEAVE:
                        SS80p->VOLUME.INTERLEAVE = val.b;
   14378:	be cd       	rjmp	.-1156   	; 0x13ef6 <Read_Config+0x140>
   1437a:	ed b7       	in	r30, 0x3d	; 61
                        break;
   1437c:	fe b7       	in	r31, 0x3e	; 62
                    default:
                        printf("Unexpected SS80 VOLUME token: %s, at line:%d\n", ptr,lines);
   1437e:	37 82       	std	Z+7, r3	; 0x07
   14380:	26 82       	std	Z+6, r2	; 0x06
   14382:	b5 82       	std	Z+5, r11	; 0x05
   14384:	a4 82       	std	Z+4, r10	; 0x04
   14386:	c4 5e       	subi	r28, 0xE4	; 228
   14388:	de 4f       	sbci	r29, 0xFE	; 254
   1438a:	28 81       	ld	r18, Y
   1438c:	39 81       	ldd	r19, Y+1	; 0x01
   1438e:	4a 81       	ldd	r20, Y+2	; 0x02
   14390:	cc 51       	subi	r28, 0x1C	; 28
   14392:	d1 40       	sbci	r29, 0x01	; 1
   14394:	c4 c0       	rjmp	.+392    	; 0x1451e <Read_Config+0x768>
   14396:	04 31       	cpi	r16, 0x14	; 20
                }
                break;

#ifdef AMIGO
            case AMIGO_STATE:
                switch(tok)
   14398:	11 05       	cpc	r17, r1
   1439a:	a1 f0       	breq	.+40     	; 0x143c4 <Read_Config+0x60e>
   1439c:	05 31       	cpi	r16, 0x15	; 21
   1439e:	11 05       	cpc	r17, r1
   143a0:	51 f0       	breq	.+20     	; 0x143b6 <Read_Config+0x600>
   143a2:	09 30       	cpi	r16, 0x09	; 9
   143a4:	11 05       	cpc	r17, r1
                    case TOK_HEADER:
                        push_state(state);
                        state = AMIGO_HEADER;
                        break;
                    case TOK_CONFIG:
                        push_state(state);
   143a6:	a9 f4       	brne	.+42     	; 0x143d2 <Read_Config+0x61c>
   143a8:	8a e0       	ldi	r24, 0x0A	; 10
   143aa:	90 e0       	ldi	r25, 0x00	; 0
   143ac:	dc d8       	rcall	.-3656   	; 0x13566 <push_state>
                        state = AMIGO_CONFIG;
   143ae:	9c e0       	ldi	r25, 0x0C	; 12
   143b0:	69 2e       	mov	r6, r25
   143b2:	71 2c       	mov	r7, r1
                        break;
   143b4:	a0 cd       	rjmp	.-1216   	; 0x13ef6 <Read_Config+0x140>
#ifdef AMIGO
            case AMIGO_STATE:
                switch(tok)
                {
                    case TOK_HEADER:
                        push_state(state);
   143b6:	8a e0       	ldi	r24, 0x0A	; 10
   143b8:	90 e0       	ldi	r25, 0x00	; 0
   143ba:	d5 d8       	rcall	.-3670   	; 0x13566 <push_state>
   143bc:	2b e0       	ldi	r18, 0x0B	; 11
                        state = AMIGO_HEADER;
   143be:	62 2e       	mov	r6, r18
   143c0:	71 2c       	mov	r7, r1
   143c2:	99 cd       	rjmp	.-1230   	; 0x13ef6 <Read_Config+0x140>
                        break;
   143c4:	8a e0       	ldi	r24, 0x0A	; 10
                    case TOK_CONFIG:
                        push_state(state);
                        state = AMIGO_CONFIG;
                        break;
                    case TOK_GEOMETRY:
                        push_state(state);
   143c6:	90 e0       	ldi	r25, 0x00	; 0
   143c8:	ce d8       	rcall	.-3684   	; 0x13566 <push_state>
   143ca:	8d e0       	ldi	r24, 0x0D	; 13
   143cc:	68 2e       	mov	r6, r24
                        state = AMIGO_GEOMETRY;
   143ce:	71 2c       	mov	r7, r1
   143d0:	92 cd       	rjmp	.-1244   	; 0x13ef6 <Read_Config+0x140>
   143d2:	ed b7       	in	r30, 0x3d	; 61
                        break;
   143d4:	fe b7       	in	r31, 0x3e	; 62
                    default:
                        printf("Unexpected AMIGO START token: %s, at line:%d\n", ptr,lines);
   143d6:	37 82       	std	Z+7, r3	; 0x07
   143d8:	26 82       	std	Z+6, r2	; 0x06
   143da:	b5 82       	std	Z+5, r11	; 0x05
   143dc:	a4 82       	std	Z+4, r10	; 0x04
   143de:	c7 5e       	subi	r28, 0xE7	; 231
   143e0:	de 4f       	sbci	r29, 0xFE	; 254
   143e2:	28 81       	ld	r18, Y
   143e4:	39 81       	ldd	r19, Y+1	; 0x01
   143e6:	4a 81       	ldd	r20, Y+2	; 0x02
   143e8:	c9 51       	subi	r28, 0x19	; 25
   143ea:	d1 40       	sbci	r29, 0x01	; 1
   143ec:	98 c0       	rjmp	.+304    	; 0x1451e <Read_Config+0x768>
   143ee:	00 31       	cpi	r16, 0x10	; 16
   143f0:	11 05       	cpc	r17, r1
                        break;
                }
                break;

            case AMIGO_HEADER:
                switch(tok)
   143f2:	09 f4       	brne	.+2      	; 0x143f6 <Read_Config+0x640>
   143f4:	80 cd       	rjmp	.-1280   	; 0x13ef6 <Read_Config+0x140>
   143f6:	8c f4       	brge	.+34     	; 0x1441a <Read_Config+0x664>
   143f8:	01 30       	cpi	r16, 0x01	; 1
   143fa:	11 05       	cpc	r17, r1
   143fc:	69 f5       	brne	.+90     	; 0x14458 <Read_Config+0x6a2>
   143fe:	c8 5f       	subi	r28, 0xF8	; 248
   14400:	de 4f       	sbci	r29, 0xFE	; 254
                {
                    case TOK_DRIVE:
                        break;
                    case TOK_ADDRESS:
						address =  val.b;
                        Devices[index].ADDRESS = address;
   14402:	28 81       	ld	r18, Y
   14404:	c8 50       	subi	r28, 0x08	; 8
   14406:	d1 40       	sbci	r29, 0x01	; 1
   14408:	3b e0       	ldi	r19, 0x0B	; 11
   1440a:	23 02       	muls	r18, r19
   1440c:	f0 01       	movw	r30, r0
   1440e:	11 24       	eor	r1, r1
   14410:	ec 50       	subi	r30, 0x0C	; 12
   14412:	f1 4e       	sbci	r31, 0xE1	; 225
   14414:	61 83       	std	Z+1, r22	; 0x01
   14416:	d2 01       	movw	r26, r4
   14418:	14 c0       	rjmp	.+40     	; 0x14442 <Read_Config+0x68c>
                        AMIGOp->HEADER.ADDRESS = address;
   1441a:	02 31       	cpi	r16, 0x12	; 18
   1441c:	11 05       	cpc	r17, r1
                        break;
                }
                break;

            case AMIGO_HEADER:
                switch(tok)
   1441e:	a9 f0       	breq	.+42     	; 0x1444a <Read_Config+0x694>
   14420:	0f 31       	cpi	r16, 0x1F	; 31
   14422:	11 05       	cpc	r17, r1
   14424:	c9 f4       	brne	.+50     	; 0x14458 <Read_Config+0x6a2>
   14426:	c8 5f       	subi	r28, 0xF8	; 248
   14428:	de 4f       	sbci	r29, 0xFE	; 254
                        Devices[index].ADDRESS = address;
                        AMIGOp->HEADER.ADDRESS = address;
                        break;
                    case TOK_PPR:
						ppr = val.b;
                        Devices[index].PPR = ppr;
   1442a:	b8 81       	ld	r27, Y
   1442c:	c8 50       	subi	r28, 0x08	; 8
   1442e:	d1 40       	sbci	r29, 0x01	; 1
   14430:	2b e0       	ldi	r18, 0x0B	; 11
   14432:	b2 02       	muls	r27, r18
   14434:	f0 01       	movw	r30, r0
   14436:	11 24       	eor	r1, r1
   14438:	ec 50       	subi	r30, 0x0C	; 12
   1443a:	f1 4e       	sbci	r31, 0xE1	; 225
   1443c:	62 83       	std	Z+2, r22	; 0x02
   1443e:	f2 01       	movw	r30, r4
   14440:	02 c0       	rjmp	.+4      	; 0x14446 <Read_Config+0x690>
                        AMIGOp->HEADER.PPR = ppr;
   14442:	6c 93       	st	X, r22
   14444:	58 cd       	rjmp	.-1360   	; 0x13ef6 <Read_Config+0x140>
                    case TOK_DRIVE:
                        break;
                    case TOK_ADDRESS:
						address =  val.b;
                        Devices[index].ADDRESS = address;
                        AMIGOp->HEADER.ADDRESS = address;
   14446:	61 83       	std	Z+1, r22	; 0x01
                        break;
   14448:	56 cd       	rjmp	.-1364   	; 0x13ef6 <Read_Config+0x140>
                    case TOK_PPR:
						ppr = val.b;
                        Devices[index].PPR = ppr;
                        AMIGOp->HEADER.PPR = ppr;
   1444a:	c4 01       	movw	r24, r8
                        break;
   1444c:	0e 94 eb 32 	call	0x65d6	; 0x65d6 <stralloc>
                    case TOK_FILE:
                        AMIGOp->HEADER.NAME = stralloc(token);
   14450:	f2 01       	movw	r30, r4
   14452:	93 83       	std	Z+3, r25	; 0x03
   14454:	82 83       	std	Z+2, r24	; 0x02
   14456:	4f cd       	rjmp	.-1378   	; 0x13ef6 <Read_Config+0x140>
   14458:	ed b7       	in	r30, 0x3d	; 61
                        break;
   1445a:	fe b7       	in	r31, 0x3e	; 62
                    default:
                        printf("Unexpected HEADER CONFIG token: %s, at line:%d\n", ptr,lines);
   1445c:	37 82       	std	Z+7, r3	; 0x07
   1445e:	26 82       	std	Z+6, r2	; 0x06
   14460:	b5 82       	std	Z+5, r11	; 0x05
   14462:	a4 82       	std	Z+4, r10	; 0x04
   14464:	ca 5e       	subi	r28, 0xEA	; 234
   14466:	de 4f       	sbci	r29, 0xFE	; 254
   14468:	28 81       	ld	r18, Y
   1446a:	39 81       	ldd	r19, Y+1	; 0x01
   1446c:	4a 81       	ldd	r20, Y+2	; 0x02
   1446e:	c6 51       	subi	r28, 0x16	; 22
   14470:	d1 40       	sbci	r29, 0x01	; 1
   14472:	55 c0       	rjmp	.+170    	; 0x1451e <Read_Config+0x768>
   14474:	07 31       	cpi	r16, 0x17	; 23
   14476:	11 05       	cpc	r17, r1
                        break;
                }
                break;

            case AMIGO_CONFIG:
                if(tok == TOK_ID )
   14478:	31 f4       	brne	.+12     	; 0x14486 <Read_Config+0x6d0>
   1447a:	96 2f       	mov	r25, r22
   1447c:	87 2f       	mov	r24, r23
                {
                    AMIGOp->CONFIG.ID = val.w;
   1447e:	f2 01       	movw	r30, r4
   14480:	96 83       	std	Z+6, r25	; 0x06
   14482:	87 83       	std	Z+7, r24	; 0x07
   14484:	38 cd       	rjmp	.-1424   	; 0x13ef6 <Read_Config+0x140>
   14486:	ed b7       	in	r30, 0x3d	; 61
   14488:	fe b7       	in	r31, 0x3e	; 62
                }
                else
                {
                    printf("Unexpected AMIGO CONFIG token: %s, at line:%d\n", ptr,lines);
   1448a:	37 82       	std	Z+7, r3	; 0x07
   1448c:	26 82       	std	Z+6, r2	; 0x06
   1448e:	b5 82       	std	Z+5, r11	; 0x05
   14490:	a4 82       	std	Z+4, r10	; 0x04
   14492:	cd 5e       	subi	r28, 0xED	; 237
   14494:	de 4f       	sbci	r29, 0xFE	; 254
   14496:	28 81       	ld	r18, Y
   14498:	39 81       	ldd	r19, Y+1	; 0x01
   1449a:	4a 81       	ldd	r20, Y+2	; 0x02
   1449c:	c3 51       	subi	r28, 0x13	; 19
   1449e:	d1 40       	sbci	r29, 0x01	; 1
   144a0:	3e c0       	rjmp	.+124    	; 0x1451e <Read_Config+0x768>
   144a2:	0d 30       	cpi	r16, 0x0D	; 13
   144a4:	11 05       	cpc	r17, r1
                    ++errors;
                }
                break;

            case AMIGO_GEOMETRY:
                switch(tok)
   144a6:	e1 f0       	breq	.+56     	; 0x144e0 <Read_Config+0x72a>
   144a8:	3c f4       	brge	.+14     	; 0x144b8 <Read_Config+0x702>
   144aa:	08 30       	cpi	r16, 0x08	; 8
   144ac:	11 05       	cpc	r17, r1
   144ae:	e1 f4       	brne	.+56     	; 0x144e8 <Read_Config+0x732>
   144b0:	96 2f       	mov	r25, r22
   144b2:	87 2f       	mov	r24, r23
                {
                    case TOK_BYTES_PER_SECTOR:
                        AMIGOp->GEOMETRY.BYTES_PER_SECTOR = val.w;
   144b4:	f2 01       	movw	r30, r4
   144b6:	0a c0       	rjmp	.+20     	; 0x144cc <Read_Config+0x716>
   144b8:	06 31       	cpi	r16, 0x16	; 22
   144ba:	11 05       	cpc	r17, r1
                    ++errors;
                }
                break;

            case AMIGO_GEOMETRY:
                switch(tok)
   144bc:	69 f0       	breq	.+26     	; 0x144d8 <Read_Config+0x722>
   144be:	02 32       	cpi	r16, 0x22	; 34
   144c0:	11 05       	cpc	r17, r1
   144c2:	91 f4       	brne	.+36     	; 0x144e8 <Read_Config+0x732>
   144c4:	96 2f       	mov	r25, r22
   144c6:	87 2f       	mov	r24, r23
                {
                    case TOK_BYTES_PER_SECTOR:
                        AMIGOp->GEOMETRY.BYTES_PER_SECTOR = val.w;
                        break;
                    case TOK_SECTORS_PER_TRACK:
                        AMIGOp->GEOMETRY.SECTORS_PER_TRACK = val.w;
   144c8:	f2 01       	movw	r30, r4
   144ca:	03 c0       	rjmp	.+6      	; 0x144d2 <Read_Config+0x71c>
   144cc:	90 87       	std	Z+8, r25	; 0x08
   144ce:	81 87       	std	Z+9, r24	; 0x09

            case AMIGO_GEOMETRY:
                switch(tok)
                {
                    case TOK_BYTES_PER_SECTOR:
                        AMIGOp->GEOMETRY.BYTES_PER_SECTOR = val.w;
   144d0:	12 cd       	rjmp	.-1500   	; 0x13ef6 <Read_Config+0x140>
   144d2:	92 87       	std	Z+10, r25	; 0x0a
                        break;
   144d4:	83 87       	std	Z+11, r24	; 0x0b
                    case TOK_SECTORS_PER_TRACK:
                        AMIGOp->GEOMETRY.SECTORS_PER_TRACK = val.w;
   144d6:	0f cd       	rjmp	.-1506   	; 0x13ef6 <Read_Config+0x140>
   144d8:	f2 01       	movw	r30, r4
                        break;
   144da:	64 87       	std	Z+12, r22	; 0x0c
                    case TOK_HEADS:
                        AMIGOp->GEOMETRY.HEADS = val.w;
   144dc:	75 87       	std	Z+13, r23	; 0x0d
   144de:	0b cd       	rjmp	.-1514   	; 0x13ef6 <Read_Config+0x140>
   144e0:	f2 01       	movw	r30, r4
                        break;
   144e2:	66 87       	std	Z+14, r22	; 0x0e
                    case TOK_CYLINDERS:
                        AMIGOp->GEOMETRY.CYLINDERS = val.w;
   144e4:	77 87       	std	Z+15, r23	; 0x0f
   144e6:	07 cd       	rjmp	.-1522   	; 0x13ef6 <Read_Config+0x140>
   144e8:	ed b7       	in	r30, 0x3d	; 61
                        break;
   144ea:	fe b7       	in	r31, 0x3e	; 62
                    default:
                        printf("Unexpected AMIGO GEMETRY token: %s, at line:%d\n", ptr,lines);
   144ec:	37 82       	std	Z+7, r3	; 0x07
   144ee:	26 82       	std	Z+6, r2	; 0x06
   144f0:	b5 82       	std	Z+5, r11	; 0x05
   144f2:	a4 82       	std	Z+4, r10	; 0x04
   144f4:	c0 5f       	subi	r28, 0xF0	; 240
   144f6:	de 4f       	sbci	r29, 0xFE	; 254
   144f8:	28 81       	ld	r18, Y
   144fa:	39 81       	ldd	r19, Y+1	; 0x01
   144fc:	4a 81       	ldd	r20, Y+2	; 0x02
   144fe:	c0 51       	subi	r28, 0x10	; 16
   14500:	d1 40       	sbci	r29, 0x01	; 1
   14502:	0d c0       	rjmp	.+26     	; 0x1451e <Read_Config+0x768>
   14504:	ed b7       	in	r30, 0x3d	; 61
   14506:	fe b7       	in	r31, 0x3e	; 62
                        break;
                }
                break;
#endif                                // #ifdef AMIGO
            default:
                printf("Unexpected STATE: %s, at line:%d\n", ptr,lines);
   14508:	37 82       	std	Z+7, r3	; 0x07
   1450a:	26 82       	std	Z+6, r2	; 0x06
   1450c:	b5 82       	std	Z+5, r11	; 0x05
   1450e:	a4 82       	std	Z+4, r10	; 0x04
   14510:	c3 5f       	subi	r28, 0xF3	; 243
   14512:	de 4f       	sbci	r29, 0xFE	; 254
   14514:	28 81       	ld	r18, Y
   14516:	39 81       	ldd	r19, Y+1	; 0x01
   14518:	4a 81       	ldd	r20, Y+2	; 0x02
   1451a:	cd 50       	subi	r28, 0x0D	; 13
   1451c:	d1 40       	sbci	r29, 0x01	; 1
   1451e:	21 83       	std	Z+1, r18	; 0x01
   14520:	32 83       	std	Z+2, r19	; 0x02
   14522:	43 83       	std	Z+3, r20	; 0x03
   14524:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
   14528:	ff ef       	ldi	r31, 0xFF	; 255
   1452a:	cf 1a       	sub	r12, r31
                ++errors;
   1452c:	df 0a       	sbc	r13, r31
   1452e:	e3 cc       	rjmp	.-1594   	; 0x13ef6 <Read_Config+0x140>
   14530:	61 14       	cp	r6, r1
                break;
   14532:	71 04       	cpc	r7, r1

        }                                         // switch
    }                                             //while
    if(state != START_STATE)
   14534:	79 f0       	breq	.+30     	; 0x14554 <Read_Config+0x79e>
   14536:	ed b7       	in	r30, 0x3d	; 61
   14538:	fe b7       	in	r31, 0x3e	; 62
    {
        printf("Missing END statement at line:%d\n", lines);
   1453a:	35 82       	std	Z+5, r3	; 0x05
   1453c:	24 82       	std	Z+4, r2	; 0x04
   1453e:	80 e7       	ldi	r24, 0x70	; 112
   14540:	9d e1       	ldi	r25, 0x1D	; 29
   14542:	a0 e0       	ldi	r26, 0x00	; 0
   14544:	81 83       	std	Z+1, r24	; 0x01
   14546:	92 83       	std	Z+2, r25	; 0x02
   14548:	a3 83       	std	Z+3, r26	; 0x03
   1454a:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
   1454e:	ff ef       	ldi	r31, 0xFF	; 255
   14550:	cf 1a       	sub	r12, r31
        ++errors;
   14552:	df 0a       	sbc	r13, r31
   14554:	ed b7       	in	r30, 0x3d	; 61
   14556:	fe b7       	in	r31, 0x3e	; 62
    }
    printf("Read_Config: read(%d) lines\n", lines);
   14558:	35 82       	std	Z+5, r3	; 0x05
   1455a:	24 82       	std	Z+4, r2	; 0x04
   1455c:	83 e5       	ldi	r24, 0x53	; 83
   1455e:	9d e1       	ldi	r25, 0x1D	; 29
   14560:	a0 e0       	ldi	r26, 0x00	; 0
   14562:	81 83       	std	Z+1, r24	; 0x01
   14564:	92 83       	std	Z+2, r25	; 0x02
   14566:	a3 83       	std	Z+3, r26	; 0x03
   14568:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
   1456c:	c1 14       	cp	r12, r1
   1456e:	d1 04       	cpc	r13, r1
    if(errors)
   14570:	61 f0       	breq	.+24     	; 0x1458a <Read_Config+0x7d4>
   14572:	ed b7       	in	r30, 0x3d	; 61
   14574:	fe b7       	in	r31, 0x3e	; 62
        printf("Read_Config: ****** errors(%d) ******\n", errors);
   14576:	d5 82       	std	Z+5, r13	; 0x05
   14578:	c4 82       	std	Z+4, r12	; 0x04
   1457a:	8c e2       	ldi	r24, 0x2C	; 44
   1457c:	9d e1       	ldi	r25, 0x1D	; 29
   1457e:	a0 e0       	ldi	r26, 0x00	; 0
   14580:	81 83       	std	Z+1, r24	; 0x01
   14582:	92 83       	std	Z+2, r25	; 0x02
   14584:	a3 83       	std	Z+3, r26	; 0x03
   14586:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
   1458a:	c5 5f       	subi	r28, 0xF5	; 245
   1458c:	de 4f       	sbci	r29, 0xFE	; 254

    if(fclose(cfg) == EOF)
   1458e:	88 81       	ld	r24, Y
   14590:	99 81       	ldd	r25, Y+1	; 0x01
   14592:	cb 50       	subi	r28, 0x0B	; 11
   14594:	d1 40       	sbci	r29, 0x01	; 1
   14596:	0e 94 fe 7d 	call	0xfbfc	; 0xfbfc <fclose>
   1459a:	01 96       	adiw	r24, 0x01	; 1
   1459c:	39 f4       	brne	.+14     	; 0x145ac <Read_Config+0x7f6>
   1459e:	89 e3       	ldi	r24, 0x39	; 57
    {
        perror("Read_Config - close error");
   145a0:	9e e0       	ldi	r25, 0x0E	; 14
   145a2:	0e 94 85 79 	call	0xf30a	; 0xf30a <perror>
   145a6:	2f ef       	ldi	r18, 0xFF	; 255
        ++errors;
   145a8:	c2 1a       	sub	r12, r18
   145aa:	d2 0a       	sbc	r13, r18
   145ac:	fb db       	rcall	.-2058   	; 0x13da4 <verify_devices>
    }

// Post process and fixup any devices
    verify_devices();
   145ae:	c6 01       	movw	r24, r12
   145b0:	c2 5e       	subi	r28, 0xE2	; 226

    return(errors);
   145b2:	de 4f       	sbci	r29, 0xFE	; 254
}
   145b4:	e2 e1       	ldi	r30, 0x12	; 18
   145b6:	0c 94 c0 e8 	jmp	0x1d180	; 0x1d180 <__epilogue_restores__>

000145ba <display_mounts>:
   145ba:	cf 93       	push	r28
   145bc:	00 d0       	rcall	.+0      	; 0x145be <display_mounts+0x4>
            printf("PRINTER %-8s %2d\n", " ", (int) PRINTERp->HEADER.ADDRESS);
	}
}

void display_mounts()
{
   145be:	1f 92       	push	r1
	int8_t i;
	printf("Mounted drives\n");
   145c0:	8f ef       	ldi	r24, 0xFF	; 255
   145c2:	95 e1       	ldi	r25, 0x15	; 21
   145c4:	a0 e0       	ldi	r26, 0x00	; 0
   145c6:	ed b7       	in	r30, 0x3d	; 61
   145c8:	fe b7       	in	r31, 0x3e	; 62
   145ca:	81 83       	std	Z+1, r24	; 0x01
   145cc:	92 83       	std	Z+2, r25	; 0x02
   145ce:	a3 83       	std	Z+3, r26	; 0x03
   145d0:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
	for(i=0;i<MAX_DEVICES;++i)
   145d4:	c0 e0       	ldi	r28, 0x00	; 0
		display_mount(i);
   145d6:	8c 2f       	mov	r24, r28
   145d8:	a0 da       	rcall	.-2752   	; 0x13b1a <display_mount>
   145da:	cf 5f       	subi	r28, 0xFF	; 255

void display_mounts()
{
	int8_t i;
	printf("Mounted drives\n");
	for(i=0;i<MAX_DEVICES;++i)
   145dc:	cc 30       	cpi	r28, 0x0C	; 12
   145de:	d9 f7       	brne	.-10     	; 0x145d6 <display_mounts+0x1c>
		display_mount(i);
    printf("\n");
   145e0:	8d ef       	ldi	r24, 0xFD	; 253
   145e2:	95 e1       	ldi	r25, 0x15	; 21
   145e4:	a0 e0       	ldi	r26, 0x00	; 0
   145e6:	ed b7       	in	r30, 0x3d	; 61
   145e8:	fe b7       	in	r31, 0x3e	; 62
   145ea:	81 83       	std	Z+1, r24	; 0x01
   145ec:	92 83       	std	Z+2, r25	; 0x02
   145ee:	a3 83       	std	Z+3, r26	; 0x03
   145f0:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
}
   145f4:	0f 90       	pop	r0
   145f6:	0f 90       	pop	r0
   145f8:	0f 90       	pop	r0
   145fa:	cf 91       	pop	r28
   145fc:	08 95       	ret

000145fe <mount>:

/// ===============================================
/// @brief mount disks - testing
/// @return Devices[] index on success, -1 on error
int8_t mount(int argc, char *argv[])
{
   145fe:	a5 e0       	ldi	r26, 0x05	; 5
   14600:	b0 e0       	ldi	r27, 0x00	; 0
   14602:	e5 e0       	ldi	r30, 0x05	; 5
   14604:	f3 ea       	ldi	r31, 0xA3	; 163
   14606:	0c 94 ae e8 	jmp	0x1d15c	; 0x1d15c <__prologue_saves__+0x14>
   1460a:	eb 01       	movw	r28, r22
	{
		printf("argv[%d] = %s\n", (int) i, argv[i]);

	}
#endif
	if(argc == 1)
   1460c:	81 30       	cpi	r24, 0x01	; 1
   1460e:	91 05       	cpc	r25, r1
   14610:	11 f4       	brne	.+4      	; 0x14616 <mount+0x18>
	{
		display_mounts();
   14612:	d3 df       	rcall	.-90     	; 0x145ba <display_mounts>
   14614:	c2 c0       	rjmp	.+388    	; 0x1479a <mount+0x19c>
		return(1);
	}
	else if(argc == 3)
   14616:	83 30       	cpi	r24, 0x03	; 3
   14618:	91 05       	cpc	r25, r1
   1461a:	61 f5       	brne	.+88     	; 0x14674 <mount+0x76>
	{
			if(MATCHI(argv[1], "PRINTER"))
   1461c:	63 e5       	ldi	r22, 0x53	; 83
   1461e:	7e e0       	ldi	r23, 0x0E	; 14
   14620:	8a 81       	ldd	r24, Y+2	; 0x02
   14622:	9b 81       	ldd	r25, Y+3	; 0x03
   14624:	0e 94 49 33 	call	0x6692	; 0x6692 <MATCHI>
   14628:	89 2b       	or	r24, r25
   1462a:	09 f4       	brne	.+2      	; 0x1462e <mount+0x30>
   1462c:	b6 c0       	rjmp	.+364    	; 0x1479a <mount+0x19c>
			{
				// FIXME - do we want to have separtate address and ppr ?
				int8_t address = atoi(argv[2]) & 0xff;
   1462e:	8c 81       	ldd	r24, Y+4	; 0x04
   14630:	9d 81       	ldd	r25, Y+5	; 0x05
   14632:	0e 94 95 48 	call	0x912a	; 0x912a <atoi>
   14636:	c8 2f       	mov	r28, r24
				index = alloc_device(PRINTER_TYPE);
   14638:	84 e0       	ldi	r24, 0x04	; 4
   1463a:	90 e0       	ldi	r25, 0x00	; 0
   1463c:	0e 94 e2 99 	call	0x133c4	; 0x133c4 <alloc_device>
				if(index < 0)
   14640:	87 ff       	sbrs	r24, 7
   14642:	0b c0       	rjmp	.+22     	; 0x1465a <mount+0x5c>
				{
					printf("Could not allocate PRINTER structure\n");
   14644:	81 ef       	ldi	r24, 0xF1	; 241
   14646:	96 e1       	ldi	r25, 0x16	; 22
   14648:	a0 e0       	ldi	r26, 0x00	; 0
   1464a:	ed b7       	in	r30, 0x3d	; 61
   1464c:	fe b7       	in	r31, 0x3e	; 62
   1464e:	81 83       	std	Z+1, r24	; 0x01
   14650:	92 83       	std	Z+2, r25	; 0x02
   14652:	a3 83       	std	Z+3, r26	; 0x03
   14654:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
   14658:	9e c0       	rjmp	.+316    	; 0x14796 <mount+0x198>
					return(0);
				}
				PRINTERp = (PRINTERDeviceType *) Devices[index].dev;
   1465a:	9b e0       	ldi	r25, 0x0B	; 11
   1465c:	89 02       	muls	r24, r25
   1465e:	f0 01       	movw	r30, r0
   14660:	11 24       	eor	r1, r1
   14662:	ec 50       	subi	r30, 0x0C	; 12
   14664:	f1 4e       	sbci	r31, 0xE1	; 225
				PRINTERp->HEADER.ADDRESS  = address;
   14666:	a7 81       	ldd	r26, Z+7	; 0x07
   14668:	b0 85       	ldd	r27, Z+8	; 0x08
   1466a:	cc 93       	st	X, r28
				Devices[index].ADDRESS = address;
   1466c:	c1 83       	std	Z+1, r28	; 0x01
				Devices[index].PPR = 0xff;
   1466e:	9f ef       	ldi	r25, 0xFF	; 255
   14670:	92 83       	std	Z+2, r25	; 0x02
   14672:	80 c0       	rjmp	.+256    	; 0x14774 <mount+0x176>
				return( verify_device(index) );
			}
	}
	else if(argc == 4)
   14674:	04 97       	sbiw	r24, 0x04	; 4
   14676:	09 f0       	breq	.+2      	; 0x1467a <mount+0x7c>
   14678:	8d c0       	rjmp	.+282    	; 0x14794 <mount+0x196>
		/*
		argv[1] = 9121
		argv[2] = 2
		argv[3] = amigo2.lif
		*/
		if(!hpdir_find_drive(argv[1],0,0) )
   1467a:	40 e0       	ldi	r20, 0x00	; 0
   1467c:	50 e0       	ldi	r21, 0x00	; 0
   1467e:	60 e0       	ldi	r22, 0x00	; 0
   14680:	70 e0       	ldi	r23, 0x00	; 0
   14682:	8a 81       	ldd	r24, Y+2	; 0x02
   14684:	9b 81       	ldd	r25, Y+3	; 0x03
   14686:	ac d1       	rcall	.+856    	; 0x149e0 <hpdir_find_drive>
   14688:	89 2b       	or	r24, r25
   1468a:	59 f4       	brne	.+22     	; 0x146a2 <mount+0xa4>
		{
			printf("WARNING: model NOT found in hpdir.ini!\n");
   1468c:	89 ec       	ldi	r24, 0xC9	; 201
   1468e:	96 e1       	ldi	r25, 0x16	; 22
   14690:	a0 e0       	ldi	r26, 0x00	; 0
   14692:	ed b7       	in	r30, 0x3d	; 61
   14694:	fe b7       	in	r31, 0x3e	; 62
   14696:	81 83       	std	Z+1, r24	; 0x01
   14698:	92 83       	std	Z+2, r25	; 0x02
   1469a:	a3 83       	std	Z+3, r26	; 0x03
   1469c:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
   146a0:	37 c0       	rjmp	.+110    	; 0x14710 <mount+0x112>
			return(-1);
		}
		if(MATCHI(hpdir.TYPE, "SS80") || MATCHI(hpdir.TYPE,"CS80") )
   146a2:	6b e5       	ldi	r22, 0x5B	; 91
   146a4:	7e e0       	ldi	r23, 0x0E	; 14
   146a6:	88 ed       	ldi	r24, 0xD8	; 216
   146a8:	9f e1       	ldi	r25, 0x1F	; 31
   146aa:	0e 94 49 33 	call	0x6692	; 0x6692 <MATCHI>
   146ae:	89 2b       	or	r24, r25
   146b0:	a9 f0       	breq	.+42     	; 0x146dc <mount+0xde>
		{
			// FIXME - do we want to have separtate address and ppr ?
			int8_t address = atoi(argv[2]) & 0xff;
   146b2:	8c 81       	ldd	r24, Y+4	; 0x04
   146b4:	9d 81       	ldd	r25, Y+5	; 0x05
   146b6:	0e 94 95 48 	call	0x912a	; 0x912a <atoi>
   146ba:	e8 2e       	mov	r14, r24
			int8_t ppr = address;
			index = alloc_device(SS80_TYPE);
   146bc:	83 e0       	ldi	r24, 0x03	; 3
   146be:	90 e0       	ldi	r25, 0x00	; 0
   146c0:	0e 94 e2 99 	call	0x133c4	; 0x133c4 <alloc_device>
   146c4:	f8 2e       	mov	r15, r24
			if(index < 0)
   146c6:	87 ff       	sbrs	r24, 7
   146c8:	12 c0       	rjmp	.+36     	; 0x146ee <mount+0xf0>
			{
				printf("Could not allocate SS80 structure for %s\n",argv[2]);
   146ca:	8c 81       	ldd	r24, Y+4	; 0x04
   146cc:	9d 81       	ldd	r25, Y+5	; 0x05
   146ce:	ed b7       	in	r30, 0x3d	; 61
   146d0:	fe b7       	in	r31, 0x3e	; 62
   146d2:	95 83       	std	Z+5, r25	; 0x05
   146d4:	84 83       	std	Z+4, r24	; 0x04
   146d6:	8f e9       	ldi	r24, 0x9F	; 159
   146d8:	96 e1       	ldi	r25, 0x16	; 22
   146da:	38 c0       	rjmp	.+112    	; 0x1474c <mount+0x14e>
		if(!hpdir_find_drive(argv[1],0,0) )
		{
			printf("WARNING: model NOT found in hpdir.ini!\n");
			return(-1);
		}
		if(MATCHI(hpdir.TYPE, "SS80") || MATCHI(hpdir.TYPE,"CS80") )
   146dc:	60 e6       	ldi	r22, 0x60	; 96
   146de:	7e e0       	ldi	r23, 0x0E	; 14
   146e0:	88 ed       	ldi	r24, 0xD8	; 216
   146e2:	9f e1       	ldi	r25, 0x1F	; 31
   146e4:	0e 94 49 33 	call	0x6692	; 0x6692 <MATCHI>
   146e8:	89 2b       	or	r24, r25
   146ea:	19 f7       	brne	.-58     	; 0x146b2 <mount+0xb4>
   146ec:	13 c0       	rjmp	.+38     	; 0x14714 <mount+0x116>
			if(index < 0)
			{
				printf("Could not allocate SS80 structure for %s\n",argv[2]);
				return(0);
			}
			SS80p = (SS80DiskType *) Devices[index].dev;
   146ee:	ff 2d       	mov	r31, r15
   146f0:	8b e0       	ldi	r24, 0x0B	; 11
   146f2:	f8 02       	muls	r31, r24
   146f4:	80 01       	movw	r16, r0
   146f6:	11 24       	eor	r1, r1
   146f8:	0c 50       	subi	r16, 0x0C	; 12
   146fa:	11 4e       	sbci	r17, 0xE1	; 225
   146fc:	f8 01       	movw	r30, r16
   146fe:	c7 80       	ldd	r12, Z+7	; 0x07
   14700:	d0 84       	ldd	r13, Z+8	; 0x08
			if( !hpdir_set_parameters(index, argv[1] ) )
   14702:	6a 81       	ldd	r22, Y+2	; 0x02
   14704:	7b 81       	ldd	r23, Y+3	; 0x03
   14706:	8f 2d       	mov	r24, r15
   14708:	0e 94 6d 9b 	call	0x136da	; 0x136da <hpdir_set_parameters>
   1470c:	81 11       	cpse	r24, r1
   1470e:	25 c0       	rjmp	.+74     	; 0x1475a <mount+0x15c>
				return(-1);
   14710:	8f ef       	ldi	r24, 0xFF	; 255
   14712:	44 c0       	rjmp	.+136    	; 0x1479c <mount+0x19e>
			Devices[index].ADDRESS = address;
			Devices[index].PPR = ppr;
			return( verify_device(index) );
		}
#ifdef AMIGO
		else if(MATCH(hpdir.TYPE, "AMIGO"))
   14714:	65 e6       	ldi	r22, 0x65	; 101
   14716:	7e e0       	ldi	r23, 0x0E	; 14
   14718:	88 ed       	ldi	r24, 0xD8	; 216
   1471a:	9f e1       	ldi	r25, 0x1F	; 31
   1471c:	0e 94 35 33 	call	0x666a	; 0x666a <MATCH>
   14720:	89 2b       	or	r24, r25
   14722:	51 f1       	breq	.+84     	; 0x14778 <mount+0x17a>
		{
			// FIXME - do we want to have separtate address and ppr ?
			int8_t address = atoi(argv[2]) & 0xff;
   14724:	8c 81       	ldd	r24, Y+4	; 0x04
   14726:	9d 81       	ldd	r25, Y+5	; 0x05
   14728:	0e 94 95 48 	call	0x912a	; 0x912a <atoi>
   1472c:	e8 2e       	mov	r14, r24
			int8_t ppr = address;
			index = alloc_device(AMIGO_TYPE);
   1472e:	81 e0       	ldi	r24, 0x01	; 1
   14730:	90 e0       	ldi	r25, 0x00	; 0
   14732:	0e 94 e2 99 	call	0x133c4	; 0x133c4 <alloc_device>
   14736:	f8 2e       	mov	r15, r24
			if(index < 0)
   14738:	87 ff       	sbrs	r24, 7
   1473a:	d9 cf       	rjmp	.-78     	; 0x146ee <mount+0xf0>
			{
				printf("Could not allocate AMIGO structure for %s\n",argv[2]);
   1473c:	8c 81       	ldd	r24, Y+4	; 0x04
   1473e:	9d 81       	ldd	r25, Y+5	; 0x05
   14740:	ed b7       	in	r30, 0x3d	; 61
   14742:	fe b7       	in	r31, 0x3e	; 62
   14744:	95 83       	std	Z+5, r25	; 0x05
   14746:	84 83       	std	Z+4, r24	; 0x04
   14748:	84 e7       	ldi	r24, 0x74	; 116
   1474a:	96 e1       	ldi	r25, 0x16	; 22
   1474c:	a0 e0       	ldi	r26, 0x00	; 0
   1474e:	81 83       	std	Z+1, r24	; 0x01
   14750:	92 83       	std	Z+2, r25	; 0x02
   14752:	a3 83       	std	Z+3, r26	; 0x03
   14754:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
   14758:	1e c0       	rjmp	.+60     	; 0x14796 <mount+0x198>
				return(0);
			}
			AMIGOp = (AMIGODiskType *) Devices[index].dev;
			if( !hpdir_set_parameters(index, argv[1] ) )
				return(-1);
			AMIGOp->HEADER.NAME = stralloc(argv[3]);
   1475a:	8e 81       	ldd	r24, Y+6	; 0x06
   1475c:	9f 81       	ldd	r25, Y+7	; 0x07
   1475e:	0e 94 eb 32 	call	0x65d6	; 0x65d6 <stralloc>
   14762:	f6 01       	movw	r30, r12
   14764:	93 83       	std	Z+3, r25	; 0x03
   14766:	82 83       	std	Z+2, r24	; 0x02
			AMIGOp->HEADER.ADDRESS  = address;
   14768:	e0 82       	st	Z, r14
			AMIGOp->HEADER.PPR = ppr;
   1476a:	e1 82       	std	Z+1, r14	; 0x01
			Devices[index].ADDRESS = address;
   1476c:	f8 01       	movw	r30, r16
   1476e:	e1 82       	std	Z+1, r14	; 0x01
			Devices[index].PPR = ppr;
			return( verify_device(index) );
   14770:	e2 82       	std	Z+2, r14	; 0x02
   14772:	8f 2d       	mov	r24, r15
   14774:	4b da       	rcall	.-2922   	; 0x13c0c <verify_device>
   14776:	12 c0       	rjmp	.+36     	; 0x1479c <mount+0x19e>
		}
#endif
		else
		{
			printf("Expected AMIGO or SS80 or CS80 for [%s]\n",argv[1]);
   14778:	8a 81       	ldd	r24, Y+2	; 0x02
   1477a:	9b 81       	ldd	r25, Y+3	; 0x03
   1477c:	ed b7       	in	r30, 0x3d	; 61
   1477e:	fe b7       	in	r31, 0x3e	; 62
   14780:	95 83       	std	Z+5, r25	; 0x05
   14782:	84 83       	std	Z+4, r24	; 0x04
   14784:	8b e4       	ldi	r24, 0x4B	; 75
   14786:	96 e1       	ldi	r25, 0x16	; 22
   14788:	a0 e0       	ldi	r26, 0x00	; 0
   1478a:	81 83       	std	Z+1, r24	; 0x01
   1478c:	92 83       	std	Z+2, r25	; 0x02
   1478e:	a3 83       	std	Z+3, r26	; 0x03
   14790:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
			return(0);
		}
	}
	else 
	{
		mount_usage();
   14794:	52 d9       	rcall	.-3420   	; 0x13a3a <mount_usage>
		return(0);
   14796:	80 e0       	ldi	r24, 0x00	; 0
   14798:	01 c0       	rjmp	.+2      	; 0x1479c <mount+0x19e>
	}
	return(1);
   1479a:	81 e0       	ldi	r24, 0x01	; 1
}
   1479c:	cd b7       	in	r28, 0x3d	; 61
   1479e:	de b7       	in	r29, 0x3e	; 62
   147a0:	25 96       	adiw	r28, 0x05	; 5
   147a2:	e8 e0       	ldi	r30, 0x08	; 8
   147a4:	0c 94 ca e8 	jmp	0x1d194	; 0x1d194 <__epilogue_restores__+0x14>

000147a8 <drives_tests>:

/// @brief GPIB user tests
///  User invoked GPIB functions and tasks
/// @return  1 matched token, 0 if not
int drives_tests(int argc, char * argv[])
{
   147a8:	ef 92       	push	r14
   147aa:	ff 92       	push	r15
   147ac:	0f 93       	push	r16
   147ae:	1f 93       	push	r17
   147b0:	cf 93       	push	r28
   147b2:	df 93       	push	r29
    char *ptr;
    int ind;

    ind = 0;
    ptr = argv[ind++];
   147b4:	fb 01       	movw	r30, r22
   147b6:	00 81       	ld	r16, Z
   147b8:	11 81       	ldd	r17, Z+1	; 0x01

    if(!ptr)
   147ba:	01 15       	cp	r16, r1
   147bc:	11 05       	cpc	r17, r1
   147be:	19 f4       	brne	.+6      	; 0x147c6 <drives_tests+0x1e>
        return(0);
   147c0:	80 e0       	ldi	r24, 0x00	; 0
   147c2:	90 e0       	ldi	r25, 0x00	; 0
   147c4:	6d c0       	rjmp	.+218    	; 0x148a0 <drives_tests+0xf8>
   147c6:	eb 01       	movw	r28, r22
   147c8:	7c 01       	movw	r14, r24

    if (MATCHI(ptr,"drives") && MATCHI(argv[ind], "help"))
   147ca:	6b e6       	ldi	r22, 0x6B	; 107
   147cc:	7e e0       	ldi	r23, 0x0E	; 14
   147ce:	c8 01       	movw	r24, r16
   147d0:	0e 94 49 33 	call	0x6692	; 0x6692 <MATCHI>
   147d4:	89 2b       	or	r24, r25
   147d6:	59 f0       	breq	.+22     	; 0x147ee <drives_tests+0x46>
   147d8:	62 e6       	ldi	r22, 0x62	; 98
   147da:	76 e1       	ldi	r23, 0x16	; 22
   147dc:	8a 81       	ldd	r24, Y+2	; 0x02
   147de:	9b 81       	ldd	r25, Y+3	; 0x03
   147e0:	0e 94 49 33 	call	0x6692	; 0x6692 <MATCHI>
   147e4:	89 2b       	or	r24, r25
   147e6:	19 f0       	breq	.+6      	; 0x147ee <drives_tests+0x46>
	{
		drives_help(1);
   147e8:	81 e0       	ldi	r24, 0x01	; 1
   147ea:	12 d9       	rcall	.-3548   	; 0x13a10 <drives_help>
   147ec:	57 c0       	rjmp	.+174    	; 0x1489c <drives_tests+0xf4>
		return(1);
	}

    if (MATCHI(ptr,"mount") )
   147ee:	63 e7       	ldi	r22, 0x73	; 115
   147f0:	7e e0       	ldi	r23, 0x0E	; 14
   147f2:	c8 01       	movw	r24, r16
   147f4:	0e 94 49 33 	call	0x6692	; 0x6692 <MATCHI>
   147f8:	89 2b       	or	r24, r25
   147fa:	59 f0       	breq	.+22     	; 0x14812 <drives_tests+0x6a>
    {
		if(!mount(argc, argv))
   147fc:	be 01       	movw	r22, r28
   147fe:	c7 01       	movw	r24, r14
   14800:	fe de       	rcall	.-516    	; 0x145fe <mount>
   14802:	81 11       	cpse	r24, r1
   14804:	03 c0       	rjmp	.+6      	; 0x1480c <drives_tests+0x64>
			return(-1);
   14806:	8f ef       	ldi	r24, 0xFF	; 255
   14808:	9f ef       	ldi	r25, 0xFF	; 255
   1480a:	4a c0       	rjmp	.+148    	; 0x148a0 <drives_tests+0xf8>
#ifdef LCD_SUPPORT
    extern void update_drive_counts();
    update_drive_counts();
   1480c:	0e 94 06 e6 	call	0x1cc0c	; 0x1cc0c <update_drive_counts>
   14810:	45 c0       	rjmp	.+138    	; 0x1489c <drives_tests+0xf4>
#endif

		return(1);
    }
    if (MATCHI(ptr,"umount") )
   14812:	62 e7       	ldi	r22, 0x72	; 114
   14814:	7e e0       	ldi	r23, 0x0E	; 14
   14816:	c8 01       	movw	r24, r16
   14818:	0e 94 49 33 	call	0x6692	; 0x6692 <MATCHI>
   1481c:	89 2b       	or	r24, r25
   1481e:	21 f0       	breq	.+8      	; 0x14828 <drives_tests+0x80>
    {
		if(!umount(argc, argv))
   14820:	be 01       	movw	r22, r28
   14822:	c7 01       	movw	r24, r14
   14824:	32 d9       	rcall	.-3484   	; 0x13a8a <umount>
   14826:	ed cf       	rjmp	.-38     	; 0x14802 <drives_tests+0x5a>
    update_drive_counts();
#endif
		return(1);
	}

    if (MATCHI(ptr,"addresses") )
   14828:	69 e7       	ldi	r22, 0x79	; 121
   1482a:	7e e0       	ldi	r23, 0x0E	; 14
   1482c:	c8 01       	movw	r24, r16
   1482e:	0e 94 49 33 	call	0x6692	; 0x6692 <MATCHI>
   14832:	89 2b       	or	r24, r25
   14834:	b1 f0       	breq	.+44     	; 0x14862 <drives_tests+0xba>
    {
        ptr = argv[ind];
   14836:	8a 81       	ldd	r24, Y+2	; 0x02
   14838:	9b 81       	ldd	r25, Y+3	; 0x03
        if(ptr && *ptr && MATCH(ptr,"-v"))
   1483a:	00 97       	sbiw	r24, 0x00	; 0
   1483c:	69 f0       	breq	.+26     	; 0x14858 <drives_tests+0xb0>
   1483e:	fc 01       	movw	r30, r24
   14840:	20 81       	ld	r18, Z
   14842:	22 23       	and	r18, r18
   14844:	49 f0       	breq	.+18     	; 0x14858 <drives_tests+0xb0>
   14846:	63 e8       	ldi	r22, 0x83	; 131
   14848:	7e e0       	ldi	r23, 0x0E	; 14
   1484a:	0e 94 35 33 	call	0x666a	; 0x666a <MATCH>
   1484e:	89 2b       	or	r24, r25
   14850:	19 f0       	breq	.+6      	; 0x14858 <drives_tests+0xb0>
            display_Addresses(1);
   14852:	81 e0       	ldi	r24, 0x01	; 1
   14854:	90 e0       	ldi	r25, 0x00	; 0
   14856:	02 c0       	rjmp	.+4      	; 0x1485c <drives_tests+0xb4>
        else
            display_Addresses(0);
   14858:	80 e0       	ldi	r24, 0x00	; 0
   1485a:	90 e0       	ldi	r25, 0x00	; 0
   1485c:	0e 94 7f 94 	call	0x128fe	; 0x128fe <display_Addresses>
   14860:	1d c0       	rjmp	.+58     	; 0x1489c <drives_tests+0xf4>
        return(1);
    }

    if (MATCHI(ptr,"config") )
   14862:	66 e8       	ldi	r22, 0x86	; 134
   14864:	7e e0       	ldi	r23, 0x0E	; 14
   14866:	c8 01       	movw	r24, r16
   14868:	0e 94 49 33 	call	0x6692	; 0x6692 <MATCHI>
   1486c:	89 2b       	or	r24, r25
   1486e:	09 f4       	brne	.+2      	; 0x14872 <drives_tests+0xca>
   14870:	a7 cf       	rjmp	.-178    	; 0x147c0 <drives_tests+0x18>
    {
        ptr = argv[ind];
   14872:	8a 81       	ldd	r24, Y+2	; 0x02
   14874:	9b 81       	ldd	r25, Y+3	; 0x03
        if(ptr && *ptr && MATCH(ptr,"-v"))
   14876:	00 97       	sbiw	r24, 0x00	; 0
   14878:	69 f0       	breq	.+26     	; 0x14894 <drives_tests+0xec>
   1487a:	fc 01       	movw	r30, r24
   1487c:	20 81       	ld	r18, Z
   1487e:	22 23       	and	r18, r18
   14880:	49 f0       	breq	.+18     	; 0x14894 <drives_tests+0xec>
   14882:	63 e8       	ldi	r22, 0x83	; 131
   14884:	7e e0       	ldi	r23, 0x0E	; 14
   14886:	0e 94 35 33 	call	0x666a	; 0x666a <MATCH>
   1488a:	89 2b       	or	r24, r25
   1488c:	19 f0       	breq	.+6      	; 0x14894 <drives_tests+0xec>
            display_Config(1);
   1488e:	81 e0       	ldi	r24, 0x01	; 1
   14890:	90 e0       	ldi	r25, 0x00	; 0
   14892:	02 c0       	rjmp	.+4      	; 0x14898 <drives_tests+0xf0>
        else
            display_Config(0);
   14894:	80 e0       	ldi	r24, 0x00	; 0
   14896:	90 e0       	ldi	r25, 0x00	; 0
   14898:	0e 94 53 95 	call	0x12aa6	; 0x12aa6 <display_Config>
        return(1);
   1489c:	81 e0       	ldi	r24, 0x01	; 1
   1489e:	90 e0       	ldi	r25, 0x00	; 0
    }
	return(0);
}
   148a0:	cd b7       	in	r28, 0x3d	; 61
   148a2:	de b7       	in	r29, 0x3e	; 62
   148a4:	e6 e0       	ldi	r30, 0x06	; 6
   148a6:	0c 94 cc e8 	jmp	0x1d198	; 0x1d198 <__epilogue_restores__+0x18>

000148aa <hpdir_init>:
/// disk parameters from a single hpdir disk entry
///
///@return void
void hpdir_init()
{
    memset(hpdir.model,0,sizeof(hpdir.model) -1); // 1
   148aa:	8f e1       	ldi	r24, 0x1F	; 31
   148ac:	e8 e7       	ldi	r30, 0x78	; 120
   148ae:	ff e1       	ldi	r31, 0x1F	; 31
   148b0:	df 01       	movw	r26, r30
   148b2:	98 2f       	mov	r25, r24
   148b4:	1d 92       	st	X+, r1
   148b6:	9a 95       	dec	r25
   148b8:	e9 f7       	brne	.-6      	; 0x148b4 <hpdir_init+0xa>
// 2
    memset(hpdir.comment,0,sizeof(hpdir.comment) -1);
   148ba:	9f e3       	ldi	r25, 0x3F	; 63
   148bc:	e8 e9       	ldi	r30, 0x98	; 152
   148be:	ff e1       	ldi	r31, 0x1F	; 31
   148c0:	df 01       	movw	r26, r30
   148c2:	1d 92       	st	X+, r1
   148c4:	9a 95       	dec	r25
   148c6:	e9 f7       	brne	.-6      	; 0x148c2 <hpdir_init+0x18>
    memset(hpdir.TYPE,0,sizeof(hpdir.TYPE) -1);   // 3
   148c8:	e8 ed       	ldi	r30, 0xD8	; 216
   148ca:	ff e1       	ldi	r31, 0x1F	; 31
   148cc:	df 01       	movw	r26, r30
   148ce:	1d 92       	st	X+, r1
   148d0:	8a 95       	dec	r24
   148d2:	e9 f7       	brne	.-6      	; 0x148ce <hpdir_init+0x24>
    hpdir.ID = 0;                                 // 4
   148d4:	10 92 f8 1f 	sts	0x1FF8, r1	; 0x801ff8 <hpdir+0x80>
   148d8:	10 92 f9 1f 	sts	0x1FF9, r1	; 0x801ff9 <hpdir+0x81>
   148dc:	10 92 fa 1f 	sts	0x1FFA, r1	; 0x801ffa <hpdir+0x82>
   148e0:	10 92 fb 1f 	sts	0x1FFB, r1	; 0x801ffb <hpdir+0x83>
    hpdir.mask_stat2 = 0;                         // 5
   148e4:	10 92 fc 1f 	sts	0x1FFC, r1	; 0x801ffc <hpdir+0x84>
   148e8:	10 92 fd 1f 	sts	0x1FFD, r1	; 0x801ffd <hpdir+0x85>
   148ec:	10 92 fe 1f 	sts	0x1FFE, r1	; 0x801ffe <hpdir+0x86>
   148f0:	10 92 ff 1f 	sts	0x1FFF, r1	; 0x801fff <hpdir+0x87>
    hpdir.id_stat2 = 0;                           // 6
   148f4:	10 92 00 20 	sts	0x2000, r1	; 0x802000 <hpdir+0x88>
   148f8:	10 92 01 20 	sts	0x2001, r1	; 0x802001 <hpdir+0x89>
   148fc:	10 92 02 20 	sts	0x2002, r1	; 0x802002 <hpdir+0x8a>
   14900:	10 92 03 20 	sts	0x2003, r1	; 0x802003 <hpdir+0x8b>
    hpdir.DEVICE_NUMBER = 0;                      // 7
   14904:	10 92 04 20 	sts	0x2004, r1	; 0x802004 <hpdir+0x8c>
   14908:	10 92 05 20 	sts	0x2005, r1	; 0x802005 <hpdir+0x8d>
   1490c:	10 92 06 20 	sts	0x2006, r1	; 0x802006 <hpdir+0x8e>
   14910:	10 92 07 20 	sts	0x2007, r1	; 0x802007 <hpdir+0x8f>
    hpdir.UNITS_INSTALLED = 0x8001;               // 8
   14914:	81 e0       	ldi	r24, 0x01	; 1
   14916:	90 e8       	ldi	r25, 0x80	; 128
   14918:	a0 e0       	ldi	r26, 0x00	; 0
   1491a:	b0 e0       	ldi	r27, 0x00	; 0
   1491c:	80 93 08 20 	sts	0x2008, r24	; 0x802008 <hpdir+0x90>
   14920:	90 93 09 20 	sts	0x2009, r25	; 0x802009 <hpdir+0x91>
   14924:	a0 93 0a 20 	sts	0x200A, r26	; 0x80200a <hpdir+0x92>
   14928:	b0 93 0b 20 	sts	0x200B, r27	; 0x80200b <hpdir+0x93>
    hpdir.CYLINDERS = 0;                          // 9
   1492c:	10 92 0c 20 	sts	0x200C, r1	; 0x80200c <hpdir+0x94>
   14930:	10 92 0d 20 	sts	0x200D, r1	; 0x80200d <hpdir+0x95>
   14934:	10 92 0e 20 	sts	0x200E, r1	; 0x80200e <hpdir+0x96>
   14938:	10 92 0f 20 	sts	0x200F, r1	; 0x80200f <hpdir+0x97>
    hpdir.HEADS= 0;                               // 10
   1493c:	10 92 10 20 	sts	0x2010, r1	; 0x802010 <hpdir+0x98>
   14940:	10 92 11 20 	sts	0x2011, r1	; 0x802011 <hpdir+0x99>
   14944:	10 92 12 20 	sts	0x2012, r1	; 0x802012 <hpdir+0x9a>
   14948:	10 92 13 20 	sts	0x2013, r1	; 0x802013 <hpdir+0x9b>
    hpdir.SECTORS= 0;                             // 11
   1494c:	10 92 14 20 	sts	0x2014, r1	; 0x802014 <hpdir+0x9c>
   14950:	10 92 15 20 	sts	0x2015, r1	; 0x802015 <hpdir+0x9d>
   14954:	10 92 16 20 	sts	0x2016, r1	; 0x802016 <hpdir+0x9e>
   14958:	10 92 17 20 	sts	0x2017, r1	; 0x802017 <hpdir+0x9f>
    hpdir.BYTES_PER_SECTOR = 0;                   // 12
   1495c:	10 92 18 20 	sts	0x2018, r1	; 0x802018 <hpdir+0xa0>
   14960:	10 92 19 20 	sts	0x2019, r1	; 0x802019 <hpdir+0xa1>
   14964:	10 92 1a 20 	sts	0x201A, r1	; 0x80201a <hpdir+0xa2>
   14968:	10 92 1b 20 	sts	0x201B, r1	; 0x80201b <hpdir+0xa3>
    hpdir.INTERLEAVE = 0;                         // 13
   1496c:	10 92 1c 20 	sts	0x201C, r1	; 0x80201c <hpdir+0xa4>
   14970:	10 92 1d 20 	sts	0x201D, r1	; 0x80201d <hpdir+0xa5>
   14974:	10 92 1e 20 	sts	0x201E, r1	; 0x80201e <hpdir+0xa6>
   14978:	10 92 1f 20 	sts	0x201F, r1	; 0x80201f <hpdir+0xa7>
    hpdir.FIXED = 1;                              // 14 ALWAYS 1
   1497c:	81 e0       	ldi	r24, 0x01	; 1
   1497e:	90 e0       	ldi	r25, 0x00	; 0
   14980:	a0 e0       	ldi	r26, 0x00	; 0
   14982:	b0 e0       	ldi	r27, 0x00	; 0
   14984:	80 93 20 20 	sts	0x2020, r24	; 0x802020 <hpdir+0xa8>
   14988:	90 93 21 20 	sts	0x2021, r25	; 0x802021 <hpdir+0xa9>
   1498c:	a0 93 22 20 	sts	0x2022, r26	; 0x802022 <hpdir+0xaa>
   14990:	b0 93 23 20 	sts	0x2023, r27	; 0x802023 <hpdir+0xab>

// Computed values
    hpdir.BLOCKS = 0;
   14994:	10 92 24 20 	sts	0x2024, r1	; 0x802024 <hpdir+0xac>
   14998:	10 92 25 20 	sts	0x2025, r1	; 0x802025 <hpdir+0xad>
   1499c:	10 92 26 20 	sts	0x2026, r1	; 0x802026 <hpdir+0xae>
   149a0:	10 92 27 20 	sts	0x2027, r1	; 0x802027 <hpdir+0xaf>
   149a4:	08 95       	ret

000149a6 <lif_dir_count>:
///@param[in] blocks: size of LIF image in total
///
///@return Size of LIF directory in blocks
long lif_dir_count(long blocks)
{
    int scale = 0;
   149a6:	20 e0       	ldi	r18, 0x00	; 0
   149a8:	30 e0       	ldi	r19, 0x00	; 0
    long num = 1;
    while(blocks)
   149aa:	61 15       	cp	r22, r1
   149ac:	71 05       	cpc	r23, r1
   149ae:	81 05       	cpc	r24, r1
   149b0:	91 05       	cpc	r25, r1
   149b2:	39 f0       	breq	.+14     	; 0x149c2 <lif_dir_count+0x1c>
    {
        scale++;
   149b4:	2f 5f       	subi	r18, 0xFF	; 255
   149b6:	3f 4f       	sbci	r19, 0xFF	; 255
        blocks >>= 1;
   149b8:	95 95       	asr	r25
   149ba:	87 95       	ror	r24
   149bc:	77 95       	ror	r23
   149be:	67 95       	ror	r22
   149c0:	f4 cf       	rjmp	.-24     	; 0x149aa <lif_dir_count+0x4>
    }
    scale>>=1;
   149c2:	35 95       	asr	r19
   149c4:	27 95       	ror	r18
///
///@return Size of LIF directory in blocks
long lif_dir_count(long blocks)
{
    int scale = 0;
    long num = 1;
   149c6:	61 e0       	ldi	r22, 0x01	; 1
   149c8:	70 e0       	ldi	r23, 0x00	; 0
   149ca:	80 e0       	ldi	r24, 0x00	; 0
   149cc:	90 e0       	ldi	r25, 0x00	; 0
    {
        scale++;
        blocks >>= 1;
    }
    scale>>=1;
    while(scale--)
   149ce:	21 50       	subi	r18, 0x01	; 1
   149d0:	31 09       	sbc	r19, r1
   149d2:	28 f0       	brcs	.+10     	; 0x149de <lif_dir_count+0x38>
        num <<=1;
   149d4:	66 0f       	add	r22, r22
   149d6:	77 1f       	adc	r23, r23
   149d8:	88 1f       	adc	r24, r24
   149da:	99 1f       	adc	r25, r25
   149dc:	f8 cf       	rjmp	.-16     	; 0x149ce <lif_dir_count+0x28>
    return(num);
}
   149de:	08 95       	ret

000149e0 <hpdir_find_drive>:
///
///@param[in] model: model string
///
///@return 1 on sucess or 0 on fail
int hpdir_find_drive(char *model, int list, int verbose)
{
   149e0:	2f 92       	push	r2
   149e2:	3f 92       	push	r3
   149e4:	4f 92       	push	r4
   149e6:	5f 92       	push	r5
   149e8:	6f 92       	push	r6
   149ea:	8f 92       	push	r8
   149ec:	9f 92       	push	r9
   149ee:	af 92       	push	r10
   149f0:	bf 92       	push	r11
   149f2:	cf 92       	push	r12
   149f4:	df 92       	push	r13
   149f6:	ef 92       	push	r14
   149f8:	ff 92       	push	r15
   149fa:	0f 93       	push	r16
   149fc:	1f 93       	push	r17
   149fe:	cf 93       	push	r28
   14a00:	df 93       	push	r29
   14a02:	cd b7       	in	r28, 0x3d	; 61
   14a04:	de b7       	in	r29, 0x3e	; 62
   14a06:	c9 58       	subi	r28, 0x89	; 137
   14a08:	d1 40       	sbci	r29, 0x01	; 1
   14a0a:	0f b6       	in	r0, 0x3f	; 63
   14a0c:	f8 94       	cli
   14a0e:	de bf       	out	0x3e, r29	; 62
   14a10:	0f be       	out	0x3f, r0	; 63
   14a12:	cd bf       	out	0x3d, r28	; 61
   14a14:	6c 01       	movw	r12, r24
   14a16:	c8 57       	subi	r28, 0x78	; 120
   14a18:	de 4f       	sbci	r29, 0xFE	; 254
   14a1a:	79 83       	std	Y+1, r23	; 0x01
   14a1c:	68 83       	st	Y, r22
   14a1e:	c8 58       	subi	r28, 0x88	; 136
   14a20:	d1 40       	sbci	r29, 0x01	; 1
   14a22:	5a 01       	movw	r10, r20
    FILE *cfg;
    char *ptr;
    char str[256];
    char token[128];

    hpdir_init();
   14a24:	42 df       	rcall	.-380    	; 0x148aa <hpdir_init>

    cfg = fopen("hpdir.ini","rb");
   14a26:	6c ee       	ldi	r22, 0xEC	; 236
   14a28:	78 e0       	ldi	r23, 0x08	; 8
   14a2a:	8c e4       	ldi	r24, 0x4C	; 76
   14a2c:	90 e1       	ldi	r25, 0x10	; 16
   14a2e:	0e 94 54 7f 	call	0xfea8	; 0xfea8 <fopen>
   14a32:	7c 01       	movw	r14, r24

#ifndef LIF_STAND_ALONE
    if(cfg == NULL)
   14a34:	89 2b       	or	r24, r25
   14a36:	49 f4       	brne	.+18     	; 0x14a4a <hpdir_find_drive+0x6a>
        cfg = fopen("/hpdir.ini","rb");
   14a38:	6c ee       	ldi	r22, 0xEC	; 236
   14a3a:	78 e0       	ldi	r23, 0x08	; 8
   14a3c:	8b e4       	ldi	r24, 0x4B	; 75
   14a3e:	90 e1       	ldi	r25, 0x10	; 16
   14a40:	0e 94 54 7f 	call	0xfea8	; 0xfea8 <fopen>
   14a44:	7c 01       	movw	r14, r24
        strcat  (name, "/hpdir.ini");
        cfg = fopen(name, "rb");
    }
#endif

    if(cfg == NULL)
   14a46:	89 2b       	or	r24, r25
   14a48:	51 f0       	breq	.+20     	; 0x14a5e <hpdir_find_drive+0x7e>
// MODEL something else
        ptr = get_token(ptr, token,     sizeof(token)-2);

        if(MATCHI(token,"[driveinfo]"))
        {
            driveinfo = 1;
   14a4a:	21 2c       	mov	r2, r1
   14a4c:	31 2c       	mov	r3, r1

        if(*ptr == '[' && driveinfo == 1 )
            break;

// MODEL something else
        ptr = get_token(ptr, token,     sizeof(token)-2);
   14a4e:	8e 01       	movw	r16, r28
   14a50:	08 5f       	subi	r16, 0xF8	; 248
   14a52:	1e 4f       	sbci	r17, 0xFE	; 254
        if( driveinfo != 1)
            continue;

        if(list)
        {
            printf("%s %s\n", token, ptr);
   14a54:	85 eb       	ldi	r24, 0xB5	; 181
   14a56:	90 e2       	ldi	r25, 0x20	; 32
   14a58:	2c 01       	movw	r4, r24
   14a5a:	61 2c       	mov	r6, r1
   14a5c:	1e c0       	rjmp	.+60     	; 0x14a9a <hpdir_find_drive+0xba>
    }
#endif

    if(cfg == NULL)
    {
        if(verbose)
   14a5e:	ab 28       	or	r10, r11
   14a60:	09 f4       	brne	.+2      	; 0x14a64 <hpdir_find_drive+0x84>
   14a62:	79 c1       	rjmp	.+754    	; 0x14d56 <hpdir_find_drive+0x376>
            printf("Error: hpdir.ini not found!\n");
   14a64:	8c eb       	ldi	r24, 0xBC	; 188
   14a66:	90 e2       	ldi	r25, 0x20	; 32
   14a68:	a0 e0       	ldi	r26, 0x00	; 0
   14a6a:	ed b7       	in	r30, 0x3d	; 61
   14a6c:	fe b7       	in	r31, 0x3e	; 62
   14a6e:	81 83       	std	Z+1, r24	; 0x01
   14a70:	92 83       	std	Z+2, r25	; 0x02
   14a72:	a3 83       	std	Z+3, r26	; 0x03
   14a74:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
   14a78:	6e c1       	rjmp	.+732    	; 0x14d56 <hpdir_find_drive+0x376>
    while( (ptr = fgets(str, sizeof(str)-2, cfg)) != NULL)
    {
        errors = 0;
        ptr = str;

        trim_tail(ptr);
   14a7a:	ce 01       	movw	r24, r28
   14a7c:	08 96       	adiw	r24, 0x08	; 8
   14a7e:	0e 94 1b 33 	call	0x6636	; 0x6636 <trim_tail>
        ptr = skipspaces(ptr);
   14a82:	ce 01       	movw	r24, r28
   14a84:	08 96       	adiw	r24, 0x08	; 8
   14a86:	0e 94 2b 33 	call	0x6656	; 0x6656 <skipspaces>

        len = strlen(ptr);
   14a8a:	fc 01       	movw	r30, r24
   14a8c:	01 90       	ld	r0, Z+
   14a8e:	00 20       	and	r0, r0
   14a90:	e9 f7       	brne	.-6      	; 0x14a8c <hpdir_find_drive+0xac>
   14a92:	31 97       	sbiw	r30, 0x01	; 1
        if(!len)
   14a94:	8e 17       	cp	r24, r30
   14a96:	9f 07       	cpc	r25, r31
   14a98:	51 f4       	brne	.+20     	; 0x14aae <hpdir_find_drive+0xce>
        return(0);
    }

// printf("Searching /hpdir.ini for model:%s\n", model);

    while( (ptr = fgets(str, sizeof(str)-2, cfg)) != NULL)
   14a9a:	a7 01       	movw	r20, r14
   14a9c:	6e ef       	ldi	r22, 0xFE	; 254
   14a9e:	70 e0       	ldi	r23, 0x00	; 0
   14aa0:	ce 01       	movw	r24, r28
   14aa2:	08 96       	adiw	r24, 0x08	; 8
   14aa4:	0e 94 6c 77 	call	0xeed8	; 0xeed8 <fgets>
   14aa8:	89 2b       	or	r24, r25
   14aaa:	39 f7       	brne	.-50     	; 0x14a7a <hpdir_find_drive+0x9a>
   14aac:	0c c0       	rjmp	.+24     	; 0x14ac6 <hpdir_find_drive+0xe6>
        len = strlen(ptr);
        if(!len)
            continue;

// Skip comments
        if(*ptr == ';' || *ptr == '#' )
   14aae:	fc 01       	movw	r30, r24
   14ab0:	20 81       	ld	r18, Z
   14ab2:	2b 33       	cpi	r18, 0x3B	; 59
   14ab4:	91 f3       	breq	.-28     	; 0x14a9a <hpdir_find_drive+0xba>
   14ab6:	23 32       	cpi	r18, 0x23	; 35
   14ab8:	81 f3       	breq	.-32     	; 0x14a9a <hpdir_find_drive+0xba>
            continue;

        if(*ptr == '[' && driveinfo == 1 )
   14aba:	2b 35       	cpi	r18, 0x5B	; 91
   14abc:	39 f4       	brne	.+14     	; 0x14acc <hpdir_find_drive+0xec>
   14abe:	f1 e0       	ldi	r31, 0x01	; 1
   14ac0:	2f 16       	cp	r2, r31
   14ac2:	31 04       	cpc	r3, r1
   14ac4:	19 f4       	brne	.+6      	; 0x14acc <hpdir_find_drive+0xec>
int hpdir_find_drive(char *model, int list, int verbose)
{
    int len;
    int errors = 0;
    int driveinfo=0;
    int found = 0;
   14ac6:	00 e0       	ldi	r16, 0x00	; 0
   14ac8:	10 e0       	ldi	r17, 0x00	; 0
   14aca:	32 c1       	rjmp	.+612    	; 0x14d30 <hpdir_find_drive+0x350>

        if(*ptr == '[' && driveinfo == 1 )
            break;

// MODEL something else
        ptr = get_token(ptr, token,     sizeof(token)-2);
   14acc:	4e e7       	ldi	r20, 0x7E	; 126
   14ace:	50 e0       	ldi	r21, 0x00	; 0
   14ad0:	b8 01       	movw	r22, r16
   14ad2:	0e 94 fd 33 	call	0x67fa	; 0x67fa <get_token>
   14ad6:	4c 01       	movw	r8, r24

        if(MATCHI(token,"[driveinfo]"))
   14ad8:	66 e5       	ldi	r22, 0x56	; 86
   14ada:	70 e1       	ldi	r23, 0x10	; 16
   14adc:	c8 01       	movw	r24, r16
   14ade:	0e 94 49 33 	call	0x6692	; 0x6692 <MATCHI>
   14ae2:	89 2b       	or	r24, r25
   14ae4:	21 f0       	breq	.+8      	; 0x14aee <hpdir_find_drive+0x10e>
        {
            driveinfo = 1;
   14ae6:	22 24       	eor	r2, r2
   14ae8:	23 94       	inc	r2
   14aea:	31 2c       	mov	r3, r1
   14aec:	d6 cf       	rjmp	.-84     	; 0x14a9a <hpdir_find_drive+0xba>
            continue;
        }

        if( driveinfo != 1)
   14aee:	21 e0       	ldi	r18, 0x01	; 1
   14af0:	22 16       	cp	r2, r18
   14af2:	31 04       	cpc	r3, r1
   14af4:	91 f6       	brne	.-92     	; 0x14a9a <hpdir_find_drive+0xba>
            continue;

        if(list)
   14af6:	c8 57       	subi	r28, 0x78	; 120
   14af8:	de 4f       	sbci	r29, 0xFE	; 254
   14afa:	88 81       	ld	r24, Y
   14afc:	99 81       	ldd	r25, Y+1	; 0x01
   14afe:	c8 58       	subi	r28, 0x88	; 136
   14b00:	d1 40       	sbci	r29, 0x01	; 1
   14b02:	89 2b       	or	r24, r25
   14b04:	61 f0       	breq	.+24     	; 0x14b1e <hpdir_find_drive+0x13e>
        {
            printf("%s %s\n", token, ptr);
   14b06:	ed b7       	in	r30, 0x3d	; 61
   14b08:	fe b7       	in	r31, 0x3e	; 62
   14b0a:	97 82       	std	Z+7, r9	; 0x07
   14b0c:	86 82       	std	Z+6, r8	; 0x06
   14b0e:	15 83       	std	Z+5, r17	; 0x05
   14b10:	04 83       	std	Z+4, r16	; 0x04
   14b12:	41 82       	std	Z+1, r4	; 0x01
   14b14:	52 82       	std	Z+2, r5	; 0x02
   14b16:	63 82       	std	Z+3, r6	; 0x03
   14b18:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
            continue;
   14b1c:	be cf       	rjmp	.-132    	; 0x14a9a <hpdir_find_drive+0xba>
        }

        if ( ! MATCHI(model,token) )
   14b1e:	b8 01       	movw	r22, r16
   14b20:	c6 01       	movw	r24, r12
   14b22:	0e 94 49 33 	call	0x6692	; 0x6692 <MATCHI>
   14b26:	89 2b       	or	r24, r25
            continue;

        hpdir_init();
   14b28:	f1 f2       	breq	.-68     	; 0x14ae6 <hpdir_find_drive+0x106>
   14b2a:	bf de       	rcall	.-642    	; 0x148aa <hpdir_init>

        if(verbose)
   14b2c:	a1 14       	cp	r10, r1
   14b2e:	b1 04       	cpc	r11, r1
   14b30:	61 f0       	breq	.+24     	; 0x14b4a <hpdir_find_drive+0x16a>
            printf("Model: %s found in hpdir.ini\n", model);
   14b32:	ed b7       	in	r30, 0x3d	; 61
   14b34:	fe b7       	in	r31, 0x3e	; 62
   14b36:	d5 82       	std	Z+5, r13	; 0x05
   14b38:	c4 82       	std	Z+4, r12	; 0x04
   14b3a:	87 e9       	ldi	r24, 0x97	; 151
   14b3c:	90 e2       	ldi	r25, 0x20	; 32
   14b3e:	a0 e0       	ldi	r26, 0x00	; 0
   14b40:	81 83       	std	Z+1, r24	; 0x01
   14b42:	92 83       	std	Z+2, r25	; 0x02
   14b44:	a3 83       	std	Z+3, r26	; 0x03
   14b46:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>

// 1 Model
        strncpy(hpdir.model,token,sizeof(hpdir.model)-2);
   14b4a:	4e e1       	ldi	r20, 0x1E	; 30
   14b4c:	50 e0       	ldi	r21, 0x00	; 0
   14b4e:	b8 01       	movw	r22, r16
   14b50:	88 e7       	ldi	r24, 0x78	; 120
   14b52:	9f e1       	ldi	r25, 0x1F	; 31
   14b54:	0e 94 48 32 	call	0x6490	; 0x6490 <strncpy>

// =
        ptr = get_token(ptr, token,     sizeof(token)-2);
   14b58:	4e e7       	ldi	r20, 0x7E	; 126
   14b5a:	50 e0       	ldi	r21, 0x00	; 0
   14b5c:	b8 01       	movw	r22, r16
   14b5e:	c4 01       	movw	r24, r8
   14b60:	0e 94 fd 33 	call	0x67fa	; 0x67fa <get_token>

// 2 Comment
        ptr = get_token(ptr, hpdir.comment, sizeof(hpdir.comment)-2);
   14b64:	4e e3       	ldi	r20, 0x3E	; 62
   14b66:	50 e0       	ldi	r21, 0x00	; 0
   14b68:	68 e9       	ldi	r22, 0x98	; 152
   14b6a:	7f e1       	ldi	r23, 0x1F	; 31
   14b6c:	0e 94 fd 33 	call	0x67fa	; 0x67fa <get_token>

// 3 AMIGO/SS80/CS80
        ptr = get_token(ptr, hpdir.TYPE,  sizeof(hpdir.TYPE)-2);
   14b70:	4e e1       	ldi	r20, 0x1E	; 30
   14b72:	50 e0       	ldi	r21, 0x00	; 0
   14b74:	68 ed       	ldi	r22, 0xD8	; 216
   14b76:	7f e1       	ldi	r23, 0x1F	; 31
   14b78:	0e 94 fd 33 	call	0x67fa	; 0x67fa <get_token>

// 4 Identify ID
        ptr = get_token(ptr, token,         sizeof(token)-2);
   14b7c:	4e e7       	ldi	r20, 0x7E	; 126
   14b7e:	50 e0       	ldi	r21, 0x00	; 0
   14b80:	b8 01       	movw	r22, r16
   14b82:	0e 94 fd 33 	call	0x67fa	; 0x67fa <get_token>
   14b86:	4c 01       	movw	r8, r24
        hpdir.ID = get_value(token);
   14b88:	c8 01       	movw	r24, r16
   14b8a:	0e 94 40 34 	call	0x6880	; 0x6880 <get_value>
   14b8e:	60 93 f8 1f 	sts	0x1FF8, r22	; 0x801ff8 <hpdir+0x80>
   14b92:	70 93 f9 1f 	sts	0x1FF9, r23	; 0x801ff9 <hpdir+0x81>
   14b96:	80 93 fa 1f 	sts	0x1FFA, r24	; 0x801ffa <hpdir+0x82>
   14b9a:	90 93 fb 1f 	sts	0x1FFB, r25	; 0x801ffb <hpdir+0x83>

// 5 MASK STAT 2
        ptr = get_token(ptr, token,         sizeof(token)-2);
   14b9e:	4e e7       	ldi	r20, 0x7E	; 126
   14ba0:	50 e0       	ldi	r21, 0x00	; 0
   14ba2:	b8 01       	movw	r22, r16
   14ba4:	c4 01       	movw	r24, r8
   14ba6:	0e 94 fd 33 	call	0x67fa	; 0x67fa <get_token>
   14baa:	4c 01       	movw	r8, r24
        hpdir.mask_stat2 = get_value(token);
   14bac:	c8 01       	movw	r24, r16
   14bae:	0e 94 40 34 	call	0x6880	; 0x6880 <get_value>
   14bb2:	60 93 fc 1f 	sts	0x1FFC, r22	; 0x801ffc <hpdir+0x84>
   14bb6:	70 93 fd 1f 	sts	0x1FFD, r23	; 0x801ffd <hpdir+0x85>
   14bba:	80 93 fe 1f 	sts	0x1FFE, r24	; 0x801ffe <hpdir+0x86>
   14bbe:	90 93 ff 1f 	sts	0x1FFF, r25	; 0x801fff <hpdir+0x87>

// 6 STAT2
        ptr = get_token(ptr, token,         sizeof(token)-2);
   14bc2:	4e e7       	ldi	r20, 0x7E	; 126
   14bc4:	50 e0       	ldi	r21, 0x00	; 0
   14bc6:	b8 01       	movw	r22, r16
   14bc8:	c4 01       	movw	r24, r8
   14bca:	0e 94 fd 33 	call	0x67fa	; 0x67fa <get_token>
   14bce:	4c 01       	movw	r8, r24
        hpdir.id_stat2 = get_value(token);
   14bd0:	c8 01       	movw	r24, r16
   14bd2:	0e 94 40 34 	call	0x6880	; 0x6880 <get_value>
   14bd6:	60 93 00 20 	sts	0x2000, r22	; 0x802000 <hpdir+0x88>
   14bda:	70 93 01 20 	sts	0x2001, r23	; 0x802001 <hpdir+0x89>
   14bde:	80 93 02 20 	sts	0x2002, r24	; 0x802002 <hpdir+0x8a>
   14be2:	90 93 03 20 	sts	0x2003, r25	; 0x802003 <hpdir+0x8b>

// 7 BCD include model number
        ptr = get_token(ptr, token,         sizeof(token)-2);
   14be6:	4e e7       	ldi	r20, 0x7E	; 126
   14be8:	50 e0       	ldi	r21, 0x00	; 0
   14bea:	b8 01       	movw	r22, r16
   14bec:	c4 01       	movw	r24, r8
   14bee:	0e 94 fd 33 	call	0x67fa	; 0x67fa <get_token>
   14bf2:	4c 01       	movw	r8, r24
        hpdir.DEVICE_NUMBER = get_value(token);
   14bf4:	c8 01       	movw	r24, r16
   14bf6:	0e 94 40 34 	call	0x6880	; 0x6880 <get_value>
   14bfa:	60 93 04 20 	sts	0x2004, r22	; 0x802004 <hpdir+0x8c>
   14bfe:	70 93 05 20 	sts	0x2005, r23	; 0x802005 <hpdir+0x8d>
   14c02:	80 93 06 20 	sts	0x2006, r24	; 0x802006 <hpdir+0x8e>
   14c06:	90 93 07 20 	sts	0x2007, r25	; 0x802007 <hpdir+0x8f>

// 8 Units installed
        ptr = get_token(ptr, token,         sizeof(token)-2);
   14c0a:	4e e7       	ldi	r20, 0x7E	; 126
   14c0c:	50 e0       	ldi	r21, 0x00	; 0
   14c0e:	b8 01       	movw	r22, r16
   14c10:	c4 01       	movw	r24, r8
   14c12:	0e 94 fd 33 	call	0x67fa	; 0x67fa <get_token>
   14c16:	4c 01       	movw	r8, r24
        hpdir.UNITS_INSTALLED = get_value(token);
   14c18:	c8 01       	movw	r24, r16
   14c1a:	0e 94 40 34 	call	0x6880	; 0x6880 <get_value>
   14c1e:	60 93 08 20 	sts	0x2008, r22	; 0x802008 <hpdir+0x90>
   14c22:	70 93 09 20 	sts	0x2009, r23	; 0x802009 <hpdir+0x91>
   14c26:	80 93 0a 20 	sts	0x200A, r24	; 0x80200a <hpdir+0x92>
   14c2a:	90 93 0b 20 	sts	0x200B, r25	; 0x80200b <hpdir+0x93>

// 9 Cylinders
        ptr = get_token(ptr, token,         sizeof(token)-2);
   14c2e:	4e e7       	ldi	r20, 0x7E	; 126
   14c30:	50 e0       	ldi	r21, 0x00	; 0
   14c32:	b8 01       	movw	r22, r16
   14c34:	c4 01       	movw	r24, r8
   14c36:	0e 94 fd 33 	call	0x67fa	; 0x67fa <get_token>
   14c3a:	4c 01       	movw	r8, r24
        hpdir.CYLINDERS = get_value(token);
   14c3c:	c8 01       	movw	r24, r16
   14c3e:	0e 94 40 34 	call	0x6880	; 0x6880 <get_value>
   14c42:	60 93 0c 20 	sts	0x200C, r22	; 0x80200c <hpdir+0x94>
   14c46:	70 93 0d 20 	sts	0x200D, r23	; 0x80200d <hpdir+0x95>
   14c4a:	80 93 0e 20 	sts	0x200E, r24	; 0x80200e <hpdir+0x96>
   14c4e:	90 93 0f 20 	sts	0x200F, r25	; 0x80200f <hpdir+0x97>

// 10 Heads
        ptr = get_token(ptr, token,         sizeof(token)-2);
   14c52:	4e e7       	ldi	r20, 0x7E	; 126
   14c54:	50 e0       	ldi	r21, 0x00	; 0
   14c56:	b8 01       	movw	r22, r16
   14c58:	c4 01       	movw	r24, r8
   14c5a:	0e 94 fd 33 	call	0x67fa	; 0x67fa <get_token>
   14c5e:	4c 01       	movw	r8, r24
        hpdir.HEADS = get_value(token);
   14c60:	c8 01       	movw	r24, r16
   14c62:	0e 94 40 34 	call	0x6880	; 0x6880 <get_value>
   14c66:	60 93 10 20 	sts	0x2010, r22	; 0x802010 <hpdir+0x98>
   14c6a:	70 93 11 20 	sts	0x2011, r23	; 0x802011 <hpdir+0x99>
   14c6e:	80 93 12 20 	sts	0x2012, r24	; 0x802012 <hpdir+0x9a>
   14c72:	90 93 13 20 	sts	0x2013, r25	; 0x802013 <hpdir+0x9b>

// 11 Sectors
        ptr = get_token(ptr, token,         sizeof(token)-2);
   14c76:	4e e7       	ldi	r20, 0x7E	; 126
   14c78:	50 e0       	ldi	r21, 0x00	; 0
   14c7a:	b8 01       	movw	r22, r16
   14c7c:	c4 01       	movw	r24, r8
   14c7e:	0e 94 fd 33 	call	0x67fa	; 0x67fa <get_token>
   14c82:	4c 01       	movw	r8, r24
        hpdir.SECTORS = get_value(token);
   14c84:	c8 01       	movw	r24, r16
   14c86:	0e 94 40 34 	call	0x6880	; 0x6880 <get_value>
   14c8a:	60 93 14 20 	sts	0x2014, r22	; 0x802014 <hpdir+0x9c>
   14c8e:	70 93 15 20 	sts	0x2015, r23	; 0x802015 <hpdir+0x9d>
   14c92:	80 93 16 20 	sts	0x2016, r24	; 0x802016 <hpdir+0x9e>
   14c96:	90 93 17 20 	sts	0x2017, r25	; 0x802017 <hpdir+0x9f>

// 12 Bytes Per Block/Sector
        ptr = get_token(ptr, token,         sizeof(token)-2);
   14c9a:	4e e7       	ldi	r20, 0x7E	; 126
   14c9c:	50 e0       	ldi	r21, 0x00	; 0
   14c9e:	b8 01       	movw	r22, r16
   14ca0:	c4 01       	movw	r24, r8
   14ca2:	0e 94 fd 33 	call	0x67fa	; 0x67fa <get_token>
   14ca6:	4c 01       	movw	r8, r24
        hpdir.BYTES_PER_SECTOR = get_value(token);
   14ca8:	c8 01       	movw	r24, r16
   14caa:	0e 94 40 34 	call	0x6880	; 0x6880 <get_value>
   14cae:	60 93 18 20 	sts	0x2018, r22	; 0x802018 <hpdir+0xa0>
   14cb2:	70 93 19 20 	sts	0x2019, r23	; 0x802019 <hpdir+0xa1>
   14cb6:	80 93 1a 20 	sts	0x201A, r24	; 0x80201a <hpdir+0xa2>
   14cba:	90 93 1b 20 	sts	0x201B, r25	; 0x80201b <hpdir+0xa3>

// 13 Interleave
        ptr = get_token(ptr, token,         sizeof(token)-2);
   14cbe:	4e e7       	ldi	r20, 0x7E	; 126
   14cc0:	50 e0       	ldi	r21, 0x00	; 0
   14cc2:	b8 01       	movw	r22, r16
   14cc4:	c4 01       	movw	r24, r8
   14cc6:	0e 94 fd 33 	call	0x67fa	; 0x67fa <get_token>
        hpdir.INTERLEAVE = get_value(token);
   14cca:	c8 01       	movw	r24, r16
   14ccc:	0e 94 40 34 	call	0x6880	; 0x6880 <get_value>
   14cd0:	60 93 1c 20 	sts	0x201C, r22	; 0x80201c <hpdir+0xa4>
   14cd4:	70 93 1d 20 	sts	0x201D, r23	; 0x80201d <hpdir+0xa5>
   14cd8:	80 93 1e 20 	sts	0x201E, r24	; 0x80201e <hpdir+0xa6>
   14cdc:	90 93 1f 20 	sts	0x201F, r25	; 0x80201f <hpdir+0xa7>

// Computed values
        hpdir.BLOCKS = ( hpdir.CYLINDERS * hpdir.HEADS * hpdir.SECTORS );
   14ce0:	20 91 0c 20 	lds	r18, 0x200C	; 0x80200c <hpdir+0x94>
   14ce4:	30 91 0d 20 	lds	r19, 0x200D	; 0x80200d <hpdir+0x95>
   14ce8:	40 91 0e 20 	lds	r20, 0x200E	; 0x80200e <hpdir+0x96>
   14cec:	50 91 0f 20 	lds	r21, 0x200F	; 0x80200f <hpdir+0x97>
   14cf0:	60 91 10 20 	lds	r22, 0x2010	; 0x802010 <hpdir+0x98>
   14cf4:	70 91 11 20 	lds	r23, 0x2011	; 0x802011 <hpdir+0x99>
   14cf8:	80 91 12 20 	lds	r24, 0x2012	; 0x802012 <hpdir+0x9a>
   14cfc:	90 91 13 20 	lds	r25, 0x2013	; 0x802013 <hpdir+0x9b>
   14d00:	0e 94 f5 e7 	call	0x1cfea	; 0x1cfea <__mulsi3>
   14d04:	9b 01       	movw	r18, r22
   14d06:	ac 01       	movw	r20, r24
   14d08:	60 91 14 20 	lds	r22, 0x2014	; 0x802014 <hpdir+0x9c>
   14d0c:	70 91 15 20 	lds	r23, 0x2015	; 0x802015 <hpdir+0x9d>
   14d10:	80 91 16 20 	lds	r24, 0x2016	; 0x802016 <hpdir+0x9e>
   14d14:	90 91 17 20 	lds	r25, 0x2017	; 0x802017 <hpdir+0x9f>
   14d18:	0e 94 f5 e7 	call	0x1cfea	; 0x1cfea <__mulsi3>
   14d1c:	60 93 24 20 	sts	0x2024, r22	; 0x802024 <hpdir+0xac>
   14d20:	70 93 25 20 	sts	0x2025, r23	; 0x802025 <hpdir+0xad>
   14d24:	80 93 26 20 	sts	0x2026, r24	; 0x802026 <hpdir+0xae>
   14d28:	90 93 27 20 	sts	0x2027, r25	; 0x802027 <hpdir+0xaf>
        {
            if(verbose)
                printf("Error /hpdir.ini parsing\n");
            break;
        }
        found = 1;
   14d2c:	01 e0       	ldi	r16, 0x01	; 1
   14d2e:	10 e0       	ldi	r17, 0x00	; 0
        break;

    }                                             // while
    fclose(cfg);
   14d30:	c7 01       	movw	r24, r14
   14d32:	0e 94 fe 7d 	call	0xfbfc	; 0xfbfc <fclose>
	if(verbose && !found)
   14d36:	ab 28       	or	r10, r11
   14d38:	81 f0       	breq	.+32     	; 0x14d5a <hpdir_find_drive+0x37a>
   14d3a:	01 2b       	or	r16, r17
   14d3c:	81 f4       	brne	.+32     	; 0x14d5e <hpdir_find_drive+0x37e>
		printf("Model: %s NOT found in hpdir.ini\n", model);
   14d3e:	ed b7       	in	r30, 0x3d	; 61
   14d40:	fe b7       	in	r31, 0x3e	; 62
   14d42:	d5 82       	std	Z+5, r13	; 0x05
   14d44:	c4 82       	std	Z+4, r12	; 0x04
   14d46:	85 e7       	ldi	r24, 0x75	; 117
   14d48:	90 e2       	ldi	r25, 0x20	; 32
   14d4a:	a0 e0       	ldi	r26, 0x00	; 0
   14d4c:	81 83       	std	Z+1, r24	; 0x01
   14d4e:	92 83       	std	Z+2, r25	; 0x02
   14d50:	a3 83       	std	Z+3, r26	; 0x03
   14d52:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>

    if(cfg == NULL)
    {
        if(verbose)
            printf("Error: hpdir.ini not found!\n");
        return(0);
   14d56:	80 e0       	ldi	r24, 0x00	; 0
   14d58:	03 c0       	rjmp	.+6      	; 0x14d60 <hpdir_find_drive+0x380>
   14d5a:	c8 01       	movw	r24, r16
   14d5c:	02 c0       	rjmp	.+4      	; 0x14d62 <hpdir_find_drive+0x382>
   14d5e:	81 e0       	ldi	r24, 0x01	; 1
   14d60:	90 e0       	ldi	r25, 0x00	; 0
    }                                             // while
    fclose(cfg);
	if(verbose && !found)
		printf("Model: %s NOT found in hpdir.ini\n", model);
    return(found);
}
   14d62:	c7 57       	subi	r28, 0x77	; 119
   14d64:	de 4f       	sbci	r29, 0xFE	; 254
   14d66:	0f b6       	in	r0, 0x3f	; 63
   14d68:	f8 94       	cli
   14d6a:	de bf       	out	0x3e, r29	; 62
   14d6c:	0f be       	out	0x3f, r0	; 63
   14d6e:	cd bf       	out	0x3d, r28	; 61
   14d70:	df 91       	pop	r29
   14d72:	cf 91       	pop	r28
   14d74:	1f 91       	pop	r17
   14d76:	0f 91       	pop	r16
   14d78:	ff 90       	pop	r15
   14d7a:	ef 90       	pop	r14
   14d7c:	df 90       	pop	r13
   14d7e:	cf 90       	pop	r12
   14d80:	bf 90       	pop	r11
   14d82:	af 90       	pop	r10
   14d84:	9f 90       	pop	r9
   14d86:	8f 90       	pop	r8
   14d88:	6f 90       	pop	r6
   14d8a:	5f 90       	pop	r5
   14d8c:	4f 90       	pop	r4
   14d8e:	3f 90       	pop	r3
   14d90:	2f 90       	pop	r2
   14d92:	08 95       	ret

00014d94 <SS80ControllerPack>:
    if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
        printf("[SS80 Increment to (%lXH)]\n",
            (long) SS80_Blocks_to_Bytes(SS80s->AddressBlocks));
#endif
    return(0);
}
   14d94:	0f 93       	push	r16
   14d96:	1f 93       	push	r17
   14d98:	25 e0       	ldi	r18, 0x05	; 5
   14d9a:	30 e0       	ldi	r19, 0x00	; 0
   14d9c:	fc 01       	movw	r30, r24
   14d9e:	31 83       	std	Z+1, r19	; 0x01
   14da0:	20 83       	st	Z, r18
   14da2:	e0 91 68 19 	lds	r30, 0x1968	; 0x801968 <SS80p>
   14da6:	f0 91 69 19 	lds	r31, 0x1969	; 0x801969 <SS80p+0x1>
   14daa:	00 85       	ldd	r16, Z+8	; 0x08
   14dac:	11 85       	ldd	r17, Z+9	; 0x09
   14dae:	20 e0       	ldi	r18, 0x00	; 0
   14db0:	30 e0       	ldi	r19, 0x00	; 0
   14db2:	42 e0       	ldi	r20, 0x02	; 2
   14db4:	50 e0       	ldi	r21, 0x00	; 0
   14db6:	60 e0       	ldi	r22, 0x00	; 0
   14db8:	70 e0       	ldi	r23, 0x00	; 0
   14dba:	88 e9       	ldi	r24, 0x98	; 152
   14dbc:	99 e1       	ldi	r25, 0x19	; 25
   14dbe:	0e 94 45 c1 	call	0x1828a	; 0x1828a <V2B_MSB>
   14dc2:	e0 91 68 19 	lds	r30, 0x1968	; 0x801968 <SS80p>
   14dc6:	f0 91 69 19 	lds	r31, 0x1969	; 0x801969 <SS80p+0x1>
   14dca:	02 85       	ldd	r16, Z+10	; 0x0a
   14dcc:	13 85       	ldd	r17, Z+11	; 0x0b
   14dce:	20 e0       	ldi	r18, 0x00	; 0
   14dd0:	30 e0       	ldi	r19, 0x00	; 0
   14dd2:	42 e0       	ldi	r20, 0x02	; 2
   14dd4:	50 e0       	ldi	r21, 0x00	; 0
   14dd6:	61 e0       	ldi	r22, 0x01	; 1
   14dd8:	70 e0       	ldi	r23, 0x00	; 0
   14dda:	88 e9       	ldi	r24, 0x98	; 152
   14ddc:	99 e1       	ldi	r25, 0x19	; 25
   14dde:	0e 94 45 c1 	call	0x1828a	; 0x1828a <V2B_MSB>
   14de2:	e0 91 68 19 	lds	r30, 0x1968	; 0x801968 <SS80p>
   14de6:	f0 91 69 19 	lds	r31, 0x1969	; 0x801969 <SS80p+0x1>
   14dea:	04 85       	ldd	r16, Z+12	; 0x0c
   14dec:	10 e0       	ldi	r17, 0x00	; 0
   14dee:	20 e0       	ldi	r18, 0x00	; 0
   14df0:	30 e0       	ldi	r19, 0x00	; 0
   14df2:	41 e0       	ldi	r20, 0x01	; 1
   14df4:	50 e0       	ldi	r21, 0x00	; 0
   14df6:	64 e0       	ldi	r22, 0x04	; 4
   14df8:	70 e0       	ldi	r23, 0x00	; 0
   14dfa:	88 e9       	ldi	r24, 0x98	; 152
   14dfc:	99 e1       	ldi	r25, 0x19	; 25
   14dfe:	0e 94 45 c1 	call	0x1828a	; 0x1828a <V2B_MSB>
   14e02:	88 e9       	ldi	r24, 0x98	; 152
   14e04:	99 e1       	ldi	r25, 0x19	; 25
   14e06:	1f 91       	pop	r17
   14e08:	0f 91       	pop	r16
   14e0a:	08 95       	ret

00014e0c <SS80UnitPack>:
   14e0c:	0f 93       	push	r16
   14e0e:	1f 93       	push	r17
   14e10:	23 e1       	ldi	r18, 0x13	; 19
   14e12:	30 e0       	ldi	r19, 0x00	; 0
   14e14:	fc 01       	movw	r30, r24
   14e16:	31 83       	std	Z+1, r19	; 0x01
   14e18:	20 83       	st	Z, r18
   14e1a:	e0 91 68 19 	lds	r30, 0x1968	; 0x801968 <SS80p>
   14e1e:	f0 91 69 19 	lds	r31, 0x1969	; 0x801969 <SS80p+0x1>
   14e22:	05 85       	ldd	r16, Z+13	; 0x0d
   14e24:	10 e0       	ldi	r17, 0x00	; 0
   14e26:	20 e0       	ldi	r18, 0x00	; 0
   14e28:	30 e0       	ldi	r19, 0x00	; 0
   14e2a:	41 e0       	ldi	r20, 0x01	; 1
   14e2c:	50 e0       	ldi	r21, 0x00	; 0
   14e2e:	60 e0       	ldi	r22, 0x00	; 0
   14e30:	70 e0       	ldi	r23, 0x00	; 0
   14e32:	85 e8       	ldi	r24, 0x85	; 133
   14e34:	99 e1       	ldi	r25, 0x19	; 25
   14e36:	0e 94 45 c1 	call	0x1828a	; 0x1828a <V2B_MSB>
   14e3a:	e0 91 68 19 	lds	r30, 0x1968	; 0x801968 <SS80p>
   14e3e:	f0 91 69 19 	lds	r31, 0x1969	; 0x801969 <SS80p+0x1>
   14e42:	06 85       	ldd	r16, Z+14	; 0x0e
   14e44:	17 85       	ldd	r17, Z+15	; 0x0f
   14e46:	20 89       	ldd	r18, Z+16	; 0x10
   14e48:	31 89       	ldd	r19, Z+17	; 0x11
   14e4a:	43 e0       	ldi	r20, 0x03	; 3
   14e4c:	50 e0       	ldi	r21, 0x00	; 0
   14e4e:	61 e0       	ldi	r22, 0x01	; 1
   14e50:	70 e0       	ldi	r23, 0x00	; 0
   14e52:	85 e8       	ldi	r24, 0x85	; 133
   14e54:	99 e1       	ldi	r25, 0x19	; 25
   14e56:	0e 94 45 c1 	call	0x1828a	; 0x1828a <V2B_MSB>
   14e5a:	e0 91 68 19 	lds	r30, 0x1968	; 0x801968 <SS80p>
   14e5e:	f0 91 69 19 	lds	r31, 0x1969	; 0x801969 <SS80p+0x1>
   14e62:	02 89       	ldd	r16, Z+18	; 0x12
   14e64:	13 89       	ldd	r17, Z+19	; 0x13
   14e66:	20 e0       	ldi	r18, 0x00	; 0
   14e68:	30 e0       	ldi	r19, 0x00	; 0
   14e6a:	42 e0       	ldi	r20, 0x02	; 2
   14e6c:	50 e0       	ldi	r21, 0x00	; 0
   14e6e:	64 e0       	ldi	r22, 0x04	; 4
   14e70:	70 e0       	ldi	r23, 0x00	; 0
   14e72:	85 e8       	ldi	r24, 0x85	; 133
   14e74:	99 e1       	ldi	r25, 0x19	; 25
   14e76:	0e 94 45 c1 	call	0x1828a	; 0x1828a <V2B_MSB>
   14e7a:	e0 91 68 19 	lds	r30, 0x1968	; 0x801968 <SS80p>
   14e7e:	f0 91 69 19 	lds	r31, 0x1969	; 0x801969 <SS80p+0x1>
   14e82:	04 89       	ldd	r16, Z+20	; 0x14
   14e84:	10 e0       	ldi	r17, 0x00	; 0
   14e86:	20 e0       	ldi	r18, 0x00	; 0
   14e88:	30 e0       	ldi	r19, 0x00	; 0
   14e8a:	41 e0       	ldi	r20, 0x01	; 1
   14e8c:	50 e0       	ldi	r21, 0x00	; 0
   14e8e:	66 e0       	ldi	r22, 0x06	; 6
   14e90:	70 e0       	ldi	r23, 0x00	; 0
   14e92:	85 e8       	ldi	r24, 0x85	; 133
   14e94:	99 e1       	ldi	r25, 0x19	; 25
   14e96:	0e 94 45 c1 	call	0x1828a	; 0x1828a <V2B_MSB>
   14e9a:	e0 91 68 19 	lds	r30, 0x1968	; 0x801968 <SS80p>
   14e9e:	f0 91 69 19 	lds	r31, 0x1969	; 0x801969 <SS80p+0x1>
   14ea2:	05 89       	ldd	r16, Z+21	; 0x15
   14ea4:	10 e0       	ldi	r17, 0x00	; 0
   14ea6:	20 e0       	ldi	r18, 0x00	; 0
   14ea8:	30 e0       	ldi	r19, 0x00	; 0
   14eaa:	41 e0       	ldi	r20, 0x01	; 1
   14eac:	50 e0       	ldi	r21, 0x00	; 0
   14eae:	67 e0       	ldi	r22, 0x07	; 7
   14eb0:	70 e0       	ldi	r23, 0x00	; 0
   14eb2:	85 e8       	ldi	r24, 0x85	; 133
   14eb4:	99 e1       	ldi	r25, 0x19	; 25
   14eb6:	0e 94 45 c1 	call	0x1828a	; 0x1828a <V2B_MSB>
   14eba:	e0 91 68 19 	lds	r30, 0x1968	; 0x801968 <SS80p>
   14ebe:	f0 91 69 19 	lds	r31, 0x1969	; 0x801969 <SS80p+0x1>
   14ec2:	06 89       	ldd	r16, Z+22	; 0x16
   14ec4:	17 89       	ldd	r17, Z+23	; 0x17
   14ec6:	20 e0       	ldi	r18, 0x00	; 0
   14ec8:	30 e0       	ldi	r19, 0x00	; 0
   14eca:	42 e0       	ldi	r20, 0x02	; 2
   14ecc:	50 e0       	ldi	r21, 0x00	; 0
   14ece:	68 e0       	ldi	r22, 0x08	; 8
   14ed0:	70 e0       	ldi	r23, 0x00	; 0
   14ed2:	85 e8       	ldi	r24, 0x85	; 133
   14ed4:	99 e1       	ldi	r25, 0x19	; 25
   14ed6:	0e 94 45 c1 	call	0x1828a	; 0x1828a <V2B_MSB>
   14eda:	e0 91 68 19 	lds	r30, 0x1968	; 0x801968 <SS80p>
   14ede:	f0 91 69 19 	lds	r31, 0x1969	; 0x801969 <SS80p+0x1>
   14ee2:	00 8d       	ldd	r16, Z+24	; 0x18
   14ee4:	11 8d       	ldd	r17, Z+25	; 0x19
   14ee6:	20 e0       	ldi	r18, 0x00	; 0
   14ee8:	30 e0       	ldi	r19, 0x00	; 0
   14eea:	42 e0       	ldi	r20, 0x02	; 2
   14eec:	50 e0       	ldi	r21, 0x00	; 0
   14eee:	6a e0       	ldi	r22, 0x0A	; 10
   14ef0:	70 e0       	ldi	r23, 0x00	; 0
   14ef2:	85 e8       	ldi	r24, 0x85	; 133
   14ef4:	99 e1       	ldi	r25, 0x19	; 25
   14ef6:	0e 94 45 c1 	call	0x1828a	; 0x1828a <V2B_MSB>
   14efa:	e0 91 68 19 	lds	r30, 0x1968	; 0x801968 <SS80p>
   14efe:	f0 91 69 19 	lds	r31, 0x1969	; 0x801969 <SS80p+0x1>
   14f02:	02 8d       	ldd	r16, Z+26	; 0x1a
   14f04:	13 8d       	ldd	r17, Z+27	; 0x1b
   14f06:	20 e0       	ldi	r18, 0x00	; 0
   14f08:	30 e0       	ldi	r19, 0x00	; 0
   14f0a:	42 e0       	ldi	r20, 0x02	; 2
   14f0c:	50 e0       	ldi	r21, 0x00	; 0
   14f0e:	6c e0       	ldi	r22, 0x0C	; 12
   14f10:	70 e0       	ldi	r23, 0x00	; 0
   14f12:	85 e8       	ldi	r24, 0x85	; 133
   14f14:	99 e1       	ldi	r25, 0x19	; 25
   14f16:	0e 94 45 c1 	call	0x1828a	; 0x1828a <V2B_MSB>
   14f1a:	e0 91 68 19 	lds	r30, 0x1968	; 0x801968 <SS80p>
   14f1e:	f0 91 69 19 	lds	r31, 0x1969	; 0x801969 <SS80p+0x1>
   14f22:	04 8d       	ldd	r16, Z+28	; 0x1c
   14f24:	15 8d       	ldd	r17, Z+29	; 0x1d
   14f26:	20 e0       	ldi	r18, 0x00	; 0
   14f28:	30 e0       	ldi	r19, 0x00	; 0
   14f2a:	42 e0       	ldi	r20, 0x02	; 2
   14f2c:	50 e0       	ldi	r21, 0x00	; 0
   14f2e:	6e e0       	ldi	r22, 0x0E	; 14
   14f30:	70 e0       	ldi	r23, 0x00	; 0
   14f32:	85 e8       	ldi	r24, 0x85	; 133
   14f34:	99 e1       	ldi	r25, 0x19	; 25
   14f36:	0e 94 45 c1 	call	0x1828a	; 0x1828a <V2B_MSB>
   14f3a:	e0 91 68 19 	lds	r30, 0x1968	; 0x801968 <SS80p>
   14f3e:	f0 91 69 19 	lds	r31, 0x1969	; 0x801969 <SS80p+0x1>
   14f42:	06 8d       	ldd	r16, Z+30	; 0x1e
   14f44:	10 e0       	ldi	r17, 0x00	; 0
   14f46:	20 e0       	ldi	r18, 0x00	; 0
   14f48:	30 e0       	ldi	r19, 0x00	; 0
   14f4a:	41 e0       	ldi	r20, 0x01	; 1
   14f4c:	50 e0       	ldi	r21, 0x00	; 0
   14f4e:	60 e1       	ldi	r22, 0x10	; 16
   14f50:	70 e0       	ldi	r23, 0x00	; 0
   14f52:	85 e8       	ldi	r24, 0x85	; 133
   14f54:	99 e1       	ldi	r25, 0x19	; 25
   14f56:	0e 94 45 c1 	call	0x1828a	; 0x1828a <V2B_MSB>
   14f5a:	e0 91 68 19 	lds	r30, 0x1968	; 0x801968 <SS80p>
   14f5e:	f0 91 69 19 	lds	r31, 0x1969	; 0x801969 <SS80p+0x1>
   14f62:	07 8d       	ldd	r16, Z+31	; 0x1f
   14f64:	10 e0       	ldi	r17, 0x00	; 0
   14f66:	20 e0       	ldi	r18, 0x00	; 0
   14f68:	30 e0       	ldi	r19, 0x00	; 0
   14f6a:	41 e0       	ldi	r20, 0x01	; 1
   14f6c:	50 e0       	ldi	r21, 0x00	; 0
   14f6e:	61 e1       	ldi	r22, 0x11	; 17
   14f70:	70 e0       	ldi	r23, 0x00	; 0
   14f72:	85 e8       	ldi	r24, 0x85	; 133
   14f74:	99 e1       	ldi	r25, 0x19	; 25
   14f76:	0e 94 45 c1 	call	0x1828a	; 0x1828a <V2B_MSB>
   14f7a:	e0 91 68 19 	lds	r30, 0x1968	; 0x801968 <SS80p>
   14f7e:	f0 91 69 19 	lds	r31, 0x1969	; 0x801969 <SS80p+0x1>
   14f82:	00 a1       	ldd	r16, Z+32	; 0x20
   14f84:	10 e0       	ldi	r17, 0x00	; 0
   14f86:	20 e0       	ldi	r18, 0x00	; 0
   14f88:	30 e0       	ldi	r19, 0x00	; 0
   14f8a:	41 e0       	ldi	r20, 0x01	; 1
   14f8c:	50 e0       	ldi	r21, 0x00	; 0
   14f8e:	62 e1       	ldi	r22, 0x12	; 18
   14f90:	70 e0       	ldi	r23, 0x00	; 0
   14f92:	85 e8       	ldi	r24, 0x85	; 133
   14f94:	99 e1       	ldi	r25, 0x19	; 25
   14f96:	0e 94 45 c1 	call	0x1828a	; 0x1828a <V2B_MSB>
   14f9a:	85 e8       	ldi	r24, 0x85	; 133
   14f9c:	99 e1       	ldi	r25, 0x19	; 25
   14f9e:	1f 91       	pop	r17
   14fa0:	0f 91       	pop	r16
   14fa2:	08 95       	ret

00014fa4 <SS80VolumePack>:
   14fa4:	0f 93       	push	r16
   14fa6:	1f 93       	push	r17
   14fa8:	2d e0       	ldi	r18, 0x0D	; 13
   14faa:	30 e0       	ldi	r19, 0x00	; 0
   14fac:	fc 01       	movw	r30, r24
   14fae:	31 83       	std	Z+1, r19	; 0x01
   14fb0:	20 83       	st	Z, r18
   14fb2:	e0 91 68 19 	lds	r30, 0x1968	; 0x801968 <SS80p>
   14fb6:	f0 91 69 19 	lds	r31, 0x1969	; 0x801969 <SS80p+0x1>
   14fba:	01 a1       	ldd	r16, Z+33	; 0x21
   14fbc:	12 a1       	ldd	r17, Z+34	; 0x22
   14fbe:	23 a1       	ldd	r18, Z+35	; 0x23
   14fc0:	34 a1       	ldd	r19, Z+36	; 0x24
   14fc2:	43 e0       	ldi	r20, 0x03	; 3
   14fc4:	50 e0       	ldi	r21, 0x00	; 0
   14fc6:	60 e0       	ldi	r22, 0x00	; 0
   14fc8:	70 e0       	ldi	r23, 0x00	; 0
   14fca:	88 e7       	ldi	r24, 0x78	; 120
   14fcc:	99 e1       	ldi	r25, 0x19	; 25
   14fce:	0e 94 45 c1 	call	0x1828a	; 0x1828a <V2B_MSB>
   14fd2:	e0 91 68 19 	lds	r30, 0x1968	; 0x801968 <SS80p>
   14fd6:	f0 91 69 19 	lds	r31, 0x1969	; 0x801969 <SS80p+0x1>
   14fda:	05 a1       	ldd	r16, Z+37	; 0x25
   14fdc:	10 e0       	ldi	r17, 0x00	; 0
   14fde:	20 e0       	ldi	r18, 0x00	; 0
   14fe0:	30 e0       	ldi	r19, 0x00	; 0
   14fe2:	41 e0       	ldi	r20, 0x01	; 1
   14fe4:	50 e0       	ldi	r21, 0x00	; 0
   14fe6:	63 e0       	ldi	r22, 0x03	; 3
   14fe8:	70 e0       	ldi	r23, 0x00	; 0
   14fea:	88 e7       	ldi	r24, 0x78	; 120
   14fec:	99 e1       	ldi	r25, 0x19	; 25
   14fee:	0e 94 45 c1 	call	0x1828a	; 0x1828a <V2B_MSB>
   14ff2:	e0 91 68 19 	lds	r30, 0x1968	; 0x801968 <SS80p>
   14ff6:	f0 91 69 19 	lds	r31, 0x1969	; 0x801969 <SS80p+0x1>
   14ffa:	06 a1       	ldd	r16, Z+38	; 0x26
   14ffc:	17 a1       	ldd	r17, Z+39	; 0x27
   14ffe:	20 e0       	ldi	r18, 0x00	; 0
   15000:	30 e0       	ldi	r19, 0x00	; 0
   15002:	42 e0       	ldi	r20, 0x02	; 2
   15004:	50 e0       	ldi	r21, 0x00	; 0
   15006:	64 e0       	ldi	r22, 0x04	; 4
   15008:	70 e0       	ldi	r23, 0x00	; 0
   1500a:	88 e7       	ldi	r24, 0x78	; 120
   1500c:	99 e1       	ldi	r25, 0x19	; 25
   1500e:	0e 94 45 c1 	call	0x1828a	; 0x1828a <V2B_MSB>
   15012:	e0 91 68 19 	lds	r30, 0x1968	; 0x801968 <SS80p>
   15016:	f0 91 69 19 	lds	r31, 0x1969	; 0x801969 <SS80p+0x1>
   1501a:	00 a5       	ldd	r16, Z+40	; 0x28
   1501c:	11 a5       	ldd	r17, Z+41	; 0x29
   1501e:	22 a5       	ldd	r18, Z+42	; 0x2a
   15020:	33 a5       	ldd	r19, Z+43	; 0x2b
   15022:	46 e0       	ldi	r20, 0x06	; 6
   15024:	50 e0       	ldi	r21, 0x00	; 0
   15026:	66 e0       	ldi	r22, 0x06	; 6
   15028:	70 e0       	ldi	r23, 0x00	; 0
   1502a:	88 e7       	ldi	r24, 0x78	; 120
   1502c:	99 e1       	ldi	r25, 0x19	; 25
   1502e:	0e 94 45 c1 	call	0x1828a	; 0x1828a <V2B_MSB>
   15032:	e0 91 68 19 	lds	r30, 0x1968	; 0x801968 <SS80p>
   15036:	f0 91 69 19 	lds	r31, 0x1969	; 0x801969 <SS80p+0x1>
   1503a:	04 a5       	ldd	r16, Z+44	; 0x2c
   1503c:	10 e0       	ldi	r17, 0x00	; 0
   1503e:	20 e0       	ldi	r18, 0x00	; 0
   15040:	30 e0       	ldi	r19, 0x00	; 0
   15042:	41 e0       	ldi	r20, 0x01	; 1
   15044:	50 e0       	ldi	r21, 0x00	; 0
   15046:	6c e0       	ldi	r22, 0x0C	; 12
   15048:	70 e0       	ldi	r23, 0x00	; 0
   1504a:	88 e7       	ldi	r24, 0x78	; 120
   1504c:	99 e1       	ldi	r25, 0x19	; 25
   1504e:	0e 94 45 c1 	call	0x1828a	; 0x1828a <V2B_MSB>
   15052:	88 e7       	ldi	r24, 0x78	; 120
   15054:	99 e1       	ldi	r25, 0x19	; 25
   15056:	1f 91       	pop	r17
   15058:	0f 91       	pop	r16
   1505a:	08 95       	ret

0001505c <SS80_test_extended_status>:
   1505c:	9b 01       	movw	r18, r22
   1505e:	43 e0       	ldi	r20, 0x03	; 3
   15060:	35 95       	asr	r19
   15062:	27 95       	ror	r18
   15064:	4a 95       	dec	r20
   15066:	e1 f7       	brne	.-8      	; 0x15060 <SS80_test_extended_status+0x4>
   15068:	82 0f       	add	r24, r18
   1506a:	93 1f       	adc	r25, r19
   1506c:	67 70       	andi	r22, 0x07	; 7
   1506e:	77 27       	eor	r23, r23
   15070:	20 e8       	ldi	r18, 0x80	; 128
   15072:	30 e0       	ldi	r19, 0x00	; 0
   15074:	02 c0       	rjmp	.+4      	; 0x1507a <SS80_test_extended_status+0x1e>
   15076:	35 95       	asr	r19
   15078:	27 95       	ror	r18
   1507a:	6a 95       	dec	r22
   1507c:	e2 f7       	brpl	.-8      	; 0x15076 <SS80_test_extended_status+0x1a>
   1507e:	fc 01       	movw	r30, r24
   15080:	80 81       	ld	r24, Z
   15082:	28 23       	and	r18, r24
   15084:	81 e0       	ldi	r24, 0x01	; 1
   15086:	90 e0       	ldi	r25, 0x00	; 0
   15088:	11 f4       	brne	.+4      	; 0x1508e <SS80_test_extended_status+0x32>
   1508a:	80 e0       	ldi	r24, 0x00	; 0
   1508c:	90 e0       	ldi	r25, 0x00	; 0
   1508e:	08 95       	ret

00015090 <SS80_display_extended_status>:
   15090:	6f 92       	push	r6
   15092:	7f 92       	push	r7
   15094:	8f 92       	push	r8
   15096:	ef 92       	push	r14
   15098:	ff 92       	push	r15
   1509a:	0f 93       	push	r16
   1509c:	1f 93       	push	r17
   1509e:	cf 93       	push	r28
   150a0:	df 93       	push	r29
   150a2:	ad b7       	in	r26, 0x3d	; 61
   150a4:	be b7       	in	r27, 0x3e	; 62
   150a6:	17 97       	sbiw	r26, 0x07	; 7
   150a8:	0f b6       	in	r0, 0x3f	; 63
   150aa:	f8 94       	cli
   150ac:	be bf       	out	0x3e, r27	; 62
   150ae:	0f be       	out	0x3f, r0	; 63
   150b0:	ad bf       	out	0x3d, r26	; 61
   150b2:	fc 01       	movw	r30, r24
   150b4:	ac 01       	movw	r20, r24
   150b6:	48 5f       	subi	r20, 0xF8	; 248
   150b8:	5f 4f       	sbci	r21, 0xFF	; 255
   150ba:	20 e0       	ldi	r18, 0x00	; 0
   150bc:	30 e0       	ldi	r19, 0x00	; 0
   150be:	a1 91       	ld	r26, Z+
   150c0:	aa 23       	and	r26, r26
   150c2:	11 f0       	breq	.+4      	; 0x150c8 <SS80_display_extended_status+0x38>
   150c4:	21 e0       	ldi	r18, 0x01	; 1
   150c6:	30 e0       	ldi	r19, 0x00	; 0
   150c8:	e4 17       	cp	r30, r20
   150ca:	f5 07       	cpc	r31, r21
   150cc:	c1 f7       	brne	.-16     	; 0x150be <SS80_display_extended_status+0x2e>
   150ce:	23 2b       	or	r18, r19
   150d0:	81 f1       	breq	.+96     	; 0x15132 <SS80_display_extended_status+0xa2>
   150d2:	ec 01       	movw	r28, r24
   150d4:	ed b7       	in	r30, 0x3d	; 61
   150d6:	fe b7       	in	r31, 0x3e	; 62
   150d8:	75 83       	std	Z+5, r23	; 0x05
   150da:	64 83       	std	Z+4, r22	; 0x04
   150dc:	85 e1       	ldi	r24, 0x15	; 21
   150de:	97 e2       	ldi	r25, 0x27	; 39
   150e0:	a0 e0       	ldi	r26, 0x00	; 0
   150e2:	81 83       	std	Z+1, r24	; 0x01
   150e4:	92 83       	std	Z+2, r25	; 0x02
   150e6:	a3 83       	std	Z+3, r26	; 0x03
   150e8:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
   150ec:	0c e7       	ldi	r16, 0x7C	; 124
   150ee:	12 e0       	ldi	r17, 0x02	; 2
   150f0:	8a e0       	ldi	r24, 0x0A	; 10
   150f2:	97 e2       	ldi	r25, 0x27	; 39
   150f4:	3c 01       	movw	r6, r24
   150f6:	81 2c       	mov	r8, r1
   150f8:	f8 01       	movw	r30, r16
   150fa:	e0 80       	ld	r14, Z
   150fc:	f1 80       	ldd	r15, Z+1	; 0x01
   150fe:	ff ef       	ldi	r31, 0xFF	; 255
   15100:	ef 16       	cp	r14, r31
   15102:	ff 06       	cpc	r15, r31
   15104:	b1 f0       	breq	.+44     	; 0x15132 <SS80_display_extended_status+0xa2>
   15106:	b7 01       	movw	r22, r14
   15108:	ce 01       	movw	r24, r28
   1510a:	a8 df       	rcall	.-176    	; 0x1505c <SS80_test_extended_status>
   1510c:	89 2b       	or	r24, r25
   1510e:	71 f0       	breq	.+28     	; 0x1512c <SS80_display_extended_status+0x9c>
   15110:	f8 01       	movw	r30, r16
   15112:	82 81       	ldd	r24, Z+2	; 0x02
   15114:	93 81       	ldd	r25, Z+3	; 0x03
   15116:	ed b7       	in	r30, 0x3d	; 61
   15118:	fe b7       	in	r31, 0x3e	; 62
   1511a:	97 83       	std	Z+7, r25	; 0x07
   1511c:	86 83       	std	Z+6, r24	; 0x06
   1511e:	f5 82       	std	Z+5, r15	; 0x05
   15120:	e4 82       	std	Z+4, r14	; 0x04
   15122:	61 82       	std	Z+1, r6	; 0x01
   15124:	72 82       	std	Z+2, r7	; 0x02
   15126:	83 82       	std	Z+3, r8	; 0x03
   15128:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
   1512c:	0c 5f       	subi	r16, 0xFC	; 252
   1512e:	1f 4f       	sbci	r17, 0xFF	; 255
   15130:	e3 cf       	rjmp	.-58     	; 0x150f8 <SS80_display_extended_status+0x68>
   15132:	ad b7       	in	r26, 0x3d	; 61
   15134:	be b7       	in	r27, 0x3e	; 62
   15136:	17 96       	adiw	r26, 0x07	; 7
   15138:	0f b6       	in	r0, 0x3f	; 63
   1513a:	f8 94       	cli
   1513c:	be bf       	out	0x3e, r27	; 62
   1513e:	0f be       	out	0x3f, r0	; 63
   15140:	ad bf       	out	0x3d, r26	; 61
   15142:	df 91       	pop	r29
   15144:	cf 91       	pop	r28
   15146:	1f 91       	pop	r17
   15148:	0f 91       	pop	r16
   1514a:	ff 90       	pop	r15
   1514c:	ef 90       	pop	r14
   1514e:	8f 90       	pop	r8
   15150:	7f 90       	pop	r7
   15152:	6f 90       	pop	r6
   15154:	08 95       	ret

00015156 <SS80_send_status>:
   15156:	a9 e1       	ldi	r26, 0x19	; 25
   15158:	b0 e0       	ldi	r27, 0x00	; 0
   1515a:	e1 eb       	ldi	r30, 0xB1	; 177
   1515c:	f8 ea       	ldi	r31, 0xA8	; 168
   1515e:	0c 94 b0 e8 	jmp	0x1d160	; 0x1d160 <__prologue_saves__+0x18>
   15162:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15166:	85 ff       	sbrs	r24, 5
   15168:	0a c0       	rjmp	.+20     	; 0x1517e <SS80_send_status+0x28>
   1516a:	86 ef       	ldi	r24, 0xF6	; 246
   1516c:	96 e2       	ldi	r25, 0x26	; 38
   1516e:	a0 e0       	ldi	r26, 0x00	; 0
   15170:	ed b7       	in	r30, 0x3d	; 61
   15172:	fe b7       	in	r31, 0x3e	; 62
   15174:	81 83       	std	Z+1, r24	; 0x01
   15176:	92 83       	std	Z+2, r25	; 0x02
   15178:	a3 83       	std	Z+3, r26	; 0x03
   1517a:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
   1517e:	ce 01       	movw	r24, r28
   15180:	04 96       	adiw	r24, 0x04	; 4
   15182:	7c 01       	movw	r14, r24
   15184:	84 e1       	ldi	r24, 0x14	; 20
   15186:	f7 01       	movw	r30, r14
   15188:	11 92       	st	Z+, r1
   1518a:	8a 95       	dec	r24
   1518c:	e9 f7       	brne	.-6      	; 0x15188 <SS80_send_status+0x32>
   1518e:	e0 91 66 19 	lds	r30, 0x1966	; 0x801966 <SS80s>
   15192:	f0 91 67 19 	lds	r31, 0x1967	; 0x801967 <SS80s+0x1>
   15196:	86 81       	ldd	r24, Z+6	; 0x06
   15198:	20 e1       	ldi	r18, 0x10	; 16
   1519a:	82 9f       	mul	r24, r18
   1519c:	c0 01       	movw	r24, r0
   1519e:	11 24       	eor	r1, r1
   151a0:	95 81       	ldd	r25, Z+5	; 0x05
   151a2:	9f 70       	andi	r25, 0x0F	; 15
   151a4:	89 2b       	or	r24, r25
   151a6:	8c 83       	std	Y+4, r24	; 0x04
   151a8:	8f ef       	ldi	r24, 0xFF	; 255
   151aa:	8d 83       	std	Y+5, r24	; 0x05
   151ac:	83 81       	ldd	r24, Z+3	; 0x03
   151ae:	86 ff       	sbrs	r24, 6
   151b0:	02 c0       	rjmp	.+4      	; 0x151b6 <SS80_send_status+0x60>
   151b2:	92 e0       	ldi	r25, 0x02	; 2
   151b4:	9e 83       	std	Y+6, r25	; 0x06
   151b6:	82 ff       	sbrs	r24, 2
   151b8:	03 c0       	rjmp	.+6      	; 0x151c0 <SS80_send_status+0x6a>
   151ba:	9e 81       	ldd	r25, Y+6	; 0x06
   151bc:	91 60       	ori	r25, 0x01	; 1
   151be:	9e 83       	std	Y+6, r25	; 0x06
   151c0:	80 ff       	sbrs	r24, 0
   151c2:	02 c0       	rjmp	.+4      	; 0x151c8 <SS80_send_status+0x72>
   151c4:	82 e0       	ldi	r24, 0x02	; 2
   151c6:	88 87       	std	Y+8, r24	; 0x08
   151c8:	83 81       	ldd	r24, Z+3	; 0x03
   151ca:	81 ff       	sbrs	r24, 1
   151cc:	03 c0       	rjmp	.+6      	; 0x151d4 <SS80_send_status+0x7e>
   151ce:	88 85       	ldd	r24, Y+8	; 0x08
   151d0:	82 60       	ori	r24, 0x02	; 2
   151d2:	88 87       	std	Y+8, r24	; 0x08
   151d4:	83 81       	ldd	r24, Z+3	; 0x03
   151d6:	83 ff       	sbrs	r24, 3
   151d8:	02 c0       	rjmp	.+4      	; 0x151de <SS80_send_status+0x88>
   151da:	88 e0       	ldi	r24, 0x08	; 8
   151dc:	8a 87       	std	Y+10, r24	; 0x0a
   151de:	83 81       	ldd	r24, Z+3	; 0x03
   151e0:	94 81       	ldd	r25, Z+4	; 0x04
   151e2:	89 2b       	or	r24, r25
   151e4:	59 f4       	brne	.+22     	; 0x151fc <SS80_send_status+0xa6>
   151e6:	07 81       	ldd	r16, Z+7	; 0x07
   151e8:	10 85       	ldd	r17, Z+8	; 0x08
   151ea:	21 85       	ldd	r18, Z+9	; 0x09
   151ec:	32 85       	ldd	r19, Z+10	; 0x0a
   151ee:	46 e0       	ldi	r20, 0x06	; 6
   151f0:	50 e0       	ldi	r21, 0x00	; 0
   151f2:	6a e0       	ldi	r22, 0x0A	; 10
   151f4:	70 e0       	ldi	r23, 0x00	; 0
   151f6:	c7 01       	movw	r24, r14
   151f8:	0e 94 45 c1 	call	0x1828a	; 0x1828a <V2B_MSB>
   151fc:	e0 91 66 19 	lds	r30, 0x1966	; 0x801966 <SS80s>
   15200:	f0 91 67 19 	lds	r31, 0x1967	; 0x801967 <SS80s+0x1>
   15204:	83 81       	ldd	r24, Z+3	; 0x03
   15206:	94 81       	ldd	r25, Z+4	; 0x04
   15208:	89 2b       	or	r24, r25
   1520a:	11 f0       	breq	.+4      	; 0x15210 <SS80_send_status+0xba>
   1520c:	81 e0       	ldi	r24, 0x01	; 1
   1520e:	82 83       	std	Z+2, r24	; 0x02
   15210:	80 e0       	ldi	r24, 0x00	; 0
   15212:	91 e0       	ldi	r25, 0x01	; 1
   15214:	99 8f       	std	Y+25, r25	; 0x19
   15216:	88 8f       	std	Y+24, r24	; 0x18
   15218:	ae 01       	movw	r20, r28
   1521a:	48 5e       	subi	r20, 0xE8	; 232
   1521c:	5f 4f       	sbci	r21, 0xFF	; 255
   1521e:	64 e1       	ldi	r22, 0x14	; 20
   15220:	70 e0       	ldi	r23, 0x00	; 0
   15222:	c7 01       	movw	r24, r14
   15224:	0e 94 86 8c 	call	0x1190c	; 0x1190c <gpib_write_str>
   15228:	44 97       	sbiw	r24, 0x14	; 20
   1522a:	71 f0       	breq	.+28     	; 0x15248 <SS80_send_status+0xf2>
   1522c:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15230:	80 ff       	sbrs	r24, 0
   15232:	0a c0       	rjmp	.+20     	; 0x15248 <SS80_send_status+0xf2>
   15234:	8b ed       	ldi	r24, 0xDB	; 219
   15236:	96 e2       	ldi	r25, 0x26	; 38
   15238:	a0 e0       	ldi	r26, 0x00	; 0
   1523a:	ed b7       	in	r30, 0x3d	; 61
   1523c:	fe b7       	in	r31, 0x3e	; 62
   1523e:	81 83       	std	Z+1, r24	; 0x01
   15240:	92 83       	std	Z+2, r25	; 0x02
   15242:	a3 83       	std	Z+3, r26	; 0x03
   15244:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
   15248:	88 8d       	ldd	r24, Y+24	; 0x18
   1524a:	99 8d       	ldd	r25, Y+25	; 0x19
   1524c:	88 27       	eor	r24, r24
   1524e:	90 7d       	andi	r25, 0xD0	; 208
   15250:	69 96       	adiw	r28, 0x19	; 25
   15252:	e6 e0       	ldi	r30, 0x06	; 6
   15254:	0c 94 cc e8 	jmp	0x1d198	; 0x1d198 <__epilogue_restores__+0x18>

00015258 <SS80_describe>:
   15258:	a7 e0       	ldi	r26, 0x07	; 7
   1525a:	b0 e0       	ldi	r27, 0x00	; 0
   1525c:	e2 e3       	ldi	r30, 0x32	; 50
   1525e:	f9 ea       	ldi	r31, 0xA9	; 169
   15260:	0c 94 b4 e8 	jmp	0x1d168	; 0x1d168 <__prologue_saves__+0x20>
   15264:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15268:	85 ff       	sbrs	r24, 5
   1526a:	0a c0       	rjmp	.+20     	; 0x15280 <SS80_describe+0x28>
   1526c:	8a ec       	ldi	r24, 0xCA	; 202
   1526e:	96 e2       	ldi	r25, 0x26	; 38
   15270:	a0 e0       	ldi	r26, 0x00	; 0
   15272:	ed b7       	in	r30, 0x3d	; 61
   15274:	fe b7       	in	r31, 0x3e	; 62
   15276:	81 83       	std	Z+1, r24	; 0x01
   15278:	92 83       	std	Z+2, r25	; 0x02
   1527a:	a3 83       	std	Z+3, r26	; 0x03
   1527c:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
   15280:	1f 82       	std	Y+7, r1	; 0x07
   15282:	1e 82       	std	Y+6, r1	; 0x06
   15284:	ce 01       	movw	r24, r28
   15286:	04 96       	adiw	r24, 0x04	; 4
   15288:	85 dd       	rcall	.-1270   	; 0x14d94 <SS80ControllerPack>
   1528a:	6c 81       	ldd	r22, Y+4	; 0x04
   1528c:	7d 81       	ldd	r23, Y+5	; 0x05
   1528e:	ae 01       	movw	r20, r28
   15290:	4a 5f       	subi	r20, 0xFA	; 250
   15292:	5f 4f       	sbci	r21, 0xFF	; 255
   15294:	0e 94 86 8c 	call	0x1190c	; 0x1190c <gpib_write_str>
   15298:	2c 81       	ldd	r18, Y+4	; 0x04
   1529a:	3d 81       	ldd	r19, Y+5	; 0x05
   1529c:	82 17       	cp	r24, r18
   1529e:	93 07       	cpc	r25, r19
   152a0:	39 f0       	breq	.+14     	; 0x152b0 <SS80_describe+0x58>
   152a2:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   152a6:	80 ff       	sbrs	r24, 0
   152a8:	3c c0       	rjmp	.+120    	; 0x15322 <SS80_describe+0xca>
   152aa:	87 ea       	ldi	r24, 0xA7	; 167
   152ac:	96 e2       	ldi	r25, 0x26	; 38
   152ae:	31 c0       	rjmp	.+98     	; 0x15312 <SS80_describe+0xba>
   152b0:	1f 82       	std	Y+7, r1	; 0x07
   152b2:	1e 82       	std	Y+6, r1	; 0x06
   152b4:	ce 01       	movw	r24, r28
   152b6:	04 96       	adiw	r24, 0x04	; 4
   152b8:	a9 dd       	rcall	.-1198   	; 0x14e0c <SS80UnitPack>
   152ba:	6c 81       	ldd	r22, Y+4	; 0x04
   152bc:	7d 81       	ldd	r23, Y+5	; 0x05
   152be:	ae 01       	movw	r20, r28
   152c0:	4a 5f       	subi	r20, 0xFA	; 250
   152c2:	5f 4f       	sbci	r21, 0xFF	; 255
   152c4:	0e 94 86 8c 	call	0x1190c	; 0x1190c <gpib_write_str>
   152c8:	2c 81       	ldd	r18, Y+4	; 0x04
   152ca:	3d 81       	ldd	r19, Y+5	; 0x05
   152cc:	82 17       	cp	r24, r18
   152ce:	93 07       	cpc	r25, r19
   152d0:	39 f0       	breq	.+14     	; 0x152e0 <SS80_describe+0x88>
   152d2:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   152d6:	80 ff       	sbrs	r24, 0
   152d8:	24 c0       	rjmp	.+72     	; 0x15322 <SS80_describe+0xca>
   152da:	8a e8       	ldi	r24, 0x8A	; 138
   152dc:	96 e2       	ldi	r25, 0x26	; 38
   152de:	19 c0       	rjmp	.+50     	; 0x15312 <SS80_describe+0xba>
   152e0:	80 e0       	ldi	r24, 0x00	; 0
   152e2:	91 e0       	ldi	r25, 0x01	; 1
   152e4:	9f 83       	std	Y+7, r25	; 0x07
   152e6:	8e 83       	std	Y+6, r24	; 0x06
   152e8:	ce 01       	movw	r24, r28
   152ea:	04 96       	adiw	r24, 0x04	; 4
   152ec:	5b de       	rcall	.-842    	; 0x14fa4 <SS80VolumePack>
   152ee:	6c 81       	ldd	r22, Y+4	; 0x04
   152f0:	7d 81       	ldd	r23, Y+5	; 0x05
   152f2:	ae 01       	movw	r20, r28
   152f4:	4a 5f       	subi	r20, 0xFA	; 250
   152f6:	5f 4f       	sbci	r21, 0xFF	; 255
   152f8:	0e 94 86 8c 	call	0x1190c	; 0x1190c <gpib_write_str>
   152fc:	2c 81       	ldd	r18, Y+4	; 0x04
   152fe:	3d 81       	ldd	r19, Y+5	; 0x05
   15300:	82 17       	cp	r24, r18
   15302:	93 07       	cpc	r25, r19
   15304:	99 f0       	breq	.+38     	; 0x1532c <SS80_describe+0xd4>
   15306:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1530a:	80 ff       	sbrs	r24, 0
   1530c:	0a c0       	rjmp	.+20     	; 0x15322 <SS80_describe+0xca>
   1530e:	8b e6       	ldi	r24, 0x6B	; 107
   15310:	96 e2       	ldi	r25, 0x26	; 38
   15312:	a0 e0       	ldi	r26, 0x00	; 0
   15314:	ed b7       	in	r30, 0x3d	; 61
   15316:	fe b7       	in	r31, 0x3e	; 62
   15318:	81 83       	std	Z+1, r24	; 0x01
   1531a:	92 83       	std	Z+2, r25	; 0x02
   1531c:	a3 83       	std	Z+3, r26	; 0x03
   1531e:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
   15322:	8e 81       	ldd	r24, Y+6	; 0x06
   15324:	9f 81       	ldd	r25, Y+7	; 0x07
   15326:	88 27       	eor	r24, r24
   15328:	90 7d       	andi	r25, 0xD0	; 208
   1532a:	02 c0       	rjmp	.+4      	; 0x15330 <SS80_describe+0xd8>
   1532c:	80 e0       	ldi	r24, 0x00	; 0
   1532e:	90 e0       	ldi	r25, 0x00	; 0
   15330:	27 96       	adiw	r28, 0x07	; 7
   15332:	e2 e0       	ldi	r30, 0x02	; 2
   15334:	0c 94 d0 e8 	jmp	0x1d1a0	; 0x1d1a0 <__epilogue_restores__+0x20>

00015338 <SS80_Check_Unit>:
   15338:	00 d0       	rcall	.+0      	; 0x1533a <SS80_Check_Unit+0x2>
   1533a:	00 d0       	rcall	.+0      	; 0x1533c <SS80_Check_Unit+0x4>
   1533c:	1f 92       	push	r1
   1533e:	e0 91 66 19 	lds	r30, 0x1966	; 0x801966 <SS80s>
   15342:	f0 91 67 19 	lds	r31, 0x1967	; 0x801967 <SS80s+0x1>
   15346:	88 23       	and	r24, r24
   15348:	c9 f0       	breq	.+50     	; 0x1537c <SS80_Check_Unit+0x44>
   1534a:	8f 30       	cpi	r24, 0x0F	; 15
   1534c:	b9 f0       	breq	.+46     	; 0x1537c <SS80_Check_Unit+0x44>
   1534e:	23 81       	ldd	r18, Z+3	; 0x03
   15350:	34 81       	ldd	r19, Z+4	; 0x04
   15352:	20 64       	ori	r18, 0x40	; 64
   15354:	34 83       	std	Z+4, r19	; 0x04
   15356:	23 83       	std	Z+3, r18	; 0x03
   15358:	90 91 b6 01 	lds	r25, 0x01B6	; 0x8001b6 <debuglevel>
   1535c:	90 ff       	sbrs	r25, 0
   1535e:	0f c0       	rjmp	.+30     	; 0x1537e <SS80_Check_Unit+0x46>
   15360:	90 e0       	ldi	r25, 0x00	; 0
   15362:	ed b7       	in	r30, 0x3d	; 61
   15364:	fe b7       	in	r31, 0x3e	; 62
   15366:	95 83       	std	Z+5, r25	; 0x05
   15368:	84 83       	std	Z+4, r24	; 0x04
   1536a:	83 e5       	ldi	r24, 0x53	; 83
   1536c:	96 e2       	ldi	r25, 0x26	; 38
   1536e:	a0 e0       	ldi	r26, 0x00	; 0
   15370:	81 83       	std	Z+1, r24	; 0x01
   15372:	92 83       	std	Z+2, r25	; 0x02
   15374:	a3 83       	std	Z+3, r26	; 0x03
   15376:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
   1537a:	01 c0       	rjmp	.+2      	; 0x1537e <SS80_Check_Unit+0x46>
   1537c:	85 83       	std	Z+5, r24	; 0x05
   1537e:	0f 90       	pop	r0
   15380:	0f 90       	pop	r0
   15382:	0f 90       	pop	r0
   15384:	0f 90       	pop	r0
   15386:	0f 90       	pop	r0
   15388:	08 95       	ret

0001538a <SS80_Check_Volume>:
   1538a:	00 d0       	rcall	.+0      	; 0x1538c <SS80_Check_Volume+0x2>
   1538c:	00 d0       	rcall	.+0      	; 0x1538e <SS80_Check_Volume+0x4>
   1538e:	1f 92       	push	r1
   15390:	e0 91 66 19 	lds	r30, 0x1966	; 0x801966 <SS80s>
   15394:	f0 91 67 19 	lds	r31, 0x1967	; 0x801967 <SS80s+0x1>
   15398:	88 23       	and	r24, r24
   1539a:	b9 f0       	breq	.+46     	; 0x153ca <SS80_Check_Volume+0x40>
   1539c:	23 81       	ldd	r18, Z+3	; 0x03
   1539e:	34 81       	ldd	r19, Z+4	; 0x04
   153a0:	20 64       	ori	r18, 0x40	; 64
   153a2:	34 83       	std	Z+4, r19	; 0x04
   153a4:	23 83       	std	Z+3, r18	; 0x03
   153a6:	90 91 b6 01 	lds	r25, 0x01B6	; 0x8001b6 <debuglevel>
   153aa:	90 ff       	sbrs	r25, 0
   153ac:	0f c0       	rjmp	.+30     	; 0x153cc <SS80_Check_Volume+0x42>
   153ae:	90 e0       	ldi	r25, 0x00	; 0
   153b0:	ed b7       	in	r30, 0x3d	; 61
   153b2:	fe b7       	in	r31, 0x3e	; 62
   153b4:	95 83       	std	Z+5, r25	; 0x05
   153b6:	84 83       	std	Z+4, r24	; 0x04
   153b8:	89 e3       	ldi	r24, 0x39	; 57
   153ba:	96 e2       	ldi	r25, 0x26	; 38
   153bc:	a0 e0       	ldi	r26, 0x00	; 0
   153be:	81 83       	std	Z+1, r24	; 0x01
   153c0:	92 83       	std	Z+2, r25	; 0x02
   153c2:	a3 83       	std	Z+3, r26	; 0x03
   153c4:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
   153c8:	01 c0       	rjmp	.+2      	; 0x153cc <SS80_Check_Volume+0x42>
   153ca:	16 82       	std	Z+6, r1	; 0x06
   153cc:	0f 90       	pop	r0
   153ce:	0f 90       	pop	r0
   153d0:	0f 90       	pop	r0
   153d2:	0f 90       	pop	r0
   153d4:	0f 90       	pop	r0
   153d6:	08 95       	ret

000153d8 <SS80_Command_State>:
   153d8:	2f 92       	push	r2
   153da:	3f 92       	push	r3
   153dc:	4f 92       	push	r4
   153de:	6f 92       	push	r6
   153e0:	7f 92       	push	r7
   153e2:	8f 92       	push	r8
   153e4:	af 92       	push	r10
   153e6:	bf 92       	push	r11
   153e8:	cf 92       	push	r12
   153ea:	ef 92       	push	r14
   153ec:	ff 92       	push	r15
   153ee:	0f 93       	push	r16
   153f0:	1f 93       	push	r17
   153f2:	cf 93       	push	r28
   153f4:	df 93       	push	r29
   153f6:	cd b7       	in	r28, 0x3d	; 61
   153f8:	de b7       	in	r29, 0x3e	; 62
   153fa:	66 97       	sbiw	r28, 0x16	; 22
   153fc:	0f b6       	in	r0, 0x3f	; 63
   153fe:	f8 94       	cli
   15400:	de bf       	out	0x3e, r29	; 62
   15402:	0f be       	out	0x3f, r0	; 63
   15404:	cd bf       	out	0x3d, r28	; 61
   15406:	e0 91 68 19 	lds	r30, 0x1968	; 0x801968 <SS80p>
   1540a:	f0 91 69 19 	lds	r31, 0x1969	; 0x801969 <SS80p+0x1>
   1540e:	81 81       	ldd	r24, Z+1	; 0x01
   15410:	90 e0       	ldi	r25, 0x00	; 0
   15412:	0e 94 8c 87 	call	0x10f18	; 0x10f18 <gpib_disable_PPR>
   15416:	80 e0       	ldi	r24, 0x00	; 0
   15418:	91 e0       	ldi	r25, 0x01	; 1
   1541a:	99 87       	std	Y+9, r25	; 0x09
   1541c:	88 87       	std	Y+8, r24	; 0x08
   1541e:	ae 01       	movw	r20, r28
   15420:	48 5f       	subi	r20, 0xF8	; 248
   15422:	5f 4f       	sbci	r21, 0xFF	; 255
   15424:	60 e0       	ldi	r22, 0x00	; 0
   15426:	72 e0       	ldi	r23, 0x02	; 2
   15428:	8a ee       	ldi	r24, 0xEA	; 234
   1542a:	9c e1       	ldi	r25, 0x1C	; 28
   1542c:	0e 94 e4 8b 	call	0x117c8	; 0x117c8 <gpib_read_str>
   15430:	9b 87       	std	Y+11, r25	; 0x0b
   15432:	8a 87       	std	Y+10, r24	; 0x0a
   15434:	88 85       	ldd	r24, Y+8	; 0x08
   15436:	99 85       	ldd	r25, Y+9	; 0x09
   15438:	9c 01       	movw	r18, r24
   1543a:	22 27       	eor	r18, r18
   1543c:	30 7d       	andi	r19, 0xD0	; 208
   1543e:	23 2b       	or	r18, r19
   15440:	79 f0       	breq	.+30     	; 0x15460 <SS80_Command_State+0x88>
   15442:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15446:	80 ff       	sbrs	r24, 0
   15448:	21 c2       	rjmp	.+1090   	; 0x1588c <SS80_Command_State+0x4b4>
   1544a:	83 e1       	ldi	r24, 0x13	; 19
   1544c:	96 e2       	ldi	r25, 0x26	; 38
   1544e:	a0 e0       	ldi	r26, 0x00	; 0
   15450:	ed b7       	in	r30, 0x3d	; 61
   15452:	fe b7       	in	r31, 0x3e	; 62
   15454:	81 83       	std	Z+1, r24	; 0x01
   15456:	92 83       	std	Z+2, r25	; 0x02
   15458:	a3 83       	std	Z+3, r26	; 0x03
   1545a:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
   1545e:	16 c2       	rjmp	.+1068   	; 0x1588c <SS80_Command_State+0x4b4>
   15460:	2a 85       	ldd	r18, Y+10	; 0x0a
   15462:	3b 85       	ldd	r19, Y+11	; 0x0b
   15464:	23 2b       	or	r18, r19
   15466:	09 f4       	brne	.+2      	; 0x1546a <SS80_Command_State+0x92>
   15468:	16 c2       	rjmp	.+1068   	; 0x15896 <SS80_Command_State+0x4be>
   1546a:	90 fd       	sbrc	r25, 0
   1546c:	0e c0       	rjmp	.+28     	; 0x1548a <SS80_Command_State+0xb2>
   1546e:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15472:	80 ff       	sbrs	r24, 0
   15474:	0a c0       	rjmp	.+20     	; 0x1548a <SS80_Command_State+0xb2>
   15476:	8a ef       	ldi	r24, 0xFA	; 250
   15478:	95 e2       	ldi	r25, 0x25	; 37
   1547a:	a0 e0       	ldi	r26, 0x00	; 0
   1547c:	ed b7       	in	r30, 0x3d	; 61
   1547e:	fe b7       	in	r31, 0x3e	; 62
   15480:	81 83       	std	Z+1, r24	; 0x01
   15482:	92 83       	std	Z+2, r25	; 0x02
   15484:	a3 83       	std	Z+3, r26	; 0x03
   15486:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
   1548a:	e1 2c       	mov	r14, r1
   1548c:	f1 2c       	mov	r15, r1
   1548e:	8e ef       	ldi	r24, 0xFE	; 254
   15490:	94 e2       	ldi	r25, 0x24	; 36
   15492:	9c 01       	movw	r18, r24
   15494:	40 e0       	ldi	r20, 0x00	; 0
   15496:	2e 87       	std	Y+14, r18	; 0x0e
   15498:	3f 87       	std	Y+15, r19	; 0x0f
   1549a:	48 8b       	std	Y+16, r20	; 0x10
   1549c:	83 e2       	ldi	r24, 0x23	; 35
   1549e:	95 e2       	ldi	r25, 0x25	; 37
   154a0:	9c 01       	movw	r18, r24
   154a2:	40 e0       	ldi	r20, 0x00	; 0
   154a4:	29 8b       	std	Y+17, r18	; 0x11
   154a6:	3a 8b       	std	Y+18, r19	; 0x12
   154a8:	4b 8b       	std	Y+19, r20	; 0x13
   154aa:	8d e3       	ldi	r24, 0x3D	; 61
   154ac:	95 e2       	ldi	r25, 0x25	; 37
   154ae:	9c 01       	movw	r18, r24
   154b0:	40 e0       	ldi	r20, 0x00	; 0
   154b2:	2c 8b       	std	Y+20, r18	; 0x14
   154b4:	3d 8b       	std	Y+21, r19	; 0x15
   154b6:	4e 8b       	std	Y+22, r20	; 0x16
   154b8:	83 e5       	ldi	r24, 0x53	; 83
   154ba:	95 e2       	ldi	r25, 0x25	; 37
   154bc:	3c 01       	movw	r6, r24
   154be:	81 2c       	mov	r8, r1
   154c0:	81 e6       	ldi	r24, 0x61	; 97
   154c2:	95 e2       	ldi	r25, 0x25	; 37
   154c4:	5c 01       	movw	r10, r24
   154c6:	c1 2c       	mov	r12, r1
   154c8:	8d e7       	ldi	r24, 0x7D	; 125
   154ca:	95 e2       	ldi	r25, 0x25	; 37
   154cc:	1c 01       	movw	r2, r24
   154ce:	41 2c       	mov	r4, r1
   154d0:	2a 85       	ldd	r18, Y+10	; 0x0a
   154d2:	3b 85       	ldd	r19, Y+11	; 0x0b
   154d4:	87 01       	movw	r16, r14
   154d6:	e2 16       	cp	r14, r18
   154d8:	f3 06       	cpc	r15, r19
   154da:	0c f0       	brlt	.+2      	; 0x154de <SS80_Command_State+0x106>
   154dc:	b6 c1       	rjmp	.+876    	; 0x1584a <SS80_Command_State+0x472>
   154de:	0f 5f       	subi	r16, 0xFF	; 255
   154e0:	1f 4f       	sbci	r17, 0xFF	; 255
   154e2:	f7 01       	movw	r30, r14
   154e4:	e6 51       	subi	r30, 0x16	; 22
   154e6:	f3 4e       	sbci	r31, 0xE3	; 227
   154e8:	80 81       	ld	r24, Z
   154ea:	28 2f       	mov	r18, r24
   154ec:	30 e0       	ldi	r19, 0x00	; 0
   154ee:	a9 01       	movw	r20, r18
   154f0:	40 52       	subi	r20, 0x20	; 32
   154f2:	51 09       	sbc	r21, r1
   154f4:	40 31       	cpi	r20, 0x10	; 16
   154f6:	51 05       	cpc	r21, r1
   154f8:	98 f4       	brcc	.+38     	; 0x15520 <SS80_Command_State+0x148>
   154fa:	80 52       	subi	r24, 0x20	; 32
   154fc:	1d df       	rcall	.-454    	; 0x15338 <SS80_Check_Unit>
   154fe:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15502:	85 ff       	sbrs	r24, 5
   15504:	a0 c1       	rjmp	.+832    	; 0x15846 <SS80_Command_State+0x46e>
   15506:	e0 91 66 19 	lds	r30, 0x1966	; 0x801966 <SS80s>
   1550a:	f0 91 67 19 	lds	r31, 0x1967	; 0x801967 <SS80s+0x1>
   1550e:	85 81       	ldd	r24, Z+5	; 0x05
   15510:	90 e0       	ldi	r25, 0x00	; 0
   15512:	ed b7       	in	r30, 0x3d	; 61
   15514:	fe b7       	in	r31, 0x3e	; 62
   15516:	95 83       	std	Z+5, r25	; 0x05
   15518:	84 83       	std	Z+4, r24	; 0x04
   1551a:	84 ee       	ldi	r24, 0xE4	; 228
   1551c:	95 e2       	ldi	r25, 0x25	; 37
   1551e:	19 c0       	rjmp	.+50     	; 0x15552 <SS80_Command_State+0x17a>
   15520:	a9 01       	movw	r20, r18
   15522:	40 54       	subi	r20, 0x40	; 64
   15524:	51 09       	sbc	r21, r1
   15526:	40 31       	cpi	r20, 0x10	; 16
   15528:	51 05       	cpc	r21, r1
   1552a:	d0 f4       	brcc	.+52     	; 0x15560 <SS80_Command_State+0x188>
   1552c:	80 54       	subi	r24, 0x40	; 64
   1552e:	2d df       	rcall	.-422    	; 0x1538a <SS80_Check_Volume>
   15530:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15534:	85 ff       	sbrs	r24, 5
   15536:	87 c1       	rjmp	.+782    	; 0x15846 <SS80_Command_State+0x46e>
   15538:	e0 91 66 19 	lds	r30, 0x1966	; 0x801966 <SS80s>
   1553c:	f0 91 67 19 	lds	r31, 0x1967	; 0x801967 <SS80s+0x1>
   15540:	86 81       	ldd	r24, Z+6	; 0x06
   15542:	90 e0       	ldi	r25, 0x00	; 0
   15544:	ed b7       	in	r30, 0x3d	; 61
   15546:	fe b7       	in	r31, 0x3e	; 62
   15548:	95 83       	std	Z+5, r25	; 0x05
   1554a:	84 83       	std	Z+4, r24	; 0x04
   1554c:	2b ec       	ldi	r18, 0xCB	; 203
   1554e:	35 e2       	ldi	r19, 0x25	; 37
   15550:	c9 01       	movw	r24, r18
   15552:	a0 e0       	ldi	r26, 0x00	; 0
   15554:	81 83       	std	Z+1, r24	; 0x01
   15556:	92 83       	std	Z+2, r25	; 0x02
   15558:	a3 83       	std	Z+3, r26	; 0x03
   1555a:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
   1555e:	73 c1       	rjmp	.+742    	; 0x15846 <SS80_Command_State+0x46e>
   15560:	21 15       	cp	r18, r1
   15562:	31 05       	cpc	r19, r1
   15564:	79 f4       	brne	.+30     	; 0x15584 <SS80_Command_State+0x1ac>
   15566:	e0 91 66 19 	lds	r30, 0x1966	; 0x801966 <SS80s>
   1556a:	f0 91 67 19 	lds	r31, 0x1967	; 0x801967 <SS80s+0x1>
   1556e:	81 e0       	ldi	r24, 0x01	; 1
   15570:	90 e0       	ldi	r25, 0x00	; 0
   15572:	91 83       	std	Z+1, r25	; 0x01
   15574:	80 83       	st	Z, r24
   15576:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1557a:	85 ff       	sbrs	r24, 5
   1557c:	66 c1       	rjmp	.+716    	; 0x1584a <SS80_Command_State+0x472>
   1557e:	83 eb       	ldi	r24, 0xB3	; 179
   15580:	95 e2       	ldi	r25, 0x25	; 37
   15582:	0f c0       	rjmp	.+30     	; 0x155a2 <SS80_Command_State+0x1ca>
   15584:	22 30       	cpi	r18, 0x02	; 2
   15586:	31 05       	cpc	r19, r1
   15588:	a9 f4       	brne	.+42     	; 0x155b4 <SS80_Command_State+0x1dc>
   1558a:	e0 91 66 19 	lds	r30, 0x1966	; 0x801966 <SS80s>
   1558e:	f0 91 67 19 	lds	r31, 0x1967	; 0x801967 <SS80s+0x1>
   15592:	31 83       	std	Z+1, r19	; 0x01
   15594:	20 83       	st	Z, r18
   15596:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1559a:	85 ff       	sbrs	r24, 5
   1559c:	56 c1       	rjmp	.+684    	; 0x1584a <SS80_Command_State+0x472>
   1559e:	8a e9       	ldi	r24, 0x9A	; 154
   155a0:	95 e2       	ldi	r25, 0x25	; 37
   155a2:	a0 e0       	ldi	r26, 0x00	; 0
   155a4:	ed b7       	in	r30, 0x3d	; 61
   155a6:	fe b7       	in	r31, 0x3e	; 62
   155a8:	81 83       	std	Z+1, r24	; 0x01
   155aa:	92 83       	std	Z+2, r25	; 0x02
   155ac:	a3 83       	std	Z+3, r26	; 0x03
   155ae:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
   155b2:	4b c1       	rjmp	.+662    	; 0x1584a <SS80_Command_State+0x472>
   155b4:	20 31       	cpi	r18, 0x10	; 16
   155b6:	31 05       	cpc	r19, r1
   155b8:	b1 f5       	brne	.+108    	; 0x15626 <SS80_Command_State+0x24e>
   155ba:	20 91 66 19 	lds	r18, 0x1966	; 0x801966 <SS80s>
   155be:	30 91 67 19 	lds	r19, 0x1967	; 0x801967 <SS80s+0x1>
   155c2:	3d 87       	std	Y+13, r19	; 0x0d
   155c4:	2c 87       	std	Y+12, r18	; 0x0c
   155c6:	46 e0       	ldi	r20, 0x06	; 6
   155c8:	50 e0       	ldi	r21, 0x00	; 0
   155ca:	b8 01       	movw	r22, r16
   155cc:	8a ee       	ldi	r24, 0xEA	; 234
   155ce:	9c e1       	ldi	r25, 0x1C	; 28
   155d0:	0e 94 6e c1 	call	0x182dc	; 0x182dc <B2V_MSB>
   155d4:	ec 85       	ldd	r30, Y+12	; 0x0c
   155d6:	fd 85       	ldd	r31, Y+13	; 0x0d
   155d8:	67 83       	std	Z+7, r22	; 0x07
   155da:	70 87       	std	Z+8, r23	; 0x08
   155dc:	81 87       	std	Z+9, r24	; 0x09
   155de:	92 87       	std	Z+10, r25	; 0x0a
   155e0:	87 01       	movw	r16, r14
   155e2:	09 5f       	subi	r16, 0xF9	; 249
   155e4:	1f 4f       	sbci	r17, 0xFF	; 255
   155e6:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   155ea:	85 ff       	sbrs	r24, 5
   155ec:	2c c1       	rjmp	.+600    	; 0x15846 <SS80_Command_State+0x46e>
   155ee:	20 91 66 19 	lds	r18, 0x1966	; 0x801966 <SS80s>
   155f2:	30 91 67 19 	lds	r19, 0x1967	; 0x801967 <SS80s+0x1>
   155f6:	80 91 68 19 	lds	r24, 0x1968	; 0x801968 <SS80p>
   155fa:	90 91 69 19 	lds	r25, 0x1969	; 0x801969 <SS80p+0x1>
   155fe:	fc 01       	movw	r30, r24
   15600:	a2 89       	ldd	r26, Z+18	; 0x12
   15602:	b3 89       	ldd	r27, Z+19	; 0x13
   15604:	f9 01       	movw	r30, r18
   15606:	27 81       	ldd	r18, Z+7	; 0x07
   15608:	30 85       	ldd	r19, Z+8	; 0x08
   1560a:	41 85       	ldd	r20, Z+9	; 0x09
   1560c:	52 85       	ldd	r21, Z+10	; 0x0a
   1560e:	0e 94 84 e8 	call	0x1d108	; 0x1d108 <__muluhisi3>
   15612:	ed b7       	in	r30, 0x3d	; 61
   15614:	fe b7       	in	r31, 0x3e	; 62
   15616:	64 83       	std	Z+4, r22	; 0x04
   15618:	75 83       	std	Z+5, r23	; 0x05
   1561a:	86 83       	std	Z+6, r24	; 0x06
   1561c:	97 83       	std	Z+7, r25	; 0x07
   1561e:	21 82       	std	Z+1, r2	; 0x01
   15620:	32 82       	std	Z+2, r3	; 0x02
   15622:	43 82       	std	Z+3, r4	; 0x03
   15624:	2e c0       	rjmp	.+92     	; 0x15682 <SS80_Command_State+0x2aa>
   15626:	28 31       	cpi	r18, 0x18	; 24
   15628:	31 05       	cpc	r19, r1
   1562a:	71 f5       	brne	.+92     	; 0x15688 <SS80_Command_State+0x2b0>
   1562c:	20 91 66 19 	lds	r18, 0x1966	; 0x801966 <SS80s>
   15630:	30 91 67 19 	lds	r19, 0x1967	; 0x801967 <SS80s+0x1>
   15634:	3d 87       	std	Y+13, r19	; 0x0d
   15636:	2c 87       	std	Y+12, r18	; 0x0c
   15638:	44 e0       	ldi	r20, 0x04	; 4
   1563a:	50 e0       	ldi	r21, 0x00	; 0
   1563c:	b8 01       	movw	r22, r16
   1563e:	8a ee       	ldi	r24, 0xEA	; 234
   15640:	9c e1       	ldi	r25, 0x1C	; 28
   15642:	0e 94 6e c1 	call	0x182dc	; 0x182dc <B2V_MSB>
   15646:	ec 85       	ldd	r30, Y+12	; 0x0c
   15648:	fd 85       	ldd	r31, Y+13	; 0x0d
   1564a:	63 87       	std	Z+11, r22	; 0x0b
   1564c:	74 87       	std	Z+12, r23	; 0x0c
   1564e:	85 87       	std	Z+13, r24	; 0x0d
   15650:	96 87       	std	Z+14, r25	; 0x0e
   15652:	87 01       	movw	r16, r14
   15654:	0b 5f       	subi	r16, 0xFB	; 251
   15656:	1f 4f       	sbci	r17, 0xFF	; 255
   15658:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1565c:	85 ff       	sbrs	r24, 5
   1565e:	f3 c0       	rjmp	.+486    	; 0x15846 <SS80_Command_State+0x46e>
   15660:	e0 91 66 19 	lds	r30, 0x1966	; 0x801966 <SS80s>
   15664:	f0 91 67 19 	lds	r31, 0x1967	; 0x801967 <SS80s+0x1>
   15668:	83 85       	ldd	r24, Z+11	; 0x0b
   1566a:	94 85       	ldd	r25, Z+12	; 0x0c
   1566c:	a5 85       	ldd	r26, Z+13	; 0x0d
   1566e:	b6 85       	ldd	r27, Z+14	; 0x0e
   15670:	ed b7       	in	r30, 0x3d	; 61
   15672:	fe b7       	in	r31, 0x3e	; 62
   15674:	84 83       	std	Z+4, r24	; 0x04
   15676:	95 83       	std	Z+5, r25	; 0x05
   15678:	a6 83       	std	Z+6, r26	; 0x06
   1567a:	b7 83       	std	Z+7, r27	; 0x07
   1567c:	a1 82       	std	Z+1, r10	; 0x01
   1567e:	b2 82       	std	Z+2, r11	; 0x02
   15680:	c3 82       	std	Z+3, r12	; 0x03
   15682:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
   15686:	df c0       	rjmp	.+446    	; 0x15846 <SS80_Command_State+0x46e>
   15688:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1568c:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   15690:	24 33       	cpi	r18, 0x34	; 52
   15692:	31 05       	cpc	r19, r1
   15694:	41 f4       	brne	.+16     	; 0x156a6 <SS80_Command_State+0x2ce>
   15696:	85 ff       	sbrs	r24, 5
   15698:	d6 c0       	rjmp	.+428    	; 0x15846 <SS80_Command_State+0x46e>
   1569a:	ed b7       	in	r30, 0x3d	; 61
   1569c:	fe b7       	in	r31, 0x3e	; 62
   1569e:	61 82       	std	Z+1, r6	; 0x01
   156a0:	72 82       	std	Z+2, r7	; 0x02
   156a2:	83 82       	std	Z+3, r8	; 0x03
   156a4:	2b c0       	rjmp	.+86     	; 0x156fc <SS80_Command_State+0x324>
   156a6:	29 33       	cpi	r18, 0x39	; 57
   156a8:	31 05       	cpc	r19, r1
   156aa:	49 f4       	brne	.+18     	; 0x156be <SS80_Command_State+0x2e6>
   156ac:	87 01       	movw	r16, r14
   156ae:	0d 5f       	subi	r16, 0xFD	; 253
   156b0:	1f 4f       	sbci	r17, 0xFF	; 255
   156b2:	85 ff       	sbrs	r24, 5
   156b4:	c8 c0       	rjmp	.+400    	; 0x15846 <SS80_Command_State+0x46e>
   156b6:	2c 89       	ldd	r18, Y+20	; 0x14
   156b8:	3d 89       	ldd	r19, Y+21	; 0x15
   156ba:	4e 89       	ldd	r20, Y+22	; 0x16
   156bc:	1a c0       	rjmp	.+52     	; 0x156f2 <SS80_Command_State+0x31a>
   156be:	2b 33       	cpi	r18, 0x3B	; 59
   156c0:	31 05       	cpc	r19, r1
   156c2:	49 f4       	brne	.+18     	; 0x156d6 <SS80_Command_State+0x2fe>
   156c4:	87 01       	movw	r16, r14
   156c6:	0e 5f       	subi	r16, 0xFE	; 254
   156c8:	1f 4f       	sbci	r17, 0xFF	; 255
   156ca:	85 ff       	sbrs	r24, 5
   156cc:	bc c0       	rjmp	.+376    	; 0x15846 <SS80_Command_State+0x46e>
   156ce:	29 89       	ldd	r18, Y+17	; 0x11
   156d0:	3a 89       	ldd	r19, Y+18	; 0x12
   156d2:	4b 89       	ldd	r20, Y+19	; 0x13
   156d4:	0e c0       	rjmp	.+28     	; 0x156f2 <SS80_Command_State+0x31a>
   156d6:	28 34       	cpi	r18, 0x48	; 72
   156d8:	31 05       	cpc	r19, r1
   156da:	99 f4       	brne	.+38     	; 0x15702 <SS80_Command_State+0x32a>
   156dc:	87 01       	movw	r16, r14
   156de:	0e 5f       	subi	r16, 0xFE	; 254
   156e0:	1f 4f       	sbci	r17, 0xFF	; 255
   156e2:	80 73       	andi	r24, 0x30	; 48
   156e4:	99 27       	eor	r25, r25
   156e6:	89 2b       	or	r24, r25
   156e8:	09 f4       	brne	.+2      	; 0x156ec <SS80_Command_State+0x314>
   156ea:	ad c0       	rjmp	.+346    	; 0x15846 <SS80_Command_State+0x46e>
   156ec:	2e 85       	ldd	r18, Y+14	; 0x0e
   156ee:	3f 85       	ldd	r19, Y+15	; 0x0f
   156f0:	48 89       	ldd	r20, Y+16	; 0x10
   156f2:	ed b7       	in	r30, 0x3d	; 61
   156f4:	fe b7       	in	r31, 0x3e	; 62
   156f6:	21 83       	std	Z+1, r18	; 0x01
   156f8:	32 83       	std	Z+2, r19	; 0x02
   156fa:	43 83       	std	Z+3, r20	; 0x03
   156fc:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
   15700:	a2 c0       	rjmp	.+324    	; 0x15846 <SS80_Command_State+0x46e>
   15702:	24 30       	cpi	r18, 0x04	; 4
   15704:	31 05       	cpc	r19, r1
   15706:	41 f4       	brne	.+16     	; 0x15718 <SS80_Command_State+0x340>
   15708:	80 73       	andi	r24, 0x30	; 48
   1570a:	99 27       	eor	r25, r25
   1570c:	89 2b       	or	r24, r25
   1570e:	09 f4       	brne	.+2      	; 0x15712 <SS80_Command_State+0x33a>
   15710:	9c c0       	rjmp	.+312    	; 0x1584a <SS80_Command_State+0x472>
   15712:	8d ed       	ldi	r24, 0xDD	; 221
   15714:	94 e2       	ldi	r25, 0x24	; 36
   15716:	45 cf       	rjmp	.-374    	; 0x155a2 <SS80_Command_State+0x1ca>
   15718:	2e 30       	cpi	r18, 0x0E	; 14
   1571a:	31 05       	cpc	r19, r1
   1571c:	29 f4       	brne	.+10     	; 0x15728 <SS80_Command_State+0x350>
   1571e:	85 ff       	sbrs	r24, 5
   15720:	94 c0       	rjmp	.+296    	; 0x1584a <SS80_Command_State+0x472>
   15722:	87 ec       	ldi	r24, 0xC7	; 199
   15724:	94 e2       	ldi	r25, 0x24	; 36
   15726:	3d cf       	rjmp	.-390    	; 0x155a2 <SS80_Command_State+0x1ca>
   15728:	2f 30       	cpi	r18, 0x0F	; 15
   1572a:	31 05       	cpc	r19, r1
   1572c:	29 f4       	brne	.+10     	; 0x15738 <SS80_Command_State+0x360>
   1572e:	85 ff       	sbrs	r24, 5
   15730:	8c c0       	rjmp	.+280    	; 0x1584a <SS80_Command_State+0x472>
   15732:	8a ea       	ldi	r24, 0xAA	; 170
   15734:	94 e2       	ldi	r25, 0x24	; 36
   15736:	35 cf       	rjmp	.-406    	; 0x155a2 <SS80_Command_State+0x1ca>
   15738:	21 33       	cpi	r18, 0x31	; 49
   1573a:	31 05       	cpc	r19, r1
   1573c:	59 f4       	brne	.+22     	; 0x15754 <SS80_Command_State+0x37c>
   1573e:	87 01       	movw	r16, r14
   15740:	0d 5f       	subi	r16, 0xFD	; 253
   15742:	1f 4f       	sbci	r17, 0xFF	; 255
   15744:	80 73       	andi	r24, 0x30	; 48
   15746:	99 27       	eor	r25, r25
   15748:	89 2b       	or	r24, r25
   1574a:	09 f4       	brne	.+2      	; 0x1574e <SS80_Command_State+0x376>
   1574c:	7e c0       	rjmp	.+252    	; 0x1584a <SS80_Command_State+0x472>
   1574e:	8e e8       	ldi	r24, 0x8E	; 142
   15750:	94 e2       	ldi	r25, 0x24	; 36
   15752:	27 cf       	rjmp	.-434    	; 0x155a2 <SS80_Command_State+0x1ca>
   15754:	25 33       	cpi	r18, 0x35	; 53
   15756:	31 05       	cpc	r19, r1
   15758:	69 f4       	brne	.+26     	; 0x15774 <SS80_Command_State+0x39c>
   1575a:	e0 91 66 19 	lds	r30, 0x1966	; 0x801966 <SS80s>
   1575e:	f0 91 67 19 	lds	r31, 0x1967	; 0x801967 <SS80s+0x1>
   15762:	24 e0       	ldi	r18, 0x04	; 4
   15764:	30 e0       	ldi	r19, 0x00	; 0
   15766:	31 83       	std	Z+1, r19	; 0x01
   15768:	20 83       	st	Z, r18
   1576a:	85 ff       	sbrs	r24, 5
   1576c:	6e c0       	rjmp	.+220    	; 0x1584a <SS80_Command_State+0x472>
   1576e:	8d e7       	ldi	r24, 0x7D	; 125
   15770:	94 e2       	ldi	r25, 0x24	; 36
   15772:	17 cf       	rjmp	.-466    	; 0x155a2 <SS80_Command_State+0x1ca>
   15774:	27 33       	cpi	r18, 0x37	; 55
   15776:	31 05       	cpc	r19, r1
   15778:	59 f4       	brne	.+22     	; 0x15790 <SS80_Command_State+0x3b8>
   1577a:	87 01       	movw	r16, r14
   1577c:	0d 5f       	subi	r16, 0xFD	; 253
   1577e:	1f 4f       	sbci	r17, 0xFF	; 255
   15780:	80 73       	andi	r24, 0x30	; 48
   15782:	99 27       	eor	r25, r25
   15784:	89 2b       	or	r24, r25
   15786:	09 f4       	brne	.+2      	; 0x1578a <SS80_Command_State+0x3b2>
   15788:	60 c0       	rjmp	.+192    	; 0x1584a <SS80_Command_State+0x472>
   1578a:	8f e5       	ldi	r24, 0x5F	; 95
   1578c:	94 e2       	ldi	r25, 0x24	; 36
   1578e:	09 cf       	rjmp	.-494    	; 0x155a2 <SS80_Command_State+0x1ca>
   15790:	2e 33       	cpi	r18, 0x3E	; 62
   15792:	31 05       	cpc	r19, r1
   15794:	c1 f4       	brne	.+48     	; 0x157c6 <SS80_Command_State+0x3ee>
   15796:	80 73       	andi	r24, 0x30	; 48
   15798:	99 27       	eor	r25, r25
   1579a:	89 2b       	or	r24, r25
   1579c:	81 f0       	breq	.+32     	; 0x157be <SS80_Command_State+0x3e6>
   1579e:	80 e4       	ldi	r24, 0x40	; 64
   157a0:	94 e2       	ldi	r25, 0x24	; 36
   157a2:	a0 e0       	ldi	r26, 0x00	; 0
   157a4:	ed b7       	in	r30, 0x3d	; 61
   157a6:	fe b7       	in	r31, 0x3e	; 62
   157a8:	81 83       	std	Z+1, r24	; 0x01
   157aa:	92 83       	std	Z+2, r25	; 0x02
   157ac:	a3 83       	std	Z+3, r26	; 0x03
   157ae:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
   157b2:	62 e6       	ldi	r22, 0x62	; 98
   157b4:	70 e1       	ldi	r23, 0x10	; 16
   157b6:	c8 01       	movw	r24, r16
   157b8:	86 51       	subi	r24, 0x16	; 22
   157ba:	93 4e       	sbci	r25, 0xE3	; 227
   157bc:	69 dc       	rcall	.-1838   	; 0x15090 <SS80_display_extended_status>
   157be:	87 01       	movw	r16, r14
   157c0:	07 5f       	subi	r16, 0xF7	; 247
   157c2:	1f 4f       	sbci	r17, 0xFF	; 255
   157c4:	42 c0       	rjmp	.+132    	; 0x1584a <SS80_Command_State+0x472>
   157c6:	2c 34       	cpi	r18, 0x4C	; 76
   157c8:	31 05       	cpc	r19, r1
   157ca:	39 f4       	brne	.+14     	; 0x157da <SS80_Command_State+0x402>
   157cc:	80 73       	andi	r24, 0x30	; 48
   157ce:	99 27       	eor	r25, r25
   157d0:	89 2b       	or	r24, r25
   157d2:	d9 f1       	breq	.+118    	; 0x1584a <SS80_Command_State+0x472>
   157d4:	85 e2       	ldi	r24, 0x25	; 37
   157d6:	94 e2       	ldi	r25, 0x24	; 36
   157d8:	e4 ce       	rjmp	.-568    	; 0x155a2 <SS80_Command_State+0x1ca>
   157da:	2d 34       	cpi	r18, 0x4D	; 77
   157dc:	31 05       	cpc	r19, r1
   157de:	39 f4       	brne	.+14     	; 0x157ee <SS80_Command_State+0x416>
   157e0:	80 73       	andi	r24, 0x30	; 48
   157e2:	99 27       	eor	r25, r25
   157e4:	89 2b       	or	r24, r25
   157e6:	89 f1       	breq	.+98     	; 0x1584a <SS80_Command_State+0x472>
   157e8:	8c e0       	ldi	r24, 0x0C	; 12
   157ea:	94 e2       	ldi	r25, 0x24	; 36
   157ec:	da ce       	rjmp	.-588    	; 0x155a2 <SS80_Command_State+0x1ca>
   157ee:	2d 30       	cpi	r18, 0x0D	; 13
   157f0:	31 05       	cpc	r19, r1
   157f2:	69 f4       	brne	.+26     	; 0x1580e <SS80_Command_State+0x436>
   157f4:	e0 91 66 19 	lds	r30, 0x1966	; 0x801966 <SS80s>
   157f8:	f0 91 67 19 	lds	r31, 0x1967	; 0x801967 <SS80s+0x1>
   157fc:	23 e0       	ldi	r18, 0x03	; 3
   157fe:	30 e0       	ldi	r19, 0x00	; 0
   15800:	31 83       	std	Z+1, r19	; 0x01
   15802:	20 83       	st	Z, r18
   15804:	85 ff       	sbrs	r24, 5
   15806:	21 c0       	rjmp	.+66     	; 0x1584a <SS80_Command_State+0x472>
   15808:	85 ef       	ldi	r24, 0xF5	; 245
   1580a:	93 e2       	ldi	r25, 0x23	; 35
   1580c:	ca ce       	rjmp	.-620    	; 0x155a2 <SS80_Command_State+0x1ca>
   1580e:	23 33       	cpi	r18, 0x33	; 51
   15810:	31 05       	cpc	r19, r1
   15812:	51 f4       	brne	.+20     	; 0x15828 <SS80_Command_State+0x450>
   15814:	87 01       	movw	r16, r14
   15816:	0c 5f       	subi	r16, 0xFC	; 252
   15818:	1f 4f       	sbci	r17, 0xFF	; 255
   1581a:	80 73       	andi	r24, 0x30	; 48
   1581c:	99 27       	eor	r25, r25
   1581e:	89 2b       	or	r24, r25
   15820:	a1 f0       	breq	.+40     	; 0x1584a <SS80_Command_State+0x472>
   15822:	82 ed       	ldi	r24, 0xD2	; 210
   15824:	93 e2       	ldi	r25, 0x23	; 35
   15826:	bd ce       	rjmp	.-646    	; 0x155a2 <SS80_Command_State+0x1ca>
   15828:	80 ff       	sbrs	r24, 0
   1582a:	28 c0       	rjmp	.+80     	; 0x1587c <SS80_Command_State+0x4a4>
   1582c:	ed b7       	in	r30, 0x3d	; 61
   1582e:	fe b7       	in	r31, 0x3e	; 62
   15830:	35 83       	std	Z+5, r19	; 0x05
   15832:	24 83       	std	Z+4, r18	; 0x04
   15834:	82 eb       	ldi	r24, 0xB2	; 178
   15836:	93 e2       	ldi	r25, 0x23	; 35
   15838:	a0 e0       	ldi	r26, 0x00	; 0
   1583a:	81 83       	std	Z+1, r24	; 0x01
   1583c:	92 83       	std	Z+2, r25	; 0x02
   1583e:	a3 83       	std	Z+3, r26	; 0x03
   15840:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
   15844:	02 c0       	rjmp	.+4      	; 0x1584a <SS80_Command_State+0x472>
   15846:	78 01       	movw	r14, r16
   15848:	43 ce       	rjmp	.-890    	; 0x154d0 <SS80_Command_State+0xf8>
   1584a:	8a 85       	ldd	r24, Y+10	; 0x0a
   1584c:	9b 85       	ldd	r25, Y+11	; 0x0b
   1584e:	08 17       	cp	r16, r24
   15850:	19 07       	cpc	r17, r25
   15852:	a1 f0       	breq	.+40     	; 0x1587c <SS80_Command_State+0x4a4>
   15854:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15858:	80 ff       	sbrs	r24, 0
   1585a:	10 c0       	rjmp	.+32     	; 0x1587c <SS80_Command_State+0x4a4>
   1585c:	2a 85       	ldd	r18, Y+10	; 0x0a
   1585e:	3b 85       	ldd	r19, Y+11	; 0x0b
   15860:	ed b7       	in	r30, 0x3d	; 61
   15862:	fe b7       	in	r31, 0x3e	; 62
   15864:	37 83       	std	Z+7, r19	; 0x07
   15866:	26 83       	std	Z+6, r18	; 0x06
   15868:	15 83       	std	Z+5, r17	; 0x05
   1586a:	04 83       	std	Z+4, r16	; 0x04
   1586c:	8a e7       	ldi	r24, 0x7A	; 122
   1586e:	93 e2       	ldi	r25, 0x23	; 35
   15870:	a0 e0       	ldi	r26, 0x00	; 0
   15872:	81 83       	std	Z+1, r24	; 0x01
   15874:	92 83       	std	Z+2, r25	; 0x02
   15876:	a3 83       	std	Z+3, r26	; 0x03
   15878:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
   1587c:	e0 91 68 19 	lds	r30, 0x1968	; 0x801968 <SS80p>
   15880:	f0 91 69 19 	lds	r31, 0x1969	; 0x801969 <SS80p+0x1>
   15884:	81 81       	ldd	r24, Z+1	; 0x01
   15886:	90 e0       	ldi	r25, 0x00	; 0
   15888:	0e 94 56 87 	call	0x10eac	; 0x10eac <gpib_enable_PPR>
   1588c:	88 85       	ldd	r24, Y+8	; 0x08
   1588e:	99 85       	ldd	r25, Y+9	; 0x09
   15890:	88 27       	eor	r24, r24
   15892:	90 7d       	andi	r25, 0xD0	; 208
   15894:	02 c0       	rjmp	.+4      	; 0x1589a <SS80_Command_State+0x4c2>
   15896:	80 e0       	ldi	r24, 0x00	; 0
   15898:	90 e0       	ldi	r25, 0x00	; 0
   1589a:	66 96       	adiw	r28, 0x16	; 22
   1589c:	0f b6       	in	r0, 0x3f	; 63
   1589e:	f8 94       	cli
   158a0:	de bf       	out	0x3e, r29	; 62
   158a2:	0f be       	out	0x3f, r0	; 63
   158a4:	cd bf       	out	0x3d, r28	; 61
   158a6:	df 91       	pop	r29
   158a8:	cf 91       	pop	r28
   158aa:	1f 91       	pop	r17
   158ac:	0f 91       	pop	r16
   158ae:	ff 90       	pop	r15
   158b0:	ef 90       	pop	r14
   158b2:	cf 90       	pop	r12
   158b4:	bf 90       	pop	r11
   158b6:	af 90       	pop	r10
   158b8:	8f 90       	pop	r8
   158ba:	7f 90       	pop	r7
   158bc:	6f 90       	pop	r6
   158be:	4f 90       	pop	r4
   158c0:	3f 90       	pop	r3
   158c2:	2f 90       	pop	r2
   158c4:	08 95       	ret

000158c6 <SS80_cmd_seek>:
   158c6:	a7 e0       	ldi	r26, 0x07	; 7
   158c8:	b0 e0       	ldi	r27, 0x00	; 0
   158ca:	e9 e6       	ldi	r30, 0x69	; 105
   158cc:	fc ea       	ldi	r31, 0xAC	; 172
   158ce:	0c 94 a6 e8 	jmp	0x1d14c	; 0x1d14c <__prologue_saves__+0x4>
   158d2:	c0 91 66 19 	lds	r28, 0x1966	; 0x801966 <SS80s>
   158d6:	d0 91 67 19 	lds	r29, 0x1967	; 0x801967 <SS80s+0x1>
   158da:	8f 80       	ldd	r8, Y+7	; 0x07
   158dc:	98 84       	ldd	r9, Y+8	; 0x08
   158de:	a9 84       	ldd	r10, Y+9	; 0x09
   158e0:	ba 84       	ldd	r11, Y+10	; 0x0a
   158e2:	00 91 68 19 	lds	r16, 0x1968	; 0x801968 <SS80p>
   158e6:	10 91 69 19 	lds	r17, 0x1969	; 0x801969 <SS80p+0x1>
   158ea:	f8 01       	movw	r30, r16
   158ec:	c2 88       	ldd	r12, Z+18	; 0x12
   158ee:	d3 88       	ldd	r13, Z+19	; 0x13
   158f0:	e1 2c       	mov	r14, r1
   158f2:	f1 2c       	mov	r15, r1
   158f4:	6b 85       	ldd	r22, Y+11	; 0x0b
   158f6:	7c 85       	ldd	r23, Y+12	; 0x0c
   158f8:	8d 85       	ldd	r24, Y+13	; 0x0d
   158fa:	9e 85       	ldd	r25, Y+14	; 0x0e
   158fc:	a7 01       	movw	r20, r14
   158fe:	96 01       	movw	r18, r12
   15900:	0e 94 37 e8 	call	0x1d06e	; 0x1d06e <__udivmodsi4>
   15904:	da 01       	movw	r26, r20
   15906:	c9 01       	movw	r24, r18
   15908:	88 0d       	add	r24, r8
   1590a:	99 1d       	adc	r25, r9
   1590c:	aa 1d       	adc	r26, r10
   1590e:	bb 1d       	adc	r27, r11
   15910:	f8 01       	movw	r30, r16
   15912:	40 a4       	ldd	r4, Z+40	; 0x28
   15914:	51 a4       	ldd	r5, Z+41	; 0x29
   15916:	62 a4       	ldd	r6, Z+42	; 0x2a
   15918:	73 a4       	ldd	r7, Z+43	; 0x2b
   1591a:	40 91 b6 01 	lds	r20, 0x01B6	; 0x8001b6 <debuglevel>
   1591e:	50 91 b7 01 	lds	r21, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   15922:	48 16       	cp	r4, r24
   15924:	59 06       	cpc	r5, r25
   15926:	6a 06       	cpc	r6, r26
   15928:	7b 06       	cpc	r7, r27
   1592a:	f0 f4       	brcc	.+60     	; 0x15968 <SS80_cmd_seek+0xa2>
   1592c:	81 e0       	ldi	r24, 0x01	; 1
   1592e:	8a 83       	std	Y+2, r24	; 0x02
   15930:	8b 81       	ldd	r24, Y+3	; 0x03
   15932:	9c 81       	ldd	r25, Y+4	; 0x04
   15934:	84 60       	ori	r24, 0x04	; 4
   15936:	9c 83       	std	Y+4, r25	; 0x04
   15938:	8b 83       	std	Y+3, r24	; 0x03
   1593a:	40 ff       	sbrs	r20, 0
   1593c:	31 c0       	rjmp	.+98     	; 0x159a0 <SS80_cmd_seek+0xda>
   1593e:	a2 89       	ldd	r26, Z+18	; 0x12
   15940:	b3 89       	ldd	r27, Z+19	; 0x13
   15942:	a5 01       	movw	r20, r10
   15944:	94 01       	movw	r18, r8
   15946:	0e 94 84 e8 	call	0x1d108	; 0x1d108 <__muluhisi3>
   1594a:	ed b7       	in	r30, 0x3d	; 61
   1594c:	fe b7       	in	r31, 0x3e	; 62
   1594e:	64 83       	std	Z+4, r22	; 0x04
   15950:	75 83       	std	Z+5, r23	; 0x05
   15952:	86 83       	std	Z+6, r24	; 0x06
   15954:	97 83       	std	Z+7, r25	; 0x07
   15956:	87 e3       	ldi	r24, 0x37	; 55
   15958:	92 e2       	ldi	r25, 0x22	; 34
   1595a:	a0 e0       	ldi	r26, 0x00	; 0
   1595c:	81 83       	std	Z+1, r24	; 0x01
   1595e:	92 83       	std	Z+2, r25	; 0x02
   15960:	a3 83       	std	Z+3, r26	; 0x03
   15962:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
   15966:	1c c0       	rjmp	.+56     	; 0x159a0 <SS80_cmd_seek+0xda>
   15968:	ca 01       	movw	r24, r20
   1596a:	80 72       	andi	r24, 0x20	; 32
   1596c:	99 27       	eor	r25, r25
   1596e:	45 ff       	sbrs	r20, 5
   15970:	19 c0       	rjmp	.+50     	; 0x159a4 <SS80_cmd_seek+0xde>
   15972:	a5 01       	movw	r20, r10
   15974:	94 01       	movw	r18, r8
   15976:	c7 01       	movw	r24, r14
   15978:	b6 01       	movw	r22, r12
   1597a:	0e 94 f5 e7 	call	0x1cfea	; 0x1cfea <__mulsi3>
   1597e:	ed b7       	in	r30, 0x3d	; 61
   15980:	fe b7       	in	r31, 0x3e	; 62
   15982:	64 83       	std	Z+4, r22	; 0x04
   15984:	75 83       	std	Z+5, r23	; 0x05
   15986:	86 83       	std	Z+6, r24	; 0x06
   15988:	97 83       	std	Z+7, r25	; 0x07
   1598a:	83 e2       	ldi	r24, 0x23	; 35
   1598c:	92 e2       	ldi	r25, 0x22	; 34
   1598e:	a0 e0       	ldi	r26, 0x00	; 0
   15990:	81 83       	std	Z+1, r24	; 0x01
   15992:	92 83       	std	Z+2, r25	; 0x02
   15994:	a3 83       	std	Z+3, r26	; 0x03
   15996:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
   1599a:	80 e0       	ldi	r24, 0x00	; 0
   1599c:	90 e0       	ldi	r25, 0x00	; 0
   1599e:	02 c0       	rjmp	.+4      	; 0x159a4 <SS80_cmd_seek+0xde>
   159a0:	81 e0       	ldi	r24, 0x01	; 1
   159a2:	90 e0       	ldi	r25, 0x00	; 0
   159a4:	cd b7       	in	r28, 0x3d	; 61
   159a6:	de b7       	in	r29, 0x3e	; 62
   159a8:	27 96       	adiw	r28, 0x07	; 7
   159aa:	e0 e1       	ldi	r30, 0x10	; 16
   159ac:	0c 94 c2 e8 	jmp	0x1d184	; 0x1d184 <__epilogue_restores__+0x4>

000159b0 <SS80_locate_and_write>:
   159b0:	a3 e1       	ldi	r26, 0x13	; 19
   159b2:	b0 e0       	ldi	r27, 0x00	; 0
   159b4:	ee ed       	ldi	r30, 0xDE	; 222
   159b6:	fc ea       	ldi	r31, 0xAC	; 172
   159b8:	0c 94 a4 e8 	jmp	0x1d148	; 0x1d148 <__prologue_saves__>
   159bc:	00 91 66 19 	lds	r16, 0x1966	; 0x801966 <SS80s>
   159c0:	10 91 67 19 	lds	r17, 0x1967	; 0x801967 <SS80s+0x1>
   159c4:	80 91 68 19 	lds	r24, 0x1968	; 0x801968 <SS80p>
   159c8:	90 91 69 19 	lds	r25, 0x1969	; 0x801969 <SS80p+0x1>
   159cc:	fc 01       	movw	r30, r24
   159ce:	a2 89       	ldd	r26, Z+18	; 0x12
   159d0:	b3 89       	ldd	r27, Z+19	; 0x13
   159d2:	f8 01       	movw	r30, r16
   159d4:	27 81       	ldd	r18, Z+7	; 0x07
   159d6:	30 85       	ldd	r19, Z+8	; 0x08
   159d8:	41 85       	ldd	r20, Z+9	; 0x09
   159da:	52 85       	ldd	r21, Z+10	; 0x0a
   159dc:	0e 94 84 e8 	call	0x1d108	; 0x1d108 <__muluhisi3>
   159e0:	4b 01       	movw	r8, r22
   159e2:	5c 01       	movw	r10, r24
   159e4:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   159e8:	85 ff       	sbrs	r24, 5
   159ea:	16 c0       	rjmp	.+44     	; 0x15a18 <SS80_locate_and_write+0x68>
   159ec:	83 85       	ldd	r24, Z+11	; 0x0b
   159ee:	94 85       	ldd	r25, Z+12	; 0x0c
   159f0:	a5 85       	ldd	r26, Z+13	; 0x0d
   159f2:	b6 85       	ldd	r27, Z+14	; 0x0e
   159f4:	ed b7       	in	r30, 0x3d	; 61
   159f6:	fe b7       	in	r31, 0x3e	; 62
   159f8:	80 87       	std	Z+8, r24	; 0x08
   159fa:	91 87       	std	Z+9, r25	; 0x09
   159fc:	a2 87       	std	Z+10, r26	; 0x0a
   159fe:	b3 87       	std	Z+11, r27	; 0x0b
   15a00:	84 82       	std	Z+4, r8	; 0x04
   15a02:	95 82       	std	Z+5, r9	; 0x05
   15a04:	a6 82       	std	Z+6, r10	; 0x06
   15a06:	b7 82       	std	Z+7, r11	; 0x07
   15a08:	8a eb       	ldi	r24, 0xBA	; 186
   15a0a:	97 e2       	ldi	r25, 0x27	; 39
   15a0c:	a0 e0       	ldi	r26, 0x00	; 0
   15a0e:	81 83       	std	Z+1, r24	; 0x01
   15a10:	92 83       	std	Z+2, r25	; 0x02
   15a12:	a3 83       	std	Z+3, r26	; 0x03
   15a14:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
   15a18:	e0 91 66 19 	lds	r30, 0x1966	; 0x801966 <SS80s>
   15a1c:	f0 91 67 19 	lds	r31, 0x1967	; 0x801967 <SS80s+0x1>
   15a20:	12 82       	std	Z+2, r1	; 0x02
   15a22:	54 98       	cbi	0x0a, 4	; 10
   15a24:	4c 99       	sbic	0x09, 4	; 9
   15a26:	03 c0       	rjmp	.+6      	; 0x15a2e <SS80_locate_and_write+0x7e>
   15a28:	80 e0       	ldi	r24, 0x00	; 0
   15a2a:	90 e1       	ldi	r25, 0x10	; 16
   15a2c:	4f c1       	rjmp	.+670    	; 0x15ccc <SS80_locate_and_write+0x31c>
   15a2e:	4b df       	rcall	.-362    	; 0x158c6 <SS80_cmd_seek>
   15a30:	e0 91 66 19 	lds	r30, 0x1966	; 0x801966 <SS80s>
   15a34:	f0 91 67 19 	lds	r31, 0x1967	; 0x801967 <SS80s+0x1>
   15a38:	89 2b       	or	r24, r25
   15a3a:	41 f0       	breq	.+16     	; 0x15a4c <SS80_locate_and_write+0x9c>
   15a3c:	83 81       	ldd	r24, Z+3	; 0x03
   15a3e:	94 81       	ldd	r25, Z+4	; 0x04
   15a40:	82 60       	ori	r24, 0x02	; 2
   15a42:	94 83       	std	Z+4, r25	; 0x04
   15a44:	83 83       	std	Z+3, r24	; 0x03
   15a46:	01 e0       	ldi	r16, 0x01	; 1
   15a48:	10 e0       	ldi	r17, 0x00	; 0
   15a4a:	02 c0       	rjmp	.+4      	; 0x15a50 <SS80_locate_and_write+0xa0>
   15a4c:	00 e0       	ldi	r16, 0x00	; 0
   15a4e:	10 e0       	ldi	r17, 0x00	; 0
   15a50:	23 84       	ldd	r2, Z+11	; 0x0b
   15a52:	34 84       	ldd	r3, Z+12	; 0x0c
   15a54:	1d 86       	std	Y+13, r1	; 0x0d
   15a56:	1c 86       	std	Y+12, r1	; 0x0c
   15a58:	41 2c       	mov	r4, r1
   15a5a:	51 2c       	mov	r5, r1
   15a5c:	32 01       	movw	r6, r4
   15a5e:	8d e6       	ldi	r24, 0x6D	; 109
   15a60:	97 e2       	ldi	r25, 0x27	; 39
   15a62:	9c 01       	movw	r18, r24
   15a64:	40 e0       	ldi	r20, 0x00	; 0
   15a66:	2e 87       	std	Y+14, r18	; 0x0e
   15a68:	3f 87       	std	Y+15, r19	; 0x0f
   15a6a:	48 8b       	std	Y+16, r20	; 0x10
   15a6c:	83 e9       	ldi	r24, 0x93	; 147
   15a6e:	97 e2       	ldi	r25, 0x27	; 39
   15a70:	9c 01       	movw	r18, r24
   15a72:	40 e0       	ldi	r20, 0x00	; 0
   15a74:	29 8b       	std	Y+17, r18	; 0x11
   15a76:	3a 8b       	std	Y+18, r19	; 0x12
   15a78:	4b 8b       	std	Y+19, r20	; 0x13
   15a7a:	12 14       	cp	r1, r2
   15a7c:	13 04       	cpc	r1, r3
   15a7e:	0c f0       	brlt	.+2      	; 0x15a82 <SS80_locate_and_write+0xd2>
   15a80:	f5 c0       	rjmp	.+490    	; 0x15c6c <SS80_locate_and_write+0x2bc>
   15a82:	54 98       	cbi	0x0a, 4	; 10
   15a84:	4c 9b       	sbis	0x09, 4	; 9
   15a86:	d0 cf       	rjmp	.-96     	; 0x15a28 <SS80_locate_and_write+0x78>
   15a88:	71 01       	movw	r14, r2
   15a8a:	31 e0       	ldi	r19, 0x01	; 1
   15a8c:	23 16       	cp	r2, r19
   15a8e:	33 06       	cpc	r3, r19
   15a90:	1c f0       	brlt	.+6      	; 0x15a98 <SS80_locate_and_write+0xe8>
   15a92:	e1 2c       	mov	r14, r1
   15a94:	ff 24       	eor	r15, r15
   15a96:	f3 94       	inc	r15
   15a98:	ea ee       	ldi	r30, 0xEA	; 234
   15a9a:	fc e1       	ldi	r31, 0x1C	; 28
   15a9c:	20 e0       	ldi	r18, 0x00	; 0
   15a9e:	32 e0       	ldi	r19, 0x02	; 2
   15aa0:	11 92       	st	Z+, r1
   15aa2:	21 50       	subi	r18, 0x01	; 1
   15aa4:	30 40       	sbci	r19, 0x00	; 0
   15aa6:	e1 f7       	brne	.-8      	; 0x15aa0 <SS80_locate_and_write+0xf0>
   15aa8:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15aac:	87 fd       	sbrc	r24, 7
   15aae:	0e 94 7c 86 	call	0x10cf8	; 0x10cf8 <gpib_timer_elapsed_begin>
   15ab2:	ae 01       	movw	r20, r28
   15ab4:	44 5f       	subi	r20, 0xF4	; 244
   15ab6:	5f 4f       	sbci	r21, 0xFF	; 255
   15ab8:	b7 01       	movw	r22, r14
   15aba:	8a ee       	ldi	r24, 0xEA	; 234
   15abc:	9c e1       	ldi	r25, 0x1C	; 28
   15abe:	0e 94 e4 8b 	call	0x117c8	; 0x117c8 <gpib_read_str>
   15ac2:	6c 01       	movw	r12, r24
   15ac4:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15ac8:	87 ff       	sbrs	r24, 7
   15aca:	04 c0       	rjmp	.+8      	; 0x15ad4 <SS80_locate_and_write+0x124>
   15acc:	8e e7       	ldi	r24, 0x7E	; 126
   15ace:	90 e1       	ldi	r25, 0x10	; 16
   15ad0:	0e 94 8e 86 	call	0x10d1c	; 0x10d1c <gpib_timer_elapsed_end>
   15ad4:	ce 14       	cp	r12, r14
   15ad6:	df 04       	cpc	r13, r15
   15ad8:	39 f1       	breq	.+78     	; 0x15b28 <SS80_locate_and_write+0x178>
   15ada:	8c 85       	ldd	r24, Y+12	; 0x0c
   15adc:	9d 85       	ldd	r25, Y+13	; 0x0d
   15ade:	9c 01       	movw	r18, r24
   15ae0:	22 27       	eor	r18, r18
   15ae2:	30 7d       	andi	r19, 0xD0	; 208
   15ae4:	23 2b       	or	r18, r19
   15ae6:	d1 f0       	breq	.+52     	; 0x15b1c <SS80_locate_and_write+0x16c>
   15ae8:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15aec:	80 ff       	sbrs	r24, 0
   15aee:	0a c0       	rjmp	.+20     	; 0x15b04 <SS80_locate_and_write+0x154>
   15af0:	87 ea       	ldi	r24, 0xA7	; 167
   15af2:	97 e2       	ldi	r25, 0x27	; 39
   15af4:	a0 e0       	ldi	r26, 0x00	; 0
   15af6:	ed b7       	in	r30, 0x3d	; 61
   15af8:	fe b7       	in	r31, 0x3e	; 62
   15afa:	81 83       	std	Z+1, r24	; 0x01
   15afc:	92 83       	std	Z+2, r25	; 0x02
   15afe:	a3 83       	std	Z+3, r26	; 0x03
   15b00:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
   15b04:	e0 91 66 19 	lds	r30, 0x1966	; 0x801966 <SS80s>
   15b08:	f0 91 67 19 	lds	r31, 0x1967	; 0x801967 <SS80s+0x1>
   15b0c:	83 81       	ldd	r24, Z+3	; 0x03
   15b0e:	94 81       	ldd	r25, Z+4	; 0x04
   15b10:	82 60       	ori	r24, 0x02	; 2
   15b12:	94 83       	std	Z+4, r25	; 0x04
   15b14:	83 83       	std	Z+3, r24	; 0x03
   15b16:	81 e0       	ldi	r24, 0x01	; 1
   15b18:	82 83       	std	Z+2, r24	; 0x02
   15b1a:	99 c0       	rjmp	.+306    	; 0x15c4e <SS80_locate_and_write+0x29e>
   15b1c:	c1 14       	cp	r12, r1
   15b1e:	d1 04       	cpc	r13, r1
   15b20:	09 f0       	breq	.+2      	; 0x15b24 <SS80_locate_and_write+0x174>
   15b22:	d0 c0       	rjmp	.+416    	; 0x15cc4 <SS80_locate_and_write+0x314>
   15b24:	90 fd       	sbrc	r25, 0
   15b26:	93 c0       	rjmp	.+294    	; 0x15c4e <SS80_locate_and_write+0x29e>
   15b28:	01 15       	cp	r16, r1
   15b2a:	11 05       	cpc	r17, r1
   15b2c:	09 f0       	breq	.+2      	; 0x15b30 <SS80_locate_and_write+0x180>
   15b2e:	84 c0       	rjmp	.+264    	; 0x15c38 <SS80_locate_and_write+0x288>
   15b30:	c1 14       	cp	r12, r1
   15b32:	d1 04       	cpc	r13, r1
   15b34:	09 f4       	brne	.+2      	; 0x15b38 <SS80_locate_and_write+0x188>
   15b36:	82 c0       	rjmp	.+260    	; 0x15c3c <SS80_locate_and_write+0x28c>
   15b38:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15b3c:	86 fd       	sbrc	r24, 6
   15b3e:	0e 94 7c 86 	call	0x10cf8	; 0x10cf8 <gpib_timer_elapsed_begin>
   15b42:	e0 90 66 19 	lds	r14, 0x1966	; 0x801966 <SS80s>
   15b46:	f0 90 67 19 	lds	r15, 0x1967	; 0x801967 <SS80s+0x1>
   15b4a:	f3 e0       	ldi	r31, 0x03	; 3
   15b4c:	ef 0e       	add	r14, r31
   15b4e:	f1 1c       	adc	r15, r1
   15b50:	e0 91 68 19 	lds	r30, 0x1968	; 0x801968 <SS80p>
   15b54:	f0 91 69 19 	lds	r31, 0x1969	; 0x801969 <SS80p+0x1>
   15b58:	86 01       	movw	r16, r12
   15b5a:	2a ee       	ldi	r18, 0xEA	; 234
   15b5c:	3c e1       	ldi	r19, 0x1C	; 28
   15b5e:	b5 01       	movw	r22, r10
   15b60:	a4 01       	movw	r20, r8
   15b62:	82 81       	ldd	r24, Z+2	; 0x02
   15b64:	93 81       	ldd	r25, Z+3	; 0x03
   15b66:	0e 94 25 86 	call	0x10c4a	; 0x10c4a <dbf_open_write>
   15b6a:	7c 01       	movw	r14, r24
   15b6c:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15b70:	86 ff       	sbrs	r24, 6
   15b72:	04 c0       	rjmp	.+8      	; 0x15b7c <SS80_locate_and_write+0x1cc>
   15b74:	89 e8       	ldi	r24, 0x89	; 137
   15b76:	90 e1       	ldi	r25, 0x10	; 16
   15b78:	0e 94 8e 86 	call	0x10d1c	; 0x10d1c <gpib_timer_elapsed_end>
   15b7c:	ce 14       	cp	r12, r14
   15b7e:	df 04       	cpc	r13, r15
   15b80:	39 f1       	breq	.+78     	; 0x15bd0 <SS80_locate_and_write+0x220>
   15b82:	e0 91 66 19 	lds	r30, 0x1966	; 0x801966 <SS80s>
   15b86:	f0 91 67 19 	lds	r31, 0x1967	; 0x801967 <SS80s+0x1>
   15b8a:	83 81       	ldd	r24, Z+3	; 0x03
   15b8c:	94 81       	ldd	r25, Z+4	; 0x04
   15b8e:	82 60       	ori	r24, 0x02	; 2
   15b90:	94 83       	std	Z+4, r25	; 0x04
   15b92:	83 83       	std	Z+3, r24	; 0x03
   15b94:	0e 94 ec 70 	call	0xe1d8	; 0xe1d8 <mmc_wp_status>
   15b98:	e0 91 66 19 	lds	r30, 0x1966	; 0x801966 <SS80s>
   15b9c:	f0 91 67 19 	lds	r31, 0x1967	; 0x801967 <SS80s+0x1>
   15ba0:	89 2b       	or	r24, r25
   15ba2:	29 f0       	breq	.+10     	; 0x15bae <SS80_locate_and_write+0x1fe>
   15ba4:	83 81       	ldd	r24, Z+3	; 0x03
   15ba6:	94 81       	ldd	r25, Z+4	; 0x04
   15ba8:	88 60       	ori	r24, 0x08	; 8
   15baa:	94 83       	std	Z+4, r25	; 0x04
   15bac:	83 83       	std	Z+3, r24	; 0x03
   15bae:	21 e0       	ldi	r18, 0x01	; 1
   15bb0:	22 83       	std	Z+2, r18	; 0x02
   15bb2:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15bb6:	80 ff       	sbrs	r24, 0
   15bb8:	27 c0       	rjmp	.+78     	; 0x15c08 <SS80_locate_and_write+0x258>
   15bba:	89 89       	ldd	r24, Y+17	; 0x11
   15bbc:	9a 89       	ldd	r25, Y+18	; 0x12
   15bbe:	ab 89       	ldd	r26, Y+19	; 0x13
   15bc0:	ed b7       	in	r30, 0x3d	; 61
   15bc2:	fe b7       	in	r31, 0x3e	; 62
   15bc4:	81 83       	std	Z+1, r24	; 0x01
   15bc6:	92 83       	std	Z+2, r25	; 0x02
   15bc8:	a3 83       	std	Z+3, r26	; 0x03
   15bca:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
   15bce:	1c c0       	rjmp	.+56     	; 0x15c08 <SS80_locate_and_write+0x258>
   15bd0:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15bd4:	85 ff       	sbrs	r24, 5
   15bd6:	0c c0       	rjmp	.+24     	; 0x15bf0 <SS80_locate_and_write+0x240>
   15bd8:	ed b7       	in	r30, 0x3d	; 61
   15bda:	fe b7       	in	r31, 0x3e	; 62
   15bdc:	d5 82       	std	Z+5, r13	; 0x05
   15bde:	c4 82       	std	Z+4, r12	; 0x04
   15be0:	2e 85       	ldd	r18, Y+14	; 0x0e
   15be2:	3f 85       	ldd	r19, Y+15	; 0x0f
   15be4:	48 89       	ldd	r20, Y+16	; 0x10
   15be6:	21 83       	std	Z+1, r18	; 0x01
   15be8:	32 83       	std	Z+2, r19	; 0x02
   15bea:	43 83       	std	Z+3, r20	; 0x03
   15bec:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
   15bf0:	c6 01       	movw	r24, r12
   15bf2:	0d 2c       	mov	r0, r13
   15bf4:	00 0c       	add	r0, r0
   15bf6:	aa 0b       	sbc	r26, r26
   15bf8:	bb 0b       	sbc	r27, r27
   15bfa:	88 0e       	add	r8, r24
   15bfc:	99 1e       	adc	r9, r25
   15bfe:	aa 1e       	adc	r10, r26
   15c00:	bb 1e       	adc	r11, r27
   15c02:	00 e0       	ldi	r16, 0x00	; 0
   15c04:	10 e0       	ldi	r17, 0x00	; 0
   15c06:	05 c0       	rjmp	.+10     	; 0x15c12 <SS80_locate_and_write+0x262>
   15c08:	ec 14       	cp	r14, r12
   15c0a:	fd 04       	cpc	r15, r13
   15c0c:	64 f0       	brlt	.+24     	; 0x15c26 <SS80_locate_and_write+0x276>
   15c0e:	01 e0       	ldi	r16, 0x01	; 1
   15c10:	10 e0       	ldi	r17, 0x00	; 0
   15c12:	c7 01       	movw	r24, r14
   15c14:	0f 2c       	mov	r0, r15
   15c16:	00 0c       	add	r0, r0
   15c18:	aa 0b       	sbc	r26, r26
   15c1a:	bb 0b       	sbc	r27, r27
   15c1c:	48 0e       	add	r4, r24
   15c1e:	59 1e       	adc	r5, r25
   15c20:	6a 1e       	adc	r6, r26
   15c22:	7b 1e       	adc	r7, r27
   15c24:	0b c0       	rjmp	.+22     	; 0x15c3c <SS80_locate_and_write+0x28c>
   15c26:	c6 01       	movw	r24, r12
   15c28:	0d 2c       	mov	r0, r13
   15c2a:	00 0c       	add	r0, r0
   15c2c:	aa 0b       	sbc	r26, r26
   15c2e:	bb 0b       	sbc	r27, r27
   15c30:	48 0e       	add	r4, r24
   15c32:	59 1e       	adc	r5, r25
   15c34:	6a 1e       	adc	r6, r26
   15c36:	7b 1e       	adc	r7, r27
   15c38:	01 e0       	ldi	r16, 0x01	; 1
   15c3a:	10 e0       	ldi	r17, 0x00	; 0
   15c3c:	2c 18       	sub	r2, r12
   15c3e:	3d 08       	sbc	r3, r13
   15c40:	8c 85       	ldd	r24, Y+12	; 0x0c
   15c42:	9d 85       	ldd	r25, Y+13	; 0x0d
   15c44:	90 ff       	sbrs	r25, 0
   15c46:	19 cf       	rjmp	.-462    	; 0x15a7a <SS80_locate_and_write+0xca>
   15c48:	12 14       	cp	r1, r2
   15c4a:	13 04       	cpc	r1, r3
   15c4c:	7c f4       	brge	.+30     	; 0x15c6c <SS80_locate_and_write+0x2bc>
   15c4e:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15c52:	80 ff       	sbrs	r24, 0
   15c54:	1d c0       	rjmp	.+58     	; 0x15c90 <SS80_locate_and_write+0x2e0>
   15c56:	85 e4       	ldi	r24, 0x45	; 69
   15c58:	97 e2       	ldi	r25, 0x27	; 39
   15c5a:	a0 e0       	ldi	r26, 0x00	; 0
   15c5c:	ed b7       	in	r30, 0x3d	; 61
   15c5e:	fe b7       	in	r31, 0x3e	; 62
   15c60:	81 83       	std	Z+1, r24	; 0x01
   15c62:	92 83       	std	Z+2, r25	; 0x02
   15c64:	a3 83       	std	Z+3, r26	; 0x03
   15c66:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
   15c6a:	12 c0       	rjmp	.+36     	; 0x15c90 <SS80_locate_and_write+0x2e0>
   15c6c:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15c70:	85 ff       	sbrs	r24, 5
   15c72:	0e c0       	rjmp	.+28     	; 0x15c90 <SS80_locate_and_write+0x2e0>
   15c74:	ed b7       	in	r30, 0x3d	; 61
   15c76:	fe b7       	in	r31, 0x3e	; 62
   15c78:	44 82       	std	Z+4, r4	; 0x04
   15c7a:	55 82       	std	Z+5, r5	; 0x05
   15c7c:	66 82       	std	Z+6, r6	; 0x06
   15c7e:	77 82       	std	Z+7, r7	; 0x07
   15c80:	8a e1       	ldi	r24, 0x1A	; 26
   15c82:	97 e2       	ldi	r25, 0x27	; 39
   15c84:	a0 e0       	ldi	r26, 0x00	; 0
   15c86:	81 83       	std	Z+1, r24	; 0x01
   15c88:	92 83       	std	Z+2, r25	; 0x02
   15c8a:	a3 83       	std	Z+3, r26	; 0x03
   15c8c:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
   15c90:	00 91 66 19 	lds	r16, 0x1966	; 0x801966 <SS80s>
   15c94:	10 91 67 19 	lds	r17, 0x1967	; 0x801967 <SS80s+0x1>
   15c98:	e0 91 68 19 	lds	r30, 0x1968	; 0x801968 <SS80p>
   15c9c:	f0 91 69 19 	lds	r31, 0x1969	; 0x801969 <SS80p+0x1>
   15ca0:	22 89       	ldd	r18, Z+18	; 0x12
   15ca2:	33 89       	ldd	r19, Z+19	; 0x13
   15ca4:	40 e0       	ldi	r20, 0x00	; 0
   15ca6:	50 e0       	ldi	r21, 0x00	; 0
   15ca8:	c5 01       	movw	r24, r10
   15caa:	b4 01       	movw	r22, r8
   15cac:	0e 94 37 e8 	call	0x1d06e	; 0x1d06e <__udivmodsi4>
   15cb0:	f8 01       	movw	r30, r16
   15cb2:	27 83       	std	Z+7, r18	; 0x07
   15cb4:	30 87       	std	Z+8, r19	; 0x08
   15cb6:	41 87       	std	Z+9, r20	; 0x09
   15cb8:	52 87       	std	Z+10, r21	; 0x0a
   15cba:	8c 85       	ldd	r24, Y+12	; 0x0c
   15cbc:	9d 85       	ldd	r25, Y+13	; 0x0d
   15cbe:	88 27       	eor	r24, r24
   15cc0:	90 7d       	andi	r25, 0xD0	; 208
   15cc2:	04 c0       	rjmp	.+8      	; 0x15ccc <SS80_locate_and_write+0x31c>
   15cc4:	01 2b       	or	r16, r17
   15cc6:	09 f4       	brne	.+2      	; 0x15cca <SS80_locate_and_write+0x31a>
   15cc8:	37 cf       	rjmp	.-402    	; 0x15b38 <SS80_locate_and_write+0x188>
   15cca:	b6 cf       	rjmp	.-148    	; 0x15c38 <SS80_locate_and_write+0x288>
   15ccc:	63 96       	adiw	r28, 0x13	; 19
   15cce:	e2 e1       	ldi	r30, 0x12	; 18
   15cd0:	0c 94 c0 e8 	jmp	0x1d180	; 0x1d180 <__epilogue_restores__>

00015cd4 <SS80_Report>:
   15cd4:	a8 e0       	ldi	r26, 0x08	; 8
   15cd6:	b0 e0       	ldi	r27, 0x00	; 0
   15cd8:	e0 e7       	ldi	r30, 0x70	; 112
   15cda:	fe ea       	ldi	r31, 0xAE	; 174
   15cdc:	0c 94 b4 e8 	jmp	0x1d168	; 0x1d168 <__prologue_saves__+0x20>
   15ce0:	e0 91 66 19 	lds	r30, 0x1966	; 0x801966 <SS80s>
   15ce4:	f0 91 67 19 	lds	r31, 0x1967	; 0x801967 <SS80s+0x1>
   15ce8:	82 81       	ldd	r24, Z+2	; 0x02
   15cea:	88 87       	std	Y+8, r24	; 0x08
   15cec:	80 e0       	ldi	r24, 0x00	; 0
   15cee:	91 e0       	ldi	r25, 0x01	; 1
   15cf0:	9f 83       	std	Y+7, r25	; 0x07
   15cf2:	8e 83       	std	Y+6, r24	; 0x06
   15cf4:	ae 01       	movw	r20, r28
   15cf6:	4a 5f       	subi	r20, 0xFA	; 250
   15cf8:	5f 4f       	sbci	r21, 0xFF	; 255
   15cfa:	61 e0       	ldi	r22, 0x01	; 1
   15cfc:	70 e0       	ldi	r23, 0x00	; 0
   15cfe:	ce 01       	movw	r24, r28
   15d00:	08 96       	adiw	r24, 0x08	; 8
   15d02:	0e 94 86 8c 	call	0x1190c	; 0x1190c <gpib_write_str>
   15d06:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   15d0a:	01 97       	sbiw	r24, 0x01	; 1
   15d0c:	89 f0       	breq	.+34     	; 0x15d30 <SS80_Report+0x5c>
   15d0e:	20 ff       	sbrs	r18, 0
   15d10:	0a c0       	rjmp	.+20     	; 0x15d26 <SS80_Report+0x52>
   15d12:	89 e0       	ldi	r24, 0x09	; 9
   15d14:	92 e2       	ldi	r25, 0x22	; 34
   15d16:	a0 e0       	ldi	r26, 0x00	; 0
   15d18:	ed b7       	in	r30, 0x3d	; 61
   15d1a:	fe b7       	in	r31, 0x3e	; 62
   15d1c:	81 83       	std	Z+1, r24	; 0x01
   15d1e:	92 83       	std	Z+2, r25	; 0x02
   15d20:	a3 83       	std	Z+3, r26	; 0x03
   15d22:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
   15d26:	8e 81       	ldd	r24, Y+6	; 0x06
   15d28:	9f 81       	ldd	r25, Y+7	; 0x07
   15d2a:	88 27       	eor	r24, r24
   15d2c:	90 7d       	andi	r25, 0xD0	; 208
   15d2e:	1b c0       	rjmp	.+54     	; 0x15d66 <SS80_Report+0x92>
   15d30:	25 ff       	sbrs	r18, 5
   15d32:	12 c0       	rjmp	.+36     	; 0x15d58 <SS80_Report+0x84>
   15d34:	e0 91 66 19 	lds	r30, 0x1966	; 0x801966 <SS80s>
   15d38:	f0 91 67 19 	lds	r31, 0x1967	; 0x801967 <SS80s+0x1>
   15d3c:	82 81       	ldd	r24, Z+2	; 0x02
   15d3e:	90 e0       	ldi	r25, 0x00	; 0
   15d40:	ed b7       	in	r30, 0x3d	; 61
   15d42:	fe b7       	in	r31, 0x3e	; 62
   15d44:	95 83       	std	Z+5, r25	; 0x05
   15d46:	84 83       	std	Z+4, r24	; 0x04
   15d48:	86 ef       	ldi	r24, 0xF6	; 246
   15d4a:	91 e2       	ldi	r25, 0x21	; 33
   15d4c:	a0 e0       	ldi	r26, 0x00	; 0
   15d4e:	81 83       	std	Z+1, r24	; 0x01
   15d50:	92 83       	std	Z+2, r25	; 0x02
   15d52:	a3 83       	std	Z+3, r26	; 0x03
   15d54:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
   15d58:	e0 91 66 19 	lds	r30, 0x1966	; 0x801966 <SS80s>
   15d5c:	f0 91 67 19 	lds	r31, 0x1967	; 0x801967 <SS80s+0x1>
   15d60:	12 82       	std	Z+2, r1	; 0x02
   15d62:	80 e0       	ldi	r24, 0x00	; 0
   15d64:	90 e0       	ldi	r25, 0x00	; 0
   15d66:	28 96       	adiw	r28, 0x08	; 8
   15d68:	e2 e0       	ldi	r30, 0x02	; 2
   15d6a:	0c 94 d0 e8 	jmp	0x1d1a0	; 0x1d1a0 <__epilogue_restores__+0x20>

00015d6e <Clear_Common>:
   15d6e:	e0 91 66 19 	lds	r30, 0x1966	; 0x801966 <SS80s>
   15d72:	f0 91 67 19 	lds	r31, 0x1967	; 0x801967 <SS80s+0x1>
   15d76:	25 81       	ldd	r18, Z+5	; 0x05
   15d78:	30 e0       	ldi	r19, 0x00	; 0
   15d7a:	28 17       	cp	r18, r24
   15d7c:	39 07       	cpc	r19, r25
   15d7e:	19 f0       	breq	.+6      	; 0x15d86 <Clear_Common+0x18>
   15d80:	0f 97       	sbiw	r24, 0x0f	; 15
   15d82:	99 f4       	brne	.+38     	; 0x15daa <Clear_Common+0x3c>
   15d84:	03 c0       	rjmp	.+6      	; 0x15d8c <Clear_Common+0x1e>
   15d86:	2f 30       	cpi	r18, 0x0F	; 15
   15d88:	31 05       	cpc	r19, r1
   15d8a:	09 f4       	brne	.+2      	; 0x15d8e <Clear_Common+0x20>
   15d8c:	15 82       	std	Z+5, r1	; 0x05
   15d8e:	16 82       	std	Z+6, r1	; 0x06
   15d90:	17 82       	std	Z+7, r1	; 0x07
   15d92:	10 86       	std	Z+8, r1	; 0x08
   15d94:	11 86       	std	Z+9, r1	; 0x09
   15d96:	12 86       	std	Z+10, r1	; 0x0a
   15d98:	13 86       	std	Z+11, r1	; 0x0b
   15d9a:	14 86       	std	Z+12, r1	; 0x0c
   15d9c:	15 86       	std	Z+13, r1	; 0x0d
   15d9e:	16 86       	std	Z+14, r1	; 0x0e
   15da0:	11 82       	std	Z+1, r1	; 0x01
   15da2:	10 82       	st	Z, r1
   15da4:	14 82       	std	Z+4, r1	; 0x04
   15da6:	13 82       	std	Z+3, r1	; 0x03
   15da8:	12 82       	std	Z+2, r1	; 0x02
   15daa:	08 95       	ret

00015dac <SS80_init>:
   15dac:	cf 92       	push	r12
   15dae:	df 92       	push	r13
   15db0:	ef 92       	push	r14
   15db2:	0f 93       	push	r16
   15db4:	1f 93       	push	r17
   15db6:	cf 93       	push	r28
   15db8:	df 93       	push	r29
   15dba:	00 d0       	rcall	.+0      	; 0x15dbc <SS80_init+0x10>
   15dbc:	00 d0       	rcall	.+0      	; 0x15dbe <SS80_init+0x12>
   15dbe:	1f 92       	push	r1
   15dc0:	0d e6       	ldi	r16, 0x6D	; 109
   15dc2:	1f e1       	ldi	r17, 0x1F	; 31
   15dc4:	cb e0       	ldi	r28, 0x0B	; 11
   15dc6:	d2 e0       	ldi	r29, 0x02	; 2
   15dc8:	83 ec       	ldi	r24, 0xC3	; 195
   15dca:	98 e2       	ldi	r25, 0x28	; 40
   15dcc:	6c 01       	movw	r12, r24
   15dce:	e1 2c       	mov	r14, r1
   15dd0:	f8 01       	movw	r30, r16
   15dd2:	80 81       	ld	r24, Z
   15dd4:	83 30       	cpi	r24, 0x03	; 3
   15dd6:	29 f5       	brne	.+74     	; 0x15e22 <SS80_init+0x76>
   15dd8:	8c 2f       	mov	r24, r28
   15dda:	0e 94 44 98 	call	0x13088	; 0x13088 <set_active_device>
   15dde:	88 23       	and	r24, r24
   15de0:	01 f1       	breq	.+64     	; 0x15e22 <SS80_init+0x76>
   15de2:	8f e0       	ldi	r24, 0x0F	; 15
   15de4:	90 e0       	ldi	r25, 0x00	; 0
   15de6:	c3 df       	rcall	.-122    	; 0x15d6e <Clear_Common>
   15de8:	e0 91 66 19 	lds	r30, 0x1966	; 0x801966 <SS80s>
   15dec:	f0 91 67 19 	lds	r31, 0x1967	; 0x801967 <SS80s+0x1>
   15df0:	d2 83       	std	Z+2, r29	; 0x02
   15df2:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15df6:	85 ff       	sbrs	r24, 5
   15df8:	0c c0       	rjmp	.+24     	; 0x15e12 <SS80_init+0x66>
   15dfa:	f8 01       	movw	r30, r16
   15dfc:	81 81       	ldd	r24, Z+1	; 0x01
   15dfe:	90 e0       	ldi	r25, 0x00	; 0
   15e00:	ed b7       	in	r30, 0x3d	; 61
   15e02:	fe b7       	in	r31, 0x3e	; 62
   15e04:	95 83       	std	Z+5, r25	; 0x05
   15e06:	84 83       	std	Z+4, r24	; 0x04
   15e08:	c1 82       	std	Z+1, r12	; 0x01
   15e0a:	d2 82       	std	Z+2, r13	; 0x02
   15e0c:	e3 82       	std	Z+3, r14	; 0x03
   15e0e:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
   15e12:	e0 91 68 19 	lds	r30, 0x1968	; 0x801968 <SS80p>
   15e16:	f0 91 69 19 	lds	r31, 0x1969	; 0x801969 <SS80p+0x1>
   15e1a:	81 81       	ldd	r24, Z+1	; 0x01
   15e1c:	90 e0       	ldi	r25, 0x00	; 0
   15e1e:	0e 94 8c 87 	call	0x10f18	; 0x10f18 <gpib_disable_PPR>
   15e22:	0b 50       	subi	r16, 0x0B	; 11
   15e24:	11 09       	sbc	r17, r1
   15e26:	c1 50       	subi	r28, 0x01	; 1
   15e28:	98 f6       	brcc	.-90     	; 0x15dd0 <SS80_init+0x24>
   15e2a:	0f 90       	pop	r0
   15e2c:	0f 90       	pop	r0
   15e2e:	0f 90       	pop	r0
   15e30:	0f 90       	pop	r0
   15e32:	0f 90       	pop	r0
   15e34:	df 91       	pop	r29
   15e36:	cf 91       	pop	r28
   15e38:	1f 91       	pop	r17
   15e3a:	0f 91       	pop	r16
   15e3c:	ef 90       	pop	r14
   15e3e:	df 90       	pop	r13
   15e40:	cf 90       	pop	r12
   15e42:	08 95       	ret

00015e44 <SS80_Channel_Independent_Clear>:
   15e44:	94 df       	rcall	.-216    	; 0x15d6e <Clear_Common>
   15e46:	e0 91 68 19 	lds	r30, 0x1968	; 0x801968 <SS80p>
   15e4a:	f0 91 69 19 	lds	r31, 0x1969	; 0x801969 <SS80p+0x1>
   15e4e:	81 81       	ldd	r24, Z+1	; 0x01
   15e50:	90 e0       	ldi	r25, 0x00	; 0
   15e52:	0e 94 56 87 	call	0x10eac	; 0x10eac <gpib_enable_PPR>
   15e56:	80 e0       	ldi	r24, 0x00	; 0
   15e58:	90 e0       	ldi	r25, 0x00	; 0
   15e5a:	08 95       	ret

00015e5c <SS80_Universal_Device_Clear>:
   15e5c:	8f e0       	ldi	r24, 0x0F	; 15
   15e5e:	90 e0       	ldi	r25, 0x00	; 0
   15e60:	86 df       	rcall	.-244    	; 0x15d6e <Clear_Common>
   15e62:	e0 91 68 19 	lds	r30, 0x1968	; 0x801968 <SS80p>
   15e66:	f0 91 69 19 	lds	r31, 0x1969	; 0x801969 <SS80p+0x1>
   15e6a:	81 81       	ldd	r24, Z+1	; 0x01
   15e6c:	90 e0       	ldi	r25, 0x00	; 0
   15e6e:	0e 94 56 87 	call	0x10eac	; 0x10eac <gpib_enable_PPR>
   15e72:	80 e0       	ldi	r24, 0x00	; 0
   15e74:	90 e0       	ldi	r25, 0x00	; 0
   15e76:	08 95       	ret

00015e78 <SS80_Selected_Device_Clear>:
   15e78:	cf 93       	push	r28
   15e7a:	df 93       	push	r29
   15e7c:	00 d0       	rcall	.+0      	; 0x15e7e <SS80_Selected_Device_Clear+0x6>
   15e7e:	1f 92       	push	r1
   15e80:	ec 01       	movw	r28, r24
   15e82:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15e86:	85 ff       	sbrs	r24, 5
   15e88:	0a c0       	rjmp	.+20     	; 0x15e9e <SS80_Selected_Device_Clear+0x26>
   15e8a:	8a ee       	ldi	r24, 0xEA	; 234
   15e8c:	91 e2       	ldi	r25, 0x21	; 33
   15e8e:	a0 e0       	ldi	r26, 0x00	; 0
   15e90:	ed b7       	in	r30, 0x3d	; 61
   15e92:	fe b7       	in	r31, 0x3e	; 62
   15e94:	81 83       	std	Z+1, r24	; 0x01
   15e96:	92 83       	std	Z+2, r25	; 0x02
   15e98:	a3 83       	std	Z+3, r26	; 0x03
   15e9a:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
   15e9e:	ce 01       	movw	r24, r28
   15ea0:	66 df       	rcall	.-308    	; 0x15d6e <Clear_Common>
   15ea2:	e0 91 68 19 	lds	r30, 0x1968	; 0x801968 <SS80p>
   15ea6:	f0 91 69 19 	lds	r31, 0x1969	; 0x801969 <SS80p+0x1>
   15eaa:	81 81       	ldd	r24, Z+1	; 0x01
   15eac:	90 e0       	ldi	r25, 0x00	; 0
   15eae:	0e 94 56 87 	call	0x10eac	; 0x10eac <gpib_enable_PPR>
   15eb2:	80 e0       	ldi	r24, 0x00	; 0
   15eb4:	90 e0       	ldi	r25, 0x00	; 0
   15eb6:	cd b7       	in	r28, 0x3d	; 61
   15eb8:	de b7       	in	r29, 0x3e	; 62
   15eba:	23 96       	adiw	r28, 0x03	; 3
   15ebc:	e2 e0       	ldi	r30, 0x02	; 2
   15ebe:	0c 94 d0 e8 	jmp	0x1d1a0	; 0x1d1a0 <__epilogue_restores__+0x20>

00015ec2 <SS80_Amigo_Clear>:
   15ec2:	a6 e0       	ldi	r26, 0x06	; 6
   15ec4:	b0 e0       	ldi	r27, 0x00	; 0
   15ec6:	e7 e6       	ldi	r30, 0x67	; 103
   15ec8:	ff ea       	ldi	r31, 0xAF	; 175
   15eca:	0c 94 b4 e8 	jmp	0x1d168	; 0x1d168 <__prologue_saves__+0x20>
   15ece:	1d 82       	std	Y+5, r1	; 0x05
   15ed0:	1c 82       	std	Y+4, r1	; 0x04
   15ed2:	ae 01       	movw	r20, r28
   15ed4:	4c 5f       	subi	r20, 0xFC	; 252
   15ed6:	5f 4f       	sbci	r21, 0xFF	; 255
   15ed8:	61 e0       	ldi	r22, 0x01	; 1
   15eda:	70 e0       	ldi	r23, 0x00	; 0
   15edc:	ce 01       	movw	r24, r28
   15ede:	06 96       	adiw	r24, 0x06	; 6
   15ee0:	0e 94 e4 8b 	call	0x117c8	; 0x117c8 <gpib_read_str>
   15ee4:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   15ee8:	01 97       	sbiw	r24, 0x01	; 1
   15eea:	89 f0       	breq	.+34     	; 0x15f0e <SS80_Amigo_Clear+0x4c>
   15eec:	20 ff       	sbrs	r18, 0
   15eee:	0a c0       	rjmp	.+20     	; 0x15f04 <SS80_Amigo_Clear+0x42>
   15ef0:	87 ed       	ldi	r24, 0xD7	; 215
   15ef2:	91 e2       	ldi	r25, 0x21	; 33
   15ef4:	a0 e0       	ldi	r26, 0x00	; 0
   15ef6:	ed b7       	in	r30, 0x3d	; 61
   15ef8:	fe b7       	in	r31, 0x3e	; 62
   15efa:	81 83       	std	Z+1, r24	; 0x01
   15efc:	92 83       	std	Z+2, r25	; 0x02
   15efe:	a3 83       	std	Z+3, r26	; 0x03
   15f00:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
   15f04:	8c 81       	ldd	r24, Y+4	; 0x04
   15f06:	9d 81       	ldd	r25, Y+5	; 0x05
   15f08:	88 27       	eor	r24, r24
   15f0a:	90 7d       	andi	r25, 0xD0	; 208
   15f0c:	19 c0       	rjmp	.+50     	; 0x15f40 <SS80_Amigo_Clear+0x7e>
   15f0e:	25 ff       	sbrs	r18, 5
   15f10:	0a c0       	rjmp	.+20     	; 0x15f26 <SS80_Amigo_Clear+0x64>
   15f12:	88 ec       	ldi	r24, 0xC8	; 200
   15f14:	91 e2       	ldi	r25, 0x21	; 33
   15f16:	a0 e0       	ldi	r26, 0x00	; 0
   15f18:	ed b7       	in	r30, 0x3d	; 61
   15f1a:	fe b7       	in	r31, 0x3e	; 62
   15f1c:	81 83       	std	Z+1, r24	; 0x01
   15f1e:	92 83       	std	Z+2, r25	; 0x02
   15f20:	a3 83       	std	Z+3, r26	; 0x03
   15f22:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
   15f26:	8f e0       	ldi	r24, 0x0F	; 15
   15f28:	90 e0       	ldi	r25, 0x00	; 0
   15f2a:	21 df       	rcall	.-446    	; 0x15d6e <Clear_Common>
   15f2c:	e0 91 68 19 	lds	r30, 0x1968	; 0x801968 <SS80p>
   15f30:	f0 91 69 19 	lds	r31, 0x1969	; 0x801969 <SS80p+0x1>
   15f34:	81 81       	ldd	r24, Z+1	; 0x01
   15f36:	90 e0       	ldi	r25, 0x00	; 0
   15f38:	0e 94 56 87 	call	0x10eac	; 0x10eac <gpib_enable_PPR>
   15f3c:	80 e0       	ldi	r24, 0x00	; 0
   15f3e:	90 e0       	ldi	r25, 0x00	; 0
   15f40:	26 96       	adiw	r28, 0x06	; 6
   15f42:	e2 e0       	ldi	r30, 0x02	; 2
   15f44:	0c 94 d0 e8 	jmp	0x1d1a0	; 0x1d1a0 <__epilogue_restores__+0x20>

00015f48 <SS80_Cancel>:
   15f48:	e0 91 66 19 	lds	r30, 0x1966	; 0x801966 <SS80s>
   15f4c:	f0 91 67 19 	lds	r31, 0x1967	; 0x801967 <SS80s+0x1>
   15f50:	11 82       	std	Z+1, r1	; 0x01
   15f52:	10 82       	st	Z, r1
   15f54:	e0 91 68 19 	lds	r30, 0x1968	; 0x801968 <SS80p>
   15f58:	f0 91 69 19 	lds	r31, 0x1969	; 0x801969 <SS80p+0x1>
   15f5c:	81 81       	ldd	r24, Z+1	; 0x01
   15f5e:	90 e0       	ldi	r25, 0x00	; 0
   15f60:	0e 94 56 87 	call	0x10eac	; 0x10eac <gpib_enable_PPR>
   15f64:	80 e0       	ldi	r24, 0x00	; 0
   15f66:	90 e0       	ldi	r25, 0x00	; 0
   15f68:	08 95       	ret

00015f6a <SS80_Transparent_State>:
   15f6a:	a9 e0       	ldi	r26, 0x09	; 9
   15f6c:	b0 e0       	ldi	r27, 0x00	; 0
   15f6e:	eb eb       	ldi	r30, 0xBB	; 187
   15f70:	ff ea       	ldi	r31, 0xAF	; 175
   15f72:	0c 94 ac e8 	jmp	0x1d158	; 0x1d158 <__prologue_saves__+0x10>
   15f76:	e0 91 68 19 	lds	r30, 0x1968	; 0x801968 <SS80p>
   15f7a:	f0 91 69 19 	lds	r31, 0x1969	; 0x801969 <SS80p+0x1>
   15f7e:	81 81       	ldd	r24, Z+1	; 0x01
   15f80:	90 e0       	ldi	r25, 0x00	; 0
   15f82:	0e 94 8c 87 	call	0x10f18	; 0x10f18 <gpib_disable_PPR>
   15f86:	80 e0       	ldi	r24, 0x00	; 0
   15f88:	91 e0       	ldi	r25, 0x01	; 1
   15f8a:	99 87       	std	Y+9, r25	; 0x09
   15f8c:	88 87       	std	Y+8, r24	; 0x08
   15f8e:	ae 01       	movw	r20, r28
   15f90:	48 5f       	subi	r20, 0xF8	; 248
   15f92:	5f 4f       	sbci	r21, 0xFF	; 255
   15f94:	60 e0       	ldi	r22, 0x00	; 0
   15f96:	72 e0       	ldi	r23, 0x02	; 2
   15f98:	8a ee       	ldi	r24, 0xEA	; 234
   15f9a:	9c e1       	ldi	r25, 0x1C	; 28
   15f9c:	0e 94 e4 8b 	call	0x117c8	; 0x117c8 <gpib_read_str>
   15fa0:	7c 01       	movw	r14, r24
   15fa2:	88 85       	ldd	r24, Y+8	; 0x08
   15fa4:	99 85       	ldd	r25, Y+9	; 0x09
   15fa6:	9c 01       	movw	r18, r24
   15fa8:	22 27       	eor	r18, r18
   15faa:	30 7d       	andi	r19, 0xD0	; 208
   15fac:	23 2b       	or	r18, r19
   15fae:	79 f0       	breq	.+30     	; 0x15fce <SS80_Transparent_State+0x64>
   15fb0:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15fb4:	80 ff       	sbrs	r24, 0
   15fb6:	da c0       	rjmp	.+436    	; 0x1616c <SS80_Transparent_State+0x202>
   15fb8:	87 e6       	ldi	r24, 0x67	; 103
   15fba:	93 e2       	ldi	r25, 0x23	; 35
   15fbc:	a0 e0       	ldi	r26, 0x00	; 0
   15fbe:	ed b7       	in	r30, 0x3d	; 61
   15fc0:	fe b7       	in	r31, 0x3e	; 62
   15fc2:	81 83       	std	Z+1, r24	; 0x01
   15fc4:	92 83       	std	Z+2, r25	; 0x02
   15fc6:	a3 83       	std	Z+3, r26	; 0x03
   15fc8:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
   15fcc:	cf c0       	rjmp	.+414    	; 0x1616c <SS80_Transparent_State+0x202>
   15fce:	e1 14       	cp	r14, r1
   15fd0:	f1 04       	cpc	r15, r1
   15fd2:	09 f4       	brne	.+2      	; 0x15fd6 <SS80_Transparent_State+0x6c>
   15fd4:	d0 c0       	rjmp	.+416    	; 0x16176 <SS80_Transparent_State+0x20c>
   15fd6:	90 fd       	sbrc	r25, 0
   15fd8:	0e c0       	rjmp	.+28     	; 0x15ff6 <SS80_Transparent_State+0x8c>
   15fda:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15fde:	80 ff       	sbrs	r24, 0
   15fe0:	0a c0       	rjmp	.+20     	; 0x15ff6 <SS80_Transparent_State+0x8c>
   15fe2:	8e e4       	ldi	r24, 0x4E	; 78
   15fe4:	93 e2       	ldi	r25, 0x23	; 35
   15fe6:	a0 e0       	ldi	r26, 0x00	; 0
   15fe8:	ed b7       	in	r30, 0x3d	; 61
   15fea:	fe b7       	in	r31, 0x3e	; 62
   15fec:	81 83       	std	Z+1, r24	; 0x01
   15fee:	92 83       	std	Z+2, r25	; 0x02
   15ff0:	a3 83       	std	Z+3, r26	; 0x03
   15ff2:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
   15ff6:	8a ee       	ldi	r24, 0xEA	; 234
   15ff8:	a8 2e       	mov	r10, r24
   15ffa:	8c e1       	ldi	r24, 0x1C	; 28
   15ffc:	b8 2e       	mov	r11, r24
   15ffe:	00 e0       	ldi	r16, 0x00	; 0
   16000:	10 e0       	ldi	r17, 0x00	; 0
   16002:	0e 15       	cp	r16, r14
   16004:	1f 05       	cpc	r17, r15
   16006:	0c f0       	brlt	.+2      	; 0x1600a <SS80_Transparent_State+0xa0>
   16008:	9c c0       	rjmp	.+312    	; 0x16142 <SS80_Transparent_State+0x1d8>
   1600a:	68 01       	movw	r12, r16
   1600c:	ff ef       	ldi	r31, 0xFF	; 255
   1600e:	cf 1a       	sub	r12, r31
   16010:	df 0a       	sbc	r13, r31
   16012:	f5 01       	movw	r30, r10
   16014:	81 91       	ld	r24, Z+
   16016:	5f 01       	movw	r10, r30
   16018:	28 2f       	mov	r18, r24
   1601a:	30 e0       	ldi	r19, 0x00	; 0
   1601c:	a9 01       	movw	r20, r18
   1601e:	40 52       	subi	r20, 0x20	; 32
   16020:	51 09       	sbc	r21, r1
   16022:	40 31       	cpi	r20, 0x10	; 16
   16024:	51 05       	cpc	r21, r1
   16026:	20 f4       	brcc	.+8      	; 0x16030 <SS80_Transparent_State+0xc6>
   16028:	80 52       	subi	r24, 0x20	; 32
   1602a:	86 d9       	rcall	.-3316   	; 0x15338 <SS80_Check_Unit>
   1602c:	86 01       	movw	r16, r12
   1602e:	e9 cf       	rjmp	.-46     	; 0x16002 <SS80_Transparent_State+0x98>
   16030:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16034:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   16038:	21 30       	cpi	r18, 0x01	; 1
   1603a:	31 05       	cpc	r19, r1
   1603c:	c9 f4       	brne	.+50     	; 0x16070 <SS80_Transparent_State+0x106>
   1603e:	0e 5f       	subi	r16, 0xFE	; 254
   16040:	1f 4f       	sbci	r17, 0xFF	; 255
   16042:	80 73       	andi	r24, 0x30	; 48
   16044:	99 27       	eor	r25, r25
   16046:	89 2b       	or	r24, r25
   16048:	51 f0       	breq	.+20     	; 0x1605e <SS80_Transparent_State+0xf4>
   1604a:	89 e2       	ldi	r24, 0x29	; 41
   1604c:	93 e2       	ldi	r25, 0x23	; 35
   1604e:	a0 e0       	ldi	r26, 0x00	; 0
   16050:	ed b7       	in	r30, 0x3d	; 61
   16052:	fe b7       	in	r31, 0x3e	; 62
   16054:	81 83       	std	Z+1, r24	; 0x01
   16056:	92 83       	std	Z+2, r25	; 0x02
   16058:	a3 83       	std	Z+3, r26	; 0x03
   1605a:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
   1605e:	e0 91 68 19 	lds	r30, 0x1968	; 0x801968 <SS80p>
   16062:	f0 91 69 19 	lds	r31, 0x1969	; 0x801969 <SS80p+0x1>
   16066:	81 81       	ldd	r24, Z+1	; 0x01
   16068:	90 e0       	ldi	r25, 0x00	; 0
   1606a:	0e 94 56 87 	call	0x10eac	; 0x10eac <gpib_enable_PPR>
   1606e:	69 c0       	rjmp	.+210    	; 0x16142 <SS80_Transparent_State+0x1d8>
   16070:	22 30       	cpi	r18, 0x02	; 2
   16072:	31 05       	cpc	r19, r1
   16074:	51 f4       	brne	.+20     	; 0x1608a <SS80_Transparent_State+0x120>
   16076:	0b 5f       	subi	r16, 0xFB	; 251
   16078:	1f 4f       	sbci	r17, 0xFF	; 255
   1607a:	80 73       	andi	r24, 0x30	; 48
   1607c:	99 27       	eor	r25, r25
   1607e:	89 2b       	or	r24, r25
   16080:	09 f4       	brne	.+2      	; 0x16084 <SS80_Transparent_State+0x11a>
   16082:	5f c0       	rjmp	.+190    	; 0x16142 <SS80_Transparent_State+0x1d8>
   16084:	8c e0       	ldi	r24, 0x0C	; 12
   16086:	93 e2       	ldi	r25, 0x23	; 35
   16088:	0c c0       	rjmp	.+24     	; 0x160a2 <SS80_Transparent_State+0x138>
   1608a:	23 30       	cpi	r18, 0x03	; 3
   1608c:	31 05       	cpc	r19, r1
   1608e:	91 f4       	brne	.+36     	; 0x160b4 <SS80_Transparent_State+0x14a>
   16090:	0b 5f       	subi	r16, 0xFB	; 251
   16092:	1f 4f       	sbci	r17, 0xFF	; 255
   16094:	80 73       	andi	r24, 0x30	; 48
   16096:	99 27       	eor	r25, r25
   16098:	89 2b       	or	r24, r25
   1609a:	09 f4       	brne	.+2      	; 0x1609e <SS80_Transparent_State+0x134>
   1609c:	52 c0       	rjmp	.+164    	; 0x16142 <SS80_Transparent_State+0x1d8>
   1609e:	8e ee       	ldi	r24, 0xEE	; 238
   160a0:	92 e2       	ldi	r25, 0x22	; 34
   160a2:	a0 e0       	ldi	r26, 0x00	; 0
   160a4:	ed b7       	in	r30, 0x3d	; 61
   160a6:	fe b7       	in	r31, 0x3e	; 62
   160a8:	81 83       	std	Z+1, r24	; 0x01
   160aa:	92 83       	std	Z+2, r25	; 0x02
   160ac:	a3 83       	std	Z+3, r26	; 0x03
   160ae:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
   160b2:	47 c0       	rjmp	.+142    	; 0x16142 <SS80_Transparent_State+0x1d8>
   160b4:	28 30       	cpi	r18, 0x08	; 8
   160b6:	31 05       	cpc	r19, r1
   160b8:	e1 f4       	brne	.+56     	; 0x160f2 <SS80_Transparent_State+0x188>
   160ba:	85 ff       	sbrs	r24, 5
   160bc:	12 c0       	rjmp	.+36     	; 0x160e2 <SS80_Transparent_State+0x178>
   160be:	e0 91 66 19 	lds	r30, 0x1966	; 0x801966 <SS80s>
   160c2:	f0 91 67 19 	lds	r31, 0x1967	; 0x801967 <SS80s+0x1>
   160c6:	85 81       	ldd	r24, Z+5	; 0x05
   160c8:	90 e0       	ldi	r25, 0x00	; 0
   160ca:	ed b7       	in	r30, 0x3d	; 61
   160cc:	fe b7       	in	r31, 0x3e	; 62
   160ce:	95 83       	std	Z+5, r25	; 0x05
   160d0:	84 83       	std	Z+4, r24	; 0x04
   160d2:	87 ec       	ldi	r24, 0xC7	; 199
   160d4:	92 e2       	ldi	r25, 0x22	; 34
   160d6:	a0 e0       	ldi	r26, 0x00	; 0
   160d8:	81 83       	std	Z+1, r24	; 0x01
   160da:	92 83       	std	Z+2, r25	; 0x02
   160dc:	a3 83       	std	Z+3, r26	; 0x03
   160de:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
   160e2:	e0 91 66 19 	lds	r30, 0x1966	; 0x801966 <SS80s>
   160e6:	f0 91 67 19 	lds	r31, 0x1967	; 0x801967 <SS80s+0x1>
   160ea:	85 81       	ldd	r24, Z+5	; 0x05
   160ec:	90 e0       	ldi	r25, 0x00	; 0
   160ee:	aa de       	rcall	.-684    	; 0x15e44 <SS80_Channel_Independent_Clear>
   160f0:	44 c0       	rjmp	.+136    	; 0x1617a <SS80_Transparent_State+0x210>
   160f2:	29 30       	cpi	r18, 0x09	; 9
   160f4:	31 05       	cpc	r19, r1
   160f6:	b1 f4       	brne	.+44     	; 0x16124 <SS80_Transparent_State+0x1ba>
   160f8:	85 ff       	sbrs	r24, 5
   160fa:	12 c0       	rjmp	.+36     	; 0x16120 <SS80_Transparent_State+0x1b6>
   160fc:	e0 91 66 19 	lds	r30, 0x1966	; 0x801966 <SS80s>
   16100:	f0 91 67 19 	lds	r31, 0x1967	; 0x801967 <SS80s+0x1>
   16104:	85 81       	ldd	r24, Z+5	; 0x05
   16106:	90 e0       	ldi	r25, 0x00	; 0
   16108:	ed b7       	in	r30, 0x3d	; 61
   1610a:	fe b7       	in	r31, 0x3e	; 62
   1610c:	95 83       	std	Z+5, r25	; 0x05
   1610e:	84 83       	std	Z+4, r24	; 0x04
   16110:	83 eb       	ldi	r24, 0xB3	; 179
   16112:	92 e2       	ldi	r25, 0x22	; 34
   16114:	a0 e0       	ldi	r26, 0x00	; 0
   16116:	81 83       	std	Z+1, r24	; 0x01
   16118:	92 83       	std	Z+2, r25	; 0x02
   1611a:	a3 83       	std	Z+3, r26	; 0x03
   1611c:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
   16120:	13 df       	rcall	.-474    	; 0x15f48 <SS80_Cancel>
   16122:	2b c0       	rjmp	.+86     	; 0x1617a <SS80_Transparent_State+0x210>
   16124:	80 ff       	sbrs	r24, 0
   16126:	22 c0       	rjmp	.+68     	; 0x1616c <SS80_Transparent_State+0x202>
   16128:	ed b7       	in	r30, 0x3d	; 61
   1612a:	fe b7       	in	r31, 0x3e	; 62
   1612c:	35 83       	std	Z+5, r19	; 0x05
   1612e:	24 83       	std	Z+4, r18	; 0x04
   16130:	83 e9       	ldi	r24, 0x93	; 147
   16132:	92 e2       	ldi	r25, 0x22	; 34
   16134:	a0 e0       	ldi	r26, 0x00	; 0
   16136:	81 83       	std	Z+1, r24	; 0x01
   16138:	92 83       	std	Z+2, r25	; 0x02
   1613a:	a3 83       	std	Z+3, r26	; 0x03
   1613c:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
   16140:	86 01       	movw	r16, r12
   16142:	0e 15       	cp	r16, r14
   16144:	1f 05       	cpc	r17, r15
   16146:	91 f0       	breq	.+36     	; 0x1616c <SS80_Transparent_State+0x202>
   16148:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1614c:	80 ff       	sbrs	r24, 0
   1614e:	0e c0       	rjmp	.+28     	; 0x1616c <SS80_Transparent_State+0x202>
   16150:	ed b7       	in	r30, 0x3d	; 61
   16152:	fe b7       	in	r31, 0x3e	; 62
   16154:	f7 82       	std	Z+7, r15	; 0x07
   16156:	e6 82       	std	Z+6, r14	; 0x06
   16158:	15 83       	std	Z+5, r17	; 0x05
   1615a:	04 83       	std	Z+4, r16	; 0x04
   1615c:	87 e5       	ldi	r24, 0x57	; 87
   1615e:	92 e2       	ldi	r25, 0x22	; 34
   16160:	a0 e0       	ldi	r26, 0x00	; 0
   16162:	81 83       	std	Z+1, r24	; 0x01
   16164:	92 83       	std	Z+2, r25	; 0x02
   16166:	a3 83       	std	Z+3, r26	; 0x03
   16168:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
   1616c:	88 85       	ldd	r24, Y+8	; 0x08
   1616e:	99 85       	ldd	r25, Y+9	; 0x09
   16170:	88 27       	eor	r24, r24
   16172:	90 7d       	andi	r25, 0xD0	; 208
   16174:	02 c0       	rjmp	.+4      	; 0x1617a <SS80_Transparent_State+0x210>
   16176:	80 e0       	ldi	r24, 0x00	; 0
   16178:	90 e0       	ldi	r25, 0x00	; 0
   1617a:	29 96       	adiw	r28, 0x09	; 9
   1617c:	ea e0       	ldi	r30, 0x0A	; 10
   1617e:	0c 94 c8 e8 	jmp	0x1d190	; 0x1d190 <__epilogue_restores__+0x10>

00016182 <SS80_error_return>:
/// @return  0 on send
/// @return GPIB flags on send error
/// @see gpib.h _FLAGS defines for a full list.

int SS80_error_return( void )
{
   16182:	a6 e0       	ldi	r26, 0x06	; 6
   16184:	b0 e0       	ldi	r27, 0x00	; 0
   16186:	e7 ec       	ldi	r30, 0xC7	; 199
   16188:	f0 eb       	ldi	r31, 0xB0	; 176
   1618a:	0c 94 b4 e8 	jmp	0x1d168	; 0x1d168 <__prologue_saves__+0x20>
    uint8_t tmp[1];
    uint16_t status = EOI_FLAG;
   1618e:	80 e0       	ldi	r24, 0x00	; 0
   16190:	91 e0       	ldi	r25, 0x01	; 1
   16192:	9d 83       	std	Y+5, r25	; 0x05
   16194:	8c 83       	std	Y+4, r24	; 0x04

    SS80s->qstat = 1;
   16196:	e0 91 66 19 	lds	r30, 0x1966	; 0x801966 <SS80s>
   1619a:	f0 91 67 19 	lds	r31, 0x1967	; 0x801967 <SS80s+0x1>
   1619e:	81 e0       	ldi	r24, 0x01	; 1
   161a0:	82 83       	std	Z+2, r24	; 0x02
    tmp[0] = SS80s->qstat;
   161a2:	8e 83       	std	Y+6, r24	; 0x06

    status = EOI_FLAG;
    if( gpib_write_str(tmp,sizeof(tmp), &status) != sizeof(tmp))
   161a4:	ae 01       	movw	r20, r28
   161a6:	4c 5f       	subi	r20, 0xFC	; 252
   161a8:	5f 4f       	sbci	r21, 0xFF	; 255
   161aa:	61 e0       	ldi	r22, 0x01	; 1
   161ac:	70 e0       	ldi	r23, 0x00	; 0
   161ae:	ce 01       	movw	r24, r28
   161b0:	06 96       	adiw	r24, 0x06	; 6
   161b2:	0e 94 86 8c 	call	0x1190c	; 0x1190c <gpib_write_str>
   161b6:	01 97       	sbiw	r24, 0x01	; 1
   161b8:	99 f0       	breq	.+38     	; 0x161e0 <SS80_error_return+0x5e>
    {
        if(debuglevel & GPIB_ERR)
   161ba:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   161be:	80 ff       	sbrs	r24, 0
   161c0:	0a c0       	rjmp	.+20     	; 0x161d6 <SS80_error_return+0x54>
            printf("[GPIB Error Return - Write ERROR]\n");
   161c2:	85 ea       	ldi	r24, 0xA5	; 165
   161c4:	91 e2       	ldi	r25, 0x21	; 33
   161c6:	a0 e0       	ldi	r26, 0x00	; 0
   161c8:	ed b7       	in	r30, 0x3d	; 61
   161ca:	fe b7       	in	r31, 0x3e	; 62
   161cc:	81 83       	std	Z+1, r24	; 0x01
   161ce:	92 83       	std	Z+2, r25	; 0x02
   161d0:	a3 83       	std	Z+3, r26	; 0x03
   161d2:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
        return(status & ERROR_MASK);
   161d6:	8c 81       	ldd	r24, Y+4	; 0x04
   161d8:	9d 81       	ldd	r25, Y+5	; 0x05
   161da:	88 27       	eor	r24, r24
   161dc:	90 7d       	andi	r25, 0xD0	; 208
   161de:	07 c0       	rjmp	.+14     	; 0x161ee <SS80_error_return+0x6c>
    }
    SS80s->qstat = 0;
   161e0:	e0 91 66 19 	lds	r30, 0x1966	; 0x801966 <SS80s>
   161e4:	f0 91 67 19 	lds	r31, 0x1967	; 0x801967 <SS80s+0x1>
   161e8:	12 82       	std	Z+2, r1	; 0x02
    return(0);
   161ea:	80 e0       	ldi	r24, 0x00	; 0
   161ec:	90 e0       	ldi	r25, 0x00	; 0
}
   161ee:	26 96       	adiw	r28, 0x06	; 6
   161f0:	e2 e0       	ldi	r30, 0x02	; 2
   161f2:	0c 94 d0 e8 	jmp	0x1d1a0	; 0x1d1a0 <__epilogue_restores__+0x20>

000161f6 <SS80_locate_and_read>:
///  - Currenly we will only process 2 ** 31 bytes Max in one transfer.
///  - If an seek or I/O error happens then we MUST continue to
/// read and discard the GPIB data until we get an EOI or GPIB error...

int SS80_locate_and_read( void )
{
   161f6:	a7 e1       	ldi	r26, 0x17	; 23
   161f8:	b0 e0       	ldi	r27, 0x00	; 0
   161fa:	e1 e0       	ldi	r30, 0x01	; 1
   161fc:	f1 eb       	ldi	r31, 0xB1	; 177
   161fe:	0c 94 a5 e8 	jmp	0x1d14a	; 0x1d14a <__prologue_saves__+0x2>
    DWORD total_bytes;
    DWORD count;
    int chunk;
    int len;
    uint16_t status;
    uint32_t Address = SS80_Blocks_to_Bytes(SS80s->AddressBlocks);
   16202:	60 91 66 19 	lds	r22, 0x1966	; 0x801966 <SS80s>
   16206:	70 91 67 19 	lds	r23, 0x1967	; 0x801967 <SS80s+0x1>
   1620a:	fb 01       	movw	r30, r22
   1620c:	27 81       	ldd	r18, Z+7	; 0x07
   1620e:	30 85       	ldd	r19, Z+8	; 0x08
   16210:	41 85       	ldd	r20, Z+9	; 0x09
   16212:	52 85       	ldd	r21, Z+10	; 0x0a

/// @brief  SS80 Return current address in bytes
/// @return Byte Address
uint32_t SS80_Blocks_to_Bytes(uint32_t block)
{
    return(block * SS80p->UNIT.BYTES_PER_BLOCK);
   16214:	80 91 68 19 	lds	r24, 0x1968	; 0x801968 <SS80p>
   16218:	90 91 69 19 	lds	r25, 0x1969	; 0x801969 <SS80p+0x1>
   1621c:	fc 01       	movw	r30, r24
   1621e:	a2 89       	ldd	r26, Z+18	; 0x12
   16220:	b3 89       	ldd	r27, Z+19	; 0x13
    int chunk;
    int len;
    uint16_t status;
    uint32_t Address = SS80_Blocks_to_Bytes(SS80s->AddressBlocks);

    SS80s->qstat = 0;
   16222:	fb 01       	movw	r30, r22
   16224:	12 82       	std	Z+2, r1	; 0x02

    status = 0;
   16226:	1d 86       	std	Y+13, r1	; 0x0d
   16228:	1c 86       	std	Y+12, r1	; 0x0c

    if( GPIB_IO_RD(IFC) == 0)
   1622a:	54 98       	cbi	0x0a, 4	; 10
   1622c:	4c 99       	sbic	0x09, 4	; 9
   1622e:	03 c0       	rjmp	.+6      	; 0x16236 <SS80_locate_and_read+0x40>
        return(IFC_FLAG);
   16230:	80 e0       	ldi	r24, 0x00	; 0
   16232:	90 e1       	ldi	r25, 0x10	; 16
   16234:	3e c1       	rjmp	.+636    	; 0x164b2 <SS80_locate_and_read+0x2bc>

/// @brief  SS80 Return current address in bytes
/// @return Byte Address
uint32_t SS80_Blocks_to_Bytes(uint32_t block)
{
    return(block * SS80p->UNIT.BYTES_PER_BLOCK);
   16236:	0e 94 84 e8 	call	0x1d108	; 0x1d108 <__muluhisi3>
   1623a:	4b 01       	movw	r8, r22
   1623c:	5c 01       	movw	r10, r24
/// @todo FIXME
///  SS80 4-39
///  For now we will assume the controller will never do this

#if SDEBUG
    if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   1623e:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16242:	85 ff       	sbrs	r24, 5
   16244:	1a c0       	rjmp	.+52     	; 0x1627a <SS80_locate_and_read+0x84>
        printf("[SS80 Locate and Read at %08lXH(%lXH)]\n",
   16246:	e0 91 66 19 	lds	r30, 0x1966	; 0x801966 <SS80s>
   1624a:	f0 91 67 19 	lds	r31, 0x1967	; 0x801967 <SS80s+0x1>
   1624e:	83 85       	ldd	r24, Z+11	; 0x0b
   16250:	94 85       	ldd	r25, Z+12	; 0x0c
   16252:	a5 85       	ldd	r26, Z+13	; 0x0d
   16254:	b6 85       	ldd	r27, Z+14	; 0x0e
   16256:	ed b7       	in	r30, 0x3d	; 61
   16258:	fe b7       	in	r31, 0x3e	; 62
   1625a:	80 87       	std	Z+8, r24	; 0x08
   1625c:	91 87       	std	Z+9, r25	; 0x09
   1625e:	a2 87       	std	Z+10, r26	; 0x0a
   16260:	b3 87       	std	Z+11, r27	; 0x0b
   16262:	84 82       	std	Z+4, r8	; 0x04
   16264:	95 82       	std	Z+5, r9	; 0x05
   16266:	a6 82       	std	Z+6, r10	; 0x06
   16268:	b7 82       	std	Z+7, r11	; 0x07
   1626a:	8f e7       	ldi	r24, 0x7F	; 127
   1626c:	98 e2       	ldi	r25, 0x28	; 40
   1626e:	a0 e0       	ldi	r26, 0x00	; 0
   16270:	81 83       	std	Z+1, r24	; 0x01
   16272:	92 83       	std	Z+2, r25	; 0x02
   16274:	a3 83       	std	Z+3, r26	; 0x03
   16276:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
            (long) Address, (long) SS80s->Length);
#endif

    if( SS80_cmd_seek() )
   1627a:	25 db       	rcall	.-2486   	; 0x158c6 <SS80_cmd_seek>
   1627c:	89 2b       	or	r24, r25
   1627e:	09 f0       	breq	.+2      	; 0x16282 <SS80_locate_and_read+0x8c>
   16280:	ae c0       	rjmp	.+348    	; 0x163de <SS80_locate_and_read+0x1e8>
    {
        return(SS80_error_return());
    }

    count = SS80s->Length;
   16282:	e0 91 66 19 	lds	r30, 0x1966	; 0x801966 <SS80s>
   16286:	f0 91 67 19 	lds	r31, 0x1967	; 0x801967 <SS80s+0x1>
   1628a:	43 84       	ldd	r4, Z+11	; 0x0b
   1628c:	54 84       	ldd	r5, Z+12	; 0x0c
   1628e:	65 84       	ldd	r6, Z+13	; 0x0d
   16290:	76 84       	ldd	r7, Z+14	; 0x0e
    total_bytes = 0;
   16292:	1e 86       	std	Y+14, r1	; 0x0e
   16294:	1f 86       	std	Y+15, r1	; 0x0f
   16296:	18 8a       	std	Y+16, r1	; 0x10
   16298:	19 8a       	std	Y+17, r1	; 0x11

#if SDEBUG
        if(debuglevel & GPIB_DISK_IO_TIMING)
            gpib_timer_elapsed_end("disk READ ");
        if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
            printf("[SS80 Disk Read %02XH bytes]\n", len);
   1629a:	81 e6       	ldi	r24, 0x61	; 97
   1629c:	98 e2       	ldi	r25, 0x28	; 40
   1629e:	9c 01       	movw	r18, r24
   162a0:	40 e0       	ldi	r20, 0x00	; 0
   162a2:	2a 8b       	std	Y+18, r18	; 0x12
   162a4:	3b 8b       	std	Y+19, r19	; 0x13
   162a6:	4c 8b       	std	Y+20, r20	; 0x14
        if(debuglevel & GPIB_RW_STR_TIMING)
            gpib_timer_elapsed_end("GPIB write");
#endif
        if( len != chunk)
        {
            SS80s->qstat = 1;
   162a8:	33 24       	eor	r3, r3
   162aa:	33 94       	inc	r3
            if(debuglevel & GPIB_ERR)
                printf("[SS80 GPIB Write Error]\n");
   162ac:	80 e3       	ldi	r24, 0x30	; 48
   162ae:	98 e2       	ldi	r25, 0x28	; 40
   162b0:	9c 01       	movw	r18, r24
   162b2:	40 e0       	ldi	r20, 0x00	; 0
   162b4:	2d 8b       	std	Y+21, r18	; 0x15
   162b6:	3e 8b       	std	Y+22, r19	; 0x16
   162b8:	4f 8b       	std	Y+23, r20	; 0x17
        return(SS80_error_return());
    }

    count = SS80s->Length;
    total_bytes = 0;
    while(count > 0 )
   162ba:	34 c0       	rjmp	.+104    	; 0x16324 <SS80_locate_and_read+0x12e>
                printf("[SS80 Disk Read Error]\n");
            return( SS80_error_return() );
        }

#if SDEBUG
        if(debuglevel & GPIB_RW_STR_TIMING)
   162bc:	87 fd       	sbrc	r24, 7
            gpib_timer_elapsed_begin();
   162be:	0e 94 7c 86 	call	0x10cf8	; 0x10cf8 <gpib_timer_elapsed_begin>
#endif
        len = gpib_write_str(gpib_iobuff, chunk, &status);
   162c2:	ae 01       	movw	r20, r28
   162c4:	44 5f       	subi	r20, 0xF4	; 244
   162c6:	5f 4f       	sbci	r21, 0xFF	; 255
   162c8:	b6 01       	movw	r22, r12
   162ca:	8a ee       	ldi	r24, 0xEA	; 234
   162cc:	9c e1       	ldi	r25, 0x1C	; 28
   162ce:	0e 94 86 8c 	call	0x1190c	; 0x1190c <gpib_write_str>
   162d2:	8c 01       	movw	r16, r24
#if SDEBUG
        if(debuglevel & GPIB_RW_STR_TIMING)
   162d4:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   162d8:	87 ff       	sbrs	r24, 7
   162da:	04 c0       	rjmp	.+8      	; 0x162e4 <SS80_locate_and_read+0xee>
            gpib_timer_elapsed_end("GPIB write");
   162dc:	8f e9       	ldi	r24, 0x9F	; 159
   162de:	90 e1       	ldi	r25, 0x10	; 16
   162e0:	0e 94 8e 86 	call	0x10d1c	; 0x10d1c <gpib_timer_elapsed_end>
#endif
        if( len != chunk)
   162e4:	c0 16       	cp	r12, r16
   162e6:	d1 06       	cpc	r13, r17
   162e8:	09 f0       	breq	.+2      	; 0x162ec <SS80_locate_and_read+0xf6>
   162ea:	82 c0       	rjmp	.+260    	; 0x163f0 <SS80_locate_and_read+0x1fa>
                SS80s->Errors |= ERR_GPIB;
                break;
            }
        }

        Address += chunk;
   162ec:	0d 2c       	mov	r0, r13
   162ee:	00 0c       	add	r0, r0
   162f0:	ee 08       	sbc	r14, r14
   162f2:	ff 08       	sbc	r15, r15
   162f4:	8c 0c       	add	r8, r12
   162f6:	9d 1c       	adc	r9, r13
   162f8:	ae 1c       	adc	r10, r14
   162fa:	bf 1c       	adc	r11, r15
        total_bytes = total_bytes + len;
   162fc:	01 2e       	mov	r0, r17
   162fe:	00 0c       	add	r0, r0
   16300:	22 0b       	sbc	r18, r18
   16302:	33 0b       	sbc	r19, r19
   16304:	8e 85       	ldd	r24, Y+14	; 0x0e
   16306:	9f 85       	ldd	r25, Y+15	; 0x0f
   16308:	a8 89       	ldd	r26, Y+16	; 0x10
   1630a:	b9 89       	ldd	r27, Y+17	; 0x11
   1630c:	80 0f       	add	r24, r16
   1630e:	91 1f       	adc	r25, r17
   16310:	a2 1f       	adc	r26, r18
   16312:	b3 1f       	adc	r27, r19
   16314:	8e 87       	std	Y+14, r24	; 0x0e
   16316:	9f 87       	std	Y+15, r25	; 0x0f
   16318:	a8 8b       	std	Y+16, r26	; 0x10
   1631a:	b9 8b       	std	Y+17, r27	; 0x11
        count -= len;
   1631c:	40 1a       	sub	r4, r16
   1631e:	51 0a       	sbc	r5, r17
   16320:	62 0a       	sbc	r6, r18
   16322:	73 0a       	sbc	r7, r19
        return(SS80_error_return());
    }

    count = SS80s->Length;
    total_bytes = 0;
    while(count > 0 )
   16324:	41 14       	cp	r4, r1
   16326:	51 04       	cpc	r5, r1
   16328:	61 04       	cpc	r6, r1
   1632a:	71 04       	cpc	r7, r1
   1632c:	09 f4       	brne	.+2      	; 0x16330 <SS80_locate_and_read+0x13a>
   1632e:	92 c0       	rjmp	.+292    	; 0x16454 <SS80_locate_and_read+0x25e>
    {
        if( GPIB_IO_RD(IFC) == 0)
   16330:	54 98       	cbi	0x0a, 4	; 10
   16332:	4c 9b       	sbis	0x09, 4	; 9
   16334:	7d cf       	rjmp	.-262    	; 0x16230 <SS80_locate_and_read+0x3a>
        {
            return(IFC_FLAG);
        }

        if(count > 256)
   16336:	31 e0       	ldi	r19, 0x01	; 1
   16338:	43 16       	cp	r4, r19
   1633a:	53 06       	cpc	r5, r19
   1633c:	61 04       	cpc	r6, r1
   1633e:	71 04       	cpc	r7, r1
   16340:	08 f4       	brcc	.+2      	; 0x16344 <SS80_locate_and_read+0x14e>
   16342:	4f c0       	rjmp	.+158    	; 0x163e2 <SS80_locate_and_read+0x1ec>
        {
            chunk = 256;
            status = 0;                           // GPIB status
   16344:	1d 86       	std	Y+13, r1	; 0x0d
   16346:	1c 86       	std	Y+12, r1	; 0x0c
            return(IFC_FLAG);
        }

        if(count > 256)
        {
            chunk = 256;
   16348:	c1 2c       	mov	r12, r1
   1634a:	dd 24       	eor	r13, r13
   1634c:	d3 94       	inc	r13
            chunk = count;
            status |= EOI_FLAG;                   // GPIB EOI on final charater
        }

#if SDEBUG
        if(debuglevel & GPIB_DISK_IO_TIMING)
   1634e:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16352:	86 fd       	sbrc	r24, 6
            gpib_timer_elapsed_begin();
   16354:	0e 94 7c 86 	call	0x10cf8	; 0x10cf8 <gpib_timer_elapsed_begin>
#endif

// FIXME len != chunk
        len = dbf_open_read(SS80p->HEADER.NAME, Address, gpib_iobuff, chunk, &SS80s->Errors);
   16358:	e0 90 66 19 	lds	r14, 0x1966	; 0x801966 <SS80s>
   1635c:	f0 90 67 19 	lds	r15, 0x1967	; 0x801967 <SS80s+0x1>
   16360:	43 e0       	ldi	r20, 0x03	; 3
   16362:	e4 0e       	add	r14, r20
   16364:	f1 1c       	adc	r15, r1
   16366:	e0 91 68 19 	lds	r30, 0x1968	; 0x801968 <SS80p>
   1636a:	f0 91 69 19 	lds	r31, 0x1969	; 0x801969 <SS80p+0x1>
   1636e:	86 01       	movw	r16, r12
   16370:	2a ee       	ldi	r18, 0xEA	; 234
   16372:	3c e1       	ldi	r19, 0x1C	; 28
   16374:	b5 01       	movw	r22, r10
   16376:	a4 01       	movw	r20, r8
   16378:	82 81       	ldd	r24, Z+2	; 0x02
   1637a:	93 81       	ldd	r25, Z+3	; 0x03
   1637c:	0e 94 ce 85 	call	0x10b9c	; 0x10b9c <dbf_open_read>
   16380:	8c 01       	movw	r16, r24

#if SDEBUG
        if(debuglevel & GPIB_DISK_IO_TIMING)
   16382:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16386:	86 ff       	sbrs	r24, 6
   16388:	04 c0       	rjmp	.+8      	; 0x16392 <SS80_locate_and_read+0x19c>
            gpib_timer_elapsed_end("disk READ ");
   1638a:	84 e9       	ldi	r24, 0x94	; 148
   1638c:	90 e1       	ldi	r25, 0x10	; 16
   1638e:	0e 94 8e 86 	call	0x10d1c	; 0x10d1c <gpib_timer_elapsed_end>
        if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   16392:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16396:	85 ff       	sbrs	r24, 5
   16398:	0c c0       	rjmp	.+24     	; 0x163b2 <SS80_locate_and_read+0x1bc>
            printf("[SS80 Disk Read %02XH bytes]\n", len);
   1639a:	ed b7       	in	r30, 0x3d	; 61
   1639c:	fe b7       	in	r31, 0x3e	; 62
   1639e:	15 83       	std	Z+5, r17	; 0x05
   163a0:	04 83       	std	Z+4, r16	; 0x04
   163a2:	2a 89       	ldd	r18, Y+18	; 0x12
   163a4:	3b 89       	ldd	r19, Y+19	; 0x13
   163a6:	4c 89       	ldd	r20, Y+20	; 0x14
   163a8:	21 83       	std	Z+1, r18	; 0x01
   163aa:	32 83       	std	Z+2, r19	; 0x02
   163ac:	43 83       	std	Z+3, r20	; 0x03
   163ae:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
   163b2:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
#endif
        if(len < 0)
   163b6:	17 ff       	sbrs	r17, 7
   163b8:	81 cf       	rjmp	.-254    	; 0x162bc <SS80_locate_and_read+0xc6>
        {
            SS80s->qstat = 1;
   163ba:	e0 91 66 19 	lds	r30, 0x1966	; 0x801966 <SS80s>
   163be:	f0 91 67 19 	lds	r31, 0x1967	; 0x801967 <SS80s+0x1>
   163c2:	91 e0       	ldi	r25, 0x01	; 1
   163c4:	92 83       	std	Z+2, r25	; 0x02
/// @return Return
            if(debuglevel & GPIB_ERR)
   163c6:	80 ff       	sbrs	r24, 0
   163c8:	0a c0       	rjmp	.+20     	; 0x163de <SS80_locate_and_read+0x1e8>
                printf("[SS80 Disk Read Error]\n");
   163ca:	89 e4       	ldi	r24, 0x49	; 73
   163cc:	98 e2       	ldi	r25, 0x28	; 40
   163ce:	a0 e0       	ldi	r26, 0x00	; 0
   163d0:	ed b7       	in	r30, 0x3d	; 61
   163d2:	fe b7       	in	r31, 0x3e	; 62
   163d4:	81 83       	std	Z+1, r24	; 0x01
   163d6:	92 83       	std	Z+2, r25	; 0x02
   163d8:	a3 83       	std	Z+3, r26	; 0x03
   163da:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
            return( SS80_error_return() );
   163de:	d1 de       	rcall	.-606    	; 0x16182 <SS80_error_return>
   163e0:	68 c0       	rjmp	.+208    	; 0x164b2 <SS80_locate_and_read+0x2bc>
            chunk = 256;
            status = 0;                           // GPIB status
        }
        else
        {
            chunk = count;
   163e2:	62 01       	movw	r12, r4
            status |= EOI_FLAG;                   // GPIB EOI on final charater
   163e4:	8c 85       	ldd	r24, Y+12	; 0x0c
   163e6:	9d 85       	ldd	r25, Y+13	; 0x0d
   163e8:	91 60       	ori	r25, 0x01	; 1
   163ea:	9d 87       	std	Y+13, r25	; 0x0d
   163ec:	8c 87       	std	Y+12, r24	; 0x0c
   163ee:	af cf       	rjmp	.-162    	; 0x1634e <SS80_locate_and_read+0x158>
        if(debuglevel & GPIB_RW_STR_TIMING)
            gpib_timer_elapsed_end("GPIB write");
#endif
        if( len != chunk)
        {
            SS80s->qstat = 1;
   163f0:	e0 91 66 19 	lds	r30, 0x1966	; 0x801966 <SS80s>
   163f4:	f0 91 67 19 	lds	r31, 0x1967	; 0x801967 <SS80s+0x1>
   163f8:	32 82       	std	Z+2, r3	; 0x02
            if(debuglevel & GPIB_ERR)
   163fa:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   163fe:	80 ff       	sbrs	r24, 0
   16400:	0a c0       	rjmp	.+20     	; 0x16416 <SS80_locate_and_read+0x220>
                printf("[SS80 GPIB Write Error]\n");
   16402:	2d 89       	ldd	r18, Y+21	; 0x15
   16404:	3e 89       	ldd	r19, Y+22	; 0x16
   16406:	4f 89       	ldd	r20, Y+23	; 0x17
   16408:	ed b7       	in	r30, 0x3d	; 61
   1640a:	fe b7       	in	r31, 0x3e	; 62
   1640c:	21 83       	std	Z+1, r18	; 0x01
   1640e:	32 83       	std	Z+2, r19	; 0x02
   16410:	43 83       	std	Z+3, r20	; 0x03
   16412:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
            if(status & ERROR_MASK)
   16416:	8c 85       	ldd	r24, Y+12	; 0x0c
   16418:	9d 85       	ldd	r25, Y+13	; 0x0d
   1641a:	88 27       	eor	r24, r24
   1641c:	90 7d       	andi	r25, 0xD0	; 208
   1641e:	89 2b       	or	r24, r25
   16420:	09 f4       	brne	.+2      	; 0x16424 <SS80_locate_and_read+0x22e>
   16422:	64 cf       	rjmp	.-312    	; 0x162ec <SS80_locate_and_read+0xf6>
            {
                SS80s->Errors |= ERR_GPIB;
   16424:	e0 91 66 19 	lds	r30, 0x1966	; 0x801966 <SS80s>
   16428:	f0 91 67 19 	lds	r31, 0x1967	; 0x801967 <SS80s+0x1>
   1642c:	83 81       	ldd	r24, Z+3	; 0x03
   1642e:	94 81       	ldd	r25, Z+4	; 0x04
   16430:	80 62       	ori	r24, 0x20	; 32
   16432:	94 83       	std	Z+4, r25	; 0x04
   16434:	83 83       	std	Z+3, r24	; 0x03
        count -= len;
    }
///  Note: this should not happen unless we exit on errors above
    if(count > 0)
    {
        if(debuglevel & GPIB_ERR)
   16436:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1643a:	80 ff       	sbrs	r24, 0
   1643c:	21 c0       	rjmp	.+66     	; 0x16480 <SS80_locate_and_read+0x28a>
            printf("[SS80 Buffered Read DID NOT FINISH]\n");
   1643e:	8b e0       	ldi	r24, 0x0B	; 11
   16440:	98 e2       	ldi	r25, 0x28	; 40
   16442:	a0 e0       	ldi	r26, 0x00	; 0
   16444:	ed b7       	in	r30, 0x3d	; 61
   16446:	fe b7       	in	r31, 0x3e	; 62
   16448:	81 83       	std	Z+1, r24	; 0x01
   1644a:	92 83       	std	Z+2, r25	; 0x02
   1644c:	a3 83       	std	Z+3, r26	; 0x03
   1644e:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
   16452:	16 c0       	rjmp	.+44     	; 0x16480 <SS80_locate_and_read+0x28a>
    }
    else
    {
#if SDEBUG
        if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   16454:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16458:	85 ff       	sbrs	r24, 5
   1645a:	12 c0       	rjmp	.+36     	; 0x16480 <SS80_locate_and_read+0x28a>
            printf("[SS80 Buffered Read Total(%lXH) bytes]\n", (long) total_bytes);
   1645c:	8e 85       	ldd	r24, Y+14	; 0x0e
   1645e:	9f 85       	ldd	r25, Y+15	; 0x0f
   16460:	a8 89       	ldd	r26, Y+16	; 0x10
   16462:	b9 89       	ldd	r27, Y+17	; 0x11
   16464:	ed b7       	in	r30, 0x3d	; 61
   16466:	fe b7       	in	r31, 0x3e	; 62
   16468:	84 83       	std	Z+4, r24	; 0x04
   1646a:	95 83       	std	Z+5, r25	; 0x05
   1646c:	a6 83       	std	Z+6, r26	; 0x06
   1646e:	b7 83       	std	Z+7, r27	; 0x07
   16470:	83 ee       	ldi	r24, 0xE3	; 227
   16472:	97 e2       	ldi	r25, 0x27	; 39
   16474:	a0 e0       	ldi	r26, 0x00	; 0
   16476:	81 83       	std	Z+1, r24	; 0x01
   16478:	92 83       	std	Z+2, r25	; 0x02
   1647a:	a3 83       	std	Z+3, r26	; 0x03
   1647c:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
#endif
    }

    SS80s->AddressBlocks = SS80_Bytes_to_Blocks(Address);
   16480:	00 91 66 19 	lds	r16, 0x1966	; 0x801966 <SS80s>
   16484:	10 91 67 19 	lds	r17, 0x1967	; 0x801967 <SS80s+0x1>

/// @brief  SS80 Return current block addresss from bytes
/// @return Block Address
uint32_t SS80_Bytes_to_Blocks(uint32_t bytes)
{
    return(bytes / SS80p->UNIT.BYTES_PER_BLOCK);
   16488:	e0 91 68 19 	lds	r30, 0x1968	; 0x801968 <SS80p>
   1648c:	f0 91 69 19 	lds	r31, 0x1969	; 0x801969 <SS80p+0x1>
        if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
            printf("[SS80 Buffered Read Total(%lXH) bytes]\n", (long) total_bytes);
#endif
    }

    SS80s->AddressBlocks = SS80_Bytes_to_Blocks(Address);
   16490:	22 89       	ldd	r18, Z+18	; 0x12
   16492:	33 89       	ldd	r19, Z+19	; 0x13
   16494:	40 e0       	ldi	r20, 0x00	; 0
   16496:	50 e0       	ldi	r21, 0x00	; 0
   16498:	c5 01       	movw	r24, r10
   1649a:	b4 01       	movw	r22, r8
   1649c:	0e 94 37 e8 	call	0x1d06e	; 0x1d06e <__udivmodsi4>
   164a0:	f8 01       	movw	r30, r16
   164a2:	27 83       	std	Z+7, r18	; 0x07
   164a4:	30 87       	std	Z+8, r19	; 0x08
   164a6:	41 87       	std	Z+9, r20	; 0x09
   164a8:	52 87       	std	Z+10, r21	; 0x0a
    return (status & ERROR_MASK);
   164aa:	8c 85       	ldd	r24, Y+12	; 0x0c
   164ac:	9d 85       	ldd	r25, Y+13	; 0x0d
   164ae:	88 27       	eor	r24, r24
   164b0:	90 7d       	andi	r25, 0xD0	; 208
}
   164b2:	67 96       	adiw	r28, 0x17	; 23
   164b4:	e1 e1       	ldi	r30, 0x11	; 17
   164b6:	0c 94 c1 e8 	jmp	0x1d182	; 0x1d182 <__epilogue_restores__+0x2>

000164ba <SS80_Execute_State>:
/// - State: EXEC STATE COMMAND
/// @return 0 on sucess
/// @return GPIB error flags on fail
/// @see gpib.h ERROR_MASK defines for a full list of error flags.
int SS80_Execute_State(void)
{
   164ba:	cf 93       	push	r28
   164bc:	df 93       	push	r29
   164be:	00 d0       	rcall	.+0      	; 0x164c0 <SS80_Execute_State+0x6>
   164c0:	00 d0       	rcall	.+0      	; 0x164c2 <SS80_Execute_State+0x8>
   164c2:	1f 92       	push	r1
    int ret = 0;

    gpib_disable_PPR(SS80p->HEADER.PPR);
   164c4:	e0 91 68 19 	lds	r30, 0x1968	; 0x801968 <SS80p>
   164c8:	f0 91 69 19 	lds	r31, 0x1969	; 0x801969 <SS80p+0x1>
   164cc:	81 81       	ldd	r24, Z+1	; 0x01
   164ce:	90 e0       	ldi	r25, 0x00	; 0
   164d0:	0e 94 8c 87 	call	0x10f18	; 0x10f18 <gpib_disable_PPR>
    switch(SS80s->estate)
   164d4:	e0 91 66 19 	lds	r30, 0x1966	; 0x801966 <SS80s>
   164d8:	f0 91 67 19 	lds	r31, 0x1967	; 0x801967 <SS80s+0x1>
   164dc:	80 81       	ld	r24, Z
   164de:	91 81       	ldd	r25, Z+1	; 0x01
   164e0:	82 30       	cpi	r24, 0x02	; 2
   164e2:	91 05       	cpc	r25, r1
   164e4:	89 f0       	breq	.+34     	; 0x16508 <SS80_Execute_State+0x4e>
   164e6:	3c f4       	brge	.+14     	; 0x164f6 <SS80_Execute_State+0x3c>
   164e8:	00 97       	sbiw	r24, 0x00	; 0
   164ea:	81 f1       	breq	.+96     	; 0x1654c <SS80_Execute_State+0x92>
   164ec:	81 30       	cpi	r24, 0x01	; 1
   164ee:	91 05       	cpc	r25, r1
   164f0:	b9 f4       	brne	.+46     	; 0x16520 <SS80_Execute_State+0x66>
    {
        case EXEC_IDLE:
            break;
        case EXEC_LOCATE_AND_READ:
            ret = SS80_locate_and_read();
   164f2:	81 de       	rcall	.-766    	; 0x161f6 <SS80_locate_and_read>
   164f4:	0d c0       	rjmp	.+26     	; 0x16510 <SS80_Execute_State+0x56>
int SS80_Execute_State(void)
{
    int ret = 0;

    gpib_disable_PPR(SS80p->HEADER.PPR);
    switch(SS80s->estate)
   164f6:	83 30       	cpi	r24, 0x03	; 3
   164f8:	91 05       	cpc	r25, r1
   164fa:	41 f0       	breq	.+16     	; 0x1650c <SS80_Execute_State+0x52>
   164fc:	84 30       	cpi	r24, 0x04	; 4
   164fe:	91 05       	cpc	r25, r1
   16500:	79 f4       	brne	.+30     	; 0x16520 <SS80_Execute_State+0x66>
        case EXEC_SEND_STATUS:
            ret = SS80_send_status();
            SS80s->estate = EXEC_IDLE;
            break;
        case EXEC_DESCRIBE:
            ret = SS80_describe();
   16502:	0e 94 2c a9 	call	0x15258	; 0x15258 <SS80_describe>
        case EXEC_LOCATE_AND_READ:
            ret = SS80_locate_and_read();
            SS80s->estate = EXEC_IDLE;
            break;
        case EXEC_LOCATE_AND_WRITE:
            ret = SS80_locate_and_write();
   16506:	04 c0       	rjmp	.+8      	; 0x16510 <SS80_Execute_State+0x56>
   16508:	53 da       	rcall	.-2906   	; 0x159b0 <SS80_locate_and_write>
   1650a:	02 c0       	rjmp	.+4      	; 0x16510 <SS80_Execute_State+0x56>
            SS80s->estate = EXEC_IDLE;
            break;
        case EXEC_SEND_STATUS:
            ret = SS80_send_status();
   1650c:	0e 94 ab a8 	call	0x15156	; 0x15156 <SS80_send_status>
            SS80s->estate = EXEC_IDLE;
            break;
        case EXEC_DESCRIBE:
            ret = SS80_describe();
   16510:	ec 01       	movw	r28, r24
            SS80s->estate = EXEC_IDLE;
   16512:	e0 91 66 19 	lds	r30, 0x1966	; 0x801966 <SS80s>
   16516:	f0 91 67 19 	lds	r31, 0x1967	; 0x801967 <SS80s+0x1>
   1651a:	11 82       	std	Z+1, r1	; 0x01
   1651c:	10 82       	st	Z, r1
            break;
   1651e:	18 c0       	rjmp	.+48     	; 0x16550 <SS80_Execute_State+0x96>
        default:
            if(debuglevel & GPIB_ERR)
   16520:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   16524:	20 ff       	sbrs	r18, 0
   16526:	0c c0       	rjmp	.+24     	; 0x16540 <SS80_Execute_State+0x86>
                printf("[SS80 EXEC state:%d error]\n", SS80s->estate);
   16528:	ed b7       	in	r30, 0x3d	; 61
   1652a:	fe b7       	in	r31, 0x3e	; 62
   1652c:	95 83       	std	Z+5, r25	; 0x05
   1652e:	84 83       	std	Z+4, r24	; 0x04
   16530:	87 ea       	ldi	r24, 0xA7	; 167
   16532:	98 e2       	ldi	r25, 0x28	; 40
   16534:	a0 e0       	ldi	r26, 0x00	; 0
   16536:	81 83       	std	Z+1, r24	; 0x01
   16538:	92 83       	std	Z+2, r25	; 0x02
   1653a:	a3 83       	std	Z+3, r26	; 0x03
   1653c:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
            SS80s->estate = EXEC_IDLE;
   16540:	e0 91 66 19 	lds	r30, 0x1966	; 0x801966 <SS80s>
   16544:	f0 91 67 19 	lds	r31, 0x1967	; 0x801967 <SS80s+0x1>
   16548:	11 82       	std	Z+1, r1	; 0x01
   1654a:	10 82       	st	Z, r1
/// @return 0 on sucess
/// @return GPIB error flags on fail
/// @see gpib.h ERROR_MASK defines for a full list of error flags.
int SS80_Execute_State(void)
{
    int ret = 0;
   1654c:	c0 e0       	ldi	r28, 0x00	; 0
   1654e:	d0 e0       	ldi	r29, 0x00	; 0
            if(debuglevel & GPIB_ERR)
                printf("[SS80 EXEC state:%d error]\n", SS80s->estate);
            SS80s->estate = EXEC_IDLE;
            break;
    }
    gpib_enable_PPR(SS80p->HEADER.PPR);
   16550:	e0 91 68 19 	lds	r30, 0x1968	; 0x801968 <SS80p>
   16554:	f0 91 69 19 	lds	r31, 0x1969	; 0x801969 <SS80p+0x1>
   16558:	81 81       	ldd	r24, Z+1	; 0x01
   1655a:	90 e0       	ldi	r25, 0x00	; 0
   1655c:	0e 94 56 87 	call	0x10eac	; 0x10eac <gpib_enable_PPR>
    return(ret);
}
   16560:	ce 01       	movw	r24, r28
   16562:	cd b7       	in	r28, 0x3d	; 61
   16564:	de b7       	in	r29, 0x3e	; 62
   16566:	25 96       	adiw	r28, 0x05	; 5
   16568:	e2 e0       	ldi	r30, 0x02	; 2
   1656a:	0c 94 d0 e8 	jmp	0x1d1a0	; 0x1d1a0 <__epilogue_restores__+0x20>

0001656e <SS80_COMMANDS>:
/// @param[in] ch command.
/// @return  0 on send
/// @see GPIB error status
/// @see gpib.h _FLAGS defines for a full list.
int SS80_COMMANDS(uint8_t ch)
{
   1656e:	a9 e0       	ldi	r26, 0x09	; 9
   16570:	b0 e0       	ldi	r27, 0x00	; 0
   16572:	ed eb       	ldi	r30, 0xBD	; 189
   16574:	f2 eb       	ldi	r31, 0xB2	; 178
   16576:	0c 94 b3 e8 	jmp	0x1d166	; 0x1d166 <__prologue_saves__+0x1e>
   1657a:	18 2f       	mov	r17, r24
    if(SS80_is_MTA(talking) || SS80_is_MLA(listening))
   1657c:	80 91 ee 1e 	lds	r24, 0x1EEE	; 0x801eee <talking>
   16580:	90 e0       	ldi	r25, 0x00	; 0
   16582:	0e 94 98 8d 	call	0x11b30	; 0x11b30 <SS80_is_MTA>
   16586:	89 2b       	or	r24, r25
   16588:	19 f0       	breq	.+6      	; 0x16590 <SS80_COMMANDS+0x22>
    {
        if(ch == 0x65 )
   1658a:	15 36       	cpi	r17, 0x65	; 101
   1658c:	19 f5       	brne	.+70     	; 0x165d4 <SS80_COMMANDS+0x66>
   1658e:	09 c0       	rjmp	.+18     	; 0x165a2 <SS80_COMMANDS+0x34>
/// @return  0 on send
/// @see GPIB error status
/// @see gpib.h _FLAGS defines for a full list.
int SS80_COMMANDS(uint8_t ch)
{
    if(SS80_is_MTA(talking) || SS80_is_MLA(listening))
   16590:	80 91 f0 1e 	lds	r24, 0x1EF0	; 0x801ef0 <listening>
   16594:	90 e0       	ldi	r25, 0x00	; 0
   16596:	0e 94 86 8d 	call	0x11b0c	; 0x11b0c <SS80_is_MLA>
   1659a:	ec 01       	movw	r28, r24
   1659c:	89 2b       	or	r24, r25
   1659e:	a9 f7       	brne	.-22     	; 0x1658a <SS80_COMMANDS+0x1c>
   165a0:	ad c0       	rjmp	.+346    	; 0x166fc <SS80_COMMANDS+0x18e>
    {
        if(ch == 0x65 )
        {
            if(SS80_is_MLA(listening))
   165a2:	80 91 f0 1e 	lds	r24, 0x1EF0	; 0x801ef0 <listening>
   165a6:	90 e0       	ldi	r25, 0x00	; 0
   165a8:	0e 94 86 8d 	call	0x11b0c	; 0x11b0c <SS80_is_MLA>
   165ac:	89 2b       	or	r24, r25
   165ae:	09 f4       	brne	.+2      	; 0x165b2 <SS80_COMMANDS+0x44>
   165b0:	a2 c0       	rjmp	.+324    	; 0x166f6 <SS80_COMMANDS+0x188>
            {
#if SDEBUG
                if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   165b2:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   165b6:	85 ff       	sbrs	r24, 5
   165b8:	0a c0       	rjmp	.+20     	; 0x165ce <SS80_COMMANDS+0x60>
                    printf("[SS80 Command State]\n");
   165ba:	8f e8       	ldi	r24, 0x8F	; 143
   165bc:	91 e2       	ldi	r25, 0x21	; 33
   165be:	a0 e0       	ldi	r26, 0x00	; 0
   165c0:	ed b7       	in	r30, 0x3d	; 61
   165c2:	fe b7       	in	r31, 0x3e	; 62
   165c4:	81 83       	std	Z+1, r24	; 0x01
   165c6:	92 83       	std	Z+2, r25	; 0x02
   165c8:	a3 83       	std	Z+3, r26	; 0x03
   165ca:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
#endif
                return ( SS80_Command_State() );
   165ce:	0e 94 ec a9 	call	0x153d8	; 0x153d8 <SS80_Command_State>
   165d2:	73 c0       	rjmp	.+230    	; 0x166ba <SS80_COMMANDS+0x14c>
            }
            return(0);
        }

        if(ch == 0x6e )
   165d4:	1e 36       	cpi	r17, 0x6E	; 110
   165d6:	01 f5       	brne	.+64     	; 0x16618 <SS80_COMMANDS+0xaa>
        {
            if(SS80_is_MLA(listening)  || SS80_is_MTA(talking))
   165d8:	80 91 f0 1e 	lds	r24, 0x1EF0	; 0x801ef0 <listening>
   165dc:	90 e0       	ldi	r25, 0x00	; 0
   165de:	0e 94 86 8d 	call	0x11b0c	; 0x11b0c <SS80_is_MLA>
   165e2:	89 2b       	or	r24, r25
   165e4:	79 f0       	breq	.+30     	; 0x16604 <SS80_COMMANDS+0x96>
            {
                if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   165e6:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   165ea:	85 ff       	sbrs	r24, 5
   165ec:	13 c0       	rjmp	.+38     	; 0x16614 <SS80_COMMANDS+0xa6>
                    printf("[SS00 Execute State]\n");
   165ee:	89 e7       	ldi	r24, 0x79	; 121
   165f0:	91 e2       	ldi	r25, 0x21	; 33
   165f2:	a0 e0       	ldi	r26, 0x00	; 0
   165f4:	ed b7       	in	r30, 0x3d	; 61
   165f6:	fe b7       	in	r31, 0x3e	; 62
   165f8:	81 83       	std	Z+1, r24	; 0x01
   165fa:	92 83       	std	Z+2, r25	; 0x02
   165fc:	a3 83       	std	Z+3, r26	; 0x03
   165fe:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
   16602:	08 c0       	rjmp	.+16     	; 0x16614 <SS80_COMMANDS+0xa6>
            return(0);
        }

        if(ch == 0x6e )
        {
            if(SS80_is_MLA(listening)  || SS80_is_MTA(talking))
   16604:	80 91 ee 1e 	lds	r24, 0x1EEE	; 0x801eee <talking>
   16608:	90 e0       	ldi	r25, 0x00	; 0
   1660a:	0e 94 98 8d 	call	0x11b30	; 0x11b30 <SS80_is_MTA>
   1660e:	89 2b       	or	r24, r25
   16610:	51 f7       	brne	.-44     	; 0x165e6 <SS80_COMMANDS+0x78>
   16612:	71 c0       	rjmp	.+226    	; 0x166f6 <SS80_COMMANDS+0x188>
            {
                if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
                    printf("[SS00 Execute State]\n");
                return ( SS80_Execute_State() );
   16614:	52 df       	rcall	.-348    	; 0x164ba <SS80_Execute_State>
   16616:	51 c0       	rjmp	.+162    	; 0x166ba <SS80_COMMANDS+0x14c>

            }
            return(0);
        }

        if(ch == 0x70 )
   16618:	10 37       	cpi	r17, 0x70	; 112
   1661a:	b9 f5       	brne	.+110    	; 0x1668a <SS80_COMMANDS+0x11c>
        {
            if(SS80_is_MTA(talking) )
   1661c:	80 91 ee 1e 	lds	r24, 0x1EEE	; 0x801eee <talking>
   16620:	90 e0       	ldi	r25, 0x00	; 0
   16622:	0e 94 98 8d 	call	0x11b30	; 0x11b30 <SS80_is_MTA>
   16626:	89 2b       	or	r24, r25
   16628:	81 f0       	breq	.+32     	; 0x1664a <SS80_COMMANDS+0xdc>
            {
#if SDEBUG
                if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   1662a:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1662e:	85 ff       	sbrs	r24, 5
   16630:	0a c0       	rjmp	.+20     	; 0x16646 <SS80_COMMANDS+0xd8>
                    printf("[SS80 Report State]\n");
   16632:	84 e6       	ldi	r24, 0x64	; 100
   16634:	91 e2       	ldi	r25, 0x21	; 33
   16636:	a0 e0       	ldi	r26, 0x00	; 0
   16638:	ed b7       	in	r30, 0x3d	; 61
   1663a:	fe b7       	in	r31, 0x3e	; 62
   1663c:	81 83       	std	Z+1, r24	; 0x01
   1663e:	92 83       	std	Z+2, r25	; 0x02
   16640:	a3 83       	std	Z+3, r26	; 0x03
   16642:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
#endif
                return( SS80_Report() );
   16646:	46 db       	rcall	.-2420   	; 0x15cd4 <SS80_Report>
   16648:	38 c0       	rjmp	.+112    	; 0x166ba <SS80_COMMANDS+0x14c>
            }

            if(SS80_is_MLA(listening))
   1664a:	80 91 f0 1e 	lds	r24, 0x1EF0	; 0x801ef0 <listening>
   1664e:	90 e0       	ldi	r25, 0x00	; 0
   16650:	0e 94 86 8d 	call	0x11b0c	; 0x11b0c <SS80_is_MLA>
   16654:	89 2b       	or	r24, r25
   16656:	09 f4       	brne	.+2      	; 0x1665a <SS80_COMMANDS+0xec>
   16658:	4e c0       	rjmp	.+156    	; 0x166f6 <SS80_COMMANDS+0x188>
            {
#if SDEBUG
                if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   1665a:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1665e:	85 ff       	sbrs	r24, 5
   16660:	0a c0       	rjmp	.+20     	; 0x16676 <SS80_COMMANDS+0x108>
                    printf("[Amigo Clear]\n");
   16662:	85 e5       	ldi	r24, 0x55	; 85
   16664:	91 e2       	ldi	r25, 0x21	; 33
   16666:	a0 e0       	ldi	r26, 0x00	; 0
   16668:	ed b7       	in	r30, 0x3d	; 61
   1666a:	fe b7       	in	r31, 0x3e	; 62
   1666c:	81 83       	std	Z+1, r24	; 0x01
   1666e:	92 83       	std	Z+2, r25	; 0x02
   16670:	a3 83       	std	Z+3, r26	; 0x03
   16672:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
#endif
                gpib_disable_PPR(SS80p->HEADER.PPR);
   16676:	e0 91 68 19 	lds	r30, 0x1968	; 0x801968 <SS80p>
   1667a:	f0 91 69 19 	lds	r31, 0x1969	; 0x801969 <SS80p+0x1>
   1667e:	81 81       	ldd	r24, Z+1	; 0x01
   16680:	90 e0       	ldi	r25, 0x00	; 0
   16682:	0e 94 8c 87 	call	0x10f18	; 0x10f18 <gpib_disable_PPR>
                return( SS80_Amigo_Clear() );
   16686:	1d dc       	rcall	.-1990   	; 0x15ec2 <SS80_Amigo_Clear>
   16688:	18 c0       	rjmp	.+48     	; 0x166ba <SS80_COMMANDS+0x14c>
            }
            return (0);
        }
        if(ch == 0x72 )
   1668a:	12 37       	cpi	r17, 0x72	; 114
   1668c:	c1 f4       	brne	.+48     	; 0x166be <SS80_COMMANDS+0x150>
        {
            if(SS80_is_MLA(listening) )
   1668e:	80 91 f0 1e 	lds	r24, 0x1EF0	; 0x801ef0 <listening>
   16692:	90 e0       	ldi	r25, 0x00	; 0
   16694:	0e 94 86 8d 	call	0x11b0c	; 0x11b0c <SS80_is_MLA>
   16698:	89 2b       	or	r24, r25
   1669a:	89 f0       	breq	.+34     	; 0x166be <SS80_COMMANDS+0x150>
            {
#if SDEBUG
                if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   1669c:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   166a0:	85 ff       	sbrs	r24, 5
   166a2:	0a c0       	rjmp	.+20     	; 0x166b8 <SS80_COMMANDS+0x14a>
                    printf("[SS80 Transparent]\n");
   166a4:	81 e4       	ldi	r24, 0x41	; 65
   166a6:	91 e2       	ldi	r25, 0x21	; 33
   166a8:	a0 e0       	ldi	r26, 0x00	; 0
   166aa:	ed b7       	in	r30, 0x3d	; 61
   166ac:	fe b7       	in	r31, 0x3e	; 62
   166ae:	81 83       	std	Z+1, r24	; 0x01
   166b0:	92 83       	std	Z+2, r25	; 0x02
   166b2:	a3 83       	std	Z+3, r26	; 0x03
   166b4:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
#endif
                return( SS80_Transparent_State() );
   166b8:	58 dc       	rcall	.-1872   	; 0x15f6a <SS80_Transparent_State>
   166ba:	ec 01       	movw	r28, r24
   166bc:	3b c0       	rjmp	.+118    	; 0x16734 <SS80_COMMANDS+0x1c6>
            }
        }
        if(debuglevel & GPIB_ERR)
   166be:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   166c2:	80 ff       	sbrs	r24, 0
   166c4:	18 c0       	rjmp	.+48     	; 0x166f6 <SS80_COMMANDS+0x188>
            printf("[SS80 SC Unknown: %02XH, listen:%02XH, talk:%02XH]\n",
   166c6:	80 91 ee 1e 	lds	r24, 0x1EEE	; 0x801eee <talking>
   166ca:	90 e0       	ldi	r25, 0x00	; 0
   166cc:	ed b7       	in	r30, 0x3d	; 61
   166ce:	fe b7       	in	r31, 0x3e	; 62
   166d0:	91 87       	std	Z+9, r25	; 0x09
   166d2:	80 87       	std	Z+8, r24	; 0x08
   166d4:	80 91 f0 1e 	lds	r24, 0x1EF0	; 0x801ef0 <listening>
   166d8:	90 e0       	ldi	r25, 0x00	; 0
   166da:	97 83       	std	Z+7, r25	; 0x07
   166dc:	86 83       	std	Z+6, r24	; 0x06
   166de:	81 2f       	mov	r24, r17
   166e0:	90 e0       	ldi	r25, 0x00	; 0
   166e2:	95 83       	std	Z+5, r25	; 0x05
   166e4:	84 83       	std	Z+4, r24	; 0x04
   166e6:	8d e0       	ldi	r24, 0x0D	; 13
   166e8:	91 e2       	ldi	r25, 0x21	; 33
   166ea:	a0 e0       	ldi	r26, 0x00	; 0
   166ec:	81 83       	std	Z+1, r24	; 0x01
   166ee:	92 83       	std	Z+2, r25	; 0x02
   166f0:	a3 83       	std	Z+3, r26	; 0x03
   166f2:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
                0xff & ch, 0xff & listening, 0xff & talking);
        return(0);
   166f6:	c0 e0       	ldi	r28, 0x00	; 0
   166f8:	d0 e0       	ldi	r29, 0x00	; 0
   166fa:	1c c0       	rjmp	.+56     	; 0x16734 <SS80_COMMANDS+0x1c6>
    }

    if(debuglevel & GPIB_ERR)
   166fc:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16700:	80 ff       	sbrs	r24, 0
   16702:	f9 cf       	rjmp	.-14     	; 0x166f6 <SS80_COMMANDS+0x188>
        printf("[SS80 Unknown SC: %02XH, listen:%02XH, talk:%02XH]\n",
   16704:	80 91 ee 1e 	lds	r24, 0x1EEE	; 0x801eee <talking>
   16708:	90 e0       	ldi	r25, 0x00	; 0
   1670a:	ed b7       	in	r30, 0x3d	; 61
   1670c:	fe b7       	in	r31, 0x3e	; 62
   1670e:	91 87       	std	Z+9, r25	; 0x09
   16710:	80 87       	std	Z+8, r24	; 0x08
   16712:	80 91 f0 1e 	lds	r24, 0x1EF0	; 0x801ef0 <listening>
   16716:	90 e0       	ldi	r25, 0x00	; 0
   16718:	97 83       	std	Z+7, r25	; 0x07
   1671a:	86 83       	std	Z+6, r24	; 0x06
   1671c:	81 2f       	mov	r24, r17
   1671e:	90 e0       	ldi	r25, 0x00	; 0
   16720:	95 83       	std	Z+5, r25	; 0x05
   16722:	84 83       	std	Z+4, r24	; 0x04
   16724:	89 ed       	ldi	r24, 0xD9	; 217
   16726:	90 e2       	ldi	r25, 0x20	; 32
   16728:	a0 e0       	ldi	r26, 0x00	; 0
   1672a:	81 83       	std	Z+1, r24	; 0x01
   1672c:	92 83       	std	Z+2, r25	; 0x02
   1672e:	a3 83       	std	Z+3, r26	; 0x03
   16730:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
            0xff & ch, 0xff & listening, 0xff & talking);
    return(0);
}
   16734:	ce 01       	movw	r24, r28
   16736:	cd b7       	in	r28, 0x3d	; 61
   16738:	de b7       	in	r29, 0x3e	; 62
   1673a:	29 96       	adiw	r28, 0x09	; 9
   1673c:	e3 e0       	ldi	r30, 0x03	; 3
   1673e:	0c 94 cf e8 	jmp	0x1d19e	; 0x1d19e <__epilogue_restores__+0x1e>

00016742 <amigo_overflow_check>:
    }
/// @todo FIXME
    gpib_enable_PPR(AMIGOp->HEADER.PPR);
    AMIGOs->dsj = 0;
    return(status & ERROR_MASK);
}
   16742:	cf 92       	push	r12
   16744:	df 92       	push	r13
   16746:	ef 92       	push	r14
   16748:	0f 93       	push	r16
   1674a:	1f 93       	push	r17
   1674c:	cf 93       	push	r28
   1674e:	df 93       	push	r29
   16750:	00 d0       	rcall	.+0      	; 0x16752 <amigo_overflow_check+0x10>
   16752:	00 d0       	rcall	.+0      	; 0x16754 <amigo_overflow_check+0x12>
   16754:	1f 92       	push	r1
   16756:	ec 01       	movw	r28, r24
   16758:	8b 01       	movw	r16, r22
   1675a:	80 e0       	ldi	r24, 0x00	; 0
   1675c:	90 e0       	ldi	r25, 0x00	; 0
   1675e:	21 e9       	ldi	r18, 0x91	; 145
   16760:	30 e3       	ldi	r19, 0x30	; 48
   16762:	69 01       	movw	r12, r18
   16764:	e1 2c       	mov	r14, r1
   16766:	2d 81       	ldd	r18, Y+5	; 0x05
   16768:	30 e0       	ldi	r19, 0x00	; 0
   1676a:	e0 91 64 19 	lds	r30, 0x1964	; 0x801964 <AMIGOp>
   1676e:	f0 91 65 19 	lds	r31, 0x1965	; 0x801965 <AMIGOp+0x1>
   16772:	42 85       	ldd	r20, Z+10	; 0x0a
   16774:	53 85       	ldd	r21, Z+11	; 0x0b
   16776:	24 17       	cp	r18, r20
   16778:	35 07       	cpc	r19, r21
   1677a:	64 f1       	brlt	.+88     	; 0x167d4 <amigo_overflow_check+0x92>
   1677c:	1d 82       	std	Y+5, r1	; 0x05
   1677e:	2c 81       	ldd	r18, Y+4	; 0x04
   16780:	2f 5f       	subi	r18, 0xFF	; 255
   16782:	2c 83       	std	Y+4, r18	; 0x04
   16784:	e0 91 64 19 	lds	r30, 0x1964	; 0x801964 <AMIGOp>
   16788:	f0 91 65 19 	lds	r31, 0x1965	; 0x801965 <AMIGOp+0x1>
   1678c:	2c 81       	ldd	r18, Y+4	; 0x04
   1678e:	30 e0       	ldi	r19, 0x00	; 0
   16790:	44 85       	ldd	r20, Z+12	; 0x0c
   16792:	55 85       	ldd	r21, Z+13	; 0x0d
   16794:	24 17       	cp	r18, r20
   16796:	35 07       	cpc	r19, r21
   16798:	34 f3       	brlt	.-52     	; 0x16766 <amigo_overflow_check+0x24>
   1679a:	1c 82       	std	Y+4, r1	; 0x04
   1679c:	2b 81       	ldd	r18, Y+3	; 0x03
   1679e:	2f 5f       	subi	r18, 0xFF	; 255
   167a0:	2b 83       	std	Y+3, r18	; 0x03
   167a2:	30 e0       	ldi	r19, 0x00	; 0
   167a4:	46 85       	ldd	r20, Z+14	; 0x0e
   167a6:	57 85       	ldd	r21, Z+15	; 0x0f
   167a8:	24 17       	cp	r18, r20
   167aa:	35 07       	cpc	r19, r21
   167ac:	5c f3       	brlt	.-42     	; 0x16784 <amigo_overflow_check+0x42>
   167ae:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   167b2:	80 ff       	sbrs	r24, 0
   167b4:	0c c0       	rjmp	.+24     	; 0x167ce <amigo_overflow_check+0x8c>
   167b6:	01 15       	cp	r16, r1
   167b8:	11 05       	cpc	r17, r1
   167ba:	49 f0       	breq	.+18     	; 0x167ce <amigo_overflow_check+0x8c>
   167bc:	ed b7       	in	r30, 0x3d	; 61
   167be:	fe b7       	in	r31, 0x3e	; 62
   167c0:	15 83       	std	Z+5, r17	; 0x05
   167c2:	04 83       	std	Z+4, r16	; 0x04
   167c4:	c1 82       	std	Z+1, r12	; 0x01
   167c6:	d2 82       	std	Z+2, r13	; 0x02
   167c8:	e3 82       	std	Z+3, r14	; 0x03
   167ca:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
   167ce:	81 e0       	ldi	r24, 0x01	; 1
   167d0:	90 e0       	ldi	r25, 0x00	; 0
   167d2:	d8 cf       	rjmp	.-80     	; 0x16784 <amigo_overflow_check+0x42>
   167d4:	0f 90       	pop	r0
   167d6:	0f 90       	pop	r0
   167d8:	0f 90       	pop	r0
   167da:	0f 90       	pop	r0
   167dc:	0f 90       	pop	r0
   167de:	df 91       	pop	r29
   167e0:	cf 91       	pop	r28
   167e2:	1f 91       	pop	r17
   167e4:	0f 91       	pop	r16
   167e6:	ef 90       	pop	r14
   167e8:	df 90       	pop	r13
   167ea:	cf 90       	pop	r12
   167ec:	08 95       	ret

000167ee <amigo_chs_to_logical>:
   167ee:	a1 e1       	ldi	r26, 0x11	; 17
   167f0:	b0 e0       	ldi	r27, 0x00	; 0
   167f2:	ed ef       	ldi	r30, 0xFD	; 253
   167f4:	f3 eb       	ldi	r31, 0xB3	; 179
   167f6:	0c 94 a8 e8 	jmp	0x1d150	; 0x1d150 <__prologue_saves__+0x8>
   167fa:	8b 01       	movw	r16, r22
   167fc:	60 91 64 19 	lds	r22, 0x1964	; 0x801964 <AMIGOp>
   16800:	70 91 65 19 	lds	r23, 0x1965	; 0x801965 <AMIGOp+0x1>
   16804:	fb 01       	movw	r30, r22
   16806:	42 85       	ldd	r20, Z+10	; 0x0a
   16808:	53 85       	ldd	r21, Z+11	; 0x0b
   1680a:	fc 01       	movw	r30, r24
   1680c:	c4 81       	ldd	r28, Z+4	; 0x04
   1680e:	d0 e0       	ldi	r29, 0x00	; 0
   16810:	4c 9f       	mul	r20, r28
   16812:	90 01       	movw	r18, r0
   16814:	4d 9f       	mul	r20, r29
   16816:	30 0d       	add	r19, r0
   16818:	5c 9f       	mul	r21, r28
   1681a:	30 0d       	add	r19, r0
   1681c:	11 24       	eor	r1, r1
   1681e:	49 01       	movw	r8, r18
   16820:	33 0f       	add	r19, r19
   16822:	aa 08       	sbc	r10, r10
   16824:	bb 08       	sbc	r11, r11
   16826:	63 80       	ldd	r6, Z+3	; 0x03
   16828:	71 2c       	mov	r7, r1
   1682a:	fb 01       	movw	r30, r22
   1682c:	e4 84       	ldd	r14, Z+12	; 0x0c
   1682e:	f5 84       	ldd	r15, Z+13	; 0x0d
   16830:	4e 9d       	mul	r20, r14
   16832:	d0 01       	movw	r26, r0
   16834:	4f 9d       	mul	r20, r15
   16836:	b0 0d       	add	r27, r0
   16838:	5e 9d       	mul	r21, r14
   1683a:	b0 0d       	add	r27, r0
   1683c:	11 24       	eor	r1, r1
   1683e:	a6 9d       	mul	r26, r6
   16840:	90 01       	movw	r18, r0
   16842:	a7 9d       	mul	r26, r7
   16844:	30 0d       	add	r19, r0
   16846:	b6 9d       	mul	r27, r6
   16848:	30 0d       	add	r19, r0
   1684a:	11 24       	eor	r1, r1
   1684c:	69 01       	movw	r12, r18
   1684e:	33 0f       	add	r19, r19
   16850:	ee 08       	sbc	r14, r14
   16852:	ff 08       	sbc	r15, r15
   16854:	8c 0c       	add	r8, r12
   16856:	9d 1c       	adc	r9, r13
   16858:	ae 1c       	adc	r10, r14
   1685a:	bf 1c       	adc	r11, r15
   1685c:	fc 01       	movw	r30, r24
   1685e:	f5 80       	ldd	r15, Z+5	; 0x05
   16860:	a5 01       	movw	r20, r10
   16862:	94 01       	movw	r18, r8
   16864:	2f 0d       	add	r18, r15
   16866:	31 1d       	adc	r19, r1
   16868:	41 1d       	adc	r20, r1
   1686a:	51 1d       	adc	r21, r1
   1686c:	fb 01       	movw	r30, r22
   1686e:	a0 85       	ldd	r26, Z+8	; 0x08
   16870:	b1 85       	ldd	r27, Z+9	; 0x09
   16872:	0e 94 8e e8 	call	0x1d11c	; 0x1d11c <__mulshisi3>
   16876:	4b 01       	movw	r8, r22
   16878:	5c 01       	movw	r10, r24
   1687a:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1687e:	85 ff       	sbrs	r24, 5
   16880:	22 c0       	rjmp	.+68     	; 0x168c6 <amigo_chs_to_logical+0xd8>
   16882:	8f 2d       	mov	r24, r15
   16884:	90 e0       	ldi	r25, 0x00	; 0
   16886:	ed b7       	in	r30, 0x3d	; 61
   16888:	fe b7       	in	r31, 0x3e	; 62
   1688a:	91 8b       	std	Z+17, r25	; 0x11
   1688c:	80 8b       	std	Z+16, r24	; 0x10
   1688e:	d7 87       	std	Z+15, r29	; 0x0f
   16890:	c6 87       	std	Z+14, r28	; 0x0e
   16892:	75 86       	std	Z+13, r7	; 0x0d
   16894:	64 86       	std	Z+12, r6	; 0x0c
   16896:	e0 91 62 19 	lds	r30, 0x1962	; 0x801962 <AMIGOs>
   1689a:	f0 91 63 19 	lds	r31, 0x1963	; 0x801963 <AMIGOs+0x1>
   1689e:	81 81       	ldd	r24, Z+1	; 0x01
   168a0:	90 e0       	ldi	r25, 0x00	; 0
   168a2:	ed b7       	in	r30, 0x3d	; 61
   168a4:	fe b7       	in	r31, 0x3e	; 62
   168a6:	93 87       	std	Z+11, r25	; 0x0b
   168a8:	82 87       	std	Z+10, r24	; 0x0a
   168aa:	86 82       	std	Z+6, r8	; 0x06
   168ac:	97 82       	std	Z+7, r9	; 0x07
   168ae:	a0 86       	std	Z+8, r10	; 0x08
   168b0:	b1 86       	std	Z+9, r11	; 0x09
   168b2:	15 83       	std	Z+5, r17	; 0x05
   168b4:	04 83       	std	Z+4, r16	; 0x04
   168b6:	8e e3       	ldi	r24, 0x3E	; 62
   168b8:	90 e3       	ldi	r25, 0x30	; 48
   168ba:	a0 e0       	ldi	r26, 0x00	; 0
   168bc:	81 83       	std	Z+1, r24	; 0x01
   168be:	92 83       	std	Z+2, r25	; 0x02
   168c0:	a3 83       	std	Z+3, r26	; 0x03
   168c2:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
   168c6:	c5 01       	movw	r24, r10
   168c8:	b4 01       	movw	r22, r8
   168ca:	cd b7       	in	r28, 0x3d	; 61
   168cc:	de b7       	in	r29, 0x3e	; 62
   168ce:	61 96       	adiw	r28, 0x11	; 17
   168d0:	ee e0       	ldi	r30, 0x0E	; 14
   168d2:	0c 94 c4 e8 	jmp	0x1d188	; 0x1d188 <__epilogue_restores__+0x8>

000168d6 <amigo_init>:
   168d6:	ff 92       	push	r15
   168d8:	0f 93       	push	r16
   168da:	1f 93       	push	r17
   168dc:	cf 93       	push	r28
   168de:	df 93       	push	r29
   168e0:	0d e6       	ldi	r16, 0x6D	; 109
   168e2:	1f e1       	ldi	r17, 0x1F	; 31
   168e4:	cb e0       	ldi	r28, 0x0B	; 11
   168e6:	d4 e0       	ldi	r29, 0x04	; 4
   168e8:	82 e0       	ldi	r24, 0x02	; 2
   168ea:	f8 2e       	mov	r15, r24
   168ec:	d8 01       	movw	r26, r16
   168ee:	8c 91       	ld	r24, X
   168f0:	81 30       	cpi	r24, 0x01	; 1
   168f2:	31 f5       	brne	.+76     	; 0x16940 <amigo_init+0x6a>
   168f4:	8c 2f       	mov	r24, r28
   168f6:	0e 94 44 98 	call	0x13088	; 0x13088 <set_active_device>
   168fa:	e0 91 62 19 	lds	r30, 0x1962	; 0x801962 <AMIGOs>
   168fe:	f0 91 63 19 	lds	r31, 0x1963	; 0x801963 <AMIGOs+0x1>
   16902:	10 82       	st	Z, r1
   16904:	9f 01       	movw	r18, r30
   16906:	27 5f       	subi	r18, 0xF7	; 247
   16908:	3f 4f       	sbci	r19, 0xFF	; 255
   1690a:	d9 01       	movw	r26, r18
   1690c:	8d 2f       	mov	r24, r29
   1690e:	1d 92       	st	X+, r1
   16910:	8a 95       	dec	r24
   16912:	e9 f7       	brne	.-6      	; 0x1690e <amigo_init+0x38>
   16914:	2c 5f       	subi	r18, 0xFC	; 252
   16916:	3f 4f       	sbci	r19, 0xFF	; 255
   16918:	d9 01       	movw	r26, r18
   1691a:	8d 2f       	mov	r24, r29
   1691c:	1d 92       	st	X+, r1
   1691e:	8a 95       	dec	r24
   16920:	e9 f7       	brne	.-6      	; 0x1691c <amigo_init+0x46>
   16922:	11 82       	std	Z+1, r1	; 0x01
   16924:	15 82       	std	Z+5, r1	; 0x05
   16926:	14 82       	std	Z+4, r1	; 0x04
   16928:	13 82       	std	Z+3, r1	; 0x03
   1692a:	f6 82       	std	Z+6, r15	; 0x06
   1692c:	10 86       	std	Z+8, r1	; 0x08
   1692e:	17 82       	std	Z+7, r1	; 0x07
   16930:	e0 91 64 19 	lds	r30, 0x1964	; 0x801964 <AMIGOp>
   16934:	f0 91 65 19 	lds	r31, 0x1965	; 0x801965 <AMIGOp+0x1>
   16938:	81 81       	ldd	r24, Z+1	; 0x01
   1693a:	90 e0       	ldi	r25, 0x00	; 0
   1693c:	0e 94 8c 87 	call	0x10f18	; 0x10f18 <gpib_disable_PPR>
   16940:	0b 50       	subi	r16, 0x0B	; 11
   16942:	11 09       	sbc	r17, r1
   16944:	c1 50       	subi	r28, 0x01	; 1
   16946:	90 f6       	brcc	.-92     	; 0x168ec <amigo_init+0x16>
   16948:	cd b7       	in	r28, 0x3d	; 61
   1694a:	de b7       	in	r29, 0x3e	; 62
   1694c:	e5 e0       	ldi	r30, 0x05	; 5
   1694e:	0c 94 cd e8 	jmp	0x1d19a	; 0x1d19a <__epilogue_restores__+0x1a>

00016952 <amigo_request_logical_address>:
   16952:	e0 91 62 19 	lds	r30, 0x1962	; 0x801962 <AMIGOs>
   16956:	f0 91 63 19 	lds	r31, 0x1963	; 0x801963 <AMIGOs+0x1>
   1695a:	15 86       	std	Z+13, r1	; 0x0d
   1695c:	83 81       	ldd	r24, Z+3	; 0x03
   1695e:	86 87       	std	Z+14, r24	; 0x0e
   16960:	84 81       	ldd	r24, Z+4	; 0x04
   16962:	87 87       	std	Z+15, r24	; 0x0f
   16964:	85 81       	ldd	r24, Z+5	; 0x05
   16966:	80 8b       	std	Z+16, r24	; 0x10
   16968:	80 e0       	ldi	r24, 0x00	; 0
   1696a:	90 e0       	ldi	r25, 0x00	; 0
   1696c:	08 95       	ret

0001696e <amigo_request_status>:
   1696e:	00 d0       	rcall	.+0      	; 0x16970 <amigo_request_status+0x2>
   16970:	1f 92       	push	r1
   16972:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16976:	85 ff       	sbrs	r24, 5
   16978:	0a c0       	rjmp	.+20     	; 0x1698e <amigo_request_status+0x20>
   1697a:	81 e1       	ldi	r24, 0x11	; 17
   1697c:	91 e3       	ldi	r25, 0x31	; 49
   1697e:	a0 e0       	ldi	r26, 0x00	; 0
   16980:	ed b7       	in	r30, 0x3d	; 61
   16982:	fe b7       	in	r31, 0x3e	; 62
   16984:	81 83       	std	Z+1, r24	; 0x01
   16986:	92 83       	std	Z+2, r25	; 0x02
   16988:	a3 83       	std	Z+3, r26	; 0x03
   1698a:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
   1698e:	e0 91 62 19 	lds	r30, 0x1962	; 0x801962 <AMIGOs>
   16992:	f0 91 63 19 	lds	r31, 0x1963	; 0x801963 <AMIGOs+0x1>
   16996:	11 86       	std	Z+9, r1	; 0x09
   16998:	81 81       	ldd	r24, Z+1	; 0x01
   1699a:	82 87       	std	Z+10, r24	; 0x0a
   1699c:	8d e0       	ldi	r24, 0x0D	; 13
   1699e:	83 87       	std	Z+11, r24	; 0x0b
   169a0:	14 86       	std	Z+12, r1	; 0x0c
   169a2:	0e 94 ec 70 	call	0xe1d8	; 0xe1d8 <mmc_wp_status>
   169a6:	e0 91 62 19 	lds	r30, 0x1962	; 0x801962 <AMIGOs>
   169aa:	f0 91 63 19 	lds	r31, 0x1963	; 0x801963 <AMIGOs+0x1>
   169ae:	89 2b       	or	r24, r25
   169b0:	19 f0       	breq	.+6      	; 0x169b8 <amigo_request_status+0x4a>
   169b2:	84 85       	ldd	r24, Z+12	; 0x0c
   169b4:	80 66       	ori	r24, 0x60	; 96
   169b6:	84 87       	std	Z+12, r24	; 0x0c
   169b8:	86 81       	ldd	r24, Z+6	; 0x06
   169ba:	82 30       	cpi	r24, 0x02	; 2
   169bc:	31 f4       	brne	.+12     	; 0x169ca <amigo_request_status+0x5c>
   169be:	83 e1       	ldi	r24, 0x13	; 19
   169c0:	81 87       	std	Z+9, r24	; 0x09
   169c2:	84 85       	ldd	r24, Z+12	; 0x0c
   169c4:	88 60       	ori	r24, 0x08	; 8
   169c6:	84 87       	std	Z+12, r24	; 0x0c
   169c8:	21 c0       	rjmp	.+66     	; 0x16a0c <amigo_request_status+0x9e>
   169ca:	27 81       	ldd	r18, Z+7	; 0x07
   169cc:	30 85       	ldd	r19, Z+8	; 0x08
   169ce:	21 15       	cp	r18, r1
   169d0:	31 05       	cpc	r19, r1
   169d2:	11 f4       	brne	.+4      	; 0x169d8 <amigo_request_status+0x6a>
   169d4:	81 30       	cpi	r24, 0x01	; 1
   169d6:	d1 f4       	brne	.+52     	; 0x16a0c <amigo_request_status+0x9e>
   169d8:	26 fd       	sbrc	r18, 6
   169da:	0c c0       	rjmp	.+24     	; 0x169f4 <amigo_request_status+0x86>
   169dc:	25 ff       	sbrs	r18, 5
   169de:	03 c0       	rjmp	.+6      	; 0x169e6 <amigo_request_status+0x78>
   169e0:	8a e0       	ldi	r24, 0x0A	; 10
   169e2:	81 87       	std	Z+9, r24	; 0x09
   169e4:	0d c0       	rjmp	.+26     	; 0x16a00 <amigo_request_status+0x92>
   169e6:	84 85       	ldd	r24, Z+12	; 0x0c
   169e8:	24 ff       	sbrs	r18, 4
   169ea:	02 c0       	rjmp	.+4      	; 0x169f0 <amigo_request_status+0x82>
   169ec:	83 60       	ori	r24, 0x03	; 3
   169ee:	07 c0       	rjmp	.+14     	; 0x169fe <amigo_request_status+0x90>
   169f0:	21 ff       	sbrs	r18, 1
   169f2:	02 c0       	rjmp	.+4      	; 0x169f8 <amigo_request_status+0x8a>
   169f4:	83 e1       	ldi	r24, 0x13	; 19
   169f6:	f5 cf       	rjmp	.-22     	; 0x169e2 <amigo_request_status+0x74>
   169f8:	22 ff       	sbrs	r18, 2
   169fa:	02 c0       	rjmp	.+4      	; 0x16a00 <amigo_request_status+0x92>
   169fc:	84 60       	ori	r24, 0x04	; 4
   169fe:	84 87       	std	Z+12, r24	; 0x0c
   16a00:	84 85       	ldd	r24, Z+12	; 0x0c
   16a02:	80 61       	ori	r24, 0x10	; 16
   16a04:	84 87       	std	Z+12, r24	; 0x0c
   16a06:	83 85       	ldd	r24, Z+11	; 0x0b
   16a08:	80 68       	ori	r24, 0x80	; 128
   16a0a:	83 87       	std	Z+11, r24	; 0x0b
   16a0c:	e0 91 64 19 	lds	r30, 0x1964	; 0x801964 <AMIGOp>
   16a10:	f0 91 65 19 	lds	r31, 0x1965	; 0x801965 <AMIGOp+0x1>
   16a14:	81 81       	ldd	r24, Z+1	; 0x01
   16a16:	90 e0       	ldi	r25, 0x00	; 0
   16a18:	0e 94 56 87 	call	0x10eac	; 0x10eac <gpib_enable_PPR>
   16a1c:	80 e0       	ldi	r24, 0x00	; 0
   16a1e:	90 e0       	ldi	r25, 0x00	; 0
   16a20:	0f 90       	pop	r0
   16a22:	0f 90       	pop	r0
   16a24:	0f 90       	pop	r0
   16a26:	08 95       	ret

00016a28 <amigo_send_logical_address>:
   16a28:	a5 e0       	ldi	r26, 0x05	; 5
   16a2a:	b0 e0       	ldi	r27, 0x00	; 0
   16a2c:	ea e1       	ldi	r30, 0x1A	; 26
   16a2e:	f5 eb       	ldi	r31, 0xB5	; 181
   16a30:	0c 94 b4 e8 	jmp	0x1d168	; 0x1d168 <__prologue_saves__+0x20>
   16a34:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16a38:	85 ff       	sbrs	r24, 5
   16a3a:	0a c0       	rjmp	.+20     	; 0x16a50 <amigo_send_logical_address+0x28>
   16a3c:	83 ef       	ldi	r24, 0xF3	; 243
   16a3e:	90 e3       	ldi	r25, 0x30	; 48
   16a40:	a0 e0       	ldi	r26, 0x00	; 0
   16a42:	ed b7       	in	r30, 0x3d	; 61
   16a44:	fe b7       	in	r31, 0x3e	; 62
   16a46:	81 83       	std	Z+1, r24	; 0x01
   16a48:	92 83       	std	Z+2, r25	; 0x02
   16a4a:	a3 83       	std	Z+3, r26	; 0x03
   16a4c:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
   16a50:	80 e0       	ldi	r24, 0x00	; 0
   16a52:	91 e0       	ldi	r25, 0x01	; 1
   16a54:	9d 83       	std	Y+5, r25	; 0x05
   16a56:	8c 83       	std	Y+4, r24	; 0x04
   16a58:	80 91 62 19 	lds	r24, 0x1962	; 0x801962 <AMIGOs>
   16a5c:	90 91 63 19 	lds	r25, 0x1963	; 0x801963 <AMIGOs+0x1>
   16a60:	ae 01       	movw	r20, r28
   16a62:	4c 5f       	subi	r20, 0xFC	; 252
   16a64:	5f 4f       	sbci	r21, 0xFF	; 255
   16a66:	64 e0       	ldi	r22, 0x04	; 4
   16a68:	70 e0       	ldi	r23, 0x00	; 0
   16a6a:	0d 96       	adiw	r24, 0x0d	; 13
   16a6c:	0e 94 86 8c 	call	0x1190c	; 0x1190c <gpib_write_str>
   16a70:	2c 81       	ldd	r18, Y+4	; 0x04
   16a72:	3d 81       	ldd	r19, Y+5	; 0x05
   16a74:	22 27       	eor	r18, r18
   16a76:	30 7d       	andi	r19, 0xD0	; 208
   16a78:	23 2b       	or	r18, r19
   16a7a:	11 f4       	brne	.+4      	; 0x16a80 <amigo_send_logical_address+0x58>
   16a7c:	04 97       	sbiw	r24, 0x04	; 4
   16a7e:	c9 f0       	breq	.+50     	; 0x16ab2 <amigo_send_logical_address+0x8a>
   16a80:	e0 91 62 19 	lds	r30, 0x1962	; 0x801962 <AMIGOs>
   16a84:	f0 91 63 19 	lds	r31, 0x1963	; 0x801963 <AMIGOs+0x1>
   16a88:	87 81       	ldd	r24, Z+7	; 0x07
   16a8a:	90 85       	ldd	r25, Z+8	; 0x08
   16a8c:	80 62       	ori	r24, 0x20	; 32
   16a8e:	90 87       	std	Z+8, r25	; 0x08
   16a90:	87 83       	std	Z+7, r24	; 0x07
   16a92:	81 e0       	ldi	r24, 0x01	; 1
   16a94:	86 83       	std	Z+6, r24	; 0x06
   16a96:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16a9a:	80 ff       	sbrs	r24, 0
   16a9c:	0a c0       	rjmp	.+20     	; 0x16ab2 <amigo_send_logical_address+0x8a>
   16a9e:	89 ed       	ldi	r24, 0xD9	; 217
   16aa0:	90 e3       	ldi	r25, 0x30	; 48
   16aa2:	a0 e0       	ldi	r26, 0x00	; 0
   16aa4:	ed b7       	in	r30, 0x3d	; 61
   16aa6:	fe b7       	in	r31, 0x3e	; 62
   16aa8:	81 83       	std	Z+1, r24	; 0x01
   16aaa:	92 83       	std	Z+2, r25	; 0x02
   16aac:	a3 83       	std	Z+3, r26	; 0x03
   16aae:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
   16ab2:	e0 91 64 19 	lds	r30, 0x1964	; 0x801964 <AMIGOp>
   16ab6:	f0 91 65 19 	lds	r31, 0x1965	; 0x801965 <AMIGOp+0x1>
   16aba:	81 81       	ldd	r24, Z+1	; 0x01
   16abc:	90 e0       	ldi	r25, 0x00	; 0
   16abe:	0e 94 56 87 	call	0x10eac	; 0x10eac <gpib_enable_PPR>
   16ac2:	8c 81       	ldd	r24, Y+4	; 0x04
   16ac4:	9d 81       	ldd	r25, Y+5	; 0x05
   16ac6:	88 27       	eor	r24, r24
   16ac8:	90 7d       	andi	r25, 0xD0	; 208
   16aca:	25 96       	adiw	r28, 0x05	; 5
   16acc:	e2 e0       	ldi	r30, 0x02	; 2
   16ace:	0c 94 d0 e8 	jmp	0x1d1a0	; 0x1d1a0 <__epilogue_restores__+0x20>

00016ad2 <amigo_send_status>:
   16ad2:	a5 e0       	ldi	r26, 0x05	; 5
   16ad4:	b0 e0       	ldi	r27, 0x00	; 0
   16ad6:	ef e6       	ldi	r30, 0x6F	; 111
   16ad8:	f5 eb       	ldi	r31, 0xB5	; 181
   16ada:	0c 94 b4 e8 	jmp	0x1d168	; 0x1d168 <__prologue_saves__+0x20>
   16ade:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16ae2:	85 ff       	sbrs	r24, 5
   16ae4:	0a c0       	rjmp	.+20     	; 0x16afa <amigo_send_status+0x28>
   16ae6:	84 ec       	ldi	r24, 0xC4	; 196
   16ae8:	90 e3       	ldi	r25, 0x30	; 48
   16aea:	a0 e0       	ldi	r26, 0x00	; 0
   16aec:	ed b7       	in	r30, 0x3d	; 61
   16aee:	fe b7       	in	r31, 0x3e	; 62
   16af0:	81 83       	std	Z+1, r24	; 0x01
   16af2:	92 83       	std	Z+2, r25	; 0x02
   16af4:	a3 83       	std	Z+3, r26	; 0x03
   16af6:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
   16afa:	80 e0       	ldi	r24, 0x00	; 0
   16afc:	91 e0       	ldi	r25, 0x01	; 1
   16afe:	9d 83       	std	Y+5, r25	; 0x05
   16b00:	8c 83       	std	Y+4, r24	; 0x04
   16b02:	80 91 62 19 	lds	r24, 0x1962	; 0x801962 <AMIGOs>
   16b06:	90 91 63 19 	lds	r25, 0x1963	; 0x801963 <AMIGOs+0x1>
   16b0a:	ae 01       	movw	r20, r28
   16b0c:	4c 5f       	subi	r20, 0xFC	; 252
   16b0e:	5f 4f       	sbci	r21, 0xFF	; 255
   16b10:	64 e0       	ldi	r22, 0x04	; 4
   16b12:	70 e0       	ldi	r23, 0x00	; 0
   16b14:	09 96       	adiw	r24, 0x09	; 9
   16b16:	0e 94 86 8c 	call	0x1190c	; 0x1190c <gpib_write_str>
   16b1a:	2c 81       	ldd	r18, Y+4	; 0x04
   16b1c:	3d 81       	ldd	r19, Y+5	; 0x05
   16b1e:	22 27       	eor	r18, r18
   16b20:	30 7d       	andi	r19, 0xD0	; 208
   16b22:	e0 91 62 19 	lds	r30, 0x1962	; 0x801962 <AMIGOs>
   16b26:	f0 91 63 19 	lds	r31, 0x1963	; 0x801963 <AMIGOs+0x1>
   16b2a:	23 2b       	or	r18, r19
   16b2c:	11 f4       	brne	.+4      	; 0x16b32 <amigo_send_status+0x60>
   16b2e:	04 97       	sbiw	r24, 0x04	; 4
   16b30:	b1 f0       	breq	.+44     	; 0x16b5e <amigo_send_status+0x8c>
   16b32:	87 81       	ldd	r24, Z+7	; 0x07
   16b34:	90 85       	ldd	r25, Z+8	; 0x08
   16b36:	80 62       	ori	r24, 0x20	; 32
   16b38:	90 87       	std	Z+8, r25	; 0x08
   16b3a:	87 83       	std	Z+7, r24	; 0x07
   16b3c:	81 e0       	ldi	r24, 0x01	; 1
   16b3e:	86 83       	std	Z+6, r24	; 0x06
   16b40:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16b44:	80 ff       	sbrs	r24, 0
   16b46:	0e c0       	rjmp	.+28     	; 0x16b64 <amigo_send_status+0x92>
   16b48:	8a ea       	ldi	r24, 0xAA	; 170
   16b4a:	90 e3       	ldi	r25, 0x30	; 48
   16b4c:	a0 e0       	ldi	r26, 0x00	; 0
   16b4e:	ed b7       	in	r30, 0x3d	; 61
   16b50:	fe b7       	in	r31, 0x3e	; 62
   16b52:	81 83       	std	Z+1, r24	; 0x01
   16b54:	92 83       	std	Z+2, r25	; 0x02
   16b56:	a3 83       	std	Z+3, r26	; 0x03
   16b58:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
   16b5c:	03 c0       	rjmp	.+6      	; 0x16b64 <amigo_send_status+0x92>
   16b5e:	10 86       	std	Z+8, r1	; 0x08
   16b60:	17 82       	std	Z+7, r1	; 0x07
   16b62:	16 82       	std	Z+6, r1	; 0x06
   16b64:	e0 91 64 19 	lds	r30, 0x1964	; 0x801964 <AMIGOp>
   16b68:	f0 91 65 19 	lds	r31, 0x1965	; 0x801965 <AMIGOp+0x1>
   16b6c:	81 81       	ldd	r24, Z+1	; 0x01
   16b6e:	90 e0       	ldi	r25, 0x00	; 0
   16b70:	0e 94 56 87 	call	0x10eac	; 0x10eac <gpib_enable_PPR>
   16b74:	8c 81       	ldd	r24, Y+4	; 0x04
   16b76:	9d 81       	ldd	r25, Y+5	; 0x05
   16b78:	88 27       	eor	r24, r24
   16b7a:	90 7d       	andi	r25, 0xD0	; 208
   16b7c:	25 96       	adiw	r28, 0x05	; 5
   16b7e:	e2 e0       	ldi	r30, 0x02	; 2
   16b80:	0c 94 d0 e8 	jmp	0x1d1a0	; 0x1d1a0 <__epilogue_restores__+0x20>

00016b84 <amigo_increment>:
   16b84:	a1 e1       	ldi	r26, 0x11	; 17
   16b86:	b0 e0       	ldi	r27, 0x00	; 0
   16b88:	e8 ec       	ldi	r30, 0xC8	; 200
   16b8a:	f5 eb       	ldi	r31, 0xB5	; 181
   16b8c:	0c 94 b4 e8 	jmp	0x1d168	; 0x1d168 <__prologue_saves__+0x20>
   16b90:	bc 01       	movw	r22, r24
   16b92:	e0 91 62 19 	lds	r30, 0x1962	; 0x801962 <AMIGOs>
   16b96:	f0 91 63 19 	lds	r31, 0x1963	; 0x801963 <AMIGOs+0x1>
   16b9a:	91 e1       	ldi	r25, 0x11	; 17
   16b9c:	de 01       	movw	r26, r28
   16b9e:	11 96       	adiw	r26, 0x01	; 1
   16ba0:	01 90       	ld	r0, Z+
   16ba2:	0d 92       	st	X+, r0
   16ba4:	9a 95       	dec	r25
   16ba6:	e1 f7       	brne	.-8      	; 0x16ba0 <amigo_increment+0x1c>
   16ba8:	9e 81       	ldd	r25, Y+6	; 0x06
   16baa:	9f 5f       	subi	r25, 0xFF	; 255
   16bac:	9e 83       	std	Y+6, r25	; 0x06
   16bae:	ce 01       	movw	r24, r28
   16bb0:	01 96       	adiw	r24, 0x01	; 1
   16bb2:	c7 dd       	rcall	.-1138   	; 0x16742 <amigo_overflow_check>
   16bb4:	00 97       	sbiw	r24, 0x00	; 0
   16bb6:	59 f4       	brne	.+22     	; 0x16bce <amigo_increment+0x4a>
   16bb8:	a0 91 62 19 	lds	r26, 0x1962	; 0x801962 <AMIGOs>
   16bbc:	b0 91 63 19 	lds	r27, 0x1963	; 0x801963 <AMIGOs+0x1>
   16bc0:	21 e1       	ldi	r18, 0x11	; 17
   16bc2:	fe 01       	movw	r30, r28
   16bc4:	31 96       	adiw	r30, 0x01	; 1
   16bc6:	01 90       	ld	r0, Z+
   16bc8:	0d 92       	st	X+, r0
   16bca:	2a 95       	dec	r18
   16bcc:	e1 f7       	brne	.-8      	; 0x16bc6 <amigo_increment+0x42>
   16bce:	61 96       	adiw	r28, 0x11	; 17
   16bd0:	e2 e0       	ldi	r30, 0x02	; 2
   16bd2:	0c 94 d0 e8 	jmp	0x1d1a0	; 0x1d1a0 <__epilogue_restores__+0x20>

00016bd6 <amigo_seek>:
   16bd6:	0f 93       	push	r16
   16bd8:	1f 93       	push	r17
   16bda:	cf 93       	push	r28
   16bdc:	df 93       	push	r29
   16bde:	ec 01       	movw	r28, r24
   16be0:	6b e7       	ldi	r22, 0x7B	; 123
   16be2:	75 e1       	ldi	r23, 0x15	; 21
   16be4:	ae dd       	rcall	.-1188   	; 0x16742 <amigo_overflow_check>
   16be6:	8c 01       	movw	r16, r24
   16be8:	e0 91 62 19 	lds	r30, 0x1962	; 0x801962 <AMIGOs>
   16bec:	f0 91 63 19 	lds	r31, 0x1963	; 0x801963 <AMIGOs+0x1>
   16bf0:	89 2b       	or	r24, r25
   16bf2:	41 f0       	breq	.+16     	; 0x16c04 <amigo_seek+0x2e>
   16bf4:	81 e0       	ldi	r24, 0x01	; 1
   16bf6:	86 83       	std	Z+6, r24	; 0x06
   16bf8:	87 81       	ldd	r24, Z+7	; 0x07
   16bfa:	90 85       	ldd	r25, Z+8	; 0x08
   16bfc:	84 60       	ori	r24, 0x04	; 4
   16bfe:	90 87       	std	Z+8, r25	; 0x08
   16c00:	87 83       	std	Z+7, r24	; 0x07
   16c02:	06 c0       	rjmp	.+12     	; 0x16c10 <amigo_seek+0x3a>
   16c04:	8d 81       	ldd	r24, Y+5	; 0x05
   16c06:	85 83       	std	Z+5, r24	; 0x05
   16c08:	8c 81       	ldd	r24, Y+4	; 0x04
   16c0a:	84 83       	std	Z+4, r24	; 0x04
   16c0c:	8b 81       	ldd	r24, Y+3	; 0x03
   16c0e:	83 83       	std	Z+3, r24	; 0x03
   16c10:	e0 91 64 19 	lds	r30, 0x1964	; 0x801964 <AMIGOp>
   16c14:	f0 91 65 19 	lds	r31, 0x1965	; 0x801965 <AMIGOp+0x1>
   16c18:	81 81       	ldd	r24, Z+1	; 0x01
   16c1a:	90 e0       	ldi	r25, 0x00	; 0
   16c1c:	0e 94 56 87 	call	0x10eac	; 0x10eac <gpib_enable_PPR>
   16c20:	c8 01       	movw	r24, r16
   16c22:	df 91       	pop	r29
   16c24:	cf 91       	pop	r28
   16c26:	1f 91       	pop	r17
   16c28:	0f 91       	pop	r16
   16c2a:	08 95       	ret

00016c2c <amigo_verify>:
   16c2c:	8f 92       	push	r8
   16c2e:	9f 92       	push	r9
   16c30:	af 92       	push	r10
   16c32:	bf 92       	push	r11
   16c34:	ef 92       	push	r14
   16c36:	ff 92       	push	r15
   16c38:	0f 93       	push	r16
   16c3a:	1f 93       	push	r17
   16c3c:	cf 93       	push	r28
   16c3e:	df 93       	push	r29
   16c40:	ad b7       	in	r26, 0x3d	; 61
   16c42:	be b7       	in	r27, 0x3e	; 62
   16c44:	19 97       	sbiw	r26, 0x09	; 9
   16c46:	0f b6       	in	r0, 0x3f	; 63
   16c48:	f8 94       	cli
   16c4a:	be bf       	out	0x3e, r27	; 62
   16c4c:	0f be       	out	0x3f, r0	; 63
   16c4e:	ad bf       	out	0x3d, r26	; 61
   16c50:	7c 01       	movw	r14, r24
   16c52:	60 e8       	ldi	r22, 0x80	; 128
   16c54:	75 e1       	ldi	r23, 0x15	; 21
   16c56:	80 91 62 19 	lds	r24, 0x1962	; 0x801962 <AMIGOs>
   16c5a:	90 91 63 19 	lds	r25, 0x1963	; 0x801963 <AMIGOs+0x1>
   16c5e:	c7 dd       	rcall	.-1138   	; 0x167ee <amigo_chs_to_logical>
   16c60:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   16c64:	25 ff       	sbrs	r18, 5
   16c66:	10 c0       	rjmp	.+32     	; 0x16c88 <amigo_verify+0x5c>
   16c68:	ed b7       	in	r30, 0x3d	; 61
   16c6a:	fe b7       	in	r31, 0x3e	; 62
   16c6c:	e0 86       	std	Z+8, r14	; 0x08
   16c6e:	f1 86       	std	Z+9, r15	; 0x09
   16c70:	64 83       	std	Z+4, r22	; 0x04
   16c72:	75 83       	std	Z+5, r23	; 0x05
   16c74:	86 83       	std	Z+6, r24	; 0x06
   16c76:	97 83       	std	Z+7, r25	; 0x07
   16c78:	89 e6       	ldi	r24, 0x69	; 105
   16c7a:	90 e3       	ldi	r25, 0x30	; 48
   16c7c:	a0 e0       	ldi	r26, 0x00	; 0
   16c7e:	81 83       	std	Z+1, r24	; 0x01
   16c80:	92 83       	std	Z+2, r25	; 0x02
   16c82:	a3 83       	std	Z+3, r26	; 0x03
   16c84:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
   16c88:	e7 01       	movw	r28, r14
   16c8a:	20 97       	sbiw	r28, 0x00	; 0
   16c8c:	09 f4       	brne	.+2      	; 0x16c90 <amigo_verify+0x64>
   16c8e:	4b c0       	rjmp	.+150    	; 0x16d26 <amigo_verify+0xfa>
   16c90:	6d e8       	ldi	r22, 0x8D	; 141
   16c92:	75 e1       	ldi	r23, 0x15	; 21
   16c94:	80 91 62 19 	lds	r24, 0x1962	; 0x801962 <AMIGOs>
   16c98:	90 91 63 19 	lds	r25, 0x1963	; 0x801963 <AMIGOs+0x1>
   16c9c:	a8 dd       	rcall	.-1200   	; 0x167ee <amigo_chs_to_logical>
   16c9e:	4b 01       	movw	r8, r22
   16ca0:	5c 01       	movw	r10, r24
   16ca2:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16ca6:	86 fd       	sbrc	r24, 6
   16ca8:	0e 94 7c 86 	call	0x10cf8	; 0x10cf8 <gpib_timer_elapsed_begin>
   16cac:	e0 91 64 19 	lds	r30, 0x1964	; 0x801964 <AMIGOp>
   16cb0:	f0 91 65 19 	lds	r31, 0x1965	; 0x801965 <AMIGOp+0x1>
   16cb4:	e0 90 62 19 	lds	r14, 0x1962	; 0x801962 <AMIGOs>
   16cb8:	f0 90 63 19 	lds	r15, 0x1963	; 0x801963 <AMIGOs+0x1>
   16cbc:	87 e0       	ldi	r24, 0x07	; 7
   16cbe:	e8 0e       	add	r14, r24
   16cc0:	f1 1c       	adc	r15, r1
   16cc2:	00 85       	ldd	r16, Z+8	; 0x08
   16cc4:	11 85       	ldd	r17, Z+9	; 0x09
   16cc6:	2a ee       	ldi	r18, 0xEA	; 234
   16cc8:	3c e1       	ldi	r19, 0x1C	; 28
   16cca:	b5 01       	movw	r22, r10
   16ccc:	a4 01       	movw	r20, r8
   16cce:	82 81       	ldd	r24, Z+2	; 0x02
   16cd0:	93 81       	ldd	r25, Z+3	; 0x03
   16cd2:	0e 94 ce 85 	call	0x10b9c	; 0x10b9c <dbf_open_read>
   16cd6:	7c 01       	movw	r14, r24
   16cd8:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16cdc:	86 ff       	sbrs	r24, 6
   16cde:	04 c0       	rjmp	.+8      	; 0x16ce8 <amigo_verify+0xbc>
   16ce0:	84 e9       	ldi	r24, 0x94	; 148
   16ce2:	90 e1       	ldi	r25, 0x10	; 16
   16ce4:	0e 94 8e 86 	call	0x10d1c	; 0x10d1c <gpib_timer_elapsed_end>
   16ce8:	20 91 62 19 	lds	r18, 0x1962	; 0x801962 <AMIGOs>
   16cec:	30 91 63 19 	lds	r19, 0x1963	; 0x801963 <AMIGOs+0x1>
   16cf0:	f9 01       	movw	r30, r18
   16cf2:	87 81       	ldd	r24, Z+7	; 0x07
   16cf4:	90 85       	ldd	r25, Z+8	; 0x08
   16cf6:	89 2b       	or	r24, r25
   16cf8:	21 f0       	breq	.+8      	; 0x16d02 <amigo_verify+0xd6>
   16cfa:	81 e0       	ldi	r24, 0x01	; 1
   16cfc:	f9 01       	movw	r30, r18
   16cfe:	86 83       	std	Z+6, r24	; 0x06
   16d00:	15 c0       	rjmp	.+42     	; 0x16d2c <amigo_verify+0x100>
   16d02:	80 91 64 19 	lds	r24, 0x1964	; 0x801964 <AMIGOp>
   16d06:	90 91 65 19 	lds	r25, 0x1965	; 0x801965 <AMIGOp+0x1>
   16d0a:	fc 01       	movw	r30, r24
   16d0c:	80 85       	ldd	r24, Z+8	; 0x08
   16d0e:	91 85       	ldd	r25, Z+9	; 0x09
   16d10:	e8 16       	cp	r14, r24
   16d12:	f9 06       	cpc	r15, r25
   16d14:	91 f7       	brne	.-28     	; 0x16cfa <amigo_verify+0xce>
   16d16:	85 e9       	ldi	r24, 0x95	; 149
   16d18:	95 e1       	ldi	r25, 0x15	; 21
   16d1a:	34 df       	rcall	.-408    	; 0x16b84 <amigo_increment>
   16d1c:	21 97       	sbiw	r28, 0x01	; 1
   16d1e:	89 2b       	or	r24, r25
   16d20:	09 f4       	brne	.+2      	; 0x16d24 <amigo_verify+0xf8>
   16d22:	b3 cf       	rjmp	.-154    	; 0x16c8a <amigo_verify+0x5e>
   16d24:	03 c0       	rjmp	.+6      	; 0x16d2c <amigo_verify+0x100>
   16d26:	c0 e0       	ldi	r28, 0x00	; 0
   16d28:	d0 e0       	ldi	r29, 0x00	; 0
   16d2a:	02 c0       	rjmp	.+4      	; 0x16d30 <amigo_verify+0x104>
   16d2c:	c1 e0       	ldi	r28, 0x01	; 1
   16d2e:	d0 e0       	ldi	r29, 0x00	; 0
   16d30:	e0 91 64 19 	lds	r30, 0x1964	; 0x801964 <AMIGOp>
   16d34:	f0 91 65 19 	lds	r31, 0x1965	; 0x801965 <AMIGOp+0x1>
   16d38:	81 81       	ldd	r24, Z+1	; 0x01
   16d3a:	90 e0       	ldi	r25, 0x00	; 0
   16d3c:	0e 94 56 87 	call	0x10eac	; 0x10eac <gpib_enable_PPR>
   16d40:	ce 01       	movw	r24, r28
   16d42:	ad b7       	in	r26, 0x3d	; 61
   16d44:	be b7       	in	r27, 0x3e	; 62
   16d46:	19 96       	adiw	r26, 0x09	; 9
   16d48:	0f b6       	in	r0, 0x3f	; 63
   16d4a:	f8 94       	cli
   16d4c:	be bf       	out	0x3e, r27	; 62
   16d4e:	0f be       	out	0x3f, r0	; 63
   16d50:	ad bf       	out	0x3d, r26	; 61
   16d52:	df 91       	pop	r29
   16d54:	cf 91       	pop	r28
   16d56:	1f 91       	pop	r17
   16d58:	0f 91       	pop	r16
   16d5a:	ff 90       	pop	r15
   16d5c:	ef 90       	pop	r14
   16d5e:	bf 90       	pop	r11
   16d60:	af 90       	pop	r10
   16d62:	9f 90       	pop	r9
   16d64:	8f 90       	pop	r8
   16d66:	08 95       	ret

00016d68 <amigo_format>:
   16d68:	ef 92       	push	r14
   16d6a:	ff 92       	push	r15
   16d6c:	0f 93       	push	r16
   16d6e:	1f 93       	push	r17
   16d70:	cf 93       	push	r28
   16d72:	df 93       	push	r29
   16d74:	00 d0       	rcall	.+0      	; 0x16d76 <amigo_format+0xe>
   16d76:	1f 92       	push	r1
   16d78:	e0 91 62 19 	lds	r30, 0x1962	; 0x801962 <AMIGOs>
   16d7c:	f0 91 63 19 	lds	r31, 0x1963	; 0x801963 <AMIGOs+0x1>
   16d80:	15 82       	std	Z+5, r1	; 0x05
   16d82:	14 82       	std	Z+4, r1	; 0x04
   16d84:	13 82       	std	Z+3, r1	; 0x03
   16d86:	e0 91 64 19 	lds	r30, 0x1964	; 0x801964 <AMIGOp>
   16d8a:	f0 91 65 19 	lds	r31, 0x1965	; 0x801965 <AMIGOp+0x1>
   16d8e:	40 85       	ldd	r20, Z+8	; 0x08
   16d90:	51 85       	ldd	r21, Z+9	; 0x09
   16d92:	68 2f       	mov	r22, r24
   16d94:	70 e0       	ldi	r23, 0x00	; 0
   16d96:	8a ee       	ldi	r24, 0xEA	; 234
   16d98:	9c e1       	ldi	r25, 0x1C	; 28
   16d9a:	0e 94 9c ec 	call	0x1d938	; 0x1d938 <memset>
   16d9e:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16da2:	85 ff       	sbrs	r24, 5
   16da4:	0a c0       	rjmp	.+20     	; 0x16dba <amigo_format+0x52>
   16da6:	8e e2       	ldi	r24, 0x2E	; 46
   16da8:	90 e3       	ldi	r25, 0x30	; 48
   16daa:	a0 e0       	ldi	r26, 0x00	; 0
   16dac:	ed b7       	in	r30, 0x3d	; 61
   16dae:	fe b7       	in	r31, 0x3e	; 62
   16db0:	81 83       	std	Z+1, r24	; 0x01
   16db2:	92 83       	std	Z+2, r25	; 0x02
   16db4:	a3 83       	std	Z+3, r26	; 0x03
   16db6:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
   16dba:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16dbe:	86 fd       	sbrc	r24, 6
   16dc0:	0e 94 7c 86 	call	0x10cf8	; 0x10cf8 <gpib_timer_elapsed_begin>
   16dc4:	6c e9       	ldi	r22, 0x9C	; 156
   16dc6:	75 e1       	ldi	r23, 0x15	; 21
   16dc8:	80 91 62 19 	lds	r24, 0x1962	; 0x801962 <AMIGOs>
   16dcc:	90 91 63 19 	lds	r25, 0x1963	; 0x801963 <AMIGOs+0x1>
   16dd0:	0e dd       	rcall	.-1508   	; 0x167ee <amigo_chs_to_logical>
   16dd2:	ab 01       	movw	r20, r22
   16dd4:	bc 01       	movw	r22, r24
   16dd6:	e0 91 64 19 	lds	r30, 0x1964	; 0x801964 <AMIGOp>
   16dda:	f0 91 65 19 	lds	r31, 0x1965	; 0x801965 <AMIGOp+0x1>
   16dde:	e0 90 62 19 	lds	r14, 0x1962	; 0x801962 <AMIGOs>
   16de2:	f0 90 63 19 	lds	r15, 0x1963	; 0x801963 <AMIGOs+0x1>
   16de6:	87 e0       	ldi	r24, 0x07	; 7
   16de8:	e8 0e       	add	r14, r24
   16dea:	f1 1c       	adc	r15, r1
   16dec:	00 85       	ldd	r16, Z+8	; 0x08
   16dee:	11 85       	ldd	r17, Z+9	; 0x09
   16df0:	2a ee       	ldi	r18, 0xEA	; 234
   16df2:	3c e1       	ldi	r19, 0x1C	; 28
   16df4:	82 81       	ldd	r24, Z+2	; 0x02
   16df6:	93 81       	ldd	r25, Z+3	; 0x03
   16df8:	0e 94 25 86 	call	0x10c4a	; 0x10c4a <dbf_open_write>
   16dfc:	e0 91 62 19 	lds	r30, 0x1962	; 0x801962 <AMIGOs>
   16e00:	f0 91 63 19 	lds	r31, 0x1963	; 0x801963 <AMIGOs+0x1>
   16e04:	27 81       	ldd	r18, Z+7	; 0x07
   16e06:	30 85       	ldd	r19, Z+8	; 0x08
   16e08:	21 15       	cp	r18, r1
   16e0a:	31 05       	cpc	r19, r1
   16e0c:	49 f4       	brne	.+18     	; 0x16e20 <amigo_format+0xb8>
   16e0e:	c0 91 64 19 	lds	r28, 0x1964	; 0x801964 <AMIGOp>
   16e12:	d0 91 65 19 	lds	r29, 0x1965	; 0x801965 <AMIGOp+0x1>
   16e16:	48 85       	ldd	r20, Y+8	; 0x08
   16e18:	59 85       	ldd	r21, Y+9	; 0x09
   16e1a:	84 17       	cp	r24, r20
   16e1c:	95 07       	cpc	r25, r21
   16e1e:	41 f0       	breq	.+16     	; 0x16e30 <amigo_format+0xc8>
   16e20:	22 60       	ori	r18, 0x02	; 2
   16e22:	30 87       	std	Z+8, r19	; 0x08
   16e24:	27 83       	std	Z+7, r18	; 0x07
   16e26:	81 e0       	ldi	r24, 0x01	; 1
   16e28:	86 83       	std	Z+6, r24	; 0x06
   16e2a:	c1 e0       	ldi	r28, 0x01	; 1
   16e2c:	d0 e0       	ldi	r29, 0x00	; 0
   16e2e:	0f c0       	rjmp	.+30     	; 0x16e4e <amigo_format+0xe6>
   16e30:	80 e0       	ldi	r24, 0x00	; 0
   16e32:	90 e0       	ldi	r25, 0x00	; 0
   16e34:	a7 de       	rcall	.-690    	; 0x16b84 <amigo_increment>
   16e36:	89 2b       	or	r24, r25
   16e38:	29 f2       	breq	.-118    	; 0x16dc4 <amigo_format+0x5c>
   16e3a:	e0 91 62 19 	lds	r30, 0x1962	; 0x801962 <AMIGOs>
   16e3e:	f0 91 63 19 	lds	r31, 0x1963	; 0x801963 <AMIGOs+0x1>
   16e42:	15 82       	std	Z+5, r1	; 0x05
   16e44:	14 82       	std	Z+4, r1	; 0x04
   16e46:	13 82       	std	Z+3, r1	; 0x03
   16e48:	16 82       	std	Z+6, r1	; 0x06
   16e4a:	c0 e0       	ldi	r28, 0x00	; 0
   16e4c:	d0 e0       	ldi	r29, 0x00	; 0
   16e4e:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16e52:	86 ff       	sbrs	r24, 6
   16e54:	04 c0       	rjmp	.+8      	; 0x16e5e <amigo_format+0xf6>
   16e56:	8c e9       	ldi	r24, 0x9C	; 156
   16e58:	95 e1       	ldi	r25, 0x15	; 21
   16e5a:	0e 94 8e 86 	call	0x10d1c	; 0x10d1c <gpib_timer_elapsed_end>
   16e5e:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16e62:	85 ff       	sbrs	r24, 5
   16e64:	0a c0       	rjmp	.+20     	; 0x16e7a <amigo_format+0x112>
   16e66:	89 e1       	ldi	r24, 0x19	; 25
   16e68:	90 e3       	ldi	r25, 0x30	; 48
   16e6a:	a0 e0       	ldi	r26, 0x00	; 0
   16e6c:	ed b7       	in	r30, 0x3d	; 61
   16e6e:	fe b7       	in	r31, 0x3e	; 62
   16e70:	81 83       	std	Z+1, r24	; 0x01
   16e72:	92 83       	std	Z+2, r25	; 0x02
   16e74:	a3 83       	std	Z+3, r26	; 0x03
   16e76:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
   16e7a:	e0 91 64 19 	lds	r30, 0x1964	; 0x801964 <AMIGOp>
   16e7e:	f0 91 65 19 	lds	r31, 0x1965	; 0x801965 <AMIGOp+0x1>
   16e82:	81 81       	ldd	r24, Z+1	; 0x01
   16e84:	90 e0       	ldi	r25, 0x00	; 0
   16e86:	0e 94 56 87 	call	0x10eac	; 0x10eac <gpib_enable_PPR>
   16e8a:	ce 01       	movw	r24, r28
   16e8c:	cd b7       	in	r28, 0x3d	; 61
   16e8e:	de b7       	in	r29, 0x3e	; 62
   16e90:	23 96       	adiw	r28, 0x03	; 3
   16e92:	e6 e0       	ldi	r30, 0x06	; 6
   16e94:	0c 94 cc e8 	jmp	0x1d198	; 0x1d198 <__epilogue_restores__+0x18>

00016e98 <amigo_buffered_read_command>:
   16e98:	8f 92       	push	r8
   16e9a:	9f 92       	push	r9
   16e9c:	af 92       	push	r10
   16e9e:	bf 92       	push	r11
   16ea0:	ef 92       	push	r14
   16ea2:	ff 92       	push	r15
   16ea4:	0f 93       	push	r16
   16ea6:	1f 93       	push	r17
   16ea8:	cf 93       	push	r28
   16eaa:	df 93       	push	r29
   16eac:	00 d0       	rcall	.+0      	; 0x16eae <amigo_buffered_read_command+0x16>
   16eae:	00 d0       	rcall	.+0      	; 0x16eb0 <amigo_buffered_read_command+0x18>
   16eb0:	1f 92       	push	r1
   16eb2:	63 ea       	ldi	r22, 0xA3	; 163
   16eb4:	75 e1       	ldi	r23, 0x15	; 21
   16eb6:	80 91 62 19 	lds	r24, 0x1962	; 0x801962 <AMIGOs>
   16eba:	90 91 63 19 	lds	r25, 0x1963	; 0x801963 <AMIGOs+0x1>
   16ebe:	97 dc       	rcall	.-1746   	; 0x167ee <amigo_chs_to_logical>
   16ec0:	4b 01       	movw	r8, r22
   16ec2:	5c 01       	movw	r10, r24
   16ec4:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16ec8:	85 ff       	sbrs	r24, 5
   16eca:	12 c0       	rjmp	.+36     	; 0x16ef0 <amigo_buffered_read_command+0x58>
   16ecc:	e0 91 62 19 	lds	r30, 0x1962	; 0x801962 <AMIGOs>
   16ed0:	f0 91 63 19 	lds	r31, 0x1963	; 0x801963 <AMIGOs+0x1>
   16ed4:	80 81       	ld	r24, Z
   16ed6:	90 e0       	ldi	r25, 0x00	; 0
   16ed8:	ed b7       	in	r30, 0x3d	; 61
   16eda:	fe b7       	in	r31, 0x3e	; 62
   16edc:	95 83       	std	Z+5, r25	; 0x05
   16ede:	84 83       	std	Z+4, r24	; 0x04
   16ee0:	87 e0       	ldi	r24, 0x07	; 7
   16ee2:	90 e3       	ldi	r25, 0x30	; 48
   16ee4:	a0 e0       	ldi	r26, 0x00	; 0
   16ee6:	81 83       	std	Z+1, r24	; 0x01
   16ee8:	92 83       	std	Z+2, r25	; 0x02
   16eea:	a3 83       	std	Z+3, r26	; 0x03
   16eec:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
   16ef0:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16ef4:	86 fd       	sbrc	r24, 6
   16ef6:	0e 94 7c 86 	call	0x10cf8	; 0x10cf8 <gpib_timer_elapsed_begin>
   16efa:	e0 91 64 19 	lds	r30, 0x1964	; 0x801964 <AMIGOp>
   16efe:	f0 91 65 19 	lds	r31, 0x1965	; 0x801965 <AMIGOp+0x1>
   16f02:	e0 90 62 19 	lds	r14, 0x1962	; 0x801962 <AMIGOs>
   16f06:	f0 90 63 19 	lds	r15, 0x1963	; 0x801963 <AMIGOs+0x1>
   16f0a:	87 e0       	ldi	r24, 0x07	; 7
   16f0c:	e8 0e       	add	r14, r24
   16f0e:	f1 1c       	adc	r15, r1
   16f10:	00 85       	ldd	r16, Z+8	; 0x08
   16f12:	11 85       	ldd	r17, Z+9	; 0x09
   16f14:	2a ee       	ldi	r18, 0xEA	; 234
   16f16:	3c e1       	ldi	r19, 0x1C	; 28
   16f18:	b5 01       	movw	r22, r10
   16f1a:	a4 01       	movw	r20, r8
   16f1c:	82 81       	ldd	r24, Z+2	; 0x02
   16f1e:	93 81       	ldd	r25, Z+3	; 0x03
   16f20:	0e 94 ce 85 	call	0x10b9c	; 0x10b9c <dbf_open_read>
   16f24:	7c 01       	movw	r14, r24
   16f26:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16f2a:	86 ff       	sbrs	r24, 6
   16f2c:	04 c0       	rjmp	.+8      	; 0x16f36 <amigo_buffered_read_command+0x9e>
   16f2e:	84 e9       	ldi	r24, 0x94	; 148
   16f30:	90 e1       	ldi	r25, 0x10	; 16
   16f32:	0e 94 8e 86 	call	0x10d1c	; 0x10d1c <gpib_timer_elapsed_end>
   16f36:	c0 91 62 19 	lds	r28, 0x1962	; 0x801962 <AMIGOs>
   16f3a:	d0 91 63 19 	lds	r29, 0x1963	; 0x801963 <AMIGOs+0x1>
   16f3e:	8f 81       	ldd	r24, Y+7	; 0x07
   16f40:	98 85       	ldd	r25, Y+8	; 0x08
   16f42:	e0 91 64 19 	lds	r30, 0x1964	; 0x801964 <AMIGOp>
   16f46:	f0 91 65 19 	lds	r31, 0x1965	; 0x801965 <AMIGOp+0x1>
   16f4a:	89 2b       	or	r24, r25
   16f4c:	29 f4       	brne	.+10     	; 0x16f58 <amigo_buffered_read_command+0xc0>
   16f4e:	80 85       	ldd	r24, Z+8	; 0x08
   16f50:	91 85       	ldd	r25, Z+9	; 0x09
   16f52:	e8 16       	cp	r14, r24
   16f54:	f9 06       	cpc	r15, r25
   16f56:	19 f0       	breq	.+6      	; 0x16f5e <amigo_buffered_read_command+0xc6>
   16f58:	81 e0       	ldi	r24, 0x01	; 1
   16f5a:	8e 83       	std	Y+6, r24	; 0x06
   16f5c:	14 c0       	rjmp	.+40     	; 0x16f86 <amigo_buffered_read_command+0xee>
   16f5e:	83 ea       	ldi	r24, 0xA3	; 163
   16f60:	95 e1       	ldi	r25, 0x15	; 21
   16f62:	10 de       	rcall	.-992    	; 0x16b84 <amigo_increment>
   16f64:	89 2b       	or	r24, r25
   16f66:	59 f0       	breq	.+22     	; 0x16f7e <amigo_buffered_read_command+0xe6>
   16f68:	e0 91 62 19 	lds	r30, 0x1962	; 0x801962 <AMIGOs>
   16f6c:	f0 91 63 19 	lds	r31, 0x1963	; 0x801963 <AMIGOs+0x1>
   16f70:	81 e0       	ldi	r24, 0x01	; 1
   16f72:	86 83       	std	Z+6, r24	; 0x06
   16f74:	87 81       	ldd	r24, Z+7	; 0x07
   16f76:	90 85       	ldd	r25, Z+8	; 0x08
   16f78:	84 60       	ori	r24, 0x04	; 4
   16f7a:	90 87       	std	Z+8, r25	; 0x08
   16f7c:	87 83       	std	Z+7, r24	; 0x07
   16f7e:	e0 91 64 19 	lds	r30, 0x1964	; 0x801964 <AMIGOp>
   16f82:	f0 91 65 19 	lds	r31, 0x1965	; 0x801965 <AMIGOp+0x1>
   16f86:	81 81       	ldd	r24, Z+1	; 0x01
   16f88:	90 e0       	ldi	r25, 0x00	; 0
   16f8a:	0e 94 56 87 	call	0x10eac	; 0x10eac <gpib_enable_PPR>
   16f8e:	80 e0       	ldi	r24, 0x00	; 0
   16f90:	90 e0       	ldi	r25, 0x00	; 0
   16f92:	0f 90       	pop	r0
   16f94:	0f 90       	pop	r0
   16f96:	0f 90       	pop	r0
   16f98:	0f 90       	pop	r0
   16f9a:	0f 90       	pop	r0
   16f9c:	df 91       	pop	r29
   16f9e:	cf 91       	pop	r28
   16fa0:	1f 91       	pop	r17
   16fa2:	0f 91       	pop	r16
   16fa4:	ff 90       	pop	r15
   16fa6:	ef 90       	pop	r14
   16fa8:	bf 90       	pop	r11
   16faa:	af 90       	pop	r10
   16fac:	9f 90       	pop	r9
   16fae:	8f 90       	pop	r8
   16fb0:	08 95       	ret

00016fb2 <amigo_buffered_read_execute>:
   16fb2:	a5 e0       	ldi	r26, 0x05	; 5
   16fb4:	b0 e0       	ldi	r27, 0x00	; 0
   16fb6:	ef ed       	ldi	r30, 0xDF	; 223
   16fb8:	f7 eb       	ldi	r31, 0xB7	; 183
   16fba:	0c 94 b2 e8 	jmp	0x1d164	; 0x1d164 <__prologue_saves__+0x1c>
   16fbe:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16fc2:	87 fd       	sbrc	r24, 7
   16fc4:	0e 94 7c 86 	call	0x10cf8	; 0x10cf8 <gpib_timer_elapsed_begin>
   16fc8:	80 e0       	ldi	r24, 0x00	; 0
   16fca:	91 e0       	ldi	r25, 0x01	; 1
   16fcc:	9d 83       	std	Y+5, r25	; 0x05
   16fce:	8c 83       	std	Y+4, r24	; 0x04
   16fd0:	e0 91 64 19 	lds	r30, 0x1964	; 0x801964 <AMIGOp>
   16fd4:	f0 91 65 19 	lds	r31, 0x1965	; 0x801965 <AMIGOp+0x1>
   16fd8:	60 85       	ldd	r22, Z+8	; 0x08
   16fda:	71 85       	ldd	r23, Z+9	; 0x09
   16fdc:	ae 01       	movw	r20, r28
   16fde:	4c 5f       	subi	r20, 0xFC	; 252
   16fe0:	5f 4f       	sbci	r21, 0xFF	; 255
   16fe2:	8a ee       	ldi	r24, 0xEA	; 234
   16fe4:	9c e1       	ldi	r25, 0x1C	; 28
   16fe6:	0e 94 86 8c 	call	0x1190c	; 0x1190c <gpib_write_str>
   16fea:	8c 01       	movw	r16, r24
   16fec:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16ff0:	87 ff       	sbrs	r24, 7
   16ff2:	04 c0       	rjmp	.+8      	; 0x16ffc <amigo_buffered_read_execute+0x4a>
   16ff4:	8f e9       	ldi	r24, 0x9F	; 159
   16ff6:	90 e1       	ldi	r25, 0x10	; 16
   16ff8:	0e 94 8e 86 	call	0x10d1c	; 0x10d1c <gpib_timer_elapsed_end>
   16ffc:	8c 81       	ldd	r24, Y+4	; 0x04
   16ffe:	9d 81       	ldd	r25, Y+5	; 0x05
   17000:	88 27       	eor	r24, r24
   17002:	90 7d       	andi	r25, 0xD0	; 208
   17004:	89 2b       	or	r24, r25
   17006:	49 f4       	brne	.+18     	; 0x1701a <amigo_buffered_read_execute+0x68>
   17008:	e0 91 64 19 	lds	r30, 0x1964	; 0x801964 <AMIGOp>
   1700c:	f0 91 65 19 	lds	r31, 0x1965	; 0x801965 <AMIGOp+0x1>
   17010:	80 85       	ldd	r24, Z+8	; 0x08
   17012:	91 85       	ldd	r25, Z+9	; 0x09
   17014:	08 17       	cp	r16, r24
   17016:	19 07       	cpc	r17, r25
   17018:	c9 f0       	breq	.+50     	; 0x1704c <amigo_buffered_read_execute+0x9a>
   1701a:	e0 91 62 19 	lds	r30, 0x1962	; 0x801962 <AMIGOs>
   1701e:	f0 91 63 19 	lds	r31, 0x1963	; 0x801963 <AMIGOs+0x1>
   17022:	81 e0       	ldi	r24, 0x01	; 1
   17024:	86 83       	std	Z+6, r24	; 0x06
   17026:	87 81       	ldd	r24, Z+7	; 0x07
   17028:	90 85       	ldd	r25, Z+8	; 0x08
   1702a:	80 62       	ori	r24, 0x20	; 32
   1702c:	90 87       	std	Z+8, r25	; 0x08
   1702e:	87 83       	std	Z+7, r24	; 0x07
   17030:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17034:	80 ff       	sbrs	r24, 0
   17036:	0a c0       	rjmp	.+20     	; 0x1704c <amigo_buffered_read_execute+0x9a>
   17038:	8d ee       	ldi	r24, 0xED	; 237
   1703a:	9f e2       	ldi	r25, 0x2F	; 47
   1703c:	a0 e0       	ldi	r26, 0x00	; 0
   1703e:	ed b7       	in	r30, 0x3d	; 61
   17040:	fe b7       	in	r31, 0x3e	; 62
   17042:	81 83       	std	Z+1, r24	; 0x01
   17044:	92 83       	std	Z+2, r25	; 0x02
   17046:	a3 83       	std	Z+3, r26	; 0x03
   17048:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
   1704c:	e0 91 64 19 	lds	r30, 0x1964	; 0x801964 <AMIGOp>
   17050:	f0 91 65 19 	lds	r31, 0x1965	; 0x801965 <AMIGOp+0x1>
   17054:	81 81       	ldd	r24, Z+1	; 0x01
   17056:	90 e0       	ldi	r25, 0x00	; 0
   17058:	0e 94 56 87 	call	0x10eac	; 0x10eac <gpib_enable_PPR>
   1705c:	8c 81       	ldd	r24, Y+4	; 0x04
   1705e:	9d 81       	ldd	r25, Y+5	; 0x05
   17060:	25 96       	adiw	r28, 0x05	; 5
   17062:	e4 e0       	ldi	r30, 0x04	; 4
   17064:	0c 94 ce e8 	jmp	0x1d19c	; 0x1d19c <__epilogue_restores__+0x1c>

00017068 <amigo_buffered_write>:
   17068:	8f 92       	push	r8
   1706a:	9f 92       	push	r9
   1706c:	af 92       	push	r10
   1706e:	bf 92       	push	r11
   17070:	ef 92       	push	r14
   17072:	ff 92       	push	r15
   17074:	0f 93       	push	r16
   17076:	1f 93       	push	r17
   17078:	cf 93       	push	r28
   1707a:	df 93       	push	r29
   1707c:	cd b7       	in	r28, 0x3d	; 61
   1707e:	de b7       	in	r29, 0x3e	; 62
   17080:	27 97       	sbiw	r28, 0x07	; 7
   17082:	0f b6       	in	r0, 0x3f	; 63
   17084:	f8 94       	cli
   17086:	de bf       	out	0x3e, r29	; 62
   17088:	0f be       	out	0x3f, r0	; 63
   1708a:	cd bf       	out	0x3d, r28	; 61
   1708c:	61 eb       	ldi	r22, 0xB1	; 177
   1708e:	75 e1       	ldi	r23, 0x15	; 21
   17090:	80 91 62 19 	lds	r24, 0x1962	; 0x801962 <AMIGOs>
   17094:	90 91 63 19 	lds	r25, 0x1963	; 0x801963 <AMIGOs+0x1>
   17098:	aa db       	rcall	.-2220   	; 0x167ee <amigo_chs_to_logical>
   1709a:	4b 01       	movw	r8, r22
   1709c:	5c 01       	movw	r10, r24
   1709e:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   170a2:	87 fd       	sbrc	r24, 7
   170a4:	0e 94 7c 86 	call	0x10cf8	; 0x10cf8 <gpib_timer_elapsed_begin>
   170a8:	1f 82       	std	Y+7, r1	; 0x07
   170aa:	1e 82       	std	Y+6, r1	; 0x06
   170ac:	e0 91 64 19 	lds	r30, 0x1964	; 0x801964 <AMIGOp>
   170b0:	f0 91 65 19 	lds	r31, 0x1965	; 0x801965 <AMIGOp+0x1>
   170b4:	60 85       	ldd	r22, Z+8	; 0x08
   170b6:	71 85       	ldd	r23, Z+9	; 0x09
   170b8:	ae 01       	movw	r20, r28
   170ba:	4a 5f       	subi	r20, 0xFA	; 250
   170bc:	5f 4f       	sbci	r21, 0xFF	; 255
   170be:	8a ee       	ldi	r24, 0xEA	; 234
   170c0:	9c e1       	ldi	r25, 0x1C	; 28
   170c2:	0e 94 e4 8b 	call	0x117c8	; 0x117c8 <gpib_read_str>
   170c6:	7c 01       	movw	r14, r24
   170c8:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   170cc:	85 ff       	sbrs	r24, 5
   170ce:	12 c0       	rjmp	.+36     	; 0x170f4 <amigo_buffered_write+0x8c>
   170d0:	e0 91 62 19 	lds	r30, 0x1962	; 0x801962 <AMIGOs>
   170d4:	f0 91 63 19 	lds	r31, 0x1963	; 0x801963 <AMIGOs+0x1>
   170d8:	80 81       	ld	r24, Z
   170da:	90 e0       	ldi	r25, 0x00	; 0
   170dc:	ed b7       	in	r30, 0x3d	; 61
   170de:	fe b7       	in	r31, 0x3e	; 62
   170e0:	95 83       	std	Z+5, r25	; 0x05
   170e2:	84 83       	std	Z+4, r24	; 0x04
   170e4:	8b ed       	ldi	r24, 0xDB	; 219
   170e6:	9f e2       	ldi	r25, 0x2F	; 47
   170e8:	a0 e0       	ldi	r26, 0x00	; 0
   170ea:	81 83       	std	Z+1, r24	; 0x01
   170ec:	92 83       	std	Z+2, r25	; 0x02
   170ee:	a3 83       	std	Z+3, r26	; 0x03
   170f0:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
   170f4:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   170f8:	87 ff       	sbrs	r24, 7
   170fa:	04 c0       	rjmp	.+8      	; 0x17104 <amigo_buffered_write+0x9c>
   170fc:	80 ec       	ldi	r24, 0xC0	; 192
   170fe:	95 e1       	ldi	r25, 0x15	; 21
   17100:	0e 94 8e 86 	call	0x10d1c	; 0x10d1c <gpib_timer_elapsed_end>
   17104:	8e 81       	ldd	r24, Y+6	; 0x06
   17106:	9f 81       	ldd	r25, Y+7	; 0x07
   17108:	88 27       	eor	r24, r24
   1710a:	90 7d       	andi	r25, 0xD0	; 208
   1710c:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   17110:	89 2b       	or	r24, r25
   17112:	49 f4       	brne	.+18     	; 0x17126 <amigo_buffered_write+0xbe>
   17114:	e0 91 64 19 	lds	r30, 0x1964	; 0x801964 <AMIGOp>
   17118:	f0 91 65 19 	lds	r31, 0x1965	; 0x801965 <AMIGOp+0x1>
   1711c:	80 85       	ldd	r24, Z+8	; 0x08
   1711e:	91 85       	ldd	r25, Z+9	; 0x09
   17120:	e8 16       	cp	r14, r24
   17122:	f9 06       	cpc	r15, r25
   17124:	c1 f0       	breq	.+48     	; 0x17156 <amigo_buffered_write+0xee>
   17126:	e0 91 62 19 	lds	r30, 0x1962	; 0x801962 <AMIGOs>
   1712a:	f0 91 63 19 	lds	r31, 0x1963	; 0x801963 <AMIGOs+0x1>
   1712e:	81 e0       	ldi	r24, 0x01	; 1
   17130:	86 83       	std	Z+6, r24	; 0x06
   17132:	87 81       	ldd	r24, Z+7	; 0x07
   17134:	90 85       	ldd	r25, Z+8	; 0x08
   17136:	80 62       	ori	r24, 0x20	; 32
   17138:	90 87       	std	Z+8, r25	; 0x08
   1713a:	87 83       	std	Z+7, r24	; 0x07
   1713c:	20 ff       	sbrs	r18, 0
   1713e:	5e c0       	rjmp	.+188    	; 0x171fc <amigo_buffered_write+0x194>
   17140:	8c eb       	ldi	r24, 0xBC	; 188
   17142:	9f e2       	ldi	r25, 0x2F	; 47
   17144:	a0 e0       	ldi	r26, 0x00	; 0
   17146:	ed b7       	in	r30, 0x3d	; 61
   17148:	fe b7       	in	r31, 0x3e	; 62
   1714a:	81 83       	std	Z+1, r24	; 0x01
   1714c:	92 83       	std	Z+2, r25	; 0x02
   1714e:	a3 83       	std	Z+3, r26	; 0x03
   17150:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
   17154:	53 c0       	rjmp	.+166    	; 0x171fc <amigo_buffered_write+0x194>
   17156:	26 fd       	sbrc	r18, 6
   17158:	0e 94 7c 86 	call	0x10cf8	; 0x10cf8 <gpib_timer_elapsed_begin>
   1715c:	e0 91 64 19 	lds	r30, 0x1964	; 0x801964 <AMIGOp>
   17160:	f0 91 65 19 	lds	r31, 0x1965	; 0x801965 <AMIGOp+0x1>
   17164:	e0 90 62 19 	lds	r14, 0x1962	; 0x801962 <AMIGOs>
   17168:	f0 90 63 19 	lds	r15, 0x1963	; 0x801963 <AMIGOs+0x1>
   1716c:	87 e0       	ldi	r24, 0x07	; 7
   1716e:	e8 0e       	add	r14, r24
   17170:	f1 1c       	adc	r15, r1
   17172:	00 85       	ldd	r16, Z+8	; 0x08
   17174:	11 85       	ldd	r17, Z+9	; 0x09
   17176:	2a ee       	ldi	r18, 0xEA	; 234
   17178:	3c e1       	ldi	r19, 0x1C	; 28
   1717a:	b5 01       	movw	r22, r10
   1717c:	a4 01       	movw	r20, r8
   1717e:	82 81       	ldd	r24, Z+2	; 0x02
   17180:	93 81       	ldd	r25, Z+3	; 0x03
   17182:	0e 94 25 86 	call	0x10c4a	; 0x10c4a <dbf_open_write>
   17186:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1718a:	86 ff       	sbrs	r24, 6
   1718c:	04 c0       	rjmp	.+8      	; 0x17196 <amigo_buffered_write+0x12e>
   1718e:	89 e8       	ldi	r24, 0x89	; 137
   17190:	90 e1       	ldi	r25, 0x10	; 16
   17192:	0e 94 8e 86 	call	0x10d1c	; 0x10d1c <gpib_timer_elapsed_end>
   17196:	e0 91 62 19 	lds	r30, 0x1962	; 0x801962 <AMIGOs>
   1719a:	f0 91 63 19 	lds	r31, 0x1963	; 0x801963 <AMIGOs+0x1>
   1719e:	87 81       	ldd	r24, Z+7	; 0x07
   171a0:	90 85       	ldd	r25, Z+8	; 0x08
   171a2:	89 2b       	or	r24, r25
   171a4:	d9 f0       	breq	.+54     	; 0x171dc <amigo_buffered_write+0x174>
   171a6:	81 e0       	ldi	r24, 0x01	; 1
   171a8:	86 83       	std	Z+6, r24	; 0x06
   171aa:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   171ae:	80 ff       	sbrs	r24, 0
   171b0:	0a c0       	rjmp	.+20     	; 0x171c6 <amigo_buffered_write+0x15e>
   171b2:	8c e9       	ldi	r24, 0x9C	; 156
   171b4:	9f e2       	ldi	r25, 0x2F	; 47
   171b6:	a0 e0       	ldi	r26, 0x00	; 0
   171b8:	ed b7       	in	r30, 0x3d	; 61
   171ba:	fe b7       	in	r31, 0x3e	; 62
   171bc:	81 83       	std	Z+1, r24	; 0x01
   171be:	92 83       	std	Z+2, r25	; 0x02
   171c0:	a3 83       	std	Z+3, r26	; 0x03
   171c2:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
   171c6:	e0 91 64 19 	lds	r30, 0x1964	; 0x801964 <AMIGOp>
   171ca:	f0 91 65 19 	lds	r31, 0x1965	; 0x801965 <AMIGOp+0x1>
   171ce:	81 81       	ldd	r24, Z+1	; 0x01
   171d0:	90 e0       	ldi	r25, 0x00	; 0
   171d2:	0e 94 56 87 	call	0x10eac	; 0x10eac <gpib_enable_PPR>
   171d6:	80 e0       	ldi	r24, 0x00	; 0
   171d8:	90 e0       	ldi	r25, 0x00	; 0
   171da:	1c c0       	rjmp	.+56     	; 0x17214 <amigo_buffered_write+0x1ac>
   171dc:	81 eb       	ldi	r24, 0xB1	; 177
   171de:	95 e1       	ldi	r25, 0x15	; 21
   171e0:	d1 dc       	rcall	.-1630   	; 0x16b84 <amigo_increment>
   171e2:	89 2b       	or	r24, r25
   171e4:	59 f0       	breq	.+22     	; 0x171fc <amigo_buffered_write+0x194>
   171e6:	e0 91 62 19 	lds	r30, 0x1962	; 0x801962 <AMIGOs>
   171ea:	f0 91 63 19 	lds	r31, 0x1963	; 0x801963 <AMIGOs+0x1>
   171ee:	81 e0       	ldi	r24, 0x01	; 1
   171f0:	86 83       	std	Z+6, r24	; 0x06
   171f2:	87 81       	ldd	r24, Z+7	; 0x07
   171f4:	90 85       	ldd	r25, Z+8	; 0x08
   171f6:	84 60       	ori	r24, 0x04	; 4
   171f8:	90 87       	std	Z+8, r25	; 0x08
   171fa:	87 83       	std	Z+7, r24	; 0x07
   171fc:	e0 91 64 19 	lds	r30, 0x1964	; 0x801964 <AMIGOp>
   17200:	f0 91 65 19 	lds	r31, 0x1965	; 0x801965 <AMIGOp+0x1>
   17204:	81 81       	ldd	r24, Z+1	; 0x01
   17206:	90 e0       	ldi	r25, 0x00	; 0
   17208:	0e 94 56 87 	call	0x10eac	; 0x10eac <gpib_enable_PPR>
   1720c:	8e 81       	ldd	r24, Y+6	; 0x06
   1720e:	9f 81       	ldd	r25, Y+7	; 0x07
   17210:	88 27       	eor	r24, r24
   17212:	90 7d       	andi	r25, 0xD0	; 208
   17214:	27 96       	adiw	r28, 0x07	; 7
   17216:	0f b6       	in	r0, 0x3f	; 63
   17218:	f8 94       	cli
   1721a:	de bf       	out	0x3e, r29	; 62
   1721c:	0f be       	out	0x3f, r0	; 63
   1721e:	cd bf       	out	0x3d, r28	; 61
   17220:	df 91       	pop	r29
   17222:	cf 91       	pop	r28
   17224:	1f 91       	pop	r17
   17226:	0f 91       	pop	r16
   17228:	ff 90       	pop	r15
   1722a:	ef 90       	pop	r14
   1722c:	bf 90       	pop	r11
   1722e:	af 90       	pop	r10
   17230:	9f 90       	pop	r9
   17232:	8f 90       	pop	r8
   17234:	08 95       	ret

00017236 <amigo_cmd_dsj>:
   17236:	a8 e0       	ldi	r26, 0x08	; 8
   17238:	b0 e0       	ldi	r27, 0x00	; 0
   1723a:	e1 e2       	ldi	r30, 0x21	; 33
   1723c:	f9 eb       	ldi	r31, 0xB9	; 185
   1723e:	0c 94 b4 e8 	jmp	0x1d168	; 0x1d168 <__prologue_saves__+0x20>
   17242:	e0 91 62 19 	lds	r30, 0x1962	; 0x801962 <AMIGOs>
   17246:	f0 91 63 19 	lds	r31, 0x1963	; 0x801963 <AMIGOs+0x1>
   1724a:	86 81       	ldd	r24, Z+6	; 0x06
   1724c:	88 87       	std	Y+8, r24	; 0x08
   1724e:	80 e0       	ldi	r24, 0x00	; 0
   17250:	91 e0       	ldi	r25, 0x01	; 1
   17252:	9f 83       	std	Y+7, r25	; 0x07
   17254:	8e 83       	std	Y+6, r24	; 0x06
   17256:	ae 01       	movw	r20, r28
   17258:	4a 5f       	subi	r20, 0xFA	; 250
   1725a:	5f 4f       	sbci	r21, 0xFF	; 255
   1725c:	61 e0       	ldi	r22, 0x01	; 1
   1725e:	70 e0       	ldi	r23, 0x00	; 0
   17260:	ce 01       	movw	r24, r28
   17262:	08 96       	adiw	r24, 0x08	; 8
   17264:	0e 94 86 8c 	call	0x1190c	; 0x1190c <gpib_write_str>
   17268:	2e 81       	ldd	r18, Y+6	; 0x06
   1726a:	3f 81       	ldd	r19, Y+7	; 0x07
   1726c:	22 27       	eor	r18, r18
   1726e:	30 7d       	andi	r19, 0xD0	; 208
   17270:	e0 91 62 19 	lds	r30, 0x1962	; 0x801962 <AMIGOs>
   17274:	f0 91 63 19 	lds	r31, 0x1963	; 0x801963 <AMIGOs+0x1>
   17278:	40 91 b6 01 	lds	r20, 0x01B6	; 0x8001b6 <debuglevel>
   1727c:	23 2b       	or	r18, r19
   1727e:	11 f4       	brne	.+4      	; 0x17284 <amigo_cmd_dsj+0x4e>
   17280:	01 97       	sbiw	r24, 0x01	; 1
   17282:	c1 f0       	breq	.+48     	; 0x172b4 <amigo_cmd_dsj+0x7e>
   17284:	81 e0       	ldi	r24, 0x01	; 1
   17286:	86 83       	std	Z+6, r24	; 0x06
   17288:	87 81       	ldd	r24, Z+7	; 0x07
   1728a:	90 85       	ldd	r25, Z+8	; 0x08
   1728c:	80 62       	ori	r24, 0x20	; 32
   1728e:	90 87       	std	Z+8, r25	; 0x08
   17290:	87 83       	std	Z+7, r24	; 0x07
   17292:	40 ff       	sbrs	r20, 0
   17294:	0a c0       	rjmp	.+20     	; 0x172aa <amigo_cmd_dsj+0x74>
   17296:	82 e8       	ldi	r24, 0x82	; 130
   17298:	9f e2       	ldi	r25, 0x2F	; 47
   1729a:	a0 e0       	ldi	r26, 0x00	; 0
   1729c:	ed b7       	in	r30, 0x3d	; 61
   1729e:	fe b7       	in	r31, 0x3e	; 62
   172a0:	81 83       	std	Z+1, r24	; 0x01
   172a2:	92 83       	std	Z+2, r25	; 0x02
   172a4:	a3 83       	std	Z+3, r26	; 0x03
   172a6:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
   172aa:	8e 81       	ldd	r24, Y+6	; 0x06
   172ac:	9f 81       	ldd	r25, Y+7	; 0x07
   172ae:	88 27       	eor	r24, r24
   172b0:	90 7d       	andi	r25, 0xD0	; 208
   172b2:	19 c0       	rjmp	.+50     	; 0x172e6 <amigo_cmd_dsj+0xb0>
   172b4:	45 ff       	sbrs	r20, 5
   172b6:	0e c0       	rjmp	.+28     	; 0x172d4 <amigo_cmd_dsj+0x9e>
   172b8:	86 81       	ldd	r24, Z+6	; 0x06
   172ba:	90 e0       	ldi	r25, 0x00	; 0
   172bc:	ed b7       	in	r30, 0x3d	; 61
   172be:	fe b7       	in	r31, 0x3e	; 62
   172c0:	95 83       	std	Z+5, r25	; 0x05
   172c2:	84 83       	std	Z+4, r24	; 0x04
   172c4:	85 e7       	ldi	r24, 0x75	; 117
   172c6:	9f e2       	ldi	r25, 0x2F	; 47
   172c8:	a0 e0       	ldi	r26, 0x00	; 0
   172ca:	81 83       	std	Z+1, r24	; 0x01
   172cc:	92 83       	std	Z+2, r25	; 0x02
   172ce:	a3 83       	std	Z+3, r26	; 0x03
   172d0:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
   172d4:	e0 91 62 19 	lds	r30, 0x1962	; 0x801962 <AMIGOs>
   172d8:	f0 91 63 19 	lds	r31, 0x1963	; 0x801963 <AMIGOs+0x1>
   172dc:	16 82       	std	Z+6, r1	; 0x06
   172de:	10 86       	std	Z+8, r1	; 0x08
   172e0:	17 82       	std	Z+7, r1	; 0x07
   172e2:	80 e0       	ldi	r24, 0x00	; 0
   172e4:	90 e0       	ldi	r25, 0x00	; 0
   172e6:	28 96       	adiw	r28, 0x08	; 8
   172e8:	e2 e0       	ldi	r30, 0x02	; 2
   172ea:	0c 94 d0 e8 	jmp	0x1d1a0	; 0x1d1a0 <__epilogue_restores__+0x20>

000172ee <amigo_cmd_clear>:
/// - Reference: A23.
/// - Select sector 0.
/// @return  0

int amigo_cmd_clear()
{
   172ee:	00 d0       	rcall	.+0      	; 0x172f0 <amigo_cmd_clear+0x2>
   172f0:	1f 92       	push	r1
#if SDEBUG
    if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   172f2:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   172f6:	85 ff       	sbrs	r24, 5
   172f8:	0a c0       	rjmp	.+20     	; 0x1730e <amigo_cmd_clear+0x20>
        printf("[AMIGO Clear]\n");
   172fa:	86 e6       	ldi	r24, 0x66	; 102
   172fc:	9f e2       	ldi	r25, 0x2F	; 47
   172fe:	a0 e0       	ldi	r26, 0x00	; 0
   17300:	ed b7       	in	r30, 0x3d	; 61
   17302:	fe b7       	in	r31, 0x3e	; 62
   17304:	81 83       	std	Z+1, r24	; 0x01
   17306:	92 83       	std	Z+2, r25	; 0x02
   17308:	a3 83       	std	Z+3, r26	; 0x03
   1730a:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
#endif
    AMIGOs->sector = 0;
   1730e:	e0 91 62 19 	lds	r30, 0x1962	; 0x801962 <AMIGOs>
   17312:	f0 91 63 19 	lds	r31, 0x1963	; 0x801963 <AMIGOs+0x1>
   17316:	15 82       	std	Z+5, r1	; 0x05
    AMIGOs->head = 0;
   17318:	14 82       	std	Z+4, r1	; 0x04
    AMIGOs->cyl = 0;
   1731a:	13 82       	std	Z+3, r1	; 0x03
/// @todo FIXME
///
///  Clear the DSJ byte that might be 2 after powerup
///
    AMIGOs->dsj = 0;
   1731c:	16 82       	std	Z+6, r1	; 0x06
    AMIGOs->Errors =0;
   1731e:	10 86       	std	Z+8, r1	; 0x08
   17320:	17 82       	std	Z+7, r1	; 0x07

    gpib_enable_PPR(AMIGOp->HEADER.PPR);
   17322:	e0 91 64 19 	lds	r30, 0x1964	; 0x801964 <AMIGOp>
   17326:	f0 91 65 19 	lds	r31, 0x1965	; 0x801965 <AMIGOp+0x1>
   1732a:	81 81       	ldd	r24, Z+1	; 0x01
   1732c:	90 e0       	ldi	r25, 0x00	; 0
   1732e:	0e 94 56 87 	call	0x10eac	; 0x10eac <gpib_enable_PPR>
    return(0);
}
   17332:	80 e0       	ldi	r24, 0x00	; 0
   17334:	90 e0       	ldi	r25, 0x00	; 0
   17336:	0f 90       	pop	r0
   17338:	0f 90       	pop	r0
   1733a:	0f 90       	pop	r0
   1733c:	08 95       	ret

0001733e <amigo_todo_op>:
/// @param[in] opcode: GPIB data byte OP Code
/// @param[in] len: Length of GOIB data returned
/// @return  0

int amigo_todo_op(uint8_t secondary, uint8_t opcode, int len)
{
   1733e:	af e0       	ldi	r26, 0x0F	; 15
   17340:	b0 e0       	ldi	r27, 0x00	; 0
   17342:	e5 ea       	ldi	r30, 0xA5	; 165
   17344:	f9 eb       	ldi	r31, 0xB9	; 185
   17346:	0c 94 b0 e8 	jmp	0x1d160	; 0x1d160 <__prologue_saves__+0x18>
   1734a:	c8 2f       	mov	r28, r24
   1734c:	e6 2e       	mov	r14, r22
   1734e:	8a 01       	movw	r16, r20
    if(AMIGO_is_MLA(listening))
   17350:	80 91 f0 1e 	lds	r24, 0x1EF0	; 0x801ef0 <listening>
   17354:	90 e0       	ldi	r25, 0x00	; 0
   17356:	0e 94 bc 8d 	call	0x11b78	; 0x11b78 <AMIGO_is_MLA>
   1735a:	20 91 ee 1e 	lds	r18, 0x1EEE	; 0x801eee <talking>
   1735e:	f1 2c       	mov	r15, r1
   17360:	d0 e0       	ldi	r29, 0x00	; 0
   17362:	89 2b       	or	r24, r25
   17364:	f1 f0       	breq	.+60     	; 0x173a2 <amigo_todo_op+0x64>
        printf("[L   Amigo TODO secondary: %02XH, state:%02XH, opcode:%02XH, len:%3d, listening:%02XH, talking:%02XH]\n",
   17366:	82 2f       	mov	r24, r18
   17368:	90 e0       	ldi	r25, 0x00	; 0
   1736a:	ed b7       	in	r30, 0x3d	; 61
   1736c:	fe b7       	in	r31, 0x3e	; 62
   1736e:	97 87       	std	Z+15, r25	; 0x0f
   17370:	86 87       	std	Z+14, r24	; 0x0e
   17372:	80 91 f0 1e 	lds	r24, 0x1EF0	; 0x801ef0 <listening>
   17376:	90 e0       	ldi	r25, 0x00	; 0
   17378:	95 87       	std	Z+13, r25	; 0x0d
   1737a:	84 87       	std	Z+12, r24	; 0x0c
   1737c:	13 87       	std	Z+11, r17	; 0x0b
   1737e:	02 87       	std	Z+10, r16	; 0x0a
   17380:	f1 86       	std	Z+9, r15	; 0x09
   17382:	e0 86       	std	Z+8, r14	; 0x08
   17384:	e0 91 62 19 	lds	r30, 0x1962	; 0x801962 <AMIGOs>
   17388:	f0 91 63 19 	lds	r31, 0x1963	; 0x801963 <AMIGOs+0x1>
   1738c:	80 81       	ld	r24, Z
   1738e:	90 e0       	ldi	r25, 0x00	; 0
   17390:	ed b7       	in	r30, 0x3d	; 61
   17392:	fe b7       	in	r31, 0x3e	; 62
   17394:	97 83       	std	Z+7, r25	; 0x07
   17396:	86 83       	std	Z+6, r24	; 0x06
   17398:	d5 83       	std	Z+5, r29	; 0x05
   1739a:	c4 83       	std	Z+4, r28	; 0x04
   1739c:	8f ef       	ldi	r24, 0xFF	; 255
   1739e:	9e e2       	ldi	r25, 0x2E	; 46
   173a0:	51 c0       	rjmp	.+162    	; 0x17444 <amigo_todo_op+0x106>
            secondary, AMIGOs->state, opcode, len, listening, talking);
    else if(AMIGO_is_MTA(talking))
   173a2:	82 2f       	mov	r24, r18
   173a4:	90 e0       	ldi	r25, 0x00	; 0
   173a6:	0e 94 ce 8d 	call	0x11b9c	; 0x11b9c <AMIGO_is_MTA>
   173aa:	20 91 f0 1e 	lds	r18, 0x1EF0	; 0x801ef0 <listening>
   173ae:	30 91 ee 1e 	lds	r19, 0x1EEE	; 0x801eee <talking>
   173b2:	a0 91 62 19 	lds	r26, 0x1962	; 0x801962 <AMIGOs>
   173b6:	b0 91 63 19 	lds	r27, 0x1963	; 0x801963 <AMIGOs+0x1>
   173ba:	89 2b       	or	r24, r25
   173bc:	b1 f0       	breq	.+44     	; 0x173ea <amigo_todo_op+0xac>
        printf("[T   Amigo TODO secondary: %02XH, state:%02XH, opcode:%02XH, len:%3d, listening:%02XH, talking:%02XH]\n",
   173be:	83 2f       	mov	r24, r19
   173c0:	90 e0       	ldi	r25, 0x00	; 0
   173c2:	ed b7       	in	r30, 0x3d	; 61
   173c4:	fe b7       	in	r31, 0x3e	; 62
   173c6:	97 87       	std	Z+15, r25	; 0x0f
   173c8:	86 87       	std	Z+14, r24	; 0x0e
   173ca:	30 e0       	ldi	r19, 0x00	; 0
   173cc:	35 87       	std	Z+13, r19	; 0x0d
   173ce:	24 87       	std	Z+12, r18	; 0x0c
   173d0:	13 87       	std	Z+11, r17	; 0x0b
   173d2:	02 87       	std	Z+10, r16	; 0x0a
   173d4:	f1 86       	std	Z+9, r15	; 0x09
   173d6:	e0 86       	std	Z+8, r14	; 0x08
   173d8:	8c 91       	ld	r24, X
   173da:	90 e0       	ldi	r25, 0x00	; 0
   173dc:	97 83       	std	Z+7, r25	; 0x07
   173de:	86 83       	std	Z+6, r24	; 0x06
   173e0:	d5 83       	std	Z+5, r29	; 0x05
   173e2:	c4 83       	std	Z+4, r28	; 0x04
   173e4:	88 e9       	ldi	r24, 0x98	; 152
   173e6:	9e e2       	ldi	r25, 0x2E	; 46
   173e8:	2d c0       	rjmp	.+90     	; 0x17444 <amigo_todo_op+0x106>
                secondary, AMIGOs->state, opcode, len, listening, talking);
    else if(talking == UNT)
   173ea:	3f 35       	cpi	r19, 0x5F	; 95
   173ec:	b1 f4       	brne	.+44     	; 0x1741a <amigo_todo_op+0xdc>
        printf("[UNT Amigo TODO secondary: %02XH, state:%02XH, opcode:%02XH, len:%3d, listening:%02XH, talking:%02XH]\n",
   173ee:	8f e5       	ldi	r24, 0x5F	; 95
   173f0:	90 e0       	ldi	r25, 0x00	; 0
   173f2:	ed b7       	in	r30, 0x3d	; 61
   173f4:	fe b7       	in	r31, 0x3e	; 62
   173f6:	97 87       	std	Z+15, r25	; 0x0f
   173f8:	86 87       	std	Z+14, r24	; 0x0e
   173fa:	30 e0       	ldi	r19, 0x00	; 0
   173fc:	35 87       	std	Z+13, r19	; 0x0d
   173fe:	24 87       	std	Z+12, r18	; 0x0c
   17400:	13 87       	std	Z+11, r17	; 0x0b
   17402:	02 87       	std	Z+10, r16	; 0x0a
   17404:	f1 86       	std	Z+9, r15	; 0x09
   17406:	e0 86       	std	Z+8, r14	; 0x08
   17408:	8c 91       	ld	r24, X
   1740a:	90 e0       	ldi	r25, 0x00	; 0
   1740c:	97 83       	std	Z+7, r25	; 0x07
   1740e:	86 83       	std	Z+6, r24	; 0x06
   17410:	d5 83       	std	Z+5, r29	; 0x05
   17412:	c4 83       	std	Z+4, r28	; 0x04
   17414:	81 e3       	ldi	r24, 0x31	; 49
   17416:	9e e2       	ldi	r25, 0x2E	; 46
   17418:	15 c0       	rjmp	.+42     	; 0x17444 <amigo_todo_op+0x106>
                secondary, AMIGOs->state, opcode, len, listening, talking);
    else
        printf("[U Amigo TODO secondary: %02XH, state:%02XH, opcode:%02XH, len:%3d, listening:%02XH, talking:%02XH]\n",
   1741a:	83 2f       	mov	r24, r19
   1741c:	90 e0       	ldi	r25, 0x00	; 0
   1741e:	ed b7       	in	r30, 0x3d	; 61
   17420:	fe b7       	in	r31, 0x3e	; 62
   17422:	97 87       	std	Z+15, r25	; 0x0f
   17424:	86 87       	std	Z+14, r24	; 0x0e
   17426:	30 e0       	ldi	r19, 0x00	; 0
   17428:	35 87       	std	Z+13, r19	; 0x0d
   1742a:	24 87       	std	Z+12, r18	; 0x0c
   1742c:	13 87       	std	Z+11, r17	; 0x0b
   1742e:	02 87       	std	Z+10, r16	; 0x0a
   17430:	f1 86       	std	Z+9, r15	; 0x09
   17432:	e0 86       	std	Z+8, r14	; 0x08
   17434:	8c 91       	ld	r24, X
   17436:	90 e0       	ldi	r25, 0x00	; 0
   17438:	97 83       	std	Z+7, r25	; 0x07
   1743a:	86 83       	std	Z+6, r24	; 0x06
   1743c:	d5 83       	std	Z+5, r29	; 0x05
   1743e:	c4 83       	std	Z+4, r28	; 0x04
   17440:	8c ec       	ldi	r24, 0xCC	; 204
   17442:	9d e2       	ldi	r25, 0x2D	; 45
   17444:	a0 e0       	ldi	r26, 0x00	; 0
   17446:	81 83       	std	Z+1, r24	; 0x01
   17448:	92 83       	std	Z+2, r25	; 0x02
   1744a:	a3 83       	std	Z+3, r26	; 0x03
   1744c:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
            secondary, AMIGOs->state, opcode, len, listening, talking);
    gpib_enable_PPR(AMIGOp->HEADER.PPR);
   17450:	e0 91 64 19 	lds	r30, 0x1964	; 0x801964 <AMIGOp>
   17454:	f0 91 65 19 	lds	r31, 0x1965	; 0x801965 <AMIGOp+0x1>
   17458:	81 81       	ldd	r24, Z+1	; 0x01
   1745a:	90 e0       	ldi	r25, 0x00	; 0
   1745c:	0e 94 56 87 	call	0x10eac	; 0x10eac <gpib_enable_PPR>
    return(0);
}
   17460:	80 e0       	ldi	r24, 0x00	; 0
   17462:	90 e0       	ldi	r25, 0x00	; 0
   17464:	cd b7       	in	r28, 0x3d	; 61
   17466:	de b7       	in	r29, 0x3e	; 62
   17468:	2f 96       	adiw	r28, 0x0f	; 15
   1746a:	e6 e0       	ldi	r30, 0x06	; 6
   1746c:	0c 94 cc e8 	jmp	0x1d198	; 0x1d198 <__epilogue_restores__+0x18>

00017470 <amigo_todo>:
/// @param[in] secondary: GPIB seconday command
///
/// @return  0

int amigo_todo(uint8_t secondary)
{
   17470:	ab e0       	ldi	r26, 0x0B	; 11
   17472:	b0 e0       	ldi	r27, 0x00	; 0
   17474:	ee e3       	ldi	r30, 0x3E	; 62
   17476:	fa eb       	ldi	r31, 0xBA	; 186
   17478:	0c 94 b4 e8 	jmp	0x1d168	; 0x1d168 <__prologue_saves__+0x20>
   1747c:	c8 2f       	mov	r28, r24
    if(AMIGO_is_MLA(listening))
   1747e:	80 91 f0 1e 	lds	r24, 0x1EF0	; 0x801ef0 <listening>
   17482:	90 e0       	ldi	r25, 0x00	; 0
   17484:	0e 94 bc 8d 	call	0x11b78	; 0x11b78 <AMIGO_is_MLA>
   17488:	20 91 ee 1e 	lds	r18, 0x1EEE	; 0x801eee <talking>
   1748c:	d0 e0       	ldi	r29, 0x00	; 0
   1748e:	89 2b       	or	r24, r25
   17490:	d1 f0       	breq	.+52     	; 0x174c6 <amigo_todo+0x56>
        printf("[L   Amigo TODO secondary: %02XH, state:%02XH, listening:%02XH, talking:%02XH]\n",
   17492:	82 2f       	mov	r24, r18
   17494:	90 e0       	ldi	r25, 0x00	; 0
   17496:	ed b7       	in	r30, 0x3d	; 61
   17498:	fe b7       	in	r31, 0x3e	; 62
   1749a:	93 87       	std	Z+11, r25	; 0x0b
   1749c:	82 87       	std	Z+10, r24	; 0x0a
   1749e:	80 91 f0 1e 	lds	r24, 0x1EF0	; 0x801ef0 <listening>
   174a2:	90 e0       	ldi	r25, 0x00	; 0
   174a4:	91 87       	std	Z+9, r25	; 0x09
   174a6:	80 87       	std	Z+8, r24	; 0x08
   174a8:	e0 91 62 19 	lds	r30, 0x1962	; 0x801962 <AMIGOs>
   174ac:	f0 91 63 19 	lds	r31, 0x1963	; 0x801963 <AMIGOs+0x1>
   174b0:	80 81       	ld	r24, Z
   174b2:	90 e0       	ldi	r25, 0x00	; 0
   174b4:	ed b7       	in	r30, 0x3d	; 61
   174b6:	fe b7       	in	r31, 0x3e	; 62
   174b8:	97 83       	std	Z+7, r25	; 0x07
   174ba:	86 83       	std	Z+6, r24	; 0x06
   174bc:	d5 83       	std	Z+5, r29	; 0x05
   174be:	c4 83       	std	Z+4, r28	; 0x04
   174c0:	8c e7       	ldi	r24, 0x7C	; 124
   174c2:	9d e2       	ldi	r25, 0x2D	; 45
   174c4:	43 c0       	rjmp	.+134    	; 0x1754c <amigo_todo+0xdc>
            secondary,AMIGOs->state,listening,talking);
    else if(AMIGO_is_MTA(talking))
   174c6:	82 2f       	mov	r24, r18
   174c8:	90 e0       	ldi	r25, 0x00	; 0
   174ca:	0e 94 ce 8d 	call	0x11b9c	; 0x11b9c <AMIGO_is_MTA>
   174ce:	20 91 f0 1e 	lds	r18, 0x1EF0	; 0x801ef0 <listening>
   174d2:	40 91 ee 1e 	lds	r20, 0x1EEE	; 0x801eee <talking>
   174d6:	a0 91 62 19 	lds	r26, 0x1962	; 0x801962 <AMIGOs>
   174da:	b0 91 63 19 	lds	r27, 0x1963	; 0x801963 <AMIGOs+0x1>
   174de:	89 2b       	or	r24, r25
   174e0:	89 f0       	breq	.+34     	; 0x17504 <amigo_todo+0x94>
        printf("[T   Amigo TODO secondary: %02XH, state:%02XH, listening:%02XH, talking:%02XH]\n",
   174e2:	50 e0       	ldi	r21, 0x00	; 0
   174e4:	ed b7       	in	r30, 0x3d	; 61
   174e6:	fe b7       	in	r31, 0x3e	; 62
   174e8:	53 87       	std	Z+11, r21	; 0x0b
   174ea:	42 87       	std	Z+10, r20	; 0x0a
   174ec:	30 e0       	ldi	r19, 0x00	; 0
   174ee:	31 87       	std	Z+9, r19	; 0x09
   174f0:	20 87       	std	Z+8, r18	; 0x08
   174f2:	8c 91       	ld	r24, X
   174f4:	90 e0       	ldi	r25, 0x00	; 0
   174f6:	97 83       	std	Z+7, r25	; 0x07
   174f8:	86 83       	std	Z+6, r24	; 0x06
   174fa:	d5 83       	std	Z+5, r29	; 0x05
   174fc:	c4 83       	std	Z+4, r28	; 0x04
   174fe:	8c e2       	ldi	r24, 0x2C	; 44
   17500:	9d e2       	ldi	r25, 0x2D	; 45
   17502:	24 c0       	rjmp	.+72     	; 0x1754c <amigo_todo+0xdc>
                secondary,AMIGOs->state,listening,talking);
    else if(talking == UNT)
   17504:	4f 35       	cpi	r20, 0x5F	; 95
   17506:	91 f4       	brne	.+36     	; 0x1752c <amigo_todo+0xbc>
        printf("[UNT Amigo TODO secondary: %02XH, state:%02XH, listening:%02XH, talking:%02XH]\n",
   17508:	8f e5       	ldi	r24, 0x5F	; 95
   1750a:	90 e0       	ldi	r25, 0x00	; 0
   1750c:	ed b7       	in	r30, 0x3d	; 61
   1750e:	fe b7       	in	r31, 0x3e	; 62
   17510:	93 87       	std	Z+11, r25	; 0x0b
   17512:	82 87       	std	Z+10, r24	; 0x0a
   17514:	30 e0       	ldi	r19, 0x00	; 0
   17516:	31 87       	std	Z+9, r19	; 0x09
   17518:	20 87       	std	Z+8, r18	; 0x08
   1751a:	8c 91       	ld	r24, X
   1751c:	90 e0       	ldi	r25, 0x00	; 0
   1751e:	97 83       	std	Z+7, r25	; 0x07
   17520:	86 83       	std	Z+6, r24	; 0x06
   17522:	d5 83       	std	Z+5, r29	; 0x05
   17524:	c4 83       	std	Z+4, r28	; 0x04
   17526:	8c ed       	ldi	r24, 0xDC	; 220
   17528:	9c e2       	ldi	r25, 0x2C	; 44
   1752a:	10 c0       	rjmp	.+32     	; 0x1754c <amigo_todo+0xdc>
                secondary,AMIGOs->state,listening,talking);
    else
        printf("[E   Amigo ERROR secondary: %02XH, state:%02XH, listening:%02XH, talking:%02XH]\n",
   1752c:	50 e0       	ldi	r21, 0x00	; 0
   1752e:	ed b7       	in	r30, 0x3d	; 61
   17530:	fe b7       	in	r31, 0x3e	; 62
   17532:	53 87       	std	Z+11, r21	; 0x0b
   17534:	42 87       	std	Z+10, r20	; 0x0a
   17536:	30 e0       	ldi	r19, 0x00	; 0
   17538:	31 87       	std	Z+9, r19	; 0x09
   1753a:	20 87       	std	Z+8, r18	; 0x08
   1753c:	8c 91       	ld	r24, X
   1753e:	90 e0       	ldi	r25, 0x00	; 0
   17540:	97 83       	std	Z+7, r25	; 0x07
   17542:	86 83       	std	Z+6, r24	; 0x06
   17544:	d5 83       	std	Z+5, r29	; 0x05
   17546:	c4 83       	std	Z+4, r28	; 0x04
   17548:	8b e8       	ldi	r24, 0x8B	; 139
   1754a:	9c e2       	ldi	r25, 0x2C	; 44
   1754c:	a0 e0       	ldi	r26, 0x00	; 0
   1754e:	81 83       	std	Z+1, r24	; 0x01
   17550:	92 83       	std	Z+2, r25	; 0x02
   17552:	a3 83       	std	Z+3, r26	; 0x03
   17554:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
            secondary,AMIGOs->state,listening,talking);
    gpib_enable_PPR(AMIGOp->HEADER.PPR);
   17558:	e0 91 64 19 	lds	r30, 0x1964	; 0x801964 <AMIGOp>
   1755c:	f0 91 65 19 	lds	r31, 0x1965	; 0x801965 <AMIGOp+0x1>
   17560:	81 81       	ldd	r24, Z+1	; 0x01
   17562:	90 e0       	ldi	r25, 0x00	; 0
   17564:	0e 94 56 87 	call	0x10eac	; 0x10eac <gpib_enable_PPR>
    return(0);
}
   17568:	80 e0       	ldi	r24, 0x00	; 0
   1756a:	90 e0       	ldi	r25, 0x00	; 0
   1756c:	cd b7       	in	r28, 0x3d	; 61
   1756e:	de b7       	in	r29, 0x3e	; 62
   17570:	2b 96       	adiw	r28, 0x0b	; 11
   17572:	e2 e0       	ldi	r30, 0x02	; 2
   17574:	0c 94 d0 e8 	jmp	0x1d1a0	; 0x1d1a0 <__epilogue_restores__+0x20>

00017578 <amigo_check_unit>:
/// @brief  Amigo Check Valid unit
/// @param[in] unit: unit to set
/// @return void
void amigo_check_unit(uint8_t unit)
{
    if(unit != 15)
   17578:	8f 30       	cpi	r24, 0x0F	; 15
   1757a:	29 f0       	breq	.+10     	; 0x17586 <amigo_check_unit+0xe>
        AMIGOs->unitNO = unit;
   1757c:	e0 91 62 19 	lds	r30, 0x1962	; 0x801962 <AMIGOs>
   17580:	f0 91 63 19 	lds	r31, 0x1963	; 0x801963 <AMIGOs+0x1>
   17584:	81 83       	std	Z+1, r24	; 0x01
    if(AMIGOs->unitNO != 0)
   17586:	e0 91 62 19 	lds	r30, 0x1962	; 0x801962 <AMIGOs>
   1758a:	f0 91 63 19 	lds	r31, 0x1963	; 0x801963 <AMIGOs+0x1>
   1758e:	81 81       	ldd	r24, Z+1	; 0x01
   17590:	88 23       	and	r24, r24
   17592:	29 f0       	breq	.+10     	; 0x1759e <amigo_check_unit+0x26>
        AMIGOs->Errors |= ERR_UNIT;
   17594:	87 81       	ldd	r24, Z+7	; 0x07
   17596:	90 85       	ldd	r25, Z+8	; 0x08
   17598:	80 64       	ori	r24, 0x40	; 64
   1759a:	90 87       	std	Z+8, r25	; 0x08
   1759c:	87 83       	std	Z+7, r24	; 0x07
   1759e:	08 95       	ret

000175a0 <Amigo_Command>:
/// @return  0 on sucess
/// @return or GPIB error flags on fail
/// @see  gpib.h ERROR_MASK defines for a full list)

int Amigo_Command( int secondary )
{
   175a0:	ac e1       	ldi	r26, 0x1C	; 28
   175a2:	b0 e0       	ldi	r27, 0x00	; 0
   175a4:	e6 ed       	ldi	r30, 0xD6	; 214
   175a6:	fa eb       	ldi	r31, 0xBA	; 186
   175a8:	0c 94 b0 e8 	jmp	0x1d160	; 0x1d160 <__prologue_saves__+0x18>
   175ac:	7c 01       	movw	r14, r24
    uint8_t *ptr;
    uint16_t status;                              // Current status
    UINT len;                                     // Size of Data/Op Codes/Parameters read in bytes

#if SDEBUG
    if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   175ae:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   175b2:	85 ff       	sbrs	r24, 5
   175b4:	16 c0       	rjmp	.+44     	; 0x175e2 <Amigo_Command+0x42>
        printf("[AMIGO Command(%02XH): listen:%02XH, talk:%02XH]\n",
   175b6:	80 91 ee 1e 	lds	r24, 0x1EEE	; 0x801eee <talking>
   175ba:	90 e0       	ldi	r25, 0x00	; 0
   175bc:	ed b7       	in	r30, 0x3d	; 61
   175be:	fe b7       	in	r31, 0x3e	; 62
   175c0:	91 87       	std	Z+9, r25	; 0x09
   175c2:	80 87       	std	Z+8, r24	; 0x08
   175c4:	80 91 f0 1e 	lds	r24, 0x1EF0	; 0x801ef0 <listening>
   175c8:	90 e0       	ldi	r25, 0x00	; 0
   175ca:	97 83       	std	Z+7, r25	; 0x07
   175cc:	86 83       	std	Z+6, r24	; 0x06
   175ce:	f5 82       	std	Z+5, r15	; 0x05
   175d0:	e4 82       	std	Z+4, r14	; 0x04
   175d2:	89 e5       	ldi	r24, 0x59	; 89
   175d4:	9c e2       	ldi	r25, 0x2C	; 44
   175d6:	a0 e0       	ldi	r26, 0x00	; 0
   175d8:	81 83       	std	Z+1, r24	; 0x01
   175da:	92 83       	std	Z+2, r25	; 0x02
   175dc:	a3 83       	std	Z+3, r26	; 0x03
   175de:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
            secondary, listening, talking);
#endif

///  Reference: A14
    if (secondary == 0x7e && AMIGO_is_MTA(talking))
   175e2:	fe e7       	ldi	r31, 0x7E	; 126
   175e4:	ef 16       	cp	r14, r31
   175e6:	f1 04       	cpc	r15, r1
   175e8:	f1 f5       	brne	.+124    	; 0x17666 <Amigo_Command+0xc6>
   175ea:	80 91 ee 1e 	lds	r24, 0x1EEE	; 0x801eee <talking>
   175ee:	90 e0       	ldi	r25, 0x00	; 0
   175f0:	0e 94 ce 8d 	call	0x11b9c	; 0x11b9c <AMIGO_is_MTA>
   175f4:	89 2b       	or	r24, r25
   175f6:	09 f4       	brne	.+2      	; 0x175fa <Amigo_Command+0x5a>
   175f8:	86 c0       	rjmp	.+268    	; 0x17706 <Amigo_Command+0x166>
    {
        gpib_disable_PPR(AMIGOp->HEADER.PPR);
   175fa:	e0 91 64 19 	lds	r30, 0x1964	; 0x801964 <AMIGOp>
   175fe:	f0 91 65 19 	lds	r31, 0x1965	; 0x801965 <AMIGOp+0x1>
   17602:	81 81       	ldd	r24, Z+1	; 0x01
   17604:	90 e0       	ldi	r25, 0x00	; 0
   17606:	0e 94 8c 87 	call	0x10f18	; 0x10f18 <gpib_disable_PPR>
        status = EOI_FLAG;
   1760a:	80 e0       	ldi	r24, 0x00	; 0
   1760c:	91 e0       	ldi	r25, 0x01	; 1
   1760e:	9c 8f       	std	Y+28, r25	; 0x1c
   17610:	8b 8f       	std	Y+27, r24	; 0x1b
        len = gpib_write_str(gpib_iobuff, GPIB_IOBUFF_LEN, &status);
   17612:	ae 01       	movw	r20, r28
   17614:	45 5e       	subi	r20, 0xE5	; 229
   17616:	5f 4f       	sbci	r21, 0xFF	; 255
   17618:	60 e0       	ldi	r22, 0x00	; 0
   1761a:	72 e0       	ldi	r23, 0x02	; 2
   1761c:	8a ee       	ldi	r24, 0xEA	; 234
   1761e:	9c e1       	ldi	r25, 0x1C	; 28
   17620:	0e 94 86 8c 	call	0x1190c	; 0x1190c <gpib_write_str>
        gpib_enable_PPR(AMIGOp->HEADER.PPR);
   17624:	e0 91 64 19 	lds	r30, 0x1964	; 0x801964 <AMIGOp>
   17628:	f0 91 65 19 	lds	r31, 0x1965	; 0x801965 <AMIGOp+0x1>
   1762c:	81 81       	ldd	r24, Z+1	; 0x01
   1762e:	90 e0       	ldi	r25, 0x00	; 0
   17630:	0e 94 56 87 	call	0x10eac	; 0x10eac <gpib_enable_PPR>
        if(status & ERROR_MASK)
   17634:	8b 8d       	ldd	r24, Y+27	; 0x1b
   17636:	9c 8d       	ldd	r25, Y+28	; 0x1c
   17638:	88 27       	eor	r24, r24
   1763a:	90 7d       	andi	r25, 0xD0	; 208
   1763c:	89 2b       	or	r24, r25
   1763e:	09 f4       	brne	.+2      	; 0x17642 <Amigo_Command+0xa2>
   17640:	89 c2       	rjmp	.+1298   	; 0x17b54 <Amigo_Command+0x5b4>
        {
            AMIGOs->dsj = 1;
   17642:	e0 91 62 19 	lds	r30, 0x1962	; 0x801962 <AMIGOs>
   17646:	f0 91 63 19 	lds	r31, 0x1963	; 0x801963 <AMIGOs+0x1>
   1764a:	81 e0       	ldi	r24, 0x01	; 1
   1764c:	86 83       	std	Z+6, r24	; 0x06
            AMIGOs->Errors |= ERR_GPIB;
   1764e:	87 81       	ldd	r24, Z+7	; 0x07
   17650:	90 85       	ldd	r25, Z+8	; 0x08
   17652:	80 62       	ori	r24, 0x20	; 32
   17654:	90 87       	std	Z+8, r25	; 0x08
   17656:	87 83       	std	Z+7, r24	; 0x07
            if(debuglevel & GPIB_ERR)
   17658:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1765c:	80 ff       	sbrs	r24, 0
   1765e:	7a c2       	rjmp	.+1268   	; 0x17b54 <Amigo_Command+0x5b4>
                printf("[AMIGO_Command:GPIB write error]\n");
   17660:	87 e3       	ldi	r24, 0x37	; 55
   17662:	9c e2       	ldi	r25, 0x2C	; 44
   17664:	8e c0       	rjmp	.+284    	; 0x17782 <Amigo_Command+0x1e2>
        }
        return(status & ERROR_MASK);
    }

///  Reference: A25
    if (secondary == 0x7f && AMIGO_is_MLA(listening))
   17666:	ff e7       	ldi	r31, 0x7F	; 127
   17668:	ef 16       	cp	r14, r31
   1766a:	f1 04       	cpc	r15, r1
   1766c:	09 f0       	breq	.+2      	; 0x17670 <Amigo_Command+0xd0>
   1766e:	4b c0       	rjmp	.+150    	; 0x17706 <Amigo_Command+0x166>
   17670:	80 91 f0 1e 	lds	r24, 0x1EF0	; 0x801ef0 <listening>
   17674:	90 e0       	ldi	r25, 0x00	; 0
   17676:	0e 94 bc 8d 	call	0x11b78	; 0x11b78 <AMIGO_is_MLA>
   1767a:	89 2b       	or	r24, r25
   1767c:	09 f4       	brne	.+2      	; 0x17680 <Amigo_Command+0xe0>
   1767e:	43 c0       	rjmp	.+134    	; 0x17706 <Amigo_Command+0x166>
    {
        gpib_disable_PPR(AMIGOp->HEADER.PPR);
   17680:	e0 91 64 19 	lds	r30, 0x1964	; 0x801964 <AMIGOp>
   17684:	f0 91 65 19 	lds	r31, 0x1965	; 0x801965 <AMIGOp+0x1>
   17688:	81 81       	ldd	r24, Z+1	; 0x01
   1768a:	90 e0       	ldi	r25, 0x00	; 0
   1768c:	0e 94 8c 87 	call	0x10f18	; 0x10f18 <gpib_disable_PPR>
#if SDEBUG
        if(debuglevel & GPIB_RW_STR_TIMING)
   17690:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17694:	87 fd       	sbrc	r24, 7
            gpib_timer_elapsed_begin();
   17696:	0e 94 7c 86 	call	0x10cf8	; 0x10cf8 <gpib_timer_elapsed_begin>
#endif
        status = EOI_FLAG;
   1769a:	80 e0       	ldi	r24, 0x00	; 0
   1769c:	91 e0       	ldi	r25, 0x01	; 1
   1769e:	9c 8f       	std	Y+28, r25	; 0x1c
   176a0:	8b 8f       	std	Y+27, r24	; 0x1b
        len = gpib_read_str(gpib_iobuff, GPIB_IOBUFF_LEN, &status);
   176a2:	ae 01       	movw	r20, r28
   176a4:	45 5e       	subi	r20, 0xE5	; 229
   176a6:	5f 4f       	sbci	r21, 0xFF	; 255
   176a8:	60 e0       	ldi	r22, 0x00	; 0
   176aa:	72 e0       	ldi	r23, 0x02	; 2
   176ac:	8a ee       	ldi	r24, 0xEA	; 234
   176ae:	9c e1       	ldi	r25, 0x1C	; 28
   176b0:	0e 94 e4 8b 	call	0x117c8	; 0x117c8 <gpib_read_str>
#if SDEBUG
        if(debuglevel & GPIB_RW_STR_TIMING)
   176b4:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   176b8:	87 ff       	sbrs	r24, 7
   176ba:	04 c0       	rjmp	.+8      	; 0x176c4 <Amigo_Command+0x124>
            gpib_timer_elapsed_end("GPIB read");
   176bc:	80 ec       	ldi	r24, 0xC0	; 192
   176be:	95 e1       	ldi	r25, 0x15	; 21
   176c0:	0e 94 8e 86 	call	0x10d1c	; 0x10d1c <gpib_timer_elapsed_end>
#endif
        gpib_enable_PPR(AMIGOp->HEADER.PPR);
   176c4:	e0 91 64 19 	lds	r30, 0x1964	; 0x801964 <AMIGOp>
   176c8:	f0 91 65 19 	lds	r31, 0x1965	; 0x801965 <AMIGOp+0x1>
   176cc:	81 81       	ldd	r24, Z+1	; 0x01
   176ce:	90 e0       	ldi	r25, 0x00	; 0
   176d0:	0e 94 56 87 	call	0x10eac	; 0x10eac <gpib_enable_PPR>
        if(status & ERROR_MASK)
   176d4:	8b 8d       	ldd	r24, Y+27	; 0x1b
   176d6:	9c 8d       	ldd	r25, Y+28	; 0x1c
   176d8:	88 27       	eor	r24, r24
   176da:	90 7d       	andi	r25, 0xD0	; 208
   176dc:	89 2b       	or	r24, r25
   176de:	09 f4       	brne	.+2      	; 0x176e2 <Amigo_Command+0x142>
   176e0:	39 c2       	rjmp	.+1138   	; 0x17b54 <Amigo_Command+0x5b4>
        {
            AMIGOs->dsj = 1;
   176e2:	e0 91 62 19 	lds	r30, 0x1962	; 0x801962 <AMIGOs>
   176e6:	f0 91 63 19 	lds	r31, 0x1963	; 0x801963 <AMIGOs+0x1>
   176ea:	81 e0       	ldi	r24, 0x01	; 1
   176ec:	86 83       	std	Z+6, r24	; 0x06
            AMIGOs->Errors |= ERR_GPIB;
   176ee:	87 81       	ldd	r24, Z+7	; 0x07
   176f0:	90 85       	ldd	r25, Z+8	; 0x08
   176f2:	80 62       	ori	r24, 0x20	; 32
   176f4:	90 87       	std	Z+8, r25	; 0x08
   176f6:	87 83       	std	Z+7, r24	; 0x07
            if(debuglevel & GPIB_ERR)
   176f8:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   176fc:	80 ff       	sbrs	r24, 0
   176fe:	2a c2       	rjmp	.+1108   	; 0x17b54 <Amigo_Command+0x5b4>
                printf("[AMIGO Command:GPIB read error]\n");
   17700:	86 e1       	ldi	r24, 0x16	; 22
   17702:	9c e2       	ldi	r25, 0x2C	; 44
   17704:	3e c0       	rjmp	.+124    	; 0x17782 <Amigo_Command+0x1e2>
        }
        return(status & ERROR_MASK);
    }

    if( !AMIGO_is_MLA(listening) || AMIGO_is_MTA(talking))
   17706:	80 91 f0 1e 	lds	r24, 0x1EF0	; 0x801ef0 <listening>
   1770a:	90 e0       	ldi	r25, 0x00	; 0
   1770c:	0e 94 bc 8d 	call	0x11b78	; 0x11b78 <AMIGO_is_MLA>
   17710:	89 2b       	or	r24, r25
   17712:	19 f4       	brne	.+6      	; 0x1771a <Amigo_Command+0x17a>
        return(0);
   17714:	80 e0       	ldi	r24, 0x00	; 0
   17716:	90 e0       	ldi	r25, 0x00	; 0
   17718:	25 c2       	rjmp	.+1098   	; 0x17b64 <Amigo_Command+0x5c4>
                printf("[AMIGO Command:GPIB read error]\n");
        }
        return(status & ERROR_MASK);
    }

    if( !AMIGO_is_MLA(listening) || AMIGO_is_MTA(talking))
   1771a:	80 91 ee 1e 	lds	r24, 0x1EEE	; 0x801eee <talking>
   1771e:	90 e0       	ldi	r25, 0x00	; 0
   17720:	0e 94 ce 8d 	call	0x11b9c	; 0x11b9c <AMIGO_is_MTA>
   17724:	89 2b       	or	r24, r25
   17726:	b1 f7       	brne	.-20     	; 0x17714 <Amigo_Command+0x174>
        return(0);

    gpib_disable_PPR(AMIGOp->HEADER.PPR);
   17728:	e0 91 64 19 	lds	r30, 0x1964	; 0x801964 <AMIGOp>
   1772c:	f0 91 65 19 	lds	r31, 0x1965	; 0x801965 <AMIGOp+0x1>
   17730:	81 81       	ldd	r24, Z+1	; 0x01
   17732:	90 e0       	ldi	r25, 0x00	; 0
   17734:	0e 94 8c 87 	call	0x10f18	; 0x10f18 <gpib_disable_PPR>

///  Note: the function will "unread" any commands and return
///  All Data MUST have EOI

    status = EOI_FLAG;
   17738:	80 e0       	ldi	r24, 0x00	; 0
   1773a:	91 e0       	ldi	r25, 0x01	; 1
   1773c:	9c 8f       	std	Y+28, r25	; 0x1c
   1773e:	8b 8f       	std	Y+27, r24	; 0x1b
    len = gpib_read_str(gpib_iobuff, GPIB_IOBUFF_LEN, &status);
   17740:	ae 01       	movw	r20, r28
   17742:	45 5e       	subi	r20, 0xE5	; 229
   17744:	5f 4f       	sbci	r21, 0xFF	; 255
   17746:	60 e0       	ldi	r22, 0x00	; 0
   17748:	72 e0       	ldi	r23, 0x02	; 2
   1774a:	8a ee       	ldi	r24, 0xEA	; 234
   1774c:	9c e1       	ldi	r25, 0x1C	; 28
   1774e:	0e 94 e4 8b 	call	0x117c8	; 0x117c8 <gpib_read_str>
   17752:	8c 01       	movw	r16, r24
    if(status & ERROR_MASK)
   17754:	8b 8d       	ldd	r24, Y+27	; 0x1b
   17756:	9c 8d       	ldd	r25, Y+28	; 0x1c
   17758:	88 27       	eor	r24, r24
   1775a:	90 7d       	andi	r25, 0xD0	; 208
   1775c:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   17760:	89 2b       	or	r24, r25
   17762:	c1 f0       	breq	.+48     	; 0x17794 <Amigo_Command+0x1f4>
    {
        AMIGOs->dsj = 1;
   17764:	e0 91 62 19 	lds	r30, 0x1962	; 0x801962 <AMIGOs>
   17768:	f0 91 63 19 	lds	r31, 0x1963	; 0x801963 <AMIGOs+0x1>
   1776c:	81 e0       	ldi	r24, 0x01	; 1
   1776e:	86 83       	std	Z+6, r24	; 0x06
        AMIGOs->Errors |= ERR_GPIB;
   17770:	87 81       	ldd	r24, Z+7	; 0x07
   17772:	90 85       	ldd	r25, Z+8	; 0x08
   17774:	80 62       	ori	r24, 0x20	; 32
   17776:	90 87       	std	Z+8, r25	; 0x08
   17778:	87 83       	std	Z+7, r24	; 0x07
        if(debuglevel & GPIB_ERR)
   1777a:	20 ff       	sbrs	r18, 0
   1777c:	eb c1       	rjmp	.+982    	; 0x17b54 <Amigo_Command+0x5b4>
            printf("[AMIGO Command:GPIB read error]\n");
   1777e:	85 ef       	ldi	r24, 0xF5	; 245
   17780:	9b e2       	ldi	r25, 0x2B	; 43
   17782:	a0 e0       	ldi	r26, 0x00	; 0
   17784:	ed b7       	in	r30, 0x3d	; 61
   17786:	fe b7       	in	r31, 0x3e	; 62
   17788:	81 83       	std	Z+1, r24	; 0x01
   1778a:	92 83       	std	Z+2, r25	; 0x02
   1778c:	a3 83       	std	Z+3, r26	; 0x03
   1778e:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
   17792:	e0 c1       	rjmp	.+960    	; 0x17b54 <Amigo_Command+0x5b4>
        return(status & ERROR_MASK);
    }
#if SDEBUG
    if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   17794:	25 ff       	sbrs	r18, 5
   17796:	0e c0       	rjmp	.+28     	; 0x177b4 <Amigo_Command+0x214>
        printf("[AMIGO Command(%02XH): GPIB read bytes:%02XH]\n",
   17798:	ed b7       	in	r30, 0x3d	; 61
   1779a:	fe b7       	in	r31, 0x3e	; 62
   1779c:	17 83       	std	Z+7, r17	; 0x07
   1779e:	06 83       	std	Z+6, r16	; 0x06
   177a0:	f5 82       	std	Z+5, r15	; 0x05
   177a2:	e4 82       	std	Z+4, r14	; 0x04
   177a4:	86 ec       	ldi	r24, 0xC6	; 198
   177a6:	9b e2       	ldi	r25, 0x2B	; 43
   177a8:	a0 e0       	ldi	r26, 0x00	; 0
   177aa:	81 83       	std	Z+1, r24	; 0x01
   177ac:	92 83       	std	Z+2, r25	; 0x02
   177ae:	a3 83       	std	Z+3, r26	; 0x03
   177b0:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
            secondary, len);
#endif
    if(!len)
   177b4:	01 15       	cp	r16, r1
   177b6:	11 05       	cpc	r17, r1
   177b8:	61 f4       	brne	.+24     	; 0x177d2 <Amigo_Command+0x232>
    {
        AMIGOs->dsj = 1;
   177ba:	e0 91 62 19 	lds	r30, 0x1962	; 0x801962 <AMIGOs>
   177be:	f0 91 63 19 	lds	r31, 0x1963	; 0x801963 <AMIGOs+0x1>
   177c2:	81 e0       	ldi	r24, 0x01	; 1
   177c4:	86 83       	std	Z+6, r24	; 0x06
        AMIGOs->Errors |= ERR_GPIB;
   177c6:	87 81       	ldd	r24, Z+7	; 0x07
   177c8:	90 85       	ldd	r25, Z+8	; 0x08
   177ca:	80 62       	ori	r24, 0x20	; 32
   177cc:	90 87       	std	Z+8, r25	; 0x08
   177ce:	87 83       	std	Z+7, r24	; 0x07
   177d0:	c1 c1       	rjmp	.+898    	; 0x17b54 <Amigo_Command+0x5b4>
        return(status & ERROR_MASK);
    }

    ptr = gpib_iobuff;
    op = *ptr++;
   177d2:	60 91 ea 1c 	lds	r22, 0x1CEA	; 0x801cea <gpib_iobuff>

    if (secondary == 0x68)
   177d6:	f8 e6       	ldi	r31, 0x68	; 104
   177d8:	ef 16       	cp	r14, r31
   177da:	f1 04       	cpc	r15, r1
   177dc:	09 f0       	breq	.+2      	; 0x177e0 <Amigo_Command+0x240>
   177de:	28 c1       	rjmp	.+592    	; 0x17a30 <Amigo_Command+0x490>
    {
        if(op == 0x00 && len == 2)
   177e0:	61 11       	cpse	r22, r1
   177e2:	2e c0       	rjmp	.+92     	; 0x17840 <Amigo_Command+0x2a0>
   177e4:	02 30       	cpi	r16, 0x02	; 2
   177e6:	11 05       	cpc	r17, r1
   177e8:	09 f0       	breq	.+2      	; 0x177ec <Amigo_Command+0x24c>
   177ea:	b9 c1       	rjmp	.+882    	; 0x17b5e <Amigo_Command+0x5be>
        {
///  Reference: A40

            AMIGOStateType tmp;
#if SDEBUG
            if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   177ec:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   177f0:	85 ff       	sbrs	r24, 5
   177f2:	0a c0       	rjmp	.+20     	; 0x17808 <Amigo_Command+0x268>
                printf("[AMIGO Cold Load Read Command]\n");
   177f4:	86 ea       	ldi	r24, 0xA6	; 166
   177f6:	9b e2       	ldi	r25, 0x2B	; 43
   177f8:	a0 e0       	ldi	r26, 0x00	; 0
   177fa:	ed b7       	in	r30, 0x3d	; 61
   177fc:	fe b7       	in	r31, 0x3e	; 62
   177fe:	81 83       	std	Z+1, r24	; 0x01
   17800:	92 83       	std	Z+2, r25	; 0x02
   17802:	a3 83       	std	Z+3, r26	; 0x03
   17804:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
#endif
///TODO we do NOT support multiple units yet
            AMIGOs->unitNO = 0;
   17808:	e0 91 62 19 	lds	r30, 0x1962	; 0x801962 <AMIGOs>
   1780c:	f0 91 63 19 	lds	r31, 0x1963	; 0x801963 <AMIGOs+0x1>
   17810:	11 82       	std	Z+1, r1	; 0x01
            AMIGOs->dsj = 0;
   17812:	16 82       	std	Z+6, r1	; 0x06
            AMIGOs->Errors = 0;
   17814:	10 86       	std	Z+8, r1	; 0x08
   17816:	17 82       	std	Z+7, r1	; 0x07
/// Fill in temparary address
            tmp.cyl = 0;
   17818:	1d 86       	std	Y+13, r1	; 0x0d
            tmp.head = ( (0xff & *ptr) >> 6) & 0x03;
   1781a:	80 91 eb 1c 	lds	r24, 0x1CEB	; 0x801ceb <gpib_iobuff+0x1>
   1781e:	98 2f       	mov	r25, r24
   17820:	92 95       	swap	r25
   17822:	96 95       	lsr	r25
   17824:	96 95       	lsr	r25
   17826:	93 70       	andi	r25, 0x03	; 3
   17828:	9e 87       	std	Y+14, r25	; 0x0e
            tmp.sector = 0x3f & *ptr;
   1782a:	8f 73       	andi	r24, 0x3F	; 63
   1782c:	8f 87       	std	Y+15, r24	; 0x0f
            ++ptr;
//update to real address on sucess
            amigo_seek((AMIGOStateType *) &tmp);
   1782e:	ce 01       	movw	r24, r28
   17830:	0a 96       	adiw	r24, 0x0a	; 10
   17832:	d1 d9       	rcall	.-3166   	; 0x16bd6 <amigo_seek>
            AMIGOs->state = AMIGO_COLD_LOAD_READ;
   17834:	e0 91 62 19 	lds	r30, 0x1962	; 0x801962 <AMIGOs>
   17838:	f0 91 63 19 	lds	r31, 0x1963	; 0x801963 <AMIGOs+0x1>
   1783c:	85 e0       	ldi	r24, 0x05	; 5
   1783e:	19 c1       	rjmp	.+562    	; 0x17a72 <Amigo_Command+0x4d2>
            gpib_enable_PPR(AMIGOp->HEADER.PPR);
            return(status & ERROR_MASK);
        }
        else if(op == 0x02 && len == 5)
   17840:	62 30       	cpi	r22, 0x02	; 2
   17842:	09 f0       	breq	.+2      	; 0x17846 <Amigo_Command+0x2a6>
   17844:	3f c0       	rjmp	.+126    	; 0x178c4 <Amigo_Command+0x324>
   17846:	05 30       	cpi	r16, 0x05	; 5
   17848:	11 05       	cpc	r17, r1
   1784a:	d1 f4       	brne	.+52     	; 0x17880 <Amigo_Command+0x2e0>
/// @brief
///  Seek 1 byte cylinder

            AMIGOStateType tmp;
#if SDEBUG
            if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   1784c:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17850:	85 ff       	sbrs	r24, 5
   17852:	0a c0       	rjmp	.+20     	; 0x17868 <Amigo_Command+0x2c8>
                printf("[AMIGO Seek len=5]\n");
   17854:	82 e9       	ldi	r24, 0x92	; 146
   17856:	9b e2       	ldi	r25, 0x2B	; 43
   17858:	a0 e0       	ldi	r26, 0x00	; 0
   1785a:	ed b7       	in	r30, 0x3d	; 61
   1785c:	fe b7       	in	r31, 0x3e	; 62
   1785e:	81 83       	std	Z+1, r24	; 0x01
   17860:	92 83       	std	Z+2, r25	; 0x02
   17862:	a3 83       	std	Z+3, r26	; 0x03
   17864:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
#endif
///TODO we do not support multiple units yet
///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   17868:	80 91 eb 1c 	lds	r24, 0x1CEB	; 0x801ceb <gpib_iobuff+0x1>
   1786c:	85 de       	rcall	.-758    	; 0x17578 <amigo_check_unit>

/// Fill in temparary address
            tmp.cyl = 0xff & *ptr++;
   1786e:	80 91 ec 1c 	lds	r24, 0x1CEC	; 0x801cec <gpib_iobuff+0x2>
   17872:	8d 87       	std	Y+13, r24	; 0x0d
            tmp.head = 0xff & *ptr++;
   17874:	80 91 ed 1c 	lds	r24, 0x1CED	; 0x801ced <gpib_iobuff+0x3>
   17878:	8e 87       	std	Y+14, r24	; 0x0e
            tmp.sector = 0xff & *ptr++;
   1787a:	80 91 ee 1c 	lds	r24, 0x1CEE	; 0x801cee <gpib_iobuff+0x4>
   1787e:	1d c0       	rjmp	.+58     	; 0x178ba <Amigo_Command+0x31a>
//update to real address on sucess
            amigo_seek((AMIGOStateType *)&tmp);
            gpib_enable_PPR(AMIGOp->HEADER.PPR);
            return(status & ERROR_MASK);
        }
        else if(op == 0x02 && len == 6)
   17880:	06 30       	cpi	r16, 0x06	; 6
   17882:	11 05       	cpc	r17, r1
   17884:	09 f0       	breq	.+2      	; 0x17888 <Amigo_Command+0x2e8>
   17886:	6b c1       	rjmp	.+726    	; 0x17b5e <Amigo_Command+0x5be>
/// @brief
///  Seek 2 byte cylinder

            AMIGOStateType tmp;
#if SDEBUG
            if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   17888:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1788c:	85 ff       	sbrs	r24, 5
   1788e:	0a c0       	rjmp	.+20     	; 0x178a4 <Amigo_Command+0x304>
                printf("[AMIGO Seek len=6]\n");
   17890:	8e e7       	ldi	r24, 0x7E	; 126
   17892:	9b e2       	ldi	r25, 0x2B	; 43
   17894:	a0 e0       	ldi	r26, 0x00	; 0
   17896:	ed b7       	in	r30, 0x3d	; 61
   17898:	fe b7       	in	r31, 0x3e	; 62
   1789a:	81 83       	std	Z+1, r24	; 0x01
   1789c:	92 83       	std	Z+2, r25	; 0x02
   1789e:	a3 83       	std	Z+3, r26	; 0x03
   178a0:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
#endif
///TODO we do not support multiple units yet
///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   178a4:	80 91 eb 1c 	lds	r24, 0x1CEB	; 0x801ceb <gpib_iobuff+0x1>
   178a8:	67 de       	rcall	.-818    	; 0x17578 <amigo_check_unit>
/// Fill in temparary address
            tmp.cyl = (0xff & *ptr++) << 8;       // MSB
            tmp.cyl |= (0xff & *ptr++);           // LSB
   178aa:	80 91 ed 1c 	lds	r24, 0x1CED	; 0x801ced <gpib_iobuff+0x3>
   178ae:	8d 87       	std	Y+13, r24	; 0x0d
            tmp.head = 0xff & *ptr++;
   178b0:	80 91 ee 1c 	lds	r24, 0x1CEE	; 0x801cee <gpib_iobuff+0x4>
   178b4:	8e 87       	std	Y+14, r24	; 0x0e
            tmp.sector = 0xff & *ptr++;
   178b6:	80 91 ef 1c 	lds	r24, 0x1CEF	; 0x801cef <gpib_iobuff+0x5>
//update to real address on sucess
            amigo_seek((AMIGOStateType *)&tmp);
   178ba:	8f 87       	std	Y+15, r24	; 0x0f
   178bc:	ce 01       	movw	r24, r28
   178be:	0a 96       	adiw	r24, 0x0a	; 10
   178c0:	8a d9       	rcall	.-3308   	; 0x16bd6 <amigo_seek>
   178c2:	d8 c0       	rjmp	.+432    	; 0x17a74 <Amigo_Command+0x4d4>
            gpib_enable_PPR(AMIGOp->HEADER.PPR);
            return(status & ERROR_MASK);
        }
        else if(op == 0x03 && len == 2)
   178c4:	63 30       	cpi	r22, 0x03	; 3
   178c6:	e9 f4       	brne	.+58     	; 0x17902 <Amigo_Command+0x362>
   178c8:	02 30       	cpi	r16, 0x02	; 2
   178ca:	11 05       	cpc	r17, r1
   178cc:	09 f0       	breq	.+2      	; 0x178d0 <Amigo_Command+0x330>
   178ce:	47 c1       	rjmp	.+654    	; 0x17b5e <Amigo_Command+0x5be>
        {
///  Reference: A15
#if SDEBUG
            if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   178d0:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   178d4:	85 ff       	sbrs	r24, 5
   178d6:	0a c0       	rjmp	.+20     	; 0x178ec <Amigo_Command+0x34c>
                printf("[AMIGO Request Status Buffered Command]\n");
   178d8:	85 e5       	ldi	r24, 0x55	; 85
   178da:	9b e2       	ldi	r25, 0x2B	; 43
   178dc:	a0 e0       	ldi	r26, 0x00	; 0
   178de:	ed b7       	in	r30, 0x3d	; 61
   178e0:	fe b7       	in	r31, 0x3e	; 62
   178e2:	81 83       	std	Z+1, r24	; 0x01
   178e4:	92 83       	std	Z+2, r25	; 0x02
   178e6:	a3 83       	std	Z+3, r26	; 0x03
   178e8:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
#endif
///TODO we do not support multiple units yet
///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   178ec:	80 91 eb 1c 	lds	r24, 0x1CEB	; 0x801ceb <gpib_iobuff+0x1>
            amigo_request_status();
   178f0:	43 de       	rcall	.-890    	; 0x17578 <amigo_check_unit>
   178f2:	3d d8       	rcall	.-3974   	; 0x1696e <amigo_request_status>
            AMIGOs->state = AMIGO_REQUEST_STATUS_BUFFERED;
   178f4:	e0 91 62 19 	lds	r30, 0x1962	; 0x801962 <AMIGOs>
   178f8:	f0 91 63 19 	lds	r31, 0x1963	; 0x801963 <AMIGOs+0x1>
   178fc:	83 e0       	ldi	r24, 0x03	; 3
   178fe:	80 83       	st	Z, r24
   17900:	29 c1       	rjmp	.+594    	; 0x17b54 <Amigo_Command+0x5b4>
            return(status & ERROR_MASK);
        }
        else if(op == 0x05 && len == 2)
   17902:	65 30       	cpi	r22, 0x05	; 5
   17904:	d9 f4       	brne	.+54     	; 0x1793c <Amigo_Command+0x39c>
   17906:	02 30       	cpi	r16, 0x02	; 2
   17908:	11 05       	cpc	r17, r1
   1790a:	09 f0       	breq	.+2      	; 0x1790e <Amigo_Command+0x36e>
   1790c:	28 c1       	rjmp	.+592    	; 0x17b5e <Amigo_Command+0x5be>
        {
///  Reference: A35
#if SDEBUG
            if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   1790e:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17912:	85 ff       	sbrs	r24, 5
   17914:	0a c0       	rjmp	.+20     	; 0x1792a <Amigo_Command+0x38a>
                printf("[AMIGO Read Unbuffered Command]\n");
   17916:	84 e3       	ldi	r24, 0x34	; 52
   17918:	9b e2       	ldi	r25, 0x2B	; 43
   1791a:	a0 e0       	ldi	r26, 0x00	; 0
   1791c:	ed b7       	in	r30, 0x3d	; 61
   1791e:	fe b7       	in	r31, 0x3e	; 62
   17920:	81 83       	std	Z+1, r24	; 0x01
   17922:	92 83       	std	Z+2, r25	; 0x02
   17924:	a3 83       	std	Z+3, r26	; 0x03
   17926:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
#endif
///TODO we do not support multiple units yet
///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   1792a:	80 91 eb 1c 	lds	r24, 0x1CEB	; 0x801ceb <gpib_iobuff+0x1>
   1792e:	24 de       	rcall	.-952    	; 0x17578 <amigo_check_unit>
            AMIGOs->state = AMIGO_READ_UNBUFFERED;
   17930:	e0 91 62 19 	lds	r30, 0x1962	; 0x801962 <AMIGOs>
   17934:	f0 91 63 19 	lds	r31, 0x1963	; 0x801963 <AMIGOs+0x1>
   17938:	86 e0       	ldi	r24, 0x06	; 6
   1793a:	e7 c0       	rjmp	.+462    	; 0x17b0a <Amigo_Command+0x56a>
            return(status & ERROR_MASK);
#else
			return( amigo_buffered_read_command() );
#endif
        }
        else if(op == 0x07 && len == 4)
   1793c:	67 30       	cpi	r22, 0x07	; 7
   1793e:	f9 f4       	brne	.+62     	; 0x1797e <Amigo_Command+0x3de>
   17940:	04 30       	cpi	r16, 0x04	; 4
   17942:	11 05       	cpc	r17, r1
   17944:	09 f0       	breq	.+2      	; 0x17948 <Amigo_Command+0x3a8>
   17946:	0b c1       	rjmp	.+534    	; 0x17b5e <Amigo_Command+0x5be>
        {
            uint16_t sectors;
#if SDEBUG
            if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   17948:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1794c:	85 ff       	sbrs	r24, 5
   1794e:	0a c0       	rjmp	.+20     	; 0x17964 <Amigo_Command+0x3c4>
                printf("[AMIGO Verify]\n");
   17950:	84 e2       	ldi	r24, 0x24	; 36
   17952:	9b e2       	ldi	r25, 0x2B	; 43
   17954:	a0 e0       	ldi	r26, 0x00	; 0
   17956:	ed b7       	in	r30, 0x3d	; 61
   17958:	fe b7       	in	r31, 0x3e	; 62
   1795a:	81 83       	std	Z+1, r24	; 0x01
   1795c:	92 83       	std	Z+2, r25	; 0x02
   1795e:	a3 83       	std	Z+3, r26	; 0x03
   17960:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
#endif
///TODO we do not support multiple units yet
///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   17964:	80 91 eb 1c 	lds	r24, 0x1CEB	; 0x801ceb <gpib_iobuff+0x1>
   17968:	07 de       	rcall	.-1010   	; 0x17578 <amigo_check_unit>
            sectors = (0xff & *ptr++) << 8;
   1796a:	80 91 ec 1c 	lds	r24, 0x1CEC	; 0x801cec <gpib_iobuff+0x2>
   1796e:	90 e0       	ldi	r25, 0x00	; 0
   17970:	98 2f       	mov	r25, r24
            sectors |= (0xff & *ptr++);
            return ( amigo_verify( sectors) );
   17972:	88 27       	eor	r24, r24
   17974:	20 91 ed 1c 	lds	r18, 0x1CED	; 0x801ced <gpib_iobuff+0x3>
   17978:	82 2b       	or	r24, r18
   1797a:	58 d9       	rcall	.-3408   	; 0x16c2c <amigo_verify>
   1797c:	f3 c0       	rjmp	.+486    	; 0x17b64 <Amigo_Command+0x5c4>
        }
        else if(op == 0x08 && len == 2)
   1797e:	68 30       	cpi	r22, 0x08	; 8
   17980:	d9 f4       	brne	.+54     	; 0x179b8 <Amigo_Command+0x418>
   17982:	02 30       	cpi	r16, 0x02	; 2
   17984:	11 05       	cpc	r17, r1
   17986:	09 f0       	breq	.+2      	; 0x1798a <Amigo_Command+0x3ea>
   17988:	ea c0       	rjmp	.+468    	; 0x17b5e <Amigo_Command+0x5be>
        {
#if SDEBUG
            if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   1798a:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1798e:	85 ff       	sbrs	r24, 5
   17990:	0a c0       	rjmp	.+20     	; 0x179a6 <Amigo_Command+0x406>
                printf("[AMIGO Write Unbuffered Command]\n");
   17992:	82 e0       	ldi	r24, 0x02	; 2
   17994:	9b e2       	ldi	r25, 0x2B	; 43
   17996:	a0 e0       	ldi	r26, 0x00	; 0
   17998:	ed b7       	in	r30, 0x3d	; 61
   1799a:	fe b7       	in	r31, 0x3e	; 62
   1799c:	81 83       	std	Z+1, r24	; 0x01
   1799e:	92 83       	std	Z+2, r25	; 0x02
   179a0:	a3 83       	std	Z+3, r26	; 0x03
   179a2:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
#endif
///TODO we do not support multiple units yet
///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   179a6:	80 91 eb 1c 	lds	r24, 0x1CEB	; 0x801ceb <gpib_iobuff+0x1>
   179aa:	e6 dd       	rcall	.-1076   	; 0x17578 <amigo_check_unit>
            AMIGOs->state = AMIGO_WRITE_UNBUFFERED;
   179ac:	e0 91 62 19 	lds	r30, 0x1962	; 0x801962 <AMIGOs>
   179b0:	f0 91 63 19 	lds	r31, 0x1963	; 0x801963 <AMIGOs+0x1>
   179b4:	88 e0       	ldi	r24, 0x08	; 8
   179b6:	5d c0       	rjmp	.+186    	; 0x17a72 <Amigo_Command+0x4d2>
            gpib_enable_PPR(AMIGOp->HEADER.PPR);
            return(status & ERROR_MASK);
        }
        else if((op == 0x0B || op == 0x2b) && len == 2)
   179b8:	86 2f       	mov	r24, r22
   179ba:	8f 7d       	andi	r24, 0xDF	; 223
   179bc:	8b 30       	cpi	r24, 0x0B	; 11
   179be:	d9 f4       	brne	.+54     	; 0x179f6 <Amigo_Command+0x456>
   179c0:	02 30       	cpi	r16, 0x02	; 2
   179c2:	11 05       	cpc	r17, r1
   179c4:	09 f0       	breq	.+2      	; 0x179c8 <Amigo_Command+0x428>
   179c6:	cb c0       	rjmp	.+406    	; 0x17b5e <Amigo_Command+0x5be>
        {
#if SDEBUG
            if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   179c8:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   179cc:	85 ff       	sbrs	r24, 5
   179ce:	0a c0       	rjmp	.+20     	; 0x179e4 <Amigo_Command+0x444>
                printf("[AMIGO Initialize Command]\n");
   179d0:	86 ee       	ldi	r24, 0xE6	; 230
   179d2:	9a e2       	ldi	r25, 0x2A	; 42
   179d4:	a0 e0       	ldi	r26, 0x00	; 0
   179d6:	ed b7       	in	r30, 0x3d	; 61
   179d8:	fe b7       	in	r31, 0x3e	; 62
   179da:	81 83       	std	Z+1, r24	; 0x01
   179dc:	92 83       	std	Z+2, r25	; 0x02
   179de:	a3 83       	std	Z+3, r26	; 0x03
   179e0:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
#endif
///TODO we do not support multiple units yet
///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   179e4:	80 91 eb 1c 	lds	r24, 0x1CEB	; 0x801ceb <gpib_iobuff+0x1>
   179e8:	c7 dd       	rcall	.-1138   	; 0x17578 <amigo_check_unit>
            AMIGOs->state = AMIGO_INITIALIZE;
   179ea:	e0 91 62 19 	lds	r30, 0x1962	; 0x801962 <AMIGOs>
   179ee:	f0 91 63 19 	lds	r31, 0x1963	; 0x801963 <AMIGOs+0x1>
   179f2:	8a e0       	ldi	r24, 0x0A	; 10
   179f4:	3e c0       	rjmp	.+124    	; 0x17a72 <Amigo_Command+0x4d2>
            gpib_enable_PPR(AMIGOp->HEADER.PPR);
            return(status & ERROR_MASK);
        }
        else if(op == 0x14 && len == 2)
   179f6:	64 31       	cpi	r22, 0x14	; 20
   179f8:	09 f0       	breq	.+2      	; 0x179fc <Amigo_Command+0x45c>
   179fa:	b1 c0       	rjmp	.+354    	; 0x17b5e <Amigo_Command+0x5be>
   179fc:	02 30       	cpi	r16, 0x02	; 2
   179fe:	11 05       	cpc	r17, r1
   17a00:	09 f0       	breq	.+2      	; 0x17a04 <Amigo_Command+0x464>
   17a02:	ad c0       	rjmp	.+346    	; 0x17b5e <Amigo_Command+0x5be>
        {
#if SDEBUG
            if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   17a04:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17a08:	85 ff       	sbrs	r24, 5
   17a0a:	0a c0       	rjmp	.+20     	; 0x17a20 <Amigo_Command+0x480>
                printf("[AMIGO Request Logical Address Command]\n");
   17a0c:	8d eb       	ldi	r24, 0xBD	; 189
   17a0e:	9a e2       	ldi	r25, 0x2A	; 42
   17a10:	a0 e0       	ldi	r26, 0x00	; 0
   17a12:	ed b7       	in	r30, 0x3d	; 61
   17a14:	fe b7       	in	r31, 0x3e	; 62
   17a16:	81 83       	std	Z+1, r24	; 0x01
   17a18:	92 83       	std	Z+2, r25	; 0x02
   17a1a:	a3 83       	std	Z+3, r26	; 0x03
   17a1c:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
#endif
            amigo_request_logical_address();
   17a20:	0e 94 a9 b4 	call	0x16952	; 0x16952 <amigo_request_logical_address>
            AMIGOs->state = AMIGO_REQUEST_LOGICAL_ADDRESS;
   17a24:	e0 91 62 19 	lds	r30, 0x1962	; 0x801962 <AMIGOs>
   17a28:	f0 91 63 19 	lds	r31, 0x1963	; 0x801963 <AMIGOs+0x1>
   17a2c:	84 e0       	ldi	r24, 0x04	; 4
   17a2e:	21 c0       	rjmp	.+66     	; 0x17a72 <Amigo_Command+0x4d2>
            gpib_enable_PPR(AMIGOp->HEADER.PPR);
            return(status & ERROR_MASK);
        }
    }
    else if (secondary == 0x69)
   17a30:	f9 e6       	ldi	r31, 0x69	; 105
   17a32:	ef 16       	cp	r14, r31
   17a34:	f1 04       	cpc	r15, r1
   17a36:	39 f5       	brne	.+78     	; 0x17a86 <Amigo_Command+0x4e6>
    {
        if(op == 0x08 && len == 2)
   17a38:	68 30       	cpi	r22, 0x08	; 8
   17a3a:	09 f0       	breq	.+2      	; 0x17a3e <Amigo_Command+0x49e>
   17a3c:	90 c0       	rjmp	.+288    	; 0x17b5e <Amigo_Command+0x5be>
   17a3e:	02 30       	cpi	r16, 0x02	; 2
   17a40:	11 05       	cpc	r17, r1
   17a42:	09 f0       	breq	.+2      	; 0x17a46 <Amigo_Command+0x4a6>
   17a44:	8c c0       	rjmp	.+280    	; 0x17b5e <Amigo_Command+0x5be>
        {
#if SDEBUG
            if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   17a46:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17a4a:	85 ff       	sbrs	r24, 5
   17a4c:	0a c0       	rjmp	.+20     	; 0x17a62 <Amigo_Command+0x4c2>
                printf("[AMIGO Write Buffered Command]\n");
   17a4e:	8d e9       	ldi	r24, 0x9D	; 157
   17a50:	9a e2       	ldi	r25, 0x2A	; 42
   17a52:	a0 e0       	ldi	r26, 0x00	; 0
   17a54:	ed b7       	in	r30, 0x3d	; 61
   17a56:	fe b7       	in	r31, 0x3e	; 62
   17a58:	81 83       	std	Z+1, r24	; 0x01
   17a5a:	92 83       	std	Z+2, r25	; 0x02
   17a5c:	a3 83       	std	Z+3, r26	; 0x03
   17a5e:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
#endif
///TODO we do not support multiple units yet
///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   17a62:	80 91 eb 1c 	lds	r24, 0x1CEB	; 0x801ceb <gpib_iobuff+0x1>
   17a66:	88 dd       	rcall	.-1264   	; 0x17578 <amigo_check_unit>
            AMIGOs->state = AMIGO_WRITE_BUFFERED;
   17a68:	e0 91 62 19 	lds	r30, 0x1962	; 0x801962 <AMIGOs>
   17a6c:	f0 91 63 19 	lds	r31, 0x1963	; 0x801963 <AMIGOs+0x1>
   17a70:	89 e0       	ldi	r24, 0x09	; 9
   17a72:	80 83       	st	Z, r24
            gpib_enable_PPR(AMIGOp->HEADER.PPR);
   17a74:	e0 91 64 19 	lds	r30, 0x1964	; 0x801964 <AMIGOp>
   17a78:	f0 91 65 19 	lds	r31, 0x1965	; 0x801965 <AMIGOp+0x1>
   17a7c:	81 81       	ldd	r24, Z+1	; 0x01
   17a7e:	90 e0       	ldi	r25, 0x00	; 0
   17a80:	0e 94 56 87 	call	0x10eac	; 0x10eac <gpib_enable_PPR>
   17a84:	67 c0       	rjmp	.+206    	; 0x17b54 <Amigo_Command+0x5b4>
            return(status & ERROR_MASK);
        }
    }
    else if (secondary == 0x6A)
   17a86:	fa e6       	ldi	r31, 0x6A	; 106
   17a88:	ef 16       	cp	r14, r31
   17a8a:	f1 04       	cpc	r15, r1
   17a8c:	09 f0       	breq	.+2      	; 0x17a90 <Amigo_Command+0x4f0>
   17a8e:	40 c0       	rjmp	.+128    	; 0x17b10 <Amigo_Command+0x570>
    {
        if(op == 0x03 && len == 2)
   17a90:	63 30       	cpi	r22, 0x03	; 3
   17a92:	f1 f4       	brne	.+60     	; 0x17ad0 <Amigo_Command+0x530>
   17a94:	02 30       	cpi	r16, 0x02	; 2
   17a96:	11 05       	cpc	r17, r1
   17a98:	09 f0       	breq	.+2      	; 0x17a9c <Amigo_Command+0x4fc>
   17a9a:	61 c0       	rjmp	.+194    	; 0x17b5e <Amigo_Command+0x5be>
        {
#if SDEBUG
            if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   17a9c:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17aa0:	85 ff       	sbrs	r24, 5
   17aa2:	0a c0       	rjmp	.+20     	; 0x17ab8 <Amigo_Command+0x518>
                printf("[AMIGO Request Status Unbuffered Command]\n");
   17aa4:	82 e7       	ldi	r24, 0x72	; 114
   17aa6:	9a e2       	ldi	r25, 0x2A	; 42
   17aa8:	a0 e0       	ldi	r26, 0x00	; 0
   17aaa:	ed b7       	in	r30, 0x3d	; 61
   17aac:	fe b7       	in	r31, 0x3e	; 62
   17aae:	81 83       	std	Z+1, r24	; 0x01
   17ab0:	92 83       	std	Z+2, r25	; 0x02
   17ab2:	a3 83       	std	Z+3, r26	; 0x03
   17ab4:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
#endif
///TODO we do not support multiple units yet
///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   17ab8:	80 91 eb 1c 	lds	r24, 0x1CEB	; 0x801ceb <gpib_iobuff+0x1>
   17abc:	5d dd       	rcall	.-1350   	; 0x17578 <amigo_check_unit>
            AMIGOs->state = AMIGO_REQUEST_STATUS_UNBUFFERED;
   17abe:	e0 91 62 19 	lds	r30, 0x1962	; 0x801962 <AMIGOs>
   17ac2:	f0 91 63 19 	lds	r31, 0x1963	; 0x801963 <AMIGOs+0x1>
   17ac6:	82 e0       	ldi	r24, 0x02	; 2
   17ac8:	80 83       	st	Z, r24
            amigo_request_status();
   17aca:	0e 94 b7 b4 	call	0x1696e	; 0x1696e <amigo_request_status>
   17ace:	42 c0       	rjmp	.+132    	; 0x17b54 <Amigo_Command+0x5b4>
            return(status & ERROR_MASK);
        }
        if(op == 0x05 && len == 2)
   17ad0:	65 30       	cpi	r22, 0x05	; 5
   17ad2:	09 f0       	breq	.+2      	; 0x17ad6 <Amigo_Command+0x536>
   17ad4:	44 c0       	rjmp	.+136    	; 0x17b5e <Amigo_Command+0x5be>
   17ad6:	02 30       	cpi	r16, 0x02	; 2
   17ad8:	11 05       	cpc	r17, r1
   17ada:	09 f0       	breq	.+2      	; 0x17ade <Amigo_Command+0x53e>
   17adc:	40 c0       	rjmp	.+128    	; 0x17b5e <Amigo_Command+0x5be>
        {
#if SDEBUG
            if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   17ade:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17ae2:	85 ff       	sbrs	r24, 5
   17ae4:	0a c0       	rjmp	.+20     	; 0x17afa <Amigo_Command+0x55a>
                printf("[AMIGO Read Buffered Command]\n");
   17ae6:	83 e5       	ldi	r24, 0x53	; 83
   17ae8:	9a e2       	ldi	r25, 0x2A	; 42
   17aea:	a0 e0       	ldi	r26, 0x00	; 0
   17aec:	ed b7       	in	r30, 0x3d	; 61
   17aee:	fe b7       	in	r31, 0x3e	; 62
   17af0:	81 83       	std	Z+1, r24	; 0x01
   17af2:	92 83       	std	Z+2, r25	; 0x02
   17af4:	a3 83       	std	Z+3, r26	; 0x03
#endif
///TODO we do not support multiple units yet
///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   17af6:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
   17afa:	80 91 eb 1c 	lds	r24, 0x1CEB	; 0x801ceb <gpib_iobuff+0x1>
            AMIGOs->state = AMIGO_READ_BUFFERED;
   17afe:	3c dd       	rcall	.-1416   	; 0x17578 <amigo_check_unit>
   17b00:	e0 91 62 19 	lds	r30, 0x1962	; 0x801962 <AMIGOs>
   17b04:	f0 91 63 19 	lds	r31, 0x1963	; 0x801963 <AMIGOs+0x1>
   17b08:	87 e0       	ldi	r24, 0x07	; 7

#if 0
            gpib_enable_PPR(AMIGOp->HEADER.PPR);
            return(status & ERROR_MASK);
#else
			return( amigo_buffered_read_command() );
   17b0a:	80 83       	st	Z, r24
   17b0c:	c5 d9       	rcall	.-3190   	; 0x16e98 <amigo_buffered_read_command>
   17b0e:	2a c0       	rjmp	.+84     	; 0x17b64 <Amigo_Command+0x5c4>
#endif
        }
    }
    else if (secondary == 0x6C)
   17b10:	fc e6       	ldi	r31, 0x6C	; 108
   17b12:	ef 16       	cp	r14, r31
   17b14:	f1 04       	cpc	r15, r1
   17b16:	d1 f4       	brne	.+52     	; 0x17b4c <Amigo_Command+0x5ac>
    {
        if(op == 0x18 && len == 5)
   17b18:	68 31       	cpi	r22, 0x18	; 24
   17b1a:	09 f5       	brne	.+66     	; 0x17b5e <Amigo_Command+0x5be>
   17b1c:	05 30       	cpi	r16, 0x05	; 5
   17b1e:	11 05       	cpc	r17, r1
   17b20:	f1 f4       	brne	.+60     	; 0x17b5e <Amigo_Command+0x5be>
        {
///  Reference: A48 ..  A50

            uint8_t db;
#if SDEBUG
            if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   17b22:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17b26:	85 ff       	sbrs	r24, 5
   17b28:	0a c0       	rjmp	.+20     	; 0x17b3e <Amigo_Command+0x59e>
                printf("[AMIGO Format]\n");
   17b2a:	83 e4       	ldi	r24, 0x43	; 67
   17b2c:	9a e2       	ldi	r25, 0x2A	; 42
   17b2e:	a0 e0       	ldi	r26, 0x00	; 0
   17b30:	ed b7       	in	r30, 0x3d	; 61
   17b32:	fe b7       	in	r31, 0x3e	; 62
   17b34:	81 83       	std	Z+1, r24	; 0x01
   17b36:	92 83       	std	Z+2, r25	; 0x02
   17b38:	a3 83       	std	Z+3, r26	; 0x03
#endif
///TODO we do not support multiple units yet
///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   17b3a:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
   17b3e:	80 91 eb 1c 	lds	r24, 0x1CEB	; 0x801ceb <gpib_iobuff+0x1>
            ++ptr;                                // override not used
            ++ptr;                                // interleave not used
            db = 0xff & *ptr++;
            amigo_format(db);
   17b42:	1a dd       	rcall	.-1484   	; 0x17578 <amigo_check_unit>
   17b44:	80 91 ee 1c 	lds	r24, 0x1CEE	; 0x801cee <gpib_iobuff+0x4>
   17b48:	0f d9       	rcall	.-3554   	; 0x16d68 <amigo_format>
   17b4a:	04 c0       	rjmp	.+8      	; 0x17b54 <Amigo_Command+0x5b4>
            return(status & ERROR_MASK);
        }
    }
    else if (secondary == 0x70)                   // HP-300 Clear
   17b4c:	f0 e7       	ldi	r31, 0x70	; 112
   17b4e:	ef 16       	cp	r14, r31
   17b50:	f1 04       	cpc	r15, r1
    {
///  Reference: A23
        ++ptr;                                    // Dummy byte
        return(status & ERROR_MASK);
   17b52:	29 f4       	brne	.+10     	; 0x17b5e <Amigo_Command+0x5be>
   17b54:	8b 8d       	ldd	r24, Y+27	; 0x1b
   17b56:	9c 8d       	ldd	r25, Y+28	; 0x1c
   17b58:	88 27       	eor	r24, r24
   17b5a:	90 7d       	andi	r25, 0xD0	; 208
    }
    return ( amigo_todo_op(secondary, op, len) );
   17b5c:	03 c0       	rjmp	.+6      	; 0x17b64 <Amigo_Command+0x5c4>
   17b5e:	a8 01       	movw	r20, r16
   17b60:	8e 2d       	mov	r24, r14
   17b62:	ed db       	rcall	.-2086   	; 0x1733e <amigo_todo_op>
}
   17b64:	6c 96       	adiw	r28, 0x1c	; 28
   17b66:	e6 e0       	ldi	r30, 0x06	; 6
   17b68:	0c 94 cc e8 	jmp	0x1d198	; 0x1d198 <__epilogue_restores__+0x18>

00017b6c <Amigo_Execute>:
/// @return  0 on sucess
/// @return or GPIB error flags on fail
/// @see  gpib.h ERROR_MASK defines for a full list)

int Amigo_Execute( int secondary )
{
   17b6c:	a9 e0       	ldi	r26, 0x09	; 9
   17b6e:	b0 e0       	ldi	r27, 0x00	; 0
   17b70:	ec eb       	ldi	r30, 0xBC	; 188
   17b72:	fd eb       	ldi	r31, 0xBD	; 189
   17b74:	0c 94 b4 e8 	jmp	0x1d168	; 0x1d168 <__prologue_saves__+0x20>
   17b78:	ec 01       	movw	r28, r24
#if SDEBUG
    if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   17b7a:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17b7e:	85 ff       	sbrs	r24, 5
   17b80:	16 c0       	rjmp	.+44     	; 0x17bae <Amigo_Execute+0x42>
        printf("[AMIGO Execute(%02XH): listen:%02XH, talk:%02XH]\n",
   17b82:	80 91 ee 1e 	lds	r24, 0x1EEE	; 0x801eee <talking>
   17b86:	90 e0       	ldi	r25, 0x00	; 0
   17b88:	ed b7       	in	r30, 0x3d	; 61
   17b8a:	fe b7       	in	r31, 0x3e	; 62
   17b8c:	91 87       	std	Z+9, r25	; 0x09
   17b8e:	80 87       	std	Z+8, r24	; 0x08
   17b90:	80 91 f0 1e 	lds	r24, 0x1EF0	; 0x801ef0 <listening>
   17b94:	90 e0       	ldi	r25, 0x00	; 0
   17b96:	97 83       	std	Z+7, r25	; 0x07
   17b98:	86 83       	std	Z+6, r24	; 0x06
   17b9a:	d5 83       	std	Z+5, r29	; 0x05
   17b9c:	c4 83       	std	Z+4, r28	; 0x04
   17b9e:	81 e1       	ldi	r24, 0x11	; 17
   17ba0:	9a e2       	ldi	r25, 0x2A	; 42
   17ba2:	a0 e0       	ldi	r26, 0x00	; 0
   17ba4:	81 83       	std	Z+1, r24	; 0x01
   17ba6:	92 83       	std	Z+2, r25	; 0x02
   17ba8:	a3 83       	std	Z+3, r26	; 0x03
   17baa:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
            secondary, listening, talking);
#endif

    if(talking == UNT)
   17bae:	80 91 ee 1e 	lds	r24, 0x1EEE	; 0x801eee <talking>
   17bb2:	8f 35       	cpi	r24, 0x5F	; 95
   17bb4:	09 f4       	brne	.+2      	; 0x17bb8 <Amigo_Execute+0x4c>
   17bb6:	ad c0       	rjmp	.+346    	; 0x17d12 <Amigo_Execute+0x1a6>
        return(0);

    if(!AMIGO_is_MTA(talking) && !AMIGO_is_MLA(listening))
   17bb8:	90 e0       	ldi	r25, 0x00	; 0
   17bba:	0e 94 ce 8d 	call	0x11b9c	; 0x11b9c <AMIGO_is_MTA>
   17bbe:	89 2b       	or	r24, r25
   17bc0:	39 f0       	breq	.+14     	; 0x17bd0 <Amigo_Execute+0x64>
        return(0);

    if(secondary != 0x60 && secondary != 0x68)
   17bc2:	ce 01       	movw	r24, r28
   17bc4:	87 7f       	andi	r24, 0xF7	; 247
   17bc6:	80 36       	cpi	r24, 0x60	; 96
   17bc8:	91 05       	cpc	r25, r1
   17bca:	09 f0       	breq	.+2      	; 0x17bce <Amigo_Execute+0x62>
   17bcc:	a2 c0       	rjmp	.+324    	; 0x17d12 <Amigo_Execute+0x1a6>
   17bce:	08 c0       	rjmp	.+16     	; 0x17be0 <Amigo_Execute+0x74>
#endif

    if(talking == UNT)
        return(0);

    if(!AMIGO_is_MTA(talking) && !AMIGO_is_MLA(listening))
   17bd0:	80 91 f0 1e 	lds	r24, 0x1EF0	; 0x801ef0 <listening>
   17bd4:	90 e0       	ldi	r25, 0x00	; 0
   17bd6:	0e 94 bc 8d 	call	0x11b78	; 0x11b78 <AMIGO_is_MLA>
   17bda:	89 2b       	or	r24, r25
   17bdc:	91 f7       	brne	.-28     	; 0x17bc2 <Amigo_Execute+0x56>
   17bde:	99 c0       	rjmp	.+306    	; 0x17d12 <Amigo_Execute+0x1a6>
        return(0);

    if(secondary != 0x60 && secondary != 0x68)
        return(0);

    gpib_disable_PPR(AMIGOp->HEADER.PPR);
   17be0:	e0 91 64 19 	lds	r30, 0x1964	; 0x801964 <AMIGOp>
   17be4:	f0 91 65 19 	lds	r31, 0x1965	; 0x801965 <AMIGOp+0x1>
   17be8:	81 81       	ldd	r24, Z+1	; 0x01
   17bea:	90 e0       	ldi	r25, 0x00	; 0
   17bec:	0e 94 8c 87 	call	0x10f18	; 0x10f18 <gpib_disable_PPR>

    if(secondary == 0x60)
   17bf0:	c0 36       	cpi	r28, 0x60	; 96
   17bf2:	d1 05       	cpc	r29, r1
   17bf4:	09 f0       	breq	.+2      	; 0x17bf8 <Amigo_Execute+0x8c>
   17bf6:	4e c0       	rjmp	.+156    	; 0x17c94 <Amigo_Execute+0x128>
    {
        switch(AMIGOs->state)
   17bf8:	e0 91 62 19 	lds	r30, 0x1962	; 0x801962 <AMIGOs>
   17bfc:	f0 91 63 19 	lds	r31, 0x1963	; 0x801963 <AMIGOs+0x1>
   17c00:	e0 81       	ld	r30, Z
   17c02:	8e 2f       	mov	r24, r30
   17c04:	90 e0       	ldi	r25, 0x00	; 0
   17c06:	8b 30       	cpi	r24, 0x0B	; 11
   17c08:	91 05       	cpc	r25, r1
   17c0a:	08 f0       	brcs	.+2      	; 0x17c0e <Amigo_Execute+0xa2>
   17c0c:	41 c0       	rjmp	.+130    	; 0x17c90 <Amigo_Execute+0x124>
   17c0e:	fc 01       	movw	r30, r24
   17c10:	ea 52       	subi	r30, 0x2A	; 42
   17c12:	ff 4f       	sbci	r31, 0xFF	; 255
   17c14:	0c 94 75 e8 	jmp	0x1d0ea	; 0x1d0ea <__tablejump2__>
        {
            case AMIGO_IDLE:
                return(0);
            case AMIGO_COLD_LOAD_READ:
#if SDEBUG
                if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   17c18:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17c1c:	85 ff       	sbrs	r24, 5
   17c1e:	18 c0       	rjmp	.+48     	; 0x17c50 <Amigo_Execute+0xe4>
                    printf("[AMIGO Execute Cold Load Read]\n");
   17c20:	81 ef       	ldi	r24, 0xF1	; 241
   17c22:	99 e2       	ldi	r25, 0x29	; 41
   17c24:	0d c0       	rjmp	.+26     	; 0x17c40 <Amigo_Execute+0xd4>
#endif
                return ( amigo_buffered_read_execute() );
            case AMIGO_READ_UNBUFFERED:
#if SDEBUG
                if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   17c26:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17c2a:	85 ff       	sbrs	r24, 5
   17c2c:	11 c0       	rjmp	.+34     	; 0x17c50 <Amigo_Execute+0xe4>
                    printf("[AMIGO Execute Read Unbuffered]\n");
   17c2e:	80 ed       	ldi	r24, 0xD0	; 208
   17c30:	99 e2       	ldi	r25, 0x29	; 41
   17c32:	06 c0       	rjmp	.+12     	; 0x17c40 <Amigo_Execute+0xd4>
#endif
                return ( amigo_buffered_read_execute() );
            case AMIGO_READ_BUFFERED:
#if SDEBUG
                if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   17c34:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17c38:	85 ff       	sbrs	r24, 5
   17c3a:	0a c0       	rjmp	.+20     	; 0x17c50 <Amigo_Execute+0xe4>
                    printf("[AMIGO Execute Read Buffered]\n");
   17c3c:	81 eb       	ldi	r24, 0xB1	; 177
   17c3e:	99 e2       	ldi	r25, 0x29	; 41
   17c40:	a0 e0       	ldi	r26, 0x00	; 0
   17c42:	ed b7       	in	r30, 0x3d	; 61
   17c44:	fe b7       	in	r31, 0x3e	; 62
   17c46:	81 83       	std	Z+1, r24	; 0x01
   17c48:	92 83       	std	Z+2, r25	; 0x02
   17c4a:	a3 83       	std	Z+3, r26	; 0x03
   17c4c:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
#endif
                return ( amigo_buffered_read_execute() );
   17c50:	b0 d9       	rcall	.-3232   	; 0x16fb2 <amigo_buffered_read_execute>
   17c52:	61 c0       	rjmp	.+194    	; 0x17d16 <Amigo_Execute+0x1aa>
            case AMIGO_WRITE_UNBUFFERED:
#if SDEBUG
                if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   17c54:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17c58:	85 ff       	sbrs	r24, 5
   17c5a:	18 c0       	rjmp	.+48     	; 0x17c8c <Amigo_Execute+0x120>
                    printf("[AMIGO Execute Write Unbuffered]\n");
   17c5c:	8f e8       	ldi	r24, 0x8F	; 143
   17c5e:	99 e2       	ldi	r25, 0x29	; 41
   17c60:	0d c0       	rjmp	.+26     	; 0x17c7c <Amigo_Execute+0x110>
#endif
                return ( amigo_buffered_write() );
            case AMIGO_INITIALIZE:
#if SDEBUG
                if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   17c62:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17c66:	85 ff       	sbrs	r24, 5
   17c68:	11 c0       	rjmp	.+34     	; 0x17c8c <Amigo_Execute+0x120>
                    printf("[AMIGO Execute Initialize]\n");
   17c6a:	83 e7       	ldi	r24, 0x73	; 115
   17c6c:	99 e2       	ldi	r25, 0x29	; 41
   17c6e:	06 c0       	rjmp	.+12     	; 0x17c7c <Amigo_Execute+0x110>
#endif
                return ( amigo_buffered_write() );
            case AMIGO_WRITE_BUFFERED:
#if SDEBUG
                if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   17c70:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17c74:	85 ff       	sbrs	r24, 5
   17c76:	0a c0       	rjmp	.+20     	; 0x17c8c <Amigo_Execute+0x120>
                    printf("[AMIGO Execute Write Buffered]\n");
   17c78:	83 e5       	ldi	r24, 0x53	; 83
   17c7a:	99 e2       	ldi	r25, 0x29	; 41
   17c7c:	a0 e0       	ldi	r26, 0x00	; 0
   17c7e:	ed b7       	in	r30, 0x3d	; 61
   17c80:	fe b7       	in	r31, 0x3e	; 62
   17c82:	81 83       	std	Z+1, r24	; 0x01
   17c84:	92 83       	std	Z+2, r25	; 0x02
   17c86:	a3 83       	std	Z+3, r26	; 0x03
   17c88:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
#endif
                return ( amigo_buffered_write() );
   17c8c:	ed d9       	rcall	.-3110   	; 0x17068 <amigo_buffered_write>
   17c8e:	43 c0       	rjmp	.+134    	; 0x17d16 <Amigo_Execute+0x1aa>
            default:
                return ( amigo_todo(secondary) );
   17c90:	80 e6       	ldi	r24, 0x60	; 96
   17c92:	3d c0       	rjmp	.+122    	; 0x17d0e <Amigo_Execute+0x1a2>
        }
        AMIGOs->state = AMIGO_IDLE;
    }
    if(secondary == 0x68)
   17c94:	c8 36       	cpi	r28, 0x68	; 104
   17c96:	d1 05       	cpc	r29, r1
   17c98:	e1 f5       	brne	.+120    	; 0x17d12 <Amigo_Execute+0x1a6>
    {
        switch(AMIGOs->state)
   17c9a:	e0 91 62 19 	lds	r30, 0x1962	; 0x801962 <AMIGOs>
   17c9e:	f0 91 63 19 	lds	r31, 0x1963	; 0x801963 <AMIGOs+0x1>
   17ca2:	80 81       	ld	r24, Z
   17ca4:	82 30       	cpi	r24, 0x02	; 2
   17ca6:	81 f0       	breq	.+32     	; 0x17cc8 <Amigo_Execute+0x15c>
   17ca8:	18 f4       	brcc	.+6      	; 0x17cb0 <Amigo_Execute+0x144>
   17caa:	88 23       	and	r24, r24
   17cac:	91 f1       	breq	.+100    	; 0x17d12 <Amigo_Execute+0x1a6>
   17cae:	2e c0       	rjmp	.+92     	; 0x17d0c <Amigo_Execute+0x1a0>
   17cb0:	83 30       	cpi	r24, 0x03	; 3
   17cb2:	19 f0       	breq	.+6      	; 0x17cba <Amigo_Execute+0x14e>
   17cb4:	84 30       	cpi	r24, 0x04	; 4
   17cb6:	c9 f0       	breq	.+50     	; 0x17cea <Amigo_Execute+0x17e>
   17cb8:	29 c0       	rjmp	.+82     	; 0x17d0c <Amigo_Execute+0x1a0>
        {
            case AMIGO_IDLE:
                return(0);
            case AMIGO_REQUEST_STATUS_BUFFERED:
#if SDEBUG
                if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   17cba:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17cbe:	85 ff       	sbrs	r24, 5
   17cc0:	11 c0       	rjmp	.+34     	; 0x17ce4 <Amigo_Execute+0x178>
                    printf("[AMIGO Execute Request Status Buffered]\n");
   17cc2:	8a e2       	ldi	r24, 0x2A	; 42
   17cc4:	99 e2       	ldi	r25, 0x29	; 41
   17cc6:	06 c0       	rjmp	.+12     	; 0x17cd4 <Amigo_Execute+0x168>
#endif
                return ( amigo_send_status() );
            case AMIGO_REQUEST_STATUS_UNBUFFERED:
#if SDEBUG
                if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   17cc8:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17ccc:	85 ff       	sbrs	r24, 5
   17cce:	0a c0       	rjmp	.+20     	; 0x17ce4 <Amigo_Execute+0x178>
                    printf("[AMIGO Exicute Request Status Unbuffered]\n");
   17cd0:	8f ef       	ldi	r24, 0xFF	; 255
   17cd2:	98 e2       	ldi	r25, 0x28	; 40
   17cd4:	a0 e0       	ldi	r26, 0x00	; 0
   17cd6:	ed b7       	in	r30, 0x3d	; 61
   17cd8:	fe b7       	in	r31, 0x3e	; 62
   17cda:	81 83       	std	Z+1, r24	; 0x01
   17cdc:	92 83       	std	Z+2, r25	; 0x02
   17cde:	a3 83       	std	Z+3, r26	; 0x03
   17ce0:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
#endif
                return ( amigo_send_status() );
   17ce4:	0e 94 69 b5 	call	0x16ad2	; 0x16ad2 <amigo_send_status>
   17ce8:	16 c0       	rjmp	.+44     	; 0x17d16 <Amigo_Execute+0x1aa>
            case AMIGO_REQUEST_LOGICAL_ADDRESS:
#if SDEBUG
                if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   17cea:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17cee:	85 ff       	sbrs	r24, 5
   17cf0:	0a c0       	rjmp	.+20     	; 0x17d06 <Amigo_Execute+0x19a>
                    printf("[AMIGO Execute Request Logical Address]\n");
   17cf2:	86 ed       	ldi	r24, 0xD6	; 214
   17cf4:	98 e2       	ldi	r25, 0x28	; 40
   17cf6:	a0 e0       	ldi	r26, 0x00	; 0
   17cf8:	ed b7       	in	r30, 0x3d	; 61
   17cfa:	fe b7       	in	r31, 0x3e	; 62
   17cfc:	81 83       	std	Z+1, r24	; 0x01
   17cfe:	92 83       	std	Z+2, r25	; 0x02
   17d00:	a3 83       	std	Z+3, r26	; 0x03
   17d02:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
#endif
                return ( amigo_send_logical_address() );
   17d06:	0e 94 14 b5 	call	0x16a28	; 0x16a28 <amigo_send_logical_address>
   17d0a:	05 c0       	rjmp	.+10     	; 0x17d16 <Amigo_Execute+0x1aa>
            default:
                return ( amigo_todo(secondary) );
   17d0c:	88 e6       	ldi	r24, 0x68	; 104
   17d0e:	b0 db       	rcall	.-2208   	; 0x17470 <amigo_todo>
   17d10:	02 c0       	rjmp	.+4      	; 0x17d16 <Amigo_Execute+0x1aa>
    if(secondary == 0x68)
    {
        switch(AMIGOs->state)
        {
            case AMIGO_IDLE:
                return(0);
   17d12:	80 e0       	ldi	r24, 0x00	; 0
   17d14:	90 e0       	ldi	r25, 0x00	; 0
                return ( amigo_todo(secondary) );
        }
        AMIGOs->state = AMIGO_IDLE;
    }
    return(0);
}
   17d16:	cd b7       	in	r28, 0x3d	; 61
   17d18:	de b7       	in	r29, 0x3e	; 62
   17d1a:	29 96       	adiw	r28, 0x09	; 9
   17d1c:	e2 e0       	ldi	r30, 0x02	; 2
   17d1e:	0c 94 d0 e8 	jmp	0x1d1a0	; 0x1d1a0 <__epilogue_restores__+0x20>

00017d22 <AMIGO_COMMANDS>:
/// @return  0 on sucess
/// @return or GPIB error flags on fail
/// @see  gpib.h ERROR_MASK defines for a full list.

int AMIGO_COMMANDS(uint8_t ch)
{
   17d22:	cf 93       	push	r28
   17d24:	df 93       	push	r29
   17d26:	c8 2f       	mov	r28, r24

    if(AMIGO_is_MTA(talking) || AMIGO_is_MLA(listening))
   17d28:	80 91 ee 1e 	lds	r24, 0x1EEE	; 0x801eee <talking>
   17d2c:	90 e0       	ldi	r25, 0x00	; 0
   17d2e:	0e 94 ce 8d 	call	0x11b9c	; 0x11b9c <AMIGO_is_MTA>
   17d32:	89 2b       	or	r24, r25
   17d34:	51 f0       	breq	.+20     	; 0x17d4a <AMIGO_COMMANDS+0x28>
    {

        if(talking == UNT && AMIGO_is_MLA(listening))
   17d36:	80 91 ee 1e 	lds	r24, 0x1EEE	; 0x801eee <talking>
   17d3a:	8f 35       	cpi	r24, 0x5F	; 95
   17d3c:	71 f4       	brne	.+28     	; 0x17d5a <AMIGO_COMMANDS+0x38>
   17d3e:	80 91 f0 1e 	lds	r24, 0x1EF0	; 0x801ef0 <listening>
   17d42:	90 e0       	ldi	r25, 0x00	; 0
   17d44:	0e 94 bc 8d 	call	0x11b78	; 0x11b78 <AMIGO_is_MLA>
   17d48:	08 c0       	rjmp	.+16     	; 0x17d5a <AMIGO_COMMANDS+0x38>
/// @see  gpib.h ERROR_MASK defines for a full list.

int AMIGO_COMMANDS(uint8_t ch)
{

    if(AMIGO_is_MTA(talking) || AMIGO_is_MLA(listening))
   17d4a:	80 91 f0 1e 	lds	r24, 0x1EF0	; 0x801ef0 <listening>
   17d4e:	90 e0       	ldi	r25, 0x00	; 0
   17d50:	0e 94 bc 8d 	call	0x11b78	; 0x11b78 <AMIGO_is_MLA>
   17d54:	89 2b       	or	r24, r25
   17d56:	79 f7       	brne	.-34     	; 0x17d36 <AMIGO_COMMANDS+0x14>
   17d58:	76 c0       	rjmp	.+236    	; 0x17e46 <AMIGO_COMMANDS+0x124>

        if(talking == UNT && AMIGO_is_MLA(listening))
        {
// printf("AMIGO COMMANDS %02XH NO TALK ADDRESS!\n", ch);
        }
        if(listening == 0 && AMIGO_is_MTA(talking))
   17d5a:	80 91 f0 1e 	lds	r24, 0x1EF0	; 0x801ef0 <listening>
   17d5e:	81 11       	cpse	r24, r1
   17d60:	05 c0       	rjmp	.+10     	; 0x17d6c <AMIGO_COMMANDS+0x4a>
   17d62:	80 91 ee 1e 	lds	r24, 0x1EEE	; 0x801eee <talking>
   17d66:	90 e0       	ldi	r25, 0x00	; 0
   17d68:	0e 94 ce 8d 	call	0x11b9c	; 0x11b9c <AMIGO_is_MTA>
        {
// printf("AMIGO COMMANDS %02XH NO LISTEN ADDRESS!\n", ch);
        }

        if(ch == 0x60 && (AMIGO_is_MTA(talking) || AMIGO_is_MLA(listening)) )
   17d6c:	c0 36       	cpi	r28, 0x60	; 96
   17d6e:	99 f4       	brne	.+38     	; 0x17d96 <AMIGO_COMMANDS+0x74>
   17d70:	80 91 ee 1e 	lds	r24, 0x1EEE	; 0x801eee <talking>
   17d74:	90 e0       	ldi	r25, 0x00	; 0
   17d76:	0e 94 ce 8d 	call	0x11b9c	; 0x11b9c <AMIGO_is_MTA>
   17d7a:	89 2b       	or	r24, r25
   17d7c:	19 f0       	breq	.+6      	; 0x17d84 <AMIGO_COMMANDS+0x62>
        {
            return (Amigo_Execute(ch) );
   17d7e:	80 e6       	ldi	r24, 0x60	; 96
   17d80:	90 e0       	ldi	r25, 0x00	; 0
   17d82:	14 c0       	rjmp	.+40     	; 0x17dac <AMIGO_COMMANDS+0x8a>
        if(listening == 0 && AMIGO_is_MTA(talking))
        {
// printf("AMIGO COMMANDS %02XH NO LISTEN ADDRESS!\n", ch);
        }

        if(ch == 0x60 && (AMIGO_is_MTA(talking) || AMIGO_is_MLA(listening)) )
   17d84:	80 91 f0 1e 	lds	r24, 0x1EF0	; 0x801ef0 <listening>
   17d88:	90 e0       	ldi	r25, 0x00	; 0
   17d8a:	0e 94 bc 8d 	call	0x11b78	; 0x11b78 <AMIGO_is_MLA>
   17d8e:	89 2b       	or	r24, r25
   17d90:	09 f4       	brne	.+2      	; 0x17d94 <AMIGO_COMMANDS+0x72>
   17d92:	59 c0       	rjmp	.+178    	; 0x17e46 <AMIGO_COMMANDS+0x124>
   17d94:	f4 cf       	rjmp	.-24     	; 0x17d7e <AMIGO_COMMANDS+0x5c>
        {
            return (Amigo_Execute(ch) );
        }

        if(ch == 0x68 && AMIGO_is_MTA(talking) )
   17d96:	c8 36       	cpi	r28, 0x68	; 104
   17d98:	c1 f4       	brne	.+48     	; 0x17dca <AMIGO_COMMANDS+0xa8>
   17d9a:	80 91 ee 1e 	lds	r24, 0x1EEE	; 0x801eee <talking>
   17d9e:	90 e0       	ldi	r25, 0x00	; 0
   17da0:	0e 94 ce 8d 	call	0x11b9c	; 0x11b9c <AMIGO_is_MTA>
   17da4:	89 2b       	or	r24, r25
   17da6:	21 f0       	breq	.+8      	; 0x17db0 <AMIGO_COMMANDS+0x8e>
        {
            return (Amigo_Execute(ch) );
   17da8:	88 e6       	ldi	r24, 0x68	; 104
   17daa:	90 e0       	ldi	r25, 0x00	; 0
   17dac:	df de       	rcall	.-578    	; 0x17b6c <Amigo_Execute>
   17dae:	0b c0       	rjmp	.+22     	; 0x17dc6 <AMIGO_COMMANDS+0xa4>
        }

        if(ch == 0x68 && AMIGO_is_MLA(listening) )// Single byte command
   17db0:	80 91 f0 1e 	lds	r24, 0x1EF0	; 0x801ef0 <listening>
   17db4:	90 e0       	ldi	r25, 0x00	; 0
   17db6:	0e 94 bc 8d 	call	0x11b78	; 0x11b78 <AMIGO_is_MLA>
   17dba:	89 2b       	or	r24, r25
   17dbc:	09 f4       	brne	.+2      	; 0x17dc0 <AMIGO_COMMANDS+0x9e>
   17dbe:	43 c0       	rjmp	.+134    	; 0x17e46 <AMIGO_COMMANDS+0x124>
        {
            return (Amigo_Command(ch) );
   17dc0:	88 e6       	ldi	r24, 0x68	; 104
        {
            return (Amigo_Command(ch) );
        }
        if(ch == 0x6c && AMIGO_is_MLA(listening) )// Single byte command
        {
            return (Amigo_Command(ch) );
   17dc2:	90 e0       	ldi	r25, 0x00	; 0
   17dc4:	ed db       	rcall	.-2086   	; 0x175a0 <Amigo_Command>
        }
        if(ch == 0x70 && AMIGO_is_MTA(talking))
        {
            gpib_disable_PPR(AMIGOp->HEADER.PPR);
            return( amigo_cmd_dsj() );
   17dc6:	ec 01       	movw	r28, r24
   17dc8:	40 c0       	rjmp	.+128    	; 0x17e4a <AMIGO_COMMANDS+0x128>

        if(ch == 0x68 && AMIGO_is_MLA(listening) )// Single byte command
        {
            return (Amigo_Command(ch) );
        }
        if(ch == 0x69 && AMIGO_is_MLA(listening) )// Single byte command
   17dca:	c9 36       	cpi	r28, 0x69	; 105
   17dcc:	51 f4       	brne	.+20     	; 0x17de2 <AMIGO_COMMANDS+0xc0>
   17dce:	80 91 f0 1e 	lds	r24, 0x1EF0	; 0x801ef0 <listening>
   17dd2:	90 e0       	ldi	r25, 0x00	; 0
   17dd4:	0e 94 bc 8d 	call	0x11b78	; 0x11b78 <AMIGO_is_MLA>
   17dd8:	89 2b       	or	r24, r25
   17dda:	a9 f1       	breq	.+106    	; 0x17e46 <AMIGO_COMMANDS+0x124>
        {
            return (Amigo_Command(ch) );
   17ddc:	89 e6       	ldi	r24, 0x69	; 105
   17dde:	90 e0       	ldi	r25, 0x00	; 0
   17de0:	f1 cf       	rjmp	.-30     	; 0x17dc4 <AMIGO_COMMANDS+0xa2>
        }
        if(ch == 0x6a && AMIGO_is_MLA(listening) )// Single byte command
   17de2:	ca 36       	cpi	r28, 0x6A	; 106
   17de4:	51 f4       	brne	.+20     	; 0x17dfa <AMIGO_COMMANDS+0xd8>
   17de6:	80 91 f0 1e 	lds	r24, 0x1EF0	; 0x801ef0 <listening>
   17dea:	90 e0       	ldi	r25, 0x00	; 0
   17dec:	0e 94 bc 8d 	call	0x11b78	; 0x11b78 <AMIGO_is_MLA>
   17df0:	89 2b       	or	r24, r25
   17df2:	49 f1       	breq	.+82     	; 0x17e46 <AMIGO_COMMANDS+0x124>
        {
            return (Amigo_Command(ch) );
   17df4:	8a e6       	ldi	r24, 0x6A	; 106
   17df6:	90 e0       	ldi	r25, 0x00	; 0
   17df8:	e5 cf       	rjmp	.-54     	; 0x17dc4 <AMIGO_COMMANDS+0xa2>
        }
        if(ch == 0x6c && AMIGO_is_MLA(listening) )// Single byte command
   17dfa:	cc 36       	cpi	r28, 0x6C	; 108
   17dfc:	51 f4       	brne	.+20     	; 0x17e12 <AMIGO_COMMANDS+0xf0>
   17dfe:	80 91 f0 1e 	lds	r24, 0x1EF0	; 0x801ef0 <listening>
   17e02:	90 e0       	ldi	r25, 0x00	; 0
   17e04:	0e 94 bc 8d 	call	0x11b78	; 0x11b78 <AMIGO_is_MLA>
   17e08:	89 2b       	or	r24, r25
   17e0a:	e9 f0       	breq	.+58     	; 0x17e46 <AMIGO_COMMANDS+0x124>
        {
            return (Amigo_Command(ch) );
   17e0c:	8c e6       	ldi	r24, 0x6C	; 108
   17e0e:	90 e0       	ldi	r25, 0x00	; 0
   17e10:	d9 cf       	rjmp	.-78     	; 0x17dc4 <AMIGO_COMMANDS+0xa2>
        }
        if(ch == 0x70 && AMIGO_is_MTA(talking))
   17e12:	c0 37       	cpi	r28, 0x70	; 112
   17e14:	c1 f4       	brne	.+48     	; 0x17e46 <AMIGO_COMMANDS+0x124>
   17e16:	80 91 ee 1e 	lds	r24, 0x1EEE	; 0x801eee <talking>
   17e1a:	90 e0       	ldi	r25, 0x00	; 0
   17e1c:	0e 94 ce 8d 	call	0x11b9c	; 0x11b9c <AMIGO_is_MTA>
   17e20:	ec 01       	movw	r28, r24
   17e22:	89 2b       	or	r24, r25
   17e24:	51 f0       	breq	.+20     	; 0x17e3a <AMIGO_COMMANDS+0x118>
        {
            gpib_disable_PPR(AMIGOp->HEADER.PPR);
   17e26:	e0 91 64 19 	lds	r30, 0x1964	; 0x801964 <AMIGOp>
   17e2a:	f0 91 65 19 	lds	r31, 0x1965	; 0x801965 <AMIGOp+0x1>
   17e2e:	81 81       	ldd	r24, Z+1	; 0x01
   17e30:	90 e0       	ldi	r25, 0x00	; 0
   17e32:	0e 94 8c 87 	call	0x10f18	; 0x10f18 <gpib_disable_PPR>
            return( amigo_cmd_dsj() );
   17e36:	ff d9       	rcall	.-3074   	; 0x17236 <amigo_cmd_dsj>
   17e38:	c6 cf       	rjmp	.-116    	; 0x17dc6 <AMIGO_COMMANDS+0xa4>
        }
        if(ch == 0x7e && ch == 0x7f)
        {
            return (Amigo_Command(ch) );
        }
        if(ch == 0x70 && AMIGO_is_MLA(listening))
   17e3a:	80 91 f0 1e 	lds	r24, 0x1EF0	; 0x801ef0 <listening>
   17e3e:	90 e0       	ldi	r25, 0x00	; 0
   17e40:	0e 94 bc 8d 	call	0x11b78	; 0x11b78 <AMIGO_is_MLA>
   17e44:	02 c0       	rjmp	.+4      	; 0x17e4a <AMIGO_COMMANDS+0x128>
        {
// NOP
        }
    }
    return(0);
   17e46:	c0 e0       	ldi	r28, 0x00	; 0
   17e48:	d0 e0       	ldi	r29, 0x00	; 0
}
   17e4a:	ce 01       	movw	r24, r28
   17e4c:	df 91       	pop	r29
   17e4e:	cf 91       	pop	r28
   17e50:	08 95       	ret

00017e52 <printer_init>:
/// - Only called once after power on by main().
/// @return  void

void printer_init()
{
    plot.error = 0;
   17e52:	ed e9       	ldi	r30, 0x9D	; 157
   17e54:	f9 e1       	ldi	r31, 0x19	; 25
   17e56:	10 86       	std	Z+8, r1	; 0x08
    plot.count = 0;
   17e58:	10 82       	st	Z, r1
   17e5a:	11 82       	std	Z+1, r1	; 0x01
   17e5c:	12 82       	std	Z+2, r1	; 0x02
   17e5e:	13 82       	std	Z+3, r1	; 0x03
    plot.ind = 0;
   17e60:	15 82       	std	Z+5, r1	; 0x05
   17e62:	14 82       	std	Z+4, r1	; 0x04
    plot.fp = NULL;
   17e64:	12 86       	std	Z+10, r1	; 0x0a
   17e66:	11 86       	std	Z+9, r1	; 0x09
    plot.buf = NULL;
   17e68:	14 86       	std	Z+12, r1	; 0x0c
   17e6a:	13 86       	std	Z+11, r1	; 0x0b
   17e6c:	08 95       	ret

00017e6e <receive_plot_flush>:
/// @see posix.h
/// @see printer_buffer()
/// @return  file handle

int receive_plot_flush()
{
   17e6e:	cf 93       	push	r28
   17e70:	df 93       	push	r29
   17e72:	ad b7       	in	r26, 0x3d	; 61
   17e74:	be b7       	in	r27, 0x3e	; 62
   17e76:	17 97       	sbiw	r26, 0x07	; 7
   17e78:	0f b6       	in	r0, 0x3f	; 63
   17e7a:	f8 94       	cli
   17e7c:	be bf       	out	0x3e, r27	; 62
   17e7e:	0f be       	out	0x3f, r0	; 63
   17e80:	ad bf       	out	0x3d, r26	; 61
    int ret;
    int fno;

    if(plot.fp == NULL || plot.ind == 0)
   17e82:	20 91 a6 19 	lds	r18, 0x19A6	; 0x8019a6 <plot+0x9>
   17e86:	30 91 a7 19 	lds	r19, 0x19A7	; 0x8019a7 <plot+0xa>
   17e8a:	21 15       	cp	r18, r1
   17e8c:	31 05       	cpc	r19, r1
   17e8e:	09 f4       	brne	.+2      	; 0x17e92 <receive_plot_flush+0x24>
   17e90:	45 c0       	rjmp	.+138    	; 0x17f1c <receive_plot_flush+0xae>
   17e92:	80 91 a1 19 	lds	r24, 0x19A1	; 0x8019a1 <plot+0x4>
   17e96:	90 91 a2 19 	lds	r25, 0x19A2	; 0x8019a2 <plot+0x5>
   17e9a:	00 97       	sbiw	r24, 0x00	; 0
   17e9c:	09 f4       	brne	.+2      	; 0x17ea0 <receive_plot_flush+0x32>
   17e9e:	40 c0       	rjmp	.+128    	; 0x17f20 <receive_plot_flush+0xb2>
        return(0);

    ret  = fwrite(plot.buf, 1, plot.ind , plot.fp);
   17ea0:	ac 01       	movw	r20, r24
   17ea2:	61 e0       	ldi	r22, 0x01	; 1
   17ea4:	70 e0       	ldi	r23, 0x00	; 0
   17ea6:	80 91 a8 19 	lds	r24, 0x19A8	; 0x8019a8 <plot+0xb>
   17eaa:	90 91 a9 19 	lds	r25, 0x19A9	; 0x8019a9 <plot+0xc>
   17eae:	0e 94 7c 7d 	call	0xfaf8	; 0xfaf8 <fwrite>
   17eb2:	ec 01       	movw	r28, r24
    if(ret != plot.ind)
   17eb4:	80 91 a1 19 	lds	r24, 0x19A1	; 0x8019a1 <plot+0x4>
   17eb8:	90 91 a2 19 	lds	r25, 0x19A2	; 0x8019a2 <plot+0x5>
   17ebc:	c8 17       	cp	r28, r24
   17ebe:	d9 07       	cpc	r29, r25
   17ec0:	09 f1       	breq	.+66     	; 0x17f04 <receive_plot_flush+0x96>
    {
        if(debuglevel & (GPIB_ERR + GPIB_DEVICE_STATE_MESSAGES))
   17ec2:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17ec6:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   17eca:	81 72       	andi	r24, 0x21	; 33
   17ecc:	99 27       	eor	r25, r25
   17ece:	89 2b       	or	r24, r25
   17ed0:	b1 f0       	breq	.+44     	; 0x17efe <receive_plot_flush+0x90>
        {
            perror("receive_plot_flush");
   17ed2:	8a ec       	ldi	r24, 0xCA	; 202
   17ed4:	95 e1       	ldi	r25, 0x15	; 21
   17ed6:	0e 94 85 79 	call	0xf30a	; 0xf30a <perror>
            printf("write failed: wanted %d, got:%d\n", plot.ind, ret);
   17eda:	ed b7       	in	r30, 0x3d	; 61
   17edc:	fe b7       	in	r31, 0x3e	; 62
   17ede:	d7 83       	std	Z+7, r29	; 0x07
   17ee0:	c6 83       	std	Z+6, r28	; 0x06
   17ee2:	80 91 a1 19 	lds	r24, 0x19A1	; 0x8019a1 <plot+0x4>
   17ee6:	90 91 a2 19 	lds	r25, 0x19A2	; 0x8019a2 <plot+0x5>
   17eea:	95 83       	std	Z+5, r25	; 0x05
   17eec:	84 83       	std	Z+4, r24	; 0x04
   17eee:	86 e6       	ldi	r24, 0x66	; 102
   17ef0:	91 e3       	ldi	r25, 0x31	; 49
   17ef2:	a0 e0       	ldi	r26, 0x00	; 0
   17ef4:	81 83       	std	Z+1, r24	; 0x01
   17ef6:	92 83       	std	Z+2, r25	; 0x02
   17ef8:	a3 83       	std	Z+3, r26	; 0x03
   17efa:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
        }
        return(-1);
   17efe:	8f ef       	ldi	r24, 0xFF	; 255
   17f00:	9f ef       	ldi	r25, 0xFF	; 255
   17f02:	0e c0       	rjmp	.+28     	; 0x17f20 <receive_plot_flush+0xb2>
    }

    fno = fileno( plot.fp );
   17f04:	80 91 a6 19 	lds	r24, 0x19A6	; 0x8019a6 <plot+0x9>
   17f08:	90 91 a7 19 	lds	r25, 0x19A7	; 0x8019a7 <plot+0xa>
   17f0c:	0e 94 cf 77 	call	0xef9e	; 0xef9e <fileno>
    if(fno < 0)
   17f10:	97 fd       	sbrc	r25, 7
   17f12:	f5 cf       	rjmp	.-22     	; 0x17efe <receive_plot_flush+0x90>
        return(-1);
///@brief sync filesystem after every write
    syncfs( fno );
   17f14:	0e 94 c6 7c 	call	0xf98c	; 0xf98c <syncfs>
    return (ret);
   17f18:	ce 01       	movw	r24, r28
   17f1a:	02 c0       	rjmp	.+4      	; 0x17f20 <receive_plot_flush+0xb2>
{
    int ret;
    int fno;

    if(plot.fp == NULL || plot.ind == 0)
        return(0);
   17f1c:	80 e0       	ldi	r24, 0x00	; 0
   17f1e:	90 e0       	ldi	r25, 0x00	; 0
    if(fno < 0)
        return(-1);
///@brief sync filesystem after every write
    syncfs( fno );
    return (ret);
}
   17f20:	cd b7       	in	r28, 0x3d	; 61
   17f22:	de b7       	in	r29, 0x3e	; 62
   17f24:	27 96       	adiw	r28, 0x07	; 7
   17f26:	e2 e0       	ldi	r30, 0x02	; 2
   17f28:	0c 94 d0 e8 	jmp	0x1d1a0	; 0x1d1a0 <__epilogue_restores__+0x20>

00017f2c <printer_close>:
/// @see posix.h
/// @return  void
/// FYI: for the HP54645D plots end with: pd;pu;pu;sp0;
/// This gets called
void printer_close()
{
   17f2c:	ad b7       	in	r26, 0x3d	; 61
   17f2e:	be b7       	in	r27, 0x3e	; 62
   17f30:	17 97       	sbiw	r26, 0x07	; 7
   17f32:	0f b6       	in	r0, 0x3f	; 63
   17f34:	f8 94       	cli
   17f36:	be bf       	out	0x3e, r27	; 62
   17f38:	0f be       	out	0x3f, r0	; 63
   17f3a:	ad bf       	out	0x3d, r26	; 61
    if( receive_plot_flush() < 0 )
   17f3c:	98 df       	rcall	.-208    	; 0x17e6e <receive_plot_flush>
   17f3e:	97 ff       	sbrs	r25, 7
   17f40:	03 c0       	rjmp	.+6      	; 0x17f48 <printer_close+0x1c>
        plot.error = 1;
   17f42:	81 e0       	ldi	r24, 0x01	; 1
   17f44:	80 93 a5 19 	sts	0x19A5, r24	; 0x8019a5 <plot+0x8>

    if(debuglevel & (GPIB_ERR + GPIB_DEVICE_STATE_MESSAGES))
   17f48:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17f4c:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   17f50:	81 72       	andi	r24, 0x21	; 33
   17f52:	99 27       	eor	r25, r25
   17f54:	89 2b       	or	r24, r25
   17f56:	71 f0       	breq	.+28     	; 0x17f74 <printer_close+0x48>
    {
        if(plot.error)
   17f58:	80 91 a5 19 	lds	r24, 0x19A5	; 0x8019a5 <plot+0x8>
   17f5c:	88 23       	and	r24, r24
   17f5e:	51 f0       	breq	.+20     	; 0x17f74 <printer_close+0x48>
            printf("ERROR durring write\n");
   17f60:	85 e9       	ldi	r24, 0x95	; 149
   17f62:	91 e3       	ldi	r25, 0x31	; 49
   17f64:	a0 e0       	ldi	r26, 0x00	; 0
   17f66:	ed b7       	in	r30, 0x3d	; 61
   17f68:	fe b7       	in	r31, 0x3e	; 62
   17f6a:	81 83       	std	Z+1, r24	; 0x01
   17f6c:	92 83       	std	Z+2, r25	; 0x02
   17f6e:	a3 83       	std	Z+3, r26	; 0x03
   17f70:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
    }

    if(plot.fp)
   17f74:	80 91 a6 19 	lds	r24, 0x19A6	; 0x8019a6 <plot+0x9>
   17f78:	90 91 a7 19 	lds	r25, 0x19A7	; 0x8019a7 <plot+0xa>
   17f7c:	00 97       	sbiw	r24, 0x00	; 0
   17f7e:	e1 f0       	breq	.+56     	; 0x17fb8 <printer_close+0x8c>
    {
        fclose(plot.fp);
   17f80:	0e 94 fe 7d 	call	0xfbfc	; 0xfbfc <fclose>
        if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   17f84:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17f88:	85 ff       	sbrs	r24, 5
   17f8a:	16 c0       	rjmp	.+44     	; 0x17fb8 <printer_close+0x8c>
            printf("\nDONE: %08ld\n",plot.count);
   17f8c:	80 91 9d 19 	lds	r24, 0x199D	; 0x80199d <plot>
   17f90:	90 91 9e 19 	lds	r25, 0x199E	; 0x80199e <plot+0x1>
   17f94:	a0 91 9f 19 	lds	r26, 0x199F	; 0x80199f <plot+0x2>
   17f98:	b0 91 a0 19 	lds	r27, 0x19A0	; 0x8019a0 <plot+0x3>
   17f9c:	ed b7       	in	r30, 0x3d	; 61
   17f9e:	fe b7       	in	r31, 0x3e	; 62
   17fa0:	84 83       	std	Z+4, r24	; 0x04
   17fa2:	95 83       	std	Z+5, r25	; 0x05
   17fa4:	a6 83       	std	Z+6, r26	; 0x06
   17fa6:	b7 83       	std	Z+7, r27	; 0x07
   17fa8:	87 e8       	ldi	r24, 0x87	; 135
   17faa:	91 e3       	ldi	r25, 0x31	; 49
   17fac:	a0 e0       	ldi	r26, 0x00	; 0
   17fae:	81 83       	std	Z+1, r24	; 0x01
   17fb0:	92 83       	std	Z+2, r25	; 0x02
   17fb2:	a3 83       	std	Z+3, r26	; 0x03
   17fb4:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
    }

    if(plot.buf)
   17fb8:	80 91 a8 19 	lds	r24, 0x19A8	; 0x8019a8 <plot+0xb>
   17fbc:	90 91 a9 19 	lds	r25, 0x19A9	; 0x8019a9 <plot+0xc>
   17fc0:	00 97       	sbiw	r24, 0x00	; 0
   17fc2:	11 f0       	breq	.+4      	; 0x17fc8 <printer_close+0x9c>
        safefree(plot.buf);
   17fc4:	0e 94 74 28 	call	0x50e8	; 0x50e8 <safefree>
    printer_init();
   17fc8:	44 df       	rcall	.-376    	; 0x17e52 <printer_init>
}
   17fca:	ad b7       	in	r26, 0x3d	; 61
   17fcc:	be b7       	in	r27, 0x3e	; 62
   17fce:	17 96       	adiw	r26, 0x07	; 7
   17fd0:	0f b6       	in	r0, 0x3f	; 63
   17fd2:	f8 94       	cli
   17fd4:	be bf       	out	0x3e, r27	; 62
   17fd6:	0f be       	out	0x3f, r0	; 63
   17fd8:	ad bf       	out	0x3d, r26	; 61
   17fda:	08 95       	ret

00017fdc <printer_open>:
/// @see posix.c
/// @see posix.h
/// @return  void

void printer_open(char *name)
{
   17fdc:	ad e5       	ldi	r26, 0x5D	; 93
   17fde:	b0 e0       	ldi	r27, 0x00	; 0
   17fe0:	e4 ef       	ldi	r30, 0xF4	; 244
   17fe2:	ff eb       	ldi	r31, 0xBF	; 191
   17fe4:	0c 94 b0 e8 	jmp	0x1d160	; 0x1d160 <__prologue_saves__+0x18>
   17fe8:	8c 01       	movw	r16, r24

    char *ptr;

    if(!name)
   17fea:	89 2b       	or	r24, r25
   17fec:	09 f0       	breq	.+2      	; 0x17ff0 <printer_open+0x14>
   17fee:	4f c0       	rjmp	.+158    	; 0x1808e <printer_open+0xb2>
        time_t seconds;
        tm_t *tc;
        ts_t ts;
        char fname[64];

        clock_gettime(0, (ts_t *) &ts);
   17ff0:	be 01       	movw	r22, r28
   17ff2:	6e 5a       	subi	r22, 0xAE	; 174
   17ff4:	7f 4f       	sbci	r23, 0xFF	; 255
   17ff6:	80 e0       	ldi	r24, 0x00	; 0
   17ff8:	90 e0       	ldi	r25, 0x00	; 0
   17ffa:	0e 94 ba 34 	call	0x6974	; 0x6974 <clock_gettime>
        seconds = ts.tv_sec;
   17ffe:	66 96       	adiw	r28, 0x16	; 22
   18000:	8c ad       	ldd	r24, Y+60	; 0x3c
   18002:	9d ad       	ldd	r25, Y+61	; 0x3d
   18004:	ae ad       	ldd	r26, Y+62	; 0x3e
   18006:	bf ad       	ldd	r27, Y+63	; 0x3f
   18008:	66 97       	sbiw	r28, 0x16	; 22
   1800a:	6e 96       	adiw	r28, 0x1e	; 30
   1800c:	8c af       	std	Y+60, r24	; 0x3c
   1800e:	9d af       	std	Y+61, r25	; 0x3d
   18010:	ae af       	std	Y+62, r26	; 0x3e
   18012:	bf af       	std	Y+63, r27	; 0x3f
   18014:	6e 97       	sbiw	r28, 0x1e	; 30
        tc = gmtime(&seconds);
   18016:	ce 01       	movw	r24, r28
   18018:	86 5a       	subi	r24, 0xA6	; 166
   1801a:	9f 4f       	sbci	r25, 0xFF	; 255
   1801c:	0e 94 a4 38 	call	0x7148	; 0x7148 <gmtime>
   18020:	8c 01       	movw	r16, r24
        sprintf(fname,"/plot-%02d%s%04d-%02d%02d%02d.plt",
   18022:	fc 01       	movw	r30, r24
   18024:	e6 80       	ldd	r14, Z+6	; 0x06
   18026:	f7 80       	ldd	r15, Z+7	; 0x07
   18028:	80 85       	ldd	r24, Z+8	; 0x08
   1802a:	91 85       	ldd	r25, Z+9	; 0x09
   1802c:	0e 94 80 37 	call	0x6f00	; 0x6f00 <tm_mon_to_ascii>
   18030:	f8 01       	movw	r30, r16
   18032:	20 81       	ld	r18, Z
   18034:	31 81       	ldd	r19, Z+1	; 0x01
   18036:	ed b7       	in	r30, 0x3d	; 61
   18038:	fe b7       	in	r31, 0x3e	; 62
   1803a:	31 8b       	std	Z+17, r19	; 0x11
   1803c:	20 8b       	std	Z+16, r18	; 0x10
   1803e:	f8 01       	movw	r30, r16
   18040:	22 81       	ldd	r18, Z+2	; 0x02
   18042:	33 81       	ldd	r19, Z+3	; 0x03
   18044:	ed b7       	in	r30, 0x3d	; 61
   18046:	fe b7       	in	r31, 0x3e	; 62
   18048:	37 87       	std	Z+15, r19	; 0x0f
   1804a:	26 87       	std	Z+14, r18	; 0x0e
   1804c:	f8 01       	movw	r30, r16
   1804e:	24 81       	ldd	r18, Z+4	; 0x04
   18050:	35 81       	ldd	r19, Z+5	; 0x05
   18052:	ed b7       	in	r30, 0x3d	; 61
   18054:	fe b7       	in	r31, 0x3e	; 62
   18056:	35 87       	std	Z+13, r19	; 0x0d
   18058:	24 87       	std	Z+12, r18	; 0x0c
   1805a:	f8 01       	movw	r30, r16
   1805c:	22 85       	ldd	r18, Z+10	; 0x0a
   1805e:	33 85       	ldd	r19, Z+11	; 0x0b
   18060:	24 59       	subi	r18, 0x94	; 148
   18062:	38 4f       	sbci	r19, 0xF8	; 248
   18064:	ed b7       	in	r30, 0x3d	; 61
   18066:	fe b7       	in	r31, 0x3e	; 62
   18068:	33 87       	std	Z+11, r19	; 0x0b
   1806a:	22 87       	std	Z+10, r18	; 0x0a
   1806c:	91 87       	std	Z+9, r25	; 0x09
   1806e:	80 87       	std	Z+8, r24	; 0x08
   18070:	f7 82       	std	Z+7, r15	; 0x07
   18072:	e6 82       	std	Z+6, r14	; 0x06
   18074:	8c ec       	ldi	r24, 0xCC	; 204
   18076:	91 e3       	ldi	r25, 0x31	; 49
   18078:	a0 e0       	ldi	r26, 0x00	; 0
   1807a:	83 83       	std	Z+3, r24	; 0x03
   1807c:	94 83       	std	Z+4, r25	; 0x04
   1807e:	a5 83       	std	Z+5, r26	; 0x05
   18080:	8e 01       	movw	r16, r28
   18082:	0e 5e       	subi	r16, 0xEE	; 238
   18084:	1f 4f       	sbci	r17, 0xFF	; 255
   18086:	12 83       	std	Z+2, r17	; 0x02
   18088:	01 83       	std	Z+1, r16	; 0x01
   1808a:	0e 94 e8 47 	call	0x8fd0	; 0x8fd0 <sprintf_P>
    else
    {
        ptr = name;
    }

    if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   1808e:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   18092:	85 ff       	sbrs	r24, 5
   18094:	0c c0       	rjmp	.+24     	; 0x180ae <printer_open+0xd2>
        printf("Capturing plot to:%s\n", ptr);
   18096:	ed b7       	in	r30, 0x3d	; 61
   18098:	fe b7       	in	r31, 0x3e	; 62
   1809a:	15 83       	std	Z+5, r17	; 0x05
   1809c:	04 83       	std	Z+4, r16	; 0x04
   1809e:	86 eb       	ldi	r24, 0xB6	; 182
   180a0:	91 e3       	ldi	r25, 0x31	; 49
   180a2:	a0 e0       	ldi	r26, 0x00	; 0
   180a4:	81 83       	std	Z+1, r24	; 0x01
   180a6:	92 83       	std	Z+2, r25	; 0x02
   180a8:	a3 83       	std	Z+3, r26	; 0x03
   180aa:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>

    plot.fp = fopen(ptr,"wb");
   180ae:	6a ef       	ldi	r22, 0xFA	; 250
   180b0:	78 e0       	ldi	r23, 0x08	; 8
   180b2:	c8 01       	movw	r24, r16
   180b4:	0e 94 54 7f 	call	0xfea8	; 0xfea8 <fopen>
   180b8:	90 93 a7 19 	sts	0x19A7, r25	; 0x8019a7 <plot+0xa>
   180bc:	80 93 a6 19 	sts	0x19A6, r24	; 0x8019a6 <plot+0x9>
    if(plot.fp == NULL)
   180c0:	89 2b       	or	r24, r25
   180c2:	b9 f4       	brne	.+46     	; 0x180f2 <printer_open+0x116>
    {
        if(debuglevel & (GPIB_ERR + GPIB_DEVICE_STATE_MESSAGES))
   180c4:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   180c8:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   180cc:	81 72       	andi	r24, 0x21	; 33
   180ce:	99 27       	eor	r25, r25
   180d0:	89 2b       	or	r24, r25
   180d2:	11 f1       	breq	.+68     	; 0x18118 <printer_open+0x13c>
        {
            perror("open failed");
   180d4:	88 e8       	ldi	r24, 0x88	; 136
   180d6:	9d e0       	ldi	r25, 0x0D	; 13
   180d8:	0e 94 85 79 	call	0xf30a	; 0xf30a <perror>
            printf("exiting...\n");
   180dc:	8a ea       	ldi	r24, 0xAA	; 170
   180de:	91 e3       	ldi	r25, 0x31	; 49
   180e0:	a0 e0       	ldi	r26, 0x00	; 0
   180e2:	ed b7       	in	r30, 0x3d	; 61
   180e4:	fe b7       	in	r31, 0x3e	; 62
   180e6:	81 83       	std	Z+1, r24	; 0x01
   180e8:	92 83       	std	Z+2, r25	; 0x02
   180ea:	a3 83       	std	Z+3, r26	; 0x03
   180ec:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
   180f0:	13 c0       	rjmp	.+38     	; 0x18118 <printer_open+0x13c>
        }
        return;
    }

    plot.buf = calloc(512+1,1);
   180f2:	61 e0       	ldi	r22, 0x01	; 1
   180f4:	70 e0       	ldi	r23, 0x00	; 0
   180f6:	81 e0       	ldi	r24, 0x01	; 1
   180f8:	92 e0       	ldi	r25, 0x02	; 2
   180fa:	0e 94 28 28 	call	0x5050	; 0x5050 <safecalloc>
   180fe:	90 93 a9 19 	sts	0x19A9, r25	; 0x8019a9 <plot+0xc>
   18102:	80 93 a8 19 	sts	0x19A8, r24	; 0x8019a8 <plot+0xb>
    if(plot.buf == NULL)
   18106:	89 2b       	or	r24, r25
   18108:	09 f4       	brne	.+2      	; 0x1810c <printer_open+0x130>
        printer_close();
   1810a:	10 df       	rcall	.-480    	; 0x17f2c <printer_close>
    plot.size = 512;
   1810c:	80 e0       	ldi	r24, 0x00	; 0
   1810e:	92 e0       	ldi	r25, 0x02	; 2
   18110:	90 93 a4 19 	sts	0x19A4, r25	; 0x8019a4 <plot+0x7>
   18114:	80 93 a3 19 	sts	0x19A3, r24	; 0x8019a3 <plot+0x6>
}
   18118:	c3 5a       	subi	r28, 0xA3	; 163
   1811a:	df 4f       	sbci	r29, 0xFF	; 255
   1811c:	e6 e0       	ldi	r30, 0x06	; 6
   1811e:	0c 94 cc e8 	jmp	0x1d198	; 0x1d198 <__epilogue_restores__+0x18>

00018122 <printer_buffer>:
///
/// @see posix.c
/// @see posix.h
/// @return  void
void printer_buffer( uint16_t val )
{
   18122:	cf 93       	push	r28
   18124:	df 93       	push	r29
   18126:	ad b7       	in	r26, 0x3d	; 61
   18128:	be b7       	in	r27, 0x3e	; 62
   1812a:	17 97       	sbiw	r26, 0x07	; 7
   1812c:	0f b6       	in	r0, 0x3f	; 63
   1812e:	f8 94       	cli
   18130:	be bf       	out	0x3e, r27	; 62
   18132:	0f be       	out	0x3f, r0	; 63
   18134:	ad bf       	out	0x3d, r26	; 61
   18136:	ec 01       	movw	r28, r24

    uint16_t ch;

    if(debuglevel & (GPIB_ERR + GPIB_DEVICE_STATE_MESSAGES))
   18138:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1813c:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   18140:	81 72       	andi	r24, 0x21	; 33
   18142:	99 27       	eor	r25, r25
   18144:	89 2b       	or	r24, r25
   18146:	c1 f0       	breq	.+48     	; 0x18178 <printer_buffer+0x56>
    {
        if( ( plot.count & 255L ) == 0)
   18148:	80 91 9d 19 	lds	r24, 0x199D	; 0x80199d <plot>
   1814c:	30 91 9e 19 	lds	r19, 0x199E	; 0x80199e <plot+0x1>
   18150:	20 91 9f 19 	lds	r18, 0x199F	; 0x80199f <plot+0x2>
   18154:	90 91 a0 19 	lds	r25, 0x19A0	; 0x8019a0 <plot+0x3>
   18158:	81 11       	cpse	r24, r1
   1815a:	0e c0       	rjmp	.+28     	; 0x18178 <printer_buffer+0x56>
            printf("%08ld\r",plot.count);
   1815c:	ed b7       	in	r30, 0x3d	; 61
   1815e:	fe b7       	in	r31, 0x3e	; 62
   18160:	84 83       	std	Z+4, r24	; 0x04
   18162:	35 83       	std	Z+5, r19	; 0x05
   18164:	26 83       	std	Z+6, r18	; 0x06
   18166:	97 83       	std	Z+7, r25	; 0x07
   18168:	8f e5       	ldi	r24, 0x5F	; 95
   1816a:	91 e3       	ldi	r25, 0x31	; 49
   1816c:	a0 e0       	ldi	r26, 0x00	; 0
   1816e:	81 83       	std	Z+1, r24	; 0x01
   18170:	92 83       	std	Z+2, r25	; 0x02
   18172:	a3 83       	std	Z+3, r26	; 0x03
   18174:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
    }

    ch = val & 0xff;
    if(val & (0xff00 & ~REN_FLAG))
   18178:	ce 01       	movw	r24, r28
   1817a:	88 27       	eor	r24, r24
   1817c:	97 7f       	andi	r25, 0xF7	; 247
   1817e:	89 2b       	or	r24, r25
   18180:	41 f0       	breq	.+16     	; 0x18192 <printer_buffer+0x70>
    {
        if( receive_plot_flush() )
   18182:	75 de       	rcall	.-790    	; 0x17e6e <receive_plot_flush>
   18184:	89 2b       	or	r24, r25
   18186:	09 f4       	brne	.+2      	; 0x1818a <printer_buffer+0x68>
   18188:	3f c0       	rjmp	.+126    	; 0x18208 <printer_buffer+0xe6>
            plot.error = 1;
   1818a:	81 e0       	ldi	r24, 0x01	; 1
   1818c:	80 93 a5 19 	sts	0x19A5, r24	; 0x8019a5 <plot+0x8>
   18190:	3b c0       	rjmp	.+118    	; 0x18208 <printer_buffer+0xe6>
//plot.count += strlen(ptr);
    }
    else
    {
        ch  = val & 0xff;
        plot.buf[plot.ind++] = ch;
   18192:	20 91 a8 19 	lds	r18, 0x19A8	; 0x8019a8 <plot+0xb>
   18196:	30 91 a9 19 	lds	r19, 0x19A9	; 0x8019a9 <plot+0xc>
   1819a:	80 91 a1 19 	lds	r24, 0x19A1	; 0x8019a1 <plot+0x4>
   1819e:	90 91 a2 19 	lds	r25, 0x19A2	; 0x8019a2 <plot+0x5>
   181a2:	ac 01       	movw	r20, r24
   181a4:	4f 5f       	subi	r20, 0xFF	; 255
   181a6:	5f 4f       	sbci	r21, 0xFF	; 255
   181a8:	50 93 a2 19 	sts	0x19A2, r21	; 0x8019a2 <plot+0x5>
   181ac:	40 93 a1 19 	sts	0x19A1, r20	; 0x8019a1 <plot+0x4>
   181b0:	f9 01       	movw	r30, r18
   181b2:	e8 0f       	add	r30, r24
   181b4:	f9 1f       	adc	r31, r25
   181b6:	c0 83       	st	Z, r28
        plot.count++;
   181b8:	80 91 9d 19 	lds	r24, 0x199D	; 0x80199d <plot>
   181bc:	90 91 9e 19 	lds	r25, 0x199E	; 0x80199e <plot+0x1>
   181c0:	a0 91 9f 19 	lds	r26, 0x199F	; 0x80199f <plot+0x2>
   181c4:	b0 91 a0 19 	lds	r27, 0x19A0	; 0x8019a0 <plot+0x3>
   181c8:	01 96       	adiw	r24, 0x01	; 1
   181ca:	a1 1d       	adc	r26, r1
   181cc:	b1 1d       	adc	r27, r1
   181ce:	80 93 9d 19 	sts	0x199D, r24	; 0x80199d <plot>
   181d2:	90 93 9e 19 	sts	0x199E, r25	; 0x80199e <plot+0x1>
   181d6:	a0 93 9f 19 	sts	0x199F, r26	; 0x80199f <plot+0x2>
   181da:	b0 93 a0 19 	sts	0x19A0, r27	; 0x8019a0 <plot+0x3>

        if(plot.ind >= plot.size)
   181de:	20 91 a1 19 	lds	r18, 0x19A1	; 0x8019a1 <plot+0x4>
   181e2:	30 91 a2 19 	lds	r19, 0x19A2	; 0x8019a2 <plot+0x5>
   181e6:	80 91 a3 19 	lds	r24, 0x19A3	; 0x8019a3 <plot+0x6>
   181ea:	90 91 a4 19 	lds	r25, 0x19A4	; 0x8019a4 <plot+0x7>
   181ee:	28 17       	cp	r18, r24
   181f0:	39 07       	cpc	r19, r25
        {
            if( receive_plot_flush() < 0 )
   181f2:	54 f0       	brlt	.+20     	; 0x18208 <printer_buffer+0xe6>
   181f4:	3c de       	rcall	.-904    	; 0x17e6e <receive_plot_flush>
   181f6:	97 ff       	sbrs	r25, 7
   181f8:	03 c0       	rjmp	.+6      	; 0x18200 <printer_buffer+0xde>
                plot.error = 1;
   181fa:	81 e0       	ldi	r24, 0x01	; 1
   181fc:	80 93 a5 19 	sts	0x19A5, r24	; 0x8019a5 <plot+0x8>
            plot.ind  = 0;
   18200:	10 92 a2 19 	sts	0x19A2, r1	; 0x8019a2 <plot+0x5>
   18204:	10 92 a1 19 	sts	0x19A1, r1	; 0x8019a1 <plot+0x4>
        }
    }
}
   18208:	cd b7       	in	r28, 0x3d	; 61
   1820a:	de b7       	in	r29, 0x3e	; 62
   1820c:	27 96       	adiw	r28, 0x07	; 7
   1820e:	e2 e0       	ldi	r30, 0x02	; 2
   18210:	0c 94 d0 e8 	jmp	0x1d1a0	; 0x1d1a0 <__epilogue_restores__+0x20>

00018214 <PRINTER_COMMANDS>:
///
/// @todo  Fully emulated plotter response.
/// @return  0

int PRINTER_COMMANDS(uint8_t ch)
{
   18214:	cf 93       	push	r28
   18216:	00 d0       	rcall	.+0      	; 0x18218 <PRINTER_COMMANDS+0x4>
   18218:	00 d0       	rcall	.+0      	; 0x1821a <PRINTER_COMMANDS+0x6>
   1821a:	1f 92       	push	r1
   1821c:	c8 2f       	mov	r28, r24

// We could, for example, use secondaries to set file names, etc
// We don not use them yet
    if(PRINTER_is_MLA(listening))
   1821e:	80 91 f0 1e 	lds	r24, 0x1EF0	; 0x801ef0 <listening>
   18222:	90 e0       	ldi	r25, 0x00	; 0
   18224:	0e 94 f2 8d 	call	0x11be4	; 0x11be4 <PRINTER_is_MLA>
   18228:	89 2b       	or	r24, r25
   1822a:	69 f0       	breq	.+26     	; 0x18246 <PRINTER_COMMANDS+0x32>
    {
#if SDEBUG
        if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   1822c:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   18230:	85 ff       	sbrs	r24, 5
   18232:	22 c0       	rjmp	.+68     	; 0x18278 <PRINTER_COMMANDS+0x64>
            printf("[SC PRINTER Listen: %02XH]\n",  0xff & ch );
   18234:	8c 2f       	mov	r24, r28
   18236:	90 e0       	ldi	r25, 0x00	; 0
   18238:	ed b7       	in	r30, 0x3d	; 61
   1823a:	fe b7       	in	r31, 0x3e	; 62
   1823c:	95 83       	std	Z+5, r25	; 0x05
   1823e:	84 83       	std	Z+4, r24	; 0x04
   18240:	83 e4       	ldi	r24, 0x43	; 67
   18242:	91 e3       	ldi	r25, 0x31	; 49
   18244:	13 c0       	rjmp	.+38     	; 0x1826c <PRINTER_COMMANDS+0x58>
#endif
        return(0);
    }

    if(PRINTER_is_MTA(talking))
   18246:	80 91 ee 1e 	lds	r24, 0x1EEE	; 0x801eee <talking>
   1824a:	90 e0       	ldi	r25, 0x00	; 0
   1824c:	0e 94 04 8e 	call	0x11c08	; 0x11c08 <PRINTER_is_MTA>
   18250:	89 2b       	or	r24, r25
   18252:	91 f0       	breq	.+36     	; 0x18278 <PRINTER_COMMANDS+0x64>
    {
#if SDEBUG
        if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   18254:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   18258:	85 ff       	sbrs	r24, 5
   1825a:	0e c0       	rjmp	.+28     	; 0x18278 <PRINTER_COMMANDS+0x64>
            printf("[SC PRINTER Talk: %02XH]\n",  0xff & ch );
   1825c:	8c 2f       	mov	r24, r28
   1825e:	90 e0       	ldi	r25, 0x00	; 0
   18260:	ed b7       	in	r30, 0x3d	; 61
   18262:	fe b7       	in	r31, 0x3e	; 62
   18264:	95 83       	std	Z+5, r25	; 0x05
   18266:	84 83       	std	Z+4, r24	; 0x04
   18268:	89 e2       	ldi	r24, 0x29	; 41
   1826a:	91 e3       	ldi	r25, 0x31	; 49
   1826c:	a0 e0       	ldi	r26, 0x00	; 0
   1826e:	81 83       	std	Z+1, r24	; 0x01
   18270:	92 83       	std	Z+2, r25	; 0x02
   18272:	a3 83       	std	Z+3, r26	; 0x03
   18274:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
#endif
        return(0);
    }
    return(0);
}
   18278:	80 e0       	ldi	r24, 0x00	; 0
   1827a:	90 e0       	ldi	r25, 0x00	; 0
   1827c:	0f 90       	pop	r0
   1827e:	0f 90       	pop	r0
   18280:	0f 90       	pop	r0
   18282:	0f 90       	pop	r0
   18284:	0f 90       	pop	r0
   18286:	cf 91       	pop	r28
   18288:	08 95       	ret

0001828a <V2B_MSB>:
///@param index: offset into byte array
///@param size: number of bytes to process
///@param val: Value to convert
///@return void
void V2B_MSB(uint8_t *B, int index, int size, uint32_t val)
{
   1828a:	0f 93       	push	r16
   1828c:	1f 93       	push	r17
   1828e:	da 01       	movw	r26, r20
   18290:	11 97       	sbiw	r26, 0x01	; 1
    int i;
    for(i=size-1;i>=0;--i)
   18292:	b7 fd       	sbrc	r27, 7
   18294:	0b c0       	rjmp	.+22     	; 0x182ac <V2B_MSB+0x22>
    {
        B[index+i] = val & 0xff;
   18296:	fd 01       	movw	r30, r26
   18298:	e6 0f       	add	r30, r22
   1829a:	f7 1f       	adc	r31, r23
   1829c:	e8 0f       	add	r30, r24
   1829e:	f9 1f       	adc	r31, r25
   182a0:	00 83       	st	Z, r16
        val >>= 8;
   182a2:	01 2f       	mov	r16, r17
   182a4:	12 2f       	mov	r17, r18
   182a6:	23 2f       	mov	r18, r19
   182a8:	33 27       	eor	r19, r19
   182aa:	f2 cf       	rjmp	.-28     	; 0x18290 <V2B_MSB+0x6>
    }
}
   182ac:	1f 91       	pop	r17
   182ae:	0f 91       	pop	r16
   182b0:	08 95       	ret

000182b2 <V2B_LSB>:
///@param index: offset into byte array
///@param size: number of bytes to process
///@param val: Value to convert
///@return void
void V2B_LSB(uint8_t *B, int index, int size, uint32_t val)
{
   182b2:	0f 93       	push	r16
   182b4:	1f 93       	push	r17
   182b6:	fc 01       	movw	r30, r24
   182b8:	e6 0f       	add	r30, r22
   182ba:	f7 1f       	adc	r31, r23
   182bc:	bf 01       	movw	r22, r30
    int i;
    for(i=0;i<size;++i)
   182be:	cf 01       	movw	r24, r30
   182c0:	86 1b       	sub	r24, r22
   182c2:	97 0b       	sbc	r25, r23
   182c4:	84 17       	cp	r24, r20
   182c6:	95 07       	cpc	r25, r21
   182c8:	34 f4       	brge	.+12     	; 0x182d6 <V2B_LSB+0x24>
    {
        B[index+i] = val & 0xff;
   182ca:	01 93       	st	Z+, r16
        val >>= 8;
   182cc:	01 2f       	mov	r16, r17
   182ce:	12 2f       	mov	r17, r18
   182d0:	23 2f       	mov	r18, r19
   182d2:	33 27       	eor	r19, r19
   182d4:	f4 cf       	rjmp	.-24     	; 0x182be <V2B_LSB+0xc>
    }
}
   182d6:	1f 91       	pop	r17
   182d8:	0f 91       	pop	r16
   182da:	08 95       	ret

000182dc <B2V_MSB>:
///@param B: byte array
///@param index: offset into byte array
///@param size: number of bytes to process
///@return value
uint32_t B2V_MSB(uint8_t *B, int index, int size)
{
   182dc:	cf 92       	push	r12
   182de:	df 92       	push	r13
   182e0:	ef 92       	push	r14
   182e2:	ff 92       	push	r15
   182e4:	fc 01       	movw	r30, r24
   182e6:	e6 0f       	add	r30, r22
   182e8:	f7 1f       	adc	r31, r23
    int i;
    uint32_t val = 0;
   182ea:	60 e0       	ldi	r22, 0x00	; 0
   182ec:	70 e0       	ldi	r23, 0x00	; 0
   182ee:	cb 01       	movw	r24, r22
   182f0:	df 01       	movw	r26, r30

    for(i=0;i<size;++i)
   182f2:	9f 01       	movw	r18, r30
   182f4:	2a 1b       	sub	r18, r26
   182f6:	3b 0b       	sbc	r19, r27
   182f8:	24 17       	cp	r18, r20
   182fa:	35 07       	cpc	r19, r21
   182fc:	4c f4       	brge	.+18     	; 0x18310 <B2V_MSB+0x34>
    {
        val <<= 8;
   182fe:	cc 24       	eor	r12, r12
   18300:	d6 2e       	mov	r13, r22
   18302:	e7 2e       	mov	r14, r23
   18304:	f8 2e       	mov	r15, r24
        val |= (uint8_t) (B[i+index] & 0xff);
   18306:	21 91       	ld	r18, Z+
   18308:	c7 01       	movw	r24, r14
   1830a:	b6 01       	movw	r22, r12
   1830c:	62 2b       	or	r22, r18
   1830e:	f1 cf       	rjmp	.-30     	; 0x182f2 <B2V_MSB+0x16>
    }
    return(val);
}
   18310:	ff 90       	pop	r15
   18312:	ef 90       	pop	r14
   18314:	df 90       	pop	r13
   18316:	cf 90       	pop	r12
   18318:	08 95       	ret

0001831a <B2V_LSB>:
///@param B: byte array
///@param index: offset into byte array
///@param size: number of bytes to process
///@return value
uint32_t B2V_LSB(uint8_t *B, int index, int size)
{
   1831a:	cf 92       	push	r12
   1831c:	df 92       	push	r13
   1831e:	ef 92       	push	r14
   18320:	ff 92       	push	r15
   18322:	9c 01       	movw	r18, r24
   18324:	db 01       	movw	r26, r22
    int i;
    uint32_t val = 0;
   18326:	60 e0       	ldi	r22, 0x00	; 0
   18328:	70 e0       	ldi	r23, 0x00	; 0
   1832a:	cb 01       	movw	r24, r22
   1832c:	41 50       	subi	r20, 0x01	; 1
   1832e:	51 09       	sbc	r21, r1

    for(i=size-1;i>=0;--i)
   18330:	57 fd       	sbrc	r21, 7
   18332:	0e c0       	rjmp	.+28     	; 0x18350 <B2V_LSB+0x36>
    {
        val <<= 8;
   18334:	cc 24       	eor	r12, r12
   18336:	d6 2e       	mov	r13, r22
   18338:	e7 2e       	mov	r14, r23
   1833a:	f8 2e       	mov	r15, r24
        val |= (uint8_t) (B[i+index] & 0xff);
   1833c:	fa 01       	movw	r30, r20
   1833e:	ea 0f       	add	r30, r26
   18340:	fb 1f       	adc	r31, r27
   18342:	e2 0f       	add	r30, r18
   18344:	f3 1f       	adc	r31, r19
   18346:	e0 81       	ld	r30, Z
   18348:	c7 01       	movw	r24, r14
   1834a:	b6 01       	movw	r22, r12
   1834c:	6e 2b       	or	r22, r30
   1834e:	ee cf       	rjmp	.-36     	; 0x1832c <B2V_LSB+0x12>
    }
    return(val);
}
   18350:	ff 90       	pop	r15
   18352:	ef 90       	pop	r14
   18354:	df 90       	pop	r13
   18356:	cf 90       	pop	r12
   18358:	08 95       	ret

0001835a <lif_help>:
            return( (lifdir_t *) &LIF->DIR );

// Skip purged records
    }
    return( NULL );
}
   1835a:	cf 93       	push	r28
   1835c:	df 93       	push	r29
   1835e:	00 d0       	rcall	.+0      	; 0x18360 <lif_help+0x6>
   18360:	1f 92       	push	r1
   18362:	ec 01       	movw	r28, r24
   18364:	8b e3       	ldi	r24, 0x3B	; 59
   18366:	97 e4       	ldi	r25, 0x47	; 71
   18368:	a0 e0       	ldi	r26, 0x00	; 0
   1836a:	ed b7       	in	r30, 0x3d	; 61
   1836c:	fe b7       	in	r31, 0x3e	; 62
   1836e:	81 83       	std	Z+1, r24	; 0x01
   18370:	92 83       	std	Z+2, r25	; 0x02
   18372:	a3 83       	std	Z+3, r26	; 0x03
   18374:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
   18378:	cd 2b       	or	r28, r29
   1837a:	51 f0       	breq	.+20     	; 0x18390 <lif_help+0x36>
   1837c:	8b e5       	ldi	r24, 0x5B	; 91
   1837e:	95 e4       	ldi	r25, 0x45	; 69
   18380:	a0 e0       	ldi	r26, 0x00	; 0
   18382:	ed b7       	in	r30, 0x3d	; 61
   18384:	fe b7       	in	r31, 0x3e	; 62
   18386:	81 83       	std	Z+1, r24	; 0x01
   18388:	92 83       	std	Z+2, r25	; 0x02
   1838a:	a3 83       	std	Z+3, r26	; 0x03
   1838c:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
   18390:	cd b7       	in	r28, 0x3d	; 61
   18392:	de b7       	in	r29, 0x3e	; 62
   18394:	23 96       	adiw	r28, 0x03	; 3
   18396:	e2 e0       	ldi	r30, 0x02	; 2
   18398:	0c 94 d0 e8 	jmp	0x1d1a0	; 0x1d1a0 <__epilogue_restores__+0x20>

0001839c <lif_calloc>:
   1839c:	cf 92       	push	r12
   1839e:	df 92       	push	r13
   183a0:	ef 92       	push	r14
   183a2:	ff 92       	push	r15
   183a4:	cf 93       	push	r28
   183a6:	df 93       	push	r29
   183a8:	ad b7       	in	r26, 0x3d	; 61
   183aa:	be b7       	in	r27, 0x3e	; 62
   183ac:	17 97       	sbiw	r26, 0x07	; 7
   183ae:	0f b6       	in	r0, 0x3f	; 63
   183b0:	f8 94       	cli
   183b2:	be bf       	out	0x3e, r27	; 62
   183b4:	0f be       	out	0x3f, r0	; 63
   183b6:	ad bf       	out	0x3d, r26	; 61
   183b8:	6b 01       	movw	r12, r22
   183ba:	7c 01       	movw	r14, r24
   183bc:	61 e0       	ldi	r22, 0x01	; 1
   183be:	70 e0       	ldi	r23, 0x00	; 0
   183c0:	c6 01       	movw	r24, r12
   183c2:	0e 94 28 28 	call	0x5050	; 0x5050 <safecalloc>
   183c6:	ec 01       	movw	r28, r24
   183c8:	89 2b       	or	r24, r25
   183ca:	71 f4       	brne	.+28     	; 0x183e8 <lif_calloc+0x4c>
   183cc:	ed b7       	in	r30, 0x3d	; 61
   183ce:	fe b7       	in	r31, 0x3e	; 62
   183d0:	c4 82       	std	Z+4, r12	; 0x04
   183d2:	d5 82       	std	Z+5, r13	; 0x05
   183d4:	e6 82       	std	Z+6, r14	; 0x06
   183d6:	f7 82       	std	Z+7, r15	; 0x07
   183d8:	84 ef       	ldi	r24, 0xF4	; 244
   183da:	94 e4       	ldi	r25, 0x44	; 68
   183dc:	a0 e0       	ldi	r26, 0x00	; 0
   183de:	81 83       	std	Z+1, r24	; 0x01
   183e0:	92 83       	std	Z+2, r25	; 0x02
   183e2:	a3 83       	std	Z+3, r26	; 0x03
   183e4:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
   183e8:	ce 01       	movw	r24, r28
   183ea:	ad b7       	in	r26, 0x3d	; 61
   183ec:	be b7       	in	r27, 0x3e	; 62
   183ee:	17 96       	adiw	r26, 0x07	; 7
   183f0:	0f b6       	in	r0, 0x3f	; 63
   183f2:	f8 94       	cli
   183f4:	be bf       	out	0x3e, r27	; 62
   183f6:	0f be       	out	0x3f, r0	; 63
   183f8:	ad bf       	out	0x3d, r26	; 61
   183fa:	df 91       	pop	r29
   183fc:	cf 91       	pop	r28
   183fe:	ff 90       	pop	r15
   18400:	ef 90       	pop	r14
   18402:	df 90       	pop	r13
   18404:	cf 90       	pop	r12
   18406:	08 95       	ret

00018408 <lif_free>:
   18408:	00 d0       	rcall	.+0      	; 0x1840a <lif_free+0x2>
   1840a:	1f 92       	push	r1
   1840c:	00 97       	sbiw	r24, 0x00	; 0
   1840e:	59 f4       	brne	.+22     	; 0x18426 <lif_free+0x1e>
   18410:	8c ed       	ldi	r24, 0xDC	; 220
   18412:	94 e4       	ldi	r25, 0x44	; 68
   18414:	a0 e0       	ldi	r26, 0x00	; 0
   18416:	ed b7       	in	r30, 0x3d	; 61
   18418:	fe b7       	in	r31, 0x3e	; 62
   1841a:	81 83       	std	Z+1, r24	; 0x01
   1841c:	92 83       	std	Z+2, r25	; 0x02
   1841e:	a3 83       	std	Z+3, r26	; 0x03
   18420:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
   18424:	02 c0       	rjmp	.+4      	; 0x1842a <lif_free+0x22>
   18426:	0e 94 74 28 	call	0x50e8	; 0x50e8 <safefree>
   1842a:	0f 90       	pop	r0
   1842c:	0f 90       	pop	r0
   1842e:	0f 90       	pop	r0
   18430:	08 95       	ret

00018432 <lif_stralloc>:
   18432:	0f 93       	push	r16
   18434:	1f 93       	push	r17
   18436:	cf 93       	push	r28
   18438:	df 93       	push	r29
   1843a:	ec 01       	movw	r28, r24
   1843c:	fc 01       	movw	r30, r24
   1843e:	01 90       	ld	r0, Z+
   18440:	00 20       	and	r0, r0
   18442:	e9 f7       	brne	.-6      	; 0x1843e <lif_stralloc+0xc>
   18444:	bf 01       	movw	r22, r30
   18446:	68 1b       	sub	r22, r24
   18448:	79 0b       	sbc	r23, r25
   1844a:	6d 5f       	subi	r22, 0xFD	; 253
   1844c:	7f 4f       	sbci	r23, 0xFF	; 255
   1844e:	07 2e       	mov	r0, r23
   18450:	00 0c       	add	r0, r0
   18452:	88 0b       	sbc	r24, r24
   18454:	99 0b       	sbc	r25, r25
   18456:	a2 df       	rcall	.-188    	; 0x1839c <lif_calloc>
   18458:	8c 01       	movw	r16, r24
   1845a:	00 97       	sbiw	r24, 0x00	; 0
   1845c:	19 f0       	breq	.+6      	; 0x18464 <lif_stralloc+0x32>
   1845e:	be 01       	movw	r22, r28
   18460:	0e 94 3d 32 	call	0x647a	; 0x647a <strcpy>
   18464:	c8 01       	movw	r24, r16
   18466:	df 91       	pop	r29
   18468:	cf 91       	pop	r28
   1846a:	1f 91       	pop	r17
   1846c:	0f 91       	pop	r16
   1846e:	08 95       	ret

00018470 <lif_open>:
   18470:	ef 92       	push	r14
   18472:	ff 92       	push	r15
   18474:	0f 93       	push	r16
   18476:	1f 93       	push	r17
   18478:	cf 93       	push	r28
   1847a:	df 93       	push	r29
   1847c:	ad b7       	in	r26, 0x3d	; 61
   1847e:	be b7       	in	r27, 0x3e	; 62
   18480:	17 97       	sbiw	r26, 0x07	; 7
   18482:	0f b6       	in	r0, 0x3f	; 63
   18484:	f8 94       	cli
   18486:	be bf       	out	0x3e, r27	; 62
   18488:	0f be       	out	0x3f, r0	; 63
   1848a:	ad bf       	out	0x3d, r26	; 61
   1848c:	8c 01       	movw	r16, r24
   1848e:	7b 01       	movw	r14, r22
   18490:	0e 94 54 7f 	call	0xfea8	; 0xfea8 <fopen>
   18494:	ec 01       	movw	r28, r24
   18496:	89 2b       	or	r24, r25
   18498:	71 f4       	brne	.+28     	; 0x184b6 <lif_open+0x46>
   1849a:	ed b7       	in	r30, 0x3d	; 61
   1849c:	fe b7       	in	r31, 0x3e	; 62
   1849e:	f7 82       	std	Z+7, r15	; 0x07
   184a0:	e6 82       	std	Z+6, r14	; 0x06
   184a2:	15 83       	std	Z+5, r17	; 0x05
   184a4:	04 83       	std	Z+4, r16	; 0x04
   184a6:	87 eb       	ldi	r24, 0xB7	; 183
   184a8:	94 e4       	ldi	r25, 0x44	; 68
   184aa:	a0 e0       	ldi	r26, 0x00	; 0
   184ac:	81 83       	std	Z+1, r24	; 0x01
   184ae:	92 83       	std	Z+2, r25	; 0x02
   184b0:	a3 83       	std	Z+3, r26	; 0x03
   184b2:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
   184b6:	ce 01       	movw	r24, r28
   184b8:	cd b7       	in	r28, 0x3d	; 61
   184ba:	de b7       	in	r29, 0x3e	; 62
   184bc:	27 96       	adiw	r28, 0x07	; 7
   184be:	e6 e0       	ldi	r30, 0x06	; 6
   184c0:	0c 94 cc e8 	jmp	0x1d198	; 0x1d198 <__epilogue_restores__+0x18>

000184c4 <lif_stat>:
   184c4:	0f 93       	push	r16
   184c6:	1f 93       	push	r17
   184c8:	cf 93       	push	r28
   184ca:	df 93       	push	r29
   184cc:	00 d0       	rcall	.+0      	; 0x184ce <lif_stat+0xa>
   184ce:	00 d0       	rcall	.+0      	; 0x184d0 <lif_stat+0xc>
   184d0:	1f 92       	push	r1
   184d2:	8c 01       	movw	r16, r24
   184d4:	d6 2f       	mov	r29, r22
   184d6:	c7 2f       	mov	r28, r23
   184d8:	0e 94 59 7a 	call	0xf4b2	; 0xf4b2 <stat>
   184dc:	97 ff       	sbrs	r25, 7
   184de:	0f c0       	rjmp	.+30     	; 0x184fe <lif_stat+0x3a>
   184e0:	ed b7       	in	r30, 0x3d	; 61
   184e2:	fe b7       	in	r31, 0x3e	; 62
   184e4:	15 83       	std	Z+5, r17	; 0x05
   184e6:	04 83       	std	Z+4, r16	; 0x04
   184e8:	8e e9       	ldi	r24, 0x9E	; 158
   184ea:	94 e4       	ldi	r25, 0x44	; 68
   184ec:	a0 e0       	ldi	r26, 0x00	; 0
   184ee:	81 83       	std	Z+1, r24	; 0x01
   184f0:	92 83       	std	Z+2, r25	; 0x02
   184f2:	a3 83       	std	Z+3, r26	; 0x03
   184f4:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
   184f8:	80 e0       	ldi	r24, 0x00	; 0
   184fa:	90 e0       	ldi	r25, 0x00	; 0
   184fc:	02 c0       	rjmp	.+4      	; 0x18502 <lif_stat+0x3e>
   184fe:	8d 2f       	mov	r24, r29
   18500:	9c 2f       	mov	r25, r28
   18502:	cd b7       	in	r28, 0x3d	; 61
   18504:	de b7       	in	r29, 0x3e	; 62
   18506:	25 96       	adiw	r28, 0x05	; 5
   18508:	e4 e0       	ldi	r30, 0x04	; 4
   1850a:	0c 94 ce e8 	jmp	0x1d19c	; 0x1d19c <__epilogue_restores__+0x1c>

0001850e <lif_seek_msg>:
   1850e:	a9 e0       	ldi	r26, 0x09	; 9
   18510:	b0 e0       	ldi	r27, 0x00	; 0
   18512:	ed e8       	ldi	r30, 0x8D	; 141
   18514:	f2 ec       	ldi	r31, 0xC2	; 194
   18516:	0c 94 ae e8 	jmp	0x1d15c	; 0x1d15c <__prologue_saves__+0x14>
   1851a:	ec 01       	movw	r28, r24
   1851c:	6a 01       	movw	r12, r20
   1851e:	7b 01       	movw	r14, r22
   18520:	89 01       	movw	r16, r18
   18522:	0e 94 93 7b 	call	0xf726	; 0xf726 <ftell>
   18526:	6c 15       	cp	r22, r12
   18528:	7d 05       	cpc	r23, r13
   1852a:	8e 05       	cpc	r24, r14
   1852c:	9f 05       	cpc	r25, r15
   1852e:	19 f4       	brne	.+6      	; 0x18536 <lif_seek_msg+0x28>
   18530:	81 e0       	ldi	r24, 0x01	; 1
   18532:	90 e0       	ldi	r25, 0x00	; 0
   18534:	1b c0       	rjmp	.+54     	; 0x1856c <lif_seek_msg+0x5e>
   18536:	20 e0       	ldi	r18, 0x00	; 0
   18538:	30 e0       	ldi	r19, 0x00	; 0
   1853a:	b7 01       	movw	r22, r14
   1853c:	a6 01       	movw	r20, r12
   1853e:	ce 01       	movw	r24, r28
   18540:	0e 94 16 7c 	call	0xf82c	; 0xf82c <fseek>
   18544:	97 ff       	sbrs	r25, 7
   18546:	f4 cf       	rjmp	.-24     	; 0x18530 <lif_seek_msg+0x22>
   18548:	ed b7       	in	r30, 0x3d	; 61
   1854a:	fe b7       	in	r31, 0x3e	; 62
   1854c:	c6 82       	std	Z+6, r12	; 0x06
   1854e:	d7 82       	std	Z+7, r13	; 0x07
   18550:	e0 86       	std	Z+8, r14	; 0x08
   18552:	f1 86       	std	Z+9, r15	; 0x09
   18554:	15 83       	std	Z+5, r17	; 0x05
   18556:	04 83       	std	Z+4, r16	; 0x04
   18558:	8d e7       	ldi	r24, 0x7D	; 125
   1855a:	94 e4       	ldi	r25, 0x44	; 68
   1855c:	a0 e0       	ldi	r26, 0x00	; 0
   1855e:	81 83       	std	Z+1, r24	; 0x01
   18560:	92 83       	std	Z+2, r25	; 0x02
   18562:	a3 83       	std	Z+3, r26	; 0x03
   18564:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
   18568:	80 e0       	ldi	r24, 0x00	; 0
   1856a:	90 e0       	ldi	r25, 0x00	; 0
   1856c:	cd b7       	in	r28, 0x3d	; 61
   1856e:	de b7       	in	r29, 0x3e	; 62
   18570:	29 96       	adiw	r28, 0x09	; 9
   18572:	e8 e0       	ldi	r30, 0x08	; 8
   18574:	0c 94 ca e8 	jmp	0x1d194	; 0x1d194 <__epilogue_restores__+0x14>

00018578 <lif_read>:
   18578:	af e0       	ldi	r26, 0x0F	; 15
   1857a:	b0 e0       	ldi	r27, 0x00	; 0
   1857c:	e2 ec       	ldi	r30, 0xC2	; 194
   1857e:	f2 ec       	ldi	r31, 0xC2	; 194
   18580:	0c 94 aa e8 	jmp	0x1d154	; 0x1d154 <__prologue_saves__+0xc>
   18584:	ec 01       	movw	r28, r24
   18586:	7b 01       	movw	r14, r22
   18588:	49 01       	movw	r8, r18
   1858a:	5a 01       	movw	r10, r20
   1858c:	28 81       	ld	r18, Y
   1858e:	39 81       	ldd	r19, Y+1	; 0x01
   18590:	b5 01       	movw	r22, r10
   18592:	a4 01       	movw	r20, r8
   18594:	8a 81       	ldd	r24, Y+2	; 0x02
   18596:	9b 81       	ldd	r25, Y+3	; 0x03
   18598:	ba df       	rcall	.-140    	; 0x1850e <lif_seek_msg>
   1859a:	89 2b       	or	r24, r25
   1859c:	a1 f1       	breq	.+104    	; 0x18606 <lif_read+0x8e>
   1859e:	2a 81       	ldd	r18, Y+2	; 0x02
   185a0:	3b 81       	ldd	r19, Y+3	; 0x03
   185a2:	a8 01       	movw	r20, r16
   185a4:	61 e0       	ldi	r22, 0x01	; 1
   185a6:	70 e0       	ldi	r23, 0x00	; 0
   185a8:	c7 01       	movw	r24, r14
   185aa:	0e 94 aa 7c 	call	0xf954	; 0xf954 <fread>
   185ae:	6c 01       	movw	r12, r24
   185b0:	e1 2c       	mov	r14, r1
   185b2:	f1 2c       	mov	r15, r1
   185b4:	b8 01       	movw	r22, r16
   185b6:	01 2e       	mov	r0, r17
   185b8:	00 0c       	add	r0, r0
   185ba:	88 0b       	sbc	r24, r24
   185bc:	99 0b       	sbc	r25, r25
   185be:	c6 16       	cp	r12, r22
   185c0:	d7 06       	cpc	r13, r23
   185c2:	e8 06       	cpc	r14, r24
   185c4:	f9 06       	cpc	r15, r25
   185c6:	29 f1       	breq	.+74     	; 0x18612 <lif_read+0x9a>
   185c8:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   185cc:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   185d0:	92 ff       	sbrs	r25, 2
   185d2:	1d c0       	rjmp	.+58     	; 0x1860e <lif_read+0x96>
   185d4:	ed b7       	in	r30, 0x3d	; 61
   185d6:	fe b7       	in	r31, 0x3e	; 62
   185d8:	17 87       	std	Z+15, r17	; 0x0f
   185da:	06 87       	std	Z+14, r16	; 0x0e
   185dc:	c2 86       	std	Z+10, r12	; 0x0a
   185de:	d3 86       	std	Z+11, r13	; 0x0b
   185e0:	e4 86       	std	Z+12, r14	; 0x0c
   185e2:	f5 86       	std	Z+13, r15	; 0x0d
   185e4:	86 82       	std	Z+6, r8	; 0x06
   185e6:	97 82       	std	Z+7, r9	; 0x07
   185e8:	a0 86       	std	Z+8, r10	; 0x08
   185ea:	b1 86       	std	Z+9, r11	; 0x09
   185ec:	88 81       	ld	r24, Y
   185ee:	99 81       	ldd	r25, Y+1	; 0x01
   185f0:	95 83       	std	Z+5, r25	; 0x05
   185f2:	84 83       	std	Z+4, r24	; 0x04
   185f4:	81 e4       	ldi	r24, 0x41	; 65
   185f6:	94 e4       	ldi	r25, 0x44	; 68
   185f8:	a0 e0       	ldi	r26, 0x00	; 0
   185fa:	81 83       	std	Z+1, r24	; 0x01
   185fc:	92 83       	std	Z+2, r25	; 0x02
   185fe:	a3 83       	std	Z+3, r26	; 0x03
   18600:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
   18604:	04 c0       	rjmp	.+8      	; 0x1860e <lif_read+0x96>
   18606:	60 e0       	ldi	r22, 0x00	; 0
   18608:	70 e0       	ldi	r23, 0x00	; 0
   1860a:	cb 01       	movw	r24, r22
   1860c:	02 c0       	rjmp	.+4      	; 0x18612 <lif_read+0x9a>
   1860e:	c7 01       	movw	r24, r14
   18610:	b6 01       	movw	r22, r12
   18612:	cd b7       	in	r28, 0x3d	; 61
   18614:	de b7       	in	r29, 0x3e	; 62
   18616:	2f 96       	adiw	r28, 0x0f	; 15
   18618:	ec e0       	ldi	r30, 0x0C	; 12
   1861a:	0c 94 c6 e8 	jmp	0x1d18c	; 0x1d18c <__epilogue_restores__+0xc>

0001861e <lif_write>:
   1861e:	8f 92       	push	r8
   18620:	9f 92       	push	r9
   18622:	af 92       	push	r10
   18624:	bf 92       	push	r11
   18626:	ef 92       	push	r14
   18628:	ff 92       	push	r15
   1862a:	0f 93       	push	r16
   1862c:	1f 93       	push	r17
   1862e:	cf 93       	push	r28
   18630:	df 93       	push	r29
   18632:	ad b7       	in	r26, 0x3d	; 61
   18634:	be b7       	in	r27, 0x3e	; 62
   18636:	1d 97       	sbiw	r26, 0x0d	; 13
   18638:	0f b6       	in	r0, 0x3f	; 63
   1863a:	f8 94       	cli
   1863c:	be bf       	out	0x3e, r27	; 62
   1863e:	0f be       	out	0x3f, r0	; 63
   18640:	ad bf       	out	0x3d, r26	; 61
   18642:	7c 01       	movw	r14, r24
   18644:	eb 01       	movw	r28, r22
   18646:	49 01       	movw	r8, r18
   18648:	5a 01       	movw	r10, r20
   1864a:	fc 01       	movw	r30, r24
   1864c:	20 81       	ld	r18, Z
   1864e:	31 81       	ldd	r19, Z+1	; 0x01
   18650:	b5 01       	movw	r22, r10
   18652:	a4 01       	movw	r20, r8
   18654:	82 81       	ldd	r24, Z+2	; 0x02
   18656:	93 81       	ldd	r25, Z+3	; 0x03
   18658:	5a df       	rcall	.-332    	; 0x1850e <lif_seek_msg>
   1865a:	00 97       	sbiw	r24, 0x00	; 0
   1865c:	81 f1       	breq	.+96     	; 0x186be <lif_write+0xa0>
   1865e:	f7 01       	movw	r30, r14
   18660:	22 81       	ldd	r18, Z+2	; 0x02
   18662:	33 81       	ldd	r19, Z+3	; 0x03
   18664:	a8 01       	movw	r20, r16
   18666:	61 e0       	ldi	r22, 0x01	; 1
   18668:	70 e0       	ldi	r23, 0x00	; 0
   1866a:	ce 01       	movw	r24, r28
   1866c:	0e 94 7c 7d 	call	0xfaf8	; 0xfaf8 <fwrite>
   18670:	ec 01       	movw	r28, r24
   18672:	08 17       	cp	r16, r24
   18674:	19 07       	cpc	r17, r25
   18676:	01 f1       	breq	.+64     	; 0x186b8 <lif_write+0x9a>
   18678:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1867c:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   18680:	92 ff       	sbrs	r25, 2
   18682:	1c c0       	rjmp	.+56     	; 0x186bc <lif_write+0x9e>
   18684:	ed b7       	in	r30, 0x3d	; 61
   18686:	fe b7       	in	r31, 0x3e	; 62
   18688:	15 87       	std	Z+13, r17	; 0x0d
   1868a:	04 87       	std	Z+12, r16	; 0x0c
   1868c:	d3 87       	std	Z+11, r29	; 0x0b
   1868e:	c2 87       	std	Z+10, r28	; 0x0a
   18690:	86 82       	std	Z+6, r8	; 0x06
   18692:	97 82       	std	Z+7, r9	; 0x07
   18694:	a0 86       	std	Z+8, r10	; 0x08
   18696:	b1 86       	std	Z+9, r11	; 0x09
   18698:	f7 01       	movw	r30, r14
   1869a:	80 81       	ld	r24, Z
   1869c:	91 81       	ldd	r25, Z+1	; 0x01
   1869e:	ed b7       	in	r30, 0x3d	; 61
   186a0:	fe b7       	in	r31, 0x3e	; 62
   186a2:	95 83       	std	Z+5, r25	; 0x05
   186a4:	84 83       	std	Z+4, r24	; 0x04
   186a6:	84 e0       	ldi	r24, 0x04	; 4
   186a8:	94 e4       	ldi	r25, 0x44	; 68
   186aa:	a0 e0       	ldi	r26, 0x00	; 0
   186ac:	81 83       	std	Z+1, r24	; 0x01
   186ae:	92 83       	std	Z+2, r25	; 0x02
   186b0:	a3 83       	std	Z+3, r26	; 0x03
   186b2:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
   186b6:	02 c0       	rjmp	.+4      	; 0x186bc <lif_write+0x9e>
   186b8:	c8 01       	movw	r24, r16
   186ba:	01 c0       	rjmp	.+2      	; 0x186be <lif_write+0xa0>
   186bc:	ce 01       	movw	r24, r28
   186be:	ad b7       	in	r26, 0x3d	; 61
   186c0:	be b7       	in	r27, 0x3e	; 62
   186c2:	1d 96       	adiw	r26, 0x0d	; 13
   186c4:	0f b6       	in	r0, 0x3f	; 63
   186c6:	f8 94       	cli
   186c8:	be bf       	out	0x3e, r27	; 62
   186ca:	0f be       	out	0x3f, r0	; 63
   186cc:	ad bf       	out	0x3d, r26	; 61
   186ce:	df 91       	pop	r29
   186d0:	cf 91       	pop	r28
   186d2:	1f 91       	pop	r17
   186d4:	0f 91       	pop	r16
   186d6:	ff 90       	pop	r15
   186d8:	ef 90       	pop	r14
   186da:	bf 90       	pop	r11
   186dc:	af 90       	pop	r10
   186de:	9f 90       	pop	r9
   186e0:	8f 90       	pop	r8
   186e2:	08 95       	ret

000186e4 <lif_chars>:
   186e4:	9c 01       	movw	r18, r24
   186e6:	20 52       	subi	r18, 0x20	; 32
   186e8:	31 09       	sbc	r19, r1
   186ea:	20 36       	cpi	r18, 0x60	; 96
   186ec:	31 05       	cpc	r19, r1
   186ee:	88 f4       	brcc	.+34     	; 0x18712 <lif_chars+0x2e>
   186f0:	2e 50       	subi	r18, 0x0E	; 14
   186f2:	31 09       	sbc	r19, r1
   186f4:	22 30       	cpi	r18, 0x02	; 2
   186f6:	31 05       	cpc	r19, r1
   186f8:	60 f0       	brcs	.+24     	; 0x18712 <lif_chars+0x2e>
   186fa:	8a 33       	cpi	r24, 0x3A	; 58
   186fc:	91 05       	cpc	r25, r1
   186fe:	49 f0       	breq	.+18     	; 0x18712 <lif_chars+0x2e>
   18700:	82 32       	cpi	r24, 0x22	; 34
   18702:	91 05       	cpc	r25, r1
   18704:	31 f0       	breq	.+12     	; 0x18712 <lif_chars+0x2e>
   18706:	87 32       	cpi	r24, 0x27	; 39
   18708:	91 05       	cpc	r25, r1
   1870a:	19 f0       	breq	.+6      	; 0x18712 <lif_chars+0x2e>
   1870c:	8c 35       	cpi	r24, 0x5C	; 92
   1870e:	91 05       	cpc	r25, r1
   18710:	11 f4       	brne	.+4      	; 0x18716 <lif_chars+0x32>
   18712:	80 e0       	ldi	r24, 0x00	; 0
   18714:	90 e0       	ldi	r25, 0x00	; 0
   18716:	08 95       	ret

00018718 <lif_B2S>:
   18718:	a0 e0       	ldi	r26, 0x00	; 0
   1871a:	b0 e0       	ldi	r27, 0x00	; 0
   1871c:	e2 e9       	ldi	r30, 0x92	; 146
   1871e:	f3 ec       	ldi	r31, 0xC3	; 195
   18720:	0c 94 aa e8 	jmp	0x1d154	; 0x1d154 <__prologue_saves__+0xc>
   18724:	5c 01       	movw	r10, r24
   18726:	6b 01       	movw	r12, r22
   18728:	ea 01       	movw	r28, r20
   1872a:	4c 01       	movw	r8, r24
   1872c:	ee 24       	eor	r14, r14
   1872e:	e3 94       	inc	r14
   18730:	f1 2c       	mov	r15, r1
   18732:	00 e0       	ldi	r16, 0x00	; 0
   18734:	10 e0       	ldi	r17, 0x00	; 0
   18736:	0c 17       	cp	r16, r28
   18738:	1d 07       	cpc	r17, r29
   1873a:	6c f4       	brge	.+26     	; 0x18756 <lif_B2S+0x3e>
   1873c:	f4 01       	movw	r30, r8
   1873e:	81 91       	ld	r24, Z+
   18740:	4f 01       	movw	r8, r30
   18742:	b8 01       	movw	r22, r16
   18744:	90 e0       	ldi	r25, 0x00	; 0
   18746:	ce df       	rcall	.-100    	; 0x186e4 <lif_chars>
   18748:	89 2b       	or	r24, r25
   1874a:	11 f4       	brne	.+4      	; 0x18750 <lif_B2S+0x38>
   1874c:	e1 2c       	mov	r14, r1
   1874e:	f1 2c       	mov	r15, r1
   18750:	0f 5f       	subi	r16, 0xFF	; 255
   18752:	1f 4f       	sbci	r17, 0xFF	; 255
   18754:	f0 cf       	rjmp	.-32     	; 0x18736 <lif_B2S+0x1e>
   18756:	d6 01       	movw	r26, r12
   18758:	f5 01       	movw	r30, r10
   1875a:	cf 01       	movw	r24, r30
   1875c:	8a 19       	sub	r24, r10
   1875e:	9b 09       	sbc	r25, r11
   18760:	8c 17       	cp	r24, r28
   18762:	9d 07       	cpc	r25, r29
   18764:	1c f4       	brge	.+6      	; 0x1876c <lif_B2S+0x54>
   18766:	81 91       	ld	r24, Z+
   18768:	8d 93       	st	X+, r24
   1876a:	f7 cf       	rjmp	.-18     	; 0x1875a <lif_B2S+0x42>
   1876c:	d7 ff       	sbrs	r29, 7
   1876e:	02 c0       	rjmp	.+4      	; 0x18774 <lif_B2S+0x5c>
   18770:	c0 e0       	ldi	r28, 0x00	; 0
   18772:	d0 e0       	ldi	r29, 0x00	; 0
   18774:	cc 0d       	add	r28, r12
   18776:	dd 1d       	adc	r29, r13
   18778:	18 82       	st	Y, r1
   1877a:	c6 01       	movw	r24, r12
   1877c:	0e 94 1b 33 	call	0x6636	; 0x6636 <trim_tail>
   18780:	c7 01       	movw	r24, r14
   18782:	cd b7       	in	r28, 0x3d	; 61
   18784:	de b7       	in	r29, 0x3e	; 62
   18786:	ec e0       	ldi	r30, 0x0C	; 12
   18788:	0c 94 c6 e8 	jmp	0x1d18c	; 0x1d18c <__epilogue_restores__+0xc>

0001878c <lif_checkname>:
   1878c:	ef 92       	push	r14
   1878e:	ff 92       	push	r15
   18790:	0f 93       	push	r16
   18792:	1f 93       	push	r17
   18794:	cf 93       	push	r28
   18796:	df 93       	push	r29
   18798:	7c 01       	movw	r14, r24
   1879a:	ec 01       	movw	r28, r24
   1879c:	01 e0       	ldi	r16, 0x01	; 1
   1879e:	10 e0       	ldi	r17, 0x00	; 0
   187a0:	be 01       	movw	r22, r28
   187a2:	6e 19       	sub	r22, r14
   187a4:	7f 09       	sbc	r23, r15
   187a6:	89 91       	ld	r24, Y+
   187a8:	88 23       	and	r24, r24
   187aa:	39 f0       	breq	.+14     	; 0x187ba <lif_checkname+0x2e>
   187ac:	90 e0       	ldi	r25, 0x00	; 0
   187ae:	9a df       	rcall	.-204    	; 0x186e4 <lif_chars>
   187b0:	89 2b       	or	r24, r25
   187b2:	b1 f7       	brne	.-20     	; 0x187a0 <lif_checkname+0x14>
   187b4:	00 e0       	ldi	r16, 0x00	; 0
   187b6:	10 e0       	ldi	r17, 0x00	; 0
   187b8:	f3 cf       	rjmp	.-26     	; 0x187a0 <lif_checkname+0x14>
   187ba:	c8 01       	movw	r24, r16
   187bc:	cd b7       	in	r28, 0x3d	; 61
   187be:	de b7       	in	r29, 0x3e	; 62
   187c0:	e6 e0       	ldi	r30, 0x06	; 6
   187c2:	0c 94 cc e8 	jmp	0x1d198	; 0x1d198 <__epilogue_restores__+0x18>

000187c6 <lif_S2B>:
   187c6:	fb 01       	movw	r30, r22
   187c8:	dc 01       	movw	r26, r24
   187ca:	20 e0       	ldi	r18, 0x00	; 0
   187cc:	30 e0       	ldi	r19, 0x00	; 0
   187ce:	61 91       	ld	r22, Z+
   187d0:	61 11       	cpse	r22, r1
   187d2:	05 c0       	rjmp	.+10     	; 0x187de <lif_S2B+0x18>
   187d4:	fc 01       	movw	r30, r24
   187d6:	e2 0f       	add	r30, r18
   187d8:	f3 1f       	adc	r31, r19
   187da:	60 e2       	ldi	r22, 0x20	; 32
   187dc:	08 c0       	rjmp	.+16     	; 0x187ee <lif_S2B+0x28>
   187de:	24 17       	cp	r18, r20
   187e0:	35 07       	cpc	r19, r21
   187e2:	24 f4       	brge	.+8      	; 0x187ec <lif_S2B+0x26>
   187e4:	6d 93       	st	X+, r22
   187e6:	2f 5f       	subi	r18, 0xFF	; 255
   187e8:	3f 4f       	sbci	r19, 0xFF	; 255
   187ea:	f1 cf       	rjmp	.-30     	; 0x187ce <lif_S2B+0x8>
   187ec:	08 95       	ret
   187ee:	9f 01       	movw	r18, r30
   187f0:	28 1b       	sub	r18, r24
   187f2:	39 0b       	sbc	r19, r25
   187f4:	24 17       	cp	r18, r20
   187f6:	35 07       	cpc	r19, r21
   187f8:	14 f4       	brge	.+4      	; 0x187fe <lif_S2B+0x38>
   187fa:	61 93       	st	Z+, r22
   187fc:	f8 cf       	rjmp	.-16     	; 0x187ee <lif_S2B+0x28>
   187fe:	08 95       	ret

00018800 <lif_fixname>:
   18800:	a0 e0       	ldi	r26, 0x00	; 0
   18802:	b0 e0       	ldi	r27, 0x00	; 0
   18804:	e6 e0       	ldi	r30, 0x06	; 6
   18806:	f4 ec       	ldi	r31, 0xC4	; 196
   18808:	0c 94 ad e8 	jmp	0x1d15a	; 0x1d15a <__prologue_saves__+0x12>
   1880c:	8c 01       	movw	r16, r24
   1880e:	cb 01       	movw	r24, r22
   18810:	7a 01       	movw	r14, r20
   18812:	0e 94 25 78 	call	0xf04a	; 0xf04a <basename>
   18816:	6c 01       	movw	r12, r24
   18818:	e8 01       	movw	r28, r16
   1881a:	80 e2       	ldi	r24, 0x20	; 32
   1881c:	b8 2e       	mov	r11, r24
   1881e:	be 01       	movw	r22, r28
   18820:	60 1b       	sub	r22, r16
   18822:	71 0b       	sbc	r23, r17
   18824:	f6 01       	movw	r30, r12
   18826:	81 91       	ld	r24, Z+
   18828:	6f 01       	movw	r12, r30
   1882a:	81 11       	cpse	r24, r1
   1882c:	02 c0       	rjmp	.+4      	; 0x18832 <lif_fixname+0x32>
   1882e:	20 e2       	ldi	r18, 0x20	; 32
   18830:	0e c0       	rjmp	.+28     	; 0x1884e <lif_fixname+0x4e>
   18832:	1e 14       	cp	r1, r14
   18834:	1f 04       	cpc	r1, r15
   18836:	dc f7       	brge	.-10     	; 0x1882e <lif_fixname+0x2e>
   18838:	8e 32       	cpi	r24, 0x2E	; 46
   1883a:	c9 f3       	breq	.-14     	; 0x1882e <lif_fixname+0x2e>
   1883c:	90 e0       	ldi	r25, 0x00	; 0
   1883e:	52 df       	rcall	.-348    	; 0x186e4 <lif_chars>
   18840:	88 23       	and	r24, r24
   18842:	11 f0       	breq	.+4      	; 0x18848 <lif_fixname+0x48>
   18844:	88 83       	st	Y, r24
   18846:	01 c0       	rjmp	.+2      	; 0x1884a <lif_fixname+0x4a>
   18848:	b8 82       	st	Y, r11
   1884a:	21 96       	adiw	r28, 0x01	; 1
   1884c:	e8 cf       	rjmp	.-48     	; 0x1881e <lif_fixname+0x1e>
   1884e:	ce 01       	movw	r24, r28
   18850:	80 1b       	sub	r24, r16
   18852:	91 0b       	sbc	r25, r17
   18854:	8e 15       	cp	r24, r14
   18856:	9f 05       	cpc	r25, r15
   18858:	14 f4       	brge	.+4      	; 0x1885e <lif_fixname+0x5e>
   1885a:	29 93       	st	Y+, r18
   1885c:	f8 cf       	rjmp	.-16     	; 0x1884e <lif_fixname+0x4e>
   1885e:	18 82       	st	Y, r1
   18860:	f8 01       	movw	r30, r16
   18862:	01 90       	ld	r0, Z+
   18864:	00 20       	and	r0, r0
   18866:	e9 f7       	brne	.-6      	; 0x18862 <lif_fixname+0x62>
   18868:	cf 01       	movw	r24, r30
   1886a:	01 97       	sbiw	r24, 0x01	; 1
   1886c:	80 1b       	sub	r24, r16
   1886e:	91 0b       	sbc	r25, r17
   18870:	cd b7       	in	r28, 0x3d	; 61
   18872:	de b7       	in	r29, 0x3e	; 62
   18874:	e9 e0       	ldi	r30, 0x09	; 9
   18876:	0c 94 c9 e8 	jmp	0x1d192	; 0x1d192 <__epilogue_restores__+0x12>

0001887a <lif_vol2str>:
   1887a:	ef 92       	push	r14
   1887c:	ff 92       	push	r15
   1887e:	0f 93       	push	r16
   18880:	1f 93       	push	r17
   18882:	cf 93       	push	r28
   18884:	df 93       	push	r29
   18886:	7c 01       	movw	r14, r24
   18888:	eb 01       	movw	r28, r22
   1888a:	fc 01       	movw	r30, r24
   1888c:	04 a1       	ldd	r16, Z+36	; 0x24
   1888e:	15 a1       	ldd	r17, Z+37	; 0x25
   18890:	20 e0       	ldi	r18, 0x00	; 0
   18892:	30 e0       	ldi	r19, 0x00	; 0
   18894:	42 e0       	ldi	r20, 0x02	; 2
   18896:	50 e0       	ldi	r21, 0x00	; 0
   18898:	60 e0       	ldi	r22, 0x00	; 0
   1889a:	70 e0       	ldi	r23, 0x00	; 0
   1889c:	ce 01       	movw	r24, r28
   1889e:	f5 dc       	rcall	.-1558   	; 0x1828a <V2B_MSB>
   188a0:	b7 01       	movw	r22, r14
   188a2:	6a 5d       	subi	r22, 0xDA	; 218
   188a4:	7f 4f       	sbci	r23, 0xFF	; 255
   188a6:	46 e0       	ldi	r20, 0x06	; 6
   188a8:	50 e0       	ldi	r21, 0x00	; 0
   188aa:	ce 01       	movw	r24, r28
   188ac:	02 96       	adiw	r24, 0x02	; 2
   188ae:	8b df       	rcall	.-234    	; 0x187c6 <lif_S2B>
   188b0:	f7 01       	movw	r30, r14
   188b2:	05 a5       	ldd	r16, Z+45	; 0x2d
   188b4:	16 a5       	ldd	r17, Z+46	; 0x2e
   188b6:	27 a5       	ldd	r18, Z+47	; 0x2f
   188b8:	30 a9       	ldd	r19, Z+48	; 0x30
   188ba:	44 e0       	ldi	r20, 0x04	; 4
   188bc:	50 e0       	ldi	r21, 0x00	; 0
   188be:	68 e0       	ldi	r22, 0x08	; 8
   188c0:	70 e0       	ldi	r23, 0x00	; 0
   188c2:	ce 01       	movw	r24, r28
   188c4:	e2 dc       	rcall	.-1596   	; 0x1828a <V2B_MSB>
   188c6:	f7 01       	movw	r30, r14
   188c8:	01 a9       	ldd	r16, Z+49	; 0x31
   188ca:	12 a9       	ldd	r17, Z+50	; 0x32
   188cc:	20 e0       	ldi	r18, 0x00	; 0
   188ce:	30 e0       	ldi	r19, 0x00	; 0
   188d0:	42 e0       	ldi	r20, 0x02	; 2
   188d2:	50 e0       	ldi	r21, 0x00	; 0
   188d4:	6c e0       	ldi	r22, 0x0C	; 12
   188d6:	70 e0       	ldi	r23, 0x00	; 0
   188d8:	ce 01       	movw	r24, r28
   188da:	d7 dc       	rcall	.-1618   	; 0x1828a <V2B_MSB>
   188dc:	00 e0       	ldi	r16, 0x00	; 0
   188de:	10 e0       	ldi	r17, 0x00	; 0
   188e0:	98 01       	movw	r18, r16
   188e2:	42 e0       	ldi	r20, 0x02	; 2
   188e4:	50 e0       	ldi	r21, 0x00	; 0
   188e6:	6e e0       	ldi	r22, 0x0E	; 14
   188e8:	70 e0       	ldi	r23, 0x00	; 0
   188ea:	ce 01       	movw	r24, r28
   188ec:	ce dc       	rcall	.-1636   	; 0x1828a <V2B_MSB>
   188ee:	f7 01       	movw	r30, r14
   188f0:	05 a9       	ldd	r16, Z+53	; 0x35
   188f2:	16 a9       	ldd	r17, Z+54	; 0x36
   188f4:	27 a9       	ldd	r18, Z+55	; 0x37
   188f6:	30 ad       	ldd	r19, Z+56	; 0x38
   188f8:	44 e0       	ldi	r20, 0x04	; 4
   188fa:	50 e0       	ldi	r21, 0x00	; 0
   188fc:	60 e1       	ldi	r22, 0x10	; 16
   188fe:	70 e0       	ldi	r23, 0x00	; 0
   18900:	ce 01       	movw	r24, r28
   18902:	c3 dc       	rcall	.-1658   	; 0x1828a <V2B_MSB>
   18904:	f7 01       	movw	r30, r14
   18906:	01 ad       	ldd	r16, Z+57	; 0x39
   18908:	12 ad       	ldd	r17, Z+58	; 0x3a
   1890a:	20 e0       	ldi	r18, 0x00	; 0
   1890c:	30 e0       	ldi	r19, 0x00	; 0
   1890e:	42 e0       	ldi	r20, 0x02	; 2
   18910:	50 e0       	ldi	r21, 0x00	; 0
   18912:	64 e1       	ldi	r22, 0x14	; 20
   18914:	70 e0       	ldi	r23, 0x00	; 0
   18916:	ce 01       	movw	r24, r28
   18918:	b8 dc       	rcall	.-1680   	; 0x1828a <V2B_MSB>
   1891a:	00 e0       	ldi	r16, 0x00	; 0
   1891c:	10 e0       	ldi	r17, 0x00	; 0
   1891e:	98 01       	movw	r18, r16
   18920:	42 e0       	ldi	r20, 0x02	; 2
   18922:	50 e0       	ldi	r21, 0x00	; 0
   18924:	66 e1       	ldi	r22, 0x16	; 22
   18926:	70 e0       	ldi	r23, 0x00	; 0
   18928:	ce 01       	movw	r24, r28
   1892a:	af dc       	rcall	.-1698   	; 0x1828a <V2B_MSB>
   1892c:	f7 01       	movw	r30, r14
   1892e:	fd 96       	adiw	r30, 0x3d	; 61
   18930:	00 81       	ld	r16, Z
   18932:	11 81       	ldd	r17, Z+1	; 0x01
   18934:	22 81       	ldd	r18, Z+2	; 0x02
   18936:	33 81       	ldd	r19, Z+3	; 0x03
   18938:	44 e0       	ldi	r20, 0x04	; 4
   1893a:	50 e0       	ldi	r21, 0x00	; 0
   1893c:	68 e1       	ldi	r22, 0x18	; 24
   1893e:	70 e0       	ldi	r23, 0x00	; 0
   18940:	ce 01       	movw	r24, r28
   18942:	a3 dc       	rcall	.-1722   	; 0x1828a <V2B_MSB>
   18944:	f7 01       	movw	r30, r14
   18946:	ef 5b       	subi	r30, 0xBF	; 191
   18948:	ff 4f       	sbci	r31, 0xFF	; 255
   1894a:	00 81       	ld	r16, Z
   1894c:	11 81       	ldd	r17, Z+1	; 0x01
   1894e:	22 81       	ldd	r18, Z+2	; 0x02
   18950:	33 81       	ldd	r19, Z+3	; 0x03
   18952:	44 e0       	ldi	r20, 0x04	; 4
   18954:	50 e0       	ldi	r21, 0x00	; 0
   18956:	6c e1       	ldi	r22, 0x1C	; 28
   18958:	70 e0       	ldi	r23, 0x00	; 0
   1895a:	ce 01       	movw	r24, r28
   1895c:	96 dc       	rcall	.-1748   	; 0x1828a <V2B_MSB>
   1895e:	f7 01       	movw	r30, r14
   18960:	eb 5b       	subi	r30, 0xBB	; 187
   18962:	ff 4f       	sbci	r31, 0xFF	; 255
   18964:	00 81       	ld	r16, Z
   18966:	11 81       	ldd	r17, Z+1	; 0x01
   18968:	22 81       	ldd	r18, Z+2	; 0x02
   1896a:	33 81       	ldd	r19, Z+3	; 0x03
   1896c:	44 e0       	ldi	r20, 0x04	; 4
   1896e:	50 e0       	ldi	r21, 0x00	; 0
   18970:	60 e2       	ldi	r22, 0x20	; 32
   18972:	70 e0       	ldi	r23, 0x00	; 0
   18974:	ce 01       	movw	r24, r28
   18976:	89 dc       	rcall	.-1774   	; 0x1828a <V2B_MSB>
   18978:	de 01       	movw	r26, r28
   1897a:	94 96       	adiw	r26, 0x24	; 36
   1897c:	f7 01       	movw	r30, r14
   1897e:	e7 5b       	subi	r30, 0xB7	; 183
   18980:	ff 4f       	sbci	r31, 0xFF	; 255
   18982:	86 e0       	ldi	r24, 0x06	; 6
   18984:	01 90       	ld	r0, Z+
   18986:	0d 92       	st	X+, r0
   18988:	8a 95       	dec	r24
   1898a:	e1 f7       	brne	.-8      	; 0x18984 <lif_vol2str+0x10a>
   1898c:	cd b7       	in	r28, 0x3d	; 61
   1898e:	de b7       	in	r29, 0x3e	; 62
   18990:	e6 e0       	ldi	r30, 0x06	; 6
   18992:	0c 94 cc e8 	jmp	0x1d198	; 0x1d198 <__epilogue_restores__+0x18>

00018996 <lif_str2vol>:
   18996:	0f 93       	push	r16
   18998:	1f 93       	push	r17
   1899a:	cf 93       	push	r28
   1899c:	df 93       	push	r29
   1899e:	8c 01       	movw	r16, r24
   189a0:	eb 01       	movw	r28, r22
   189a2:	42 e0       	ldi	r20, 0x02	; 2
   189a4:	50 e0       	ldi	r21, 0x00	; 0
   189a6:	60 e0       	ldi	r22, 0x00	; 0
   189a8:	70 e0       	ldi	r23, 0x00	; 0
   189aa:	98 dc       	rcall	.-1744   	; 0x182dc <B2V_MSB>
   189ac:	7d a3       	std	Y+37, r23	; 0x25
   189ae:	6c a3       	std	Y+36, r22	; 0x24
   189b0:	be 01       	movw	r22, r28
   189b2:	6a 5d       	subi	r22, 0xDA	; 218
   189b4:	7f 4f       	sbci	r23, 0xFF	; 255
   189b6:	46 e0       	ldi	r20, 0x06	; 6
   189b8:	50 e0       	ldi	r21, 0x00	; 0
   189ba:	c8 01       	movw	r24, r16
   189bc:	02 96       	adiw	r24, 0x02	; 2
   189be:	ac de       	rcall	.-680    	; 0x18718 <lif_B2S>
   189c0:	44 e0       	ldi	r20, 0x04	; 4
   189c2:	50 e0       	ldi	r21, 0x00	; 0
   189c4:	68 e0       	ldi	r22, 0x08	; 8
   189c6:	70 e0       	ldi	r23, 0x00	; 0
   189c8:	c8 01       	movw	r24, r16
   189ca:	88 dc       	rcall	.-1776   	; 0x182dc <B2V_MSB>
   189cc:	6d a7       	std	Y+45, r22	; 0x2d
   189ce:	7e a7       	std	Y+46, r23	; 0x2e
   189d0:	8f a7       	std	Y+47, r24	; 0x2f
   189d2:	98 ab       	std	Y+48, r25	; 0x30
   189d4:	42 e0       	ldi	r20, 0x02	; 2
   189d6:	50 e0       	ldi	r21, 0x00	; 0
   189d8:	6c e0       	ldi	r22, 0x0C	; 12
   189da:	70 e0       	ldi	r23, 0x00	; 0
   189dc:	c8 01       	movw	r24, r16
   189de:	7e dc       	rcall	.-1796   	; 0x182dc <B2V_MSB>
   189e0:	7a ab       	std	Y+50, r23	; 0x32
   189e2:	69 ab       	std	Y+49, r22	; 0x31
   189e4:	42 e0       	ldi	r20, 0x02	; 2
   189e6:	50 e0       	ldi	r21, 0x00	; 0
   189e8:	6e e0       	ldi	r22, 0x0E	; 14
   189ea:	70 e0       	ldi	r23, 0x00	; 0
   189ec:	c8 01       	movw	r24, r16
   189ee:	76 dc       	rcall	.-1812   	; 0x182dc <B2V_MSB>
   189f0:	7c ab       	std	Y+52, r23	; 0x34
   189f2:	6b ab       	std	Y+51, r22	; 0x33
   189f4:	44 e0       	ldi	r20, 0x04	; 4
   189f6:	50 e0       	ldi	r21, 0x00	; 0
   189f8:	60 e1       	ldi	r22, 0x10	; 16
   189fa:	70 e0       	ldi	r23, 0x00	; 0
   189fc:	c8 01       	movw	r24, r16
   189fe:	6e dc       	rcall	.-1828   	; 0x182dc <B2V_MSB>
   18a00:	6d ab       	std	Y+53, r22	; 0x35
   18a02:	7e ab       	std	Y+54, r23	; 0x36
   18a04:	8f ab       	std	Y+55, r24	; 0x37
   18a06:	98 af       	std	Y+56, r25	; 0x38
   18a08:	42 e0       	ldi	r20, 0x02	; 2
   18a0a:	50 e0       	ldi	r21, 0x00	; 0
   18a0c:	64 e1       	ldi	r22, 0x14	; 20
   18a0e:	70 e0       	ldi	r23, 0x00	; 0
   18a10:	c8 01       	movw	r24, r16
   18a12:	64 dc       	rcall	.-1848   	; 0x182dc <B2V_MSB>
   18a14:	7a af       	std	Y+58, r23	; 0x3a
   18a16:	69 af       	std	Y+57, r22	; 0x39
   18a18:	42 e0       	ldi	r20, 0x02	; 2
   18a1a:	50 e0       	ldi	r21, 0x00	; 0
   18a1c:	66 e1       	ldi	r22, 0x16	; 22
   18a1e:	70 e0       	ldi	r23, 0x00	; 0
   18a20:	c8 01       	movw	r24, r16
   18a22:	5c dc       	rcall	.-1864   	; 0x182dc <B2V_MSB>
   18a24:	7c af       	std	Y+60, r23	; 0x3c
   18a26:	6b af       	std	Y+59, r22	; 0x3b
   18a28:	44 e0       	ldi	r20, 0x04	; 4
   18a2a:	50 e0       	ldi	r21, 0x00	; 0
   18a2c:	68 e1       	ldi	r22, 0x18	; 24
   18a2e:	70 e0       	ldi	r23, 0x00	; 0
   18a30:	c8 01       	movw	r24, r16
   18a32:	54 dc       	rcall	.-1880   	; 0x182dc <B2V_MSB>
   18a34:	fe 01       	movw	r30, r28
   18a36:	fd 96       	adiw	r30, 0x3d	; 61
   18a38:	60 83       	st	Z, r22
   18a3a:	71 83       	std	Z+1, r23	; 0x01
   18a3c:	82 83       	std	Z+2, r24	; 0x02
   18a3e:	93 83       	std	Z+3, r25	; 0x03
   18a40:	44 e0       	ldi	r20, 0x04	; 4
   18a42:	50 e0       	ldi	r21, 0x00	; 0
   18a44:	6c e1       	ldi	r22, 0x1C	; 28
   18a46:	70 e0       	ldi	r23, 0x00	; 0
   18a48:	c8 01       	movw	r24, r16
   18a4a:	48 dc       	rcall	.-1904   	; 0x182dc <B2V_MSB>
   18a4c:	fe 01       	movw	r30, r28
   18a4e:	ef 5b       	subi	r30, 0xBF	; 191
   18a50:	ff 4f       	sbci	r31, 0xFF	; 255
   18a52:	60 83       	st	Z, r22
   18a54:	71 83       	std	Z+1, r23	; 0x01
   18a56:	82 83       	std	Z+2, r24	; 0x02
   18a58:	93 83       	std	Z+3, r25	; 0x03
   18a5a:	44 e0       	ldi	r20, 0x04	; 4
   18a5c:	50 e0       	ldi	r21, 0x00	; 0
   18a5e:	60 e2       	ldi	r22, 0x20	; 32
   18a60:	70 e0       	ldi	r23, 0x00	; 0
   18a62:	c8 01       	movw	r24, r16
   18a64:	3b dc       	rcall	.-1930   	; 0x182dc <B2V_MSB>
   18a66:	fe 01       	movw	r30, r28
   18a68:	eb 5b       	subi	r30, 0xBB	; 187
   18a6a:	ff 4f       	sbci	r31, 0xFF	; 255
   18a6c:	60 83       	st	Z, r22
   18a6e:	71 83       	std	Z+1, r23	; 0x01
   18a70:	82 83       	std	Z+2, r24	; 0x02
   18a72:	93 83       	std	Z+3, r25	; 0x03
   18a74:	de 01       	movw	r26, r28
   18a76:	a7 5b       	subi	r26, 0xB7	; 183
   18a78:	bf 4f       	sbci	r27, 0xFF	; 255
   18a7a:	f8 01       	movw	r30, r16
   18a7c:	b4 96       	adiw	r30, 0x24	; 36
   18a7e:	86 e0       	ldi	r24, 0x06	; 6
   18a80:	01 90       	ld	r0, Z+
   18a82:	0d 92       	st	X+, r0
   18a84:	8a 95       	dec	r24
   18a86:	e1 f7       	brne	.-8      	; 0x18a80 <lif_str2vol+0xea>
   18a88:	df 91       	pop	r29
   18a8a:	cf 91       	pop	r28
   18a8c:	1f 91       	pop	r17
   18a8e:	0f 91       	pop	r16
   18a90:	08 95       	ret

00018a92 <lif_dir2str>:
   18a92:	ef 92       	push	r14
   18a94:	ff 92       	push	r15
   18a96:	0f 93       	push	r16
   18a98:	1f 93       	push	r17
   18a9a:	cf 93       	push	r28
   18a9c:	df 93       	push	r29
   18a9e:	ec 01       	movw	r28, r24
   18aa0:	7b 01       	movw	r14, r22
   18aa2:	bc 01       	movw	r22, r24
   18aa4:	61 5b       	subi	r22, 0xB1	; 177
   18aa6:	7f 4f       	sbci	r23, 0xFF	; 255
   18aa8:	4a e0       	ldi	r20, 0x0A	; 10
   18aaa:	50 e0       	ldi	r21, 0x00	; 0
   18aac:	c7 01       	movw	r24, r14
   18aae:	8b de       	rcall	.-746    	; 0x187c6 <lif_S2B>
   18ab0:	fe 01       	movw	r30, r28
   18ab2:	e6 5a       	subi	r30, 0xA6	; 166
   18ab4:	ff 4f       	sbci	r31, 0xFF	; 255
   18ab6:	00 81       	ld	r16, Z
   18ab8:	11 81       	ldd	r17, Z+1	; 0x01
   18aba:	20 e0       	ldi	r18, 0x00	; 0
   18abc:	30 e0       	ldi	r19, 0x00	; 0
   18abe:	42 e0       	ldi	r20, 0x02	; 2
   18ac0:	50 e0       	ldi	r21, 0x00	; 0
   18ac2:	6a e0       	ldi	r22, 0x0A	; 10
   18ac4:	70 e0       	ldi	r23, 0x00	; 0
   18ac6:	c7 01       	movw	r24, r14
   18ac8:	e0 db       	rcall	.-2112   	; 0x1828a <V2B_MSB>
   18aca:	fe 01       	movw	r30, r28
   18acc:	e4 5a       	subi	r30, 0xA4	; 164
   18ace:	ff 4f       	sbci	r31, 0xFF	; 255
   18ad0:	00 81       	ld	r16, Z
   18ad2:	11 81       	ldd	r17, Z+1	; 0x01
   18ad4:	22 81       	ldd	r18, Z+2	; 0x02
   18ad6:	33 81       	ldd	r19, Z+3	; 0x03
   18ad8:	44 e0       	ldi	r20, 0x04	; 4
   18ada:	50 e0       	ldi	r21, 0x00	; 0
   18adc:	6c e0       	ldi	r22, 0x0C	; 12
   18ade:	70 e0       	ldi	r23, 0x00	; 0
   18ae0:	c7 01       	movw	r24, r14
   18ae2:	d3 db       	rcall	.-2138   	; 0x1828a <V2B_MSB>
   18ae4:	fe 01       	movw	r30, r28
   18ae6:	e0 5a       	subi	r30, 0xA0	; 160
   18ae8:	ff 4f       	sbci	r31, 0xFF	; 255
   18aea:	00 81       	ld	r16, Z
   18aec:	11 81       	ldd	r17, Z+1	; 0x01
   18aee:	22 81       	ldd	r18, Z+2	; 0x02
   18af0:	33 81       	ldd	r19, Z+3	; 0x03
   18af2:	44 e0       	ldi	r20, 0x04	; 4
   18af4:	50 e0       	ldi	r21, 0x00	; 0
   18af6:	60 e1       	ldi	r22, 0x10	; 16
   18af8:	70 e0       	ldi	r23, 0x00	; 0
   18afa:	c7 01       	movw	r24, r14
   18afc:	c6 db       	rcall	.-2164   	; 0x1828a <V2B_MSB>
   18afe:	d7 01       	movw	r26, r14
   18b00:	54 96       	adiw	r26, 0x14	; 20
   18b02:	fe 01       	movw	r30, r28
   18b04:	ec 59       	subi	r30, 0x9C	; 156
   18b06:	ff 4f       	sbci	r31, 0xFF	; 255
   18b08:	86 e0       	ldi	r24, 0x06	; 6
   18b0a:	01 90       	ld	r0, Z+
   18b0c:	0d 92       	st	X+, r0
   18b0e:	8a 95       	dec	r24
   18b10:	e1 f7       	brne	.-8      	; 0x18b0a <lif_dir2str+0x78>
   18b12:	fe 01       	movw	r30, r28
   18b14:	e6 59       	subi	r30, 0x96	; 150
   18b16:	ff 4f       	sbci	r31, 0xFF	; 255
   18b18:	00 81       	ld	r16, Z
   18b1a:	11 81       	ldd	r17, Z+1	; 0x01
   18b1c:	20 e0       	ldi	r18, 0x00	; 0
   18b1e:	30 e0       	ldi	r19, 0x00	; 0
   18b20:	42 e0       	ldi	r20, 0x02	; 2
   18b22:	50 e0       	ldi	r21, 0x00	; 0
   18b24:	6a e1       	ldi	r22, 0x1A	; 26
   18b26:	70 e0       	ldi	r23, 0x00	; 0
   18b28:	c7 01       	movw	r24, r14
   18b2a:	af db       	rcall	.-2210   	; 0x1828a <V2B_MSB>
   18b2c:	fe 01       	movw	r30, r28
   18b2e:	e4 59       	subi	r30, 0x94	; 148
   18b30:	ff 4f       	sbci	r31, 0xFF	; 255
   18b32:	00 81       	ld	r16, Z
   18b34:	11 81       	ldd	r17, Z+1	; 0x01
   18b36:	20 e0       	ldi	r18, 0x00	; 0
   18b38:	30 e0       	ldi	r19, 0x00	; 0
   18b3a:	42 e0       	ldi	r20, 0x02	; 2
   18b3c:	50 e0       	ldi	r21, 0x00	; 0
   18b3e:	6c e1       	ldi	r22, 0x1C	; 28
   18b40:	70 e0       	ldi	r23, 0x00	; 0
   18b42:	c7 01       	movw	r24, r14
   18b44:	b6 db       	rcall	.-2196   	; 0x182b2 <V2B_LSB>
   18b46:	c2 59       	subi	r28, 0x92	; 146
   18b48:	df 4f       	sbci	r29, 0xFF	; 255
   18b4a:	08 81       	ld	r16, Y
   18b4c:	19 81       	ldd	r17, Y+1	; 0x01
   18b4e:	20 e0       	ldi	r18, 0x00	; 0
   18b50:	30 e0       	ldi	r19, 0x00	; 0
   18b52:	42 e0       	ldi	r20, 0x02	; 2
   18b54:	50 e0       	ldi	r21, 0x00	; 0
   18b56:	6e e1       	ldi	r22, 0x1E	; 30
   18b58:	70 e0       	ldi	r23, 0x00	; 0
   18b5a:	c7 01       	movw	r24, r14
   18b5c:	aa db       	rcall	.-2220   	; 0x182b2 <V2B_LSB>
   18b5e:	cd b7       	in	r28, 0x3d	; 61
   18b60:	de b7       	in	r29, 0x3e	; 62
   18b62:	e6 e0       	ldi	r30, 0x06	; 6
   18b64:	0c 94 cc e8 	jmp	0x1d198	; 0x1d198 <__epilogue_restores__+0x18>

00018b68 <lif_str2dir>:
   18b68:	0f 93       	push	r16
   18b6a:	1f 93       	push	r17
   18b6c:	cf 93       	push	r28
   18b6e:	df 93       	push	r29
   18b70:	8c 01       	movw	r16, r24
   18b72:	eb 01       	movw	r28, r22
   18b74:	61 5b       	subi	r22, 0xB1	; 177
   18b76:	7f 4f       	sbci	r23, 0xFF	; 255
   18b78:	4a e0       	ldi	r20, 0x0A	; 10
   18b7a:	50 e0       	ldi	r21, 0x00	; 0
   18b7c:	cd dd       	rcall	.-1126   	; 0x18718 <lif_B2S>
   18b7e:	42 e0       	ldi	r20, 0x02	; 2
   18b80:	50 e0       	ldi	r21, 0x00	; 0
   18b82:	6a e0       	ldi	r22, 0x0A	; 10
   18b84:	70 e0       	ldi	r23, 0x00	; 0
   18b86:	c8 01       	movw	r24, r16
   18b88:	a9 db       	rcall	.-2222   	; 0x182dc <B2V_MSB>
   18b8a:	fe 01       	movw	r30, r28
   18b8c:	e6 5a       	subi	r30, 0xA6	; 166
   18b8e:	ff 4f       	sbci	r31, 0xFF	; 255
   18b90:	71 83       	std	Z+1, r23	; 0x01
   18b92:	60 83       	st	Z, r22
   18b94:	44 e0       	ldi	r20, 0x04	; 4
   18b96:	50 e0       	ldi	r21, 0x00	; 0
   18b98:	6c e0       	ldi	r22, 0x0C	; 12
   18b9a:	70 e0       	ldi	r23, 0x00	; 0
   18b9c:	c8 01       	movw	r24, r16
   18b9e:	9e db       	rcall	.-2244   	; 0x182dc <B2V_MSB>
   18ba0:	fe 01       	movw	r30, r28
   18ba2:	e4 5a       	subi	r30, 0xA4	; 164
   18ba4:	ff 4f       	sbci	r31, 0xFF	; 255
   18ba6:	60 83       	st	Z, r22
   18ba8:	71 83       	std	Z+1, r23	; 0x01
   18baa:	82 83       	std	Z+2, r24	; 0x02
   18bac:	93 83       	std	Z+3, r25	; 0x03
   18bae:	44 e0       	ldi	r20, 0x04	; 4
   18bb0:	50 e0       	ldi	r21, 0x00	; 0
   18bb2:	60 e1       	ldi	r22, 0x10	; 16
   18bb4:	70 e0       	ldi	r23, 0x00	; 0
   18bb6:	c8 01       	movw	r24, r16
   18bb8:	91 db       	rcall	.-2270   	; 0x182dc <B2V_MSB>
   18bba:	fe 01       	movw	r30, r28
   18bbc:	e0 5a       	subi	r30, 0xA0	; 160
   18bbe:	ff 4f       	sbci	r31, 0xFF	; 255
   18bc0:	60 83       	st	Z, r22
   18bc2:	71 83       	std	Z+1, r23	; 0x01
   18bc4:	82 83       	std	Z+2, r24	; 0x02
   18bc6:	93 83       	std	Z+3, r25	; 0x03
   18bc8:	de 01       	movw	r26, r28
   18bca:	ac 59       	subi	r26, 0x9C	; 156
   18bcc:	bf 4f       	sbci	r27, 0xFF	; 255
   18bce:	f8 01       	movw	r30, r16
   18bd0:	74 96       	adiw	r30, 0x14	; 20
   18bd2:	86 e0       	ldi	r24, 0x06	; 6
   18bd4:	01 90       	ld	r0, Z+
   18bd6:	0d 92       	st	X+, r0
   18bd8:	8a 95       	dec	r24
   18bda:	e1 f7       	brne	.-8      	; 0x18bd4 <lif_str2dir+0x6c>
   18bdc:	42 e0       	ldi	r20, 0x02	; 2
   18bde:	50 e0       	ldi	r21, 0x00	; 0
   18be0:	6a e1       	ldi	r22, 0x1A	; 26
   18be2:	70 e0       	ldi	r23, 0x00	; 0
   18be4:	c8 01       	movw	r24, r16
   18be6:	7a db       	rcall	.-2316   	; 0x182dc <B2V_MSB>
   18be8:	fe 01       	movw	r30, r28
   18bea:	e6 59       	subi	r30, 0x96	; 150
   18bec:	ff 4f       	sbci	r31, 0xFF	; 255
   18bee:	71 83       	std	Z+1, r23	; 0x01
   18bf0:	60 83       	st	Z, r22
   18bf2:	42 e0       	ldi	r20, 0x02	; 2
   18bf4:	50 e0       	ldi	r21, 0x00	; 0
   18bf6:	6c e1       	ldi	r22, 0x1C	; 28
   18bf8:	70 e0       	ldi	r23, 0x00	; 0
   18bfa:	c8 01       	movw	r24, r16
   18bfc:	8e db       	rcall	.-2276   	; 0x1831a <B2V_LSB>
   18bfe:	fe 01       	movw	r30, r28
   18c00:	e4 59       	subi	r30, 0x94	; 148
   18c02:	ff 4f       	sbci	r31, 0xFF	; 255
   18c04:	71 83       	std	Z+1, r23	; 0x01
   18c06:	60 83       	st	Z, r22
   18c08:	42 e0       	ldi	r20, 0x02	; 2
   18c0a:	50 e0       	ldi	r21, 0x00	; 0
   18c0c:	6e e1       	ldi	r22, 0x1E	; 30
   18c0e:	70 e0       	ldi	r23, 0x00	; 0
   18c10:	c8 01       	movw	r24, r16
   18c12:	83 db       	rcall	.-2298   	; 0x1831a <B2V_LSB>
   18c14:	c2 59       	subi	r28, 0x92	; 146
   18c16:	df 4f       	sbci	r29, 0xFF	; 255
   18c18:	79 83       	std	Y+1, r23	; 0x01
   18c1a:	68 83       	st	Y, r22
   18c1c:	df 91       	pop	r29
   18c1e:	cf 91       	pop	r28
   18c20:	1f 91       	pop	r17
   18c22:	0f 91       	pop	r16
   18c24:	08 95       	ret

00018c26 <lif_BIN2BCD>:
   18c26:	6a e0       	ldi	r22, 0x0A	; 10
   18c28:	0e 94 04 e8 	call	0x1d008	; 0x1d008 <__udivmodqi4>
   18c2c:	82 95       	swap	r24
   18c2e:	80 7f       	andi	r24, 0xF0	; 240
   18c30:	89 2b       	or	r24, r25
   18c32:	08 95       	ret

00018c34 <lif_BCD2BIN>:
   18c34:	28 2f       	mov	r18, r24
   18c36:	22 95       	swap	r18
   18c38:	2f 70       	andi	r18, 0x0F	; 15
   18c3a:	8f 70       	andi	r24, 0x0F	; 15
   18c3c:	90 e0       	ldi	r25, 0x00	; 0
   18c3e:	3a e0       	ldi	r19, 0x0A	; 10
   18c40:	23 9f       	mul	r18, r19
   18c42:	80 0d       	add	r24, r0
   18c44:	91 1d       	adc	r25, r1
   18c46:	11 24       	eor	r1, r1
   18c48:	08 95       	ret

00018c4a <lif_time2lifbcd>:
   18c4a:	aa e1       	ldi	r26, 0x1A	; 26
   18c4c:	b0 e0       	ldi	r27, 0x00	; 0
   18c4e:	eb e2       	ldi	r30, 0x2B	; 43
   18c50:	f6 ec       	ldi	r31, 0xC6	; 198
   18c52:	0c 94 b2 e8 	jmp	0x1d164	; 0x1d164 <__prologue_saves__+0x1c>
   18c56:	8b 01       	movw	r16, r22
   18c58:	9c 01       	movw	r18, r24
   18c5a:	6f 8b       	std	Y+23, r22	; 0x17
   18c5c:	78 8f       	std	Y+24, r23	; 0x18
   18c5e:	89 8f       	std	Y+25, r24	; 0x19
   18c60:	9a 8f       	std	Y+26, r25	; 0x1a
   18c62:	67 2b       	or	r22, r23
   18c64:	68 2b       	or	r22, r24
   18c66:	69 2b       	or	r22, r25
   18c68:	41 f4       	brne	.+16     	; 0x18c7a <lif_time2lifbcd+0x30>
   18c6a:	fa 01       	movw	r30, r20
   18c6c:	ca 01       	movw	r24, r20
   18c6e:	06 96       	adiw	r24, 0x06	; 6
   18c70:	11 92       	st	Z+, r1
   18c72:	e8 17       	cp	r30, r24
   18c74:	f9 07       	cpc	r31, r25
   18c76:	e1 f7       	brne	.-8      	; 0x18c70 <lif_time2lifbcd+0x26>
   18c78:	26 c0       	rjmp	.+76     	; 0x18cc6 <lif_time2lifbcd+0x7c>
   18c7a:	8a 01       	movw	r16, r20
   18c7c:	be 01       	movw	r22, r28
   18c7e:	6f 5f       	subi	r22, 0xFF	; 255
   18c80:	7f 4f       	sbci	r23, 0xFF	; 255
   18c82:	ce 01       	movw	r24, r28
   18c84:	47 96       	adiw	r24, 0x17	; 23
   18c86:	0e 94 8f 38 	call	0x711e	; 0x711e <gmtime_r>
   18c8a:	8b 85       	ldd	r24, Y+11	; 0x0b
   18c8c:	9c 85       	ldd	r25, Y+12	; 0x0c
   18c8e:	64 e6       	ldi	r22, 0x64	; 100
   18c90:	70 e0       	ldi	r23, 0x00	; 0
   18c92:	0e 94 24 e8 	call	0x1d048	; 0x1d048 <__divmodhi4>
   18c96:	c7 df       	rcall	.-114    	; 0x18c26 <lif_BIN2BCD>
   18c98:	f8 01       	movw	r30, r16
   18c9a:	80 83       	st	Z, r24
   18c9c:	89 85       	ldd	r24, Y+9	; 0x09
   18c9e:	8f 5f       	subi	r24, 0xFF	; 255
   18ca0:	c2 df       	rcall	.-124    	; 0x18c26 <lif_BIN2BCD>
   18ca2:	f8 01       	movw	r30, r16
   18ca4:	81 83       	std	Z+1, r24	; 0x01
   18ca6:	8f 81       	ldd	r24, Y+7	; 0x07
   18ca8:	be df       	rcall	.-132    	; 0x18c26 <lif_BIN2BCD>
   18caa:	f8 01       	movw	r30, r16
   18cac:	82 83       	std	Z+2, r24	; 0x02
   18cae:	8d 81       	ldd	r24, Y+5	; 0x05
   18cb0:	ba df       	rcall	.-140    	; 0x18c26 <lif_BIN2BCD>
   18cb2:	f8 01       	movw	r30, r16
   18cb4:	83 83       	std	Z+3, r24	; 0x03
   18cb6:	8b 81       	ldd	r24, Y+3	; 0x03
   18cb8:	b6 df       	rcall	.-148    	; 0x18c26 <lif_BIN2BCD>
   18cba:	f8 01       	movw	r30, r16
   18cbc:	84 83       	std	Z+4, r24	; 0x04
   18cbe:	89 81       	ldd	r24, Y+1	; 0x01
   18cc0:	b2 df       	rcall	.-156    	; 0x18c26 <lif_BIN2BCD>
   18cc2:	f8 01       	movw	r30, r16
   18cc4:	85 83       	std	Z+5, r24	; 0x05
   18cc6:	6a 96       	adiw	r28, 0x1a	; 26
   18cc8:	e4 e0       	ldi	r30, 0x04	; 4
   18cca:	0c 94 ce e8 	jmp	0x1d19c	; 0x1d19c <__epilogue_restores__+0x1c>

00018cce <lif_lifbcd2time>:
   18cce:	a6 e1       	ldi	r26, 0x16	; 22
   18cd0:	b0 e0       	ldi	r27, 0x00	; 0
   18cd2:	ed e6       	ldi	r30, 0x6D	; 109
   18cd4:	f6 ec       	ldi	r31, 0xC6	; 198
   18cd6:	0c 94 ac e8 	jmp	0x1d158	; 0x1d158 <__prologue_saves__+0x10>
   18cda:	8c 01       	movw	r16, r24
   18cdc:	7c 01       	movw	r14, r24
   18cde:	5c 01       	movw	r10, r24
   18ce0:	26 e0       	ldi	r18, 0x06	; 6
   18ce2:	a2 0e       	add	r10, r18
   18ce4:	b1 1c       	adc	r11, r1
   18ce6:	cc 24       	eor	r12, r12
   18ce8:	c3 94       	inc	r12
   18cea:	d1 2c       	mov	r13, r1
   18cec:	f7 01       	movw	r30, r14
   18cee:	81 91       	ld	r24, Z+
   18cf0:	7f 01       	movw	r14, r30
   18cf2:	a0 df       	rcall	.-192    	; 0x18c34 <lif_BCD2BIN>
   18cf4:	89 2b       	or	r24, r25
   18cf6:	11 f0       	breq	.+4      	; 0x18cfc <lif_lifbcd2time+0x2e>
   18cf8:	c1 2c       	mov	r12, r1
   18cfa:	d1 2c       	mov	r13, r1
   18cfc:	ea 14       	cp	r14, r10
   18cfe:	fb 04       	cpc	r15, r11
   18d00:	a9 f7       	brne	.-22     	; 0x18cec <lif_lifbcd2time+0x1e>
   18d02:	c1 14       	cp	r12, r1
   18d04:	d1 04       	cpc	r13, r1
   18d06:	61 f5       	brne	.+88     	; 0x18d60 <lif_lifbcd2time+0x92>
   18d08:	f8 01       	movw	r30, r16
   18d0a:	80 81       	ld	r24, Z
   18d0c:	93 df       	rcall	.-218    	; 0x18c34 <lif_BCD2BIN>
   18d0e:	7c 01       	movw	r14, r24
   18d10:	f8 01       	movw	r30, r16
   18d12:	81 81       	ldd	r24, Z+1	; 0x01
   18d14:	8f df       	rcall	.-226    	; 0x18c34 <lif_BCD2BIN>
   18d16:	01 97       	sbiw	r24, 0x01	; 1
   18d18:	f6 e4       	ldi	r31, 0x46	; 70
   18d1a:	ef 16       	cp	r14, r31
   18d1c:	f1 04       	cpc	r15, r1
   18d1e:	1c f4       	brge	.+6      	; 0x18d26 <lif_lifbcd2time+0x58>
   18d20:	24 e6       	ldi	r18, 0x64	; 100
   18d22:	e2 0e       	add	r14, r18
   18d24:	f1 1c       	adc	r15, r1
   18d26:	fc 86       	std	Y+12, r15	; 0x0c
   18d28:	eb 86       	std	Y+11, r14	; 0x0b
   18d2a:	9a 87       	std	Y+10, r25	; 0x0a
   18d2c:	89 87       	std	Y+9, r24	; 0x09
   18d2e:	f8 01       	movw	r30, r16
   18d30:	82 81       	ldd	r24, Z+2	; 0x02
   18d32:	80 df       	rcall	.-256    	; 0x18c34 <lif_BCD2BIN>
   18d34:	98 87       	std	Y+8, r25	; 0x08
   18d36:	8f 83       	std	Y+7, r24	; 0x07
   18d38:	f8 01       	movw	r30, r16
   18d3a:	83 81       	ldd	r24, Z+3	; 0x03
   18d3c:	7b df       	rcall	.-266    	; 0x18c34 <lif_BCD2BIN>
   18d3e:	9e 83       	std	Y+6, r25	; 0x06
   18d40:	8d 83       	std	Y+5, r24	; 0x05
   18d42:	f8 01       	movw	r30, r16
   18d44:	84 81       	ldd	r24, Z+4	; 0x04
   18d46:	76 df       	rcall	.-276    	; 0x18c34 <lif_BCD2BIN>
   18d48:	9c 83       	std	Y+4, r25	; 0x04
   18d4a:	8b 83       	std	Y+3, r24	; 0x03
   18d4c:	f8 01       	movw	r30, r16
   18d4e:	85 81       	ldd	r24, Z+5	; 0x05
   18d50:	71 df       	rcall	.-286    	; 0x18c34 <lif_BCD2BIN>
   18d52:	9a 83       	std	Y+2, r25	; 0x02
   18d54:	89 83       	std	Y+1, r24	; 0x01
   18d56:	ce 01       	movw	r24, r28
   18d58:	01 96       	adiw	r24, 0x01	; 1
   18d5a:	0e 94 63 3b 	call	0x76c6	; 0x76c6 <timegm>
   18d5e:	03 c0       	rjmp	.+6      	; 0x18d66 <lif_lifbcd2time+0x98>
   18d60:	60 e0       	ldi	r22, 0x00	; 0
   18d62:	70 e0       	ldi	r23, 0x00	; 0
   18d64:	cb 01       	movw	r24, r22
   18d66:	66 96       	adiw	r28, 0x16	; 22
   18d68:	ea e0       	ldi	r30, 0x0A	; 10
   18d6a:	0c 94 c8 e8 	jmp	0x1d190	; 0x1d190 <__epilogue_restores__+0x10>

00018d6e <lif_ctime_gmt>:
   18d6e:	a6 e1       	ldi	r26, 0x16	; 22
   18d70:	b0 e0       	ldi	r27, 0x00	; 0
   18d72:	ed eb       	ldi	r30, 0xBD	; 189
   18d74:	f6 ec       	ldi	r31, 0xC6	; 198
   18d76:	0c 94 b2 e8 	jmp	0x1d164	; 0x1d164 <__prologue_saves__+0x1c>
   18d7a:	20 e2       	ldi	r18, 0x20	; 32
   18d7c:	ea ec       	ldi	r30, 0xCA	; 202
   18d7e:	f9 e1       	ldi	r31, 0x19	; 25
   18d80:	df 01       	movw	r26, r30
   18d82:	1d 92       	st	X+, r1
   18d84:	2a 95       	dec	r18
   18d86:	e9 f7       	brne	.-6      	; 0x18d82 <lif_ctime_gmt+0x14>
   18d88:	be 01       	movw	r22, r28
   18d8a:	6f 5f       	subi	r22, 0xFF	; 255
   18d8c:	7f 4f       	sbci	r23, 0xFF	; 255
   18d8e:	0e 94 8f 38 	call	0x711e	; 0x711e <gmtime_r>
   18d92:	6a ec       	ldi	r22, 0xCA	; 202
   18d94:	79 e1       	ldi	r23, 0x19	; 25
   18d96:	0e 94 bf 3d 	call	0x7b7e	; 0x7b7e <asctime_r>
   18d9a:	8c 01       	movw	r16, r24
   18d9c:	0e 94 1b 33 	call	0x6636	; 0x6636 <trim_tail>
   18da0:	c8 01       	movw	r24, r16
   18da2:	66 96       	adiw	r28, 0x16	; 22
   18da4:	e4 e0       	ldi	r30, 0x04	; 4
   18da6:	0c 94 ce e8 	jmp	0x1d19c	; 0x1d19c <__epilogue_restores__+0x1c>

00018daa <lif_lifbcd2timestr>:
   18daa:	a4 e0       	ldi	r26, 0x04	; 4
   18dac:	b0 e0       	ldi	r27, 0x00	; 0
   18dae:	eb ed       	ldi	r30, 0xDB	; 219
   18db0:	f6 ec       	ldi	r31, 0xC6	; 198
   18db2:	0c 94 b4 e8 	jmp	0x1d168	; 0x1d168 <__prologue_saves__+0x20>
   18db6:	20 e2       	ldi	r18, 0x20	; 32
   18db8:	ea ea       	ldi	r30, 0xAA	; 170
   18dba:	f9 e1       	ldi	r31, 0x19	; 25
   18dbc:	df 01       	movw	r26, r30
   18dbe:	1d 92       	st	X+, r1
   18dc0:	2a 95       	dec	r18
   18dc2:	e9 f7       	brne	.-6      	; 0x18dbe <lif_lifbcd2timestr+0x14>
   18dc4:	84 df       	rcall	.-248    	; 0x18cce <lif_lifbcd2time>
   18dc6:	69 83       	std	Y+1, r22	; 0x01
   18dc8:	7a 83       	std	Y+2, r23	; 0x02
   18dca:	8b 83       	std	Y+3, r24	; 0x03
   18dcc:	9c 83       	std	Y+4, r25	; 0x04
   18dce:	67 2b       	or	r22, r23
   18dd0:	68 2b       	or	r22, r24
   18dd2:	69 2b       	or	r22, r25
   18dd4:	29 f0       	breq	.+10     	; 0x18de0 <lif_lifbcd2timestr+0x36>
   18dd6:	ce 01       	movw	r24, r28
   18dd8:	01 96       	adiw	r24, 0x01	; 1
   18dda:	c9 df       	rcall	.-110    	; 0x18d6e <lif_ctime_gmt>
   18ddc:	bc 01       	movw	r22, r24
   18dde:	02 c0       	rjmp	.+4      	; 0x18de4 <lif_lifbcd2timestr+0x3a>
   18de0:	6d ed       	ldi	r22, 0xDD	; 221
   18de2:	75 e1       	ldi	r23, 0x15	; 21
   18de4:	8a ea       	ldi	r24, 0xAA	; 170
   18de6:	99 e1       	ldi	r25, 0x19	; 25
   18de8:	0e 94 3d 32 	call	0x647a	; 0x647a <strcpy>
   18dec:	8a ea       	ldi	r24, 0xAA	; 170
   18dee:	99 e1       	ldi	r25, 0x19	; 25
   18df0:	24 96       	adiw	r28, 0x04	; 4
   18df2:	e2 e0       	ldi	r30, 0x02	; 2
   18df4:	0c 94 d0 e8 	jmp	0x1d1a0	; 0x1d1a0 <__epilogue_restores__+0x20>

00018df8 <lif_image_clear>:
   18df8:	20 e7       	ldi	r18, 0x70	; 112
   18dfa:	fc 01       	movw	r30, r24
   18dfc:	11 92       	st	Z+, r1
   18dfe:	2a 95       	dec	r18
   18e00:	e9 f7       	brne	.-6      	; 0x18dfc <lif_image_clear+0x4>
   18e02:	08 95       	ret

00018e04 <lif_dir_clear>:
   18e04:	81 5b       	subi	r24, 0xB1	; 177
   18e06:	9f 4f       	sbci	r25, 0xFF	; 255
   18e08:	21 e2       	ldi	r18, 0x21	; 33
   18e0a:	fc 01       	movw	r30, r24
   18e0c:	11 92       	st	Z+, r1
   18e0e:	2a 95       	dec	r18
   18e10:	e9 f7       	brne	.-6      	; 0x18e0c <lif_dir_clear+0x8>
   18e12:	08 95       	ret

00018e14 <lif_vol_clear>:
   18e14:	84 96       	adiw	r24, 0x24	; 36
   18e16:	2b e2       	ldi	r18, 0x2B	; 43
   18e18:	fc 01       	movw	r30, r24
   18e1a:	11 92       	st	Z+, r1
   18e1c:	2a 95       	dec	r18
   18e1e:	e9 f7       	brne	.-6      	; 0x18e1a <lif_vol_clear+0x6>
   18e20:	08 95       	ret

00018e22 <lif_dump_vol>:
   18e22:	cf 93       	push	r28
   18e24:	df 93       	push	r29
   18e26:	ad b7       	in	r26, 0x3d	; 61
   18e28:	be b7       	in	r27, 0x3e	; 62
   18e2a:	17 97       	sbiw	r26, 0x07	; 7
   18e2c:	0f b6       	in	r0, 0x3f	; 63
   18e2e:	f8 94       	cli
   18e30:	be bf       	out	0x3e, r27	; 62
   18e32:	0f be       	out	0x3f, r0	; 63
   18e34:	ad bf       	out	0x3d, r26	; 61
   18e36:	ec 01       	movw	r28, r24
   18e38:	ed b7       	in	r30, 0x3d	; 61
   18e3a:	fe b7       	in	r31, 0x3e	; 62
   18e3c:	75 83       	std	Z+5, r23	; 0x05
   18e3e:	64 83       	std	Z+4, r22	; 0x04
   18e40:	8f ef       	ldi	r24, 0xFF	; 255
   18e42:	93 e4       	ldi	r25, 0x43	; 67
   18e44:	a0 e0       	ldi	r26, 0x00	; 0
   18e46:	81 83       	std	Z+1, r24	; 0x01
   18e48:	92 83       	std	Z+2, r25	; 0x02
   18e4a:	a3 83       	std	Z+3, r26	; 0x03
   18e4c:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
   18e50:	88 81       	ld	r24, Y
   18e52:	99 81       	ldd	r25, Y+1	; 0x01
   18e54:	ed b7       	in	r30, 0x3d	; 61
   18e56:	fe b7       	in	r31, 0x3e	; 62
   18e58:	95 83       	std	Z+5, r25	; 0x05
   18e5a:	84 83       	std	Z+4, r24	; 0x04
   18e5c:	85 ee       	ldi	r24, 0xE5	; 229
   18e5e:	93 e4       	ldi	r25, 0x43	; 67
   18e60:	a0 e0       	ldi	r26, 0x00	; 0
   18e62:	81 83       	std	Z+1, r24	; 0x01
   18e64:	92 83       	std	Z+2, r25	; 0x02
   18e66:	a3 83       	std	Z+3, r26	; 0x03
   18e68:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
   18e6c:	8c 81       	ldd	r24, Y+4	; 0x04
   18e6e:	9d 81       	ldd	r25, Y+5	; 0x05
   18e70:	ae 81       	ldd	r26, Y+6	; 0x06
   18e72:	bf 81       	ldd	r27, Y+7	; 0x07
   18e74:	ed b7       	in	r30, 0x3d	; 61
   18e76:	fe b7       	in	r31, 0x3e	; 62
   18e78:	84 83       	std	Z+4, r24	; 0x04
   18e7a:	95 83       	std	Z+5, r25	; 0x05
   18e7c:	a6 83       	std	Z+6, r26	; 0x06
   18e7e:	b7 83       	std	Z+7, r27	; 0x07
   18e80:	88 ec       	ldi	r24, 0xC8	; 200
   18e82:	93 e4       	ldi	r25, 0x43	; 67
   18e84:	a0 e0       	ldi	r26, 0x00	; 0
   18e86:	81 83       	std	Z+1, r24	; 0x01
   18e88:	92 83       	std	Z+2, r25	; 0x02
   18e8a:	a3 83       	std	Z+3, r26	; 0x03
   18e8c:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
   18e90:	88 85       	ldd	r24, Y+8	; 0x08
   18e92:	99 85       	ldd	r25, Y+9	; 0x09
   18e94:	aa 85       	ldd	r26, Y+10	; 0x0a
   18e96:	bb 85       	ldd	r27, Y+11	; 0x0b
   18e98:	ed b7       	in	r30, 0x3d	; 61
   18e9a:	fe b7       	in	r31, 0x3e	; 62
   18e9c:	84 83       	std	Z+4, r24	; 0x04
   18e9e:	95 83       	std	Z+5, r25	; 0x05
   18ea0:	a6 83       	std	Z+6, r26	; 0x06
   18ea2:	b7 83       	std	Z+7, r27	; 0x07
   18ea4:	8b ea       	ldi	r24, 0xAB	; 171
   18ea6:	93 e4       	ldi	r25, 0x43	; 67
   18ea8:	a0 e0       	ldi	r26, 0x00	; 0
   18eaa:	81 83       	std	Z+1, r24	; 0x01
   18eac:	92 83       	std	Z+2, r25	; 0x02
   18eae:	a3 83       	std	Z+3, r26	; 0x03
   18eb0:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
   18eb4:	8c 85       	ldd	r24, Y+12	; 0x0c
   18eb6:	9d 85       	ldd	r25, Y+13	; 0x0d
   18eb8:	ae 85       	ldd	r26, Y+14	; 0x0e
   18eba:	bf 85       	ldd	r27, Y+15	; 0x0f
   18ebc:	ed b7       	in	r30, 0x3d	; 61
   18ebe:	fe b7       	in	r31, 0x3e	; 62
   18ec0:	84 83       	std	Z+4, r24	; 0x04
   18ec2:	95 83       	std	Z+5, r25	; 0x05
   18ec4:	a6 83       	std	Z+6, r26	; 0x06
   18ec6:	b7 83       	std	Z+7, r27	; 0x07
   18ec8:	8e e8       	ldi	r24, 0x8E	; 142
   18eca:	93 e4       	ldi	r25, 0x43	; 67
   18ecc:	a0 e0       	ldi	r26, 0x00	; 0
   18ece:	81 83       	std	Z+1, r24	; 0x01
   18ed0:	92 83       	std	Z+2, r25	; 0x02
   18ed2:	a3 83       	std	Z+3, r26	; 0x03
   18ed4:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
   18ed8:	88 89       	ldd	r24, Y+16	; 0x10
   18eda:	99 89       	ldd	r25, Y+17	; 0x11
   18edc:	aa 89       	ldd	r26, Y+18	; 0x12
   18ede:	bb 89       	ldd	r27, Y+19	; 0x13
   18ee0:	ed b7       	in	r30, 0x3d	; 61
   18ee2:	fe b7       	in	r31, 0x3e	; 62
   18ee4:	84 83       	std	Z+4, r24	; 0x04
   18ee6:	95 83       	std	Z+5, r25	; 0x05
   18ee8:	a6 83       	std	Z+6, r26	; 0x06
   18eea:	b7 83       	std	Z+7, r27	; 0x07
   18eec:	81 e7       	ldi	r24, 0x71	; 113
   18eee:	93 e4       	ldi	r25, 0x43	; 67
   18ef0:	a0 e0       	ldi	r26, 0x00	; 0
   18ef2:	81 83       	std	Z+1, r24	; 0x01
   18ef4:	92 83       	std	Z+2, r25	; 0x02
   18ef6:	a3 83       	std	Z+3, r26	; 0x03
   18ef8:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
   18efc:	8c 89       	ldd	r24, Y+20	; 0x14
   18efe:	9d 89       	ldd	r25, Y+21	; 0x15
   18f00:	ae 89       	ldd	r26, Y+22	; 0x16
   18f02:	bf 89       	ldd	r27, Y+23	; 0x17
   18f04:	ed b7       	in	r30, 0x3d	; 61
   18f06:	fe b7       	in	r31, 0x3e	; 62
   18f08:	84 83       	std	Z+4, r24	; 0x04
   18f0a:	95 83       	std	Z+5, r25	; 0x05
   18f0c:	a6 83       	std	Z+6, r26	; 0x06
   18f0e:	b7 83       	std	Z+7, r27	; 0x07
   18f10:	84 e5       	ldi	r24, 0x54	; 84
   18f12:	93 e4       	ldi	r25, 0x43	; 67
   18f14:	a0 e0       	ldi	r26, 0x00	; 0
   18f16:	81 83       	std	Z+1, r24	; 0x01
   18f18:	92 83       	std	Z+2, r25	; 0x02
   18f1a:	a3 83       	std	Z+3, r26	; 0x03
   18f1c:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
   18f20:	88 8d       	ldd	r24, Y+24	; 0x18
   18f22:	99 8d       	ldd	r25, Y+25	; 0x19
   18f24:	aa 8d       	ldd	r26, Y+26	; 0x1a
   18f26:	bb 8d       	ldd	r27, Y+27	; 0x1b
   18f28:	ed b7       	in	r30, 0x3d	; 61
   18f2a:	fe b7       	in	r31, 0x3e	; 62
   18f2c:	84 83       	std	Z+4, r24	; 0x04
   18f2e:	95 83       	std	Z+5, r25	; 0x05
   18f30:	a6 83       	std	Z+6, r26	; 0x06
   18f32:	b7 83       	std	Z+7, r27	; 0x07
   18f34:	87 e3       	ldi	r24, 0x37	; 55
   18f36:	93 e4       	ldi	r25, 0x43	; 67
   18f38:	a0 e0       	ldi	r26, 0x00	; 0
   18f3a:	81 83       	std	Z+1, r24	; 0x01
   18f3c:	92 83       	std	Z+2, r25	; 0x02
   18f3e:	a3 83       	std	Z+3, r26	; 0x03
   18f40:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
   18f44:	8c 8d       	ldd	r24, Y+28	; 0x1c
   18f46:	9d 8d       	ldd	r25, Y+29	; 0x1d
   18f48:	09 2e       	mov	r0, r25
   18f4a:	00 0c       	add	r0, r0
   18f4c:	aa 0b       	sbc	r26, r26
   18f4e:	bb 0b       	sbc	r27, r27
   18f50:	ed b7       	in	r30, 0x3d	; 61
   18f52:	fe b7       	in	r31, 0x3e	; 62
   18f54:	84 83       	std	Z+4, r24	; 0x04
   18f56:	95 83       	std	Z+5, r25	; 0x05
   18f58:	a6 83       	std	Z+6, r26	; 0x06
   18f5a:	b7 83       	std	Z+7, r27	; 0x07
   18f5c:	8a e1       	ldi	r24, 0x1A	; 26
   18f5e:	93 e4       	ldi	r25, 0x43	; 67
   18f60:	a0 e0       	ldi	r26, 0x00	; 0
   18f62:	81 83       	std	Z+1, r24	; 0x01
   18f64:	92 83       	std	Z+2, r25	; 0x02
   18f66:	a3 83       	std	Z+3, r26	; 0x03
   18f68:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
   18f6c:	8e 8d       	ldd	r24, Y+30	; 0x1e
   18f6e:	9f 8d       	ldd	r25, Y+31	; 0x1f
   18f70:	09 2e       	mov	r0, r25
   18f72:	00 0c       	add	r0, r0
   18f74:	aa 0b       	sbc	r26, r26
   18f76:	bb 0b       	sbc	r27, r27
   18f78:	ed b7       	in	r30, 0x3d	; 61
   18f7a:	fe b7       	in	r31, 0x3e	; 62
   18f7c:	84 83       	std	Z+4, r24	; 0x04
   18f7e:	95 83       	std	Z+5, r25	; 0x05
   18f80:	a6 83       	std	Z+6, r26	; 0x06
   18f82:	b7 83       	std	Z+7, r27	; 0x07
   18f84:	8d ef       	ldi	r24, 0xFD	; 253
   18f86:	92 e4       	ldi	r25, 0x42	; 66
   18f88:	a0 e0       	ldi	r26, 0x00	; 0
   18f8a:	81 83       	std	Z+1, r24	; 0x01
   18f8c:	92 83       	std	Z+2, r25	; 0x02
   18f8e:	a3 83       	std	Z+3, r26	; 0x03
   18f90:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
   18f94:	ce 01       	movw	r24, r28
   18f96:	86 96       	adiw	r24, 0x26	; 38
   18f98:	ed b7       	in	r30, 0x3d	; 61
   18f9a:	fe b7       	in	r31, 0x3e	; 62
   18f9c:	95 83       	std	Z+5, r25	; 0x05
   18f9e:	84 83       	std	Z+4, r24	; 0x04
   18fa0:	83 ee       	ldi	r24, 0xE3	; 227
   18fa2:	92 e4       	ldi	r25, 0x42	; 66
   18fa4:	a0 e0       	ldi	r26, 0x00	; 0
   18fa6:	81 83       	std	Z+1, r24	; 0x01
   18fa8:	92 83       	std	Z+2, r25	; 0x02
   18faa:	a3 83       	std	Z+3, r26	; 0x03
   18fac:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
   18fb0:	8c a1       	ldd	r24, Y+36	; 0x24
   18fb2:	9d a1       	ldd	r25, Y+37	; 0x25
   18fb4:	ed b7       	in	r30, 0x3d	; 61
   18fb6:	fe b7       	in	r31, 0x3e	; 62
   18fb8:	95 83       	std	Z+5, r25	; 0x05
   18fba:	84 83       	std	Z+4, r24	; 0x04
   18fbc:	87 ec       	ldi	r24, 0xC7	; 199
   18fbe:	92 e4       	ldi	r25, 0x42	; 66
   18fc0:	a0 e0       	ldi	r26, 0x00	; 0
   18fc2:	81 83       	std	Z+1, r24	; 0x01
   18fc4:	92 83       	std	Z+2, r25	; 0x02
   18fc6:	a3 83       	std	Z+3, r26	; 0x03
   18fc8:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
   18fcc:	8d a5       	ldd	r24, Y+45	; 0x2d
   18fce:	9e a5       	ldd	r25, Y+46	; 0x2e
   18fd0:	af a5       	ldd	r26, Y+47	; 0x2f
   18fd2:	b8 a9       	ldd	r27, Y+48	; 0x30
   18fd4:	ed b7       	in	r30, 0x3d	; 61
   18fd6:	fe b7       	in	r31, 0x3e	; 62
   18fd8:	84 83       	std	Z+4, r24	; 0x04
   18fda:	95 83       	std	Z+5, r25	; 0x05
   18fdc:	a6 83       	std	Z+6, r26	; 0x06
   18fde:	b7 83       	std	Z+7, r27	; 0x07
   18fe0:	8a ea       	ldi	r24, 0xAA	; 170
   18fe2:	92 e4       	ldi	r25, 0x42	; 66
   18fe4:	a0 e0       	ldi	r26, 0x00	; 0
   18fe6:	81 83       	std	Z+1, r24	; 0x01
   18fe8:	92 83       	std	Z+2, r25	; 0x02
   18fea:	a3 83       	std	Z+3, r26	; 0x03
   18fec:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
   18ff0:	8d a9       	ldd	r24, Y+53	; 0x35
   18ff2:	9e a9       	ldd	r25, Y+54	; 0x36
   18ff4:	af a9       	ldd	r26, Y+55	; 0x37
   18ff6:	b8 ad       	ldd	r27, Y+56	; 0x38
   18ff8:	ed b7       	in	r30, 0x3d	; 61
   18ffa:	fe b7       	in	r31, 0x3e	; 62
   18ffc:	84 83       	std	Z+4, r24	; 0x04
   18ffe:	95 83       	std	Z+5, r25	; 0x05
   19000:	a6 83       	std	Z+6, r26	; 0x06
   19002:	b7 83       	std	Z+7, r27	; 0x07
   19004:	8d e8       	ldi	r24, 0x8D	; 141
   19006:	92 e4       	ldi	r25, 0x42	; 66
   19008:	a0 e0       	ldi	r26, 0x00	; 0
   1900a:	81 83       	std	Z+1, r24	; 0x01
   1900c:	92 83       	std	Z+2, r25	; 0x02
   1900e:	a3 83       	std	Z+3, r26	; 0x03
   19010:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
   19014:	89 a9       	ldd	r24, Y+49	; 0x31
   19016:	9a a9       	ldd	r25, Y+50	; 0x32
   19018:	ed b7       	in	r30, 0x3d	; 61
   1901a:	fe b7       	in	r31, 0x3e	; 62
   1901c:	95 83       	std	Z+5, r25	; 0x05
   1901e:	84 83       	std	Z+4, r24	; 0x04
   19020:	81 e7       	ldi	r24, 0x71	; 113
   19022:	92 e4       	ldi	r25, 0x42	; 66
   19024:	a0 e0       	ldi	r26, 0x00	; 0
   19026:	81 83       	std	Z+1, r24	; 0x01
   19028:	92 83       	std	Z+2, r25	; 0x02
   1902a:	a3 83       	std	Z+3, r26	; 0x03
   1902c:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
   19030:	89 ad       	ldd	r24, Y+57	; 0x39
   19032:	9a ad       	ldd	r25, Y+58	; 0x3a
   19034:	ed b7       	in	r30, 0x3d	; 61
   19036:	fe b7       	in	r31, 0x3e	; 62
   19038:	95 83       	std	Z+5, r25	; 0x05
   1903a:	84 83       	std	Z+4, r24	; 0x04
   1903c:	85 e5       	ldi	r24, 0x55	; 85
   1903e:	92 e4       	ldi	r25, 0x42	; 66
   19040:	a0 e0       	ldi	r26, 0x00	; 0
   19042:	81 83       	std	Z+1, r24	; 0x01
   19044:	92 83       	std	Z+2, r25	; 0x02
   19046:	a3 83       	std	Z+3, r26	; 0x03
   19048:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
   1904c:	ce 01       	movw	r24, r28
   1904e:	87 5b       	subi	r24, 0xB7	; 183
   19050:	9f 4f       	sbci	r25, 0xFF	; 255
   19052:	ab de       	rcall	.-682    	; 0x18daa <lif_lifbcd2timestr>
   19054:	ed b7       	in	r30, 0x3d	; 61
   19056:	fe b7       	in	r31, 0x3e	; 62
   19058:	95 83       	std	Z+5, r25	; 0x05
   1905a:	84 83       	std	Z+4, r24	; 0x04
   1905c:	8b e3       	ldi	r24, 0x3B	; 59
   1905e:	92 e4       	ldi	r25, 0x42	; 66
   19060:	a0 e0       	ldi	r26, 0x00	; 0
   19062:	81 83       	std	Z+1, r24	; 0x01
   19064:	92 83       	std	Z+2, r25	; 0x02
   19066:	a3 83       	std	Z+3, r26	; 0x03
   19068:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
   1906c:	ce 01       	movw	r24, r28
   1906e:	81 5b       	subi	r24, 0xB1	; 177
   19070:	9f 4f       	sbci	r25, 0xFF	; 255
   19072:	ed b7       	in	r30, 0x3d	; 61
   19074:	fe b7       	in	r31, 0x3e	; 62
   19076:	95 83       	std	Z+5, r25	; 0x05
   19078:	84 83       	std	Z+4, r24	; 0x04
   1907a:	81 e2       	ldi	r24, 0x21	; 33
   1907c:	92 e4       	ldi	r25, 0x42	; 66
   1907e:	a0 e0       	ldi	r26, 0x00	; 0
   19080:	81 83       	std	Z+1, r24	; 0x01
   19082:	92 83       	std	Z+2, r25	; 0x02
   19084:	a3 83       	std	Z+3, r26	; 0x03
   19086:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
   1908a:	fe 01       	movw	r30, r28
   1908c:	e6 5a       	subi	r30, 0xA6	; 166
   1908e:	ff 4f       	sbci	r31, 0xFF	; 255
   19090:	80 81       	ld	r24, Z
   19092:	91 81       	ldd	r25, Z+1	; 0x01
   19094:	ed b7       	in	r30, 0x3d	; 61
   19096:	fe b7       	in	r31, 0x3e	; 62
   19098:	95 83       	std	Z+5, r25	; 0x05
   1909a:	84 83       	std	Z+4, r24	; 0x04
   1909c:	85 e0       	ldi	r24, 0x05	; 5
   1909e:	92 e4       	ldi	r25, 0x42	; 66
   190a0:	a0 e0       	ldi	r26, 0x00	; 0
   190a2:	81 83       	std	Z+1, r24	; 0x01
   190a4:	92 83       	std	Z+2, r25	; 0x02
   190a6:	a3 83       	std	Z+3, r26	; 0x03
   190a8:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
   190ac:	fe 01       	movw	r30, r28
   190ae:	e6 59       	subi	r30, 0x96	; 150
   190b0:	ff 4f       	sbci	r31, 0xFF	; 255
   190b2:	80 81       	ld	r24, Z
   190b4:	91 81       	ldd	r25, Z+1	; 0x01
   190b6:	ed b7       	in	r30, 0x3d	; 61
   190b8:	fe b7       	in	r31, 0x3e	; 62
   190ba:	95 83       	std	Z+5, r25	; 0x05
   190bc:	84 83       	std	Z+4, r24	; 0x04
   190be:	89 ee       	ldi	r24, 0xE9	; 233
   190c0:	91 e4       	ldi	r25, 0x41	; 65
   190c2:	a0 e0       	ldi	r26, 0x00	; 0
   190c4:	81 83       	std	Z+1, r24	; 0x01
   190c6:	92 83       	std	Z+2, r25	; 0x02
   190c8:	a3 83       	std	Z+3, r26	; 0x03
   190ca:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
   190ce:	fe 01       	movw	r30, r28
   190d0:	e4 5a       	subi	r30, 0xA4	; 164
   190d2:	ff 4f       	sbci	r31, 0xFF	; 255
   190d4:	80 81       	ld	r24, Z
   190d6:	91 81       	ldd	r25, Z+1	; 0x01
   190d8:	a2 81       	ldd	r26, Z+2	; 0x02
   190da:	b3 81       	ldd	r27, Z+3	; 0x03
   190dc:	ed b7       	in	r30, 0x3d	; 61
   190de:	fe b7       	in	r31, 0x3e	; 62
   190e0:	84 83       	std	Z+4, r24	; 0x04
   190e2:	95 83       	std	Z+5, r25	; 0x05
   190e4:	a6 83       	std	Z+6, r26	; 0x06
   190e6:	b7 83       	std	Z+7, r27	; 0x07
   190e8:	8c ec       	ldi	r24, 0xCC	; 204
   190ea:	91 e4       	ldi	r25, 0x41	; 65
   190ec:	a0 e0       	ldi	r26, 0x00	; 0
   190ee:	81 83       	std	Z+1, r24	; 0x01
   190f0:	92 83       	std	Z+2, r25	; 0x02
   190f2:	a3 83       	std	Z+3, r26	; 0x03
   190f4:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
   190f8:	fe 01       	movw	r30, r28
   190fa:	e0 5a       	subi	r30, 0xA0	; 160
   190fc:	ff 4f       	sbci	r31, 0xFF	; 255
   190fe:	80 81       	ld	r24, Z
   19100:	91 81       	ldd	r25, Z+1	; 0x01
   19102:	a2 81       	ldd	r26, Z+2	; 0x02
   19104:	b3 81       	ldd	r27, Z+3	; 0x03
   19106:	ed b7       	in	r30, 0x3d	; 61
   19108:	fe b7       	in	r31, 0x3e	; 62
   1910a:	84 83       	std	Z+4, r24	; 0x04
   1910c:	95 83       	std	Z+5, r25	; 0x05
   1910e:	a6 83       	std	Z+6, r26	; 0x06
   19110:	b7 83       	std	Z+7, r27	; 0x07
   19112:	8f ea       	ldi	r24, 0xAF	; 175
   19114:	91 e4       	ldi	r25, 0x41	; 65
   19116:	a0 e0       	ldi	r26, 0x00	; 0
   19118:	81 83       	std	Z+1, r24	; 0x01
   1911a:	92 83       	std	Z+2, r25	; 0x02
   1911c:	a3 83       	std	Z+3, r26	; 0x03
   1911e:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
   19122:	fe 01       	movw	r30, r28
   19124:	e4 59       	subi	r30, 0x94	; 148
   19126:	ff 4f       	sbci	r31, 0xFF	; 255
   19128:	80 81       	ld	r24, Z
   1912a:	91 81       	ldd	r25, Z+1	; 0x01
   1912c:	a0 e0       	ldi	r26, 0x00	; 0
   1912e:	b0 e0       	ldi	r27, 0x00	; 0
   19130:	ed b7       	in	r30, 0x3d	; 61
   19132:	fe b7       	in	r31, 0x3e	; 62
   19134:	84 83       	std	Z+4, r24	; 0x04
   19136:	95 83       	std	Z+5, r25	; 0x05
   19138:	a6 83       	std	Z+6, r26	; 0x06
   1913a:	b7 83       	std	Z+7, r27	; 0x07
   1913c:	82 e9       	ldi	r24, 0x92	; 146
   1913e:	91 e4       	ldi	r25, 0x41	; 65
   19140:	a0 e0       	ldi	r26, 0x00	; 0
   19142:	81 83       	std	Z+1, r24	; 0x01
   19144:	92 83       	std	Z+2, r25	; 0x02
   19146:	a3 83       	std	Z+3, r26	; 0x03
   19148:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
   1914c:	fe 01       	movw	r30, r28
   1914e:	e2 59       	subi	r30, 0x92	; 146
   19150:	ff 4f       	sbci	r31, 0xFF	; 255
   19152:	80 81       	ld	r24, Z
   19154:	91 81       	ldd	r25, Z+1	; 0x01
   19156:	ed b7       	in	r30, 0x3d	; 61
   19158:	fe b7       	in	r31, 0x3e	; 62
   1915a:	95 83       	std	Z+5, r25	; 0x05
   1915c:	84 83       	std	Z+4, r24	; 0x04
   1915e:	86 e7       	ldi	r24, 0x76	; 118
   19160:	91 e4       	ldi	r25, 0x41	; 65
   19162:	a0 e0       	ldi	r26, 0x00	; 0
   19164:	81 83       	std	Z+1, r24	; 0x01
   19166:	92 83       	std	Z+2, r25	; 0x02
   19168:	a3 83       	std	Z+3, r26	; 0x03
   1916a:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
   1916e:	ce 01       	movw	r24, r28
   19170:	8c 59       	subi	r24, 0x9C	; 156
   19172:	9f 4f       	sbci	r25, 0xFF	; 255
   19174:	1a de       	rcall	.-972    	; 0x18daa <lif_lifbcd2timestr>
   19176:	ed b7       	in	r30, 0x3d	; 61
   19178:	fe b7       	in	r31, 0x3e	; 62
   1917a:	95 83       	std	Z+5, r25	; 0x05
   1917c:	84 83       	std	Z+4, r24	; 0x04
   1917e:	8c e5       	ldi	r24, 0x5C	; 92
   19180:	91 e4       	ldi	r25, 0x41	; 65
   19182:	a0 e0       	ldi	r26, 0x00	; 0
   19184:	81 83       	std	Z+1, r24	; 0x01
   19186:	92 83       	std	Z+2, r25	; 0x02
   19188:	a3 83       	std	Z+3, r26	; 0x03
   1918a:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
   1918e:	8a e5       	ldi	r24, 0x5A	; 90
   19190:	91 e4       	ldi	r25, 0x41	; 65
   19192:	a0 e0       	ldi	r26, 0x00	; 0
   19194:	ed b7       	in	r30, 0x3d	; 61
   19196:	fe b7       	in	r31, 0x3e	; 62
   19198:	81 83       	std	Z+1, r24	; 0x01
   1919a:	92 83       	std	Z+2, r25	; 0x02
   1919c:	a3 83       	std	Z+3, r26	; 0x03
   1919e:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
   191a2:	cd b7       	in	r28, 0x3d	; 61
   191a4:	de b7       	in	r29, 0x3e	; 62
   191a6:	27 96       	adiw	r28, 0x07	; 7
   191a8:	e2 e0       	ldi	r30, 0x02	; 2
   191aa:	0c 94 d0 e8 	jmp	0x1d1a0	; 0x1d1a0 <__epilogue_restores__+0x20>

000191ae <lif_check_volume>:
   191ae:	0f 93       	push	r16
   191b0:	1f 93       	push	r17
   191b2:	cf 93       	push	r28
   191b4:	df 93       	push	r29
   191b6:	ad b7       	in	r26, 0x3d	; 61
   191b8:	be b7       	in	r27, 0x3e	; 62
   191ba:	17 97       	sbiw	r26, 0x07	; 7
   191bc:	0f b6       	in	r0, 0x3f	; 63
   191be:	f8 94       	cli
   191c0:	be bf       	out	0x3e, r27	; 62
   191c2:	0f be       	out	0x3f, r0	; 63
   191c4:	ad bf       	out	0x3d, r26	; 61
   191c6:	ec 01       	movw	r28, r24
   191c8:	86 96       	adiw	r24, 0x26	; 38
   191ca:	e0 da       	rcall	.-2624   	; 0x1878c <lif_checkname>
   191cc:	89 2b       	or	r24, r25
   191ce:	89 f4       	brne	.+34     	; 0x191f2 <lif_check_volume+0x44>
   191d0:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   191d4:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   191d8:	92 ff       	sbrs	r25, 2
   191da:	0e c0       	rjmp	.+28     	; 0x191f8 <lif_check_volume+0x4a>
   191dc:	8b e3       	ldi	r24, 0x3B	; 59
   191de:	91 e4       	ldi	r25, 0x41	; 65
   191e0:	a0 e0       	ldi	r26, 0x00	; 0
   191e2:	ed b7       	in	r30, 0x3d	; 61
   191e4:	fe b7       	in	r31, 0x3e	; 62
   191e6:	81 83       	std	Z+1, r24	; 0x01
   191e8:	92 83       	std	Z+2, r25	; 0x02
   191ea:	a3 83       	std	Z+3, r26	; 0x03
   191ec:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
   191f0:	03 c0       	rjmp	.+6      	; 0x191f8 <lif_check_volume+0x4a>
   191f2:	81 e0       	ldi	r24, 0x01	; 1
   191f4:	90 e0       	ldi	r25, 0x00	; 0
   191f6:	02 c0       	rjmp	.+4      	; 0x191fc <lif_check_volume+0x4e>
   191f8:	80 e0       	ldi	r24, 0x00	; 0
   191fa:	90 e0       	ldi	r25, 0x00	; 0
   191fc:	29 a9       	ldd	r18, Y+49	; 0x31
   191fe:	3a a9       	ldd	r19, Y+50	; 0x32
   19200:	21 15       	cp	r18, r1
   19202:	f0 e1       	ldi	r31, 0x10	; 16
   19204:	3f 07       	cpc	r19, r31
   19206:	a1 f0       	breq	.+40     	; 0x19230 <lif_check_volume+0x82>
   19208:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1920c:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   19210:	92 ff       	sbrs	r25, 2
   19212:	0c c0       	rjmp	.+24     	; 0x1922c <lif_check_volume+0x7e>
   19214:	ed b7       	in	r30, 0x3d	; 61
   19216:	fe b7       	in	r31, 0x3e	; 62
   19218:	35 83       	std	Z+5, r19	; 0x05
   1921a:	24 83       	std	Z+4, r18	; 0x04
   1921c:	82 e0       	ldi	r24, 0x02	; 2
   1921e:	91 e4       	ldi	r25, 0x41	; 65
   19220:	a0 e0       	ldi	r26, 0x00	; 0
   19222:	81 83       	std	Z+1, r24	; 0x01
   19224:	92 83       	std	Z+2, r25	; 0x02
   19226:	a3 83       	std	Z+3, r26	; 0x03
   19228:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
   1922c:	80 e0       	ldi	r24, 0x00	; 0
   1922e:	90 e0       	ldi	r25, 0x00	; 0
   19230:	29 ad       	ldd	r18, Y+57	; 0x39
   19232:	3a ad       	ldd	r19, Y+58	; 0x3a
   19234:	22 30       	cpi	r18, 0x02	; 2
   19236:	31 05       	cpc	r19, r1
   19238:	a0 f0       	brcs	.+40     	; 0x19262 <lif_check_volume+0xb4>
   1923a:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1923e:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   19242:	92 ff       	sbrs	r25, 2
   19244:	0c c0       	rjmp	.+24     	; 0x1925e <lif_check_volume+0xb0>
   19246:	ed b7       	in	r30, 0x3d	; 61
   19248:	fe b7       	in	r31, 0x3e	; 62
   1924a:	35 83       	std	Z+5, r19	; 0x05
   1924c:	24 83       	std	Z+4, r18	; 0x04
   1924e:	8a ee       	ldi	r24, 0xEA	; 234
   19250:	90 e4       	ldi	r25, 0x40	; 64
   19252:	a0 e0       	ldi	r26, 0x00	; 0
   19254:	81 83       	std	Z+1, r24	; 0x01
   19256:	92 83       	std	Z+2, r25	; 0x02
   19258:	a3 83       	std	Z+3, r26	; 0x03
   1925a:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
   1925e:	80 e0       	ldi	r24, 0x00	; 0
   19260:	90 e0       	ldi	r25, 0x00	; 0
   19262:	2b a9       	ldd	r18, Y+51	; 0x33
   19264:	3c a9       	ldd	r19, Y+52	; 0x34
   19266:	23 2b       	or	r18, r19
   19268:	91 f0       	breq	.+36     	; 0x1928e <lif_check_volume+0xe0>
   1926a:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1926e:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   19272:	92 ff       	sbrs	r25, 2
   19274:	0a c0       	rjmp	.+20     	; 0x1928a <lif_check_volume+0xdc>
   19276:	81 eb       	ldi	r24, 0xB1	; 177
   19278:	90 e4       	ldi	r25, 0x40	; 64
   1927a:	a0 e0       	ldi	r26, 0x00	; 0
   1927c:	ed b7       	in	r30, 0x3d	; 61
   1927e:	fe b7       	in	r31, 0x3e	; 62
   19280:	81 83       	std	Z+1, r24	; 0x01
   19282:	92 83       	std	Z+2, r25	; 0x02
   19284:	a3 83       	std	Z+3, r26	; 0x03
   19286:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
   1928a:	80 e0       	ldi	r24, 0x00	; 0
   1928c:	90 e0       	ldi	r25, 0x00	; 0
   1928e:	2b ad       	ldd	r18, Y+59	; 0x3b
   19290:	3c ad       	ldd	r19, Y+60	; 0x3c
   19292:	23 2b       	or	r18, r19
   19294:	91 f0       	breq	.+36     	; 0x192ba <lif_check_volume+0x10c>
   19296:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1929a:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1929e:	92 ff       	sbrs	r25, 2
   192a0:	0a c0       	rjmp	.+20     	; 0x192b6 <lif_check_volume+0x108>
   192a2:	88 e7       	ldi	r24, 0x78	; 120
   192a4:	90 e4       	ldi	r25, 0x40	; 64
   192a6:	a0 e0       	ldi	r26, 0x00	; 0
   192a8:	ed b7       	in	r30, 0x3d	; 61
   192aa:	fe b7       	in	r31, 0x3e	; 62
   192ac:	81 83       	std	Z+1, r24	; 0x01
   192ae:	92 83       	std	Z+2, r25	; 0x02
   192b0:	a3 83       	std	Z+3, r26	; 0x03
   192b2:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
   192b6:	80 e0       	ldi	r24, 0x00	; 0
   192b8:	90 e0       	ldi	r25, 0x00	; 0
   192ba:	4d a5       	ldd	r20, Y+45	; 0x2d
   192bc:	5e a5       	ldd	r21, Y+46	; 0x2e
   192be:	6f a5       	ldd	r22, Y+47	; 0x2f
   192c0:	78 a9       	ldd	r23, Y+48	; 0x30
   192c2:	45 2b       	or	r20, r21
   192c4:	46 2b       	or	r20, r22
   192c6:	47 2b       	or	r20, r23
   192c8:	b1 f4       	brne	.+44     	; 0x192f6 <lif_check_volume+0x148>
   192ca:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   192ce:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   192d2:	92 ff       	sbrs	r25, 2
   192d4:	0e c0       	rjmp	.+28     	; 0x192f2 <lif_check_volume+0x144>
   192d6:	ed b7       	in	r30, 0x3d	; 61
   192d8:	fe b7       	in	r31, 0x3e	; 62
   192da:	14 82       	std	Z+4, r1	; 0x04
   192dc:	15 82       	std	Z+5, r1	; 0x05
   192de:	16 82       	std	Z+6, r1	; 0x06
   192e0:	17 82       	std	Z+7, r1	; 0x07
   192e2:	83 e5       	ldi	r24, 0x53	; 83
   192e4:	90 e4       	ldi	r25, 0x40	; 64
   192e6:	a0 e0       	ldi	r26, 0x00	; 0
   192e8:	81 83       	std	Z+1, r24	; 0x01
   192ea:	92 83       	std	Z+2, r25	; 0x02
   192ec:	a3 83       	std	Z+3, r26	; 0x03
   192ee:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
   192f2:	80 e0       	ldi	r24, 0x00	; 0
   192f4:	90 e0       	ldi	r25, 0x00	; 0
   192f6:	4d a9       	ldd	r20, Y+53	; 0x35
   192f8:	5e a9       	ldd	r21, Y+54	; 0x36
   192fa:	6f a9       	ldd	r22, Y+55	; 0x37
   192fc:	78 ad       	ldd	r23, Y+56	; 0x38
   192fe:	45 2b       	or	r20, r21
   19300:	46 2b       	or	r20, r22
   19302:	47 2b       	or	r20, r23
   19304:	91 f4       	brne	.+36     	; 0x1932a <lif_check_volume+0x17c>
   19306:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1930a:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1930e:	92 ff       	sbrs	r25, 2
   19310:	0a c0       	rjmp	.+20     	; 0x19326 <lif_check_volume+0x178>
   19312:	84 e2       	ldi	r24, 0x24	; 36
   19314:	90 e4       	ldi	r25, 0x40	; 64
   19316:	a0 e0       	ldi	r26, 0x00	; 0
   19318:	ed b7       	in	r30, 0x3d	; 61
   1931a:	fe b7       	in	r31, 0x3e	; 62
   1931c:	81 83       	std	Z+1, r24	; 0x01
   1931e:	92 83       	std	Z+2, r25	; 0x02
   19320:	a3 83       	std	Z+3, r26	; 0x03
   19322:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
   19326:	80 e0       	ldi	r24, 0x00	; 0
   19328:	90 e0       	ldi	r25, 0x00	; 0
   1932a:	0d a5       	ldd	r16, Y+45	; 0x2d
   1932c:	1e a5       	ldd	r17, Y+46	; 0x2e
   1932e:	2f a5       	ldd	r18, Y+47	; 0x2f
   19330:	38 a9       	ldd	r19, Y+48	; 0x30
   19332:	4d a9       	ldd	r20, Y+53	; 0x35
   19334:	5e a9       	ldd	r21, Y+54	; 0x36
   19336:	6f a9       	ldd	r22, Y+55	; 0x37
   19338:	78 ad       	ldd	r23, Y+56	; 0x38
   1933a:	40 0f       	add	r20, r16
   1933c:	51 1f       	adc	r21, r17
   1933e:	62 1f       	adc	r22, r18
   19340:	73 1f       	adc	r23, r19
   19342:	0c 81       	ldd	r16, Y+4	; 0x04
   19344:	1d 81       	ldd	r17, Y+5	; 0x05
   19346:	2e 81       	ldd	r18, Y+6	; 0x06
   19348:	3f 81       	ldd	r19, Y+7	; 0x07
   1934a:	04 17       	cp	r16, r20
   1934c:	15 07       	cpc	r17, r21
   1934e:	26 07       	cpc	r18, r22
   19350:	37 07       	cpc	r19, r23
   19352:	90 f4       	brcc	.+36     	; 0x19378 <lif_check_volume+0x1ca>
   19354:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   19358:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1935c:	92 ff       	sbrs	r25, 2
   1935e:	0a c0       	rjmp	.+20     	; 0x19374 <lif_check_volume+0x1c6>
   19360:	88 ef       	ldi	r24, 0xF8	; 248
   19362:	9f e3       	ldi	r25, 0x3F	; 63
   19364:	a0 e0       	ldi	r26, 0x00	; 0
   19366:	ed b7       	in	r30, 0x3d	; 61
   19368:	fe b7       	in	r31, 0x3e	; 62
   1936a:	81 83       	std	Z+1, r24	; 0x01
   1936c:	92 83       	std	Z+2, r25	; 0x02
   1936e:	a3 83       	std	Z+3, r26	; 0x03
   19370:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
   19374:	80 e0       	ldi	r24, 0x00	; 0
   19376:	90 e0       	ldi	r25, 0x00	; 0
   19378:	cd b7       	in	r28, 0x3d	; 61
   1937a:	de b7       	in	r29, 0x3e	; 62
   1937c:	27 96       	adiw	r28, 0x07	; 7
   1937e:	e4 e0       	ldi	r30, 0x04	; 4
   19380:	0c 94 ce e8 	jmp	0x1d19c	; 0x1d19c <__epilogue_restores__+0x1c>

00019384 <lif_check_dir>:
   19384:	a5 e1       	ldi	r26, 0x15	; 21
   19386:	b0 e0       	ldi	r27, 0x00	; 0
   19388:	e8 ec       	ldi	r30, 0xC8	; 200
   1938a:	f9 ec       	ldi	r31, 0xC9	; 201
   1938c:	0c 94 a4 e8 	jmp	0x1d148	; 0x1d148 <__prologue_saves__>
   19390:	6c 01       	movw	r12, r24
   19392:	2a e5       	ldi	r18, 0x5A	; 90
   19394:	c2 0e       	add	r12, r18
   19396:	d1 1c       	adc	r13, r1
   19398:	f6 01       	movw	r30, r12
   1939a:	20 81       	ld	r18, Z
   1939c:	31 81       	ldd	r19, Z+1	; 0x01
   1939e:	21 50       	subi	r18, 0x01	; 1
   193a0:	31 09       	sbc	r19, r1
   193a2:	2e 3f       	cpi	r18, 0xFE	; 254
   193a4:	3f 4f       	sbci	r19, 0xFF	; 255
   193a6:	08 f0       	brcs	.+2      	; 0x193aa <lif_check_dir+0x26>
   193a8:	8e c1       	rjmp	.+796    	; 0x196c6 <lif_check_dir+0x342>
   193aa:	8c 01       	movw	r16, r24
   193ac:	7c 01       	movw	r14, r24
   193ae:	2f e4       	ldi	r18, 0x4F	; 79
   193b0:	e2 0e       	add	r14, r18
   193b2:	f1 1c       	adc	r15, r1
   193b4:	c7 01       	movw	r24, r14
   193b6:	ea d9       	rcall	.-3116   	; 0x1878c <lif_checkname>
   193b8:	89 2b       	or	r24, r25
   193ba:	99 f4       	brne	.+38     	; 0x193e2 <lif_check_dir+0x5e>
   193bc:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   193c0:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   193c4:	92 ff       	sbrs	r25, 2
   193c6:	10 c0       	rjmp	.+32     	; 0x193e8 <lif_check_dir+0x64>
   193c8:	ed b7       	in	r30, 0x3d	; 61
   193ca:	fe b7       	in	r31, 0x3e	; 62
   193cc:	f5 82       	std	Z+5, r15	; 0x05
   193ce:	e4 82       	std	Z+4, r14	; 0x04
   193d0:	87 ed       	ldi	r24, 0xD7	; 215
   193d2:	9f e3       	ldi	r25, 0x3F	; 63
   193d4:	a0 e0       	ldi	r26, 0x00	; 0
   193d6:	81 83       	std	Z+1, r24	; 0x01
   193d8:	92 83       	std	Z+2, r25	; 0x02
   193da:	a3 83       	std	Z+3, r26	; 0x03
   193dc:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
   193e0:	03 c0       	rjmp	.+6      	; 0x193e8 <lif_check_dir+0x64>
   193e2:	f1 e0       	ldi	r31, 0x01	; 1
   193e4:	fd 8b       	std	Y+21, r31	; 0x15
   193e6:	01 c0       	rjmp	.+2      	; 0x193ea <lif_check_dir+0x66>
   193e8:	1d 8a       	std	Y+21, r1	; 0x15
   193ea:	1c 8a       	std	Y+20, r1	; 0x14
   193ec:	f8 01       	movw	r30, r16
   193ee:	84 85       	ldd	r24, Z+12	; 0x0c
   193f0:	95 85       	ldd	r25, Z+13	; 0x0d
   193f2:	a6 85       	ldd	r26, Z+14	; 0x0e
   193f4:	b7 85       	ldd	r27, Z+15	; 0x0f
   193f6:	00 97       	sbiw	r24, 0x00	; 0
   193f8:	a1 05       	cpc	r26, r1
   193fa:	b1 05       	cpc	r27, r1
   193fc:	39 f1       	breq	.+78     	; 0x1944c <lif_check_dir+0xc8>
   193fe:	e4 5a       	subi	r30, 0xA4	; 164
   19400:	ff 4f       	sbci	r31, 0xFF	; 255
   19402:	40 81       	ld	r20, Z
   19404:	51 81       	ldd	r21, Z+1	; 0x01
   19406:	62 81       	ldd	r22, Z+2	; 0x02
   19408:	73 81       	ldd	r23, Z+3	; 0x03
   1940a:	48 17       	cp	r20, r24
   1940c:	59 07       	cpc	r21, r25
   1940e:	6a 07       	cpc	r22, r26
   19410:	7b 07       	cpc	r23, r27
   19412:	e0 f4       	brcc	.+56     	; 0x1944c <lif_check_dir+0xc8>
   19414:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   19418:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1941c:	32 ff       	sbrs	r19, 2
   1941e:	14 c0       	rjmp	.+40     	; 0x19448 <lif_check_dir+0xc4>
   19420:	ed b7       	in	r30, 0x3d	; 61
   19422:	fe b7       	in	r31, 0x3e	; 62
   19424:	82 87       	std	Z+10, r24	; 0x0a
   19426:	93 87       	std	Z+11, r25	; 0x0b
   19428:	a4 87       	std	Z+12, r26	; 0x0c
   1942a:	b5 87       	std	Z+13, r27	; 0x0d
   1942c:	46 83       	std	Z+6, r20	; 0x06
   1942e:	57 83       	std	Z+7, r21	; 0x07
   19430:	60 87       	std	Z+8, r22	; 0x08
   19432:	71 87       	std	Z+9, r23	; 0x09
   19434:	f5 82       	std	Z+5, r15	; 0x05
   19436:	e4 82       	std	Z+4, r14	; 0x04
   19438:	83 e9       	ldi	r24, 0x93	; 147
   1943a:	9f e3       	ldi	r25, 0x3F	; 63
   1943c:	a0 e0       	ldi	r26, 0x00	; 0
   1943e:	81 83       	std	Z+1, r24	; 0x01
   19440:	92 83       	std	Z+2, r25	; 0x02
   19442:	a3 83       	std	Z+3, r26	; 0x03
   19444:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
   19448:	1d 8a       	std	Y+21, r1	; 0x15
   1944a:	1c 8a       	std	Y+20, r1	; 0x14
   1944c:	f8 01       	movw	r30, r16
   1944e:	44 81       	ldd	r20, Z+4	; 0x04
   19450:	55 81       	ldd	r21, Z+5	; 0x05
   19452:	66 81       	ldd	r22, Z+6	; 0x06
   19454:	77 81       	ldd	r23, Z+7	; 0x07
   19456:	41 15       	cp	r20, r1
   19458:	51 05       	cpc	r21, r1
   1945a:	61 05       	cpc	r22, r1
   1945c:	71 05       	cpc	r23, r1
   1945e:	81 f1       	breq	.+96     	; 0x194c0 <lif_check_dir+0x13c>
   19460:	e4 5a       	subi	r30, 0xA4	; 164
   19462:	ff 4f       	sbci	r31, 0xFF	; 255
   19464:	80 80       	ld	r8, Z
   19466:	91 80       	ldd	r9, Z+1	; 0x01
   19468:	a2 80       	ldd	r10, Z+2	; 0x02
   1946a:	b3 80       	ldd	r11, Z+3	; 0x03
   1946c:	34 96       	adiw	r30, 0x04	; 4
   1946e:	80 81       	ld	r24, Z
   19470:	91 81       	ldd	r25, Z+1	; 0x01
   19472:	a2 81       	ldd	r26, Z+2	; 0x02
   19474:	b3 81       	ldd	r27, Z+3	; 0x03
   19476:	88 0d       	add	r24, r8
   19478:	99 1d       	adc	r25, r9
   1947a:	aa 1d       	adc	r26, r10
   1947c:	bb 1d       	adc	r27, r11
   1947e:	48 17       	cp	r20, r24
   19480:	59 07       	cpc	r21, r25
   19482:	6a 07       	cpc	r22, r26
   19484:	7b 07       	cpc	r23, r27
   19486:	e0 f4       	brcc	.+56     	; 0x194c0 <lif_check_dir+0x13c>
   19488:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   1948c:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   19490:	32 ff       	sbrs	r19, 2
   19492:	14 c0       	rjmp	.+40     	; 0x194bc <lif_check_dir+0x138>
   19494:	ed b7       	in	r30, 0x3d	; 61
   19496:	fe b7       	in	r31, 0x3e	; 62
   19498:	42 87       	std	Z+10, r20	; 0x0a
   1949a:	53 87       	std	Z+11, r21	; 0x0b
   1949c:	64 87       	std	Z+12, r22	; 0x0c
   1949e:	75 87       	std	Z+13, r23	; 0x0d
   194a0:	86 83       	std	Z+6, r24	; 0x06
   194a2:	97 83       	std	Z+7, r25	; 0x07
   194a4:	a0 87       	std	Z+8, r26	; 0x08
   194a6:	b1 87       	std	Z+9, r27	; 0x09
   194a8:	f5 82       	std	Z+5, r15	; 0x05
   194aa:	e4 82       	std	Z+4, r14	; 0x04
   194ac:	82 e5       	ldi	r24, 0x52	; 82
   194ae:	9f e3       	ldi	r25, 0x3F	; 63
   194b0:	a0 e0       	ldi	r26, 0x00	; 0
   194b2:	81 83       	std	Z+1, r24	; 0x01
   194b4:	92 83       	std	Z+2, r25	; 0x02
   194b6:	a3 83       	std	Z+3, r26	; 0x03
   194b8:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
   194bc:	1d 8a       	std	Y+21, r1	; 0x15
   194be:	1c 8a       	std	Y+20, r1	; 0x14
   194c0:	f8 01       	movw	r30, r16
   194c2:	e6 59       	subi	r30, 0x96	; 150
   194c4:	ff 4f       	sbci	r31, 0xFF	; 255
   194c6:	80 81       	ld	r24, Z
   194c8:	91 81       	ldd	r25, Z+1	; 0x01
   194ca:	81 30       	cpi	r24, 0x01	; 1
   194cc:	f0 e8       	ldi	r31, 0x80	; 128
   194ce:	9f 07       	cpc	r25, r31
   194d0:	b1 f0       	breq	.+44     	; 0x194fe <lif_check_dir+0x17a>
   194d2:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   194d6:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   194da:	32 ff       	sbrs	r19, 2
   194dc:	0e c0       	rjmp	.+28     	; 0x194fa <lif_check_dir+0x176>
   194de:	ed b7       	in	r30, 0x3d	; 61
   194e0:	fe b7       	in	r31, 0x3e	; 62
   194e2:	97 83       	std	Z+7, r25	; 0x07
   194e4:	86 83       	std	Z+6, r24	; 0x06
   194e6:	f5 82       	std	Z+5, r15	; 0x05
   194e8:	e4 82       	std	Z+4, r14	; 0x04
   194ea:	84 e2       	ldi	r24, 0x24	; 36
   194ec:	9f e3       	ldi	r25, 0x3F	; 63
   194ee:	a0 e0       	ldi	r26, 0x00	; 0
   194f0:	81 83       	std	Z+1, r24	; 0x01
   194f2:	92 83       	std	Z+2, r25	; 0x02
   194f4:	a3 83       	std	Z+3, r26	; 0x03
   194f6:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
   194fa:	1d 8a       	std	Y+21, r1	; 0x15
   194fc:	1c 8a       	std	Y+20, r1	; 0x14
   194fe:	f6 01       	movw	r30, r12
   19500:	80 81       	ld	r24, Z
   19502:	91 81       	ldd	r25, Z+1	; 0x01
   19504:	8c 7f       	andi	r24, 0xFC	; 252
   19506:	80 31       	cpi	r24, 0x10	; 16
   19508:	90 4e       	sbci	r25, 0xE0	; 224
   1950a:	09 f0       	breq	.+2      	; 0x1950e <lif_check_dir+0x18a>
   1950c:	b1 c0       	rjmp	.+354    	; 0x19670 <lif_check_dir+0x2ec>
   1950e:	68 01       	movw	r12, r16
   19510:	2c e6       	ldi	r18, 0x6C	; 108
   19512:	c2 0e       	add	r12, r18
   19514:	d1 1c       	adc	r13, r1
   19516:	f6 01       	movw	r30, r12
   19518:	80 81       	ld	r24, Z
   1951a:	91 81       	ldd	r25, Z+1	; 0x01
   1951c:	00 97       	sbiw	r24, 0x00	; 0
   1951e:	09 f4       	brne	.+2      	; 0x19522 <lif_check_dir+0x19e>
   19520:	a7 c0       	rjmp	.+334    	; 0x19670 <lif_check_dir+0x2ec>
   19522:	4c 01       	movw	r8, r24
   19524:	a1 2c       	mov	r10, r1
   19526:	b1 2c       	mov	r11, r1
   19528:	77 27       	eor	r23, r23
   1952a:	6b 2d       	mov	r22, r11
   1952c:	5a 2d       	mov	r21, r10
   1952e:	49 2d       	mov	r20, r9
   19530:	9c 01       	movw	r18, r24
   19532:	33 27       	eor	r19, r19
   19534:	3b 8b       	std	Y+19, r19	; 0x13
   19536:	2a 8b       	std	Y+18, r18	; 0x12
   19538:	db 01       	movw	r26, r22
   1953a:	ca 01       	movw	r24, r20
   1953c:	23 2b       	or	r18, r19
   1953e:	19 f0       	breq	.+6      	; 0x19546 <lif_check_dir+0x1c2>
   19540:	01 96       	adiw	r24, 0x01	; 1
   19542:	a1 1d       	adc	r26, r1
   19544:	b1 1d       	adc	r27, r1
   19546:	18 01       	movw	r2, r16
   19548:	30 e6       	ldi	r19, 0x60	; 96
   1954a:	23 0e       	add	r2, r19
   1954c:	31 1c       	adc	r3, r1
   1954e:	f1 01       	movw	r30, r2
   19550:	40 80       	ld	r4, Z
   19552:	51 80       	ldd	r5, Z+1	; 0x01
   19554:	62 80       	ldd	r6, Z+2	; 0x02
   19556:	73 80       	ldd	r7, Z+3	; 0x03
   19558:	48 16       	cp	r4, r24
   1955a:	59 06       	cpc	r5, r25
   1955c:	6a 06       	cpc	r6, r26
   1955e:	7b 06       	cpc	r7, r27
   19560:	40 f5       	brcc	.+80     	; 0x195b2 <lif_check_dir+0x22e>
   19562:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   19566:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1956a:	32 ff       	sbrs	r19, 2
   1956c:	20 c0       	rjmp	.+64     	; 0x195ae <lif_check_dir+0x22a>
   1956e:	2a 89       	ldd	r18, Y+18	; 0x12
   19570:	3b 89       	ldd	r19, Y+19	; 0x13
   19572:	23 2b       	or	r18, r19
   19574:	21 f0       	breq	.+8      	; 0x1957e <lif_check_dir+0x1fa>
   19576:	4f 5f       	subi	r20, 0xFF	; 255
   19578:	5f 4f       	sbci	r21, 0xFF	; 255
   1957a:	6f 4f       	sbci	r22, 0xFF	; 255
   1957c:	7f 4f       	sbci	r23, 0xFF	; 255
   1957e:	ed b7       	in	r30, 0x3d	; 61
   19580:	fe b7       	in	r31, 0x3e	; 62
   19582:	46 86       	std	Z+14, r4	; 0x0e
   19584:	57 86       	std	Z+15, r5	; 0x0f
   19586:	60 8a       	std	Z+16, r6	; 0x10
   19588:	71 8a       	std	Z+17, r7	; 0x11
   1958a:	42 87       	std	Z+10, r20	; 0x0a
   1958c:	53 87       	std	Z+11, r21	; 0x0b
   1958e:	64 87       	std	Z+12, r22	; 0x0c
   19590:	75 87       	std	Z+13, r23	; 0x0d
   19592:	86 82       	std	Z+6, r8	; 0x06
   19594:	97 82       	std	Z+7, r9	; 0x07
   19596:	a0 86       	std	Z+8, r10	; 0x08
   19598:	b1 86       	std	Z+9, r11	; 0x09
   1959a:	f5 82       	std	Z+5, r15	; 0x05
   1959c:	e4 82       	std	Z+4, r14	; 0x04
   1959e:	89 ed       	ldi	r24, 0xD9	; 217
   195a0:	9e e3       	ldi	r25, 0x3E	; 62
   195a2:	a0 e0       	ldi	r26, 0x00	; 0
   195a4:	81 83       	std	Z+1, r24	; 0x01
   195a6:	92 83       	std	Z+2, r25	; 0x02
   195a8:	a3 83       	std	Z+3, r26	; 0x03
   195aa:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
   195ae:	1d 8a       	std	Y+21, r1	; 0x15
   195b0:	1c 8a       	std	Y+20, r1	; 0x14
   195b2:	f6 01       	movw	r30, r12
   195b4:	20 81       	ld	r18, Z
   195b6:	31 81       	ldd	r19, Z+1	; 0x01
   195b8:	a9 01       	movw	r20, r18
   195ba:	60 e0       	ldi	r22, 0x00	; 0
   195bc:	70 e0       	ldi	r23, 0x00	; 0
   195be:	bb 27       	eor	r27, r27
   195c0:	a7 2f       	mov	r26, r23
   195c2:	96 2f       	mov	r25, r22
   195c4:	85 2f       	mov	r24, r21
   195c6:	f9 01       	movw	r30, r18
   195c8:	ff 27       	eor	r31, r31
   195ca:	fb 8b       	std	Y+19, r31	; 0x13
   195cc:	ea 8b       	std	Y+18, r30	; 0x12
   195ce:	2c 01       	movw	r4, r24
   195d0:	3d 01       	movw	r6, r26
   195d2:	ef 2b       	or	r30, r31
   195d4:	29 f0       	breq	.+10     	; 0x195e0 <lif_check_dir+0x25c>
   195d6:	ff ef       	ldi	r31, 0xFF	; 255
   195d8:	4f 1a       	sub	r4, r31
   195da:	5f 0a       	sbc	r5, r31
   195dc:	6f 0a       	sbc	r6, r31
   195de:	7f 0a       	sbc	r7, r31
   195e0:	f1 01       	movw	r30, r2
   195e2:	80 80       	ld	r8, Z
   195e4:	91 80       	ldd	r9, Z+1	; 0x01
   195e6:	a2 80       	ldd	r10, Z+2	; 0x02
   195e8:	b3 80       	ldd	r11, Z+3	; 0x03
   195ea:	48 14       	cp	r4, r8
   195ec:	59 04       	cpc	r5, r9
   195ee:	6a 04       	cpc	r6, r10
   195f0:	7b 04       	cpc	r7, r11
   195f2:	28 f5       	brcc	.+74     	; 0x1963e <lif_check_dir+0x2ba>
   195f4:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   195f8:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   195fc:	32 ff       	sbrs	r19, 2
   195fe:	1f c0       	rjmp	.+62     	; 0x1963e <lif_check_dir+0x2ba>
   19600:	2a 89       	ldd	r18, Y+18	; 0x12
   19602:	3b 89       	ldd	r19, Y+19	; 0x13
   19604:	23 2b       	or	r18, r19
   19606:	19 f0       	breq	.+6      	; 0x1960e <lif_check_dir+0x28a>
   19608:	01 96       	adiw	r24, 0x01	; 1
   1960a:	a1 1d       	adc	r26, r1
   1960c:	b1 1d       	adc	r27, r1
   1960e:	ed b7       	in	r30, 0x3d	; 61
   19610:	fe b7       	in	r31, 0x3e	; 62
   19612:	86 86       	std	Z+14, r8	; 0x0e
   19614:	97 86       	std	Z+15, r9	; 0x0f
   19616:	a0 8a       	std	Z+16, r10	; 0x10
   19618:	b1 8a       	std	Z+17, r11	; 0x11
   1961a:	82 87       	std	Z+10, r24	; 0x0a
   1961c:	93 87       	std	Z+11, r25	; 0x0b
   1961e:	a4 87       	std	Z+12, r26	; 0x0c
   19620:	b5 87       	std	Z+13, r27	; 0x0d
   19622:	46 83       	std	Z+6, r20	; 0x06
   19624:	57 83       	std	Z+7, r21	; 0x07
   19626:	60 87       	std	Z+8, r22	; 0x08
   19628:	71 87       	std	Z+9, r23	; 0x09
   1962a:	f5 82       	std	Z+5, r15	; 0x05
   1962c:	e4 82       	std	Z+4, r14	; 0x04
   1962e:	8e e8       	ldi	r24, 0x8E	; 142
   19630:	9e e3       	ldi	r25, 0x3E	; 62
   19632:	a0 e0       	ldi	r26, 0x00	; 0
   19634:	81 83       	std	Z+1, r24	; 0x01
   19636:	92 83       	std	Z+2, r25	; 0x02
   19638:	a3 83       	std	Z+3, r26	; 0x03
   1963a:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
   1963e:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   19642:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   19646:	92 ff       	sbrs	r25, 2
   19648:	13 c0       	rjmp	.+38     	; 0x19670 <lif_check_dir+0x2ec>
   1964a:	f6 01       	movw	r30, r12
   1964c:	80 81       	ld	r24, Z
   1964e:	91 81       	ldd	r25, Z+1	; 0x01
   19650:	89 2b       	or	r24, r25
   19652:	71 f4       	brne	.+28     	; 0x19670 <lif_check_dir+0x2ec>
   19654:	ed b7       	in	r30, 0x3d	; 61
   19656:	fe b7       	in	r31, 0x3e	; 62
   19658:	f5 82       	std	Z+5, r15	; 0x05
   1965a:	e4 82       	std	Z+4, r14	; 0x04
   1965c:	83 e6       	ldi	r24, 0x63	; 99
   1965e:	9e e3       	ldi	r25, 0x3E	; 62
   19660:	a0 e0       	ldi	r26, 0x00	; 0
   19662:	81 83       	std	Z+1, r24	; 0x01
   19664:	92 83       	std	Z+2, r25	; 0x02
   19666:	a3 83       	std	Z+3, r26	; 0x03
   19668:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
   1966c:	1d 8a       	std	Y+21, r1	; 0x15
   1966e:	1c 8a       	std	Y+20, r1	; 0x14
   19670:	f8 01       	movw	r30, r16
   19672:	e2 59       	subi	r30, 0x92	; 146
   19674:	ff 4f       	sbci	r31, 0xFF	; 255
   19676:	80 81       	ld	r24, Z
   19678:	91 81       	ldd	r25, Z+1	; 0x01
   1967a:	81 15       	cp	r24, r1
   1967c:	f1 e0       	ldi	r31, 0x01	; 1
   1967e:	9f 07       	cpc	r25, r31
   19680:	29 f1       	breq	.+74     	; 0x196cc <lif_check_dir+0x348>
   19682:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   19686:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1968a:	32 ff       	sbrs	r19, 2
   1968c:	1f c0       	rjmp	.+62     	; 0x196cc <lif_check_dir+0x348>
   1968e:	20 e0       	ldi	r18, 0x00	; 0
   19690:	31 e0       	ldi	r19, 0x01	; 1
   19692:	ed b7       	in	r30, 0x3d	; 61
   19694:	fe b7       	in	r31, 0x3e	; 62
   19696:	33 87       	std	Z+11, r19	; 0x0b
   19698:	22 87       	std	Z+10, r18	; 0x0a
   1969a:	a0 e0       	ldi	r26, 0x00	; 0
   1969c:	b0 e0       	ldi	r27, 0x00	; 0
   1969e:	86 83       	std	Z+6, r24	; 0x06
   196a0:	97 83       	std	Z+7, r25	; 0x07
   196a2:	a0 87       	std	Z+8, r26	; 0x08
   196a4:	b1 87       	std	Z+9, r27	; 0x09
   196a6:	f8 01       	movw	r30, r16
   196a8:	80 81       	ld	r24, Z
   196aa:	91 81       	ldd	r25, Z+1	; 0x01
   196ac:	ed b7       	in	r30, 0x3d	; 61
   196ae:	fe b7       	in	r31, 0x3e	; 62
   196b0:	95 83       	std	Z+5, r25	; 0x05
   196b2:	84 83       	std	Z+4, r24	; 0x04
   196b4:	80 e3       	ldi	r24, 0x30	; 48
   196b6:	9e e3       	ldi	r25, 0x3E	; 62
   196b8:	a0 e0       	ldi	r26, 0x00	; 0
   196ba:	81 83       	std	Z+1, r24	; 0x01
   196bc:	92 83       	std	Z+2, r25	; 0x02
   196be:	a3 83       	std	Z+3, r26	; 0x03
   196c0:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
   196c4:	03 c0       	rjmp	.+6      	; 0x196cc <lif_check_dir+0x348>
   196c6:	81 e0       	ldi	r24, 0x01	; 1
   196c8:	90 e0       	ldi	r25, 0x00	; 0
   196ca:	02 c0       	rjmp	.+4      	; 0x196d0 <lif_check_dir+0x34c>
   196cc:	8d 89       	ldd	r24, Y+21	; 0x15
   196ce:	9c 89       	ldd	r25, Y+20	; 0x14
   196d0:	65 96       	adiw	r28, 0x15	; 21
   196d2:	e2 e1       	ldi	r30, 0x12	; 18
   196d4:	0c 94 c0 e8 	jmp	0x1d180	; 0x1d180 <__epilogue_restores__>

000196d8 <lif_close_volume>:
   196d8:	cf 93       	push	r28
   196da:	df 93       	push	r29
   196dc:	00 97       	sbiw	r24, 0x00	; 0
   196de:	f9 f0       	breq	.+62     	; 0x1971e <lif_close_volume+0x46>
   196e0:	ec 01       	movw	r28, r24
   196e2:	8a 81       	ldd	r24, Y+2	; 0x02
   196e4:	9b 81       	ldd	r25, Y+3	; 0x03
   196e6:	00 97       	sbiw	r24, 0x00	; 0
   196e8:	79 f0       	breq	.+30     	; 0x19708 <lif_close_volume+0x30>
   196ea:	22 e0       	ldi	r18, 0x02	; 2
   196ec:	30 e0       	ldi	r19, 0x00	; 0
   196ee:	40 e0       	ldi	r20, 0x00	; 0
   196f0:	50 e0       	ldi	r21, 0x00	; 0
   196f2:	ba 01       	movw	r22, r20
   196f4:	0e 94 16 7c 	call	0xf82c	; 0xf82c <fseek>
   196f8:	8a 81       	ldd	r24, Y+2	; 0x02
   196fa:	9b 81       	ldd	r25, Y+3	; 0x03
   196fc:	0e 94 fe 7d 	call	0xfbfc	; 0xfbfc <fclose>
   19700:	1b 82       	std	Y+3, r1	; 0x03
   19702:	1a 82       	std	Y+2, r1	; 0x02
   19704:	0e 94 f9 7c 	call	0xf9f2	; 0xf9f2 <sync>
   19708:	88 81       	ld	r24, Y
   1970a:	99 81       	ldd	r25, Y+1	; 0x01
   1970c:	00 97       	sbiw	r24, 0x00	; 0
   1970e:	11 f0       	breq	.+4      	; 0x19714 <lif_close_volume+0x3c>
   19710:	0e 94 04 c2 	call	0x18408	; 0x18408 <lif_free>
   19714:	ce 01       	movw	r24, r28
   19716:	7e db       	rcall	.-2308   	; 0x18e14 <lif_vol_clear>
   19718:	ce 01       	movw	r24, r28
   1971a:	0e 94 04 c2 	call	0x18408	; 0x18408 <lif_free>
   1971e:	df 91       	pop	r29
   19720:	cf 91       	pop	r28
   19722:	08 95       	ret

00019724 <lif_checkdirindex>:
   19724:	cf 92       	push	r12
   19726:	df 92       	push	r13
   19728:	ef 92       	push	r14
   1972a:	ff 92       	push	r15
   1972c:	cf 93       	push	r28
   1972e:	df 93       	push	r29
   19730:	ad b7       	in	r26, 0x3d	; 61
   19732:	be b7       	in	r27, 0x3e	; 62
   19734:	17 97       	sbiw	r26, 0x07	; 7
   19736:	0f b6       	in	r0, 0x3f	; 63
   19738:	f8 94       	cli
   1973a:	be bf       	out	0x3e, r27	; 62
   1973c:	0f be       	out	0x3f, r0	; 63
   1973e:	ad bf       	out	0x3d, r26	; 61
   19740:	9b 01       	movw	r18, r22
   19742:	77 fd       	sbrc	r23, 7
   19744:	25 c0       	rjmp	.+74     	; 0x19790 <lif_checkdirindex+0x6c>
   19746:	ab 01       	movw	r20, r22
   19748:	77 0f       	add	r23, r23
   1974a:	66 0b       	sbc	r22, r22
   1974c:	77 0b       	sbc	r23, r23
   1974e:	e5 e0       	ldi	r30, 0x05	; 5
   19750:	44 0f       	add	r20, r20
   19752:	55 1f       	adc	r21, r21
   19754:	66 1f       	adc	r22, r22
   19756:	77 1f       	adc	r23, r23
   19758:	ea 95       	dec	r30
   1975a:	d1 f7       	brne	.-12     	; 0x19750 <lif_checkdirindex+0x2c>
   1975c:	c5 2e       	mov	r12, r21
   1975e:	d6 2e       	mov	r13, r22
   19760:	e7 2e       	mov	r14, r23
   19762:	ff 24       	eor	r15, r15
   19764:	55 27       	eor	r21, r21
   19766:	66 27       	eor	r22, r22
   19768:	77 27       	eor	r23, r23
   1976a:	45 2b       	or	r20, r21
   1976c:	46 2b       	or	r20, r22
   1976e:	47 2b       	or	r20, r23
   19770:	29 f0       	breq	.+10     	; 0x1977c <lif_checkdirindex+0x58>
   19772:	4f ef       	ldi	r20, 0xFF	; 255
   19774:	c4 1a       	sub	r12, r20
   19776:	d4 0a       	sbc	r13, r20
   19778:	e4 0a       	sbc	r14, r20
   1977a:	f4 0a       	sbc	r15, r20
   1977c:	fc 01       	movw	r30, r24
   1977e:	45 a9       	ldd	r20, Z+53	; 0x35
   19780:	56 a9       	ldd	r21, Z+54	; 0x36
   19782:	67 a9       	ldd	r22, Z+55	; 0x37
   19784:	70 ad       	ldd	r23, Z+56	; 0x38
   19786:	4c 15       	cp	r20, r12
   19788:	5d 05       	cpc	r21, r13
   1978a:	6e 05       	cpc	r22, r14
   1978c:	7f 05       	cpc	r23, r15
   1978e:	08 f5       	brcc	.+66     	; 0x197d2 <lif_checkdirindex+0xae>
   19790:	ec 01       	movw	r28, r24
   19792:	ed b7       	in	r30, 0x3d	; 61
   19794:	fe b7       	in	r31, 0x3e	; 62
   19796:	37 83       	std	Z+7, r19	; 0x07
   19798:	26 83       	std	Z+6, r18	; 0x06
   1979a:	88 81       	ld	r24, Y
   1979c:	99 81       	ldd	r25, Y+1	; 0x01
   1979e:	95 83       	std	Z+5, r25	; 0x05
   197a0:	84 83       	std	Z+4, r24	; 0x04
   197a2:	8d e6       	ldi	r24, 0x6D	; 109
   197a4:	9d e3       	ldi	r25, 0x3D	; 61
   197a6:	a0 e0       	ldi	r26, 0x00	; 0
   197a8:	81 83       	std	Z+1, r24	; 0x01
   197aa:	92 83       	std	Z+2, r25	; 0x02
   197ac:	a3 83       	std	Z+3, r26	; 0x03
   197ae:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
   197b2:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   197b6:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   197ba:	c9 01       	movw	r24, r18
   197bc:	88 27       	eor	r24, r24
   197be:	94 70       	andi	r25, 0x04	; 4
   197c0:	32 ff       	sbrs	r19, 2
   197c2:	09 c0       	rjmp	.+18     	; 0x197d6 <lif_checkdirindex+0xb2>
   197c4:	65 ee       	ldi	r22, 0xE5	; 229
   197c6:	75 e1       	ldi	r23, 0x15	; 21
   197c8:	ce 01       	movw	r24, r28
   197ca:	2b db       	rcall	.-2474   	; 0x18e22 <lif_dump_vol>
   197cc:	80 e0       	ldi	r24, 0x00	; 0
   197ce:	90 e0       	ldi	r25, 0x00	; 0
   197d0:	02 c0       	rjmp	.+4      	; 0x197d6 <lif_checkdirindex+0xb2>
   197d2:	81 e0       	ldi	r24, 0x01	; 1
   197d4:	90 e0       	ldi	r25, 0x00	; 0
   197d6:	ad b7       	in	r26, 0x3d	; 61
   197d8:	be b7       	in	r27, 0x3e	; 62
   197da:	17 96       	adiw	r26, 0x07	; 7
   197dc:	0f b6       	in	r0, 0x3f	; 63
   197de:	f8 94       	cli
   197e0:	be bf       	out	0x3e, r27	; 62
   197e2:	0f be       	out	0x3f, r0	; 63
   197e4:	ad bf       	out	0x3d, r26	; 61
   197e6:	df 91       	pop	r29
   197e8:	cf 91       	pop	r28
   197ea:	ff 90       	pop	r15
   197ec:	ef 90       	pop	r14
   197ee:	df 90       	pop	r13
   197f0:	cf 90       	pop	r12
   197f2:	08 95       	ret

000197f4 <lif_readdirindex>:
   197f4:	a5 e2       	ldi	r26, 0x25	; 37
   197f6:	b0 e0       	ldi	r27, 0x00	; 0
   197f8:	e0 e0       	ldi	r30, 0x00	; 0
   197fa:	fc ec       	ldi	r31, 0xCC	; 204
   197fc:	0c 94 ae e8 	jmp	0x1d15c	; 0x1d15c <__prologue_saves__+0x14>
   19800:	7c 01       	movw	r14, r24
   19802:	6b 01       	movw	r12, r22
   19804:	8f df       	rcall	.-226    	; 0x19724 <lif_checkdirindex>
   19806:	89 2b       	or	r24, r25
   19808:	19 f4       	brne	.+6      	; 0x19810 <lif_readdirindex+0x1c>
   1980a:	00 e0       	ldi	r16, 0x00	; 0
   1980c:	10 e0       	ldi	r17, 0x00	; 0
   1980e:	54 c0       	rjmp	.+168    	; 0x198b8 <lif_readdirindex+0xc4>
   19810:	f7 01       	movw	r30, r14
   19812:	85 a5       	ldd	r24, Z+45	; 0x2d
   19814:	96 a5       	ldd	r25, Z+46	; 0x2e
   19816:	a7 a5       	ldd	r26, Z+47	; 0x2f
   19818:	b0 a9       	ldd	r27, Z+48	; 0x30
   1981a:	44 27       	eor	r20, r20
   1981c:	58 2f       	mov	r21, r24
   1981e:	69 2f       	mov	r22, r25
   19820:	7a 2f       	mov	r23, r26
   19822:	c6 01       	movw	r24, r12
   19824:	0d 2c       	mov	r0, r13
   19826:	00 0c       	add	r0, r0
   19828:	aa 0b       	sbc	r26, r26
   1982a:	bb 0b       	sbc	r27, r27
   1982c:	35 e0       	ldi	r19, 0x05	; 5
   1982e:	88 0f       	add	r24, r24
   19830:	99 1f       	adc	r25, r25
   19832:	aa 1f       	adc	r26, r26
   19834:	bb 1f       	adc	r27, r27
   19836:	3a 95       	dec	r19
   19838:	d1 f7       	brne	.-12     	; 0x1982e <lif_readdirindex+0x3a>
   1983a:	9a 01       	movw	r18, r20
   1983c:	ab 01       	movw	r20, r22
   1983e:	28 0f       	add	r18, r24
   19840:	39 1f       	adc	r19, r25
   19842:	4a 1f       	adc	r20, r26
   19844:	5b 1f       	adc	r21, r27
   19846:	00 e2       	ldi	r16, 0x20	; 32
   19848:	10 e0       	ldi	r17, 0x00	; 0
   1984a:	be 01       	movw	r22, r28
   1984c:	6a 5f       	subi	r22, 0xFA	; 250
   1984e:	7f 4f       	sbci	r23, 0xFF	; 255
   19850:	c7 01       	movw	r24, r14
   19852:	0e 94 bc c2 	call	0x18578	; 0x18578 <lif_read>
   19856:	60 32       	cpi	r22, 0x20	; 32
   19858:	71 05       	cpc	r23, r1
   1985a:	81 05       	cpc	r24, r1
   1985c:	91 05       	cpc	r25, r1
   1985e:	a8 f2       	brcs	.-86     	; 0x1980a <lif_readdirindex+0x16>
   19860:	b7 01       	movw	r22, r14
   19862:	ce 01       	movw	r24, r28
   19864:	06 96       	adiw	r24, 0x06	; 6
   19866:	80 d9       	rcall	.-3328   	; 0x18b68 <lif_str2dir>
   19868:	f7 01       	movw	r30, r14
   1986a:	e6 5a       	subi	r30, 0xA6	; 166
   1986c:	ff 4f       	sbci	r31, 0xFF	; 255
   1986e:	80 81       	ld	r24, Z
   19870:	91 81       	ldd	r25, Z+1	; 0x01
   19872:	01 96       	adiw	r24, 0x01	; 1
   19874:	19 f4       	brne	.+6      	; 0x1987c <lif_readdirindex+0x88>
   19876:	f7 01       	movw	r30, r14
   19878:	d3 a2       	std	Z+35, r13	; 0x23
   1987a:	c2 a2       	std	Z+34, r12	; 0x22
   1987c:	c7 01       	movw	r24, r14
   1987e:	82 dd       	rcall	.-1276   	; 0x19384 <lif_check_dir>
   19880:	8c 01       	movw	r16, r24
   19882:	89 2b       	or	r24, r25
   19884:	b9 f4       	brne	.+46     	; 0x198b4 <lif_readdirindex+0xc0>
   19886:	ed b7       	in	r30, 0x3d	; 61
   19888:	fe b7       	in	r31, 0x3e	; 62
   1988a:	d5 82       	std	Z+5, r13	; 0x05
   1988c:	c4 82       	std	Z+4, r12	; 0x04
   1988e:	8d e4       	ldi	r24, 0x4D	; 77
   19890:	9d e3       	ldi	r25, 0x3D	; 61
   19892:	a0 e0       	ldi	r26, 0x00	; 0
   19894:	81 83       	std	Z+1, r24	; 0x01
   19896:	92 83       	std	Z+2, r25	; 0x02
   19898:	a3 83       	std	Z+3, r26	; 0x03
   1989a:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
   1989e:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   198a2:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   198a6:	92 ff       	sbrs	r25, 2
   198a8:	b0 cf       	rjmp	.-160    	; 0x1980a <lif_readdirindex+0x16>
   198aa:	66 ef       	ldi	r22, 0xF6	; 246
   198ac:	75 e1       	ldi	r23, 0x15	; 21
   198ae:	c7 01       	movw	r24, r14
   198b0:	b8 da       	rcall	.-2704   	; 0x18e22 <lif_dump_vol>
   198b2:	02 c0       	rjmp	.+4      	; 0x198b8 <lif_readdirindex+0xc4>
   198b4:	01 e0       	ldi	r16, 0x01	; 1
   198b6:	10 e0       	ldi	r17, 0x00	; 0
   198b8:	c8 01       	movw	r24, r16
   198ba:	a5 96       	adiw	r28, 0x25	; 37
   198bc:	e8 e0       	ldi	r30, 0x08	; 8
   198be:	0c 94 ca e8 	jmp	0x1d194	; 0x1d194 <__epilogue_restores__+0x14>

000198c2 <lif_writedirindex>:
   198c2:	a0 e2       	ldi	r26, 0x20	; 32
   198c4:	b0 e0       	ldi	r27, 0x00	; 0
   198c6:	e7 e6       	ldi	r30, 0x67	; 103
   198c8:	fc ec       	ldi	r31, 0xCC	; 204
   198ca:	0c 94 ac e8 	jmp	0x1d158	; 0x1d158 <__prologue_saves__+0x10>
   198ce:	5c 01       	movw	r10, r24
   198d0:	6b 01       	movw	r12, r22
   198d2:	58 dd       	rcall	.-1360   	; 0x19384 <lif_check_dir>
   198d4:	7c 01       	movw	r14, r24
   198d6:	89 2b       	or	r24, r25
   198d8:	71 f4       	brne	.+28     	; 0x198f6 <lif_writedirindex+0x34>
   198da:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   198de:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   198e2:	92 fd       	sbrc	r25, 2
   198e4:	03 c0       	rjmp	.+6      	; 0x198ec <lif_writedirindex+0x2a>
   198e6:	e1 2c       	mov	r14, r1
   198e8:	f1 2c       	mov	r15, r1
   198ea:	42 c0       	rjmp	.+132    	; 0x19970 <lif_writedirindex+0xae>
   198ec:	67 e0       	ldi	r22, 0x07	; 7
   198ee:	76 e1       	ldi	r23, 0x16	; 22
   198f0:	c5 01       	movw	r24, r10
   198f2:	97 da       	rcall	.-2770   	; 0x18e22 <lif_dump_vol>
   198f4:	3d c0       	rjmp	.+122    	; 0x19970 <lif_writedirindex+0xae>
   198f6:	b6 01       	movw	r22, r12
   198f8:	c5 01       	movw	r24, r10
   198fa:	14 df       	rcall	.-472    	; 0x19724 <lif_checkdirindex>
   198fc:	89 2b       	or	r24, r25
   198fe:	99 f3       	breq	.-26     	; 0x198e6 <lif_writedirindex+0x24>
   19900:	f5 01       	movw	r30, r10
   19902:	e6 5a       	subi	r30, 0xA6	; 166
   19904:	ff 4f       	sbci	r31, 0xFF	; 255
   19906:	80 81       	ld	r24, Z
   19908:	91 81       	ldd	r25, Z+1	; 0x01
   1990a:	01 96       	adiw	r24, 0x01	; 1
   1990c:	19 f4       	brne	.+6      	; 0x19914 <lif_writedirindex+0x52>
   1990e:	f5 01       	movw	r30, r10
   19910:	d3 a2       	std	Z+35, r13	; 0x23
   19912:	c2 a2       	std	Z+34, r12	; 0x22
   19914:	f5 01       	movw	r30, r10
   19916:	85 a5       	ldd	r24, Z+45	; 0x2d
   19918:	96 a5       	ldd	r25, Z+46	; 0x2e
   1991a:	a7 a5       	ldd	r26, Z+47	; 0x2f
   1991c:	b0 a9       	ldd	r27, Z+48	; 0x30
   1991e:	ba 2f       	mov	r27, r26
   19920:	a9 2f       	mov	r26, r25
   19922:	98 2f       	mov	r25, r24
   19924:	88 27       	eor	r24, r24
   19926:	0d 2c       	mov	r0, r13
   19928:	00 0c       	add	r0, r0
   1992a:	ee 08       	sbc	r14, r14
   1992c:	ff 08       	sbc	r15, r15
   1992e:	35 e0       	ldi	r19, 0x05	; 5
   19930:	cc 0c       	add	r12, r12
   19932:	dd 1c       	adc	r13, r13
   19934:	ee 1c       	adc	r14, r14
   19936:	ff 1c       	adc	r15, r15
   19938:	3a 95       	dec	r19
   1993a:	d1 f7       	brne	.-12     	; 0x19930 <lif_writedirindex+0x6e>
   1993c:	c8 0e       	add	r12, r24
   1993e:	d9 1e       	adc	r13, r25
   19940:	ea 1e       	adc	r14, r26
   19942:	fb 1e       	adc	r15, r27
   19944:	be 01       	movw	r22, r28
   19946:	6f 5f       	subi	r22, 0xFF	; 255
   19948:	7f 4f       	sbci	r23, 0xFF	; 255
   1994a:	c5 01       	movw	r24, r10
   1994c:	a2 d8       	rcall	.-3772   	; 0x18a92 <lif_dir2str>
   1994e:	00 e2       	ldi	r16, 0x20	; 32
   19950:	10 e0       	ldi	r17, 0x00	; 0
   19952:	a7 01       	movw	r20, r14
   19954:	96 01       	movw	r18, r12
   19956:	be 01       	movw	r22, r28
   19958:	6f 5f       	subi	r22, 0xFF	; 255
   1995a:	7f 4f       	sbci	r23, 0xFF	; 255
   1995c:	c5 01       	movw	r24, r10
   1995e:	0e 94 0f c3 	call	0x1861e	; 0x1861e <lif_write>
   19962:	31 e0       	ldi	r19, 0x01	; 1
   19964:	20 e0       	ldi	r18, 0x00	; 0
   19966:	80 97       	sbiw	r24, 0x20	; 32
   19968:	0c f4       	brge	.+2      	; 0x1996c <lif_writedirindex+0xaa>
   1996a:	30 e0       	ldi	r19, 0x00	; 0
   1996c:	e3 2e       	mov	r14, r19
   1996e:	f2 2e       	mov	r15, r18
   19970:	c7 01       	movw	r24, r14
   19972:	a0 96       	adiw	r28, 0x20	; 32
   19974:	ea e0       	ldi	r30, 0x0A	; 10
   19976:	0c 94 c8 e8 	jmp	0x1d190	; 0x1d190 <__epilogue_restores__+0x10>

0001997a <lif_writedirEOF>:
   1997a:	0f 93       	push	r16
   1997c:	1f 93       	push	r17
   1997e:	cf 93       	push	r28
   19980:	df 93       	push	r29
   19982:	ec 01       	movw	r28, r24
   19984:	8b 01       	movw	r16, r22
   19986:	3e da       	rcall	.-2948   	; 0x18e04 <lif_dir_clear>
   19988:	fe 01       	movw	r30, r28
   1998a:	e6 5a       	subi	r30, 0xA6	; 166
   1998c:	ff 4f       	sbci	r31, 0xFF	; 255
   1998e:	8f ef       	ldi	r24, 0xFF	; 255
   19990:	9f ef       	ldi	r25, 0xFF	; 255
   19992:	91 83       	std	Z+1, r25	; 0x01
   19994:	80 83       	st	Z, r24
   19996:	1b a3       	std	Y+35, r17	; 0x23
   19998:	0a a3       	std	Y+34, r16	; 0x22
   1999a:	b8 01       	movw	r22, r16
   1999c:	ce 01       	movw	r24, r28
   1999e:	91 df       	rcall	.-222    	; 0x198c2 <lif_writedirindex>
   199a0:	df 91       	pop	r29
   199a2:	cf 91       	pop	r28
   199a4:	1f 91       	pop	r17
   199a6:	0f 91       	pop	r16
   199a8:	08 95       	ret

000199aa <lif_updatefree>:
/// @brief Update free space
/// @parameter[in] *LIF: LIF structure
/// @return: LIF or NULL on error
MEMSPACE
lif_t *lif_updatefree(lif_t *LIF)
{
   199aa:	2f 92       	push	r2
   199ac:	3f 92       	push	r3
   199ae:	4f 92       	push	r4
   199b0:	5f 92       	push	r5
   199b2:	6f 92       	push	r6
   199b4:	7f 92       	push	r7
   199b6:	8f 92       	push	r8
   199b8:	af 92       	push	r10
   199ba:	bf 92       	push	r11
   199bc:	cf 92       	push	r12
   199be:	df 92       	push	r13
   199c0:	ef 92       	push	r14
   199c2:	ff 92       	push	r15
   199c4:	0f 93       	push	r16
   199c6:	1f 93       	push	r17
   199c8:	cf 93       	push	r28
   199ca:	df 93       	push	r29
   199cc:	cd b7       	in	r28, 0x3d	; 61
   199ce:	de b7       	in	r29, 0x3e	; 62
   199d0:	2f 97       	sbiw	r28, 0x0f	; 15
   199d2:	0f b6       	in	r0, 0x3f	; 63
   199d4:	f8 94       	cli
   199d6:	de bf       	out	0x3e, r29	; 62
   199d8:	0f be       	out	0x3f, r0	; 63
   199da:	cd bf       	out	0x3d, r28	; 61
   199dc:	9f 87       	std	Y+15, r25	; 0x0f
   199de:	8e 87       	std	Y+14, r24	; 0x0e
    int index = 0;
    int purgeindex = -1;

// Start of free space
    uint32_t start = LIF->filestart;
   199e0:	fc 01       	movw	r30, r24
   199e2:	24 84       	ldd	r2, Z+12	; 0x0c
   199e4:	35 84       	ldd	r3, Z+13	; 0x0d
   199e6:	46 84       	ldd	r4, Z+14	; 0x0e
   199e8:	57 84       	ldd	r5, Z+15	; 0x0f
// Free sectors
    LIF->freesectors = LIF->filesectors;
   199ea:	80 89       	ldd	r24, Z+16	; 0x10
   199ec:	91 89       	ldd	r25, Z+17	; 0x11
   199ee:	a2 89       	ldd	r26, Z+18	; 0x12
   199f0:	b3 89       	ldd	r27, Z+19	; 0x13
   199f2:	80 8f       	std	Z+24, r24	; 0x18
   199f4:	91 8f       	std	Z+25, r25	; 0x19
   199f6:	a2 8f       	std	Z+26, r26	; 0x1a
   199f8:	b3 8f       	std	Z+27, r27	; 0x1b
// Used sectors
    LIF->usedsectors = 0;
   199fa:	14 8a       	std	Z+20, r1	; 0x14
   199fc:	15 8a       	std	Z+21, r1	; 0x15
   199fe:	16 8a       	std	Z+22, r1	; 0x16
   19a00:	17 8a       	std	Z+23, r1	; 0x17
// Purged files
    LIF->purged= 0;
   19a02:	17 8e       	std	Z+31, r1	; 0x1f
   19a04:	16 8e       	std	Z+30, r1	; 0x1e
// Files
    LIF->files = 0;
   19a06:	15 8e       	std	Z+29, r1	; 0x1d
   19a08:	14 8e       	std	Z+28, r1	; 0x1c
// Director pointer
    LIF->dirindex = 0;
   19a0a:	11 a2       	std	Z+33, r1	; 0x21
   19a0c:	10 a2       	std	Z+32, r1	; 0x20
// Directory EOF record
    LIF->EOFindex = 0;
   19a0e:	13 a2       	std	Z+35, r1	; 0x23
   19a10:	12 a2       	std	Z+34, r1	; 0x22
   19a12:	cc 24       	eor	r12, r12
   19a14:	c3 94       	inc	r12
   19a16:	d1 2c       	mov	r13, r1
/// @return: LIF or NULL on error
MEMSPACE
lif_t *lif_updatefree(lif_t *LIF)
{
    int index = 0;
    int purgeindex = -1;
   19a18:	0f ef       	ldi	r16, 0xFF	; 255
   19a1a:	1f ef       	ldi	r17, 0xFF	; 255
        if( !lif_readdirindex(LIF,index) )
        {
            return(NULL);
        }

        if(LIF->DIR.FileType == 0xffff)
   19a1c:	e6 5a       	subi	r30, 0xA6	; 166
   19a1e:	ff 4f       	sbci	r31, 0xFF	; 255
   19a20:	f9 87       	std	Y+9, r31	; 0x09
   19a22:	e8 87       	std	Y+8, r30	; 0x08
            LIF->purged++;
            ++index;
            continue;
        }
        purgeindex = -1;
        if(start > LIF->DIR.FileStartSector)
   19a24:	ae 84       	ldd	r10, Y+14	; 0x0e
   19a26:	bf 84       	ldd	r11, Y+15	; 0x0f
   19a28:	fc e5       	ldi	r31, 0x5C	; 92
   19a2a:	af 0e       	add	r10, r31
   19a2c:	b1 1c       	adc	r11, r1
        {
            if(debuglevel & LIF_DEBUG)
                printf("lif_update_free:[%s] error previous record file area overlaps this one:[%s]\n", LIF->name, LIF->DIR.filename);

        }
        LIF->usedsectors += LIF->DIR.FileSectors;
   19a2e:	8e 85       	ldd	r24, Y+14	; 0x0e
   19a30:	9f 85       	ldd	r25, Y+15	; 0x0f
   19a32:	80 5a       	subi	r24, 0xA0	; 160
   19a34:	9f 4f       	sbci	r25, 0xFF	; 255
   19a36:	9b 87       	std	Y+11, r25	; 0x0b
   19a38:	8a 87       	std	Y+10, r24	; 0x0a
        }
        purgeindex = -1;
        if(start > LIF->DIR.FileStartSector)
        {
            if(debuglevel & LIF_DEBUG)
                printf("lif_update_free:[%s] error previous record file area overlaps this one:[%s]\n", LIF->name, LIF->DIR.filename);
   19a3a:	ee 85       	ldd	r30, Y+14	; 0x0e
   19a3c:	ff 85       	ldd	r31, Y+15	; 0x0f
   19a3e:	e1 5b       	subi	r30, 0xB1	; 177
   19a40:	ff 4f       	sbci	r31, 0xFF	; 255
   19a42:	fd 87       	std	Y+13, r31	; 0x0d
   19a44:	ec 87       	std	Y+12, r30	; 0x0c
   19a46:	80 e0       	ldi	r24, 0x00	; 0
   19a48:	9d e3       	ldi	r25, 0x3D	; 61
   19a4a:	3c 01       	movw	r6, r24
   19a4c:	81 2c       	mov	r8, r1
   19a4e:	76 01       	movw	r14, r12
   19a50:	21 e0       	ldi	r18, 0x01	; 1
   19a52:	e2 1a       	sub	r14, r18
   19a54:	f1 08       	sbc	r15, r1
    LIF->EOFindex = 0;

/// Update free
    while(1)
    {
        if( !lif_readdirindex(LIF,index) )
   19a56:	b7 01       	movw	r22, r14
   19a58:	8e 85       	ldd	r24, Y+14	; 0x0e
   19a5a:	9f 85       	ldd	r25, Y+15	; 0x0f
   19a5c:	cb de       	rcall	.-618    	; 0x197f4 <lif_readdirindex>
   19a5e:	89 2b       	or	r24, r25
   19a60:	19 f4       	brne	.+6      	; 0x19a68 <lif_updatefree+0xbe>
        {
            return(NULL);
   19a62:	80 e0       	ldi	r24, 0x00	; 0
   19a64:	90 e0       	ldi	r25, 0x00	; 0
   19a66:	93 c0       	rjmp	.+294    	; 0x19b8e <lif_updatefree+0x1e4>
        }

        if(LIF->DIR.FileType == 0xffff)
   19a68:	e8 85       	ldd	r30, Y+8	; 0x08
   19a6a:	f9 85       	ldd	r31, Y+9	; 0x09
   19a6c:	80 81       	ld	r24, Z
   19a6e:	91 81       	ldd	r25, Z+1	; 0x01
   19a70:	8f 3f       	cpi	r24, 0xFF	; 255
   19a72:	ff ef       	ldi	r31, 0xFF	; 255
   19a74:	9f 07       	cpc	r25, r31
   19a76:	c1 f4       	brne	.+48     	; 0x19aa8 <lif_updatefree+0xfe>
        {
            LIF->EOFindex = index;
            if(purgeindex != -1)
            {
                LIF->EOFindex = purgeindex;
   19a78:	ee 85       	ldd	r30, Y+14	; 0x0e
   19a7a:	ff 85       	ldd	r31, Y+15	; 0x0f
        }

        if(LIF->DIR.FileType == 0xffff)
        {
            LIF->EOFindex = index;
            if(purgeindex != -1)
   19a7c:	0f 3f       	cpi	r16, 0xFF	; 255
   19a7e:	2f ef       	ldi	r18, 0xFF	; 255
   19a80:	12 07       	cpc	r17, r18
   19a82:	09 f4       	brne	.+2      	; 0x19a86 <lif_updatefree+0xdc>
   19a84:	7a c0       	rjmp	.+244    	; 0x19b7a <lif_updatefree+0x1d0>
            {
                LIF->EOFindex = purgeindex;
   19a86:	13 a3       	std	Z+35, r17	; 0x23
   19a88:	02 a3       	std	Z+34, r16	; 0x22

// Adjust purged file count
                LIF->purged -= (index - purgeindex);
   19a8a:	e0 1a       	sub	r14, r16
   19a8c:	f1 0a       	sbc	r15, r17
   19a8e:	86 8d       	ldd	r24, Z+30	; 0x1e
   19a90:	97 8d       	ldd	r25, Z+31	; 0x1f
   19a92:	8e 19       	sub	r24, r14
   19a94:	9f 09       	sbc	r25, r15
   19a96:	97 8f       	std	Z+31, r25	; 0x1f
   19a98:	86 8f       	std	Z+30, r24	; 0x1e
// update EOF
                if(!lif_writedirEOF(LIF,purgeindex))
   19a9a:	b8 01       	movw	r22, r16
   19a9c:	cf 01       	movw	r24, r30
   19a9e:	6d df       	rcall	.-294    	; 0x1997a <lif_writedirEOF>
   19aa0:	89 2b       	or	r24, r25
   19aa2:	09 f0       	breq	.+2      	; 0x19aa6 <lif_updatefree+0xfc>
   19aa4:	6c c0       	rjmp	.+216    	; 0x19b7e <lif_updatefree+0x1d4>
   19aa6:	dd cf       	rjmp	.-70     	; 0x19a62 <lif_updatefree+0xb8>
                    return(NULL);
                }
            }
            break;
        }
        if(LIF->DIR.FileType == 0)
   19aa8:	89 2b       	or	r24, r25
   19aaa:	81 f4       	brne	.+32     	; 0x19acc <lif_updatefree+0x122>
        {
            if(purgeindex == -1)
   19aac:	0f 3f       	cpi	r16, 0xFF	; 255
   19aae:	ff ef       	ldi	r31, 0xFF	; 255
   19ab0:	1f 07       	cpc	r17, r31
   19ab2:	09 f4       	brne	.+2      	; 0x19ab6 <lif_updatefree+0x10c>
   19ab4:	87 01       	movw	r16, r14
                purgeindex = index;
            LIF->purged++;
   19ab6:	ee 85       	ldd	r30, Y+14	; 0x0e
   19ab8:	ff 85       	ldd	r31, Y+15	; 0x0f
   19aba:	86 8d       	ldd	r24, Z+30	; 0x1e
   19abc:	97 8d       	ldd	r25, Z+31	; 0x1f
   19abe:	01 96       	adiw	r24, 0x01	; 1
   19ac0:	97 8f       	std	Z+31, r25	; 0x1f
   19ac2:	86 8f       	std	Z+30, r24	; 0x1e
   19ac4:	ff ef       	ldi	r31, 0xFF	; 255
   19ac6:	cf 1a       	sub	r12, r31
   19ac8:	df 0a       	sbc	r13, r31
   19aca:	c1 cf       	rjmp	.-126    	; 0x19a4e <lif_updatefree+0xa4>
            ++index;
            continue;
        }
        purgeindex = -1;
        if(start > LIF->DIR.FileStartSector)
   19acc:	f5 01       	movw	r30, r10
   19ace:	80 81       	ld	r24, Z
   19ad0:	91 81       	ldd	r25, Z+1	; 0x01
   19ad2:	a2 81       	ldd	r26, Z+2	; 0x02
   19ad4:	b3 81       	ldd	r27, Z+3	; 0x03
   19ad6:	82 15       	cp	r24, r2
   19ad8:	93 05       	cpc	r25, r3
   19ada:	a4 05       	cpc	r26, r4
   19adc:	b5 05       	cpc	r27, r5
   19ade:	c8 f4       	brcc	.+50     	; 0x19b12 <lif_updatefree+0x168>
        {
            if(debuglevel & LIF_DEBUG)
   19ae0:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   19ae4:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   19ae8:	92 ff       	sbrs	r25, 2
   19aea:	13 c0       	rjmp	.+38     	; 0x19b12 <lif_updatefree+0x168>
                printf("lif_update_free:[%s] error previous record file area overlaps this one:[%s]\n", LIF->name, LIF->DIR.filename);
   19aec:	8c 85       	ldd	r24, Y+12	; 0x0c
   19aee:	9d 85       	ldd	r25, Y+13	; 0x0d
   19af0:	ed b7       	in	r30, 0x3d	; 61
   19af2:	fe b7       	in	r31, 0x3e	; 62
   19af4:	97 83       	std	Z+7, r25	; 0x07
   19af6:	86 83       	std	Z+6, r24	; 0x06
   19af8:	ee 85       	ldd	r30, Y+14	; 0x0e
   19afa:	ff 85       	ldd	r31, Y+15	; 0x0f
   19afc:	80 81       	ld	r24, Z
   19afe:	91 81       	ldd	r25, Z+1	; 0x01
   19b00:	ed b7       	in	r30, 0x3d	; 61
   19b02:	fe b7       	in	r31, 0x3e	; 62
   19b04:	95 83       	std	Z+5, r25	; 0x05
   19b06:	84 83       	std	Z+4, r24	; 0x04
   19b08:	61 82       	std	Z+1, r6	; 0x01
   19b0a:	72 82       	std	Z+2, r7	; 0x02
   19b0c:	83 82       	std	Z+3, r8	; 0x03
   19b0e:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>

        }
        LIF->usedsectors += LIF->DIR.FileSectors;
   19b12:	ea 85       	ldd	r30, Y+10	; 0x0a
   19b14:	fb 85       	ldd	r31, Y+11	; 0x0b
   19b16:	80 81       	ld	r24, Z
   19b18:	91 81       	ldd	r25, Z+1	; 0x01
   19b1a:	a2 81       	ldd	r26, Z+2	; 0x02
   19b1c:	b3 81       	ldd	r27, Z+3	; 0x03
   19b1e:	ee 85       	ldd	r30, Y+14	; 0x0e
   19b20:	ff 85       	ldd	r31, Y+15	; 0x0f
   19b22:	44 89       	ldd	r20, Z+20	; 0x14
   19b24:	55 89       	ldd	r21, Z+21	; 0x15
   19b26:	66 89       	ldd	r22, Z+22	; 0x16
   19b28:	77 89       	ldd	r23, Z+23	; 0x17
   19b2a:	48 0f       	add	r20, r24
   19b2c:	59 1f       	adc	r21, r25
   19b2e:	6a 1f       	adc	r22, r26
   19b30:	7b 1f       	adc	r23, r27
   19b32:	44 8b       	std	Z+20, r20	; 0x14
   19b34:	55 8b       	std	Z+21, r21	; 0x15
   19b36:	66 8b       	std	Z+22, r22	; 0x16
   19b38:	77 8b       	std	Z+23, r23	; 0x17
        LIF->freesectors -= LIF->DIR.FileSectors;
   19b3a:	40 8d       	ldd	r20, Z+24	; 0x18
   19b3c:	51 8d       	ldd	r21, Z+25	; 0x19
   19b3e:	62 8d       	ldd	r22, Z+26	; 0x1a
   19b40:	73 8d       	ldd	r23, Z+27	; 0x1b
   19b42:	48 1b       	sub	r20, r24
   19b44:	59 0b       	sbc	r21, r25
   19b46:	6a 0b       	sbc	r22, r26
   19b48:	7b 0b       	sbc	r23, r27
   19b4a:	40 8f       	std	Z+24, r20	; 0x18
   19b4c:	51 8f       	std	Z+25, r21	; 0x19
   19b4e:	62 8f       	std	Z+26, r22	; 0x1a
   19b50:	73 8f       	std	Z+27, r23	; 0x1b
        LIF->files++;
   19b52:	24 8d       	ldd	r18, Z+28	; 0x1c
   19b54:	35 8d       	ldd	r19, Z+29	; 0x1d
   19b56:	2f 5f       	subi	r18, 0xFF	; 255
   19b58:	3f 4f       	sbci	r19, 0xFF	; 255
   19b5a:	35 8f       	std	Z+29, r19	; 0x1d
   19b5c:	24 8f       	std	Z+28, r18	; 0x1c
        ++index;
        start = LIF->DIR.FileStartSector + LIF->DIR.FileSectors;
   19b5e:	f5 01       	movw	r30, r10
   19b60:	40 81       	ld	r20, Z
   19b62:	51 81       	ldd	r21, Z+1	; 0x01
   19b64:	62 81       	ldd	r22, Z+2	; 0x02
   19b66:	73 81       	ldd	r23, Z+3	; 0x03
   19b68:	1c 01       	movw	r2, r24
   19b6a:	2d 01       	movw	r4, r26
   19b6c:	24 0e       	add	r2, r20
   19b6e:	35 1e       	adc	r3, r21
   19b70:	46 1e       	adc	r4, r22
   19b72:	57 1e       	adc	r5, r23
                purgeindex = index;
            LIF->purged++;
            ++index;
            continue;
        }
        purgeindex = -1;
   19b74:	0f ef       	ldi	r16, 0xFF	; 255
   19b76:	1f ef       	ldi	r17, 0xFF	; 255
   19b78:	a5 cf       	rjmp	.-182    	; 0x19ac4 <lif_updatefree+0x11a>
            return(NULL);
        }

        if(LIF->DIR.FileType == 0xffff)
        {
            LIF->EOFindex = index;
   19b7a:	f3 a2       	std	Z+35, r15	; 0x23
   19b7c:	e2 a2       	std	Z+34, r14	; 0x22
/// @return void
MEMSPACE
void lif_rewinddir(lif_t *LIF)
{
// Directory index
    LIF->dirindex = -1;
   19b7e:	8f ef       	ldi	r24, 0xFF	; 255
   19b80:	9f ef       	ldi	r25, 0xFF	; 255
   19b82:	ee 85       	ldd	r30, Y+14	; 0x0e
   19b84:	ff 85       	ldd	r31, Y+15	; 0x0f
   19b86:	91 a3       	std	Z+33, r25	; 0x21
   19b88:	80 a3       	std	Z+32, r24	; 0x20
        ++index;
        start = LIF->DIR.FileStartSector + LIF->DIR.FileSectors;
    }
// rewind
    lif_rewinddir(LIF);
    return(LIF);
   19b8a:	8e 85       	ldd	r24, Y+14	; 0x0e
   19b8c:	9f 85       	ldd	r25, Y+15	; 0x0f
}
   19b8e:	2f 96       	adiw	r28, 0x0f	; 15
   19b90:	0f b6       	in	r0, 0x3f	; 63
   19b92:	f8 94       	cli
   19b94:	de bf       	out	0x3e, r29	; 62
   19b96:	0f be       	out	0x3f, r0	; 63
   19b98:	cd bf       	out	0x3d, r28	; 61
   19b9a:	df 91       	pop	r29
   19b9c:	cf 91       	pop	r28
   19b9e:	1f 91       	pop	r17
   19ba0:	0f 91       	pop	r16
   19ba2:	ff 90       	pop	r15
   19ba4:	ef 90       	pop	r14
   19ba6:	df 90       	pop	r13
   19ba8:	cf 90       	pop	r12
   19baa:	bf 90       	pop	r11
   19bac:	af 90       	pop	r10
   19bae:	8f 90       	pop	r8
   19bb0:	7f 90       	pop	r7
   19bb2:	6f 90       	pop	r6
   19bb4:	5f 90       	pop	r5
   19bb6:	4f 90       	pop	r4
   19bb8:	3f 90       	pop	r3
   19bba:	2f 90       	pop	r2
   19bbc:	08 95       	ret

00019bbe <lif_create_volume>:
/// @param[in] dirstart:   Directory start sector
/// @param[in] dirsectors: Directory sectors
/// @return pointer to LIF structure
MEMSPACE
lif_t *lif_create_volume(char *imagename, char *liflabel, long dirstart, long dirsectors, long filesectors)
{
   19bbe:	a9 e2       	ldi	r26, 0x29	; 41
   19bc0:	b1 e0       	ldi	r27, 0x01	; 1
   19bc2:	e5 ee       	ldi	r30, 0xE5	; 229
   19bc4:	fd ec       	ldi	r31, 0xCD	; 205
   19bc6:	0c 94 a4 e8 	jmp	0x1d148	; 0x1d148 <__prologue_saves__>
   19bca:	4c 01       	movw	r8, r24
   19bcc:	3b 01       	movw	r6, r22
   19bce:	19 01       	movw	r2, r18
   19bd0:	2a 01       	movw	r4, r20
   19bd2:	ca 5d       	subi	r28, 0xDA	; 218
   19bd4:	de 4f       	sbci	r29, 0xFE	; 254
   19bd6:	e8 82       	st	Y, r14
   19bd8:	f9 82       	std	Y+1, r15	; 0x01
   19bda:	0a 83       	std	Y+2, r16	; 0x02
   19bdc:	1b 83       	std	Y+3, r17	; 0x03
   19bde:	c6 52       	subi	r28, 0x26	; 38
   19be0:	d1 40       	sbci	r29, 0x01	; 1
   19be2:	c2 5e       	subi	r28, 0xE2	; 226
   19be4:	de 4f       	sbci	r29, 0xFE	; 254
   19be6:	a8 82       	st	Y, r10
   19be8:	b9 82       	std	Y+1, r11	; 0x01
   19bea:	ca 82       	std	Y+2, r12	; 0x02
   19bec:	db 82       	std	Y+3, r13	; 0x03
   19bee:	ce 51       	subi	r28, 0x1E	; 30
   19bf0:	d1 40       	sbci	r29, 0x01	; 1
    long i;
    long offset;
    long count;
    uint8_t buffer[LIF_SECTOR_SIZE];

    time_t t = time(NULL);
   19bf2:	80 e0       	ldi	r24, 0x00	; 0
   19bf4:	90 e0       	ldi	r25, 0x00	; 0
   19bf6:	0e 94 fe 38 	call	0x71fc	; 0x71fc <time>
   19bfa:	5b 01       	movw	r10, r22
   19bfc:	6c 01       	movw	r12, r24

    lif_t *LIF = lif_calloc(sizeof(lif_t)+4);
   19bfe:	64 e7       	ldi	r22, 0x74	; 116
   19c00:	70 e0       	ldi	r23, 0x00	; 0
   19c02:	80 e0       	ldi	r24, 0x00	; 0
   19c04:	90 e0       	ldi	r25, 0x00	; 0
   19c06:	0e 94 ce c1 	call	0x1839c	; 0x1839c <lif_calloc>
   19c0a:	7c 01       	movw	r14, r24
    if(LIF == NULL)
   19c0c:	89 2b       	or	r24, r25
   19c0e:	09 f4       	brne	.+2      	; 0x19c12 <lif_create_volume+0x54>
   19c10:	b6 c2       	rjmp	.+1388   	; 0x1a17e <lif_create_volume+0x5c0>
        return(NULL);

    printf("Creating:%s, Label:[%s], Directory Start %ld, Directory Size: %ld, File Sectors:%ld\n",
   19c12:	c2 5e       	subi	r28, 0xE2	; 226
   19c14:	de 4f       	sbci	r29, 0xFE	; 254
   19c16:	28 81       	ld	r18, Y
   19c18:	39 81       	ldd	r19, Y+1	; 0x01
   19c1a:	4a 81       	ldd	r20, Y+2	; 0x02
   19c1c:	5b 81       	ldd	r21, Y+3	; 0x03
   19c1e:	ce 51       	subi	r28, 0x1E	; 30
   19c20:	d1 40       	sbci	r29, 0x01	; 1
   19c22:	ed b7       	in	r30, 0x3d	; 61
   19c24:	fe b7       	in	r31, 0x3e	; 62
   19c26:	20 8b       	std	Z+16, r18	; 0x10
   19c28:	31 8b       	std	Z+17, r19	; 0x11
   19c2a:	42 8b       	std	Z+18, r20	; 0x12
   19c2c:	53 8b       	std	Z+19, r21	; 0x13
   19c2e:	ca 5d       	subi	r28, 0xDA	; 218
   19c30:	de 4f       	sbci	r29, 0xFE	; 254
   19c32:	28 81       	ld	r18, Y
   19c34:	39 81       	ldd	r19, Y+1	; 0x01
   19c36:	4a 81       	ldd	r20, Y+2	; 0x02
   19c38:	5b 81       	ldd	r21, Y+3	; 0x03
   19c3a:	c6 52       	subi	r28, 0x26	; 38
   19c3c:	d1 40       	sbci	r29, 0x01	; 1
   19c3e:	24 87       	std	Z+12, r18	; 0x0c
   19c40:	35 87       	std	Z+13, r19	; 0x0d
   19c42:	46 87       	std	Z+14, r20	; 0x0e
   19c44:	57 87       	std	Z+15, r21	; 0x0f
   19c46:	20 86       	std	Z+8, r2	; 0x08
   19c48:	31 86       	std	Z+9, r3	; 0x09
   19c4a:	42 86       	std	Z+10, r4	; 0x0a
   19c4c:	53 86       	std	Z+11, r5	; 0x0b
   19c4e:	77 82       	std	Z+7, r7	; 0x07
   19c50:	66 82       	std	Z+6, r6	; 0x06
   19c52:	95 82       	std	Z+5, r9	; 0x05
   19c54:	84 82       	std	Z+4, r8	; 0x04
   19c56:	8b ed       	ldi	r24, 0xDB	; 219
   19c58:	9d e3       	ldi	r25, 0x3D	; 61
   19c5a:	a0 e0       	ldi	r26, 0x00	; 0
   19c5c:	81 83       	std	Z+1, r24	; 0x01
   19c5e:	92 83       	std	Z+2, r25	; 0x02
   19c60:	a3 83       	std	Z+3, r26	; 0x03
   19c62:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
        imagename, liflabel, dirstart, dirsectors, filesectors );

    if(debuglevel & LIF_DEBUG)
   19c66:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   19c6a:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   19c6e:	92 ff       	sbrs	r25, 2
   19c70:	04 c0       	rjmp	.+8      	; 0x19c7a <lif_create_volume+0xbc>
        lif_dump_vol(LIF,"lif_create_volume");
   19c72:	69 e1       	ldi	r22, 0x19	; 25
   19c74:	76 e1       	ldi	r23, 0x16	; 22
   19c76:	c7 01       	movw	r24, r14
   19c78:	d4 d8       	rcall	.-3672   	; 0x18e22 <lif_dump_vol>

    lif_image_clear(LIF);
   19c7a:	c7 01       	movw	r24, r14
   19c7c:	bd d8       	rcall	.-3718   	; 0x18df8 <lif_image_clear>

// Initialize volume header
    LIF->VOL.LIFid = 0x8000;
   19c7e:	80 e0       	ldi	r24, 0x00	; 0
   19c80:	90 e8       	ldi	r25, 0x80	; 128
   19c82:	f7 01       	movw	r30, r14
   19c84:	95 a3       	std	Z+37, r25	; 0x25
   19c86:	84 a3       	std	Z+36, r24	; 0x24
    lif_fixname(LIF->VOL.Label, liflabel, 6);
   19c88:	46 e0       	ldi	r20, 0x06	; 6
   19c8a:	50 e0       	ldi	r21, 0x00	; 0
   19c8c:	b3 01       	movw	r22, r6
   19c8e:	c7 01       	movw	r24, r14
   19c90:	86 96       	adiw	r24, 0x26	; 38
   19c92:	0e 94 00 c4 	call	0x18800	; 0x18800 <lif_fixname>
    LIF->VOL.DirStartSector = dirstart;
   19c96:	f7 01       	movw	r30, r14
   19c98:	25 a6       	std	Z+45, r2	; 0x2d
   19c9a:	36 a6       	std	Z+46, r3	; 0x2e
   19c9c:	47 a6       	std	Z+47, r4	; 0x2f
   19c9e:	50 aa       	std	Z+48, r5	; 0x30
    LIF->VOL.DirSectors = dirsectors;
   19ca0:	ca 5d       	subi	r28, 0xDA	; 218
   19ca2:	de 4f       	sbci	r29, 0xFE	; 254
   19ca4:	28 81       	ld	r18, Y
   19ca6:	39 81       	ldd	r19, Y+1	; 0x01
   19ca8:	4a 81       	ldd	r20, Y+2	; 0x02
   19caa:	5b 81       	ldd	r21, Y+3	; 0x03
   19cac:	c6 52       	subi	r28, 0x26	; 38
   19cae:	d1 40       	sbci	r29, 0x01	; 1
   19cb0:	25 ab       	std	Z+53, r18	; 0x35
   19cb2:	36 ab       	std	Z+54, r19	; 0x36
   19cb4:	47 ab       	std	Z+55, r20	; 0x37
   19cb6:	50 af       	std	Z+56, r21	; 0x38
    LIF->VOL.System3000LIFid = 0x1000;
   19cb8:	80 e0       	ldi	r24, 0x00	; 0
   19cba:	90 e1       	ldi	r25, 0x10	; 16
   19cbc:	92 ab       	std	Z+50, r25	; 0x32
   19cbe:	81 ab       	std	Z+49, r24	; 0x31
    LIF->VOL.tracks_per_side = 0;
   19cc0:	fd 96       	adiw	r30, 0x3d	; 61
   19cc2:	10 82       	st	Z, r1
   19cc4:	11 82       	std	Z+1, r1	; 0x01
   19cc6:	12 82       	std	Z+2, r1	; 0x02
   19cc8:	13 82       	std	Z+3, r1	; 0x03
    LIF->VOL.sides = 0;
   19cca:	34 96       	adiw	r30, 0x04	; 4
   19ccc:	10 82       	st	Z, r1
   19cce:	11 82       	std	Z+1, r1	; 0x01
   19cd0:	12 82       	std	Z+2, r1	; 0x02
   19cd2:	13 82       	std	Z+3, r1	; 0x03
    LIF->VOL.sectors_per_track = 0;
   19cd4:	34 96       	adiw	r30, 0x04	; 4
   19cd6:	10 82       	st	Z, r1
   19cd8:	11 82       	std	Z+1, r1	; 0x01
   19cda:	12 82       	std	Z+2, r1	; 0x02
   19cdc:	13 82       	std	Z+3, r1	; 0x03
///@brief 0 causes time to return the current date

    lif_time2lifbcd(t, LIF->VOL.date);
   19cde:	a7 01       	movw	r20, r14
   19ce0:	47 5b       	subi	r20, 0xB7	; 183
   19ce2:	5f 4f       	sbci	r21, 0xFF	; 255
   19ce4:	c6 01       	movw	r24, r12
   19ce6:	b5 01       	movw	r22, r10
   19ce8:	0e 94 25 c6 	call	0x18c4a	; 0x18c4a <lif_time2lifbcd>

// update LIF headers
    LIF->name = lif_stralloc(imagename);
   19cec:	c4 01       	movw	r24, r8
   19cee:	0e 94 19 c2 	call	0x18432	; 0x18432 <lif_stralloc>
   19cf2:	d7 01       	movw	r26, r14
   19cf4:	8d 93       	st	X+, r24
   19cf6:	9c 93       	st	X, r25
    if(LIF->name == NULL)
   19cf8:	89 2b       	or	r24, r25
   19cfa:	09 f4       	brne	.+2      	; 0x19cfe <lif_create_volume+0x140>
   19cfc:	35 c2       	rjmp	.+1130   	; 0x1a168 <lif_create_volume+0x5aa>
        lif_close_volume(LIF);
        return(NULL);
    }

// Initilize all LIF headers
    LIF->filesectors = filesectors;
   19cfe:	c2 5e       	subi	r28, 0xE2	; 226
   19d00:	de 4f       	sbci	r29, 0xFE	; 254
   19d02:	28 81       	ld	r18, Y
   19d04:	39 81       	ldd	r19, Y+1	; 0x01
   19d06:	4a 81       	ldd	r20, Y+2	; 0x02
   19d08:	5b 81       	ldd	r21, Y+3	; 0x03
   19d0a:	ce 51       	subi	r28, 0x1E	; 30
   19d0c:	d1 40       	sbci	r29, 0x01	; 1
   19d0e:	f7 01       	movw	r30, r14
   19d10:	20 8b       	std	Z+16, r18	; 0x10
   19d12:	31 8b       	std	Z+17, r19	; 0x11
   19d14:	42 8b       	std	Z+18, r20	; 0x12
   19d16:	53 8b       	std	Z+19, r21	; 0x13
    LIF->filestart = dirstart + dirsectors;
   19d18:	ca 5d       	subi	r28, 0xDA	; 218
   19d1a:	de 4f       	sbci	r29, 0xFE	; 254
   19d1c:	88 81       	ld	r24, Y
   19d1e:	99 81       	ldd	r25, Y+1	; 0x01
   19d20:	aa 81       	ldd	r26, Y+2	; 0x02
   19d22:	bb 81       	ldd	r27, Y+3	; 0x03
   19d24:	c6 52       	subi	r28, 0x26	; 38
   19d26:	d1 40       	sbci	r29, 0x01	; 1
   19d28:	82 0d       	add	r24, r2
   19d2a:	93 1d       	adc	r25, r3
   19d2c:	a4 1d       	adc	r26, r4
   19d2e:	b5 1d       	adc	r27, r5
   19d30:	84 87       	std	Z+12, r24	; 0x0c
   19d32:	95 87       	std	Z+13, r25	; 0x0d
   19d34:	a6 87       	std	Z+14, r26	; 0x0e
   19d36:	b7 87       	std	Z+15, r27	; 0x0f
    LIF->sectors = (LIF->filestart+LIF->filesectors);
   19d38:	82 0f       	add	r24, r18
   19d3a:	93 1f       	adc	r25, r19
   19d3c:	a4 1f       	adc	r26, r20
   19d3e:	b5 1f       	adc	r27, r21
   19d40:	84 83       	std	Z+4, r24	; 0x04
   19d42:	95 83       	std	Z+5, r25	; 0x05
   19d44:	a6 83       	std	Z+6, r26	; 0x06
   19d46:	b7 83       	std	Z+7, r27	; 0x07
    LIF->imagebytes = LIF->sectors * (long)LIF_SECTOR_SIZE;
   19d48:	ba 2f       	mov	r27, r26
   19d4a:	a9 2f       	mov	r26, r25
   19d4c:	98 2f       	mov	r25, r24
   19d4e:	88 27       	eor	r24, r24
   19d50:	80 87       	std	Z+8, r24	; 0x08
   19d52:	91 87       	std	Z+9, r25	; 0x09
   19d54:	a2 87       	std	Z+10, r26	; 0x0a
   19d56:	b3 87       	std	Z+11, r27	; 0x0b
    LIF->freesectors = LIF->filesectors;
   19d58:	20 8f       	std	Z+24, r18	; 0x18
   19d5a:	31 8f       	std	Z+25, r19	; 0x19
   19d5c:	42 8f       	std	Z+26, r20	; 0x1a
   19d5e:	53 8f       	std	Z+27, r21	; 0x1b
    LIF->usedsectors = 0;
   19d60:	14 8a       	std	Z+20, r1	; 0x14
   19d62:	15 8a       	std	Z+21, r1	; 0x15
   19d64:	16 8a       	std	Z+22, r1	; 0x16
   19d66:	17 8a       	std	Z+23, r1	; 0x17
    LIF->files = 0;
   19d68:	15 8e       	std	Z+29, r1	; 0x1d
   19d6a:	14 8e       	std	Z+28, r1	; 0x1c
    LIF->purged = 0;
   19d6c:	17 8e       	std	Z+31, r1	; 0x1f
   19d6e:	16 8e       	std	Z+30, r1	; 0x1e
    LIF->dirindex = 0;
   19d70:	11 a2       	std	Z+33, r1	; 0x21
   19d72:	10 a2       	std	Z+32, r1	; 0x20
    LIF->EOFindex = 0;
   19d74:	13 a2       	std	Z+35, r1	; 0x23
   19d76:	12 a2       	std	Z+34, r1	; 0x22

    memset(buffer,0,LIF_SECTOR_SIZE);
   19d78:	61 2c       	mov	r6, r1
   19d7a:	77 24       	eor	r7, r7
   19d7c:	73 94       	inc	r7
   19d7e:	9e 01       	movw	r18, r28
   19d80:	2c 5e       	subi	r18, 0xEC	; 236
   19d82:	3f 4f       	sbci	r19, 0xFF	; 255
   19d84:	49 01       	movw	r8, r18
   19d86:	d9 01       	movw	r26, r18
   19d88:	f3 01       	movw	r30, r6
   19d8a:	1d 92       	st	X+, r1
   19d8c:	31 97       	sbiw	r30, 0x01	; 1
   19d8e:	e9 f7       	brne	.-6      	; 0x19d8a <lif_create_volume+0x1cc>

    lif_vol2str(LIF,buffer);
   19d90:	b9 01       	movw	r22, r18
   19d92:	c7 01       	movw	r24, r14
   19d94:	0e 94 3d c4 	call	0x1887a	; 0x1887a <lif_vol2str>

// Write Volume header
    LIF->fp = lif_open(LIF->name,"wb+");
   19d98:	64 e0       	ldi	r22, 0x04	; 4
   19d9a:	79 e0       	ldi	r23, 0x09	; 9
   19d9c:	d7 01       	movw	r26, r14
   19d9e:	8d 91       	ld	r24, X+
   19da0:	9c 91       	ld	r25, X
   19da2:	0e 94 38 c2 	call	0x18470	; 0x18470 <lif_open>
   19da6:	f7 01       	movw	r30, r14
   19da8:	93 83       	std	Z+3, r25	; 0x03
   19daa:	82 83       	std	Z+2, r24	; 0x02
    if(LIF->fp == NULL)
   19dac:	89 2b       	or	r24, r25
   19dae:	09 f4       	brne	.+2      	; 0x19db2 <lif_create_volume+0x1f4>
   19db0:	db c1       	rjmp	.+950    	; 0x1a168 <lif_create_volume+0x5aa>
    }

    offset = 0;
    count = 0;

    size = lif_write(LIF, buffer, offset, LIF_SECTOR_SIZE);
   19db2:	00 e0       	ldi	r16, 0x00	; 0
   19db4:	11 e0       	ldi	r17, 0x01	; 1
   19db6:	20 e0       	ldi	r18, 0x00	; 0
   19db8:	30 e0       	ldi	r19, 0x00	; 0
   19dba:	a9 01       	movw	r20, r18
   19dbc:	b4 01       	movw	r22, r8
   19dbe:	c7 01       	movw	r24, r14
   19dc0:	0e 94 0f c3 	call	0x1861e	; 0x1861e <lif_write>
   19dc4:	9c 01       	movw	r18, r24
   19dc6:	99 0f       	add	r25, r25
   19dc8:	44 0b       	sbc	r20, r20
   19dca:	55 0b       	sbc	r21, r21
   19dcc:	ca 5e       	subi	r28, 0xEA	; 234
   19dce:	de 4f       	sbci	r29, 0xFE	; 254
   19dd0:	28 83       	st	Y, r18
   19dd2:	39 83       	std	Y+1, r19	; 0x01
   19dd4:	4a 83       	std	Y+2, r20	; 0x02
   19dd6:	5b 83       	std	Y+3, r21	; 0x03
   19dd8:	c6 51       	subi	r28, 0x16	; 22
   19dda:	d1 40       	sbci	r29, 0x01	; 1

    if(size < LIF_SECTOR_SIZE)
   19ddc:	2f 3f       	cpi	r18, 0xFF	; 255
   19dde:	31 05       	cpc	r19, r1
   19de0:	41 05       	cpc	r20, r1
   19de2:	51 05       	cpc	r21, r1
   19de4:	09 f0       	breq	.+2      	; 0x19de8 <lif_create_volume+0x22a>
   19de6:	0c f4       	brge	.+2      	; 0x19dea <lif_create_volume+0x22c>
   19de8:	bf c1       	rjmp	.+894    	; 0x1a168 <lif_create_volume+0x5aa>
        return(NULL);
    }
    offset += size;
    ++count;

    memset(buffer,0,LIF_SECTOR_SIZE);
   19dea:	d4 01       	movw	r26, r8
   19dec:	f3 01       	movw	r30, r6
   19dee:	1d 92       	st	X+, r1
   19df0:	31 97       	sbiw	r30, 0x01	; 1
   19df2:	e9 f7       	brne	.-6      	; 0x19dee <lif_create_volume+0x230>

// Space BETWEEN Volume header and Directory area
    for(i=1;i<dirstart;++i)
   19df4:	21 e0       	ldi	r18, 0x01	; 1
   19df6:	30 e0       	ldi	r19, 0x00	; 0
   19df8:	40 e0       	ldi	r20, 0x00	; 0
   19dfa:	50 e0       	ldi	r21, 0x00	; 0
   19dfc:	c6 5e       	subi	r28, 0xE6	; 230
   19dfe:	de 4f       	sbci	r29, 0xFE	; 254
   19e00:	28 83       	st	Y, r18
   19e02:	39 83       	std	Y+1, r19	; 0x01
   19e04:	4a 83       	std	Y+2, r20	; 0x02
   19e06:	5b 83       	std	Y+3, r21	; 0x03
   19e08:	ca 51       	subi	r28, 0x1A	; 26
   19e0a:	d1 40       	sbci	r29, 0x01	; 1
   19e0c:	64 01       	movw	r12, r8
        {
            lif_close_volume(LIF);
            return(NULL);
        }
        offset += size;
        printf("\tWrote: %ld\r", count);
   19e0e:	8e ec       	ldi	r24, 0xCE	; 206
   19e10:	9d e3       	ldi	r25, 0x3D	; 61
   19e12:	3c 01       	movw	r6, r24
   19e14:	81 2c       	mov	r8, r1
    ++count;

    memset(buffer,0,LIF_SECTOR_SIZE);

// Space BETWEEN Volume header and Directory area
    for(i=1;i<dirstart;++i)
   19e16:	c6 5e       	subi	r28, 0xE6	; 230
   19e18:	de 4f       	sbci	r29, 0xFE	; 254
   19e1a:	88 81       	ld	r24, Y
   19e1c:	99 81       	ldd	r25, Y+1	; 0x01
   19e1e:	aa 81       	ldd	r26, Y+2	; 0x02
   19e20:	bb 81       	ldd	r27, Y+3	; 0x03
   19e22:	ca 51       	subi	r28, 0x1A	; 26
   19e24:	d1 40       	sbci	r29, 0x01	; 1
   19e26:	82 15       	cp	r24, r2
   19e28:	93 05       	cpc	r25, r3
   19e2a:	a4 05       	cpc	r26, r4
   19e2c:	b5 05       	cpc	r27, r5
   19e2e:	0c f0       	brlt	.+2      	; 0x19e32 <lif_create_volume+0x274>
   19e30:	55 c0       	rjmp	.+170    	; 0x19edc <lif_create_volume+0x31e>
    {
        size = lif_write(LIF, buffer, offset, LIF_SECTOR_SIZE);
   19e32:	00 e0       	ldi	r16, 0x00	; 0
   19e34:	11 e0       	ldi	r17, 0x01	; 1
   19e36:	ca 5e       	subi	r28, 0xEA	; 234
   19e38:	de 4f       	sbci	r29, 0xFE	; 254
   19e3a:	28 81       	ld	r18, Y
   19e3c:	39 81       	ldd	r19, Y+1	; 0x01
   19e3e:	4a 81       	ldd	r20, Y+2	; 0x02
   19e40:	5b 81       	ldd	r21, Y+3	; 0x03
   19e42:	c6 51       	subi	r28, 0x16	; 22
   19e44:	d1 40       	sbci	r29, 0x01	; 1
   19e46:	b6 01       	movw	r22, r12
   19e48:	c7 01       	movw	r24, r14
   19e4a:	0e 94 0f c3 	call	0x1861e	; 0x1861e <lif_write>
   19e4e:	09 2e       	mov	r0, r25
   19e50:	00 0c       	add	r0, r0
   19e52:	aa 0b       	sbc	r26, r26
   19e54:	bb 0b       	sbc	r27, r27
        if(size < LIF_SECTOR_SIZE)
   19e56:	8f 3f       	cpi	r24, 0xFF	; 255
   19e58:	91 05       	cpc	r25, r1
   19e5a:	a1 05       	cpc	r26, r1
   19e5c:	b1 05       	cpc	r27, r1
   19e5e:	09 f0       	breq	.+2      	; 0x19e62 <lif_create_volume+0x2a4>
   19e60:	0c f4       	brge	.+2      	; 0x19e64 <lif_create_volume+0x2a6>
   19e62:	82 c1       	rjmp	.+772    	; 0x1a168 <lif_create_volume+0x5aa>
        {
            lif_close_volume(LIF);
            return(NULL);
        }
        offset += size;
   19e64:	ca 5e       	subi	r28, 0xEA	; 234
   19e66:	de 4f       	sbci	r29, 0xFE	; 254
   19e68:	28 81       	ld	r18, Y
   19e6a:	39 81       	ldd	r19, Y+1	; 0x01
   19e6c:	4a 81       	ldd	r20, Y+2	; 0x02
   19e6e:	5b 81       	ldd	r21, Y+3	; 0x03
   19e70:	c6 51       	subi	r28, 0x16	; 22
   19e72:	d1 40       	sbci	r29, 0x01	; 1
   19e74:	28 0f       	add	r18, r24
   19e76:	39 1f       	adc	r19, r25
   19e78:	4a 1f       	adc	r20, r26
   19e7a:	5b 1f       	adc	r21, r27
   19e7c:	ca 5e       	subi	r28, 0xEA	; 234
   19e7e:	de 4f       	sbci	r29, 0xFE	; 254
   19e80:	28 83       	st	Y, r18
   19e82:	39 83       	std	Y+1, r19	; 0x01
   19e84:	4a 83       	std	Y+2, r20	; 0x02
   19e86:	5b 83       	std	Y+3, r21	; 0x03
   19e88:	c6 51       	subi	r28, 0x16	; 22
   19e8a:	d1 40       	sbci	r29, 0x01	; 1
        printf("\tWrote: %ld\r", count);
   19e8c:	c6 5e       	subi	r28, 0xE6	; 230
   19e8e:	de 4f       	sbci	r29, 0xFE	; 254
   19e90:	88 81       	ld	r24, Y
   19e92:	99 81       	ldd	r25, Y+1	; 0x01
   19e94:	aa 81       	ldd	r26, Y+2	; 0x02
   19e96:	bb 81       	ldd	r27, Y+3	; 0x03
   19e98:	ca 51       	subi	r28, 0x1A	; 26
   19e9a:	d1 40       	sbci	r29, 0x01	; 1
   19e9c:	ed b7       	in	r30, 0x3d	; 61
   19e9e:	fe b7       	in	r31, 0x3e	; 62
   19ea0:	84 83       	std	Z+4, r24	; 0x04
   19ea2:	95 83       	std	Z+5, r25	; 0x05
   19ea4:	a6 83       	std	Z+6, r26	; 0x06
   19ea6:	b7 83       	std	Z+7, r27	; 0x07
   19ea8:	61 82       	std	Z+1, r6	; 0x01
   19eaa:	72 82       	std	Z+2, r7	; 0x02
   19eac:	83 82       	std	Z+3, r8	; 0x03
   19eae:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
    ++count;

    memset(buffer,0,LIF_SECTOR_SIZE);

// Space BETWEEN Volume header and Directory area
    for(i=1;i<dirstart;++i)
   19eb2:	c6 5e       	subi	r28, 0xE6	; 230
   19eb4:	de 4f       	sbci	r29, 0xFE	; 254
   19eb6:	28 81       	ld	r18, Y
   19eb8:	39 81       	ldd	r19, Y+1	; 0x01
   19eba:	4a 81       	ldd	r20, Y+2	; 0x02
   19ebc:	5b 81       	ldd	r21, Y+3	; 0x03
   19ebe:	ca 51       	subi	r28, 0x1A	; 26
   19ec0:	d1 40       	sbci	r29, 0x01	; 1
   19ec2:	2f 5f       	subi	r18, 0xFF	; 255
   19ec4:	3f 4f       	sbci	r19, 0xFF	; 255
   19ec6:	4f 4f       	sbci	r20, 0xFF	; 255
   19ec8:	5f 4f       	sbci	r21, 0xFF	; 255
   19eca:	c6 5e       	subi	r28, 0xE6	; 230
   19ecc:	de 4f       	sbci	r29, 0xFE	; 254
   19ece:	28 83       	st	Y, r18
   19ed0:	39 83       	std	Y+1, r19	; 0x01
   19ed2:	4a 83       	std	Y+2, r20	; 0x02
   19ed4:	5b 83       	std	Y+3, r21	; 0x03
   19ed6:	ca 51       	subi	r28, 0x1A	; 26
   19ed8:	d1 40       	sbci	r29, 0x01	; 1
   19eda:	9d cf       	rjmp	.-198    	; 0x19e16 <lif_create_volume+0x258>
        printf("\tWrote: %ld\r", count);
        ++count;
    }

// Write Directory sectors
    lif_dir_clear(LIF);
   19edc:	c7 01       	movw	r24, r14
   19ede:	0e 94 02 c7 	call	0x18e04	; 0x18e04 <lif_dir_clear>
    LIF->DIR.FileType = 0xffff;
   19ee2:	8f ef       	ldi	r24, 0xFF	; 255
   19ee4:	9f ef       	ldi	r25, 0xFF	; 255
   19ee6:	f7 01       	movw	r30, r14
   19ee8:	e6 5a       	subi	r30, 0xA6	; 166
   19eea:	ff 4f       	sbci	r31, 0xFF	; 255
   19eec:	91 83       	std	Z+1, r25	; 0x01
   19eee:	80 83       	st	Z, r24
   19ef0:	46 01       	movw	r8, r12
   19ef2:	6e 01       	movw	r12, r28
   19ef4:	9c ee       	ldi	r25, 0xEC	; 236
   19ef6:	c9 1a       	sub	r12, r25
   19ef8:	9e ef       	ldi	r25, 0xFE	; 254
   19efa:	d9 0a       	sbc	r13, r25

    for(i=0;i<LIF_SECTOR_SIZE;i+=LIF_DIR_SIZE)
        lif_dir2str(LIF,buffer+i);
   19efc:	b4 01       	movw	r22, r8
   19efe:	c7 01       	movw	r24, r14
   19f00:	0e 94 49 c5 	call	0x18a92	; 0x18a92 <lif_dir2str>
   19f04:	a0 e2       	ldi	r26, 0x20	; 32
   19f06:	8a 0e       	add	r8, r26
   19f08:	91 1c       	adc	r9, r1

// Write Directory sectors
    lif_dir_clear(LIF);
    LIF->DIR.FileType = 0xffff;

    for(i=0;i<LIF_SECTOR_SIZE;i+=LIF_DIR_SIZE)
   19f0a:	c8 14       	cp	r12, r8
   19f0c:	d9 04       	cpc	r13, r9
   19f0e:	b1 f7       	brne	.-20     	; 0x19efc <lif_create_volume+0x33e>
   19f10:	a1 2c       	mov	r10, r1
   19f12:	b1 2c       	mov	r11, r1
   19f14:	65 01       	movw	r12, r10
   19f16:	fe 01       	movw	r30, r28
   19f18:	74 96       	adiw	r30, 0x14	; 20
   19f1a:	cc 5e       	subi	r28, 0xEC	; 236
   19f1c:	de 4f       	sbci	r29, 0xFE	; 254
   19f1e:	f9 83       	std	Y+1, r31	; 0x01
   19f20:	e8 83       	st	Y, r30
   19f22:	c4 51       	subi	r28, 0x14	; 20
   19f24:	d1 40       	sbci	r29, 0x01	; 1
        {
            lif_close_volume(LIF);
            return(NULL);
        }
        offset += size;
        if((count % 100) == 0)
   19f26:	84 e6       	ldi	r24, 0x64	; 100
   19f28:	28 2e       	mov	r2, r24
   19f2a:	31 2c       	mov	r3, r1
   19f2c:	41 2c       	mov	r4, r1
   19f2e:	51 2c       	mov	r5, r1
            printf("\tWrote: %ld\r", count);
   19f30:	81 ec       	ldi	r24, 0xC1	; 193
   19f32:	9d e3       	ldi	r25, 0x3D	; 61
   19f34:	3c 01       	movw	r6, r24
   19f36:	81 2c       	mov	r8, r1
   19f38:	c6 5e       	subi	r28, 0xE6	; 230
   19f3a:	de 4f       	sbci	r29, 0xFE	; 254
   19f3c:	28 81       	ld	r18, Y
   19f3e:	39 81       	ldd	r19, Y+1	; 0x01
   19f40:	4a 81       	ldd	r20, Y+2	; 0x02
   19f42:	5b 81       	ldd	r21, Y+3	; 0x03
   19f44:	ca 51       	subi	r28, 0x1A	; 26
   19f46:	d1 40       	sbci	r29, 0x01	; 1
   19f48:	2a 0d       	add	r18, r10
   19f4a:	3b 1d       	adc	r19, r11
   19f4c:	4c 1d       	adc	r20, r12
   19f4e:	5d 1d       	adc	r21, r13
   19f50:	ce 5d       	subi	r28, 0xDE	; 222
   19f52:	de 4f       	sbci	r29, 0xFE	; 254
   19f54:	28 83       	st	Y, r18
   19f56:	39 83       	std	Y+1, r19	; 0x01
   19f58:	4a 83       	std	Y+2, r20	; 0x02
   19f5a:	5b 83       	std	Y+3, r21	; 0x03
   19f5c:	c2 52       	subi	r28, 0x22	; 34
   19f5e:	d1 40       	sbci	r29, 0x01	; 1
    LIF->DIR.FileType = 0xffff;

    for(i=0;i<LIF_SECTOR_SIZE;i+=LIF_DIR_SIZE)
        lif_dir2str(LIF,buffer+i);

    for(i=0;i<dirsectors;++i)
   19f60:	ca 5d       	subi	r28, 0xDA	; 218
   19f62:	de 4f       	sbci	r29, 0xFE	; 254
   19f64:	88 81       	ld	r24, Y
   19f66:	99 81       	ldd	r25, Y+1	; 0x01
   19f68:	aa 81       	ldd	r26, Y+2	; 0x02
   19f6a:	bb 81       	ldd	r27, Y+3	; 0x03
   19f6c:	c6 52       	subi	r28, 0x26	; 38
   19f6e:	d1 40       	sbci	r29, 0x01	; 1
   19f70:	a8 16       	cp	r10, r24
   19f72:	b9 06       	cpc	r11, r25
   19f74:	ca 06       	cpc	r12, r26
   19f76:	db 06       	cpc	r13, r27
   19f78:	0c f0       	brlt	.+2      	; 0x19f7c <lif_create_volume+0x3be>
   19f7a:	58 c0       	rjmp	.+176    	; 0x1a02c <lif_create_volume+0x46e>
    {
        size = lif_write(LIF, buffer, offset, LIF_SECTOR_SIZE);
   19f7c:	00 e0       	ldi	r16, 0x00	; 0
   19f7e:	11 e0       	ldi	r17, 0x01	; 1
   19f80:	ca 5e       	subi	r28, 0xEA	; 234
   19f82:	de 4f       	sbci	r29, 0xFE	; 254
   19f84:	28 81       	ld	r18, Y
   19f86:	39 81       	ldd	r19, Y+1	; 0x01
   19f88:	4a 81       	ldd	r20, Y+2	; 0x02
   19f8a:	5b 81       	ldd	r21, Y+3	; 0x03
   19f8c:	c6 51       	subi	r28, 0x16	; 22
   19f8e:	d1 40       	sbci	r29, 0x01	; 1
   19f90:	be 01       	movw	r22, r28
   19f92:	6c 5e       	subi	r22, 0xEC	; 236
   19f94:	7f 4f       	sbci	r23, 0xFF	; 255
   19f96:	c7 01       	movw	r24, r14
   19f98:	0e 94 0f c3 	call	0x1861e	; 0x1861e <lif_write>
   19f9c:	09 2e       	mov	r0, r25
   19f9e:	00 0c       	add	r0, r0
   19fa0:	aa 0b       	sbc	r26, r26
   19fa2:	bb 0b       	sbc	r27, r27
        if(size < LIF_SECTOR_SIZE)
   19fa4:	8f 3f       	cpi	r24, 0xFF	; 255
   19fa6:	91 05       	cpc	r25, r1
   19fa8:	a1 05       	cpc	r26, r1
   19faa:	b1 05       	cpc	r27, r1
   19fac:	09 f0       	breq	.+2      	; 0x19fb0 <lif_create_volume+0x3f2>
   19fae:	0c f4       	brge	.+2      	; 0x19fb2 <lif_create_volume+0x3f4>
   19fb0:	db c0       	rjmp	.+438    	; 0x1a168 <lif_create_volume+0x5aa>
        {
            lif_close_volume(LIF);
            return(NULL);
        }
        offset += size;
   19fb2:	ca 5e       	subi	r28, 0xEA	; 234
   19fb4:	de 4f       	sbci	r29, 0xFE	; 254
   19fb6:	28 81       	ld	r18, Y
   19fb8:	39 81       	ldd	r19, Y+1	; 0x01
   19fba:	4a 81       	ldd	r20, Y+2	; 0x02
   19fbc:	5b 81       	ldd	r21, Y+3	; 0x03
   19fbe:	c6 51       	subi	r28, 0x16	; 22
   19fc0:	d1 40       	sbci	r29, 0x01	; 1
   19fc2:	28 0f       	add	r18, r24
   19fc4:	39 1f       	adc	r19, r25
   19fc6:	4a 1f       	adc	r20, r26
   19fc8:	5b 1f       	adc	r21, r27
   19fca:	ca 5e       	subi	r28, 0xEA	; 234
   19fcc:	de 4f       	sbci	r29, 0xFE	; 254
   19fce:	28 83       	st	Y, r18
   19fd0:	39 83       	std	Y+1, r19	; 0x01
   19fd2:	4a 83       	std	Y+2, r20	; 0x02
   19fd4:	5b 83       	std	Y+3, r21	; 0x03
   19fd6:	c6 51       	subi	r28, 0x16	; 22
   19fd8:	d1 40       	sbci	r29, 0x01	; 1
        if((count % 100) == 0)
   19fda:	ce 5d       	subi	r28, 0xDE	; 222
   19fdc:	de 4f       	sbci	r29, 0xFE	; 254
   19fde:	68 81       	ld	r22, Y
   19fe0:	79 81       	ldd	r23, Y+1	; 0x01
   19fe2:	8a 81       	ldd	r24, Y+2	; 0x02
   19fe4:	9b 81       	ldd	r25, Y+3	; 0x03
   19fe6:	c2 52       	subi	r28, 0x22	; 34
   19fe8:	d1 40       	sbci	r29, 0x01	; 1
   19fea:	a2 01       	movw	r20, r4
   19fec:	91 01       	movw	r18, r2
   19fee:	0e 94 59 e8 	call	0x1d0b2	; 0x1d0b2 <__divmodsi4>
   19ff2:	67 2b       	or	r22, r23
   19ff4:	68 2b       	or	r22, r24
   19ff6:	69 2b       	or	r22, r25
   19ff8:	99 f4       	brne	.+38     	; 0x1a020 <lif_create_volume+0x462>
            printf("\tWrote: %ld\r", count);
   19ffa:	ce 5d       	subi	r28, 0xDE	; 222
   19ffc:	de 4f       	sbci	r29, 0xFE	; 254
   19ffe:	88 81       	ld	r24, Y
   1a000:	99 81       	ldd	r25, Y+1	; 0x01
   1a002:	aa 81       	ldd	r26, Y+2	; 0x02
   1a004:	bb 81       	ldd	r27, Y+3	; 0x03
   1a006:	c2 52       	subi	r28, 0x22	; 34
   1a008:	d1 40       	sbci	r29, 0x01	; 1
   1a00a:	ed b7       	in	r30, 0x3d	; 61
   1a00c:	fe b7       	in	r31, 0x3e	; 62
   1a00e:	84 83       	std	Z+4, r24	; 0x04
   1a010:	95 83       	std	Z+5, r25	; 0x05
   1a012:	a6 83       	std	Z+6, r26	; 0x06
   1a014:	b7 83       	std	Z+7, r27	; 0x07
   1a016:	61 82       	std	Z+1, r6	; 0x01
   1a018:	72 82       	std	Z+2, r7	; 0x02
   1a01a:	83 82       	std	Z+3, r8	; 0x03
   1a01c:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
    LIF->DIR.FileType = 0xffff;

    for(i=0;i<LIF_SECTOR_SIZE;i+=LIF_DIR_SIZE)
        lif_dir2str(LIF,buffer+i);

    for(i=0;i<dirsectors;++i)
   1a020:	ff ef       	ldi	r31, 0xFF	; 255
   1a022:	af 1a       	sub	r10, r31
   1a024:	bf 0a       	sbc	r11, r31
   1a026:	cf 0a       	sbc	r12, r31
   1a028:	df 0a       	sbc	r13, r31
   1a02a:	86 cf       	rjmp	.-244    	; 0x19f38 <lif_create_volume+0x37a>
            printf("\tWrote: %ld\r", count);
        ++count;
    }

// File area sectors
    memset(buffer,0,LIF_SECTOR_SIZE);
   1a02c:	80 e0       	ldi	r24, 0x00	; 0
   1a02e:	91 e0       	ldi	r25, 0x01	; 1
   1a030:	cc 5e       	subi	r28, 0xEC	; 236
   1a032:	de 4f       	sbci	r29, 0xFE	; 254
   1a034:	a8 81       	ld	r26, Y
   1a036:	b9 81       	ldd	r27, Y+1	; 0x01
   1a038:	c4 51       	subi	r28, 0x14	; 20
   1a03a:	d1 40       	sbci	r29, 0x01	; 1
   1a03c:	fc 01       	movw	r30, r24
   1a03e:	1d 92       	st	X+, r1
   1a040:	31 97       	sbiw	r30, 0x01	; 1
   1a042:	e9 f7       	brne	.-6      	; 0x1a03e <lif_create_volume+0x480>
    for(i=0;i<filesectors;++i)
   1a044:	81 2c       	mov	r8, r1
   1a046:	91 2c       	mov	r9, r1
   1a048:	54 01       	movw	r10, r8
            lif_close_volume(LIF);
            return(NULL);
        }
        offset += size;
        if((count % 100) == 0)
            printf("\tWrote: %ld\r", count);
   1a04a:	84 eb       	ldi	r24, 0xB4	; 180
   1a04c:	9d e3       	ldi	r25, 0x3D	; 61
   1a04e:	9c 01       	movw	r18, r24
   1a050:	40 e0       	ldi	r20, 0x00	; 0
   1a052:	c6 5e       	subi	r28, 0xE6	; 230
   1a054:	de 4f       	sbci	r29, 0xFE	; 254
   1a056:	28 83       	st	Y, r18
   1a058:	39 83       	std	Y+1, r19	; 0x01
   1a05a:	4a 83       	std	Y+2, r20	; 0x02
   1a05c:	ca 51       	subi	r28, 0x1A	; 26
   1a05e:	d1 40       	sbci	r29, 0x01	; 1
   1a060:	ce 5d       	subi	r28, 0xDE	; 222
   1a062:	de 4f       	sbci	r29, 0xFE	; 254
   1a064:	48 80       	ld	r4, Y
   1a066:	59 80       	ldd	r5, Y+1	; 0x01
   1a068:	6a 80       	ldd	r6, Y+2	; 0x02
   1a06a:	7b 80       	ldd	r7, Y+3	; 0x03
   1a06c:	c2 52       	subi	r28, 0x22	; 34
   1a06e:	d1 40       	sbci	r29, 0x01	; 1
   1a070:	48 0c       	add	r4, r8
   1a072:	59 1c       	adc	r5, r9
   1a074:	6a 1c       	adc	r6, r10
   1a076:	7b 1c       	adc	r7, r11
        ++count;
    }

// File area sectors
    memset(buffer,0,LIF_SECTOR_SIZE);
    for(i=0;i<filesectors;++i)
   1a078:	c2 5e       	subi	r28, 0xE2	; 226
   1a07a:	de 4f       	sbci	r29, 0xFE	; 254
   1a07c:	28 81       	ld	r18, Y
   1a07e:	39 81       	ldd	r19, Y+1	; 0x01
   1a080:	4a 81       	ldd	r20, Y+2	; 0x02
   1a082:	5b 81       	ldd	r21, Y+3	; 0x03
   1a084:	ce 51       	subi	r28, 0x1E	; 30
   1a086:	d1 40       	sbci	r29, 0x01	; 1
   1a088:	82 16       	cp	r8, r18
   1a08a:	93 06       	cpc	r9, r19
   1a08c:	a4 06       	cpc	r10, r20
   1a08e:	b5 06       	cpc	r11, r21
   1a090:	0c f0       	brlt	.+2      	; 0x1a094 <lif_create_volume+0x4d6>
   1a092:	53 c0       	rjmp	.+166    	; 0x1a13a <lif_create_volume+0x57c>
    {
        size = lif_write(LIF, buffer, offset, LIF_SECTOR_SIZE);
   1a094:	00 e0       	ldi	r16, 0x00	; 0
   1a096:	11 e0       	ldi	r17, 0x01	; 1
   1a098:	ca 5e       	subi	r28, 0xEA	; 234
   1a09a:	de 4f       	sbci	r29, 0xFE	; 254
   1a09c:	28 81       	ld	r18, Y
   1a09e:	39 81       	ldd	r19, Y+1	; 0x01
   1a0a0:	4a 81       	ldd	r20, Y+2	; 0x02
   1a0a2:	5b 81       	ldd	r21, Y+3	; 0x03
   1a0a4:	c6 51       	subi	r28, 0x16	; 22
   1a0a6:	d1 40       	sbci	r29, 0x01	; 1
   1a0a8:	be 01       	movw	r22, r28
   1a0aa:	6c 5e       	subi	r22, 0xEC	; 236
   1a0ac:	7f 4f       	sbci	r23, 0xFF	; 255
   1a0ae:	c7 01       	movw	r24, r14
   1a0b0:	0e 94 0f c3 	call	0x1861e	; 0x1861e <lif_write>
   1a0b4:	09 2e       	mov	r0, r25
   1a0b6:	00 0c       	add	r0, r0
   1a0b8:	aa 0b       	sbc	r26, r26
   1a0ba:	bb 0b       	sbc	r27, r27
        if(size < LIF_SECTOR_SIZE)
   1a0bc:	8f 3f       	cpi	r24, 0xFF	; 255
   1a0be:	91 05       	cpc	r25, r1
   1a0c0:	a1 05       	cpc	r26, r1
   1a0c2:	b1 05       	cpc	r27, r1
   1a0c4:	09 f0       	breq	.+2      	; 0x1a0c8 <lif_create_volume+0x50a>
   1a0c6:	0c f4       	brge	.+2      	; 0x1a0ca <lif_create_volume+0x50c>
   1a0c8:	4f c0       	rjmp	.+158    	; 0x1a168 <lif_create_volume+0x5aa>
        {
            lif_close_volume(LIF);
            return(NULL);
        }
        offset += size;
   1a0ca:	ca 5e       	subi	r28, 0xEA	; 234
   1a0cc:	de 4f       	sbci	r29, 0xFE	; 254
   1a0ce:	28 81       	ld	r18, Y
   1a0d0:	39 81       	ldd	r19, Y+1	; 0x01
   1a0d2:	4a 81       	ldd	r20, Y+2	; 0x02
   1a0d4:	5b 81       	ldd	r21, Y+3	; 0x03
   1a0d6:	c6 51       	subi	r28, 0x16	; 22
   1a0d8:	d1 40       	sbci	r29, 0x01	; 1
   1a0da:	28 0f       	add	r18, r24
   1a0dc:	39 1f       	adc	r19, r25
   1a0de:	4a 1f       	adc	r20, r26
   1a0e0:	5b 1f       	adc	r21, r27
   1a0e2:	ca 5e       	subi	r28, 0xEA	; 234
   1a0e4:	de 4f       	sbci	r29, 0xFE	; 254
   1a0e6:	28 83       	st	Y, r18
   1a0e8:	39 83       	std	Y+1, r19	; 0x01
   1a0ea:	4a 83       	std	Y+2, r20	; 0x02
   1a0ec:	5b 83       	std	Y+3, r21	; 0x03
   1a0ee:	c6 51       	subi	r28, 0x16	; 22
   1a0f0:	d1 40       	sbci	r29, 0x01	; 1
        if((count % 100) == 0)
   1a0f2:	c3 01       	movw	r24, r6
   1a0f4:	b2 01       	movw	r22, r4
   1a0f6:	24 e6       	ldi	r18, 0x64	; 100
   1a0f8:	30 e0       	ldi	r19, 0x00	; 0
   1a0fa:	40 e0       	ldi	r20, 0x00	; 0
   1a0fc:	50 e0       	ldi	r21, 0x00	; 0
   1a0fe:	0e 94 59 e8 	call	0x1d0b2	; 0x1d0b2 <__divmodsi4>
   1a102:	67 2b       	or	r22, r23
   1a104:	68 2b       	or	r22, r24
   1a106:	69 2b       	or	r22, r25
   1a108:	91 f4       	brne	.+36     	; 0x1a12e <lif_create_volume+0x570>
            printf("\tWrote: %ld\r", count);
   1a10a:	ed b7       	in	r30, 0x3d	; 61
   1a10c:	fe b7       	in	r31, 0x3e	; 62
   1a10e:	44 82       	std	Z+4, r4	; 0x04
   1a110:	55 82       	std	Z+5, r5	; 0x05
   1a112:	66 82       	std	Z+6, r6	; 0x06
   1a114:	77 82       	std	Z+7, r7	; 0x07
   1a116:	c6 5e       	subi	r28, 0xE6	; 230
   1a118:	de 4f       	sbci	r29, 0xFE	; 254
   1a11a:	28 81       	ld	r18, Y
   1a11c:	39 81       	ldd	r19, Y+1	; 0x01
   1a11e:	4a 81       	ldd	r20, Y+2	; 0x02
   1a120:	ca 51       	subi	r28, 0x1A	; 26
   1a122:	d1 40       	sbci	r29, 0x01	; 1
   1a124:	21 83       	std	Z+1, r18	; 0x01
   1a126:	32 83       	std	Z+2, r19	; 0x02
   1a128:	43 83       	std	Z+3, r20	; 0x03
   1a12a:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
        ++count;
    }

// File area sectors
    memset(buffer,0,LIF_SECTOR_SIZE);
    for(i=0;i<filesectors;++i)
   1a12e:	ff ef       	ldi	r31, 0xFF	; 255
   1a130:	8f 1a       	sub	r8, r31
   1a132:	9f 0a       	sbc	r9, r31
   1a134:	af 0a       	sbc	r10, r31
   1a136:	bf 0a       	sbc	r11, r31
   1a138:	93 cf       	rjmp	.-218    	; 0x1a060 <lif_create_volume+0x4a2>
        offset += size;
        if((count % 100) == 0)
            printf("\tWrote: %ld\r", count);
        ++count;
    }
    printf("\tWrote: %ld\n", count);
   1a13a:	ed b7       	in	r30, 0x3d	; 61
   1a13c:	fe b7       	in	r31, 0x3e	; 62
   1a13e:	44 82       	std	Z+4, r4	; 0x04
   1a140:	55 82       	std	Z+5, r5	; 0x05
   1a142:	66 82       	std	Z+6, r6	; 0x06
   1a144:	77 82       	std	Z+7, r7	; 0x07
   1a146:	87 ea       	ldi	r24, 0xA7	; 167
   1a148:	9d e3       	ldi	r25, 0x3D	; 61
   1a14a:	a0 e0       	ldi	r26, 0x00	; 0
   1a14c:	81 83       	std	Z+1, r24	; 0x01
   1a14e:	92 83       	std	Z+2, r25	; 0x02
   1a150:	a3 83       	std	Z+3, r26	; 0x03
   1a152:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
/// @return void
MEMSPACE
void lif_rewinddir(lif_t *LIF)
{
// Directory index
    LIF->dirindex = -1;
   1a156:	8f ef       	ldi	r24, 0xFF	; 255
   1a158:	9f ef       	ldi	r25, 0xFF	; 255
   1a15a:	f7 01       	movw	r30, r14
   1a15c:	91 a3       	std	Z+33, r25	; 0x21
    printf("\tWrote: %ld\n", count);

    lif_rewinddir(LIF);

// As a sanity check verify basic values
    if( !lif_check_volume(LIF) )
   1a15e:	80 a3       	std	Z+32, r24	; 0x20
   1a160:	c7 01       	movw	r24, r14
   1a162:	25 d8       	rcall	.-4022   	; 0x191ae <lif_check_volume>
   1a164:	89 2b       	or	r24, r25
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1a166:	19 f4       	brne	.+6      	; 0x1a16e <lif_create_volume+0x5b0>
   1a168:	c7 01       	movw	r24, r14
   1a16a:	b6 da       	rcall	.-2708   	; 0x196d8 <lif_close_volume>
   1a16c:	08 c0       	rjmp	.+16     	; 0x1a17e <lif_create_volume+0x5c0>
        lif_closedir(LIF);
        return(NULL);
    }

// Scan directory and verify values
    if( !lif_updatefree(LIF))
   1a16e:	c7 01       	movw	r24, r14
   1a170:	1c dc       	rcall	.-1992   	; 0x199aa <lif_updatefree>
   1a172:	6c 01       	movw	r12, r24
   1a174:	89 2b       	or	r24, r25
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1a176:	31 f4       	brne	.+12     	; 0x1a184 <lif_create_volume+0x5c6>
   1a178:	c7 01       	movw	r24, r14
   1a17a:	ae da       	rcall	.-2724   	; 0x196d8 <lif_close_volume>

// Scan directory and verify values
    if( !lif_updatefree(LIF))
    {
        lif_closedir(LIF);
        return(NULL);
   1a17c:	04 c0       	rjmp	.+8      	; 0x1a186 <lif_create_volume+0x5c8>

    time_t t = time(NULL);

    lif_t *LIF = lif_calloc(sizeof(lif_t)+4);
    if(LIF == NULL)
        return(NULL);
   1a17e:	c1 2c       	mov	r12, r1
   1a180:	d1 2c       	mov	r13, r1
   1a182:	01 c0       	rjmp	.+2      	; 0x1a186 <lif_create_volume+0x5c8>
   1a184:	67 01       	movw	r12, r14
        lif_closedir(LIF);
        return(NULL);
    }

    return(LIF);
}
   1a186:	c6 01       	movw	r24, r12
   1a188:	c7 5d       	subi	r28, 0xD7	; 215
   1a18a:	de 4f       	sbci	r29, 0xFE	; 254
   1a18c:	e2 e1       	ldi	r30, 0x12	; 18
   1a18e:	0c 94 c0 e8 	jmp	0x1d180	; 0x1d180 <__epilogue_restores__>

0001a192 <lif_newdir>:
/// @param[in] *LIF: LIF pointer
/// @param[in] sectors: try to find specified free space
/// @return index or free record or -1 on error
MEMSPACE
int lif_newdir(lif_t *LIF, long sectors)
{
   1a192:	ad e1       	ldi	r26, 0x1D	; 29
   1a194:	b0 e0       	ldi	r27, 0x00	; 0
   1a196:	ef ec       	ldi	r30, 0xCF	; 207
   1a198:	f0 ed       	ldi	r31, 0xD0	; 208
   1a19a:	0c 94 a4 e8 	jmp	0x1d148	; 0x1d148 <__prologue_saves__>
   1a19e:	9d 8f       	std	Y+29, r25	; 0x1d
   1a1a0:	8c 8f       	std	Y+28, r24	; 0x1c
   1a1a2:	4a 01       	movw	r8, r20
   1a1a4:	5b 01       	movw	r10, r22

// Directory index
    index = 0;

// Start of free space
    start = LIF->filestart;
   1a1a6:	fc 01       	movw	r30, r24
   1a1a8:	c4 84       	ldd	r12, Z+12	; 0x0c
   1a1aa:	d5 84       	ldd	r13, Z+13	; 0x0d
   1a1ac:	e6 84       	ldd	r14, Z+14	; 0x0e
   1a1ae:	f7 84       	ldd	r15, Z+15	; 0x0f

// Update all file information
    if(lif_updatefree(LIF) == NULL)
   1a1b0:	fc db       	rcall	.-2056   	; 0x199aa <lif_updatefree>
   1a1b2:	ec 8d       	ldd	r30, Y+28	; 0x1c
   1a1b4:	fd 8d       	ldd	r31, Y+29	; 0x1d
   1a1b6:	40 8d       	ldd	r20, Z+24	; 0x18
   1a1b8:	51 8d       	ldd	r21, Z+25	; 0x19
   1a1ba:	62 8d       	ldd	r22, Z+26	; 0x1a
   1a1bc:	73 8d       	ldd	r23, Z+27	; 0x1b
   1a1be:	89 2b       	or	r24, r25
   1a1c0:	99 f4       	brne	.+38     	; 0x1a1e8 <lif_newdir+0x56>
    {
        printf("lif_newdir: not enough free space:[%ld] for size:[%ld]\n", (long)LIF->freesectors, (long) sectors);
   1a1c2:	ed b7       	in	r30, 0x3d	; 61
   1a1c4:	fe b7       	in	r31, 0x3e	; 62
   1a1c6:	80 86       	std	Z+8, r8	; 0x08
   1a1c8:	91 86       	std	Z+9, r9	; 0x09
   1a1ca:	a2 86       	std	Z+10, r10	; 0x0a
   1a1cc:	b3 86       	std	Z+11, r11	; 0x0b
   1a1ce:	44 83       	std	Z+4, r20	; 0x04
   1a1d0:	55 83       	std	Z+5, r21	; 0x05
   1a1d2:	66 83       	std	Z+6, r22	; 0x06
   1a1d4:	77 83       	std	Z+7, r23	; 0x07
   1a1d6:	88 ec       	ldi	r24, 0xC8	; 200
   1a1d8:	9c e3       	ldi	r25, 0x3C	; 60
   1a1da:	a0 e0       	ldi	r26, 0x00	; 0
   1a1dc:	81 83       	std	Z+1, r24	; 0x01
   1a1de:	92 83       	std	Z+2, r25	; 0x02
   1a1e0:	a3 83       	std	Z+3, r26	; 0x03
   1a1e2:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
   1a1e6:	2f c1       	rjmp	.+606    	; 0x1a446 <lif_newdir+0x2b4>
        return(-1);
    }

// Not enough room ?
    if(sectors > (long)LIF->freesectors)
   1a1e8:	48 15       	cp	r20, r8
   1a1ea:	59 05       	cpc	r21, r9
   1a1ec:	6a 05       	cpc	r22, r10
   1a1ee:	7b 05       	cpc	r23, r11
   1a1f0:	c4 f0       	brlt	.+48     	; 0x1a222 <lif_newdir+0x90>
   1a1f2:	44 24       	eor	r4, r4
   1a1f4:	43 94       	inc	r4
   1a1f6:	51 2c       	mov	r5, r1
   1a1f8:	61 2c       	mov	r6, r1
   1a1fa:	71 2c       	mov	r7, r1
#endif
            break;
        }

// We hit the EOF record
        if(LIF->DIR.FileType == 0xffff)
   1a1fc:	8c 8d       	ldd	r24, Y+28	; 0x1c
   1a1fe:	9d 8d       	ldd	r25, Y+29	; 0x1d
   1a200:	86 5a       	subi	r24, 0xA6	; 166
   1a202:	9f 4f       	sbci	r25, 0xFF	; 255
   1a204:	9d 8b       	std	Y+21, r25	; 0x15
   1a206:	8c 8b       	std	Y+20, r24	; 0x14
   1a208:	ec 8d       	ldd	r30, Y+28	; 0x1c
   1a20a:	fd 8d       	ldd	r31, Y+29	; 0x1d
   1a20c:	e4 5a       	subi	r30, 0xA4	; 164
   1a20e:	ff 4f       	sbci	r31, 0xFF	; 255
   1a210:	fb 8b       	std	Y+19, r31	; 0x13
   1a212:	ea 8b       	std	Y+18, r30	; 0x12
                freestate = 0;                    // Try again
        }

// Computed start of next record
// Note: MUST be <= actual start of next VALID record or we have overlapping records!
        start = LIF->DIR.FileStartSector + LIF->DIR.FileSectors;
   1a214:	8c 8d       	ldd	r24, Y+28	; 0x1c
   1a216:	9d 8d       	ldd	r25, Y+29	; 0x1d
   1a218:	80 5a       	subi	r24, 0xA0	; 160
   1a21a:	9f 4f       	sbci	r25, 0xFF	; 255
   1a21c:	9f 8b       	std	Y+23, r25	; 0x17
   1a21e:	8e 8b       	std	Y+22, r24	; 0x16
   1a220:	21 c0       	rjmp	.+66     	; 0x1a264 <lif_newdir+0xd2>
    }

// Not enough room ?
    if(sectors > (long)LIF->freesectors)
    {
        printf("lif_newdir: not enough free space:[%ld]\n", (long)LIF->freesectors);
   1a222:	ed b7       	in	r30, 0x3d	; 61
   1a224:	fe b7       	in	r31, 0x3e	; 62
   1a226:	44 83       	std	Z+4, r20	; 0x04
   1a228:	55 83       	std	Z+5, r21	; 0x05
   1a22a:	66 83       	std	Z+6, r22	; 0x06
   1a22c:	77 83       	std	Z+7, r23	; 0x07
   1a22e:	8f e9       	ldi	r24, 0x9F	; 159
   1a230:	9c e3       	ldi	r25, 0x3C	; 60
   1a232:	a0 e0       	ldi	r26, 0x00	; 0
   1a234:	81 83       	std	Z+1, r24	; 0x01
   1a236:	92 83       	std	Z+2, r25	; 0x02
   1a238:	a3 83       	std	Z+3, r26	; 0x03
   1a23a:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
   1a23e:	03 c1       	rjmp	.+518    	; 0x1a446 <lif_newdir+0x2b4>
#endif
            break;
        }

// We hit the EOF record
        if(LIF->DIR.FileType == 0xffff)
   1a240:	ec 89       	ldd	r30, Y+20	; 0x14
   1a242:	fd 89       	ldd	r31, Y+21	; 0x15
   1a244:	80 81       	ld	r24, Z
   1a246:	91 81       	ldd	r25, Z+1	; 0x01
   1a248:	8f 3f       	cpi	r24, 0xFF	; 255
   1a24a:	ff ef       	ldi	r31, 0xFF	; 255
   1a24c:	9f 07       	cpc	r25, r31
   1a24e:	a1 f0       	breq	.+40     	; 0x1a278 <lif_newdir+0xe6>
            }
            return(index);
        }

// PURGED records
        if(LIF->DIR.FileType == 0)
   1a250:	89 2b       	or	r24, r25
   1a252:	09 f0       	breq	.+2      	; 0x1a256 <lif_newdir+0xc4>
   1a254:	ce c0       	rjmp	.+412    	; 0x1a3f2 <lif_newdir+0x260>
        {
            if(freestate == 0)
   1a256:	61 14       	cp	r6, r1
   1a258:	71 04       	cpc	r7, r1
   1a25a:	09 f4       	brne	.+2      	; 0x1a25e <lif_newdir+0xcc>
   1a25c:	c1 c0       	rjmp	.+386    	; 0x1a3e0 <lif_newdir+0x24e>
   1a25e:	ff ef       	ldi	r31, 0xFF	; 255
   1a260:	4f 1a       	sub	r4, r31
   1a262:	5f 0a       	sbc	r5, r31
   1a264:	82 01       	movw	r16, r4
   1a266:	01 50       	subi	r16, 0x01	; 1
   1a268:	11 09       	sbc	r17, r1

// Update free space and EOF pointers
    while(1)
    {
// Write new EOF after current one
        if( !lif_readdirindex(LIF,index) )
   1a26a:	b8 01       	movw	r22, r16
   1a26c:	8c 8d       	ldd	r24, Y+28	; 0x1c
   1a26e:	9d 8d       	ldd	r25, Y+29	; 0x1d
   1a270:	c1 da       	rcall	.-2686   	; 0x197f4 <lif_readdirindex>
   1a272:	89 2b       	or	r24, r25
   1a274:	29 f7       	brne	.-54     	; 0x1a240 <lif_newdir+0xae>
   1a276:	e7 c0       	rjmp	.+462    	; 0x1a446 <lif_newdir+0x2b4>
        if(LIF->DIR.FileType == 0xffff)
        {

// Was enough free space found in purged area ?
// Do NOT need to update EOF!
            if(freestate == 2)
   1a278:	22 e0       	ldi	r18, 0x02	; 2
   1a27a:	62 16       	cp	r6, r18
   1a27c:	71 04       	cpc	r7, r1
   1a27e:	09 f0       	breq	.+2      	; 0x1a282 <lif_newdir+0xf0>
   1a280:	46 c0       	rjmp	.+140    	; 0x1a30e <lif_newdir+0x17c>
            {
// Update free pace for new file
                lif_dir_clear(LIF);
   1a282:	8c 8d       	ldd	r24, Y+28	; 0x1c
   1a284:	9d 8d       	ldd	r25, Y+29	; 0x1d
   1a286:	0e 94 02 c7 	call	0x18e04	; 0x18e04 <lif_dir_clear>
                LIF->DIR.FileStartSector = freestart;
   1a28a:	ec 8d       	ldd	r30, Y+28	; 0x1c
   1a28c:	fd 8d       	ldd	r31, Y+29	; 0x1d
   1a28e:	e4 5a       	subi	r30, 0xA4	; 164
   1a290:	ff 4f       	sbci	r31, 0xFF	; 255
   1a292:	88 8d       	ldd	r24, Y+24	; 0x18
   1a294:	80 83       	st	Z, r24
   1a296:	99 8d       	ldd	r25, Y+25	; 0x19
   1a298:	91 83       	std	Z+1, r25	; 0x01
   1a29a:	2a 8d       	ldd	r18, Y+26	; 0x1a
   1a29c:	22 83       	std	Z+2, r18	; 0x02
   1a29e:	8b 8d       	ldd	r24, Y+27	; 0x1b
   1a2a0:	83 83       	std	Z+3, r24	; 0x03
                LIF->DIR.FileSectors = sectors;
   1a2a2:	ec 8d       	ldd	r30, Y+28	; 0x1c
   1a2a4:	fd 8d       	ldd	r31, Y+29	; 0x1d
   1a2a6:	e0 5a       	subi	r30, 0xA0	; 160
   1a2a8:	ff 4f       	sbci	r31, 0xFF	; 255
   1a2aa:	80 82       	st	Z, r8
   1a2ac:	91 82       	std	Z+1, r9	; 0x01
   1a2ae:	a2 82       	std	Z+2, r10	; 0x02
   1a2b0:	b3 82       	std	Z+3, r11	; 0x03
                LIF->usedsectors += sectors;
   1a2b2:	ec 8d       	ldd	r30, Y+28	; 0x1c
   1a2b4:	fd 8d       	ldd	r31, Y+29	; 0x1d
   1a2b6:	84 89       	ldd	r24, Z+20	; 0x14
   1a2b8:	95 89       	ldd	r25, Z+21	; 0x15
   1a2ba:	a6 89       	ldd	r26, Z+22	; 0x16
   1a2bc:	b7 89       	ldd	r27, Z+23	; 0x17
   1a2be:	88 0d       	add	r24, r8
   1a2c0:	99 1d       	adc	r25, r9
   1a2c2:	aa 1d       	adc	r26, r10
   1a2c4:	bb 1d       	adc	r27, r11
   1a2c6:	84 8b       	std	Z+20, r24	; 0x14
   1a2c8:	95 8b       	std	Z+21, r25	; 0x15
   1a2ca:	a6 8b       	std	Z+22, r26	; 0x16
   1a2cc:	b7 8b       	std	Z+23, r27	; 0x17
                LIF->freesectors -= sectors;
   1a2ce:	80 8d       	ldd	r24, Z+24	; 0x18
   1a2d0:	91 8d       	ldd	r25, Z+25	; 0x19
   1a2d2:	a2 8d       	ldd	r26, Z+26	; 0x1a
   1a2d4:	b3 8d       	ldd	r27, Z+27	; 0x1b
   1a2d6:	88 19       	sub	r24, r8
   1a2d8:	99 09       	sbc	r25, r9
   1a2da:	aa 09       	sbc	r26, r10
   1a2dc:	bb 09       	sbc	r27, r11
   1a2de:	80 8f       	std	Z+24, r24	; 0x18
   1a2e0:	91 8f       	std	Z+25, r25	; 0x19
   1a2e2:	a2 8f       	std	Z+26, r26	; 0x1a
   1a2e4:	b3 8f       	std	Z+27, r27	; 0x1b
                LIF->files++;
   1a2e6:	84 8d       	ldd	r24, Z+28	; 0x1c
   1a2e8:	95 8d       	ldd	r25, Z+29	; 0x1d
   1a2ea:	01 96       	adiw	r24, 0x01	; 1
   1a2ec:	95 8f       	std	Z+29, r25	; 0x1d
   1a2ee:	84 8f       	std	Z+28, r24	; 0x1c
                LIF->purged--;
   1a2f0:	86 8d       	ldd	r24, Z+30	; 0x1e
   1a2f2:	97 8d       	ldd	r25, Z+31	; 0x1f
   1a2f4:	01 97       	sbiw	r24, 0x01	; 1
   1a2f6:	97 8f       	std	Z+31, r25	; 0x1f
   1a2f8:	86 8f       	std	Z+30, r24	; 0x1e
                LIF->dirindex = freeindex;
   1a2fa:	20 a2       	std	Z+32, r2	; 0x20
   1a2fc:	31 a2       	std	Z+33, r3	; 0x21
// Write new record (FileType is still EOF until data is updated by user)
                if( !lif_writedirindex(LIF,freeindex))
   1a2fe:	b1 01       	movw	r22, r2
   1a300:	cf 01       	movw	r24, r30
   1a302:	df da       	rcall	.-2626   	; 0x198c2 <lif_writedirindex>
   1a304:	89 2b       	or	r24, r25
   1a306:	09 f4       	brne	.+2      	; 0x1a30a <lif_newdir+0x178>
   1a308:	9e c0       	rjmp	.+316    	; 0x1a446 <lif_newdir+0x2b4>
   1a30a:	c1 01       	movw	r24, r2
   1a30c:	9e c0       	rjmp	.+316    	; 0x1a44a <lif_newdir+0x2b8>
                    break;
                }
                return(freeindex);
            }

            if(debuglevel & LIF_DEBUG)
   1a30e:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1a312:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1a316:	92 ff       	sbrs	r25, 2
   1a318:	1e c0       	rjmp	.+60     	; 0x1a356 <lif_newdir+0x1c4>
                printf("lif_newdir: index:[%d] adding at:[%ld]to purged space:[%ld] sectors, free:[%ld]\n",
   1a31a:	ec 8d       	ldd	r30, Y+28	; 0x1c
   1a31c:	fd 8d       	ldd	r31, Y+29	; 0x1d
   1a31e:	80 8d       	ldd	r24, Z+24	; 0x18
   1a320:	91 8d       	ldd	r25, Z+25	; 0x19
   1a322:	a2 8d       	ldd	r26, Z+26	; 0x1a
   1a324:	b3 8d       	ldd	r27, Z+27	; 0x1b
   1a326:	ed b7       	in	r30, 0x3d	; 61
   1a328:	fe b7       	in	r31, 0x3e	; 62
   1a32a:	86 87       	std	Z+14, r24	; 0x0e
   1a32c:	97 87       	std	Z+15, r25	; 0x0f
   1a32e:	a0 8b       	std	Z+16, r26	; 0x10
   1a330:	b1 8b       	std	Z+17, r27	; 0x11
   1a332:	82 86       	std	Z+10, r8	; 0x0a
   1a334:	93 86       	std	Z+11, r9	; 0x0b
   1a336:	a4 86       	std	Z+12, r10	; 0x0c
   1a338:	b5 86       	std	Z+13, r11	; 0x0d
   1a33a:	c6 82       	std	Z+6, r12	; 0x06
   1a33c:	d7 82       	std	Z+7, r13	; 0x07
   1a33e:	e0 86       	std	Z+8, r14	; 0x08
   1a340:	f1 86       	std	Z+9, r15	; 0x09
   1a342:	15 83       	std	Z+5, r17	; 0x05
   1a344:	04 83       	std	Z+4, r16	; 0x04
   1a346:	8e e4       	ldi	r24, 0x4E	; 78
   1a348:	9c e3       	ldi	r25, 0x3C	; 60
   1a34a:	a0 e0       	ldi	r26, 0x00	; 0
   1a34c:	81 83       	std	Z+1, r24	; 0x01
   1a34e:	92 83       	std	Z+2, r25	; 0x02
   1a350:	a3 83       	std	Z+3, r26	; 0x03
   1a352:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
                    (int) index,(long)start,(long) sectors, (long)LIF->freesectors);

// Write new EOF after current one
            if( !lif_writedirEOF(LIF,index+1) )
   1a356:	b8 01       	movw	r22, r16
   1a358:	6f 5f       	subi	r22, 0xFF	; 255
   1a35a:	7f 4f       	sbci	r23, 0xFF	; 255
   1a35c:	8c 8d       	ldd	r24, Y+28	; 0x1c
   1a35e:	9d 8d       	ldd	r25, Y+29	; 0x1d
   1a360:	0c db       	rcall	.-2536   	; 0x1997a <lif_writedirEOF>
   1a362:	89 2b       	or	r24, r25
   1a364:	09 f4       	brne	.+2      	; 0x1a368 <lif_newdir+0x1d6>
   1a366:	6f c0       	rjmp	.+222    	; 0x1a446 <lif_newdir+0x2b4>
            {
                break;
            }

            lif_dir_clear(LIF);
   1a368:	8c 8d       	ldd	r24, Y+28	; 0x1c
   1a36a:	9d 8d       	ldd	r25, Y+29	; 0x1d
   1a36c:	0e 94 02 c7 	call	0x18e04	; 0x18e04 <lif_dir_clear>
            LIF->DIR.FileStartSector = start;
   1a370:	ec 8d       	ldd	r30, Y+28	; 0x1c
   1a372:	fd 8d       	ldd	r31, Y+29	; 0x1d
   1a374:	e4 5a       	subi	r30, 0xA4	; 164
   1a376:	ff 4f       	sbci	r31, 0xFF	; 255
   1a378:	c0 82       	st	Z, r12
   1a37a:	d1 82       	std	Z+1, r13	; 0x01
   1a37c:	e2 82       	std	Z+2, r14	; 0x02
   1a37e:	f3 82       	std	Z+3, r15	; 0x03
            LIF->DIR.FileSectors = sectors;
   1a380:	ec 8d       	ldd	r30, Y+28	; 0x1c
   1a382:	fd 8d       	ldd	r31, Y+29	; 0x1d
   1a384:	e0 5a       	subi	r30, 0xA0	; 160
   1a386:	ff 4f       	sbci	r31, 0xFF	; 255
   1a388:	80 82       	st	Z, r8
   1a38a:	91 82       	std	Z+1, r9	; 0x01
   1a38c:	a2 82       	std	Z+2, r10	; 0x02
   1a38e:	b3 82       	std	Z+3, r11	; 0x03
            LIF->usedsectors += sectors;
   1a390:	ec 8d       	ldd	r30, Y+28	; 0x1c
   1a392:	fd 8d       	ldd	r31, Y+29	; 0x1d
   1a394:	84 89       	ldd	r24, Z+20	; 0x14
   1a396:	95 89       	ldd	r25, Z+21	; 0x15
   1a398:	a6 89       	ldd	r26, Z+22	; 0x16
   1a39a:	b7 89       	ldd	r27, Z+23	; 0x17
   1a39c:	88 0d       	add	r24, r8
   1a39e:	99 1d       	adc	r25, r9
   1a3a0:	aa 1d       	adc	r26, r10
   1a3a2:	bb 1d       	adc	r27, r11
   1a3a4:	84 8b       	std	Z+20, r24	; 0x14
   1a3a6:	95 8b       	std	Z+21, r25	; 0x15
   1a3a8:	a6 8b       	std	Z+22, r26	; 0x16
   1a3aa:	b7 8b       	std	Z+23, r27	; 0x17
            LIF->freesectors -= sectors;
   1a3ac:	80 8d       	ldd	r24, Z+24	; 0x18
   1a3ae:	91 8d       	ldd	r25, Z+25	; 0x19
   1a3b0:	a2 8d       	ldd	r26, Z+26	; 0x1a
   1a3b2:	b3 8d       	ldd	r27, Z+27	; 0x1b
   1a3b4:	88 19       	sub	r24, r8
   1a3b6:	99 09       	sbc	r25, r9
   1a3b8:	aa 09       	sbc	r26, r10
   1a3ba:	bb 09       	sbc	r27, r11
   1a3bc:	80 8f       	std	Z+24, r24	; 0x18
   1a3be:	91 8f       	std	Z+25, r25	; 0x19
   1a3c0:	a2 8f       	std	Z+26, r26	; 0x1a
   1a3c2:	b3 8f       	std	Z+27, r27	; 0x1b
            LIF->files++;
   1a3c4:	84 8d       	ldd	r24, Z+28	; 0x1c
   1a3c6:	95 8d       	ldd	r25, Z+29	; 0x1d
   1a3c8:	01 96       	adiw	r24, 0x01	; 1
   1a3ca:	95 8f       	std	Z+29, r25	; 0x1d
   1a3cc:	84 8f       	std	Z+28, r24	; 0x1c
            LIF->dirindex = index;
   1a3ce:	11 a3       	std	Z+33, r17	; 0x21
// Write new record (FileType is still EOF until data is updated by user )
            if( !lif_writedirindex(LIF,index))
   1a3d0:	00 a3       	std	Z+32, r16	; 0x20
   1a3d2:	b8 01       	movw	r22, r16
   1a3d4:	cf 01       	movw	r24, r30
   1a3d6:	75 da       	rcall	.-2838   	; 0x198c2 <lif_writedirindex>
   1a3d8:	89 2b       	or	r24, r25
   1a3da:	a9 f1       	breq	.+106    	; 0x1a446 <lif_newdir+0x2b4>
   1a3dc:	c8 01       	movw	r24, r16
   1a3de:	35 c0       	rjmp	.+106    	; 0x1a44a <lif_newdir+0x2b8>
        }

// PURGED records
        if(LIF->DIR.FileType == 0)
        {
            if(freestate == 0)
   1a3e0:	c8 8e       	std	Y+24, r12	; 0x18
   1a3e2:	d9 8e       	std	Y+25, r13	; 0x19
   1a3e4:	ea 8e       	std	Y+26, r14	; 0x1a
   1a3e6:	fb 8e       	std	Y+27, r15	; 0x1b
   1a3e8:	18 01       	movw	r2, r16
            {
                freeindex = index;
                freestart = start;
                freestate = 1;
   1a3ea:	66 24       	eor	r6, r6
   1a3ec:	63 94       	inc	r6
   1a3ee:	71 2c       	mov	r7, r1
            }
            ++index;
            continue;
   1a3f0:	36 cf       	rjmp	.-404    	; 0x1a25e <lif_newdir+0xcc>
        }

// VALID record
        if(freestate == 1)
   1a3f2:	f1 e0       	ldi	r31, 0x01	; 1
   1a3f4:	6f 16       	cp	r6, r31
   1a3f6:	71 04       	cpc	r7, r1
   1a3f8:	a9 f4       	brne	.+42     	; 0x1a424 <lif_newdir+0x292>
        {
            long freesectors;
// Compute sectors of purged space between valid records
// Note: LIF specs prohibit using old purged file start and sectors!
            freesectors = LIF->DIR.FileStartSector - start;
            if(freesectors >= sectors )
   1a3fa:	ea 89       	ldd	r30, Y+18	; 0x12
   1a3fc:	fb 89       	ldd	r31, Y+19	; 0x13
   1a3fe:	80 81       	ld	r24, Z
   1a400:	91 81       	ldd	r25, Z+1	; 0x01
   1a402:	a2 81       	ldd	r26, Z+2	; 0x02
   1a404:	b3 81       	ldd	r27, Z+3	; 0x03
   1a406:	8c 19       	sub	r24, r12
   1a408:	9d 09       	sbc	r25, r13
   1a40a:	ae 09       	sbc	r26, r14
   1a40c:	bf 09       	sbc	r27, r15
   1a40e:	88 15       	cp	r24, r8
   1a410:	99 05       	cpc	r25, r9
   1a412:	aa 05       	cpc	r26, r10
   1a414:	bb 05       	cpc	r27, r11
   1a416:	1c f4       	brge	.+6      	; 0x1a41e <lif_newdir+0x28c>
                freestate = 2;                    // Found free space in purged record
            else
                freestate = 0;                    // Try again
   1a418:	61 2c       	mov	r6, r1
   1a41a:	71 2c       	mov	r7, r1
   1a41c:	03 c0       	rjmp	.+6      	; 0x1a424 <lif_newdir+0x292>
            long freesectors;
// Compute sectors of purged space between valid records
// Note: LIF specs prohibit using old purged file start and sectors!
            freesectors = LIF->DIR.FileStartSector - start;
            if(freesectors >= sectors )
                freestate = 2;                    // Found free space in purged record
   1a41e:	82 e0       	ldi	r24, 0x02	; 2
   1a420:	68 2e       	mov	r6, r24
   1a422:	71 2c       	mov	r7, r1
                freestate = 0;                    // Try again
        }

// Computed start of next record
// Note: MUST be <= actual start of next VALID record or we have overlapping records!
        start = LIF->DIR.FileStartSector + LIF->DIR.FileSectors;
   1a424:	ea 89       	ldd	r30, Y+18	; 0x12
   1a426:	fb 89       	ldd	r31, Y+19	; 0x13
   1a428:	c0 80       	ld	r12, Z
   1a42a:	d1 80       	ldd	r13, Z+1	; 0x01
   1a42c:	e2 80       	ldd	r14, Z+2	; 0x02
   1a42e:	f3 80       	ldd	r15, Z+3	; 0x03
   1a430:	ee 89       	ldd	r30, Y+22	; 0x16
   1a432:	ff 89       	ldd	r31, Y+23	; 0x17
   1a434:	80 81       	ld	r24, Z
   1a436:	91 81       	ldd	r25, Z+1	; 0x01
   1a438:	a2 81       	ldd	r26, Z+2	; 0x02
   1a43a:	b3 81       	ldd	r27, Z+3	; 0x03
   1a43c:	c8 0e       	add	r12, r24
   1a43e:	d9 1e       	adc	r13, r25
   1a440:	ea 1e       	adc	r14, r26
   1a442:	fb 1e       	adc	r15, r27
   1a444:	0c cf       	rjmp	.-488    	; 0x1a25e <lif_newdir+0xcc>
        ++index;
    }
// ERROR
    return(-1);
   1a446:	8f ef       	ldi	r24, 0xFF	; 255
   1a448:	9f ef       	ldi	r25, 0xFF	; 255
}
   1a44a:	6d 96       	adiw	r28, 0x1d	; 29
   1a44c:	e2 e1       	ldi	r30, 0x12	; 18
   1a44e:	0c 94 c0 e8 	jmp	0x1d180	; 0x1d180 <__epilogue_restores__>

0001a452 <lif_open_volume>:
/// @param[in] *name: file name of LIF image
/// @param[in] *mode: "rb" = read, "rb+" = read/write
/// @return LIF pointer on sucesses or NULL on error
MEMSPACE
lif_t *lif_open_volume(char *name, char *mode)
{
   1a452:	a9 e3       	ldi	r26, 0x39	; 57
   1a454:	b1 e0       	ldi	r27, 0x01	; 1
   1a456:	ef e2       	ldi	r30, 0x2F	; 47
   1a458:	f2 ed       	ldi	r31, 0xD2	; 210
   1a45a:	0c 94 aa e8 	jmp	0x1d154	; 0x1d154 <__prologue_saves__+0xc>
   1a45e:	6c 01       	movw	r12, r24
   1a460:	8b 01       	movw	r16, r22
    lif_t *LIF;
    stat_t sb, *sp;
    uint8_t buffer[LIF_SECTOR_SIZE];

    sp = lif_stat(name, (stat_t *)&sb);
   1a462:	be 01       	movw	r22, r28
   1a464:	66 5f       	subi	r22, 0xF6	; 246
   1a466:	7e 4f       	sbci	r23, 0xFE	; 254
   1a468:	0e 94 62 c2 	call	0x184c4	; 0x184c4 <lif_stat>
   1a46c:	5c 01       	movw	r10, r24
    if(sp == NULL)
   1a46e:	00 97       	sbiw	r24, 0x00	; 0
   1a470:	09 f1       	breq	.+66     	; 0x1a4b4 <lif_open_volume+0x62>
        return(NULL);

// To read LIF volume we must have at minimum two sectors
// volume header a directory entry
    if(sp->st_size < (long)LIF_SECTOR_SIZE*2)
   1a472:	fc 01       	movw	r30, r24
   1a474:	80 8d       	ldd	r24, Z+24	; 0x18
   1a476:	91 8d       	ldd	r25, Z+25	; 0x19
   1a478:	a2 8d       	ldd	r26, Z+26	; 0x1a
   1a47a:	b3 8d       	ldd	r27, Z+27	; 0x1b
   1a47c:	81 15       	cp	r24, r1
   1a47e:	f2 e0       	ldi	r31, 0x02	; 2
   1a480:	9f 07       	cpc	r25, r31
   1a482:	a1 05       	cpc	r26, r1
   1a484:	b1 05       	cpc	r27, r1
   1a486:	c8 f4       	brcc	.+50     	; 0x1a4ba <lif_open_volume+0x68>
    {
        if(debuglevel & LIF_DEBUG)
   1a488:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   1a48c:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1a490:	32 ff       	sbrs	r19, 2
   1a492:	10 c0       	rjmp	.+32     	; 0x1a4b4 <lif_open_volume+0x62>
            printf("lif_open_volume:[%s] error volume header area too small:[%ld]\n", name, (long)sp->st_size);
   1a494:	ed b7       	in	r30, 0x3d	; 61
   1a496:	fe b7       	in	r31, 0x3e	; 62
   1a498:	86 83       	std	Z+6, r24	; 0x06
   1a49a:	97 83       	std	Z+7, r25	; 0x07
   1a49c:	a0 87       	std	Z+8, r26	; 0x08
   1a49e:	b1 87       	std	Z+9, r27	; 0x09
   1a4a0:	d5 82       	std	Z+5, r13	; 0x05
   1a4a2:	c4 82       	std	Z+4, r12	; 0x04
   1a4a4:	8f e0       	ldi	r24, 0x0F	; 15
   1a4a6:	9c e3       	ldi	r25, 0x3C	; 60
   1a4a8:	a0 e0       	ldi	r26, 0x00	; 0
   1a4aa:	81 83       	std	Z+1, r24	; 0x01
   1a4ac:	92 83       	std	Z+2, r25	; 0x02
   1a4ae:	a3 83       	std	Z+3, r26	; 0x03
   1a4b0:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
        return(NULL);
   1a4b4:	00 e0       	ldi	r16, 0x00	; 0
   1a4b6:	10 e0       	ldi	r17, 0x00	; 0
   1a4b8:	c6 c0       	rjmp	.+396    	; 0x1a646 <lif_open_volume+0x1f4>
    }

// Allocate LIF structure
    LIF = lif_calloc(sizeof(lif_t)+4);
   1a4ba:	64 e7       	ldi	r22, 0x74	; 116
   1a4bc:	70 e0       	ldi	r23, 0x00	; 0
   1a4be:	80 e0       	ldi	r24, 0x00	; 0
   1a4c0:	90 e0       	ldi	r25, 0x00	; 0
   1a4c2:	0e 94 ce c1 	call	0x1839c	; 0x1839c <lif_calloc>
   1a4c6:	7c 01       	movw	r14, r24
    if(!LIF)
   1a4c8:	89 2b       	or	r24, r25
   1a4ca:	a1 f3       	breq	.-24     	; 0x1a4b4 <lif_open_volume+0x62>
        return(NULL);

    LIF->name = lif_stralloc(name);
   1a4cc:	c6 01       	movw	r24, r12
   1a4ce:	0e 94 19 c2 	call	0x18432	; 0x18432 <lif_stralloc>
   1a4d2:	f7 01       	movw	r30, r14
   1a4d4:	91 83       	std	Z+1, r25	; 0x01
   1a4d6:	80 83       	st	Z, r24
    if(!LIF->name)
   1a4d8:	00 97       	sbiw	r24, 0x00	; 0
   1a4da:	09 f4       	brne	.+2      	; 0x1a4de <lif_open_volume+0x8c>
   1a4dc:	5e c0       	rjmp	.+188    	; 0x1a59a <lif_open_volume+0x148>
    {
        lif_closedir(LIF);
        return(NULL);
    }

    LIF->imagebytes = sp->st_size;
   1a4de:	f5 01       	movw	r30, r10
   1a4e0:	80 8c       	ldd	r8, Z+24	; 0x18
   1a4e2:	91 8c       	ldd	r9, Z+25	; 0x19
   1a4e4:	a2 8c       	ldd	r10, Z+26	; 0x1a
   1a4e6:	b3 8c       	ldd	r11, Z+27	; 0x1b
   1a4e8:	f7 01       	movw	r30, r14
   1a4ea:	80 86       	std	Z+8, r8	; 0x08
   1a4ec:	91 86       	std	Z+9, r9	; 0x09
   1a4ee:	a2 86       	std	Z+10, r10	; 0x0a
   1a4f0:	b3 86       	std	Z+11, r11	; 0x0b
/// @return sectors
/// FIXME assumes 256 byte sectors
MEMSPACE
uint32_t lif_bytes2sectors(uint32_t bytes)
{
    uint32_t sectors = (bytes/(long)LIF_SECTOR_SIZE);
   1a4f2:	77 27       	eor	r23, r23
   1a4f4:	6b 2d       	mov	r22, r11
   1a4f6:	5a 2d       	mov	r21, r10
   1a4f8:	49 2d       	mov	r20, r9
    if(bytes % (long)LIF_SECTOR_SIZE)
   1a4fa:	88 20       	and	r8, r8
   1a4fc:	21 f0       	breq	.+8      	; 0x1a506 <lif_open_volume+0xb4>
        ++sectors;
   1a4fe:	4f 5f       	subi	r20, 0xFF	; 255
   1a500:	5f 4f       	sbci	r21, 0xFF	; 255
   1a502:	6f 4f       	sbci	r22, 0xFF	; 255
   1a504:	7f 4f       	sbci	r23, 0xFF	; 255
        lif_closedir(LIF);
        return(NULL);
    }

    LIF->imagebytes = sp->st_size;
    LIF->sectors = lif_bytes2sectors(sp->st_size);
   1a506:	f7 01       	movw	r30, r14
   1a508:	44 83       	std	Z+4, r20	; 0x04
   1a50a:	55 83       	std	Z+5, r21	; 0x05
   1a50c:	66 83       	std	Z+6, r22	; 0x06
   1a50e:	77 83       	std	Z+7, r23	; 0x07

    LIF->fp = lif_open(LIF->name,mode);
   1a510:	b8 01       	movw	r22, r16
   1a512:	0e 94 38 c2 	call	0x18470	; 0x18470 <lif_open>
   1a516:	f7 01       	movw	r30, r14
   1a518:	93 83       	std	Z+3, r25	; 0x03
   1a51a:	82 83       	std	Z+2, r24	; 0x02
    if(!LIF->fp)
   1a51c:	89 2b       	or	r24, r25
   1a51e:	e9 f1       	breq	.+122    	; 0x1a59a <lif_open_volume+0x148>
        lif_closedir(LIF);
        return(NULL);
    }

// Volume header must be it least one sector
    if( lif_read(LIF, buffer, 0, LIF_SECTOR_SIZE) < LIF_SECTOR_SIZE)
   1a520:	00 e0       	ldi	r16, 0x00	; 0
   1a522:	11 e0       	ldi	r17, 0x01	; 1
   1a524:	20 e0       	ldi	r18, 0x00	; 0
   1a526:	30 e0       	ldi	r19, 0x00	; 0
   1a528:	a9 01       	movw	r20, r18
   1a52a:	be 01       	movw	r22, r28
   1a52c:	66 5f       	subi	r22, 0xF6	; 246
   1a52e:	7f 4f       	sbci	r23, 0xFF	; 255
   1a530:	c7 01       	movw	r24, r14
   1a532:	0e 94 bc c2 	call	0x18578	; 0x18578 <lif_read>
   1a536:	6f 3f       	cpi	r22, 0xFF	; 255
   1a538:	71 05       	cpc	r23, r1
   1a53a:	81 05       	cpc	r24, r1
   1a53c:	91 05       	cpc	r25, r1
   1a53e:	09 f0       	breq	.+2      	; 0x1a542 <lif_open_volume+0xf0>
   1a540:	6c f4       	brge	.+26     	; 0x1a55c <lif_open_volume+0x10a>
    {
        if(debuglevel & LIF_DEBUG)
   1a542:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1a546:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1a54a:	92 ff       	sbrs	r25, 2
   1a54c:	26 c0       	rjmp	.+76     	; 0x1a59a <lif_open_volume+0x148>
            printf("lif_open_volume:[%s] error read volume header failed\n", name);
   1a54e:	ed b7       	in	r30, 0x3d	; 61
   1a550:	fe b7       	in	r31, 0x3e	; 62
   1a552:	d5 82       	std	Z+5, r13	; 0x05
   1a554:	c4 82       	std	Z+4, r12	; 0x04
   1a556:	89 ed       	ldi	r24, 0xD9	; 217
   1a558:	9b e3       	ldi	r25, 0x3B	; 59
   1a55a:	19 c0       	rjmp	.+50     	; 0x1a58e <lif_open_volume+0x13c>
        lif_closedir(LIF);
        return(NULL);
    }

// Unpack Volumes has the Directory start sector
    lif_str2vol(buffer, LIF);
   1a55c:	b7 01       	movw	r22, r14
   1a55e:	ce 01       	movw	r24, r28
   1a560:	0a 96       	adiw	r24, 0x0a	; 10
   1a562:	0e 94 cb c4 	call	0x18996	; 0x18996 <lif_str2vol>

// Validate basic Volume headers
    if( !lif_check_volume(LIF) )
   1a566:	c7 01       	movw	r24, r14
   1a568:	0e 94 d7 c8 	call	0x191ae	; 0x191ae <lif_check_volume>
   1a56c:	89 2b       	or	r24, r25
   1a56e:	c1 f4       	brne	.+48     	; 0x1a5a0 <lif_open_volume+0x14e>
    {
        if(debuglevel & LIF_DEBUG)
   1a570:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1a574:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1a578:	92 ff       	sbrs	r25, 2
   1a57a:	0f c0       	rjmp	.+30     	; 0x1a59a <lif_open_volume+0x148>
            printf("lif_open_volume:[%s] error volume validate failed\n", LIF->name);
   1a57c:	f7 01       	movw	r30, r14
   1a57e:	80 81       	ld	r24, Z
   1a580:	91 81       	ldd	r25, Z+1	; 0x01
   1a582:	ed b7       	in	r30, 0x3d	; 61
   1a584:	fe b7       	in	r31, 0x3e	; 62
   1a586:	95 83       	std	Z+5, r25	; 0x05
   1a588:	84 83       	std	Z+4, r24	; 0x04
   1a58a:	86 ea       	ldi	r24, 0xA6	; 166
   1a58c:	9b e3       	ldi	r25, 0x3B	; 59
   1a58e:	a0 e0       	ldi	r26, 0x00	; 0
   1a590:	81 83       	std	Z+1, r24	; 0x01
   1a592:	92 83       	std	Z+2, r25	; 0x02
   1a594:	a3 83       	std	Z+3, r26	; 0x03
   1a596:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1a59a:	c7 01       	movw	r24, r14
   1a59c:	9d d8       	rcall	.-3782   	; 0x196d8 <lif_close_volume>
   1a59e:	8a cf       	rjmp	.-236    	; 0x1a4b4 <lif_open_volume+0x62>
        lif_closedir(LIF);
        return(NULL);
    }

// Initialize remaining LIF headers
    LIF->filestart = LIF->VOL.DirStartSector + LIF->VOL.DirSectors;
   1a5a0:	f7 01       	movw	r30, r14
   1a5a2:	45 a5       	ldd	r20, Z+45	; 0x2d
   1a5a4:	56 a5       	ldd	r21, Z+46	; 0x2e
   1a5a6:	67 a5       	ldd	r22, Z+47	; 0x2f
   1a5a8:	70 a9       	ldd	r23, Z+48	; 0x30
   1a5aa:	85 a9       	ldd	r24, Z+53	; 0x35
   1a5ac:	96 a9       	ldd	r25, Z+54	; 0x36
   1a5ae:	a7 a9       	ldd	r26, Z+55	; 0x37
   1a5b0:	b0 ad       	ldd	r27, Z+56	; 0x38
   1a5b2:	48 0f       	add	r20, r24
   1a5b4:	59 1f       	adc	r21, r25
   1a5b6:	6a 1f       	adc	r22, r26
   1a5b8:	7b 1f       	adc	r23, r27
   1a5ba:	44 87       	std	Z+12, r20	; 0x0c
   1a5bc:	55 87       	std	Z+13, r21	; 0x0d
   1a5be:	66 87       	std	Z+14, r22	; 0x0e
   1a5c0:	77 87       	std	Z+15, r23	; 0x0f
    LIF->filesectors = LIF->sectors - LIF->filestart;
   1a5c2:	84 81       	ldd	r24, Z+4	; 0x04
   1a5c4:	95 81       	ldd	r25, Z+5	; 0x05
   1a5c6:	a6 81       	ldd	r26, Z+6	; 0x06
   1a5c8:	b7 81       	ldd	r27, Z+7	; 0x07
   1a5ca:	84 1b       	sub	r24, r20
   1a5cc:	95 0b       	sbc	r25, r21
   1a5ce:	a6 0b       	sbc	r26, r22
   1a5d0:	b7 0b       	sbc	r27, r23
   1a5d2:	80 8b       	std	Z+16, r24	; 0x10
   1a5d4:	91 8b       	std	Z+17, r25	; 0x11
   1a5d6:	a2 8b       	std	Z+18, r26	; 0x12
   1a5d8:	b3 8b       	std	Z+19, r27	; 0x13
    LIF->freesectors = LIF->filesectors;
   1a5da:	80 8f       	std	Z+24, r24	; 0x18
   1a5dc:	91 8f       	std	Z+25, r25	; 0x19
   1a5de:	a2 8f       	std	Z+26, r26	; 0x1a
   1a5e0:	b3 8f       	std	Z+27, r27	; 0x1b
    LIF->usedsectors = 0;
   1a5e2:	14 8a       	std	Z+20, r1	; 0x14
   1a5e4:	15 8a       	std	Z+21, r1	; 0x15
   1a5e6:	16 8a       	std	Z+22, r1	; 0x16
   1a5e8:	17 8a       	std	Z+23, r1	; 0x17
    LIF->purged = 0;
   1a5ea:	17 8e       	std	Z+31, r1	; 0x1f
   1a5ec:	16 8e       	std	Z+30, r1	; 0x1e
    LIF->files = 0;
   1a5ee:	15 8e       	std	Z+29, r1	; 0x1d
   1a5f0:	14 8e       	std	Z+28, r1	; 0x1c
    LIF->dirindex = 0;
   1a5f2:	11 a2       	std	Z+33, r1	; 0x21
   1a5f4:	10 a2       	std	Z+32, r1	; 0x20
    LIF->EOFindex = 0;
   1a5f6:	13 a2       	std	Z+35, r1	; 0x23
   1a5f8:	12 a2       	std	Z+34, r1	; 0x22

    if( lif_updatefree(LIF) == NULL)
   1a5fa:	c7 01       	movw	r24, r14
   1a5fc:	d6 d9       	rcall	.-3156   	; 0x199aa <lif_updatefree>
   1a5fe:	8c 01       	movw	r16, r24
   1a600:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1a604:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1a608:	01 15       	cp	r16, r1
   1a60a:	11 05       	cpc	r17, r1
   1a60c:	a1 f4       	brne	.+40     	; 0x1a636 <lif_open_volume+0x1e4>
    {
        if(debuglevel & LIF_DEBUG)
   1a60e:	92 ff       	sbrs	r25, 2
   1a610:	0f c0       	rjmp	.+30     	; 0x1a630 <lif_open_volume+0x1de>
            printf("lif_open_volume:[%s] error directory check failed\n", LIF->name);
   1a612:	f7 01       	movw	r30, r14
   1a614:	80 81       	ld	r24, Z
   1a616:	91 81       	ldd	r25, Z+1	; 0x01
   1a618:	ed b7       	in	r30, 0x3d	; 61
   1a61a:	fe b7       	in	r31, 0x3e	; 62
   1a61c:	95 83       	std	Z+5, r25	; 0x05
   1a61e:	84 83       	std	Z+4, r24	; 0x04
   1a620:	83 e7       	ldi	r24, 0x73	; 115
   1a622:	9b e3       	ldi	r25, 0x3B	; 59
   1a624:	a0 e0       	ldi	r26, 0x00	; 0
   1a626:	81 83       	std	Z+1, r24	; 0x01
   1a628:	92 83       	std	Z+2, r25	; 0x02
   1a62a:	a3 83       	std	Z+3, r26	; 0x03
   1a62c:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1a630:	c7 01       	movw	r24, r14
   1a632:	52 d8       	rcall	.-3932   	; 0x196d8 <lif_close_volume>
    if( lif_updatefree(LIF) == NULL)
    {
        if(debuglevel & LIF_DEBUG)
            printf("lif_open_volume:[%s] error directory check failed\n", LIF->name);
        lif_closedir(LIF);
        return(NULL);
   1a634:	08 c0       	rjmp	.+16     	; 0x1a646 <lif_open_volume+0x1f4>
    }

    if(debuglevel &LIF_DEBUG)
   1a636:	92 ff       	sbrs	r25, 2
   1a638:	05 c0       	rjmp	.+10     	; 0x1a644 <lif_open_volume+0x1f2>
        lif_dump_vol(LIF, "Volume Listing");
   1a63a:	6b e2       	ldi	r22, 0x2B	; 43
   1a63c:	76 e1       	ldi	r23, 0x16	; 22
   1a63e:	c7 01       	movw	r24, r14
   1a640:	0e 94 11 c7 	call	0x18e22	; 0x18e22 <lif_dump_vol>
   1a644:	87 01       	movw	r16, r14
    return( LIF );
}
   1a646:	c8 01       	movw	r24, r16
   1a648:	c7 5c       	subi	r28, 0xC7	; 199
   1a64a:	de 4f       	sbci	r29, 0xFE	; 254
   1a64c:	ec e0       	ldi	r30, 0x0C	; 12
   1a64e:	0c 94 c6 e8 	jmp	0x1d18c	; 0x1d18c <__epilogue_restores__+0xc>

0001a652 <lif_dir>:
/// @brief Display a LIF image file directory
/// @param[in] lifimagename: LIF disk image name
/// @return -1 on error or number of files found
MEMSPACE
void lif_dir(char *lifimagename)
{
   1a652:	2f 92       	push	r2
   1a654:	3f 92       	push	r3
   1a656:	4f 92       	push	r4
   1a658:	5f 92       	push	r5
   1a65a:	6f 92       	push	r6
   1a65c:	8f 92       	push	r8
   1a65e:	9f 92       	push	r9
   1a660:	af 92       	push	r10
   1a662:	bf 92       	push	r11
   1a664:	cf 92       	push	r12
   1a666:	df 92       	push	r13
   1a668:	ef 92       	push	r14
   1a66a:	0f 93       	push	r16
   1a66c:	1f 93       	push	r17
   1a66e:	cf 93       	push	r28
   1a670:	df 93       	push	r29
   1a672:	cd b7       	in	r28, 0x3d	; 61
   1a674:	de b7       	in	r29, 0x3e	; 62
   1a676:	af 97       	sbiw	r28, 0x2f	; 47
   1a678:	0f b6       	in	r0, 0x3f	; 63
   1a67a:	f8 94       	cli
   1a67c:	de bf       	out	0x3e, r29	; 62
   1a67e:	0f be       	out	0x3f, r0	; 63
   1a680:	cd bf       	out	0x3d, r28	; 61
    int index = 0;
    char *vol;

    int warn = ' ';

    LIF = lif_open_volume(lifimagename,"rb+");
   1a682:	66 ef       	ldi	r22, 0xF6	; 246
   1a684:	78 e0       	ldi	r23, 0x08	; 8
   1a686:	e5 de       	rcall	.-566    	; 0x1a452 <lif_open_volume>
   1a688:	9f a7       	std	Y+47, r25	; 0x2f
   1a68a:	8e a7       	std	Y+46, r24	; 0x2e
    if(LIF == NULL)
   1a68c:	00 97       	sbiw	r24, 0x00	; 0
   1a68e:	09 f4       	brne	.+2      	; 0x1a692 <lif_dir+0x40>
   1a690:	9e c1       	rjmp	.+828    	; 0x1a9ce <lif_dir+0x37c>
        return;

    vol = (char *)LIF->VOL.Label;
    if(!vol[0])
   1a692:	fc 01       	movw	r30, r24
   1a694:	86 a1       	ldd	r24, Z+38	; 0x26
   1a696:	88 23       	and	r24, r24
   1a698:	21 f0       	breq	.+8      	; 0x1a6a2 <lif_dir+0x50>

    LIF = lif_open_volume(lifimagename,"rb+");
    if(LIF == NULL)
        return;

    vol = (char *)LIF->VOL.Label;
   1a69a:	8f 01       	movw	r16, r30
   1a69c:	0a 5d       	subi	r16, 0xDA	; 218
   1a69e:	1f 4f       	sbci	r17, 0xFF	; 255
   1a6a0:	02 c0       	rjmp	.+4      	; 0x1a6a6 <lif_dir+0x54>
    if(!vol[0])
        vol = "<EMPTY>";
   1a6a2:	0d ed       	ldi	r16, 0xDD	; 221
   1a6a4:	15 e1       	ldi	r17, 0x15	; 21

    printf("Volume:[%s] Date:[%s]\n", vol, lif_lifbcd2timestr(LIF->VOL.date));
   1a6a6:	8e a5       	ldd	r24, Y+46	; 0x2e
   1a6a8:	9f a5       	ldd	r25, Y+47	; 0x2f
   1a6aa:	87 5b       	subi	r24, 0xB7	; 183
   1a6ac:	9f 4f       	sbci	r25, 0xFF	; 255
   1a6ae:	0e 94 d5 c6 	call	0x18daa	; 0x18daa <lif_lifbcd2timestr>
   1a6b2:	ed b7       	in	r30, 0x3d	; 61
   1a6b4:	fe b7       	in	r31, 0x3e	; 62
   1a6b6:	97 83       	std	Z+7, r25	; 0x07
   1a6b8:	86 83       	std	Z+6, r24	; 0x06
   1a6ba:	15 83       	std	Z+5, r17	; 0x05
   1a6bc:	04 83       	std	Z+4, r16	; 0x04
   1a6be:	8c e5       	ldi	r24, 0x5C	; 92
   1a6c0:	9b e3       	ldi	r25, 0x3B	; 59
   1a6c2:	a0 e0       	ldi	r26, 0x00	; 0
   1a6c4:	81 83       	std	Z+1, r24	; 0x01
   1a6c6:	92 83       	std	Z+2, r25	; 0x02
   1a6c8:	a3 83       	std	Z+3, r26	; 0x03
   1a6ca:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>

    printf("NAME         TYPE   START SECTOR        SIZE    RECSIZE   DATE\n");
   1a6ce:	8c e1       	ldi	r24, 0x1C	; 28
   1a6d0:	9b e3       	ldi	r25, 0x3B	; 59
   1a6d2:	a0 e0       	ldi	r26, 0x00	; 0
   1a6d4:	ed b7       	in	r30, 0x3d	; 61
   1a6d6:	fe b7       	in	r31, 0x3e	; 62
   1a6d8:	81 83       	std	Z+1, r24	; 0x01
   1a6da:	92 83       	std	Z+2, r25	; 0x02
   1a6dc:	a3 83       	std	Z+3, r26	; 0x03
   1a6de:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
    long bytes;
    lif_t *LIF;
    int index = 0;
    char *vol;

    int warn = ' ';
   1a6e2:	00 e2       	ldi	r16, 0x20	; 32
   1a6e4:	10 e0       	ldi	r17, 0x00	; 0
   1a6e6:	1f 8b       	std	Y+23, r17	; 0x17
   1a6e8:	0e 8b       	std	Y+22, r16	; 0x16
MEMSPACE
void lif_dir(char *lifimagename)
{
    long bytes;
    lif_t *LIF;
    int index = 0;
   1a6ea:	21 2c       	mov	r2, r1
   1a6ec:	31 2c       	mov	r3, r1
    {

        if(!lif_readdirindex(LIF,index))
            break;

        if(LIF->DIR.FileType == 0xffff)
   1a6ee:	0e a5       	ldd	r16, Y+46	; 0x2e
   1a6f0:	1f a5       	ldd	r17, Y+47	; 0x2f
   1a6f2:	06 5a       	subi	r16, 0xA6	; 166
   1a6f4:	1f 4f       	sbci	r17, 0xFF	; 255
   1a6f6:	1d 8f       	std	Y+29, r17	; 0x1d
   1a6f8:	0c 8f       	std	Y+28, r16	; 0x1c
            break;

        bytes = (LIF->DIR.FileSectors * (long)LIF_SECTOR_SIZE);
   1a6fa:	0e a5       	ldd	r16, Y+46	; 0x2e
   1a6fc:	1f a5       	ldd	r17, Y+47	; 0x2f
   1a6fe:	00 5a       	subi	r16, 0xA0	; 160
   1a700:	1f 4f       	sbci	r17, 0xFF	; 255
   1a702:	1d a3       	std	Y+37, r17	; 0x25
   1a704:	0c a3       	std	Y+36, r16	; 0x24

        if((LIF->DIR.FileType & 0xFFFC) == 0xE010)
        {
            if(LIF->DIR.FileBytes && lif_bytes2sectors(LIF->DIR.FileBytes) == LIF->DIR.FileSectors)
   1a706:	0e a5       	ldd	r16, Y+46	; 0x2e
   1a708:	1f a5       	ldd	r17, Y+47	; 0x2f
   1a70a:	04 59       	subi	r16, 0x94	; 148
   1a70c:	1f 4f       	sbci	r17, 0xFF	; 255
   1a70e:	1f a3       	std	Y+39, r17	; 0x27
   1a710:	0e a3       	std	Y+38, r16	; 0x26
            else
            {
                warn = '!';
                if(debuglevel & LIF_DEBUG)
                {
                    printf("LIF Directory:[%s] warning FileBytes:%ld as sectors:%ld != FileSectors:%ld\n",
   1a712:	80 ed       	ldi	r24, 0xD0	; 208
   1a714:	9a e3       	ldi	r25, 0x3A	; 58
   1a716:	6c 01       	movw	r12, r24
   1a718:	e1 2c       	mov	r14, r1
   1a71a:	0e a5       	ldd	r16, Y+46	; 0x2e
   1a71c:	1f a5       	ldd	r17, Y+47	; 0x2f
   1a71e:	01 5b       	subi	r16, 0xB1	; 177
   1a720:	1f 4f       	sbci	r17, 0xFF	; 255
   1a722:	1f 8f       	std	Y+31, r17	; 0x1f
   1a724:	0e 8f       	std	Y+30, r16	; 0x1e
                }
            }
        }

// name type start size
        printf("%-10s  %04Xh      %8lXh   %9ld%c      %4d   %s\n",
   1a726:	80 ea       	ldi	r24, 0xA0	; 160
   1a728:	9a e3       	ldi	r25, 0x3A	; 58
   1a72a:	2c 01       	movw	r4, r24
   1a72c:	61 2c       	mov	r6, r1
   1a72e:	0e a5       	ldd	r16, Y+46	; 0x2e
   1a730:	1f a5       	ldd	r17, Y+47	; 0x2f
   1a732:	04 5a       	subi	r16, 0xA4	; 164
   1a734:	1f 4f       	sbci	r17, 0xFF	; 255
   1a736:	19 a7       	std	Y+41, r17	; 0x29
   1a738:	08 a7       	std	Y+40, r16	; 0x28
   1a73a:	0e a5       	ldd	r16, Y+46	; 0x2e
   1a73c:	1f a5       	ldd	r17, Y+47	; 0x2f
   1a73e:	02 59       	subi	r16, 0x92	; 146
   1a740:	1f 4f       	sbci	r17, 0xFF	; 255
   1a742:	1b a7       	std	Y+43, r17	; 0x2b
   1a744:	0a a7       	std	Y+42, r16	; 0x2a
   1a746:	0e a5       	ldd	r16, Y+46	; 0x2e
   1a748:	1f a5       	ldd	r17, Y+47	; 0x2f
   1a74a:	0c 59       	subi	r16, 0x9C	; 156
   1a74c:	1f 4f       	sbci	r17, 0xFF	; 255
   1a74e:	1d a7       	std	Y+45, r17	; 0x2d
   1a750:	0c a7       	std	Y+44, r16	; 0x2c

    printf("NAME         TYPE   START SECTOR        SIZE    RECSIZE   DATE\n");
    while(1)
    {

        if(!lif_readdirindex(LIF,index))
   1a752:	b1 01       	movw	r22, r2
   1a754:	8e a5       	ldd	r24, Y+46	; 0x2e
   1a756:	9f a5       	ldd	r25, Y+47	; 0x2f
   1a758:	4d d8       	rcall	.-3942   	; 0x197f4 <lif_readdirindex>
   1a75a:	89 2b       	or	r24, r25
   1a75c:	09 f4       	brne	.+2      	; 0x1a760 <lif_dir+0x10e>
   1a75e:	ad c0       	rjmp	.+346    	; 0x1a8ba <lif_dir+0x268>
            break;

        if(LIF->DIR.FileType == 0xffff)
   1a760:	ac 8d       	ldd	r26, Y+28	; 0x1c
   1a762:	bd 8d       	ldd	r27, Y+29	; 0x1d
   1a764:	8d 91       	ld	r24, X+
   1a766:	9c 91       	ld	r25, X
   1a768:	8f 3f       	cpi	r24, 0xFF	; 255
   1a76a:	bf ef       	ldi	r27, 0xFF	; 255
   1a76c:	9b 07       	cpc	r25, r27
   1a76e:	09 f4       	brne	.+2      	; 0x1a772 <lif_dir+0x120>
   1a770:	a4 c0       	rjmp	.+328    	; 0x1a8ba <lif_dir+0x268>
            break;

        bytes = (LIF->DIR.FileSectors * (long)LIF_SECTOR_SIZE);
   1a772:	ec a1       	ldd	r30, Y+36	; 0x24
   1a774:	fd a1       	ldd	r31, Y+37	; 0x25
   1a776:	40 81       	ld	r20, Z
   1a778:	51 81       	ldd	r21, Z+1	; 0x01
   1a77a:	62 81       	ldd	r22, Z+2	; 0x02
   1a77c:	73 81       	ldd	r23, Z+3	; 0x03
   1a77e:	00 27       	eor	r16, r16
   1a780:	14 2f       	mov	r17, r20
   1a782:	25 2f       	mov	r18, r21
   1a784:	36 2f       	mov	r19, r22
   1a786:	08 8f       	std	Y+24, r16	; 0x18
   1a788:	19 8f       	std	Y+25, r17	; 0x19
   1a78a:	2a 8f       	std	Y+26, r18	; 0x1a
   1a78c:	3b 8f       	std	Y+27, r19	; 0x1b

        if((LIF->DIR.FileType & 0xFFFC) == 0xE010)
   1a78e:	8c 7f       	andi	r24, 0xFC	; 252
   1a790:	80 31       	cpi	r24, 0x10	; 16
   1a792:	90 4e       	sbci	r25, 0xE0	; 224
   1a794:	09 f0       	breq	.+2      	; 0x1a798 <lif_dir+0x146>
   1a796:	4b c0       	rjmp	.+150    	; 0x1a82e <lif_dir+0x1dc>
        {
            if(LIF->DIR.FileBytes && lif_bytes2sectors(LIF->DIR.FileBytes) == LIF->DIR.FileSectors)
   1a798:	ae a1       	ldd	r26, Y+38	; 0x26
   1a79a:	bf a1       	ldd	r27, Y+39	; 0x27
   1a79c:	8d 91       	ld	r24, X+
   1a79e:	9c 91       	ld	r25, X
   1a7a0:	00 97       	sbiw	r24, 0x00	; 0
   1a7a2:	b9 f0       	breq	.+46     	; 0x1a7d2 <lif_dir+0x180>
/// @return sectors
/// FIXME assumes 256 byte sectors
MEMSPACE
uint32_t lif_bytes2sectors(uint32_t bytes)
{
    uint32_t sectors = (bytes/(long)LIF_SECTOR_SIZE);
   1a7a4:	4c 01       	movw	r8, r24
   1a7a6:	a1 2c       	mov	r10, r1
   1a7a8:	b1 2c       	mov	r11, r1
   1a7aa:	33 27       	eor	r19, r19
   1a7ac:	2b 2d       	mov	r18, r11
   1a7ae:	1a 2d       	mov	r17, r10
   1a7b0:	09 2d       	mov	r16, r9
    if(bytes % (long)LIF_SECTOR_SIZE)
   1a7b2:	88 23       	and	r24, r24
   1a7b4:	21 f0       	breq	.+8      	; 0x1a7be <lif_dir+0x16c>
        ++sectors;
   1a7b6:	0f 5f       	subi	r16, 0xFF	; 255
   1a7b8:	1f 4f       	sbci	r17, 0xFF	; 255
   1a7ba:	2f 4f       	sbci	r18, 0xFF	; 255
   1a7bc:	3f 4f       	sbci	r19, 0xFF	; 255

        bytes = (LIF->DIR.FileSectors * (long)LIF_SECTOR_SIZE);

        if((LIF->DIR.FileType & 0xFFFC) == 0xE010)
        {
            if(LIF->DIR.FileBytes && lif_bytes2sectors(LIF->DIR.FileBytes) == LIF->DIR.FileSectors)
   1a7be:	40 17       	cp	r20, r16
   1a7c0:	51 07       	cpc	r21, r17
   1a7c2:	62 07       	cpc	r22, r18
   1a7c4:	73 07       	cpc	r23, r19
   1a7c6:	29 f4       	brne	.+10     	; 0x1a7d2 <lif_dir+0x180>
            {
                bytes = LIF->DIR.FileBytes;
   1a7c8:	88 8e       	std	Y+24, r8	; 0x18
   1a7ca:	99 8e       	std	Y+25, r9	; 0x19
   1a7cc:	aa 8e       	std	Y+26, r10	; 0x1a
   1a7ce:	bb 8e       	std	Y+27, r11	; 0x1b
   1a7d0:	2e c0       	rjmp	.+92     	; 0x1a82e <lif_dir+0x1dc>
            }
            else
            {
                warn = '!';
                if(debuglevel & LIF_DEBUG)
   1a7d2:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   1a7d6:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1a7da:	32 ff       	sbrs	r19, 2
   1a7dc:	24 c0       	rjmp	.+72     	; 0x1a826 <lif_dir+0x1d4>
                {
                    printf("LIF Directory:[%s] warning FileBytes:%ld as sectors:%ld != FileSectors:%ld\n",
   1a7de:	4c 01       	movw	r8, r24
   1a7e0:	a1 2c       	mov	r10, r1
   1a7e2:	b1 2c       	mov	r11, r1
/// @return sectors
/// FIXME assumes 256 byte sectors
MEMSPACE
uint32_t lif_bytes2sectors(uint32_t bytes)
{
    uint32_t sectors = (bytes/(long)LIF_SECTOR_SIZE);
   1a7e4:	33 27       	eor	r19, r19
   1a7e6:	2b 2d       	mov	r18, r11
   1a7e8:	1a 2d       	mov	r17, r10
   1a7ea:	09 2d       	mov	r16, r9
    if(bytes % (long)LIF_SECTOR_SIZE)
   1a7ec:	88 23       	and	r24, r24
   1a7ee:	21 f0       	breq	.+8      	; 0x1a7f8 <lif_dir+0x1a6>
        ++sectors;
   1a7f0:	0f 5f       	subi	r16, 0xFF	; 255
   1a7f2:	1f 4f       	sbci	r17, 0xFF	; 255
   1a7f4:	2f 4f       	sbci	r18, 0xFF	; 255
   1a7f6:	3f 4f       	sbci	r19, 0xFF	; 255
            else
            {
                warn = '!';
                if(debuglevel & LIF_DEBUG)
                {
                    printf("LIF Directory:[%s] warning FileBytes:%ld as sectors:%ld != FileSectors:%ld\n",
   1a7f8:	ed b7       	in	r30, 0x3d	; 61
   1a7fa:	fe b7       	in	r31, 0x3e	; 62
   1a7fc:	46 87       	std	Z+14, r20	; 0x0e
   1a7fe:	57 87       	std	Z+15, r21	; 0x0f
   1a800:	60 8b       	std	Z+16, r22	; 0x10
   1a802:	71 8b       	std	Z+17, r23	; 0x11
   1a804:	02 87       	std	Z+10, r16	; 0x0a
   1a806:	13 87       	std	Z+11, r17	; 0x0b
   1a808:	24 87       	std	Z+12, r18	; 0x0c
   1a80a:	35 87       	std	Z+13, r19	; 0x0d
   1a80c:	86 82       	std	Z+6, r8	; 0x06
   1a80e:	97 82       	std	Z+7, r9	; 0x07
   1a810:	a0 86       	std	Z+8, r10	; 0x08
   1a812:	b1 86       	std	Z+9, r11	; 0x09
   1a814:	0e 8d       	ldd	r16, Y+30	; 0x1e
   1a816:	1f 8d       	ldd	r17, Y+31	; 0x1f
   1a818:	15 83       	std	Z+5, r17	; 0x05
   1a81a:	04 83       	std	Z+4, r16	; 0x04
   1a81c:	c1 82       	std	Z+1, r12	; 0x01
   1a81e:	d2 82       	std	Z+2, r13	; 0x02
   1a820:	e3 82       	std	Z+3, r14	; 0x03
   1a822:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
            {
                bytes = LIF->DIR.FileBytes;
            }
            else
            {
                warn = '!';
   1a826:	01 e2       	ldi	r16, 0x21	; 33
   1a828:	10 e0       	ldi	r17, 0x00	; 0
   1a82a:	1f 8b       	std	Y+23, r17	; 0x17
   1a82c:	0e 8b       	std	Y+22, r16	; 0x16
                }
            }
        }

// name type start size
        printf("%-10s  %04Xh      %8lXh   %9ld%c      %4d   %s\n",
   1a82e:	ac 8d       	ldd	r26, Y+28	; 0x1c
   1a830:	bd 8d       	ldd	r27, Y+29	; 0x1d
   1a832:	8d 90       	ld	r8, X+
   1a834:	9c 90       	ld	r9, X
   1a836:	81 14       	cp	r8, r1
   1a838:	91 04       	cpc	r9, r1
   1a83a:	19 f0       	breq	.+6      	; 0x1a842 <lif_dir+0x1f0>
   1a83c:	0e 8d       	ldd	r16, Y+30	; 0x1e
   1a83e:	1f 8d       	ldd	r17, Y+31	; 0x1f
   1a840:	02 c0       	rjmp	.+4      	; 0x1a846 <lif_dir+0x1f4>
   1a842:	0a e3       	ldi	r16, 0x3A	; 58
   1a844:	16 e1       	ldi	r17, 0x16	; 22
   1a846:	a8 a5       	ldd	r26, Y+40	; 0x28
   1a848:	b9 a5       	ldd	r27, Y+41	; 0x29
   1a84a:	8d 91       	ld	r24, X+
   1a84c:	9d 91       	ld	r25, X+
   1a84e:	0d 90       	ld	r0, X+
   1a850:	bc 91       	ld	r27, X
   1a852:	a0 2d       	mov	r26, r0
   1a854:	88 a3       	std	Y+32, r24	; 0x20
   1a856:	99 a3       	std	Y+33, r25	; 0x21
   1a858:	aa a3       	std	Y+34, r26	; 0x22
   1a85a:	bb a3       	std	Y+35, r27	; 0x23
   1a85c:	ea a5       	ldd	r30, Y+42	; 0x2a
   1a85e:	fb a5       	ldd	r31, Y+43	; 0x2b
   1a860:	a0 80       	ld	r10, Z
   1a862:	b1 80       	ldd	r11, Z+1	; 0x01
   1a864:	8c a5       	ldd	r24, Y+44	; 0x2c
   1a866:	9d a5       	ldd	r25, Y+45	; 0x2d
   1a868:	0e 94 d5 c6 	call	0x18daa	; 0x18daa <lif_lifbcd2timestr>
   1a86c:	ed b7       	in	r30, 0x3d	; 61
   1a86e:	fe b7       	in	r31, 0x3e	; 62
   1a870:	95 8b       	std	Z+21, r25	; 0x15
   1a872:	84 8b       	std	Z+20, r24	; 0x14
   1a874:	b3 8a       	std	Z+19, r11	; 0x13
   1a876:	a2 8a       	std	Z+18, r10	; 0x12
   1a878:	2e 89       	ldd	r18, Y+22	; 0x16
   1a87a:	3f 89       	ldd	r19, Y+23	; 0x17
   1a87c:	31 8b       	std	Z+17, r19	; 0x11
   1a87e:	20 8b       	std	Z+16, r18	; 0x10
   1a880:	88 8d       	ldd	r24, Y+24	; 0x18
   1a882:	99 8d       	ldd	r25, Y+25	; 0x19
   1a884:	aa 8d       	ldd	r26, Y+26	; 0x1a
   1a886:	bb 8d       	ldd	r27, Y+27	; 0x1b
   1a888:	84 87       	std	Z+12, r24	; 0x0c
   1a88a:	95 87       	std	Z+13, r25	; 0x0d
   1a88c:	a6 87       	std	Z+14, r26	; 0x0e
   1a88e:	b7 87       	std	Z+15, r27	; 0x0f
   1a890:	88 a1       	ldd	r24, Y+32	; 0x20
   1a892:	99 a1       	ldd	r25, Y+33	; 0x21
   1a894:	aa a1       	ldd	r26, Y+34	; 0x22
   1a896:	bb a1       	ldd	r27, Y+35	; 0x23
   1a898:	80 87       	std	Z+8, r24	; 0x08
   1a89a:	91 87       	std	Z+9, r25	; 0x09
   1a89c:	a2 87       	std	Z+10, r26	; 0x0a
   1a89e:	b3 87       	std	Z+11, r27	; 0x0b
   1a8a0:	97 82       	std	Z+7, r9	; 0x07
   1a8a2:	86 82       	std	Z+6, r8	; 0x06
   1a8a4:	15 83       	std	Z+5, r17	; 0x05
   1a8a6:	04 83       	std	Z+4, r16	; 0x04
   1a8a8:	41 82       	std	Z+1, r4	; 0x01
   1a8aa:	52 82       	std	Z+2, r5	; 0x02
   1a8ac:	63 82       	std	Z+3, r6	; 0x03
   1a8ae:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
            (long)bytes,
            warn,
            (int)LIF->DIR.SectorSize,
            lif_lifbcd2timestr(LIF->DIR.date));

        ++index;
   1a8b2:	ff ef       	ldi	r31, 0xFF	; 255
   1a8b4:	2f 1a       	sub	r2, r31
   1a8b6:	3f 0a       	sbc	r3, r31
    }
   1a8b8:	4c cf       	rjmp	.-360    	; 0x1a752 <lif_dir+0x100>

    printf("\n");
   1a8ba:	8e e9       	ldi	r24, 0x9E	; 158
   1a8bc:	9a e3       	ldi	r25, 0x3A	; 58
   1a8be:	a0 e0       	ldi	r26, 0x00	; 0
   1a8c0:	ed b7       	in	r30, 0x3d	; 61
   1a8c2:	fe b7       	in	r31, 0x3e	; 62
   1a8c4:	81 83       	std	Z+1, r24	; 0x01
   1a8c6:	92 83       	std	Z+2, r25	; 0x02
   1a8c8:	a3 83       	std	Z+3, r26	; 0x03
   1a8ca:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
    printf("%8ld Files\n", (long)LIF->files);
   1a8ce:	ee a5       	ldd	r30, Y+46	; 0x2e
   1a8d0:	ff a5       	ldd	r31, Y+47	; 0x2f
   1a8d2:	84 8d       	ldd	r24, Z+28	; 0x1c
   1a8d4:	95 8d       	ldd	r25, Z+29	; 0x1d
   1a8d6:	09 2e       	mov	r0, r25
   1a8d8:	00 0c       	add	r0, r0
   1a8da:	aa 0b       	sbc	r26, r26
   1a8dc:	bb 0b       	sbc	r27, r27
   1a8de:	ed b7       	in	r30, 0x3d	; 61
   1a8e0:	fe b7       	in	r31, 0x3e	; 62
   1a8e2:	84 83       	std	Z+4, r24	; 0x04
   1a8e4:	95 83       	std	Z+5, r25	; 0x05
   1a8e6:	a6 83       	std	Z+6, r26	; 0x06
   1a8e8:	b7 83       	std	Z+7, r27	; 0x07
   1a8ea:	82 e9       	ldi	r24, 0x92	; 146
   1a8ec:	9a e3       	ldi	r25, 0x3A	; 58
   1a8ee:	a0 e0       	ldi	r26, 0x00	; 0
   1a8f0:	81 83       	std	Z+1, r24	; 0x01
   1a8f2:	92 83       	std	Z+2, r25	; 0x02
   1a8f4:	a3 83       	std	Z+3, r26	; 0x03
   1a8f6:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
    printf("%8ld Purged\n", (long)LIF->purged);
   1a8fa:	ee a5       	ldd	r30, Y+46	; 0x2e
   1a8fc:	ff a5       	ldd	r31, Y+47	; 0x2f
   1a8fe:	86 8d       	ldd	r24, Z+30	; 0x1e
   1a900:	97 8d       	ldd	r25, Z+31	; 0x1f
   1a902:	09 2e       	mov	r0, r25
   1a904:	00 0c       	add	r0, r0
   1a906:	aa 0b       	sbc	r26, r26
   1a908:	bb 0b       	sbc	r27, r27
   1a90a:	ed b7       	in	r30, 0x3d	; 61
   1a90c:	fe b7       	in	r31, 0x3e	; 62
   1a90e:	84 83       	std	Z+4, r24	; 0x04
   1a910:	95 83       	std	Z+5, r25	; 0x05
   1a912:	a6 83       	std	Z+6, r26	; 0x06
   1a914:	b7 83       	std	Z+7, r27	; 0x07
   1a916:	85 e8       	ldi	r24, 0x85	; 133
   1a918:	9a e3       	ldi	r25, 0x3A	; 58
   1a91a:	a0 e0       	ldi	r26, 0x00	; 0
   1a91c:	81 83       	std	Z+1, r24	; 0x01
   1a91e:	92 83       	std	Z+2, r25	; 0x02
   1a920:	a3 83       	std	Z+3, r26	; 0x03
   1a922:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
    printf("%8ld Dir  start\n",   (long)LIF->VOL.DirStartSector);
   1a926:	ee a5       	ldd	r30, Y+46	; 0x2e
   1a928:	ff a5       	ldd	r31, Y+47	; 0x2f
   1a92a:	85 a5       	ldd	r24, Z+45	; 0x2d
   1a92c:	96 a5       	ldd	r25, Z+46	; 0x2e
   1a92e:	a7 a5       	ldd	r26, Z+47	; 0x2f
   1a930:	b0 a9       	ldd	r27, Z+48	; 0x30
   1a932:	ed b7       	in	r30, 0x3d	; 61
   1a934:	fe b7       	in	r31, 0x3e	; 62
   1a936:	84 83       	std	Z+4, r24	; 0x04
   1a938:	95 83       	std	Z+5, r25	; 0x05
   1a93a:	a6 83       	std	Z+6, r26	; 0x06
   1a93c:	b7 83       	std	Z+7, r27	; 0x07
   1a93e:	84 e7       	ldi	r24, 0x74	; 116
   1a940:	9a e3       	ldi	r25, 0x3A	; 58
   1a942:	a0 e0       	ldi	r26, 0x00	; 0
   1a944:	81 83       	std	Z+1, r24	; 0x01
   1a946:	92 83       	std	Z+2, r25	; 0x02
   1a948:	a3 83       	std	Z+3, r26	; 0x03
   1a94a:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
    printf("%8ld Dir  sectors\n", (long)LIF->VOL.DirSectors);
   1a94e:	ee a5       	ldd	r30, Y+46	; 0x2e
   1a950:	ff a5       	ldd	r31, Y+47	; 0x2f
   1a952:	85 a9       	ldd	r24, Z+53	; 0x35
   1a954:	96 a9       	ldd	r25, Z+54	; 0x36
   1a956:	a7 a9       	ldd	r26, Z+55	; 0x37
   1a958:	b0 ad       	ldd	r27, Z+56	; 0x38
   1a95a:	ed b7       	in	r30, 0x3d	; 61
   1a95c:	fe b7       	in	r31, 0x3e	; 62
   1a95e:	84 83       	std	Z+4, r24	; 0x04
   1a960:	95 83       	std	Z+5, r25	; 0x05
   1a962:	a6 83       	std	Z+6, r26	; 0x06
   1a964:	b7 83       	std	Z+7, r27	; 0x07
   1a966:	81 e6       	ldi	r24, 0x61	; 97
   1a968:	9a e3       	ldi	r25, 0x3A	; 58
   1a96a:	a0 e0       	ldi	r26, 0x00	; 0
   1a96c:	81 83       	std	Z+1, r24	; 0x01
   1a96e:	92 83       	std	Z+2, r25	; 0x02
   1a970:	a3 83       	std	Z+3, r26	; 0x03
   1a972:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
    printf("%8ld Used sectors\n", (long)LIF->usedsectors);
   1a976:	ee a5       	ldd	r30, Y+46	; 0x2e
   1a978:	ff a5       	ldd	r31, Y+47	; 0x2f
   1a97a:	84 89       	ldd	r24, Z+20	; 0x14
   1a97c:	95 89       	ldd	r25, Z+21	; 0x15
   1a97e:	a6 89       	ldd	r26, Z+22	; 0x16
   1a980:	b7 89       	ldd	r27, Z+23	; 0x17
   1a982:	ed b7       	in	r30, 0x3d	; 61
   1a984:	fe b7       	in	r31, 0x3e	; 62
   1a986:	84 83       	std	Z+4, r24	; 0x04
   1a988:	95 83       	std	Z+5, r25	; 0x05
   1a98a:	a6 83       	std	Z+6, r26	; 0x06
   1a98c:	b7 83       	std	Z+7, r27	; 0x07
   1a98e:	8e e4       	ldi	r24, 0x4E	; 78
   1a990:	9a e3       	ldi	r25, 0x3A	; 58
   1a992:	a0 e0       	ldi	r26, 0x00	; 0
   1a994:	81 83       	std	Z+1, r24	; 0x01
   1a996:	92 83       	std	Z+2, r25	; 0x02
   1a998:	a3 83       	std	Z+3, r26	; 0x03
   1a99a:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
    printf("%8ld Free sectors\n", (long)LIF->freesectors);
   1a99e:	ee a5       	ldd	r30, Y+46	; 0x2e
   1a9a0:	ff a5       	ldd	r31, Y+47	; 0x2f
   1a9a2:	80 8d       	ldd	r24, Z+24	; 0x18
   1a9a4:	91 8d       	ldd	r25, Z+25	; 0x19
   1a9a6:	a2 8d       	ldd	r26, Z+26	; 0x1a
   1a9a8:	b3 8d       	ldd	r27, Z+27	; 0x1b
   1a9aa:	ed b7       	in	r30, 0x3d	; 61
   1a9ac:	fe b7       	in	r31, 0x3e	; 62
   1a9ae:	84 83       	std	Z+4, r24	; 0x04
   1a9b0:	95 83       	std	Z+5, r25	; 0x05
   1a9b2:	a6 83       	std	Z+6, r26	; 0x06
   1a9b4:	b7 83       	std	Z+7, r27	; 0x07
   1a9b6:	8b e3       	ldi	r24, 0x3B	; 59
   1a9b8:	9a e3       	ldi	r25, 0x3A	; 58
   1a9ba:	a0 e0       	ldi	r26, 0x00	; 0
   1a9bc:	81 83       	std	Z+1, r24	; 0x01
   1a9be:	92 83       	std	Z+2, r25	; 0x02
   1a9c0:	a3 83       	std	Z+3, r26	; 0x03
   1a9c2:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1a9c6:	8e a5       	ldd	r24, Y+46	; 0x2e
   1a9c8:	9f a5       	ldd	r25, Y+47	; 0x2f
   1a9ca:	0e 94 6c cb 	call	0x196d8	; 0x196d8 <lif_close_volume>
    printf("%8ld Dir  sectors\n", (long)LIF->VOL.DirSectors);
    printf("%8ld Used sectors\n", (long)LIF->usedsectors);
    printf("%8ld Free sectors\n", (long)LIF->freesectors);

    lif_closedir(LIF);
}
   1a9ce:	af 96       	adiw	r28, 0x2f	; 47
   1a9d0:	0f b6       	in	r0, 0x3f	; 63
   1a9d2:	f8 94       	cli
   1a9d4:	de bf       	out	0x3e, r29	; 62
   1a9d6:	0f be       	out	0x3f, r0	; 63
   1a9d8:	cd bf       	out	0x3d, r28	; 61
   1a9da:	df 91       	pop	r29
   1a9dc:	cf 91       	pop	r28
   1a9de:	1f 91       	pop	r17
   1a9e0:	0f 91       	pop	r16
   1a9e2:	ef 90       	pop	r14
   1a9e4:	df 90       	pop	r13
   1a9e6:	cf 90       	pop	r12
   1a9e8:	bf 90       	pop	r11
   1a9ea:	af 90       	pop	r10
   1a9ec:	9f 90       	pop	r9
   1a9ee:	8f 90       	pop	r8
   1a9f0:	6f 90       	pop	r6
   1a9f2:	5f 90       	pop	r5
   1a9f4:	4f 90       	pop	r4
   1a9f6:	3f 90       	pop	r3
   1a9f8:	2f 90       	pop	r2
   1a9fa:	08 95       	ret

0001a9fc <lif_find_file>:
/// @param[in] *LIF: directory pointer
/// @param[in] liflabel: File name in LIF image
/// @return Directory index of record
MEMSPACE
int lif_find_file(lif_t *LIF, char *liflabel)
{
   1a9fc:	a5 e0       	ldi	r26, 0x05	; 5
   1a9fe:	b0 e0       	ldi	r27, 0x00	; 0
   1aa00:	e4 e0       	ldi	r30, 0x04	; 4
   1aa02:	f5 ed       	ldi	r31, 0xD5	; 213
   1aa04:	0c 94 ac e8 	jmp	0x1d158	; 0x1d158 <__prologue_saves__+0x10>
   1aa08:	7c 01       	movw	r14, r24
   1aa0a:	eb 01       	movw	r28, r22
    int index;

    if( !lif_checkname(liflabel) )
   1aa0c:	cb 01       	movw	r24, r22
   1aa0e:	0e 94 c6 c3 	call	0x1878c	; 0x1878c <lif_checkname>
   1aa12:	89 2b       	or	r24, r25
   1aa14:	69 f4       	brne	.+26     	; 0x1aa30 <lif_find_file+0x34>
    {
        if(debuglevel & LIF_DEBUG)
   1aa16:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1aa1a:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1aa1e:	92 ff       	sbrs	r25, 2
   1aa20:	48 c0       	rjmp	.+144    	; 0x1aab2 <lif_find_file+0xb6>
            printf("lif_find_file:[%s] invalid characters\n", liflabel);
   1aa22:	ed b7       	in	r30, 0x3d	; 61
   1aa24:	fe b7       	in	r31, 0x3e	; 62
   1aa26:	d5 83       	std	Z+5, r29	; 0x05
   1aa28:	c4 83       	std	Z+4, r28	; 0x04
   1aa2a:	84 e1       	ldi	r24, 0x14	; 20
   1aa2c:	9a e3       	ldi	r25, 0x3A	; 58
   1aa2e:	15 c0       	rjmp	.+42     	; 0x1aa5a <lif_find_file+0x5e>
        return(-1);
    }
    if(strlen(liflabel) > 10)
   1aa30:	fe 01       	movw	r30, r28
   1aa32:	01 90       	ld	r0, Z+
   1aa34:	00 20       	and	r0, r0
   1aa36:	e9 f7       	brne	.-6      	; 0x1aa32 <lif_find_file+0x36>
   1aa38:	31 97       	sbiw	r30, 0x01	; 1
   1aa3a:	ec 1b       	sub	r30, r28
   1aa3c:	fd 0b       	sbc	r31, r29
   1aa3e:	3b 97       	sbiw	r30, 0x0b	; 11
   1aa40:	98 f0       	brcs	.+38     	; 0x1aa68 <lif_find_file+0x6c>
    {
        if(debuglevel & LIF_DEBUG)
   1aa42:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1aa46:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1aa4a:	92 ff       	sbrs	r25, 2
   1aa4c:	32 c0       	rjmp	.+100    	; 0x1aab2 <lif_find_file+0xb6>
            printf("lif_find_file:[%s] liflabel too big\n", liflabel);
   1aa4e:	ed b7       	in	r30, 0x3d	; 61
   1aa50:	fe b7       	in	r31, 0x3e	; 62
   1aa52:	d5 83       	std	Z+5, r29	; 0x05
   1aa54:	c4 83       	std	Z+4, r28	; 0x04
   1aa56:	8f ee       	ldi	r24, 0xEF	; 239
   1aa58:	99 e3       	ldi	r25, 0x39	; 57
   1aa5a:	a0 e0       	ldi	r26, 0x00	; 0
   1aa5c:	81 83       	std	Z+1, r24	; 0x01
   1aa5e:	92 83       	std	Z+2, r25	; 0x02
   1aa60:	a3 83       	std	Z+3, r26	; 0x03
   1aa62:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
   1aa66:	25 c0       	rjmp	.+74     	; 0x1aab2 <lif_find_file+0xb6>
        return(-1);
    }

    if(LIF == NULL)
   1aa68:	e1 14       	cp	r14, r1
   1aa6a:	f1 04       	cpc	r15, r1
   1aa6c:	11 f1       	breq	.+68     	; 0x1aab2 <lif_find_file+0xb6>
   1aa6e:	00 e0       	ldi	r16, 0x00	; 0
   1aa70:	10 e0       	ldi	r17, 0x00	; 0
    while(1)
    {
        if(!lif_readdirindex(LIF,index))
            return(-1);

        if(LIF->DIR.FileType == 0xffff)
   1aa72:	67 01       	movw	r12, r14
   1aa74:	fa e5       	ldi	r31, 0x5A	; 90
   1aa76:	cf 0e       	add	r12, r31
   1aa78:	d1 1c       	adc	r13, r1
            return(-1);

        if( LIF->DIR.FileType && (strcasecmp((char *)LIF->DIR.filename,liflabel) == 0) )
   1aa7a:	57 01       	movw	r10, r14
   1aa7c:	2f e4       	ldi	r18, 0x4F	; 79
   1aa7e:	a2 0e       	add	r10, r18
   1aa80:	b1 1c       	adc	r11, r1
        return(-1);

    index = 0;
    while(1)
    {
        if(!lif_readdirindex(LIF,index))
   1aa82:	b8 01       	movw	r22, r16
   1aa84:	c7 01       	movw	r24, r14
   1aa86:	0e 94 fa cb 	call	0x197f4	; 0x197f4 <lif_readdirindex>
   1aa8a:	89 2b       	or	r24, r25
   1aa8c:	91 f0       	breq	.+36     	; 0x1aab2 <lif_find_file+0xb6>
            return(-1);

        if(LIF->DIR.FileType == 0xffff)
   1aa8e:	f6 01       	movw	r30, r12
   1aa90:	80 81       	ld	r24, Z
   1aa92:	91 81       	ldd	r25, Z+1	; 0x01
   1aa94:	8f 3f       	cpi	r24, 0xFF	; 255
   1aa96:	ff ef       	ldi	r31, 0xFF	; 255
   1aa98:	9f 07       	cpc	r25, r31
   1aa9a:	59 f0       	breq	.+22     	; 0x1aab2 <lif_find_file+0xb6>
            return(-1);

        if( LIF->DIR.FileType && (strcasecmp((char *)LIF->DIR.filename,liflabel) == 0) )
   1aa9c:	89 2b       	or	r24, r25
   1aa9e:	31 f0       	breq	.+12     	; 0x1aaac <lif_find_file+0xb0>
   1aaa0:	be 01       	movw	r22, r28
   1aaa2:	c5 01       	movw	r24, r10
   1aaa4:	0e 94 a4 32 	call	0x6548	; 0x6548 <strcasecmp>
   1aaa8:	89 2b       	or	r24, r25
   1aaaa:	31 f0       	breq	.+12     	; 0x1aab8 <lif_find_file+0xbc>
            break;
        ++index;
   1aaac:	0f 5f       	subi	r16, 0xFF	; 255
   1aaae:	1f 4f       	sbci	r17, 0xFF	; 255
   1aab0:	e8 cf       	rjmp	.-48     	; 0x1aa82 <lif_find_file+0x86>

    if( !lif_checkname(liflabel) )
    {
        if(debuglevel & LIF_DEBUG)
            printf("lif_find_file:[%s] invalid characters\n", liflabel);
        return(-1);
   1aab2:	8f ef       	ldi	r24, 0xFF	; 255
   1aab4:	9f ef       	ldi	r25, 0xFF	; 255
   1aab6:	01 c0       	rjmp	.+2      	; 0x1aaba <lif_find_file+0xbe>
            return(-1);

        if(LIF->DIR.FileType == 0xffff)
            return(-1);

        if( LIF->DIR.FileType && (strcasecmp((char *)LIF->DIR.filename,liflabel) == 0) )
   1aab8:	c8 01       	movw	r24, r16
            break;
        ++index;
    }
    return(index);
}
   1aaba:	cd b7       	in	r28, 0x3d	; 61
   1aabc:	de b7       	in	r29, 0x3e	; 62
   1aabe:	25 96       	adiw	r28, 0x05	; 5
   1aac0:	ea e0       	ldi	r30, 0x0A	; 10
   1aac2:	0c 94 c8 e8 	jmp	0x1d190	; 0x1d190 <__epilogue_restores__+0x10>

0001aac6 <lif_e010_pad_sector>:
/// @param[in] wbuf: E010 PAD data
/// @return size of E010 PAD data
/// FIXME assumes 256 byte secors
MEMSPACE
int lif_e010_pad_sector(long offset, uint8_t *wbuf)
{
   1aac6:	a5 e0       	ldi	r26, 0x05	; 5
   1aac8:	b0 e0       	ldi	r27, 0x00	; 0
   1aaca:	e9 e6       	ldi	r30, 0x69	; 105
   1aacc:	f5 ed       	ldi	r31, 0xD5	; 213
   1aace:	0c 94 ae e8 	jmp	0x1d15c	; 0x1d15c <__prologue_saves__+0x14>
   1aad2:	6b 01       	movw	r12, r22
   1aad4:	7c 01       	movw	r14, r24
   1aad6:	8a 01       	movw	r16, r20
    int ind;
    int pos,rem;

// Compute the current offset in this sector
    pos = (offset % (long)LIF_SECTOR_SIZE);
   1aad8:	20 e0       	ldi	r18, 0x00	; 0
   1aada:	31 e0       	ldi	r19, 0x01	; 1
   1aadc:	40 e0       	ldi	r20, 0x00	; 0
   1aade:	50 e0       	ldi	r21, 0x00	; 0
   1aae0:	0e 94 59 e8 	call	0x1d0b2	; 0x1d0b2 <__divmodsi4>
    if(!pos)
   1aae4:	61 15       	cp	r22, r1
   1aae6:	71 05       	cpc	r23, r1
   1aae8:	e1 f1       	breq	.+120    	; 0x1ab62 <lif_e010_pad_sector+0x9c>
        return(0);

// Number of bytes free in this sector
    rem = (long)LIF_SECTOR_SIZE - (long)pos;
   1aaea:	c0 e0       	ldi	r28, 0x00	; 0
   1aaec:	d1 e0       	ldi	r29, 0x01	; 1
   1aaee:	c6 1b       	sub	r28, r22
   1aaf0:	d7 0b       	sbc	r29, r23

// Bytes written to wbuf
    ind = 0;
// PAD
    wbuf[ind++] = 0xEF;
   1aaf2:	f8 01       	movw	r30, r16
   1aaf4:	8f ee       	ldi	r24, 0xEF	; 239
   1aaf6:	81 93       	st	Z+, r24
    while(ind<rem)
        wbuf[ind++] = 0xff;
   1aaf8:	2f ef       	ldi	r18, 0xFF	; 255

// Bytes written to wbuf
    ind = 0;
// PAD
    wbuf[ind++] = 0xEF;
    while(ind<rem)
   1aafa:	cf 01       	movw	r24, r30
   1aafc:	80 1b       	sub	r24, r16
   1aafe:	91 0b       	sbc	r25, r17
   1ab00:	8c 17       	cp	r24, r28
   1ab02:	9d 07       	cpc	r25, r29
   1ab04:	14 f4       	brge	.+4      	; 0x1ab0a <lif_e010_pad_sector+0x44>
        wbuf[ind++] = 0xff;
   1ab06:	21 93       	st	Z+, r18
   1ab08:	f8 cf       	rjmp	.-16     	; 0x1aafa <lif_e010_pad_sector+0x34>
   1ab0a:	1c 16       	cp	r1, r28
   1ab0c:	1d 06       	cpc	r1, r29
   1ab0e:	14 f0       	brlt	.+4      	; 0x1ab14 <lif_e010_pad_sector+0x4e>
   1ab10:	c1 e0       	ldi	r28, 0x01	; 1
   1ab12:	d0 e0       	ldi	r29, 0x00	; 0

    pos = (offset + (long) ind)  % (long) LIF_SECTOR_SIZE;
   1ab14:	ce 01       	movw	r24, r28
   1ab16:	0d 2e       	mov	r0, r29
   1ab18:	00 0c       	add	r0, r0
   1ab1a:	aa 0b       	sbc	r26, r26
   1ab1c:	bb 0b       	sbc	r27, r27
   1ab1e:	bc 01       	movw	r22, r24
   1ab20:	cd 01       	movw	r24, r26
   1ab22:	6c 0d       	add	r22, r12
   1ab24:	7d 1d       	adc	r23, r13
   1ab26:	8e 1d       	adc	r24, r14
   1ab28:	9f 1d       	adc	r25, r15
   1ab2a:	20 e0       	ldi	r18, 0x00	; 0
   1ab2c:	31 e0       	ldi	r19, 0x01	; 1
   1ab2e:	40 e0       	ldi	r20, 0x00	; 0
   1ab30:	50 e0       	ldi	r21, 0x00	; 0
   1ab32:	0e 94 59 e8 	call	0x1d0b2	; 0x1d0b2 <__divmodsi4>
// NEW SECTOR
// Debugging make sure we are at sector boundry
    if(pos)
   1ab36:	61 15       	cp	r22, r1
   1ab38:	71 05       	cpc	r23, r1
   1ab3a:	b1 f0       	breq	.+44     	; 0x1ab68 <lif_e010_pad_sector+0xa2>
    {
        if(debuglevel & LIF_DEBUG)
   1ab3c:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   1ab40:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1ab44:	32 ff       	sbrs	r19, 2
   1ab46:	12 c0       	rjmp	.+36     	; 0x1ab6c <lif_e010_pad_sector+0xa6>
            printf("lif_e010_dap_sector: expected sector boundry: offset:%d\n", (int) pos);
   1ab48:	ed b7       	in	r30, 0x3d	; 61
   1ab4a:	fe b7       	in	r31, 0x3e	; 62
   1ab4c:	75 83       	std	Z+5, r23	; 0x05
   1ab4e:	64 83       	std	Z+4, r22	; 0x04
   1ab50:	86 eb       	ldi	r24, 0xB6	; 182
   1ab52:	99 e3       	ldi	r25, 0x39	; 57
   1ab54:	a0 e0       	ldi	r26, 0x00	; 0
   1ab56:	81 83       	std	Z+1, r24	; 0x01
   1ab58:	92 83       	std	Z+2, r25	; 0x02
   1ab5a:	a3 83       	std	Z+3, r26	; 0x03
   1ab5c:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
   1ab60:	05 c0       	rjmp	.+10     	; 0x1ab6c <lif_e010_pad_sector+0xa6>
    int pos,rem;

// Compute the current offset in this sector
    pos = (offset % (long)LIF_SECTOR_SIZE);
    if(!pos)
        return(0);
   1ab62:	80 e0       	ldi	r24, 0x00	; 0
   1ab64:	90 e0       	ldi	r25, 0x00	; 0
   1ab66:	04 c0       	rjmp	.+8      	; 0x1ab70 <lif_e010_pad_sector+0xaa>
   1ab68:	ce 01       	movw	r24, r28
   1ab6a:	02 c0       	rjmp	.+4      	; 0x1ab70 <lif_e010_pad_sector+0xaa>
// Debugging make sure we are at sector boundry
    if(pos)
    {
        if(debuglevel & LIF_DEBUG)
            printf("lif_e010_dap_sector: expected sector boundry: offset:%d\n", (int) pos);
        return(-1);
   1ab6c:	8f ef       	ldi	r24, 0xFF	; 255
   1ab6e:	9f ef       	ldi	r25, 0xFF	; 255
    }
    return(ind);
}
   1ab70:	cd b7       	in	r28, 0x3d	; 61
   1ab72:	de b7       	in	r29, 0x3e	; 62
   1ab74:	25 96       	adiw	r28, 0x05	; 5
   1ab76:	e8 e0       	ldi	r30, 0x08	; 8
   1ab78:	0c 94 ca e8 	jmp	0x1d194	; 0x1d194 <__epilogue_restores__+0x14>

0001ab7c <lif_ascii_string_to_e010>:
/// @param[in] wbuf: E010 data result
/// @return size of E010 data
/// FIXME assumes 256 byte secors
MEMSPACE
int lif_ascii_string_to_e010(char *str, long offset, uint8_t *wbuf)
{
   1ab7c:	a5 e0       	ldi	r26, 0x05	; 5
   1ab7e:	b0 e0       	ldi	r27, 0x00	; 0
   1ab80:	e4 ec       	ldi	r30, 0xC4	; 196
   1ab82:	f5 ed       	ldi	r31, 0xD5	; 213
   1ab84:	0c 94 a4 e8 	jmp	0x1d148	; 0x1d148 <__prologue_saves__>
   1ab88:	ec 01       	movw	r28, r24
   1ab8a:	4a 01       	movw	r8, r20
   1ab8c:	5b 01       	movw	r10, r22
   1ab8e:	79 01       	movw	r14, r18
    int ind;
    int len;
    int pos,rem;

// String size
    len = strlen(str);
   1ab90:	fc 01       	movw	r30, r24
   1ab92:	01 90       	ld	r0, Z+
   1ab94:	00 20       	and	r0, r0
   1ab96:	e9 f7       	brne	.-6      	; 0x1ab92 <lif_ascii_string_to_e010+0x16>
   1ab98:	31 97       	sbiw	r30, 0x01	; 1
   1ab9a:	6f 01       	movw	r12, r30
   1ab9c:	c8 1a       	sub	r12, r24
   1ab9e:	d9 0a       	sbc	r13, r25
    ind = 0;

// Compute the current offset in this sector
    pos = (offset % (long) LIF_SECTOR_SIZE);
// Number of bytes free in this sector
    rem = (long) LIF_SECTOR_SIZE - (long) pos;
   1aba0:	41 2c       	mov	r4, r1
   1aba2:	51 2c       	mov	r5, r1
   1aba4:	32 01       	movw	r6, r4
   1aba6:	53 94       	inc	r5
   1aba8:	cb 01       	movw	r24, r22
   1abaa:	ba 01       	movw	r22, r20
   1abac:	a3 01       	movw	r20, r6
   1abae:	92 01       	movw	r18, r4
   1abb0:	0e 94 59 e8 	call	0x1d0b2	; 0x1d0b2 <__divmodsi4>
   1abb4:	21 2c       	mov	r2, r1
   1abb6:	33 24       	eor	r3, r3
   1abb8:	33 94       	inc	r3
   1abba:	c1 01       	movw	r24, r2
   1abbc:	86 1b       	sub	r24, r22
   1abbe:	97 0b       	sbc	r25, r23

/// We ALWAYS pad a sector if:
///   There is no room for a 0xdf single header
///   - OR -
///   Spliting a string takes more space then padding here (extra header)
    if(rem < 6)
   1abc0:	86 30       	cpi	r24, 0x06	; 6
   1abc2:	91 05       	cpc	r25, r1
   1abc4:	20 f0       	brcs	.+8      	; 0x1abce <lif_ascii_string_to_e010+0x52>
    ind = 0;

// Compute the current offset in this sector
    pos = (offset % (long) LIF_SECTOR_SIZE);
// Number of bytes free in this sector
    rem = (long) LIF_SECTOR_SIZE - (long) pos;
   1abc6:	1c 01       	movw	r2, r24

// String size
    len = strlen(str);

// Output buffer index
    ind = 0;
   1abc8:	00 e0       	ldi	r16, 0x00	; 0
   1abca:	10 e0       	ldi	r17, 0x00	; 0
   1abcc:	17 c0       	rjmp	.+46     	; 0x1abfc <lif_ascii_string_to_e010+0x80>
///   There is no room for a 0xdf single header
///   - OR -
///   Spliting a string takes more space then padding here (extra header)
    if(rem < 6)
    {
        ind = lif_e010_pad_sector(offset, wbuf);
   1abce:	a7 01       	movw	r20, r14
   1abd0:	c5 01       	movw	r24, r10
   1abd2:	b4 01       	movw	r22, r8
   1abd4:	78 df       	rcall	.-272    	; 0x1aac6 <lif_e010_pad_sector>
   1abd6:	8c 01       	movw	r16, r24
        if(ind < 0)
   1abd8:	97 fd       	sbrc	r25, 7
   1abda:	83 c0       	rjmp	.+262    	; 0x1ace2 <lif_ascii_string_to_e010+0x166>
            return(ind);

// Compute the current offset in this sector
        pos = ((offset + ind) % (long) LIF_SECTOR_SIZE);
// Number of bytes free in this sector
        rem = (long) LIF_SECTOR_SIZE - pos;
   1abdc:	09 2e       	mov	r0, r25
   1abde:	00 0c       	add	r0, r0
   1abe0:	aa 0b       	sbc	r26, r26
   1abe2:	bb 0b       	sbc	r27, r27
   1abe4:	bc 01       	movw	r22, r24
   1abe6:	cd 01       	movw	r24, r26
   1abe8:	68 0d       	add	r22, r8
   1abea:	79 1d       	adc	r23, r9
   1abec:	8a 1d       	adc	r24, r10
   1abee:	9b 1d       	adc	r25, r11
   1abf0:	a3 01       	movw	r20, r6
   1abf2:	92 01       	movw	r18, r4
   1abf4:	0e 94 59 e8 	call	0x1d0b2	; 0x1d0b2 <__divmodsi4>
   1abf8:	26 1a       	sub	r2, r22
   1abfa:	37 0a       	sbc	r3, r23
   1abfc:	f7 01       	movw	r30, r14
   1abfe:	e0 0f       	add	r30, r16
   1ac00:	f1 1f       	adc	r31, r17
   1ac02:	0d 5f       	subi	r16, 0xFD	; 253
   1ac04:	1f 4f       	sbci	r17, 0xFF	; 255
    }

// Note: IMPORTANT we have >= 6 bytes!!!

// Do not have to split, there is enough room
    if(rem >= (3 + len))
   1ac06:	c6 01       	movw	r24, r12
   1ac08:	02 96       	adiw	r24, 0x02	; 2
   1ac0a:	82 15       	cp	r24, r2
   1ac0c:	93 05       	cpc	r25, r3
   1ac0e:	84 f4       	brge	.+32     	; 0x1ac30 <lif_ascii_string_to_e010+0xb4>
    {

// Write string in new sector
// The full string + header will fit
        wbuf[ind++] = 0xDF;
   1ac10:	8f ed       	ldi	r24, 0xDF	; 223
   1ac12:	80 83       	st	Z, r24
        wbuf[ind++] = len & 0xff;
   1ac14:	c1 82       	std	Z+1, r12	; 0x01
        wbuf[ind++] = (len >> 8) & 0xff;
   1ac16:	d2 82       	std	Z+2, r13	; 0x02
   1ac18:	f7 01       	movw	r30, r14
   1ac1a:	e0 0f       	add	r30, r16
   1ac1c:	f1 1f       	adc	r31, r17
   1ac1e:	cf 01       	movw	r24, r30
   1ac20:	8e 19       	sub	r24, r14
   1ac22:	9f 09       	sbc	r25, r15
// Write string
        while(*str)
   1ac24:	29 91       	ld	r18, Y+
   1ac26:	22 23       	and	r18, r18
   1ac28:	09 f4       	brne	.+2      	; 0x1ac2c <lif_ascii_string_to_e010+0xb0>
   1ac2a:	5b c0       	rjmp	.+182    	; 0x1ace2 <lif_ascii_string_to_e010+0x166>
            wbuf[ind++] = *str++;
   1ac2c:	21 93       	st	Z+, r18
   1ac2e:	f7 cf       	rjmp	.-18     	; 0x1ac1e <lif_ascii_string_to_e010+0xa2>

// CURRENT SECTOR
// String spans a sector , so split the string

// 1st Split string header
        wbuf[ind++] = 0xCF;
   1ac30:	8f ec       	ldi	r24, 0xCF	; 207
   1ac32:	80 83       	st	Z, r24
        wbuf[ind++] = len & 0xff;
   1ac34:	c1 82       	std	Z+1, r12	; 0x01
        wbuf[ind++] = (len >>8) & 0xff;
   1ac36:	d2 82       	std	Z+2, r13	; 0x02
   1ac38:	d7 01       	movw	r26, r14
   1ac3a:	a0 0f       	add	r26, r16
   1ac3c:	b1 1f       	adc	r27, r17
// Write as much of the string as we can in this sector
        while(*str && ind<rem)
   1ac3e:	fe 01       	movw	r30, r28
   1ac40:	81 91       	ld	r24, Z+
   1ac42:	81 11       	cpse	r24, r1
   1ac44:	0e c0       	rjmp	.+28     	; 0x1ac62 <lif_ascii_string_to_e010+0xe6>
            wbuf[ind++] = *str++;

// NEW SECTOR
// Debugging make sure we are at sector boundry
        if(((offset + (long) ind)  % (long) LIF_SECTOR_SIZE))
   1ac46:	c8 01       	movw	r24, r16
   1ac48:	01 2e       	mov	r0, r17
   1ac4a:	00 0c       	add	r0, r0
   1ac4c:	aa 0b       	sbc	r26, r26
   1ac4e:	bb 0b       	sbc	r27, r27
   1ac50:	bc 01       	movw	r22, r24
   1ac52:	cd 01       	movw	r24, r26
   1ac54:	68 0d       	add	r22, r8
   1ac56:	79 1d       	adc	r23, r9
   1ac58:	8a 1d       	adc	r24, r10
   1ac5a:	9b 1d       	adc	r25, r11
   1ac5c:	61 11       	cpse	r22, r1
   1ac5e:	09 c0       	rjmp	.+18     	; 0x1ac72 <lif_ascii_string_to_e010+0xf6>
   1ac60:	21 c0       	rjmp	.+66     	; 0x1aca4 <lif_ascii_string_to_e010+0x128>
// 1st Split string header
        wbuf[ind++] = 0xCF;
        wbuf[ind++] = len & 0xff;
        wbuf[ind++] = (len >>8) & 0xff;
// Write as much of the string as we can in this sector
        while(*str && ind<rem)
   1ac62:	02 15       	cp	r16, r2
   1ac64:	13 05       	cpc	r17, r3
   1ac66:	7c f7       	brge	.-34     	; 0x1ac46 <lif_ascii_string_to_e010+0xca>
            wbuf[ind++] = *str++;
   1ac68:	0f 5f       	subi	r16, 0xFF	; 255
   1ac6a:	1f 4f       	sbci	r17, 0xFF	; 255
   1ac6c:	8d 93       	st	X+, r24
   1ac6e:	ef 01       	movw	r28, r30
   1ac70:	e6 cf       	rjmp	.-52     	; 0x1ac3e <lif_ascii_string_to_e010+0xc2>

// NEW SECTOR
// Debugging make sure we are at sector boundry
        if(((offset + (long) ind)  % (long) LIF_SECTOR_SIZE))
        {
            if(debuglevel & LIF_DEBUG)
   1ac72:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   1ac76:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1ac7a:	32 ff       	sbrs	r19, 2
   1ac7c:	30 c0       	rjmp	.+96     	; 0x1acde <lif_ascii_string_to_e010+0x162>
                printf("Expected sector boundry, offset:%d\n", (int) ((offset + ind) % LIF_SECTOR_SIZE) );
   1ac7e:	20 e0       	ldi	r18, 0x00	; 0
   1ac80:	31 e0       	ldi	r19, 0x01	; 1
   1ac82:	40 e0       	ldi	r20, 0x00	; 0
   1ac84:	50 e0       	ldi	r21, 0x00	; 0
   1ac86:	0e 94 59 e8 	call	0x1d0b2	; 0x1d0b2 <__divmodsi4>
   1ac8a:	ed b7       	in	r30, 0x3d	; 61
   1ac8c:	fe b7       	in	r31, 0x3e	; 62
   1ac8e:	75 83       	std	Z+5, r23	; 0x05
   1ac90:	64 83       	std	Z+4, r22	; 0x04
   1ac92:	82 e9       	ldi	r24, 0x92	; 146
   1ac94:	99 e3       	ldi	r25, 0x39	; 57
   1ac96:	a0 e0       	ldi	r26, 0x00	; 0
   1ac98:	81 83       	std	Z+1, r24	; 0x01
   1ac9a:	92 83       	std	Z+2, r25	; 0x02
   1ac9c:	a3 83       	std	Z+3, r26	; 0x03
   1ac9e:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
   1aca2:	1d c0       	rjmp	.+58     	; 0x1acde <lif_ascii_string_to_e010+0x162>
            return(-1);
        }

// Update remining string length
        len = strlen(str);
   1aca4:	fe 01       	movw	r30, r28
   1aca6:	01 90       	ld	r0, Z+
   1aca8:	00 20       	and	r0, r0
   1acaa:	e9 f7       	brne	.-6      	; 0x1aca6 <lif_ascii_string_to_e010+0x12a>
   1acac:	31 97       	sbiw	r30, 0x01	; 1
   1acae:	9f 01       	movw	r18, r30
   1acb0:	2c 1b       	sub	r18, r28
   1acb2:	3d 0b       	sbc	r19, r29
// 2nd Split string header
        wbuf[ind++] = 0x6F;
   1acb4:	d7 01       	movw	r26, r14
   1acb6:	a0 0f       	add	r26, r16
   1acb8:	b1 1f       	adc	r27, r17
   1acba:	8f e6       	ldi	r24, 0x6F	; 111
   1acbc:	8c 93       	st	X, r24
        wbuf[ind++] = (len & 0xff);
   1acbe:	fd 01       	movw	r30, r26
   1acc0:	21 83       	std	Z+1, r18	; 0x01
        wbuf[ind++] = (len>>8) & 0xff;
   1acc2:	32 83       	std	Z+2, r19	; 0x02
   1acc4:	0d 5f       	subi	r16, 0xFD	; 253
   1acc6:	1f 4f       	sbci	r17, 0xFF	; 255
   1acc8:	f7 01       	movw	r30, r14
   1acca:	e0 0f       	add	r30, r16
   1accc:	f1 1f       	adc	r31, r17
   1acce:	cf 01       	movw	r24, r30
   1acd0:	8e 19       	sub	r24, r14
   1acd2:	9f 09       	sbc	r25, r15
// Write string
        while(*str)
   1acd4:	29 91       	ld	r18, Y+
   1acd6:	22 23       	and	r18, r18
   1acd8:	21 f0       	breq	.+8      	; 0x1ace2 <lif_ascii_string_to_e010+0x166>
            wbuf[ind++] = *str++;
   1acda:	21 93       	st	Z+, r18
   1acdc:	f8 cf       	rjmp	.-16     	; 0x1acce <lif_ascii_string_to_e010+0x152>
// Debugging make sure we are at sector boundry
        if(((offset + (long) ind)  % (long) LIF_SECTOR_SIZE))
        {
            if(debuglevel & LIF_DEBUG)
                printf("Expected sector boundry, offset:%d\n", (int) ((offset + ind) % LIF_SECTOR_SIZE) );
            return(-1);
   1acde:	8f ef       	ldi	r24, 0xFF	; 255
   1ace0:	9f ef       	ldi	r25, 0xFF	; 255
        while(*str)
            wbuf[ind++] = *str++;
    }

    return(ind);
}
   1ace2:	cd b7       	in	r28, 0x3d	; 61
   1ace4:	de b7       	in	r29, 0x3e	; 62
   1ace6:	25 96       	adiw	r28, 0x05	; 5
   1ace8:	e2 e1       	ldi	r30, 0x12	; 18
   1acea:	0c 94 c0 e8 	jmp	0x1d180	; 0x1d180 <__epilogue_restores__>

0001acee <lif_add_ascii_file_as_e010_wrapper>:
/// @param[in] *LIF: Where to write file if set (not NULL)
/// @return size of formatted result
/// FIXME assumes 256 byte secors
MEMSPACE
long lif_add_ascii_file_as_e010_wrapper(lif_t *LIF, uint32_t offset, char *username)
{
   1acee:	ad e0       	ldi	r26, 0x0D	; 13
   1acf0:	b3 e0       	ldi	r27, 0x03	; 3
   1acf2:	ed e7       	ldi	r30, 0x7D	; 125
   1acf4:	f6 ed       	ldi	r31, 0xD6	; 214
   1acf6:	0c 94 a4 e8 	jmp	0x1d148	; 0x1d148 <__prologue_saves__>
   1acfa:	5c 01       	movw	r10, r24
   1acfc:	2a 01       	movw	r4, r20
   1acfe:	3b 01       	movw	r6, r22
   1ad00:	c9 01       	movw	r24, r18
// strings are limited to less then this
    char str[LIF_SECTOR_SIZE+1];
// output buffer must be larger then a single sectors because of either headers or padding
    uint8_t obuf[LIF_SECTOR_SIZE*2];

    fi = lif_open(username, "rb");
   1ad02:	6c ee       	ldi	r22, 0xEC	; 236
   1ad04:	78 e0       	ldi	r23, 0x08	; 8
   1ad06:	0e 94 38 c2 	call	0x18470	; 0x18470 <lif_open>
   1ad0a:	c7 5f       	subi	r28, 0xF7	; 247
   1ad0c:	dc 4f       	sbci	r29, 0xFC	; 252
   1ad0e:	99 83       	std	Y+1, r25	; 0x01
   1ad10:	88 83       	st	Y, r24
   1ad12:	c9 50       	subi	r28, 0x09	; 9
   1ad14:	d3 40       	sbci	r29, 0x03	; 3
    if(fi == NULL)
   1ad16:	89 2b       	or	r24, r25
   1ad18:	09 f4       	brne	.+2      	; 0x1ad1c <lif_add_ascii_file_as_e010_wrapper+0x2e>
   1ad1a:	63 c0       	rjmp	.+198    	; 0x1ade2 <lif_add_ascii_file_as_e010_wrapper+0xf4>
   1ad1c:	81 2c       	mov	r8, r1
   1ad1e:	91 2c       	mov	r9, r1
   1ad20:	c1 2c       	mov	r12, r1
   1ad22:	d1 2c       	mov	r13, r1
   1ad24:	76 01       	movw	r14, r12

        if(count > 256)
        {
            count = 0;
            if(LIF)
                printf("\tWrote: %8ld\r", (long)bytes);
   1ad26:	84 e8       	ldi	r24, 0x84	; 132
   1ad28:	99 e3       	ldi	r25, 0x39	; 57
   1ad2a:	9c 01       	movw	r18, r24
   1ad2c:	40 e0       	ldi	r20, 0x00	; 0
   1ad2e:	c5 5f       	subi	r28, 0xF5	; 245
   1ad30:	dc 4f       	sbci	r29, 0xFC	; 252
   1ad32:	28 83       	st	Y, r18
   1ad34:	39 83       	std	Y+1, r19	; 0x01
   1ad36:	4a 83       	std	Y+2, r20	; 0x02
   1ad38:	cb 50       	subi	r28, 0x0B	; 11
   1ad3a:	d3 40       	sbci	r29, 0x03	; 3
   1ad3c:	14 c0       	rjmp	.+40     	; 0x1ad66 <lif_add_ascii_file_as_e010_wrapper+0x78>
                fclose(fi);
                return(-1);
            }
        }

        offset += size;
   1ad3e:	c1 01       	movw	r24, r2
   1ad40:	03 2c       	mov	r0, r3
   1ad42:	00 0c       	add	r0, r0
   1ad44:	aa 0b       	sbc	r26, r26
   1ad46:	bb 0b       	sbc	r27, r27
   1ad48:	48 0e       	add	r4, r24
   1ad4a:	59 1e       	adc	r5, r25
   1ad4c:	6a 1e       	adc	r6, r26
   1ad4e:	7b 1e       	adc	r7, r27
        bytes += size;
   1ad50:	c8 0e       	add	r12, r24
   1ad52:	d9 1e       	adc	r13, r25
   1ad54:	ea 1e       	adc	r14, r26
   1ad56:	fb 1e       	adc	r15, r27
        count += size;
   1ad58:	82 0c       	add	r8, r2
   1ad5a:	93 1c       	adc	r9, r3

        if(count > 256)
   1ad5c:	31 e0       	ldi	r19, 0x01	; 1
   1ad5e:	83 16       	cp	r8, r19
   1ad60:	93 06       	cpc	r9, r19
   1ad62:	0c f0       	brlt	.+2      	; 0x1ad66 <lif_add_ascii_file_as_e010_wrapper+0x78>
   1ad64:	43 c0       	rjmp	.+134    	; 0x1adec <lif_add_ascii_file_as_e010_wrapper+0xfe>
    bytes = 0;
    count = 0;

// Read user file and write LIF records
// reserve 3 + LIF header bytes + 1 (EOS)
    while( fgets((char *)str,(int)sizeof(str) - 4, fi) != NULL )
   1ad66:	c7 5f       	subi	r28, 0xF7	; 247
   1ad68:	dc 4f       	sbci	r29, 0xFC	; 252
   1ad6a:	48 81       	ld	r20, Y
   1ad6c:	59 81       	ldd	r21, Y+1	; 0x01
   1ad6e:	c9 50       	subi	r28, 0x09	; 9
   1ad70:	d3 40       	sbci	r29, 0x03	; 3
   1ad72:	6d ef       	ldi	r22, 0xFD	; 253
   1ad74:	70 e0       	ldi	r23, 0x00	; 0
   1ad76:	ce 01       	movw	r24, r28
   1ad78:	88 5f       	subi	r24, 0xF8	; 248
   1ad7a:	9d 4f       	sbci	r25, 0xFD	; 253
   1ad7c:	0e 94 6c 77 	call	0xeed8	; 0xeed8 <fgets>
   1ad80:	89 2b       	or	r24, r25
   1ad82:	09 f4       	brne	.+2      	; 0x1ad86 <lif_add_ascii_file_as_e010_wrapper+0x98>
   1ad84:	4b c0       	rjmp	.+150    	; 0x1ae1c <lif_add_ascii_file_as_e010_wrapper+0x12e>
    {
        trim_tail((char *)str);
   1ad86:	ce 01       	movw	r24, r28
   1ad88:	88 5f       	subi	r24, 0xF8	; 248
   1ad8a:	9d 4f       	sbci	r25, 0xFD	; 253
   1ad8c:	0e 94 1b 33 	call	0x6636	; 0x6636 <trim_tail>

        strcat((char *)str,"\r");                 // HP85 lines end with "\r"
   1ad90:	63 e4       	ldi	r22, 0x43	; 67
   1ad92:	76 e1       	ldi	r23, 0x16	; 22
   1ad94:	ce 01       	movw	r24, r28
   1ad96:	88 5f       	subi	r24, 0xF8	; 248
   1ad98:	9d 4f       	sbci	r25, 0xFD	; 253
   1ad9a:	0e 94 5e 32 	call	0x64bc	; 0x64bc <strcat>

        size = lif_ascii_string_to_e010(str, offset, obuf);
   1ad9e:	9e 01       	movw	r18, r28
   1ada0:	28 5f       	subi	r18, 0xF8	; 248
   1ada2:	3f 4f       	sbci	r19, 0xFF	; 255
   1ada4:	b3 01       	movw	r22, r6
   1ada6:	a2 01       	movw	r20, r4
   1ada8:	ce 01       	movw	r24, r28
   1adaa:	88 5f       	subi	r24, 0xF8	; 248
   1adac:	9d 4f       	sbci	r25, 0xFD	; 253
   1adae:	e6 de       	rcall	.-564    	; 0x1ab7c <lif_ascii_string_to_e010>
   1adb0:	1c 01       	movw	r2, r24
// Write string
// Now Write string
        if(LIF)
   1adb2:	a1 14       	cp	r10, r1
   1adb4:	b1 04       	cpc	r11, r1
   1adb6:	19 f2       	breq	.-122    	; 0x1ad3e <lif_add_ascii_file_as_e010_wrapper+0x50>
        {
            len = lif_write(LIF, obuf, offset, size);
   1adb8:	8c 01       	movw	r16, r24
   1adba:	a3 01       	movw	r20, r6
   1adbc:	92 01       	movw	r18, r4
   1adbe:	be 01       	movw	r22, r28
   1adc0:	68 5f       	subi	r22, 0xF8	; 248
   1adc2:	7f 4f       	sbci	r23, 0xFF	; 255
   1adc4:	c5 01       	movw	r24, r10
   1adc6:	0e 94 0f c3 	call	0x1861e	; 0x1861e <lif_write>
            if(len < size)
   1adca:	82 15       	cp	r24, r2
   1adcc:	93 05       	cpc	r25, r3
   1adce:	0c f0       	brlt	.+2      	; 0x1add2 <lif_add_ascii_file_as_e010_wrapper+0xe4>
   1add0:	b6 cf       	rjmp	.-148    	; 0x1ad3e <lif_add_ascii_file_as_e010_wrapper+0x50>
            {
                fclose(fi);
   1add2:	c7 5f       	subi	r28, 0xF7	; 247
   1add4:	dc 4f       	sbci	r29, 0xFC	; 252
   1add6:	88 81       	ld	r24, Y
   1add8:	99 81       	ldd	r25, Y+1	; 0x01
   1adda:	c9 50       	subi	r28, 0x09	; 9
   1addc:	d3 40       	sbci	r29, 0x03	; 3
   1adde:	0e 94 fe 7d 	call	0xfbfc	; 0xfbfc <fclose>
                return(-1);
   1ade2:	6f ef       	ldi	r22, 0xFF	; 255
   1ade4:	7f ef       	ldi	r23, 0xFF	; 255
   1ade6:	8f ef       	ldi	r24, 0xFF	; 255
   1ade8:	9f ef       	ldi	r25, 0xFF	; 255
   1adea:	84 c0       	rjmp	.+264    	; 0x1aef4 <lif_add_ascii_file_as_e010_wrapper+0x206>
        count += size;

        if(count > 256)
        {
            count = 0;
            if(LIF)
   1adec:	a1 14       	cp	r10, r1
   1adee:	b1 04       	cpc	r11, r1
   1adf0:	91 f0       	breq	.+36     	; 0x1ae16 <lif_add_ascii_file_as_e010_wrapper+0x128>
                printf("\tWrote: %8ld\r", (long)bytes);
   1adf2:	ed b7       	in	r30, 0x3d	; 61
   1adf4:	fe b7       	in	r31, 0x3e	; 62
   1adf6:	c4 82       	std	Z+4, r12	; 0x04
   1adf8:	d5 82       	std	Z+5, r13	; 0x05
   1adfa:	e6 82       	std	Z+6, r14	; 0x06
   1adfc:	f7 82       	std	Z+7, r15	; 0x07
   1adfe:	c5 5f       	subi	r28, 0xF5	; 245
   1ae00:	dc 4f       	sbci	r29, 0xFC	; 252
   1ae02:	28 81       	ld	r18, Y
   1ae04:	39 81       	ldd	r19, Y+1	; 0x01
   1ae06:	4a 81       	ldd	r20, Y+2	; 0x02
   1ae08:	cb 50       	subi	r28, 0x0B	; 11
   1ae0a:	d3 40       	sbci	r29, 0x03	; 3
   1ae0c:	21 83       	std	Z+1, r18	; 0x01
   1ae0e:	32 83       	std	Z+2, r19	; 0x02
   1ae10:	43 83       	std	Z+3, r20	; 0x03
   1ae12:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
        bytes += size;
        count += size;

        if(count > 256)
        {
            count = 0;
   1ae16:	81 2c       	mov	r8, r1
   1ae18:	91 2c       	mov	r9, r1
   1ae1a:	a5 cf       	rjmp	.-182    	; 0x1ad66 <lif_add_ascii_file_as_e010_wrapper+0x78>
            if(LIF)
                printf("\tWrote: %8ld\r", (long)bytes);
        }
    }

    fclose(fi);
   1ae1c:	c7 5f       	subi	r28, 0xF7	; 247
   1ae1e:	dc 4f       	sbci	r29, 0xFC	; 252
   1ae20:	88 81       	ld	r24, Y
   1ae22:	99 81       	ldd	r25, Y+1	; 0x01
   1ae24:	c9 50       	subi	r28, 0x09	; 9
   1ae26:	d3 40       	sbci	r29, 0x03	; 3
   1ae28:	0e 94 fe 7d 	call	0xfbfc	; 0xfbfc <fclose>

// Write EOF
    str[0] = 0;
   1ae2c:	c8 5f       	subi	r28, 0xF8	; 248
   1ae2e:	dd 4f       	sbci	r29, 0xFD	; 253
   1ae30:	18 82       	st	Y, r1
   1ae32:	c8 50       	subi	r28, 0x08	; 8
   1ae34:	d2 40       	sbci	r29, 0x02	; 2
// We only want to return the count of bytes in the file NOT the padding at the end
// Write EOF string with padding
    size = lif_ascii_string_to_e010(str, offset,obuf);
   1ae36:	9e 01       	movw	r18, r28
   1ae38:	28 5f       	subi	r18, 0xF8	; 248
   1ae3a:	3f 4f       	sbci	r19, 0xFF	; 255
   1ae3c:	b3 01       	movw	r22, r6
   1ae3e:	a2 01       	movw	r20, r4
   1ae40:	ce 01       	movw	r24, r28
   1ae42:	88 5f       	subi	r24, 0xF8	; 248
   1ae44:	9d 4f       	sbci	r25, 0xFD	; 253
   1ae46:	9a de       	rcall	.-716    	; 0x1ab7c <lif_ascii_string_to_e010>
   1ae48:	4c 01       	movw	r8, r24

    if(LIF)
   1ae4a:	a1 14       	cp	r10, r1
   1ae4c:	b1 04       	cpc	r11, r1
   1ae4e:	d1 f4       	brne	.+52     	; 0x1ae84 <lif_add_ascii_file_as_e010_wrapper+0x196>
            return(-1);

    }

    offset += size;
    bytes += size;
   1ae50:	c4 01       	movw	r24, r8
   1ae52:	09 2c       	mov	r0, r9
   1ae54:	00 0c       	add	r0, r0
   1ae56:	aa 0b       	sbc	r26, r26
   1ae58:	bb 0b       	sbc	r27, r27
   1ae5a:	c8 0e       	add	r12, r24
   1ae5c:	d9 1e       	adc	r13, r25
   1ae5e:	ea 1e       	adc	r14, r26
   1ae60:	fb 1e       	adc	r15, r27

// PAD
    size = lif_e010_pad_sector(offset, obuf);
   1ae62:	12 01       	movw	r2, r4
   1ae64:	23 01       	movw	r4, r6
   1ae66:	28 0e       	add	r2, r24
   1ae68:	39 1e       	adc	r3, r25
   1ae6a:	4a 1e       	adc	r4, r26
   1ae6c:	5b 1e       	adc	r5, r27
   1ae6e:	ae 01       	movw	r20, r28
   1ae70:	48 5f       	subi	r20, 0xF8	; 248
   1ae72:	5f 4f       	sbci	r21, 0xFF	; 255
   1ae74:	c2 01       	movw	r24, r4
   1ae76:	b1 01       	movw	r22, r2
   1ae78:	26 de       	rcall	.-948    	; 0x1aac6 <lif_e010_pad_sector>
   1ae7a:	3c 01       	movw	r6, r24
    if(LIF)
   1ae7c:	a1 14       	cp	r10, r1
   1ae7e:	b1 04       	cpc	r11, r1
   1ae80:	e1 f4       	brne	.+56     	; 0x1aeba <lif_add_ascii_file_as_e010_wrapper+0x1cc>
   1ae82:	36 c0       	rjmp	.+108    	; 0x1aef0 <lif_add_ascii_file_as_e010_wrapper+0x202>
// Write EOF string with padding
    size = lif_ascii_string_to_e010(str, offset,obuf);

    if(LIF)
    {
        printf("\tWrote: %8ld\r", (long)bytes);
   1ae84:	ed b7       	in	r30, 0x3d	; 61
   1ae86:	fe b7       	in	r31, 0x3e	; 62
   1ae88:	c4 82       	std	Z+4, r12	; 0x04
   1ae8a:	d5 82       	std	Z+5, r13	; 0x05
   1ae8c:	e6 82       	std	Z+6, r14	; 0x06
   1ae8e:	f7 82       	std	Z+7, r15	; 0x07
   1ae90:	86 e7       	ldi	r24, 0x76	; 118
   1ae92:	99 e3       	ldi	r25, 0x39	; 57
   1ae94:	a0 e0       	ldi	r26, 0x00	; 0
   1ae96:	81 83       	std	Z+1, r24	; 0x01
   1ae98:	92 83       	std	Z+2, r25	; 0x02
   1ae9a:	a3 83       	std	Z+3, r26	; 0x03
   1ae9c:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
        len = lif_write(LIF, obuf, offset, size);
   1aea0:	84 01       	movw	r16, r8
   1aea2:	a3 01       	movw	r20, r6
   1aea4:	92 01       	movw	r18, r4
   1aea6:	be 01       	movw	r22, r28
   1aea8:	68 5f       	subi	r22, 0xF8	; 248
   1aeaa:	7f 4f       	sbci	r23, 0xFF	; 255
   1aeac:	c5 01       	movw	r24, r10
   1aeae:	0e 94 0f c3 	call	0x1861e	; 0x1861e <lif_write>
        if(len < size)
   1aeb2:	88 15       	cp	r24, r8
   1aeb4:	99 05       	cpc	r25, r9
   1aeb6:	64 f6       	brge	.-104    	; 0x1ae50 <lif_add_ascii_file_as_e010_wrapper+0x162>
   1aeb8:	94 cf       	rjmp	.-216    	; 0x1ade2 <lif_add_ascii_file_as_e010_wrapper+0xf4>

// PAD
    size = lif_e010_pad_sector(offset, obuf);
    if(LIF)
    {
        len = lif_write(LIF, obuf, offset, size);
   1aeba:	8c 01       	movw	r16, r24
   1aebc:	a2 01       	movw	r20, r4
   1aebe:	91 01       	movw	r18, r2
   1aec0:	be 01       	movw	r22, r28
   1aec2:	68 5f       	subi	r22, 0xF8	; 248
   1aec4:	7f 4f       	sbci	r23, 0xFF	; 255
   1aec6:	c5 01       	movw	r24, r10
   1aec8:	0e 94 0f c3 	call	0x1861e	; 0x1861e <lif_write>
        if(len < size)
   1aecc:	86 15       	cp	r24, r6
   1aece:	97 05       	cpc	r25, r7
   1aed0:	0c f4       	brge	.+2      	; 0x1aed4 <lif_add_ascii_file_as_e010_wrapper+0x1e6>
   1aed2:	87 cf       	rjmp	.-242    	; 0x1ade2 <lif_add_ascii_file_as_e010_wrapper+0xf4>
            return(-1);
    }

    if(LIF)
        printf("\tWrote: %8ld\r",(long)bytes);
   1aed4:	ed b7       	in	r30, 0x3d	; 61
   1aed6:	fe b7       	in	r31, 0x3e	; 62
   1aed8:	c4 82       	std	Z+4, r12	; 0x04
   1aeda:	d5 82       	std	Z+5, r13	; 0x05
   1aedc:	e6 82       	std	Z+6, r14	; 0x06
   1aede:	f7 82       	std	Z+7, r15	; 0x07
   1aee0:	88 e6       	ldi	r24, 0x68	; 104
   1aee2:	99 e3       	ldi	r25, 0x39	; 57
   1aee4:	a0 e0       	ldi	r26, 0x00	; 0
   1aee6:	81 83       	std	Z+1, r24	; 0x01
   1aee8:	92 83       	std	Z+2, r25	; 0x02
   1aeea:	a3 83       	std	Z+3, r26	; 0x03
   1aeec:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>

    return(bytes);
   1aef0:	b6 01       	movw	r22, r12
   1aef2:	c7 01       	movw	r24, r14
}
   1aef4:	c3 5f       	subi	r28, 0xF3	; 243
   1aef6:	dc 4f       	sbci	r29, 0xFC	; 252
   1aef8:	e2 e1       	ldi	r30, 0x12	; 18
   1aefa:	0c 94 c0 e8 	jmp	0x1d180	; 0x1d180 <__epilogue_restores__>

0001aefe <lif_add_ascii_file_as_e010>:
/// @param[in] userfile: userfile name
/// @return size of data written into to LIF image, or -1 on error
/// FIXME assumes 256 byte secors
MEMSPACE
long lif_add_ascii_file_as_e010(char *lifimagename, char *lifname, char *userfile)
{
   1aefe:	ab e3       	ldi	r26, 0x3B	; 59
   1af00:	b0 e0       	ldi	r27, 0x00	; 0
   1af02:	e5 e8       	ldi	r30, 0x85	; 133
   1af04:	f7 ed       	ldi	r31, 0xD7	; 215
   1af06:	0c 94 a4 e8 	jmp	0x1d148	; 0x1d148 <__prologue_saves__>
   1af0a:	6c 01       	movw	r12, r24
   1af0c:	1b 01       	movw	r2, r22
   1af0e:	7a 01       	movw	r14, r20
    long offset;
    int index;
    lif_t *LIF;
    stat_t st, *sp;

    if(!*lifimagename)
   1af10:	fc 01       	movw	r30, r24
   1af12:	80 81       	ld	r24, Z
   1af14:	81 11       	cpse	r24, r1
   1af16:	03 c0       	rjmp	.+6      	; 0x1af1e <lif_add_ascii_file_as_e010+0x20>
    {
        printf("lif_add_ascii_file_as_e010: lifimagename is empty\n");
   1af18:	85 e3       	ldi	r24, 0x35	; 53
   1af1a:	99 e3       	ldi	r25, 0x39	; 57
   1af1c:	1a c0       	rjmp	.+52     	; 0x1af52 <lif_add_ascii_file_as_e010+0x54>
        return(-1);
    }
    if(!*lifname)
   1af1e:	fb 01       	movw	r30, r22
   1af20:	80 81       	ld	r24, Z
   1af22:	81 11       	cpse	r24, r1
   1af24:	03 c0       	rjmp	.+6      	; 0x1af2c <lif_add_ascii_file_as_e010+0x2e>
    {
        printf("lif_add_ascii_file_as_e010: lifname is empty\n");
   1af26:	87 e0       	ldi	r24, 0x07	; 7
   1af28:	99 e3       	ldi	r25, 0x39	; 57
   1af2a:	13 c0       	rjmp	.+38     	; 0x1af52 <lif_add_ascii_file_as_e010+0x54>
        return(-1);
    }
    if(!*userfile)
   1af2c:	fa 01       	movw	r30, r20
   1af2e:	80 81       	ld	r24, Z
   1af30:	81 11       	cpse	r24, r1
   1af32:	03 c0       	rjmp	.+6      	; 0x1af3a <lif_add_ascii_file_as_e010+0x3c>
    {
        printf("lif_add_ascii_file_as_e010: userfile is empty\n");
   1af34:	88 ed       	ldi	r24, 0xD8	; 216
   1af36:	98 e3       	ldi	r25, 0x38	; 56
   1af38:	0c c0       	rjmp	.+24     	; 0x1af52 <lif_add_ascii_file_as_e010+0x54>
        return(-1);
    }

//Get size and date info
    sp = lif_stat(userfile, (stat_t *)&st);
   1af3a:	be 01       	movw	r22, r28
   1af3c:	66 5f       	subi	r22, 0xF6	; 246
   1af3e:	7f 4f       	sbci	r23, 0xFF	; 255
   1af40:	ca 01       	movw	r24, r20
   1af42:	0e 94 62 c2 	call	0x184c4	; 0x184c4 <lif_stat>
   1af46:	9b af       	std	Y+59, r25	; 0x3b
   1af48:	8a af       	std	Y+58, r24	; 0x3a
    if(!sp)
   1af4a:	89 2b       	or	r24, r25
   1af4c:	59 f4       	brne	.+22     	; 0x1af64 <lif_add_ascii_file_as_e010+0x66>
    {
        printf("lif_add_ascii_file_as_e010: userfile not found\n");
   1af4e:	88 ea       	ldi	r24, 0xA8	; 168
   1af50:	98 e3       	ldi	r25, 0x38	; 56
   1af52:	a0 e0       	ldi	r26, 0x00	; 0
   1af54:	ed b7       	in	r30, 0x3d	; 61
   1af56:	fe b7       	in	r31, 0x3e	; 62
   1af58:	81 83       	std	Z+1, r24	; 0x01
   1af5a:	92 83       	std	Z+2, r25	; 0x02
   1af5c:	a3 83       	std	Z+3, r26	; 0x03
   1af5e:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
   1af62:	01 c1       	rjmp	.+514    	; 0x1b166 <lif_add_ascii_file_as_e010+0x268>
        return(-1);
    }

    if(debuglevel & LIF_DEBUG)
   1af64:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1af68:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1af6c:	92 ff       	sbrs	r25, 2
   1af6e:	10 c0       	rjmp	.+32     	; 0x1af90 <lif_add_ascii_file_as_e010+0x92>
        printf("LIF image:[%s], LIF name:[%s], user file:[%s]\n",
   1af70:	ed b7       	in	r30, 0x3d	; 61
   1af72:	fe b7       	in	r31, 0x3e	; 62
   1af74:	f1 86       	std	Z+9, r15	; 0x09
   1af76:	e0 86       	std	Z+8, r14	; 0x08
   1af78:	37 82       	std	Z+7, r3	; 0x07
   1af7a:	26 82       	std	Z+6, r2	; 0x06
   1af7c:	d5 82       	std	Z+5, r13	; 0x05
   1af7e:	c4 82       	std	Z+4, r12	; 0x04
   1af80:	89 e7       	ldi	r24, 0x79	; 121
   1af82:	98 e3       	ldi	r25, 0x38	; 56
   1af84:	a0 e0       	ldi	r26, 0x00	; 0
   1af86:	81 83       	std	Z+1, r24	; 0x01
   1af88:	92 83       	std	Z+2, r25	; 0x02
   1af8a:	a3 83       	std	Z+3, r26	; 0x03
   1af8c:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
            lifimagename, lifname, userfile);

// Find out how big converted file will be
    bytes = lif_add_ascii_file_as_e010_wrapper(NULL,0,userfile);
   1af90:	97 01       	movw	r18, r14
   1af92:	40 e0       	ldi	r20, 0x00	; 0
   1af94:	50 e0       	ldi	r21, 0x00	; 0
   1af96:	ba 01       	movw	r22, r20
   1af98:	80 e0       	ldi	r24, 0x00	; 0
   1af9a:	90 e0       	ldi	r25, 0x00	; 0
   1af9c:	a8 de       	rcall	.-688    	; 0x1acee <lif_add_ascii_file_as_e010_wrapper>
   1af9e:	4b 01       	movw	r8, r22
   1afa0:	5c 01       	movw	r10, r24
/// @return sectors
/// FIXME assumes 256 byte sectors
MEMSPACE
uint32_t lif_bytes2sectors(uint32_t bytes)
{
    uint32_t sectors = (bytes/(long)LIF_SECTOR_SIZE);
   1afa2:	47 2e       	mov	r4, r23
   1afa4:	58 2e       	mov	r5, r24
   1afa6:	69 2e       	mov	r6, r25
   1afa8:	77 24       	eor	r7, r7
    if(bytes % (long)LIF_SECTOR_SIZE)
   1afaa:	66 23       	and	r22, r22
   1afac:	29 f0       	breq	.+10     	; 0x1afb8 <lif_add_ascii_file_as_e010+0xba>
        ++sectors;
   1afae:	ff ef       	ldi	r31, 0xFF	; 255
   1afb0:	4f 1a       	sub	r4, r31
   1afb2:	5f 0a       	sbc	r5, r31
   1afb4:	6f 0a       	sbc	r6, r31
   1afb6:	7f 0a       	sbc	r7, r31

// Find out how big converted file will be
    bytes = lif_add_ascii_file_as_e010_wrapper(NULL,0,userfile);
    sectors = lif_bytes2sectors(bytes);

    LIF = lif_open_volume(lifimagename,"r+");
   1afb8:	6f ee       	ldi	r22, 0xEF	; 239
   1afba:	78 e0       	ldi	r23, 0x08	; 8
   1afbc:	c6 01       	movw	r24, r12
   1afbe:	49 da       	rcall	.-2926   	; 0x1a452 <lif_open_volume>
   1afc0:	8c 01       	movw	r16, r24
    if(LIF == NULL)
   1afc2:	00 97       	sbiw	r24, 0x00	; 0
   1afc4:	09 f4       	brne	.+2      	; 0x1afc8 <lif_add_ascii_file_as_e010+0xca>
   1afc6:	cf c0       	rjmp	.+414    	; 0x1b166 <lif_add_ascii_file_as_e010+0x268>
        return(-1);

// Now find free record
    index = lif_newdir(LIF, sectors);
   1afc8:	b3 01       	movw	r22, r6
   1afca:	a2 01       	movw	r20, r4
   1afcc:	e2 d8       	rcall	.-3644   	; 0x1a192 <lif_newdir>
   1afce:	3c 01       	movw	r6, r24
    if(index == -1)
   1afd0:	8f ef       	ldi	r24, 0xFF	; 255
   1afd2:	68 16       	cp	r6, r24
   1afd4:	78 06       	cpc	r7, r24
   1afd6:	79 f4       	brne	.+30     	; 0x1aff6 <lif_add_ascii_file_as_e010+0xf8>
    {
        printf("LIF image:[%s], not enough free space for:[%s]\n",
   1afd8:	ed b7       	in	r30, 0x3d	; 61
   1afda:	fe b7       	in	r31, 0x3e	; 62
   1afdc:	f7 82       	std	Z+7, r15	; 0x07
   1afde:	e6 82       	std	Z+6, r14	; 0x06
   1afe0:	d5 82       	std	Z+5, r13	; 0x05
   1afe2:	c4 82       	std	Z+4, r12	; 0x04
   1afe4:	89 e4       	ldi	r24, 0x49	; 73
   1afe6:	98 e3       	ldi	r25, 0x38	; 56
   1afe8:	a0 e0       	ldi	r26, 0x00	; 0
   1afea:	81 83       	std	Z+1, r24	; 0x01
   1afec:	92 83       	std	Z+2, r25	; 0x02
   1afee:	a3 83       	std	Z+3, r26	; 0x03
   1aff0:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
   1aff4:	a0 c0       	rjmp	.+320    	; 0x1b136 <lif_add_ascii_file_as_e010+0x238>
        lif_closedir(LIF);
        return(-1);
    }

// Initialize the free directory entry
    lif_fixname(LIF->DIR.filename, lifname,10);
   1aff6:	68 01       	movw	r12, r16
   1aff8:	ff e4       	ldi	r31, 0x4F	; 79
   1affa:	cf 0e       	add	r12, r31
   1affc:	d1 1c       	adc	r13, r1
   1affe:	4a e0       	ldi	r20, 0x0A	; 10
   1b000:	50 e0       	ldi	r21, 0x00	; 0
   1b002:	b1 01       	movw	r22, r2
   1b004:	c6 01       	movw	r24, r12
   1b006:	0e 94 00 c4 	call	0x18800	; 0x18800 <lif_fixname>
    LIF->DIR.FileType = 0xe010;                   // 10
   1b00a:	80 e1       	ldi	r24, 0x10	; 16
   1b00c:	90 ee       	ldi	r25, 0xE0	; 224
   1b00e:	f8 01       	movw	r30, r16
   1b010:	e6 5a       	subi	r30, 0xA6	; 166
   1b012:	ff 4f       	sbci	r31, 0xFF	; 255
   1b014:	91 83       	std	Z+1, r25	; 0x01
   1b016:	80 83       	st	Z, r24
    lif_time2lifbcd(sp->st_mtime, LIF->DIR.date);
   1b018:	ea ad       	ldd	r30, Y+58	; 0x3a
   1b01a:	fb ad       	ldd	r31, Y+59	; 0x3b
   1b01c:	60 a5       	ldd	r22, Z+40	; 0x28
   1b01e:	71 a5       	ldd	r23, Z+41	; 0x29
   1b020:	82 a5       	ldd	r24, Z+42	; 0x2a
   1b022:	93 a5       	ldd	r25, Z+43	; 0x2b
   1b024:	a8 01       	movw	r20, r16
   1b026:	4c 59       	subi	r20, 0x9C	; 156
   1b028:	5f 4f       	sbci	r21, 0xFF	; 255
   1b02a:	0e 94 25 c6 	call	0x18c4a	; 0x18c4a <lif_time2lifbcd>

    LIF->DIR.VolNumber = 0x8001;                  // 26
   1b02e:	81 e0       	ldi	r24, 0x01	; 1
   1b030:	90 e8       	ldi	r25, 0x80	; 128
   1b032:	f8 01       	movw	r30, r16
   1b034:	e6 59       	subi	r30, 0x96	; 150
   1b036:	ff 4f       	sbci	r31, 0xFF	; 255
   1b038:	91 83       	std	Z+1, r25	; 0x01
   1b03a:	80 83       	st	Z, r24
    LIF->DIR.FileBytes = bytes;                   // 28
   1b03c:	32 96       	adiw	r30, 0x02	; 2
   1b03e:	91 82       	std	Z+1, r9	; 0x01
   1b040:	80 82       	st	Z, r8
    LIF->DIR.SectorSize  = 0x100;                 // 30
   1b042:	80 e0       	ldi	r24, 0x00	; 0
   1b044:	91 e0       	ldi	r25, 0x01	; 1
   1b046:	32 96       	adiw	r30, 0x02	; 2
   1b048:	91 83       	std	Z+1, r25	; 0x01
   1b04a:	80 83       	st	Z, r24
    offset = LIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
   1b04c:	58 01       	movw	r10, r16
   1b04e:	fc e5       	ldi	r31, 0x5C	; 92
   1b050:	af 0e       	add	r10, r31
   1b052:	b1 1c       	adc	r11, r1
   1b054:	f5 01       	movw	r30, r10
   1b056:	80 81       	ld	r24, Z
   1b058:	91 81       	ldd	r25, Z+1	; 0x01
   1b05a:	a2 81       	ldd	r26, Z+2	; 0x02
   1b05c:	b3 81       	ldd	r27, Z+3	; 0x03
   1b05e:	22 24       	eor	r2, r2
   1b060:	38 2e       	mov	r3, r24
   1b062:	49 2e       	mov	r4, r25
   1b064:	5a 2e       	mov	r5, r26

    if(debuglevel & LIF_DEBUG)
   1b066:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1b06a:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1b06e:	92 ff       	sbrs	r25, 2
   1b070:	05 c0       	rjmp	.+10     	; 0x1b07c <lif_add_ascii_file_as_e010+0x17e>
        lif_dump_vol(LIF,"lif_after lif_newdir");
   1b072:	65 e4       	ldi	r22, 0x45	; 69
   1b074:	76 e1       	ldi	r23, 0x16	; 22
   1b076:	c8 01       	movw	r24, r16
   1b078:	0e 94 11 c7 	call	0x18e22	; 0x18e22 <lif_dump_vol>

// Write converted file into free space first
    bytes = lif_add_ascii_file_as_e010_wrapper(LIF,offset,userfile);
   1b07c:	97 01       	movw	r18, r14
   1b07e:	b2 01       	movw	r22, r4
   1b080:	a1 01       	movw	r20, r2
   1b082:	c8 01       	movw	r24, r16
   1b084:	34 de       	rcall	.-920    	; 0x1acee <lif_add_ascii_file_as_e010_wrapper>
   1b086:	4b 01       	movw	r8, r22
   1b088:	7c 01       	movw	r14, r24

    if(debuglevel & LIF_DEBUG)
   1b08a:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1b08e:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1b092:	92 ff       	sbrs	r25, 2
   1b094:	4a c0       	rjmp	.+148    	; 0x1b12a <lif_add_ascii_file_as_e010+0x22c>
    {
        printf("New Directory Information AFTER write\n");
   1b096:	82 e2       	ldi	r24, 0x22	; 34
   1b098:	98 e3       	ldi	r25, 0x38	; 56
   1b09a:	a0 e0       	ldi	r26, 0x00	; 0
   1b09c:	ed b7       	in	r30, 0x3d	; 61
   1b09e:	fe b7       	in	r31, 0x3e	; 62
   1b0a0:	81 83       	std	Z+1, r24	; 0x01
   1b0a2:	92 83       	std	Z+2, r25	; 0x02
   1b0a4:	a3 83       	std	Z+3, r26	; 0x03
   1b0a6:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
        printf("Name:              %s\n", LIF->DIR.filename);
   1b0aa:	ed b7       	in	r30, 0x3d	; 61
   1b0ac:	fe b7       	in	r31, 0x3e	; 62
   1b0ae:	d5 82       	std	Z+5, r13	; 0x05
   1b0b0:	c4 82       	std	Z+4, r12	; 0x04
   1b0b2:	8b e0       	ldi	r24, 0x0B	; 11
   1b0b4:	98 e3       	ldi	r25, 0x38	; 56
   1b0b6:	a0 e0       	ldi	r26, 0x00	; 0
   1b0b8:	81 83       	std	Z+1, r24	; 0x01
   1b0ba:	92 83       	std	Z+2, r25	; 0x02
   1b0bc:	a3 83       	std	Z+3, r26	; 0x03
   1b0be:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
        printf("Index:            %4d\n", (int)index);
   1b0c2:	ed b7       	in	r30, 0x3d	; 61
   1b0c4:	fe b7       	in	r31, 0x3e	; 62
   1b0c6:	75 82       	std	Z+5, r7	; 0x05
   1b0c8:	64 82       	std	Z+4, r6	; 0x04
   1b0ca:	84 ef       	ldi	r24, 0xF4	; 244
   1b0cc:	97 e3       	ldi	r25, 0x37	; 55
   1b0ce:	a0 e0       	ldi	r26, 0x00	; 0
   1b0d0:	81 83       	std	Z+1, r24	; 0x01
   1b0d2:	92 83       	std	Z+2, r25	; 0x02
   1b0d4:	a3 83       	std	Z+3, r26	; 0x03
   1b0d6:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
        printf("First Sector:     %4lxH\n", (long) LIF->DIR.FileStartSector);
   1b0da:	f5 01       	movw	r30, r10
   1b0dc:	80 81       	ld	r24, Z
   1b0de:	91 81       	ldd	r25, Z+1	; 0x01
   1b0e0:	a2 81       	ldd	r26, Z+2	; 0x02
   1b0e2:	b3 81       	ldd	r27, Z+3	; 0x03
   1b0e4:	ed b7       	in	r30, 0x3d	; 61
   1b0e6:	fe b7       	in	r31, 0x3e	; 62
   1b0e8:	84 83       	std	Z+4, r24	; 0x04
   1b0ea:	95 83       	std	Z+5, r25	; 0x05
   1b0ec:	a6 83       	std	Z+6, r26	; 0x06
   1b0ee:	b7 83       	std	Z+7, r27	; 0x07
   1b0f0:	8b ed       	ldi	r24, 0xDB	; 219
   1b0f2:	97 e3       	ldi	r25, 0x37	; 55
   1b0f4:	a0 e0       	ldi	r26, 0x00	; 0
   1b0f6:	81 83       	std	Z+1, r24	; 0x01
   1b0f8:	92 83       	std	Z+2, r25	; 0x02
   1b0fa:	a3 83       	std	Z+3, r26	; 0x03
   1b0fc:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
        printf("File Sectors:     %4lxH\n", (long)LIF->DIR.FileSectors);
   1b100:	f8 01       	movw	r30, r16
   1b102:	e0 5a       	subi	r30, 0xA0	; 160
   1b104:	ff 4f       	sbci	r31, 0xFF	; 255
   1b106:	80 81       	ld	r24, Z
   1b108:	91 81       	ldd	r25, Z+1	; 0x01
   1b10a:	a2 81       	ldd	r26, Z+2	; 0x02
   1b10c:	b3 81       	ldd	r27, Z+3	; 0x03
   1b10e:	ed b7       	in	r30, 0x3d	; 61
   1b110:	fe b7       	in	r31, 0x3e	; 62
   1b112:	84 83       	std	Z+4, r24	; 0x04
   1b114:	95 83       	std	Z+5, r25	; 0x05
   1b116:	a6 83       	std	Z+6, r26	; 0x06
   1b118:	b7 83       	std	Z+7, r27	; 0x07
   1b11a:	82 ec       	ldi	r24, 0xC2	; 194
   1b11c:	97 e3       	ldi	r25, 0x37	; 55
   1b11e:	a0 e0       	ldi	r26, 0x00	; 0
   1b120:	81 83       	std	Z+1, r24	; 0x01
   1b122:	92 83       	std	Z+2, r25	; 0x02
   1b124:	a3 83       	std	Z+3, r26	; 0x03
   1b126:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
    }

// Write directory record
// Note: lif_newdir alrwady did the new EOF
    if( !lif_writedirindex(LIF,index))
   1b12a:	b3 01       	movw	r22, r6
   1b12c:	c8 01       	movw	r24, r16
   1b12e:	0e 94 61 cc 	call	0x198c2	; 0x198c2 <lif_writedirindex>
   1b132:	89 2b       	or	r24, r25
   1b134:	21 f4       	brne	.+8      	; 0x1b13e <lif_add_ascii_file_as_e010+0x240>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1b136:	c8 01       	movw	r24, r16
   1b138:	0e 94 6c cb 	call	0x196d8	; 0x196d8 <lif_close_volume>
   1b13c:	14 c0       	rjmp	.+40     	; 0x1b166 <lif_add_ascii_file_as_e010+0x268>
   1b13e:	c8 01       	movw	r24, r16
   1b140:	0e 94 6c cb 	call	0x196d8	; 0x196d8 <lif_close_volume>
        return(-1);
    }

    lif_closedir(LIF);

    printf("\tWrote: %8ld\n", bytes);
   1b144:	ed b7       	in	r30, 0x3d	; 61
   1b146:	fe b7       	in	r31, 0x3e	; 62
   1b148:	84 82       	std	Z+4, r8	; 0x04
   1b14a:	95 82       	std	Z+5, r9	; 0x05
   1b14c:	e6 82       	std	Z+6, r14	; 0x06
   1b14e:	f7 82       	std	Z+7, r15	; 0x07
   1b150:	84 eb       	ldi	r24, 0xB4	; 180
   1b152:	97 e3       	ldi	r25, 0x37	; 55
   1b154:	a0 e0       	ldi	r26, 0x00	; 0
   1b156:	81 83       	std	Z+1, r24	; 0x01
   1b158:	92 83       	std	Z+2, r25	; 0x02
   1b15a:	a3 83       	std	Z+3, r26	; 0x03
   1b15c:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>

// Return file size
    return(bytes);
   1b160:	b4 01       	movw	r22, r8
   1b162:	c7 01       	movw	r24, r14
   1b164:	04 c0       	rjmp	.+8      	; 0x1b16e <lif_add_ascii_file_as_e010+0x270>
    bytes = lif_add_ascii_file_as_e010_wrapper(NULL,0,userfile);
    sectors = lif_bytes2sectors(bytes);

    LIF = lif_open_volume(lifimagename,"r+");
    if(LIF == NULL)
        return(-1);
   1b166:	6f ef       	ldi	r22, 0xFF	; 255
   1b168:	7f ef       	ldi	r23, 0xFF	; 255
   1b16a:	8f ef       	ldi	r24, 0xFF	; 255
   1b16c:	9f ef       	ldi	r25, 0xFF	; 255

    printf("\tWrote: %8ld\n", bytes);

// Return file size
    return(bytes);
}
   1b16e:	eb 96       	adiw	r28, 0x3b	; 59
   1b170:	e2 e1       	ldi	r30, 0x12	; 18
   1b172:	0c 94 c0 e8 	jmp	0x1d180	; 0x1d180 <__epilogue_restores__>

0001b176 <lif_extract_e010_as_ascii>:
/// @param[in] username: name to call the extracted image
/// @return 1 on sucess or 0 on error
/// FIXME assumes 256 byte secors
MEMSPACE
int lif_extract_e010_as_ascii(char *lifimagename, char *lifname, char *username)
{
   1b176:	a7 e3       	ldi	r26, 0x37	; 55
   1b178:	b2 e0       	ldi	r27, 0x02	; 2
   1b17a:	e1 ec       	ldi	r30, 0xC1	; 193
   1b17c:	f8 ed       	ldi	r31, 0xD8	; 216
   1b17e:	0c 94 a4 e8 	jmp	0x1d148	; 0x1d148 <__prologue_saves__>
   1b182:	7c 01       	movw	r14, r24
   1b184:	8b 01       	movw	r16, r22
   1b186:	ca 5d       	subi	r28, 0xDA	; 218
   1b188:	dd 4f       	sbci	r29, 0xFD	; 253
   1b18a:	59 83       	std	Y+1, r21	; 0x01
   1b18c:	48 83       	st	Y, r20
   1b18e:	c6 52       	subi	r28, 0x26	; 38
   1b190:	d2 40       	sbci	r29, 0x02	; 2
// read buffer
    uint8_t buf[LIF_SECTOR_SIZE+4];
// Write buffer, FYI: will ALWAYS be smaller then the read data buffer
    uint8_t wbuf[LIF_SECTOR_SIZE+4];

    LIF = lif_open_volume(lifimagename,"r");
   1b192:	62 e4       	ldi	r22, 0x42	; 66
   1b194:	73 e0       	ldi	r23, 0x03	; 3
   1b196:	5d d9       	rcall	.-3398   	; 0x1a452 <lif_open_volume>
   1b198:	6c 01       	movw	r12, r24
    if(LIF == NULL)
   1b19a:	00 97       	sbiw	r24, 0x00	; 0
   1b19c:	69 f4       	brne	.+26     	; 0x1b1b8 <lif_extract_e010_as_ascii+0x42>
    {
        printf("LIF image not found:%s\n", lifimagename);
   1b19e:	ed b7       	in	r30, 0x3d	; 61
   1b1a0:	fe b7       	in	r31, 0x3e	; 62
   1b1a2:	f5 82       	std	Z+5, r15	; 0x05
   1b1a4:	e4 82       	std	Z+4, r14	; 0x04
   1b1a6:	8c e9       	ldi	r24, 0x9C	; 156
   1b1a8:	97 e3       	ldi	r25, 0x37	; 55
   1b1aa:	a0 e0       	ldi	r26, 0x00	; 0
   1b1ac:	81 83       	std	Z+1, r24	; 0x01
   1b1ae:	92 83       	std	Z+2, r25	; 0x02
   1b1b0:	a3 83       	std	Z+3, r26	; 0x03
   1b1b2:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
   1b1b6:	13 c0       	rjmp	.+38     	; 0x1b1de <lif_extract_e010_as_ascii+0x68>
        return(0);
    }

    index = lif_find_file(LIF, lifname);
   1b1b8:	b8 01       	movw	r22, r16
   1b1ba:	20 dc       	rcall	.-1984   	; 0x1a9fc <lif_find_file>
    if(index == -1)
   1b1bc:	01 96       	adiw	r24, 0x01	; 1
   1b1be:	91 f4       	brne	.+36     	; 0x1b1e4 <lif_extract_e010_as_ascii+0x6e>
    {
        printf("LIF File not found:%s\n", lifname);
   1b1c0:	ed b7       	in	r30, 0x3d	; 61
   1b1c2:	fe b7       	in	r31, 0x3e	; 62
   1b1c4:	15 83       	std	Z+5, r17	; 0x05
   1b1c6:	04 83       	std	Z+4, r16	; 0x04
   1b1c8:	85 e8       	ldi	r24, 0x85	; 133
   1b1ca:	97 e3       	ldi	r25, 0x37	; 55
   1b1cc:	a0 e0       	ldi	r26, 0x00	; 0
   1b1ce:	81 83       	std	Z+1, r24	; 0x01
   1b1d0:	92 83       	std	Z+2, r25	; 0x02
   1b1d2:	a3 83       	std	Z+3, r26	; 0x03
   1b1d4:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1b1d8:	c6 01       	movw	r24, r12
   1b1da:	0e 94 6c cb 	call	0x196d8	; 0x196d8 <lif_close_volume>
    index = lif_find_file(LIF, lifname);
    if(index == -1)
    {
        printf("LIF File not found:%s\n", lifname);
        lif_closedir(LIF);
        return(0);
   1b1de:	80 e0       	ldi	r24, 0x00	; 0
   1b1e0:	90 e0       	ldi	r25, 0x00	; 0
   1b1e2:	73 c2       	rjmp	.+1254   	; 0x1b6ca <lif_extract_e010_as_ascii+0x554>
    }

    if((LIF->DIR.FileType & 0xFFFC) != 0xE010)
   1b1e4:	f6 01       	movw	r30, r12
   1b1e6:	e6 5a       	subi	r30, 0xA6	; 166
   1b1e8:	ff 4f       	sbci	r31, 0xFF	; 255
   1b1ea:	80 81       	ld	r24, Z
   1b1ec:	91 81       	ldd	r25, Z+1	; 0x01
   1b1ee:	9c 01       	movw	r18, r24
   1b1f0:	2c 7f       	andi	r18, 0xFC	; 252
   1b1f2:	20 31       	cpi	r18, 0x10	; 16
   1b1f4:	30 4e       	sbci	r19, 0xE0	; 224
   1b1f6:	a9 f0       	breq	.+42     	; 0x1b222 <lif_extract_e010_as_ascii+0xac>
    {
        printf("File %s has wrong type:[%04XH] expected 0xE010..0xE013\n", username, (int) LIF->DIR.FileType);
   1b1f8:	ed b7       	in	r30, 0x3d	; 61
   1b1fa:	fe b7       	in	r31, 0x3e	; 62
   1b1fc:	97 83       	std	Z+7, r25	; 0x07
   1b1fe:	86 83       	std	Z+6, r24	; 0x06
   1b200:	ca 5d       	subi	r28, 0xDA	; 218
   1b202:	dd 4f       	sbci	r29, 0xFD	; 253
   1b204:	28 81       	ld	r18, Y
   1b206:	39 81       	ldd	r19, Y+1	; 0x01
   1b208:	c6 52       	subi	r28, 0x26	; 38
   1b20a:	d2 40       	sbci	r29, 0x02	; 2
   1b20c:	35 83       	std	Z+5, r19	; 0x05
   1b20e:	24 83       	std	Z+4, r18	; 0x04
   1b210:	8d e4       	ldi	r24, 0x4D	; 77
   1b212:	97 e3       	ldi	r25, 0x37	; 55
   1b214:	a0 e0       	ldi	r26, 0x00	; 0
   1b216:	81 83       	std	Z+1, r24	; 0x01
   1b218:	92 83       	std	Z+2, r25	; 0x02
   1b21a:	a3 83       	std	Z+3, r26	; 0x03
   1b21c:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
   1b220:	db cf       	rjmp	.-74     	; 0x1b1d8 <lif_extract_e010_as_ascii+0x62>
        lif_closedir(LIF);
        return(0);
    }

    start = LIF->DIR.FileStartSector;
   1b222:	f6 01       	movw	r30, r12
   1b224:	e4 5a       	subi	r30, 0xA4	; 164
   1b226:	ff 4f       	sbci	r31, 0xFF	; 255
   1b228:	80 80       	ld	r8, Z
   1b22a:	91 80       	ldd	r9, Z+1	; 0x01
   1b22c:	a2 80       	ldd	r10, Z+2	; 0x02
   1b22e:	b3 80       	ldd	r11, Z+3	; 0x03
    end = start + LIF->DIR.FileSectors;
   1b230:	34 96       	adiw	r30, 0x04	; 4
   1b232:	80 81       	ld	r24, Z
   1b234:	91 81       	ldd	r25, Z+1	; 0x01
   1b236:	a2 81       	ldd	r26, Z+2	; 0x02
   1b238:	b3 81       	ldd	r27, Z+3	; 0x03
   1b23a:	a5 01       	movw	r20, r10
   1b23c:	94 01       	movw	r18, r8
   1b23e:	28 0f       	add	r18, r24
   1b240:	39 1f       	adc	r19, r25
   1b242:	4a 1f       	adc	r20, r26
   1b244:	5b 1f       	adc	r21, r27
   1b246:	c4 5d       	subi	r28, 0xD4	; 212
   1b248:	dd 4f       	sbci	r29, 0xFD	; 253
   1b24a:	28 83       	st	Y, r18
   1b24c:	39 83       	std	Y+1, r19	; 0x01
   1b24e:	4a 83       	std	Y+2, r20	; 0x02
   1b250:	5b 83       	std	Y+3, r21	; 0x03
   1b252:	cc 52       	subi	r28, 0x2C	; 44
   1b254:	d2 40       	sbci	r29, 0x02	; 2

    t = lif_lifbcd2time(LIF->DIR.date);
   1b256:	c6 01       	movw	r24, r12
   1b258:	8c 59       	subi	r24, 0x9C	; 156
   1b25a:	9f 4f       	sbci	r25, 0xFF	; 255
   1b25c:	0e 94 67 c6 	call	0x18cce	; 0x18cce <lif_lifbcd2time>
   1b260:	c8 5d       	subi	r28, 0xD8	; 216
   1b262:	dd 4f       	sbci	r29, 0xFD	; 253
   1b264:	68 83       	st	Y, r22
   1b266:	79 83       	std	Y+1, r23	; 0x01
   1b268:	8a 83       	std	Y+2, r24	; 0x02
   1b26a:	9b 83       	std	Y+3, r25	; 0x03
   1b26c:	c8 52       	subi	r28, 0x28	; 40
   1b26e:	d2 40       	sbci	r29, 0x02	; 2

    offset = start * (long) LIF_SECTOR_SIZE;
   1b270:	ba 2d       	mov	r27, r10
   1b272:	a9 2d       	mov	r26, r9
   1b274:	98 2d       	mov	r25, r8
   1b276:	88 27       	eor	r24, r24
   1b278:	c2 5e       	subi	r28, 0xE2	; 226
   1b27a:	dd 4f       	sbci	r29, 0xFD	; 253
   1b27c:	88 83       	st	Y, r24
   1b27e:	99 83       	std	Y+1, r25	; 0x01
   1b280:	aa 83       	std	Y+2, r26	; 0x02
   1b282:	bb 83       	std	Y+3, r27	; 0x03
   1b284:	ce 51       	subi	r28, 0x1E	; 30
   1b286:	d2 40       	sbci	r29, 0x02	; 2

    fo = lif_open(username,"wb");
   1b288:	6a ef       	ldi	r22, 0xFA	; 250
   1b28a:	78 e0       	ldi	r23, 0x08	; 8
   1b28c:	ca 5d       	subi	r28, 0xDA	; 218
   1b28e:	dd 4f       	sbci	r29, 0xFD	; 253
   1b290:	88 81       	ld	r24, Y
   1b292:	99 81       	ldd	r25, Y+1	; 0x01
   1b294:	c6 52       	subi	r28, 0x26	; 38
   1b296:	d2 40       	sbci	r29, 0x02	; 2
   1b298:	0e 94 38 c2 	call	0x18470	; 0x18470 <lif_open>
   1b29c:	cc 5d       	subi	r28, 0xDC	; 220
   1b29e:	dd 4f       	sbci	r29, 0xFD	; 253
   1b2a0:	99 83       	std	Y+1, r25	; 0x01
   1b2a2:	88 83       	st	Y, r24
   1b2a4:	c4 52       	subi	r28, 0x24	; 36
   1b2a6:	d2 40       	sbci	r29, 0x02	; 2
    if(fo == NULL)
   1b2a8:	89 2b       	or	r24, r25
   1b2aa:	09 f4       	brne	.+2      	; 0x1b2ae <lif_extract_e010_as_ascii+0x138>
   1b2ac:	95 cf       	rjmp	.-214    	; 0x1b1d8 <lif_extract_e010_as_ascii+0x62>
    {
        lif_closedir(LIF);
        return(0);
    }

    printf("Extracting: %s\n", username);
   1b2ae:	ca 5d       	subi	r28, 0xDA	; 218
   1b2b0:	dd 4f       	sbci	r29, 0xFD	; 253
   1b2b2:	28 81       	ld	r18, Y
   1b2b4:	39 81       	ldd	r19, Y+1	; 0x01
   1b2b6:	c6 52       	subi	r28, 0x26	; 38
   1b2b8:	d2 40       	sbci	r29, 0x02	; 2
   1b2ba:	ed b7       	in	r30, 0x3d	; 61
   1b2bc:	fe b7       	in	r31, 0x3e	; 62
   1b2be:	35 83       	std	Z+5, r19	; 0x05
   1b2c0:	24 83       	std	Z+4, r18	; 0x04
   1b2c2:	8d e3       	ldi	r24, 0x3D	; 61
   1b2c4:	97 e3       	ldi	r25, 0x37	; 55
   1b2c6:	a0 e0       	ldi	r26, 0x00	; 0
   1b2c8:	81 83       	std	Z+1, r24	; 0x01
   1b2ca:	92 83       	std	Z+2, r25	; 0x02
   1b2cc:	a3 83       	std	Z+3, r26	; 0x03
   1b2ce:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>

    bytes = 0;
    wind = 0;
   1b2d2:	21 2c       	mov	r2, r1
   1b2d4:	31 2c       	mov	r3, r1
    uint32_t start, end;                          // sectors
    long offset, bytes;                           // bytes
    int index;
    int i, len,size;
    int status = 1;
    int done = 0;
   1b2d6:	ce 5d       	subi	r28, 0xDE	; 222
   1b2d8:	dd 4f       	sbci	r29, 0xFD	; 253
   1b2da:	19 82       	std	Y+1, r1	; 0x01
   1b2dc:	18 82       	st	Y, r1
   1b2de:	c2 52       	subi	r28, 0x22	; 34
   1b2e0:	d2 40       	sbci	r29, 0x02	; 2
    lif_t *LIF;
    uint32_t start, end;                          // sectors
    long offset, bytes;                           // bytes
    int index;
    int i, len,size;
    int status = 1;
   1b2e2:	ee 24       	eor	r14, r14
   1b2e4:	e3 94       	inc	r14
   1b2e6:	f1 2c       	mov	r15, r1
        return(0);
    }

    printf("Extracting: %s\n", username);

    bytes = 0;
   1b2e8:	41 2c       	mov	r4, r1
   1b2ea:	51 2c       	mov	r5, r1
   1b2ec:	32 01       	movw	r6, r4
                        status = 0;
                        done = 1;
                        break;
                    }
                    bytes += size;
                    printf("\tWrote: %8ld\r", bytes);
   1b2ee:	8c e7       	ldi	r24, 0x7C	; 124
   1b2f0:	96 e3       	ldi	r25, 0x36	; 54
   1b2f2:	9c 01       	movw	r18, r24
   1b2f4:	40 e0       	ldi	r20, 0x00	; 0
   1b2f6:	ce 5c       	subi	r28, 0xCE	; 206
   1b2f8:	dd 4f       	sbci	r29, 0xFD	; 253
   1b2fa:	28 83       	st	Y, r18
   1b2fc:	39 83       	std	Y+1, r19	; 0x01
   1b2fe:	4a 83       	std	Y+2, r20	; 0x02
   1b300:	c2 53       	subi	r28, 0x32	; 50
   1b302:	d2 40       	sbci	r29, 0x02	; 2
                if(wind >= LIF_SECTOR_SIZE)
                {
                    size = fwrite(wbuf,1,wind,fo);
                    if(size < wind)
                    {
                        printf("lif_extract_e010_as_ascii: write error\n");
   1b304:	8a e8       	ldi	r24, 0x8A	; 138
   1b306:	96 e3       	ldi	r25, 0x36	; 54
   1b308:	9c 01       	movw	r18, r24
   1b30a:	40 e0       	ldi	r20, 0x00	; 0
   1b30c:	cb 5c       	subi	r28, 0xCB	; 203
   1b30e:	dd 4f       	sbci	r29, 0xFD	; 253
   1b310:	28 83       	st	Y, r18
   1b312:	39 83       	std	Y+1, r19	; 0x01
   1b314:	4a 83       	std	Y+2, r20	; 0x02
   1b316:	c5 53       	subi	r28, 0x35	; 53
   1b318:	d2 40       	sbci	r29, 0x02	; 2

    bytes = 0;
    wind = 0;
    ind = 0;

    while(lif_bytes2sectors(offset) <= end)
   1b31a:	c2 5e       	subi	r28, 0xE2	; 226
   1b31c:	dd 4f       	sbci	r29, 0xFD	; 253
   1b31e:	28 81       	ld	r18, Y
   1b320:	39 81       	ldd	r19, Y+1	; 0x01
   1b322:	4a 81       	ldd	r20, Y+2	; 0x02
   1b324:	5b 81       	ldd	r21, Y+3	; 0x03
   1b326:	ce 51       	subi	r28, 0x1E	; 30
   1b328:	d2 40       	sbci	r29, 0x02	; 2
   1b32a:	bb 27       	eor	r27, r27
   1b32c:	a5 2f       	mov	r26, r21
   1b32e:	94 2f       	mov	r25, r20
   1b330:	83 2f       	mov	r24, r19
   1b332:	c4 5d       	subi	r28, 0xD4	; 212
   1b334:	dd 4f       	sbci	r29, 0xFD	; 253
   1b336:	28 81       	ld	r18, Y
   1b338:	39 81       	ldd	r19, Y+1	; 0x01
   1b33a:	4a 81       	ldd	r20, Y+2	; 0x02
   1b33c:	5b 81       	ldd	r21, Y+3	; 0x03
   1b33e:	cc 52       	subi	r28, 0x2C	; 44
   1b340:	d2 40       	sbci	r29, 0x02	; 2
   1b342:	28 17       	cp	r18, r24
   1b344:	39 07       	cpc	r19, r25
   1b346:	4a 07       	cpc	r20, r26
   1b348:	5b 07       	cpc	r21, r27
   1b34a:	08 f4       	brcc	.+2      	; 0x1b34e <lif_extract_e010_as_ascii+0x1d8>
   1b34c:	51 c1       	rjmp	.+674    	; 0x1b5f0 <lif_extract_e010_as_ascii+0x47a>
    {
// LIF images are always multiples of LIF_SECTOR_SIZE
        size = lif_read(LIF, buf, offset, LIF_SECTOR_SIZE);
   1b34e:	00 e0       	ldi	r16, 0x00	; 0
   1b350:	11 e0       	ldi	r17, 0x01	; 1
   1b352:	c2 5e       	subi	r28, 0xE2	; 226
   1b354:	dd 4f       	sbci	r29, 0xFD	; 253
   1b356:	28 81       	ld	r18, Y
   1b358:	39 81       	ldd	r19, Y+1	; 0x01
   1b35a:	4a 81       	ldd	r20, Y+2	; 0x02
   1b35c:	5b 81       	ldd	r21, Y+3	; 0x03
   1b35e:	ce 51       	subi	r28, 0x1E	; 30
   1b360:	d2 40       	sbci	r29, 0x02	; 2
   1b362:	be 01       	movw	r22, r28
   1b364:	60 5f       	subi	r22, 0xF0	; 240
   1b366:	7e 4f       	sbci	r23, 0xFE	; 254
   1b368:	c6 01       	movw	r24, r12
   1b36a:	0e 94 bc c2 	call	0x18578	; 0x18578 <lif_read>
        if(size < LIF_SECTOR_SIZE)
   1b36e:	6f 3f       	cpi	r22, 0xFF	; 255
   1b370:	71 05       	cpc	r23, r1
   1b372:	09 f0       	breq	.+2      	; 0x1b376 <lif_extract_e010_as_ascii+0x200>
   1b374:	0c f4       	brge	.+2      	; 0x1b378 <lif_extract_e010_as_ascii+0x202>
   1b376:	3a c1       	rjmp	.+628    	; 0x1b5ec <lif_extract_e010_as_ascii+0x476>
   1b378:	00 e0       	ldi	r16, 0x00	; 0
   1b37a:	10 e0       	ldi	r17, 0x00	; 0
            status = 0;
            break;
        }

        ind = 0;
        while(ind < LIF_SECTOR_SIZE && !done)
   1b37c:	ce 5d       	subi	r28, 0xDE	; 222
   1b37e:	dd 4f       	sbci	r29, 0xFD	; 253
   1b380:	88 81       	ld	r24, Y
   1b382:	99 81       	ldd	r25, Y+1	; 0x01
   1b384:	c2 52       	subi	r28, 0x22	; 34
   1b386:	d2 40       	sbci	r29, 0x02	; 2
   1b388:	89 2b       	or	r24, r25
   1b38a:	09 f0       	breq	.+2      	; 0x1b38e <lif_extract_e010_as_ascii+0x218>
   1b38c:	1b c1       	rjmp	.+566    	; 0x1b5c4 <lif_extract_e010_as_ascii+0x44e>
        {
            if(buf[ind] == 0xDF || buf[ind] == 0xCF || buf[ind] == 0x6F)
   1b38e:	e0 e1       	ldi	r30, 0x10	; 16
   1b390:	f1 e0       	ldi	r31, 0x01	; 1
   1b392:	ec 0f       	add	r30, r28
   1b394:	fd 1f       	adc	r31, r29
   1b396:	e0 0f       	add	r30, r16
   1b398:	f1 1f       	adc	r31, r17
   1b39a:	80 81       	ld	r24, Z
   1b39c:	98 2f       	mov	r25, r24
   1b39e:	9f 7e       	andi	r25, 0xEF	; 239
   1b3a0:	9f 3c       	cpi	r25, 0xCF	; 207
   1b3a2:	11 f0       	breq	.+4      	; 0x1b3a8 <lif_extract_e010_as_ascii+0x232>
   1b3a4:	8f 36       	cpi	r24, 0x6F	; 111
   1b3a6:	c9 f5       	brne	.+114    	; 0x1b41a <lif_extract_e010_as_ascii+0x2a4>
            {
                ++ind;
                len = buf[ind++] & 0xff;
   1b3a8:	e0 e1       	ldi	r30, 0x10	; 16
   1b3aa:	f1 e0       	ldi	r31, 0x01	; 1
   1b3ac:	ec 0f       	add	r30, r28
   1b3ae:	fd 1f       	adc	r31, r29
   1b3b0:	e0 0f       	add	r30, r16
   1b3b2:	f1 1f       	adc	r31, r17
   1b3b4:	a1 80       	ldd	r10, Z+1	; 0x01
                len |= ((buf[ind++] & 0xff) <<8);
   1b3b6:	f8 01       	movw	r30, r16
   1b3b8:	32 96       	adiw	r30, 0x02	; 2
   1b3ba:	40 e1       	ldi	r20, 0x10	; 16
   1b3bc:	51 e0       	ldi	r21, 0x01	; 1
   1b3be:	4c 0f       	add	r20, r28
   1b3c0:	5d 1f       	adc	r21, r29
   1b3c2:	e4 0f       	add	r30, r20
   1b3c4:	f5 1f       	adc	r31, r21
   1b3c6:	0d 5f       	subi	r16, 0xFD	; 253
   1b3c8:	1f 4f       	sbci	r17, 0xFF	; 255
   1b3ca:	80 81       	ld	r24, Z
   1b3cc:	b1 2c       	mov	r11, r1
   1b3ce:	b8 2a       	or	r11, r24
// EOF ?
                if(len == 0)
   1b3d0:	a1 14       	cp	r10, r1
   1b3d2:	b1 04       	cpc	r11, r1
   1b3d4:	09 f4       	brne	.+2      	; 0x1b3d8 <lif_extract_e010_as_ascii+0x262>
   1b3d6:	ee c0       	rjmp	.+476    	; 0x1b5b4 <lif_extract_e010_as_ascii+0x43e>
                {
                    done = 1;
                    break;
                }
                if(len >= LIF_SECTOR_SIZE)
   1b3d8:	5f ef       	ldi	r21, 0xFF	; 255
   1b3da:	a5 16       	cp	r10, r21
   1b3dc:	b1 04       	cpc	r11, r1
   1b3de:	09 f0       	breq	.+2      	; 0x1b3e2 <lif_extract_e010_as_ascii+0x26c>
   1b3e0:	7c f4       	brge	.+30     	; 0x1b400 <lif_extract_e010_as_ascii+0x28a>
   1b3e2:	c4 5e       	subi	r28, 0xE4	; 228
   1b3e4:	dd 4f       	sbci	r29, 0xFD	; 253
   1b3e6:	19 82       	std	Y+1, r1	; 0x01
   1b3e8:	18 82       	st	Y, r1
   1b3ea:	cc 51       	subi	r28, 0x1C	; 28
   1b3ec:	d2 40       	sbci	r29, 0x02	; 2
                break;
            }
// write string
            for(i=0;i <len && ind < LIF_SECTOR_SIZE;++i)
            {
                if(buf[ind] == '\r' && i == len-1)
   1b3ee:	c5 01       	movw	r24, r10
   1b3f0:	01 97       	sbiw	r24, 0x01	; 1
   1b3f2:	c0 5d       	subi	r28, 0xD0	; 208
   1b3f4:	dd 4f       	sbci	r29, 0xFD	; 253
   1b3f6:	99 83       	std	Y+1, r25	; 0x01
   1b3f8:	88 83       	st	Y, r24
   1b3fa:	c0 53       	subi	r28, 0x30	; 48
   1b3fc:	d2 40       	sbci	r29, 0x02	; 2
   1b3fe:	68 c0       	rjmp	.+208    	; 0x1b4d0 <lif_extract_e010_as_ascii+0x35a>
                    done = 1;
                    break;
                }
                if(len >= LIF_SECTOR_SIZE)
                {
                    printf("lif_extract_e010_as_ascii: string too big size = %d\n", (int)len);
   1b400:	ed b7       	in	r30, 0x3d	; 61
   1b402:	fe b7       	in	r31, 0x3e	; 62
   1b404:	b5 82       	std	Z+5, r11	; 0x05
   1b406:	a4 82       	std	Z+4, r10	; 0x04
   1b408:	88 e0       	ldi	r24, 0x08	; 8
   1b40a:	97 e3       	ldi	r25, 0x37	; 55
   1b40c:	a0 e0       	ldi	r26, 0x00	; 0
   1b40e:	81 83       	std	Z+1, r24	; 0x01
   1b410:	92 83       	std	Z+2, r25	; 0x02
   1b412:	a3 83       	std	Z+3, r26	; 0x03
   1b414:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
   1b418:	1e c0       	rjmp	.+60     	; 0x1b456 <lif_extract_e010_as_ascii+0x2e0>
                    status = 0;
                    done = 1;
                    break;
                }
            }
            else if(buf[ind] == 0xEF)
   1b41a:	8f 3e       	cpi	r24, 0xEF	; 239
   1b41c:	09 f4       	brne	.+2      	; 0x1b420 <lif_extract_e010_as_ascii+0x2aa>
   1b41e:	d2 c0       	rjmp	.+420    	; 0x1b5c4 <lif_extract_e010_as_ascii+0x44e>
                ind = 0;
                break;
            }
            else
            {
                printf("lif_extract_e010_as_ascii: unexpected control byte:[%02XH] @ offset: %8lx, ind:%02XH\n", (int)buf[ind], offset, (int)ind);
   1b420:	ed b7       	in	r30, 0x3d	; 61
   1b422:	fe b7       	in	r31, 0x3e	; 62
   1b424:	13 87       	std	Z+11, r17	; 0x0b
   1b426:	02 87       	std	Z+10, r16	; 0x0a
   1b428:	c2 5e       	subi	r28, 0xE2	; 226
   1b42a:	dd 4f       	sbci	r29, 0xFD	; 253
   1b42c:	28 81       	ld	r18, Y
   1b42e:	39 81       	ldd	r19, Y+1	; 0x01
   1b430:	4a 81       	ldd	r20, Y+2	; 0x02
   1b432:	5b 81       	ldd	r21, Y+3	; 0x03
   1b434:	ce 51       	subi	r28, 0x1E	; 30
   1b436:	d2 40       	sbci	r29, 0x02	; 2
   1b438:	26 83       	std	Z+6, r18	; 0x06
   1b43a:	37 83       	std	Z+7, r19	; 0x07
   1b43c:	40 87       	std	Z+8, r20	; 0x08
   1b43e:	51 87       	std	Z+9, r21	; 0x09
   1b440:	90 e0       	ldi	r25, 0x00	; 0
   1b442:	95 83       	std	Z+5, r25	; 0x05
   1b444:	84 83       	std	Z+4, r24	; 0x04
   1b446:	82 eb       	ldi	r24, 0xB2	; 178
   1b448:	96 e3       	ldi	r25, 0x36	; 54
   1b44a:	a0 e0       	ldi	r26, 0x00	; 0
   1b44c:	81 83       	std	Z+1, r24	; 0x01
   1b44e:	92 83       	std	Z+2, r25	; 0x02
   1b450:	a3 83       	std	Z+3, r26	; 0x03
   1b452:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
                status = 0;
                done = 1;
   1b456:	21 e0       	ldi	r18, 0x01	; 1
   1b458:	30 e0       	ldi	r19, 0x00	; 0
   1b45a:	ce 5d       	subi	r28, 0xDE	; 222
   1b45c:	dd 4f       	sbci	r29, 0xFD	; 253
   1b45e:	39 83       	std	Y+1, r19	; 0x01
   1b460:	28 83       	st	Y, r18
   1b462:	c2 52       	subi	r28, 0x22	; 34
   1b464:	d2 40       	sbci	r29, 0x02	; 2
                break;
            }
            else
            {
                printf("lif_extract_e010_as_ascii: unexpected control byte:[%02XH] @ offset: %8lx, ind:%02XH\n", (int)buf[ind], offset, (int)ind);
                status = 0;
   1b466:	e1 2c       	mov	r14, r1
   1b468:	f1 2c       	mov	r15, r1
                done = 1;
                break;
   1b46a:	ac c0       	rjmp	.+344    	; 0x1b5c4 <lif_extract_e010_as_ascii+0x44e>
            }
// write string
            for(i=0;i <len && ind < LIF_SECTOR_SIZE;++i)
   1b46c:	0f 3f       	cpi	r16, 0xFF	; 255
   1b46e:	11 05       	cpc	r17, r1
   1b470:	11 f0       	breq	.+4      	; 0x1b476 <lif_extract_e010_as_ascii+0x300>
   1b472:	0c f0       	brlt	.+2      	; 0x1b476 <lif_extract_e010_as_ascii+0x300>
   1b474:	a7 c0       	rjmp	.+334    	; 0x1b5c4 <lif_extract_e010_as_ascii+0x44e>
            {
                if(buf[ind] == '\r' && i == len-1)
   1b476:	e0 e1       	ldi	r30, 0x10	; 16
   1b478:	f1 e0       	ldi	r31, 0x01	; 1
   1b47a:	ec 0f       	add	r30, r28
   1b47c:	fd 1f       	adc	r31, r29
   1b47e:	e0 0f       	add	r30, r16
   1b480:	f1 1f       	adc	r31, r17
   1b482:	20 81       	ld	r18, Z
   1b484:	a1 01       	movw	r20, r2
   1b486:	4f 5f       	subi	r20, 0xFF	; 255
   1b488:	5f 4f       	sbci	r21, 0xFF	; 255
   1b48a:	4a 01       	movw	r8, r20
   1b48c:	2d 30       	cpi	r18, 0x0D	; 13
   1b48e:	51 f1       	breq	.+84     	; 0x1b4e4 <lif_extract_e010_as_ascii+0x36e>
                    ++ind;
                    break;
                }
                else
                {
                    wbuf[wind++] = buf[ind++];
   1b490:	98 2d       	mov	r25, r8
   1b492:	89 2d       	mov	r24, r9
   1b494:	0f 5f       	subi	r16, 0xFF	; 255
   1b496:	1f 4f       	sbci	r17, 0xFF	; 255
   1b498:	ec e0       	ldi	r30, 0x0C	; 12
   1b49a:	f0 e0       	ldi	r31, 0x00	; 0
   1b49c:	ec 0f       	add	r30, r28
   1b49e:	fd 1f       	adc	r31, r29
   1b4a0:	e2 0d       	add	r30, r2
   1b4a2:	f3 1d       	adc	r31, r3
   1b4a4:	20 83       	st	Z, r18
                }

                if(wind >= LIF_SECTOR_SIZE)
   1b4a6:	ef ef       	ldi	r30, 0xFF	; 255
   1b4a8:	8e 16       	cp	r8, r30
   1b4aa:	91 04       	cpc	r9, r1
   1b4ac:	09 f0       	breq	.+2      	; 0x1b4b0 <lif_extract_e010_as_ascii+0x33a>
   1b4ae:	ac f5       	brge	.+106    	; 0x1b51a <lif_extract_e010_as_ascii+0x3a4>
                status = 0;
                done = 1;
                break;
            }
// write string
            for(i=0;i <len && ind < LIF_SECTOR_SIZE;++i)
   1b4b0:	c4 5e       	subi	r28, 0xE4	; 228
   1b4b2:	dd 4f       	sbci	r29, 0xFD	; 253
   1b4b4:	28 81       	ld	r18, Y
   1b4b6:	39 81       	ldd	r19, Y+1	; 0x01
   1b4b8:	cc 51       	subi	r28, 0x1C	; 28
   1b4ba:	d2 40       	sbci	r29, 0x02	; 2
   1b4bc:	2f 5f       	subi	r18, 0xFF	; 255
   1b4be:	3f 4f       	sbci	r19, 0xFF	; 255
   1b4c0:	c4 5e       	subi	r28, 0xE4	; 228
   1b4c2:	dd 4f       	sbci	r29, 0xFD	; 253
   1b4c4:	39 83       	std	Y+1, r19	; 0x01
   1b4c6:	28 83       	st	Y, r18
   1b4c8:	cc 51       	subi	r28, 0x1C	; 28
   1b4ca:	d2 40       	sbci	r29, 0x02	; 2
   1b4cc:	29 2e       	mov	r2, r25
   1b4ce:	38 2e       	mov	r3, r24
   1b4d0:	c4 5e       	subi	r28, 0xE4	; 228
   1b4d2:	dd 4f       	sbci	r29, 0xFD	; 253
   1b4d4:	48 81       	ld	r20, Y
   1b4d6:	59 81       	ldd	r21, Y+1	; 0x01
   1b4d8:	cc 51       	subi	r28, 0x1C	; 28
   1b4da:	d2 40       	sbci	r29, 0x02	; 2
   1b4dc:	4a 15       	cp	r20, r10
   1b4de:	5b 05       	cpc	r21, r11
   1b4e0:	2c f2       	brlt	.-118    	; 0x1b46c <lif_extract_e010_as_ascii+0x2f6>
   1b4e2:	62 c0       	rjmp	.+196    	; 0x1b5a8 <lif_extract_e010_as_ascii+0x432>
            {
                if(buf[ind] == '\r' && i == len-1)
   1b4e4:	c4 5e       	subi	r28, 0xE4	; 228
   1b4e6:	dd 4f       	sbci	r29, 0xFD	; 253
   1b4e8:	88 81       	ld	r24, Y
   1b4ea:	99 81       	ldd	r25, Y+1	; 0x01
   1b4ec:	cc 51       	subi	r28, 0x1C	; 28
   1b4ee:	d2 40       	sbci	r29, 0x02	; 2
   1b4f0:	c0 5d       	subi	r28, 0xD0	; 208
   1b4f2:	dd 4f       	sbci	r29, 0xFD	; 253
   1b4f4:	a8 81       	ld	r26, Y
   1b4f6:	b9 81       	ldd	r27, Y+1	; 0x01
   1b4f8:	c0 53       	subi	r28, 0x30	; 48
   1b4fa:	d2 40       	sbci	r29, 0x02	; 2
   1b4fc:	8a 17       	cp	r24, r26
   1b4fe:	9b 07       	cpc	r25, r27
   1b500:	39 f6       	brne	.-114    	; 0x1b490 <lif_extract_e010_as_ascii+0x31a>
                {
                    wbuf[wind++] = '\n';
   1b502:	ec e0       	ldi	r30, 0x0C	; 12
   1b504:	f0 e0       	ldi	r31, 0x00	; 0
   1b506:	ec 0f       	add	r30, r28
   1b508:	fd 1f       	adc	r31, r29
   1b50a:	e2 0d       	add	r30, r2
   1b50c:	f3 1d       	adc	r31, r3
   1b50e:	ba e0       	ldi	r27, 0x0A	; 10
   1b510:	b0 83       	st	Z, r27
                    ++ind;
   1b512:	0f 5f       	subi	r16, 0xFF	; 255
   1b514:	1f 4f       	sbci	r17, 0xFF	; 255
// write string
            for(i=0;i <len && ind < LIF_SECTOR_SIZE;++i)
            {
                if(buf[ind] == '\r' && i == len-1)
                {
                    wbuf[wind++] = '\n';
   1b516:	1a 01       	movw	r2, r20
                    ++ind;
                    break;
   1b518:	47 c0       	rjmp	.+142    	; 0x1b5a8 <lif_extract_e010_as_ascii+0x432>
                    wbuf[wind++] = buf[ind++];
                }

                if(wind >= LIF_SECTOR_SIZE)
                {
                    size = fwrite(wbuf,1,wind,fo);
   1b51a:	cc 5d       	subi	r28, 0xDC	; 220
   1b51c:	dd 4f       	sbci	r29, 0xFD	; 253
   1b51e:	28 81       	ld	r18, Y
   1b520:	39 81       	ldd	r19, Y+1	; 0x01
   1b522:	c4 52       	subi	r28, 0x24	; 36
   1b524:	d2 40       	sbci	r29, 0x02	; 2
   1b526:	a4 01       	movw	r20, r8
   1b528:	61 e0       	ldi	r22, 0x01	; 1
   1b52a:	70 e0       	ldi	r23, 0x00	; 0
   1b52c:	ce 01       	movw	r24, r28
   1b52e:	0c 96       	adiw	r24, 0x0c	; 12
   1b530:	0e 94 7c 7d 	call	0xfaf8	; 0xfaf8 <fwrite>
                    if(size < wind)
   1b534:	88 15       	cp	r24, r8
   1b536:	99 05       	cpc	r25, r9
   1b538:	d4 f4       	brge	.+52     	; 0x1b56e <lif_extract_e010_as_ascii+0x3f8>
                    {
                        printf("lif_extract_e010_as_ascii: write error\n");
   1b53a:	cb 5c       	subi	r28, 0xCB	; 203
   1b53c:	dd 4f       	sbci	r29, 0xFD	; 253
   1b53e:	28 81       	ld	r18, Y
   1b540:	39 81       	ldd	r19, Y+1	; 0x01
   1b542:	4a 81       	ldd	r20, Y+2	; 0x02
   1b544:	c5 53       	subi	r28, 0x35	; 53
   1b546:	d2 40       	sbci	r29, 0x02	; 2
   1b548:	ed b7       	in	r30, 0x3d	; 61
   1b54a:	fe b7       	in	r31, 0x3e	; 62
   1b54c:	21 83       	std	Z+1, r18	; 0x01
   1b54e:	32 83       	std	Z+2, r19	; 0x02
   1b550:	43 83       	std	Z+3, r20	; 0x03
   1b552:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
                    ++ind;
                    break;
                }
                else
                {
                    wbuf[wind++] = buf[ind++];
   1b556:	14 01       	movw	r2, r8
                    size = fwrite(wbuf,1,wind,fo);
                    if(size < wind)
                    {
                        printf("lif_extract_e010_as_ascii: write error\n");
                        status = 0;
                        done = 1;
   1b558:	21 e0       	ldi	r18, 0x01	; 1
   1b55a:	30 e0       	ldi	r19, 0x00	; 0
   1b55c:	ce 5d       	subi	r28, 0xDE	; 222
   1b55e:	dd 4f       	sbci	r29, 0xFD	; 253
   1b560:	39 83       	std	Y+1, r19	; 0x01
   1b562:	28 83       	st	Y, r18
   1b564:	c2 52       	subi	r28, 0x22	; 34
   1b566:	d2 40       	sbci	r29, 0x02	; 2
                {
                    size = fwrite(wbuf,1,wind,fo);
                    if(size < wind)
                    {
                        printf("lif_extract_e010_as_ascii: write error\n");
                        status = 0;
   1b568:	e1 2c       	mov	r14, r1
   1b56a:	f1 2c       	mov	r15, r1
                        done = 1;
                        break;
   1b56c:	1d c0       	rjmp	.+58     	; 0x1b5a8 <lif_extract_e010_as_ascii+0x432>
                    }
                    bytes += size;
   1b56e:	09 2e       	mov	r0, r25
   1b570:	00 0c       	add	r0, r0
   1b572:	aa 0b       	sbc	r26, r26
   1b574:	bb 0b       	sbc	r27, r27
   1b576:	48 0e       	add	r4, r24
   1b578:	59 1e       	adc	r5, r25
   1b57a:	6a 1e       	adc	r6, r26
   1b57c:	7b 1e       	adc	r7, r27
                    printf("\tWrote: %8ld\r", bytes);
   1b57e:	ed b7       	in	r30, 0x3d	; 61
   1b580:	fe b7       	in	r31, 0x3e	; 62
   1b582:	44 82       	std	Z+4, r4	; 0x04
   1b584:	55 82       	std	Z+5, r5	; 0x05
   1b586:	66 82       	std	Z+6, r6	; 0x06
   1b588:	77 82       	std	Z+7, r7	; 0x07
   1b58a:	ce 5c       	subi	r28, 0xCE	; 206
   1b58c:	dd 4f       	sbci	r29, 0xFD	; 253
   1b58e:	28 81       	ld	r18, Y
   1b590:	39 81       	ldd	r19, Y+1	; 0x01
   1b592:	4a 81       	ldd	r20, Y+2	; 0x02
   1b594:	c2 53       	subi	r28, 0x32	; 50
   1b596:	d2 40       	sbci	r29, 0x02	; 2
   1b598:	21 83       	std	Z+1, r18	; 0x01
   1b59a:	32 83       	std	Z+2, r19	; 0x02
   1b59c:	43 83       	std	Z+3, r20	; 0x03
   1b59e:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
                    wind = 0;
   1b5a2:	90 e0       	ldi	r25, 0x00	; 0
   1b5a4:	80 e0       	ldi	r24, 0x00	; 0
   1b5a6:	84 cf       	rjmp	.-248    	; 0x1b4b0 <lif_extract_e010_as_ascii+0x33a>
            status = 0;
            break;
        }

        ind = 0;
        while(ind < LIF_SECTOR_SIZE && !done)
   1b5a8:	0f 3f       	cpi	r16, 0xFF	; 255
   1b5aa:	11 05       	cpc	r17, r1
   1b5ac:	09 f0       	breq	.+2      	; 0x1b5b0 <lif_extract_e010_as_ascii+0x43a>
   1b5ae:	0c f4       	brge	.+2      	; 0x1b5b2 <lif_extract_e010_as_ascii+0x43c>
   1b5b0:	e5 ce       	rjmp	.-566    	; 0x1b37c <lif_extract_e010_as_ascii+0x206>
   1b5b2:	08 c0       	rjmp	.+16     	; 0x1b5c4 <lif_extract_e010_as_ascii+0x44e>
                len = buf[ind++] & 0xff;
                len |= ((buf[ind++] & 0xff) <<8);
// EOF ?
                if(len == 0)
                {
                    done = 1;
   1b5b4:	a1 e0       	ldi	r26, 0x01	; 1
   1b5b6:	b0 e0       	ldi	r27, 0x00	; 0
   1b5b8:	ce 5d       	subi	r28, 0xDE	; 222
   1b5ba:	dd 4f       	sbci	r29, 0xFD	; 253
   1b5bc:	b9 83       	std	Y+1, r27	; 0x01
   1b5be:	a8 83       	st	Y, r26
   1b5c0:	c2 52       	subi	r28, 0x22	; 34
   1b5c2:	d2 40       	sbci	r29, 0x02	; 2

            }                                     // for(i=0;i <len && ind < LIF_SECTOR_SIZE;++i)

        }                                         // while(ind < LIF_SECTOR_SIZE && status)

        offset += (long) LIF_SECTOR_SIZE;
   1b5c4:	c2 5e       	subi	r28, 0xE2	; 226
   1b5c6:	dd 4f       	sbci	r29, 0xFD	; 253
   1b5c8:	28 81       	ld	r18, Y
   1b5ca:	39 81       	ldd	r19, Y+1	; 0x01
   1b5cc:	4a 81       	ldd	r20, Y+2	; 0x02
   1b5ce:	5b 81       	ldd	r21, Y+3	; 0x03
   1b5d0:	ce 51       	subi	r28, 0x1E	; 30
   1b5d2:	d2 40       	sbci	r29, 0x02	; 2
   1b5d4:	3f 5f       	subi	r19, 0xFF	; 255
   1b5d6:	4f 4f       	sbci	r20, 0xFF	; 255
   1b5d8:	5f 4f       	sbci	r21, 0xFF	; 255
   1b5da:	c2 5e       	subi	r28, 0xE2	; 226
   1b5dc:	dd 4f       	sbci	r29, 0xFD	; 253
   1b5de:	28 83       	st	Y, r18
   1b5e0:	39 83       	std	Y+1, r19	; 0x01
   1b5e2:	4a 83       	std	Y+2, r20	; 0x02
   1b5e4:	5b 83       	std	Y+3, r21	; 0x03
   1b5e6:	ce 51       	subi	r28, 0x1E	; 30
   1b5e8:	d2 40       	sbci	r29, 0x02	; 2
   1b5ea:	97 ce       	rjmp	.-722    	; 0x1b31a <lif_extract_e010_as_ascii+0x1a4>
    {
// LIF images are always multiples of LIF_SECTOR_SIZE
        size = lif_read(LIF, buf, offset, LIF_SECTOR_SIZE);
        if(size < LIF_SECTOR_SIZE)
        {
            status = 0;
   1b5ec:	e1 2c       	mov	r14, r1
   1b5ee:	f1 2c       	mov	r15, r1
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1b5f0:	c6 01       	movw	r24, r12
   1b5f2:	0e 94 6c cb 	call	0x196d8	; 0x196d8 <lif_close_volume>

    }                                             // while(offset <= end)

    lif_closedir(LIF);
// Flush any remaining bytes
    if(wind)
   1b5f6:	21 14       	cp	r2, r1
   1b5f8:	31 04       	cpc	r3, r1
   1b5fa:	31 f1       	breq	.+76     	; 0x1b648 <lif_extract_e010_as_ascii+0x4d2>
    {
        size = fwrite(wbuf,1,wind,fo);
   1b5fc:	cc 5d       	subi	r28, 0xDC	; 220
   1b5fe:	dd 4f       	sbci	r29, 0xFD	; 253
   1b600:	28 81       	ld	r18, Y
   1b602:	39 81       	ldd	r19, Y+1	; 0x01
   1b604:	c4 52       	subi	r28, 0x24	; 36
   1b606:	d2 40       	sbci	r29, 0x02	; 2
   1b608:	a1 01       	movw	r20, r2
   1b60a:	61 e0       	ldi	r22, 0x01	; 1
   1b60c:	70 e0       	ldi	r23, 0x00	; 0
   1b60e:	ce 01       	movw	r24, r28
   1b610:	0c 96       	adiw	r24, 0x0c	; 12
   1b612:	0e 94 7c 7d 	call	0xfaf8	; 0xfaf8 <fwrite>
   1b616:	8c 01       	movw	r16, r24
        if(size < wind)
   1b618:	82 15       	cp	r24, r2
   1b61a:	93 05       	cpc	r25, r3
   1b61c:	64 f4       	brge	.+24     	; 0x1b636 <lif_extract_e010_as_ascii+0x4c0>
        {
            printf("lif_extract_e010_as_ascii: write error\n");
   1b61e:	84 e5       	ldi	r24, 0x54	; 84
   1b620:	96 e3       	ldi	r25, 0x36	; 54
   1b622:	a0 e0       	ldi	r26, 0x00	; 0
   1b624:	ed b7       	in	r30, 0x3d	; 61
   1b626:	fe b7       	in	r31, 0x3e	; 62
   1b628:	81 83       	std	Z+1, r24	; 0x01
   1b62a:	92 83       	std	Z+2, r25	; 0x02
   1b62c:	a3 83       	std	Z+3, r26	; 0x03
   1b62e:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
            status = 0;
   1b632:	e1 2c       	mov	r14, r1
   1b634:	f1 2c       	mov	r15, r1
        }
        bytes += size;
   1b636:	c8 01       	movw	r24, r16
   1b638:	01 2e       	mov	r0, r17
   1b63a:	00 0c       	add	r0, r0
   1b63c:	aa 0b       	sbc	r26, r26
   1b63e:	bb 0b       	sbc	r27, r27
   1b640:	48 0e       	add	r4, r24
   1b642:	59 1e       	adc	r5, r25
   1b644:	6a 1e       	adc	r6, r26
   1b646:	7b 1e       	adc	r7, r27
    }
    fclose(fo);
   1b648:	cc 5d       	subi	r28, 0xDC	; 220
   1b64a:	dd 4f       	sbci	r29, 0xFD	; 253
   1b64c:	88 81       	ld	r24, Y
   1b64e:	99 81       	ldd	r25, Y+1	; 0x01
   1b650:	c4 52       	subi	r28, 0x24	; 36
   1b652:	d2 40       	sbci	r29, 0x02	; 2
   1b654:	0e 94 fe 7d 	call	0xfbfc	; 0xfbfc <fclose>
    if(t)
   1b658:	c8 5d       	subi	r28, 0xD8	; 216
   1b65a:	dd 4f       	sbci	r29, 0xFD	; 253
   1b65c:	28 81       	ld	r18, Y
   1b65e:	39 81       	ldd	r19, Y+1	; 0x01
   1b660:	4a 81       	ldd	r20, Y+2	; 0x02
   1b662:	5b 81       	ldd	r21, Y+3	; 0x03
   1b664:	c8 52       	subi	r28, 0x28	; 40
   1b666:	d2 40       	sbci	r29, 0x02	; 2
   1b668:	21 15       	cp	r18, r1
   1b66a:	31 05       	cpc	r19, r1
   1b66c:	41 05       	cpc	r20, r1
   1b66e:	51 05       	cpc	r21, r1
   1b670:	d9 f0       	breq	.+54     	; 0x1b6a8 <lif_extract_e010_as_ascii+0x532>
    {
        struct utimbuf times;
        times.modtime = t;
   1b672:	c8 5e       	subi	r28, 0xE8	; 232
   1b674:	dd 4f       	sbci	r29, 0xFD	; 253
   1b676:	28 83       	st	Y, r18
   1b678:	39 83       	std	Y+1, r19	; 0x01
   1b67a:	4a 83       	std	Y+2, r20	; 0x02
   1b67c:	5b 83       	std	Y+3, r21	; 0x03
   1b67e:	c8 51       	subi	r28, 0x18	; 24
   1b680:	d2 40       	sbci	r29, 0x02	; 2
        times.actime = t;
   1b682:	cc 5e       	subi	r28, 0xEC	; 236
   1b684:	dd 4f       	sbci	r29, 0xFD	; 253
   1b686:	28 83       	st	Y, r18
   1b688:	39 83       	std	Y+1, r19	; 0x01
   1b68a:	4a 83       	std	Y+2, r20	; 0x02
   1b68c:	5b 83       	std	Y+3, r21	; 0x03
   1b68e:	c4 51       	subi	r28, 0x14	; 20
   1b690:	d2 40       	sbci	r29, 0x02	; 2
        utime(username, (struct utimbuf *) &times);
   1b692:	be 01       	movw	r22, r28
   1b694:	6c 5e       	subi	r22, 0xEC	; 236
   1b696:	7d 4f       	sbci	r23, 0xFD	; 253
   1b698:	ca 5d       	subi	r28, 0xDA	; 218
   1b69a:	dd 4f       	sbci	r29, 0xFD	; 253
   1b69c:	88 81       	ld	r24, Y
   1b69e:	99 81       	ldd	r25, Y+1	; 0x01
   1b6a0:	c6 52       	subi	r28, 0x26	; 38
   1b6a2:	d2 40       	sbci	r29, 0x02	; 2
   1b6a4:	0e 94 3b 7b 	call	0xf676	; 0xf676 <utime>
    }
    sync();
   1b6a8:	0e 94 f9 7c 	call	0xf9f2	; 0xf9f2 <sync>
    printf("\tWrote: %8ld\n", bytes);
   1b6ac:	ed b7       	in	r30, 0x3d	; 61
   1b6ae:	fe b7       	in	r31, 0x3e	; 62
   1b6b0:	44 82       	std	Z+4, r4	; 0x04
   1b6b2:	55 82       	std	Z+5, r5	; 0x05
   1b6b4:	66 82       	std	Z+6, r6	; 0x06
   1b6b6:	77 82       	std	Z+7, r7	; 0x07
   1b6b8:	86 e4       	ldi	r24, 0x46	; 70
   1b6ba:	96 e3       	ldi	r25, 0x36	; 54
   1b6bc:	a0 e0       	ldi	r26, 0x00	; 0
   1b6be:	81 83       	std	Z+1, r24	; 0x01
   1b6c0:	92 83       	std	Z+2, r25	; 0x02
   1b6c2:	a3 83       	std	Z+3, r26	; 0x03
   1b6c4:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
    return(status);
   1b6c8:	c7 01       	movw	r24, r14
}
   1b6ca:	c9 5c       	subi	r28, 0xC9	; 201
   1b6cc:	dd 4f       	sbci	r29, 0xFD	; 253
   1b6ce:	e2 e1       	ldi	r30, 0x12	; 18
   1b6d0:	0c 94 c0 e8 	jmp	0x1d180	; 0x1d180 <__epilogue_restores__>

0001b6d4 <lif_extract_lif_as_lif>:
/// @param[in] username: new LIF file to create
/// @return 1 on sucess or 0 on error
/// FIXME assumes 256 byte secors
MEMSPACE
int lif_extract_lif_as_lif(char *lifimagename, char *lifname, char *username)
{
   1b6d4:	a4 e1       	ldi	r26, 0x14	; 20
   1b6d6:	b1 e0       	ldi	r27, 0x01	; 1
   1b6d8:	e0 e7       	ldi	r30, 0x70	; 112
   1b6da:	fb ed       	ldi	r31, 0xDB	; 219
   1b6dc:	0c 94 a4 e8 	jmp	0x1d148	; 0x1d148 <__prologue_saves__>
   1b6e0:	7c 01       	movw	r14, r24
   1b6e2:	8b 01       	movw	r16, r22
   1b6e4:	3a 01       	movw	r6, r20
    int i, size;
    int sectors;

    uint8_t buf[LIF_SECTOR_SIZE+4];

    LIF = lif_open_volume(lifimagename,"r");
   1b6e6:	62 e4       	ldi	r22, 0x42	; 66
   1b6e8:	73 e0       	ldi	r23, 0x03	; 3
   1b6ea:	0e 94 29 d2 	call	0x1a452	; 0x1a452 <lif_open_volume>
   1b6ee:	4c 01       	movw	r8, r24
    if(LIF == NULL)
   1b6f0:	00 97       	sbiw	r24, 0x00	; 0
   1b6f2:	69 f4       	brne	.+26     	; 0x1b70e <lif_extract_lif_as_lif+0x3a>
    {
        printf("LIF image not found:%s\n", lifimagename);
   1b6f4:	ed b7       	in	r30, 0x3d	; 61
   1b6f6:	fe b7       	in	r31, 0x3e	; 62
   1b6f8:	f5 82       	std	Z+5, r15	; 0x05
   1b6fa:	e4 82       	std	Z+4, r14	; 0x04
   1b6fc:	8e e2       	ldi	r24, 0x2E	; 46
   1b6fe:	96 e3       	ldi	r25, 0x36	; 54
   1b700:	a0 e0       	ldi	r26, 0x00	; 0
   1b702:	81 83       	std	Z+1, r24	; 0x01
   1b704:	92 83       	std	Z+2, r25	; 0x02
   1b706:	a3 83       	std	Z+3, r26	; 0x03
   1b708:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
   1b70c:	13 c0       	rjmp	.+38     	; 0x1b734 <lif_extract_lif_as_lif+0x60>
        return(0);
    }

    index = lif_find_file(LIF, lifname);
   1b70e:	b8 01       	movw	r22, r16
   1b710:	75 d9       	rcall	.-3350   	; 0x1a9fc <lif_find_file>
    if(index == -1)
   1b712:	01 96       	adiw	r24, 0x01	; 1
   1b714:	91 f4       	brne	.+36     	; 0x1b73a <lif_extract_lif_as_lif+0x66>
    {
        printf("File not found:%s\n", lifname);
   1b716:	ed b7       	in	r30, 0x3d	; 61
   1b718:	fe b7       	in	r31, 0x3e	; 62
   1b71a:	15 83       	std	Z+5, r17	; 0x05
   1b71c:	04 83       	std	Z+4, r16	; 0x04
   1b71e:	8b e1       	ldi	r24, 0x1B	; 27
   1b720:	96 e3       	ldi	r25, 0x36	; 54
   1b722:	a0 e0       	ldi	r26, 0x00	; 0
   1b724:	81 83       	std	Z+1, r24	; 0x01
   1b726:	92 83       	std	Z+2, r25	; 0x02
   1b728:	a3 83       	std	Z+3, r26	; 0x03
   1b72a:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1b72e:	c4 01       	movw	r24, r8
   1b730:	0e 94 6c cb 	call	0x196d8	; 0x196d8 <lif_close_volume>
    index = lif_find_file(LIF, lifname);
    if(index == -1)
    {
        printf("File not found:%s\n", lifname);
        lif_closedir(LIF);
        return(0);
   1b734:	00 e0       	ldi	r16, 0x00	; 0
   1b736:	10 e0       	ldi	r17, 0x00	; 0
   1b738:	ff c0       	rjmp	.+510    	; 0x1b938 <lif_extract_lif_as_lif+0x264>
    }

    sectors = LIF->DIR.FileSectors;
   1b73a:	94 01       	movw	r18, r8
   1b73c:	20 5a       	subi	r18, 0xA0	; 160
   1b73e:	3f 4f       	sbci	r19, 0xFF	; 255
   1b740:	c0 5f       	subi	r28, 0xF0	; 240
   1b742:	de 4f       	sbci	r29, 0xFE	; 254
   1b744:	39 83       	std	Y+1, r19	; 0x01
   1b746:	28 83       	st	Y, r18
   1b748:	c0 51       	subi	r28, 0x10	; 16
   1b74a:	d1 40       	sbci	r29, 0x01	; 1

//Initialize the user file lif_t structure
    ULIF = lif_create_volume(username, "HFSLIF",1,1,sectors);
   1b74c:	f9 01       	movw	r30, r18
   1b74e:	a0 80       	ld	r10, Z
   1b750:	b1 80       	ldd	r11, Z+1	; 0x01
   1b752:	0b 2c       	mov	r0, r11
   1b754:	00 0c       	add	r0, r0
   1b756:	cc 08       	sbc	r12, r12
   1b758:	dd 08       	sbc	r13, r13
   1b75a:	e1 2c       	mov	r14, r1
   1b75c:	f1 2c       	mov	r15, r1
   1b75e:	87 01       	movw	r16, r14
   1b760:	e3 94       	inc	r14
   1b762:	21 e0       	ldi	r18, 0x01	; 1
   1b764:	30 e0       	ldi	r19, 0x00	; 0
   1b766:	40 e0       	ldi	r20, 0x00	; 0
   1b768:	50 e0       	ldi	r21, 0x00	; 0
   1b76a:	6a e5       	ldi	r22, 0x5A	; 90
   1b76c:	76 e1       	ldi	r23, 0x16	; 22
   1b76e:	c3 01       	movw	r24, r6
   1b770:	0e 94 df cd 	call	0x19bbe	; 0x19bbe <lif_create_volume>
   1b774:	7c 01       	movw	r14, r24
    if(ULIF == NULL)
   1b776:	89 2b       	or	r24, r25
   1b778:	d1 f2       	breq	.-76     	; 0x1b72e <lif_extract_lif_as_lif+0x5a>
    }

// Only the start sector changes

// Copy directory record
    ULIF->DIR = LIF->DIR;
   1b77a:	81 e2       	ldi	r24, 0x21	; 33
   1b77c:	f4 01       	movw	r30, r8
   1b77e:	e1 5b       	subi	r30, 0xB1	; 177
   1b780:	ff 4f       	sbci	r31, 0xFF	; 255
   1b782:	d7 01       	movw	r26, r14
   1b784:	a1 5b       	subi	r26, 0xB1	; 177
   1b786:	bf 4f       	sbci	r27, 0xFF	; 255
   1b788:	01 90       	ld	r0, Z+
   1b78a:	0d 92       	st	X+, r0
   1b78c:	8a 95       	dec	r24
   1b78e:	e1 f7       	brne	.-8      	; 0x1b788 <lif_extract_lif_as_lif+0xb4>

    ULIF->DIR.FileStartSector = 2;
   1b790:	82 e0       	ldi	r24, 0x02	; 2
   1b792:	90 e0       	ldi	r25, 0x00	; 0
   1b794:	a0 e0       	ldi	r26, 0x00	; 0
   1b796:	b0 e0       	ldi	r27, 0x00	; 0
   1b798:	f7 01       	movw	r30, r14
   1b79a:	e4 5a       	subi	r30, 0xA4	; 164
   1b79c:	ff 4f       	sbci	r31, 0xFF	; 255
   1b79e:	80 83       	st	Z, r24
   1b7a0:	91 83       	std	Z+1, r25	; 0x01
   1b7a2:	a2 83       	std	Z+2, r26	; 0x02
   1b7a4:	b3 83       	std	Z+3, r27	; 0x03
    ULIF->filesectors = LIF->DIR.FileSectors;
   1b7a6:	c0 5f       	subi	r28, 0xF0	; 240
   1b7a8:	de 4f       	sbci	r29, 0xFE	; 254
   1b7aa:	e8 81       	ld	r30, Y
   1b7ac:	f9 81       	ldd	r31, Y+1	; 0x01
   1b7ae:	c0 51       	subi	r28, 0x10	; 16
   1b7b0:	d1 40       	sbci	r29, 0x01	; 1
   1b7b2:	80 81       	ld	r24, Z
   1b7b4:	91 81       	ldd	r25, Z+1	; 0x01
   1b7b6:	a2 81       	ldd	r26, Z+2	; 0x02
   1b7b8:	b3 81       	ldd	r27, Z+3	; 0x03
   1b7ba:	f7 01       	movw	r30, r14
   1b7bc:	80 8b       	std	Z+16, r24	; 0x10
   1b7be:	91 8b       	std	Z+17, r25	; 0x11
   1b7c0:	a2 8b       	std	Z+18, r26	; 0x12
   1b7c2:	b3 8b       	std	Z+19, r27	; 0x13

    if( !lif_writedirindex(ULIF,0))
   1b7c4:	60 e0       	ldi	r22, 0x00	; 0
   1b7c6:	70 e0       	ldi	r23, 0x00	; 0
   1b7c8:	c7 01       	movw	r24, r14
   1b7ca:	0e 94 61 cc 	call	0x198c2	; 0x198c2 <lif_writedirindex>
   1b7ce:	8c 01       	movw	r16, r24
   1b7d0:	89 2b       	or	r24, r25
   1b7d2:	41 f0       	breq	.+16     	; 0x1b7e4 <lif_extract_lif_as_lif+0x110>
    {
        lif_closedir(LIF);
        lif_closedir(ULIF);
        return(0);
    }
    if( !lif_writedirEOF(ULIF,1) )
   1b7d4:	61 e0       	ldi	r22, 0x01	; 1
   1b7d6:	70 e0       	ldi	r23, 0x00	; 0
   1b7d8:	c7 01       	movw	r24, r14
   1b7da:	0e 94 bd cc 	call	0x1997a	; 0x1997a <lif_writedirEOF>
   1b7de:	8c 01       	movw	r16, r24
   1b7e0:	89 2b       	or	r24, r25
   1b7e2:	39 f4       	brne	.+14     	; 0x1b7f2 <lif_extract_lif_as_lif+0x11e>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1b7e4:	c4 01       	movw	r24, r8
   1b7e6:	0e 94 6c cb 	call	0x196d8	; 0x196d8 <lif_close_volume>
   1b7ea:	c7 01       	movw	r24, r14
   1b7ec:	0e 94 6c cb 	call	0x196d8	; 0x196d8 <lif_close_volume>
    }
    if( !lif_writedirEOF(ULIF,1) )
    {
        lif_closedir(LIF);
        lif_closedir(ULIF);
        return(0);
   1b7f0:	a3 c0       	rjmp	.+326    	; 0x1b938 <lif_extract_lif_as_lif+0x264>
    }

    uoffset =  ULIF->filestart * (long) LIF_SECTOR_SIZE;
   1b7f2:	f7 01       	movw	r30, r14
   1b7f4:	44 84       	ldd	r4, Z+12	; 0x0c
   1b7f6:	55 84       	ldd	r5, Z+13	; 0x0d
   1b7f8:	66 84       	ldd	r6, Z+14	; 0x0e
   1b7fa:	77 84       	ldd	r7, Z+15	; 0x0f
   1b7fc:	76 2c       	mov	r7, r6
   1b7fe:	65 2c       	mov	r6, r5
   1b800:	54 2c       	mov	r5, r4
   1b802:	44 24       	eor	r4, r4

    offset = LIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
   1b804:	f4 01       	movw	r30, r8
   1b806:	e4 5a       	subi	r30, 0xA4	; 164
   1b808:	ff 4f       	sbci	r31, 0xFF	; 255
   1b80a:	80 81       	ld	r24, Z
   1b80c:	91 81       	ldd	r25, Z+1	; 0x01
   1b80e:	a2 81       	ldd	r26, Z+2	; 0x02
   1b810:	b3 81       	ldd	r27, Z+3	; 0x03
   1b812:	22 27       	eor	r18, r18
   1b814:	38 2f       	mov	r19, r24
   1b816:	49 2f       	mov	r20, r25
   1b818:	5a 2f       	mov	r21, r26
   1b81a:	c4 5f       	subi	r28, 0xF4	; 244
   1b81c:	de 4f       	sbci	r29, 0xFE	; 254
   1b81e:	28 83       	st	Y, r18
   1b820:	39 83       	std	Y+1, r19	; 0x01
   1b822:	4a 83       	std	Y+2, r20	; 0x02
   1b824:	5b 83       	std	Y+3, r21	; 0x03
   1b826:	cc 50       	subi	r28, 0x0C	; 12
   1b828:	d1 40       	sbci	r29, 0x01	; 1

    bytes = uoffset;

    for(i=0;i<(int)LIF->DIR.FileSectors;++i)
   1b82a:	21 2c       	mov	r2, r1
   1b82c:	31 2c       	mov	r3, r1
            return(0);
        }
        bytes += size;
        offset += size;
        uoffset += size;
        printf("\tWrote: %8ld\r", bytes);
   1b82e:	8d e0       	ldi	r24, 0x0D	; 13
   1b830:	96 e3       	ldi	r25, 0x36	; 54
   1b832:	9c 01       	movw	r18, r24
   1b834:	40 e0       	ldi	r20, 0x00	; 0
   1b836:	ce 5e       	subi	r28, 0xEE	; 238
   1b838:	de 4f       	sbci	r29, 0xFE	; 254
   1b83a:	28 83       	st	Y, r18
   1b83c:	39 83       	std	Y+1, r19	; 0x01
   1b83e:	4a 83       	std	Y+2, r20	; 0x02
   1b840:	c2 51       	subi	r28, 0x12	; 18
   1b842:	d1 40       	sbci	r29, 0x01	; 1

    offset = LIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;

    bytes = uoffset;

    for(i=0;i<(int)LIF->DIR.FileSectors;++i)
   1b844:	c0 5f       	subi	r28, 0xF0	; 240
   1b846:	de 4f       	sbci	r29, 0xFE	; 254
   1b848:	e8 81       	ld	r30, Y
   1b84a:	f9 81       	ldd	r31, Y+1	; 0x01
   1b84c:	c0 51       	subi	r28, 0x10	; 16
   1b84e:	d1 40       	sbci	r29, 0x01	; 1
   1b850:	80 81       	ld	r24, Z
   1b852:	91 81       	ldd	r25, Z+1	; 0x01
   1b854:	28 16       	cp	r2, r24
   1b856:	39 06       	cpc	r3, r25
   1b858:	0c f0       	brlt	.+2      	; 0x1b85c <lif_extract_lif_as_lif+0x188>
   1b85a:	58 c0       	rjmp	.+176    	; 0x1b90c <lif_extract_lif_as_lif+0x238>
    {
        size = lif_read(LIF, buf, offset,LIF_SECTOR_SIZE);
   1b85c:	00 e0       	ldi	r16, 0x00	; 0
   1b85e:	11 e0       	ldi	r17, 0x01	; 1
   1b860:	c4 5f       	subi	r28, 0xF4	; 244
   1b862:	de 4f       	sbci	r29, 0xFE	; 254
   1b864:	28 81       	ld	r18, Y
   1b866:	39 81       	ldd	r19, Y+1	; 0x01
   1b868:	4a 81       	ldd	r20, Y+2	; 0x02
   1b86a:	5b 81       	ldd	r21, Y+3	; 0x03
   1b86c:	cc 50       	subi	r28, 0x0C	; 12
   1b86e:	d1 40       	sbci	r29, 0x01	; 1
   1b870:	be 01       	movw	r22, r28
   1b872:	68 5f       	subi	r22, 0xF8	; 248
   1b874:	7f 4f       	sbci	r23, 0xFF	; 255
   1b876:	c4 01       	movw	r24, r8
   1b878:	0e 94 bc c2 	call	0x18578	; 0x18578 <lif_read>
   1b87c:	5b 01       	movw	r10, r22
   1b87e:	6c 01       	movw	r12, r24
        if(size < LIF_SECTOR_SIZE)
   1b880:	6f 3f       	cpi	r22, 0xFF	; 255
   1b882:	71 05       	cpc	r23, r1
   1b884:	09 f0       	breq	.+2      	; 0x1b888 <lif_extract_lif_as_lif+0x1b4>
   1b886:	2c f4       	brge	.+10     	; 0x1b892 <lif_extract_lif_as_lif+0x1be>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1b888:	c4 01       	movw	r24, r8
   1b88a:	0e 94 6c cb 	call	0x196d8	; 0x196d8 <lif_close_volume>
   1b88e:	c7 01       	movw	r24, r14
   1b890:	4f cf       	rjmp	.-354    	; 0x1b730 <lif_extract_lif_as_lif+0x5c>
            lif_closedir(LIF);
            lif_closedir(ULIF);
            return(0);
        }

        lif_write(ULIF,buf,uoffset,LIF_SECTOR_SIZE);
   1b892:	00 e0       	ldi	r16, 0x00	; 0
   1b894:	11 e0       	ldi	r17, 0x01	; 1
   1b896:	a3 01       	movw	r20, r6
   1b898:	92 01       	movw	r18, r4
   1b89a:	be 01       	movw	r22, r28
   1b89c:	68 5f       	subi	r22, 0xF8	; 248
   1b89e:	7f 4f       	sbci	r23, 0xFF	; 255
   1b8a0:	c7 01       	movw	r24, r14
   1b8a2:	0e 94 0f c3 	call	0x1861e	; 0x1861e <lif_write>
        {
            lif_closedir(LIF);
            lif_closedir(ULIF);
            return(0);
        }
        bytes += size;
   1b8a6:	c5 01       	movw	r24, r10
   1b8a8:	0b 2c       	mov	r0, r11
   1b8aa:	00 0c       	add	r0, r0
   1b8ac:	aa 0b       	sbc	r26, r26
   1b8ae:	bb 0b       	sbc	r27, r27
   1b8b0:	48 0e       	add	r4, r24
   1b8b2:	59 1e       	adc	r5, r25
   1b8b4:	6a 1e       	adc	r6, r26
   1b8b6:	7b 1e       	adc	r7, r27
        offset += size;
   1b8b8:	c4 5f       	subi	r28, 0xF4	; 244
   1b8ba:	de 4f       	sbci	r29, 0xFE	; 254
   1b8bc:	28 81       	ld	r18, Y
   1b8be:	39 81       	ldd	r19, Y+1	; 0x01
   1b8c0:	4a 81       	ldd	r20, Y+2	; 0x02
   1b8c2:	5b 81       	ldd	r21, Y+3	; 0x03
   1b8c4:	cc 50       	subi	r28, 0x0C	; 12
   1b8c6:	d1 40       	sbci	r29, 0x01	; 1
   1b8c8:	28 0f       	add	r18, r24
   1b8ca:	39 1f       	adc	r19, r25
   1b8cc:	4a 1f       	adc	r20, r26
   1b8ce:	5b 1f       	adc	r21, r27
   1b8d0:	c4 5f       	subi	r28, 0xF4	; 244
   1b8d2:	de 4f       	sbci	r29, 0xFE	; 254
   1b8d4:	28 83       	st	Y, r18
   1b8d6:	39 83       	std	Y+1, r19	; 0x01
   1b8d8:	4a 83       	std	Y+2, r20	; 0x02
   1b8da:	5b 83       	std	Y+3, r21	; 0x03
   1b8dc:	cc 50       	subi	r28, 0x0C	; 12
   1b8de:	d1 40       	sbci	r29, 0x01	; 1
        uoffset += size;
        printf("\tWrote: %8ld\r", bytes);
   1b8e0:	ed b7       	in	r30, 0x3d	; 61
   1b8e2:	fe b7       	in	r31, 0x3e	; 62
   1b8e4:	44 82       	std	Z+4, r4	; 0x04
   1b8e6:	55 82       	std	Z+5, r5	; 0x05
   1b8e8:	66 82       	std	Z+6, r6	; 0x06
   1b8ea:	77 82       	std	Z+7, r7	; 0x07
   1b8ec:	ce 5e       	subi	r28, 0xEE	; 238
   1b8ee:	de 4f       	sbci	r29, 0xFE	; 254
   1b8f0:	28 81       	ld	r18, Y
   1b8f2:	39 81       	ldd	r19, Y+1	; 0x01
   1b8f4:	4a 81       	ldd	r20, Y+2	; 0x02
   1b8f6:	c2 51       	subi	r28, 0x12	; 18
   1b8f8:	d1 40       	sbci	r29, 0x01	; 1
   1b8fa:	21 83       	std	Z+1, r18	; 0x01
   1b8fc:	32 83       	std	Z+2, r19	; 0x02
   1b8fe:	43 83       	std	Z+3, r20	; 0x03
   1b900:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>

    offset = LIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;

    bytes = uoffset;

    for(i=0;i<(int)LIF->DIR.FileSectors;++i)
   1b904:	ff ef       	ldi	r31, 0xFF	; 255
   1b906:	2f 1a       	sub	r2, r31
   1b908:	3f 0a       	sbc	r3, r31
   1b90a:	9c cf       	rjmp	.-200    	; 0x1b844 <lif_extract_lif_as_lif+0x170>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1b90c:	c4 01       	movw	r24, r8
   1b90e:	0e 94 6c cb 	call	0x196d8	; 0x196d8 <lif_close_volume>
   1b912:	c7 01       	movw	r24, r14
   1b914:	0e 94 6c cb 	call	0x196d8	; 0x196d8 <lif_close_volume>
        uoffset += size;
        printf("\tWrote: %8ld\r", bytes);
    }
    lif_closedir(LIF);
    lif_closedir(ULIF);
    printf("\tWrote: %8ld\n", bytes);
   1b918:	ed b7       	in	r30, 0x3d	; 61
   1b91a:	fe b7       	in	r31, 0x3e	; 62
   1b91c:	44 82       	std	Z+4, r4	; 0x04
   1b91e:	55 82       	std	Z+5, r5	; 0x05
   1b920:	66 82       	std	Z+6, r6	; 0x06
   1b922:	77 82       	std	Z+7, r7	; 0x07
   1b924:	8f ef       	ldi	r24, 0xFF	; 255
   1b926:	95 e3       	ldi	r25, 0x35	; 53
   1b928:	a0 e0       	ldi	r26, 0x00	; 0
   1b92a:	81 83       	std	Z+1, r24	; 0x01
   1b92c:	92 83       	std	Z+2, r25	; 0x02
   1b92e:	a3 83       	std	Z+3, r26	; 0x03
   1b930:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
    return(1);
   1b934:	01 e0       	ldi	r16, 0x01	; 1
   1b936:	10 e0       	ldi	r17, 0x00	; 0
}
   1b938:	c8 01       	movw	r24, r16
   1b93a:	cc 5e       	subi	r28, 0xEC	; 236
   1b93c:	de 4f       	sbci	r29, 0xFE	; 254
   1b93e:	e2 e1       	ldi	r30, 0x12	; 18
   1b940:	0c 94 c0 e8 	jmp	0x1d180	; 0x1d180 <__epilogue_restores__>

0001b944 <lif_add_lif_file>:
/// @param[in] userfile: LIF mage name copy file from
/// @return size of data written into to LIF image, or -1 on error
/// FIXME assumes 256 byte secors
MEMSPACE
long lif_add_lif_file(char *lifimagename, char *lifname, char *userfile)
{
   1b944:	2f 92       	push	r2
   1b946:	3f 92       	push	r3
   1b948:	4f 92       	push	r4
   1b94a:	5f 92       	push	r5
   1b94c:	6f 92       	push	r6
   1b94e:	8f 92       	push	r8
   1b950:	9f 92       	push	r9
   1b952:	af 92       	push	r10
   1b954:	bf 92       	push	r11
   1b956:	cf 92       	push	r12
   1b958:	df 92       	push	r13
   1b95a:	ef 92       	push	r14
   1b95c:	ff 92       	push	r15
   1b95e:	0f 93       	push	r16
   1b960:	1f 93       	push	r17
   1b962:	cf 93       	push	r28
   1b964:	df 93       	push	r29
   1b966:	cd b7       	in	r28, 0x3d	; 61
   1b968:	de b7       	in	r29, 0x3e	; 62
   1b96a:	cd 51       	subi	r28, 0x1D	; 29
   1b96c:	d1 40       	sbci	r29, 0x01	; 1
   1b96e:	0f b6       	in	r0, 0x3f	; 63
   1b970:	f8 94       	cli
   1b972:	de bf       	out	0x3e, r29	; 62
   1b974:	0f be       	out	0x3f, r0	; 63
   1b976:	cd bf       	out	0x3d, r28	; 61
   1b978:	5c 01       	movw	r10, r24
   1b97a:	7b 01       	movw	r14, r22
   1b97c:	4a 01       	movw	r8, r20
    long offset, uoffset, start, bytes;
    int i, size;

    uint8_t buf[LIF_SECTOR_SIZE+4];

    if(!*lifimagename)
   1b97e:	dc 01       	movw	r26, r24
   1b980:	8c 91       	ld	r24, X
   1b982:	81 11       	cpse	r24, r1
   1b984:	03 c0       	rjmp	.+6      	; 0x1b98c <lif_add_lif_file+0x48>
    {
        printf("lif_add: lifimagename is empty\n");
   1b986:	8f ed       	ldi	r24, 0xDF	; 223
   1b988:	95 e3       	ldi	r25, 0x35	; 53
   1b98a:	06 c0       	rjmp	.+12     	; 0x1b998 <lif_add_lif_file+0x54>
        return(-1);
    }
    if(!*lifname)
   1b98c:	db 01       	movw	r26, r22
   1b98e:	8c 91       	ld	r24, X
   1b990:	81 11       	cpse	r24, r1
   1b992:	0b c0       	rjmp	.+22     	; 0x1b9aa <lif_add_lif_file+0x66>
    {
        printf("lif_add: lifname is empty\n");
   1b994:	84 ec       	ldi	r24, 0xC4	; 196
   1b996:	95 e3       	ldi	r25, 0x35	; 53
   1b998:	a0 e0       	ldi	r26, 0x00	; 0
   1b99a:	ed b7       	in	r30, 0x3d	; 61
   1b99c:	fe b7       	in	r31, 0x3e	; 62
   1b99e:	81 83       	std	Z+1, r24	; 0x01
   1b9a0:	92 83       	std	Z+2, r25	; 0x02
   1b9a2:	a3 83       	std	Z+3, r26	; 0x03
   1b9a4:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
   1b9a8:	25 c1       	rjmp	.+586    	; 0x1bbf4 <lif_add_lif_file+0x2b0>
        return(-1);
    }
    if(!*userfile)
   1b9aa:	da 01       	movw	r26, r20
   1b9ac:	8c 91       	ld	r24, X
   1b9ae:	81 11       	cpse	r24, r1
   1b9b0:	03 c0       	rjmp	.+6      	; 0x1b9b8 <lif_add_lif_file+0x74>
    {
        printf("lif_add: userfile is empty\n");
   1b9b2:	88 ea       	ldi	r24, 0xA8	; 168
   1b9b4:	95 e3       	ldi	r25, 0x35	; 53
   1b9b6:	f0 cf       	rjmp	.-32     	; 0x1b998 <lif_add_lif_file+0x54>
        return(-1);
    }

    if(debuglevel & LIF_DEBUG)
   1b9b8:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1b9bc:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1b9c0:	92 ff       	sbrs	r25, 2
   1b9c2:	10 c0       	rjmp	.+32     	; 0x1b9e4 <lif_add_lif_file+0xa0>
        printf("LIF image:[%s], LIF name:[%s], user file:[%s]\n",
   1b9c4:	ed b7       	in	r30, 0x3d	; 61
   1b9c6:	fe b7       	in	r31, 0x3e	; 62
   1b9c8:	51 87       	std	Z+9, r21	; 0x09
   1b9ca:	40 87       	std	Z+8, r20	; 0x08
   1b9cc:	77 83       	std	Z+7, r23	; 0x07
   1b9ce:	66 83       	std	Z+6, r22	; 0x06
   1b9d0:	b5 82       	std	Z+5, r11	; 0x05
   1b9d2:	a4 82       	std	Z+4, r10	; 0x04
   1b9d4:	89 e7       	ldi	r24, 0x79	; 121
   1b9d6:	95 e3       	ldi	r25, 0x35	; 53
   1b9d8:	a0 e0       	ldi	r26, 0x00	; 0
   1b9da:	81 83       	std	Z+1, r24	; 0x01
   1b9dc:	92 83       	std	Z+2, r25	; 0x02
   1b9de:	a3 83       	std	Z+3, r26	; 0x03
   1b9e0:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
            lifimagename, lifname, userfile);

// open  userfile as LIF image
    ULIF = lif_open_volume(userfile,"rb+");
   1b9e4:	66 ef       	ldi	r22, 0xF6	; 246
   1b9e6:	78 e0       	ldi	r23, 0x08	; 8
   1b9e8:	c4 01       	movw	r24, r8
   1b9ea:	0e 94 29 d2 	call	0x1a452	; 0x1a452 <lif_open_volume>
   1b9ee:	6c 01       	movw	r12, r24
    if(ULIF == NULL)
   1b9f0:	00 97       	sbiw	r24, 0x00	; 0
   1b9f2:	09 f4       	brne	.+2      	; 0x1b9f6 <lif_add_lif_file+0xb2>
   1b9f4:	ff c0       	rjmp	.+510    	; 0x1bbf4 <lif_add_lif_file+0x2b0>
        return(-1);

// find lif file in user image
    index = lif_find_file(ULIF, lifname);
   1b9f6:	b7 01       	movw	r22, r14
   1b9f8:	01 d8       	rcall	.-4094   	; 0x1a9fc <lif_find_file>
    if(index == -1)
   1b9fa:	01 96       	adiw	r24, 0x01	; 1
   1b9fc:	a1 f4       	brne	.+40     	; 0x1ba26 <lif_add_lif_file+0xe2>
    {
        printf("File not found:%s\n", lifname);
   1b9fe:	ed b7       	in	r30, 0x3d	; 61
   1ba00:	fe b7       	in	r31, 0x3e	; 62
   1ba02:	f5 82       	std	Z+5, r15	; 0x05
   1ba04:	e4 82       	std	Z+4, r14	; 0x04
   1ba06:	86 e6       	ldi	r24, 0x66	; 102
   1ba08:	95 e3       	ldi	r25, 0x35	; 53
   1ba0a:	a0 e0       	ldi	r26, 0x00	; 0
   1ba0c:	81 83       	std	Z+1, r24	; 0x01
   1ba0e:	92 83       	std	Z+2, r25	; 0x02
   1ba10:	a3 83       	std	Z+3, r26	; 0x03
   1ba12:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1ba16:	c6 01       	movw	r24, r12
   1ba18:	0e 94 6c cb 	call	0x196d8	; 0x196d8 <lif_close_volume>
    index = lif_find_file(ULIF, lifname);
    if(index == -1)
    {
        printf("File not found:%s\n", lifname);
        lif_closedir(ULIF);
        return(0);
   1ba1c:	60 e0       	ldi	r22, 0x00	; 0
   1ba1e:	70 e0       	ldi	r23, 0x00	; 0
   1ba20:	80 e0       	ldi	r24, 0x00	; 0
   1ba22:	90 e0       	ldi	r25, 0x00	; 0
   1ba24:	ff c0       	rjmp	.+510    	; 0x1bc24 <lif_add_lif_file+0x2e0>
    }

    LIF = lif_open_volume(lifimagename,"rb+");
   1ba26:	66 ef       	ldi	r22, 0xF6	; 246
   1ba28:	78 e0       	ldi	r23, 0x08	; 8
   1ba2a:	c5 01       	movw	r24, r10
   1ba2c:	0e 94 29 d2 	call	0x1a452	; 0x1a452 <lif_open_volume>
   1ba30:	7c 01       	movw	r14, r24
    if(LIF == NULL)
   1ba32:	00 97       	sbiw	r24, 0x00	; 0
   1ba34:	09 f4       	brne	.+2      	; 0x1ba38 <lif_add_lif_file+0xf4>
   1ba36:	de c0       	rjmp	.+444    	; 0x1bbf4 <lif_add_lif_file+0x2b0>
        return(-1);

// Now find a new free record that is big enough
    index = lif_newdir(LIF, ULIF->DIR.FileSectors);
   1ba38:	f6 01       	movw	r30, r12
   1ba3a:	e0 5a       	subi	r30, 0xA0	; 160
   1ba3c:	ff 4f       	sbci	r31, 0xFF	; 255
   1ba3e:	40 81       	ld	r20, Z
   1ba40:	51 81       	ldd	r21, Z+1	; 0x01
   1ba42:	62 81       	ldd	r22, Z+2	; 0x02
   1ba44:	73 81       	ldd	r23, Z+3	; 0x03
   1ba46:	0e 94 c9 d0 	call	0x1a192	; 0x1a192 <lif_newdir>
   1ba4a:	ca 5e       	subi	r28, 0xEA	; 234
   1ba4c:	de 4f       	sbci	r29, 0xFE	; 254
   1ba4e:	99 83       	std	Y+1, r25	; 0x01
   1ba50:	88 83       	st	Y, r24
   1ba52:	c6 51       	subi	r28, 0x16	; 22
   1ba54:	d1 40       	sbci	r29, 0x01	; 1
    if(index == -1)
   1ba56:	01 96       	adiw	r24, 0x01	; 1
   1ba58:	79 f4       	brne	.+30     	; 0x1ba78 <lif_add_lif_file+0x134>
    {
        printf("LIF image:[%s], not enough free space for:[%s]\n",
   1ba5a:	ed b7       	in	r30, 0x3d	; 61
   1ba5c:	fe b7       	in	r31, 0x3e	; 62
   1ba5e:	97 82       	std	Z+7, r9	; 0x07
   1ba60:	86 82       	std	Z+6, r8	; 0x06
   1ba62:	b5 82       	std	Z+5, r11	; 0x05
   1ba64:	a4 82       	std	Z+4, r10	; 0x04
   1ba66:	86 e3       	ldi	r24, 0x36	; 54
   1ba68:	95 e3       	ldi	r25, 0x35	; 53
   1ba6a:	a0 e0       	ldi	r26, 0x00	; 0
   1ba6c:	81 83       	std	Z+1, r24	; 0x01
   1ba6e:	92 83       	std	Z+2, r25	; 0x02
   1ba70:	a3 83       	std	Z+3, r26	; 0x03
   1ba72:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
   1ba76:	a8 c0       	rjmp	.+336    	; 0x1bbc8 <lif_add_lif_file+0x284>
        lif_closedir(ULIF);
        return(-1);
    }

// Save start sector
    start = LIF->DIR.FileStartSector;
   1ba78:	c7 01       	movw	r24, r14
   1ba7a:	84 5a       	subi	r24, 0xA4	; 164
   1ba7c:	9f 4f       	sbci	r25, 0xFF	; 255
   1ba7e:	dc 01       	movw	r26, r24
   1ba80:	4d 91       	ld	r20, X+
   1ba82:	5d 91       	ld	r21, X+
   1ba84:	6d 91       	ld	r22, X+
   1ba86:	7c 91       	ld	r23, X
   1ba88:	13 97       	sbiw	r26, 0x03	; 3

// Copy user image directory record to master image directory record
    LIF->DIR = ULIF->DIR;
   1ba8a:	21 e2       	ldi	r18, 0x21	; 33
   1ba8c:	f6 01       	movw	r30, r12
   1ba8e:	e1 5b       	subi	r30, 0xB1	; 177
   1ba90:	ff 4f       	sbci	r31, 0xFF	; 255
   1ba92:	1d 97       	sbiw	r26, 0x0d	; 13
   1ba94:	01 90       	ld	r0, Z+
   1ba96:	0d 92       	st	X+, r0
   1ba98:	2a 95       	dec	r18
   1ba9a:	e1 f7       	brne	.-8      	; 0x1ba94 <lif_add_lif_file+0x150>

// Restore FileStartSector
    LIF->DIR.FileStartSector = start;
   1ba9c:	fc 01       	movw	r30, r24
   1ba9e:	40 83       	st	Z, r20
   1baa0:	51 83       	std	Z+1, r21	; 0x01
   1baa2:	62 83       	std	Z+2, r22	; 0x02
   1baa4:	73 83       	std	Z+3, r23	; 0x03

// Master lif image file start in bytes
    offset  = LIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
   1baa6:	b6 2f       	mov	r27, r22
   1baa8:	a5 2f       	mov	r26, r21
   1baaa:	94 2f       	mov	r25, r20
   1baac:	88 27       	eor	r24, r24
   1baae:	c2 5f       	subi	r28, 0xF2	; 242
   1bab0:	de 4f       	sbci	r29, 0xFE	; 254
   1bab2:	88 83       	st	Y, r24
   1bab4:	99 83       	std	Y+1, r25	; 0x01
   1bab6:	aa 83       	std	Y+2, r26	; 0x02
   1bab8:	bb 83       	std	Y+3, r27	; 0x03
   1baba:	ce 50       	subi	r28, 0x0E	; 14
   1babc:	d1 40       	sbci	r29, 0x01	; 1
// User lif image file start in bytes
    uoffset = ULIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
   1babe:	f6 01       	movw	r30, r12
   1bac0:	e4 5a       	subi	r30, 0xA4	; 164
   1bac2:	ff 4f       	sbci	r31, 0xFF	; 255
   1bac4:	80 81       	ld	r24, Z
   1bac6:	91 81       	ldd	r25, Z+1	; 0x01
   1bac8:	a2 81       	ldd	r26, Z+2	; 0x02
   1baca:	b3 81       	ldd	r27, Z+3	; 0x03
   1bacc:	22 27       	eor	r18, r18
   1bace:	38 2f       	mov	r19, r24
   1bad0:	49 2f       	mov	r20, r25
   1bad2:	5a 2f       	mov	r21, r26
   1bad4:	ce 5e       	subi	r28, 0xEE	; 238
   1bad6:	de 4f       	sbci	r29, 0xFE	; 254
   1bad8:	28 83       	st	Y, r18
   1bada:	39 83       	std	Y+1, r19	; 0x01
   1badc:	4a 83       	std	Y+2, r20	; 0x02
   1bade:	5b 83       	std	Y+3, r21	; 0x03
   1bae0:	c2 51       	subi	r28, 0x12	; 18
   1bae2:	d1 40       	sbci	r29, 0x01	; 1
    bytes = 0;
// Copy file data
    for(i=0;i<(int)LIF->DIR.FileSectors;++i)
   1bae4:	21 2c       	mov	r2, r1
   1bae6:	31 2c       	mov	r3, r1

// Master lif image file start in bytes
    offset  = LIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
// User lif image file start in bytes
    uoffset = ULIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
    bytes = 0;
   1bae8:	81 2c       	mov	r8, r1
   1baea:	91 2c       	mov	r9, r1
   1baec:	54 01       	movw	r10, r8
// Copy file data
    for(i=0;i<(int)LIF->DIR.FileSectors;++i)
   1baee:	a7 01       	movw	r20, r14
   1baf0:	40 5a       	subi	r20, 0xA0	; 160
   1baf2:	5f 4f       	sbci	r21, 0xFF	; 255
   1baf4:	c4 5e       	subi	r28, 0xE4	; 228
   1baf6:	de 4f       	sbci	r29, 0xFE	; 254
   1baf8:	59 83       	std	Y+1, r21	; 0x01
   1bafa:	48 83       	st	Y, r20
   1bafc:	cc 51       	subi	r28, 0x1C	; 28
   1bafe:	d1 40       	sbci	r29, 0x01	; 1
            return(-1);
        }
        offset += (long) LIF_SECTOR_SIZE;
        uoffset += (long) LIF_SECTOR_SIZE;
        bytes += (long) LIF_SECTOR_SIZE;
        printf("\tWrote: %8ld\r", bytes);
   1bb00:	88 e2       	ldi	r24, 0x28	; 40
   1bb02:	95 e3       	ldi	r25, 0x35	; 53
   1bb04:	2c 01       	movw	r4, r24
   1bb06:	61 2c       	mov	r6, r1
    offset  = LIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
// User lif image file start in bytes
    uoffset = ULIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
    bytes = 0;
// Copy file data
    for(i=0;i<(int)LIF->DIR.FileSectors;++i)
   1bb08:	27 c0       	rjmp	.+78     	; 0x1bb58 <lif_add_lif_file+0x214>
            lif_closedir(ULIF);
            return(-1);
        }

// Write
        size = lif_write(LIF, buf, offset, LIF_SECTOR_SIZE);
   1bb0a:	00 e0       	ldi	r16, 0x00	; 0
   1bb0c:	11 e0       	ldi	r17, 0x01	; 1
   1bb0e:	c8 5e       	subi	r28, 0xE8	; 232
   1bb10:	de 4f       	sbci	r29, 0xFE	; 254
   1bb12:	28 81       	ld	r18, Y
   1bb14:	39 81       	ldd	r19, Y+1	; 0x01
   1bb16:	4a 81       	ldd	r20, Y+2	; 0x02
   1bb18:	5b 81       	ldd	r21, Y+3	; 0x03
   1bb1a:	c8 51       	subi	r28, 0x18	; 24
   1bb1c:	d1 40       	sbci	r29, 0x01	; 1
   1bb1e:	be 01       	movw	r22, r28
   1bb20:	66 5f       	subi	r22, 0xF6	; 246
   1bb22:	7f 4f       	sbci	r23, 0xFF	; 255
   1bb24:	c7 01       	movw	r24, r14
   1bb26:	0e 94 0f c3 	call	0x1861e	; 0x1861e <lif_write>
        if(size < LIF_SECTOR_SIZE)
   1bb2a:	8f 3f       	cpi	r24, 0xFF	; 255
   1bb2c:	91 05       	cpc	r25, r1
   1bb2e:	09 f0       	breq	.+2      	; 0x1bb32 <lif_add_lif_file+0x1ee>
   1bb30:	0c f4       	brge	.+2      	; 0x1bb34 <lif_add_lif_file+0x1f0>
   1bb32:	4a c0       	rjmp	.+148    	; 0x1bbc8 <lif_add_lif_file+0x284>
            lif_closedir(ULIF);
            return(-1);
        }
        offset += (long) LIF_SECTOR_SIZE;
        uoffset += (long) LIF_SECTOR_SIZE;
        bytes += (long) LIF_SECTOR_SIZE;
   1bb34:	5f ef       	ldi	r21, 0xFF	; 255
   1bb36:	95 1a       	sub	r9, r21
   1bb38:	a5 0a       	sbc	r10, r21
   1bb3a:	b5 0a       	sbc	r11, r21
        printf("\tWrote: %8ld\r", bytes);
   1bb3c:	ed b7       	in	r30, 0x3d	; 61
   1bb3e:	fe b7       	in	r31, 0x3e	; 62
   1bb40:	84 82       	std	Z+4, r8	; 0x04
   1bb42:	95 82       	std	Z+5, r9	; 0x05
   1bb44:	a6 82       	std	Z+6, r10	; 0x06
   1bb46:	b7 82       	std	Z+7, r11	; 0x07
   1bb48:	41 82       	std	Z+1, r4	; 0x01
   1bb4a:	52 82       	std	Z+2, r5	; 0x02
   1bb4c:	63 82       	std	Z+3, r6	; 0x03
   1bb4e:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
    offset  = LIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
// User lif image file start in bytes
    uoffset = ULIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
    bytes = 0;
// Copy file data
    for(i=0;i<(int)LIF->DIR.FileSectors;++i)
   1bb52:	ff ef       	ldi	r31, 0xFF	; 255
   1bb54:	2f 1a       	sub	r2, r31
   1bb56:	3f 0a       	sbc	r3, r31
   1bb58:	ce 5e       	subi	r28, 0xEE	; 238
   1bb5a:	de 4f       	sbci	r29, 0xFE	; 254
   1bb5c:	28 81       	ld	r18, Y
   1bb5e:	39 81       	ldd	r19, Y+1	; 0x01
   1bb60:	4a 81       	ldd	r20, Y+2	; 0x02
   1bb62:	5b 81       	ldd	r21, Y+3	; 0x03
   1bb64:	c2 51       	subi	r28, 0x12	; 18
   1bb66:	d1 40       	sbci	r29, 0x01	; 1
   1bb68:	28 0d       	add	r18, r8
   1bb6a:	39 1d       	adc	r19, r9
   1bb6c:	4a 1d       	adc	r20, r10
   1bb6e:	5b 1d       	adc	r21, r11
   1bb70:	c2 5f       	subi	r28, 0xF2	; 242
   1bb72:	de 4f       	sbci	r29, 0xFE	; 254
   1bb74:	88 81       	ld	r24, Y
   1bb76:	99 81       	ldd	r25, Y+1	; 0x01
   1bb78:	aa 81       	ldd	r26, Y+2	; 0x02
   1bb7a:	bb 81       	ldd	r27, Y+3	; 0x03
   1bb7c:	ce 50       	subi	r28, 0x0E	; 14
   1bb7e:	d1 40       	sbci	r29, 0x01	; 1
   1bb80:	88 0d       	add	r24, r8
   1bb82:	99 1d       	adc	r25, r9
   1bb84:	aa 1d       	adc	r26, r10
   1bb86:	bb 1d       	adc	r27, r11
   1bb88:	c8 5e       	subi	r28, 0xE8	; 232
   1bb8a:	de 4f       	sbci	r29, 0xFE	; 254
   1bb8c:	88 83       	st	Y, r24
   1bb8e:	99 83       	std	Y+1, r25	; 0x01
   1bb90:	aa 83       	std	Y+2, r26	; 0x02
   1bb92:	bb 83       	std	Y+3, r27	; 0x03
   1bb94:	c8 51       	subi	r28, 0x18	; 24
   1bb96:	d1 40       	sbci	r29, 0x01	; 1
   1bb98:	c4 5e       	subi	r28, 0xE4	; 228
   1bb9a:	de 4f       	sbci	r29, 0xFE	; 254
   1bb9c:	a8 81       	ld	r26, Y
   1bb9e:	b9 81       	ldd	r27, Y+1	; 0x01
   1bba0:	cc 51       	subi	r28, 0x1C	; 28
   1bba2:	d1 40       	sbci	r29, 0x01	; 1
   1bba4:	8d 91       	ld	r24, X+
   1bba6:	9c 91       	ld	r25, X
   1bba8:	28 16       	cp	r2, r24
   1bbaa:	39 06       	cpc	r3, r25
   1bbac:	94 f4       	brge	.+36     	; 0x1bbd2 <lif_add_lif_file+0x28e>
    {
// Read
        size = lif_read(ULIF, buf, uoffset, LIF_SECTOR_SIZE);
   1bbae:	00 e0       	ldi	r16, 0x00	; 0
   1bbb0:	11 e0       	ldi	r17, 0x01	; 1
   1bbb2:	be 01       	movw	r22, r28
   1bbb4:	66 5f       	subi	r22, 0xF6	; 246
   1bbb6:	7f 4f       	sbci	r23, 0xFF	; 255
   1bbb8:	c6 01       	movw	r24, r12
   1bbba:	0e 94 bc c2 	call	0x18578	; 0x18578 <lif_read>
        if(size < LIF_SECTOR_SIZE)
   1bbbe:	6f 3f       	cpi	r22, 0xFF	; 255
   1bbc0:	71 05       	cpc	r23, r1
   1bbc2:	11 f0       	breq	.+4      	; 0x1bbc8 <lif_add_lif_file+0x284>
   1bbc4:	0c f0       	brlt	.+2      	; 0x1bbc8 <lif_add_lif_file+0x284>
   1bbc6:	a1 cf       	rjmp	.-190    	; 0x1bb0a <lif_add_lif_file+0x1c6>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1bbc8:	c7 01       	movw	r24, r14
   1bbca:	0e 94 6c cb 	call	0x196d8	; 0x196d8 <lif_close_volume>
   1bbce:	c6 01       	movw	r24, r12
   1bbd0:	0f c0       	rjmp	.+30     	; 0x1bbf0 <lif_add_lif_file+0x2ac>
   1bbd2:	c6 01       	movw	r24, r12
   1bbd4:	0e 94 6c cb 	call	0x196d8	; 0x196d8 <lif_close_volume>
        printf("\tWrote: %8ld\r", bytes);
    }
    lif_closedir(ULIF);

// Write directory record
    if( !lif_writedirindex(LIF,index))
   1bbd8:	ca 5e       	subi	r28, 0xEA	; 234
   1bbda:	de 4f       	sbci	r29, 0xFE	; 254
   1bbdc:	68 81       	ld	r22, Y
   1bbde:	79 81       	ldd	r23, Y+1	; 0x01
   1bbe0:	c6 51       	subi	r28, 0x16	; 22
   1bbe2:	d1 40       	sbci	r29, 0x01	; 1
   1bbe4:	c7 01       	movw	r24, r14
   1bbe6:	0e 94 61 cc 	call	0x198c2	; 0x198c2 <lif_writedirindex>
   1bbea:	89 2b       	or	r24, r25
   1bbec:	41 f4       	brne	.+16     	; 0x1bbfe <lif_add_lif_file+0x2ba>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1bbee:	c7 01       	movw	r24, r14
   1bbf0:	0e 94 6c cb 	call	0x196d8	; 0x196d8 <lif_close_volume>

// Write directory record
    if( !lif_writedirindex(LIF,index))
    {
        lif_closedir(LIF);
        return(-1);
   1bbf4:	6f ef       	ldi	r22, 0xFF	; 255
   1bbf6:	7f ef       	ldi	r23, 0xFF	; 255
   1bbf8:	8f ef       	ldi	r24, 0xFF	; 255
   1bbfa:	9f ef       	ldi	r25, 0xFF	; 255
   1bbfc:	13 c0       	rjmp	.+38     	; 0x1bc24 <lif_add_lif_file+0x2e0>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1bbfe:	c7 01       	movw	r24, r14
   1bc00:	0e 94 6c cb 	call	0x196d8	; 0x196d8 <lif_close_volume>
    {
        lif_closedir(LIF);
        return(-1);
    }
    lif_closedir(LIF);
    printf("\tWrote: %8ld\n", bytes);
   1bc04:	ed b7       	in	r30, 0x3d	; 61
   1bc06:	fe b7       	in	r31, 0x3e	; 62
   1bc08:	84 82       	std	Z+4, r8	; 0x04
   1bc0a:	95 82       	std	Z+5, r9	; 0x05
   1bc0c:	a6 82       	std	Z+6, r10	; 0x06
   1bc0e:	b7 82       	std	Z+7, r11	; 0x07
   1bc10:	8a e1       	ldi	r24, 0x1A	; 26
   1bc12:	95 e3       	ldi	r25, 0x35	; 53
   1bc14:	a0 e0       	ldi	r26, 0x00	; 0
   1bc16:	81 83       	std	Z+1, r24	; 0x01
   1bc18:	92 83       	std	Z+2, r25	; 0x02
   1bc1a:	a3 83       	std	Z+3, r26	; 0x03
   1bc1c:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
    return(bytes);
   1bc20:	b4 01       	movw	r22, r8
   1bc22:	c5 01       	movw	r24, r10
}
   1bc24:	c3 5e       	subi	r28, 0xE3	; 227
   1bc26:	de 4f       	sbci	r29, 0xFE	; 254
   1bc28:	0f b6       	in	r0, 0x3f	; 63
   1bc2a:	f8 94       	cli
   1bc2c:	de bf       	out	0x3e, r29	; 62
   1bc2e:	0f be       	out	0x3f, r0	; 63
   1bc30:	cd bf       	out	0x3d, r28	; 61
   1bc32:	df 91       	pop	r29
   1bc34:	cf 91       	pop	r28
   1bc36:	1f 91       	pop	r17
   1bc38:	0f 91       	pop	r16
   1bc3a:	ff 90       	pop	r15
   1bc3c:	ef 90       	pop	r14
   1bc3e:	df 90       	pop	r13
   1bc40:	cf 90       	pop	r12
   1bc42:	bf 90       	pop	r11
   1bc44:	af 90       	pop	r10
   1bc46:	9f 90       	pop	r9
   1bc48:	8f 90       	pop	r8
   1bc4a:	6f 90       	pop	r6
   1bc4c:	5f 90       	pop	r5
   1bc4e:	4f 90       	pop	r4
   1bc50:	3f 90       	pop	r3
   1bc52:	2f 90       	pop	r2
   1bc54:	08 95       	ret

0001bc56 <lif_del_file>:
/// @param[in] lifimagename: LIF image name
/// @param[in] lifname: LIF file name
/// @return 1 if deleted, 0 if not found, -1 error
MEMSPACE
int lif_del_file(char *lifimagename, char *lifname)
{
   1bc56:	ef 92       	push	r14
   1bc58:	ff 92       	push	r15
   1bc5a:	0f 93       	push	r16
   1bc5c:	1f 93       	push	r17
   1bc5e:	cf 93       	push	r28
   1bc60:	df 93       	push	r29
   1bc62:	ad b7       	in	r26, 0x3d	; 61
   1bc64:	be b7       	in	r27, 0x3e	; 62
   1bc66:	17 97       	sbiw	r26, 0x07	; 7
   1bc68:	0f b6       	in	r0, 0x3f	; 63
   1bc6a:	f8 94       	cli
   1bc6c:	be bf       	out	0x3e, r27	; 62
   1bc6e:	0f be       	out	0x3f, r0	; 63
   1bc70:	ad bf       	out	0x3d, r26	; 61
   1bc72:	7c 01       	movw	r14, r24
   1bc74:	8b 01       	movw	r16, r22
    lif_t *LIF;
    int index;

    if(!*lifimagename)
   1bc76:	fc 01       	movw	r30, r24
   1bc78:	80 81       	ld	r24, Z
   1bc7a:	81 11       	cpse	r24, r1
   1bc7c:	03 c0       	rjmp	.+6      	; 0x1bc84 <lif_del_file+0x2e>
    {
        printf("lif_del_file: lifimagename is empty\n");
   1bc7e:	85 ef       	ldi	r24, 0xF5	; 245
   1bc80:	94 e3       	ldi	r25, 0x34	; 52
   1bc82:	06 c0       	rjmp	.+12     	; 0x1bc90 <lif_del_file+0x3a>
        return(-1);
    }
    if(!*lifname)
   1bc84:	fb 01       	movw	r30, r22
   1bc86:	80 81       	ld	r24, Z
   1bc88:	81 11       	cpse	r24, r1
   1bc8a:	0b c0       	rjmp	.+22     	; 0x1bca2 <lif_del_file+0x4c>
    {
        printf("lif_del_file: lifname is empty\n");
   1bc8c:	85 ed       	ldi	r24, 0xD5	; 213
   1bc8e:	94 e3       	ldi	r25, 0x34	; 52
   1bc90:	a0 e0       	ldi	r26, 0x00	; 0
   1bc92:	ed b7       	in	r30, 0x3d	; 61
   1bc94:	fe b7       	in	r31, 0x3e	; 62
   1bc96:	81 83       	std	Z+1, r24	; 0x01
   1bc98:	92 83       	std	Z+2, r25	; 0x02
   1bc9a:	a3 83       	std	Z+3, r26	; 0x03
   1bc9c:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
   1bca0:	68 c0       	rjmp	.+208    	; 0x1bd72 <lif_del_file+0x11c>
        return(-1);
    }
    if(debuglevel & LIF_DEBUG)
   1bca2:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1bca6:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1bcaa:	92 ff       	sbrs	r25, 2
   1bcac:	0e c0       	rjmp	.+28     	; 0x1bcca <lif_del_file+0x74>
        printf("LIF image:[%s], LIF name:[%s]\n",
   1bcae:	ed b7       	in	r30, 0x3d	; 61
   1bcb0:	fe b7       	in	r31, 0x3e	; 62
   1bcb2:	77 83       	std	Z+7, r23	; 0x07
   1bcb4:	66 83       	std	Z+6, r22	; 0x06
   1bcb6:	f5 82       	std	Z+5, r15	; 0x05
   1bcb8:	e4 82       	std	Z+4, r14	; 0x04
   1bcba:	86 eb       	ldi	r24, 0xB6	; 182
   1bcbc:	94 e3       	ldi	r25, 0x34	; 52
   1bcbe:	a0 e0       	ldi	r26, 0x00	; 0
   1bcc0:	81 83       	std	Z+1, r24	; 0x01
   1bcc2:	92 83       	std	Z+2, r25	; 0x02
   1bcc4:	a3 83       	std	Z+3, r26	; 0x03
   1bcc6:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
            lifimagename, lifname);

    LIF = lif_open_volume(lifimagename,"rb+");
   1bcca:	66 ef       	ldi	r22, 0xF6	; 246
   1bccc:	78 e0       	ldi	r23, 0x08	; 8
   1bcce:	c7 01       	movw	r24, r14
   1bcd0:	0e 94 29 d2 	call	0x1a452	; 0x1a452 <lif_open_volume>
   1bcd4:	ec 01       	movw	r28, r24
    if(LIF == NULL)
   1bcd6:	00 97       	sbiw	r24, 0x00	; 0
   1bcd8:	09 f4       	brne	.+2      	; 0x1bcdc <lif_del_file+0x86>
   1bcda:	4b c0       	rjmp	.+150    	; 0x1bd72 <lif_del_file+0x11c>
        return(-1);

// Now find file record
    index = lif_find_file(LIF, lifname);
   1bcdc:	b8 01       	movw	r22, r16
   1bcde:	0e 94 fe d4 	call	0x1a9fc	; 0x1a9fc <lif_find_file>
    if(index == -1)
   1bce2:	8f 3f       	cpi	r24, 0xFF	; 255
   1bce4:	ff ef       	ldi	r31, 0xFF	; 255
   1bce6:	9f 07       	cpc	r25, r31
   1bce8:	a1 f4       	brne	.+40     	; 0x1bd12 <lif_del_file+0xbc>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1bcea:	ce 01       	movw	r24, r28
   1bcec:	0e 94 6c cb 	call	0x196d8	; 0x196d8 <lif_close_volume>
// Now find file record
    index = lif_find_file(LIF, lifname);
    if(index == -1)
    {
        lif_closedir(LIF);
        printf("LIF image:[%s] lif name:[%s] not found\n", lifimagename, lifname);
   1bcf0:	ed b7       	in	r30, 0x3d	; 61
   1bcf2:	fe b7       	in	r31, 0x3e	; 62
   1bcf4:	17 83       	std	Z+7, r17	; 0x07
   1bcf6:	06 83       	std	Z+6, r16	; 0x06
   1bcf8:	f5 82       	std	Z+5, r15	; 0x05
   1bcfa:	e4 82       	std	Z+4, r14	; 0x04
   1bcfc:	8e e8       	ldi	r24, 0x8E	; 142
   1bcfe:	94 e3       	ldi	r25, 0x34	; 52
   1bd00:	a0 e0       	ldi	r26, 0x00	; 0
   1bd02:	81 83       	std	Z+1, r24	; 0x01
   1bd04:	92 83       	std	Z+2, r25	; 0x02
   1bd06:	a3 83       	std	Z+3, r26	; 0x03
   1bd08:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
        return(0);
   1bd0c:	80 e0       	ldi	r24, 0x00	; 0
   1bd0e:	90 e0       	ldi	r25, 0x00	; 0
   1bd10:	32 c0       	rjmp	.+100    	; 0x1bd76 <lif_del_file+0x120>
    }

// IF the next record is EOF then update EOF
    if(index >= LIF->EOFindex-1)
   1bd12:	2a a1       	ldd	r18, Y+34	; 0x22
   1bd14:	3b a1       	ldd	r19, Y+35	; 0x23
   1bd16:	21 50       	subi	r18, 0x01	; 1
   1bd18:	31 09       	sbc	r19, r1
   1bd1a:	fe 01       	movw	r30, r28
   1bd1c:	e6 5a       	subi	r30, 0xA6	; 166
   1bd1e:	ff 4f       	sbci	r31, 0xFF	; 255
   1bd20:	82 17       	cp	r24, r18
   1bd22:	93 07       	cpc	r25, r19
   1bd24:	2c f0       	brlt	.+10     	; 0x1bd30 <lif_del_file+0xda>
        LIF->DIR.FileType = 0xffff;
   1bd26:	2f ef       	ldi	r18, 0xFF	; 255
   1bd28:	3f ef       	ldi	r19, 0xFF	; 255
   1bd2a:	31 83       	std	Z+1, r19	; 0x01
   1bd2c:	20 83       	st	Z, r18
   1bd2e:	02 c0       	rjmp	.+4      	; 0x1bd34 <lif_del_file+0xde>
    else
        LIF->DIR.FileType = 0;
   1bd30:	11 82       	std	Z+1, r1	; 0x01
   1bd32:	10 82       	st	Z, r1

// re-Write directory record
    if( !lif_writedirindex(LIF,index) )
   1bd34:	bc 01       	movw	r22, r24
   1bd36:	ce 01       	movw	r24, r28
   1bd38:	0e 94 61 cc 	call	0x198c2	; 0x198c2 <lif_writedirindex>
   1bd3c:	89 2b       	or	r24, r25
   1bd3e:	21 f4       	brne	.+8      	; 0x1bd48 <lif_del_file+0xf2>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1bd40:	ce 01       	movw	r24, r28
   1bd42:	0e 94 6c cb 	call	0x196d8	; 0x196d8 <lif_close_volume>
   1bd46:	15 c0       	rjmp	.+42     	; 0x1bd72 <lif_del_file+0x11c>
    {
        lif_closedir(LIF);
        return(-1);
    }

    lif_updatefree(LIF);
   1bd48:	ce 01       	movw	r24, r28
   1bd4a:	0e 94 d5 cc 	call	0x199aa	; 0x199aa <lif_updatefree>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1bd4e:	ce 01       	movw	r24, r28
   1bd50:	0e 94 6c cb 	call	0x196d8	; 0x196d8 <lif_close_volume>
    }

    lif_updatefree(LIF);

    lif_closedir(LIF);
    printf("Deleted: %10s\n", lifname);
   1bd54:	ed b7       	in	r30, 0x3d	; 61
   1bd56:	fe b7       	in	r31, 0x3e	; 62
   1bd58:	15 83       	std	Z+5, r17	; 0x05
   1bd5a:	04 83       	std	Z+4, r16	; 0x04
   1bd5c:	8f e7       	ldi	r24, 0x7F	; 127
   1bd5e:	94 e3       	ldi	r25, 0x34	; 52
   1bd60:	a0 e0       	ldi	r26, 0x00	; 0
   1bd62:	81 83       	std	Z+1, r24	; 0x01
   1bd64:	92 83       	std	Z+2, r25	; 0x02
   1bd66:	a3 83       	std	Z+3, r26	; 0x03
   1bd68:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>

    return(1);
   1bd6c:	81 e0       	ldi	r24, 0x01	; 1
   1bd6e:	90 e0       	ldi	r25, 0x00	; 0
   1bd70:	02 c0       	rjmp	.+4      	; 0x1bd76 <lif_del_file+0x120>
        printf("LIF image:[%s], LIF name:[%s]\n",
            lifimagename, lifname);

    LIF = lif_open_volume(lifimagename,"rb+");
    if(LIF == NULL)
        return(-1);
   1bd72:	8f ef       	ldi	r24, 0xFF	; 255
   1bd74:	9f ef       	ldi	r25, 0xFF	; 255

    lif_closedir(LIF);
    printf("Deleted: %10s\n", lifname);

    return(1);
}
   1bd76:	cd b7       	in	r28, 0x3d	; 61
   1bd78:	de b7       	in	r29, 0x3e	; 62
   1bd7a:	27 96       	adiw	r28, 0x07	; 7
   1bd7c:	e6 e0       	ldi	r30, 0x06	; 6
   1bd7e:	0c 94 cc e8 	jmp	0x1d198	; 0x1d198 <__epilogue_restores__+0x18>

0001bd82 <lif_rename_file>:
/// @param[in] oldlifname: old LIF file name
/// @param[in] newlifname: new LIF file name
/// @return 1 if renamed, 0 if not found, -1 error
MEMSPACE
int lif_rename_file(char *lifimagename, char *oldlifname, char *newlifname)
{
   1bd82:	a7 e0       	ldi	r26, 0x07	; 7
   1bd84:	b0 e0       	ldi	r27, 0x00	; 0
   1bd86:	e7 ec       	ldi	r30, 0xC7	; 199
   1bd88:	fe ed       	ldi	r31, 0xDE	; 222
   1bd8a:	0c 94 ac e8 	jmp	0x1d158	; 0x1d158 <__prologue_saves__+0x10>
   1bd8e:	6c 01       	movw	r12, r24
   1bd90:	8b 01       	movw	r16, r22
   1bd92:	7a 01       	movw	r14, r20
    int index;
    lif_t *LIF;

    if(!*lifimagename)
   1bd94:	fc 01       	movw	r30, r24
   1bd96:	80 81       	ld	r24, Z
   1bd98:	81 11       	cpse	r24, r1
   1bd9a:	03 c0       	rjmp	.+6      	; 0x1bda2 <lif_rename_file+0x20>
    {
        printf("lif_rename_file: lifimagename is empty\n");
   1bd9c:	87 e5       	ldi	r24, 0x57	; 87
   1bd9e:	94 e3       	ldi	r25, 0x34	; 52
   1bda0:	06 c0       	rjmp	.+12     	; 0x1bdae <lif_rename_file+0x2c>
        return(-1);
    }
    if(!*oldlifname)
   1bda2:	fb 01       	movw	r30, r22
   1bda4:	80 81       	ld	r24, Z
   1bda6:	81 11       	cpse	r24, r1
   1bda8:	0b c0       	rjmp	.+22     	; 0x1bdc0 <lif_rename_file+0x3e>
    {
        printf("lif_rename_file: old lifname is empty\n");
   1bdaa:	80 e3       	ldi	r24, 0x30	; 48
   1bdac:	94 e3       	ldi	r25, 0x34	; 52
   1bdae:	a0 e0       	ldi	r26, 0x00	; 0
   1bdb0:	ed b7       	in	r30, 0x3d	; 61
   1bdb2:	fe b7       	in	r31, 0x3e	; 62
   1bdb4:	81 83       	std	Z+1, r24	; 0x01
   1bdb6:	92 83       	std	Z+2, r25	; 0x02
   1bdb8:	a3 83       	std	Z+3, r26	; 0x03
   1bdba:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
   1bdbe:	58 c0       	rjmp	.+176    	; 0x1be70 <lif_rename_file+0xee>
        return(-1);
    }
    if(!*newlifname)
   1bdc0:	fa 01       	movw	r30, r20
   1bdc2:	80 81       	ld	r24, Z
   1bdc4:	81 11       	cpse	r24, r1
   1bdc6:	03 c0       	rjmp	.+6      	; 0x1bdce <lif_rename_file+0x4c>
    {
        printf("lif_rename_file: new lifname is empty\n");
   1bdc8:	89 e0       	ldi	r24, 0x09	; 9
   1bdca:	94 e3       	ldi	r25, 0x34	; 52
   1bdcc:	f0 cf       	rjmp	.-32     	; 0x1bdae <lif_rename_file+0x2c>
        return(-1);
    }

    if(!lif_checkname(newlifname))
   1bdce:	ca 01       	movw	r24, r20
   1bdd0:	0e 94 c6 c3 	call	0x1878c	; 0x1878c <lif_checkname>
   1bdd4:	89 2b       	or	r24, r25
   1bdd6:	19 f4       	brne	.+6      	; 0x1bdde <lif_rename_file+0x5c>
    {
        printf("lif_rename_file: new lifname contains bad characters\n");
   1bdd8:	83 ed       	ldi	r24, 0xD3	; 211
   1bdda:	93 e3       	ldi	r25, 0x33	; 51
   1bddc:	e8 cf       	rjmp	.-48     	; 0x1bdae <lif_rename_file+0x2c>
        return(-1);

    }

    LIF = lif_open_volume(lifimagename,"rb+");
   1bdde:	66 ef       	ldi	r22, 0xF6	; 246
   1bde0:	78 e0       	ldi	r23, 0x08	; 8
   1bde2:	c6 01       	movw	r24, r12
   1bde4:	0e 94 29 d2 	call	0x1a452	; 0x1a452 <lif_open_volume>
   1bde8:	ec 01       	movw	r28, r24
    if(LIF == NULL)
   1bdea:	00 97       	sbiw	r24, 0x00	; 0
   1bdec:	09 f4       	brne	.+2      	; 0x1bdf0 <lif_rename_file+0x6e>
   1bdee:	40 c0       	rjmp	.+128    	; 0x1be70 <lif_rename_file+0xee>
        return(-1);

// Now find file record
    index = lif_find_file(LIF, oldlifname);
   1bdf0:	b8 01       	movw	r22, r16
   1bdf2:	0e 94 fe d4 	call	0x1a9fc	; 0x1a9fc <lif_find_file>
   1bdf6:	5c 01       	movw	r10, r24
    if(index == -1)
   1bdf8:	01 96       	adiw	r24, 0x01	; 1
   1bdfa:	a1 f4       	brne	.+40     	; 0x1be24 <lif_rename_file+0xa2>
    {
        printf("lif_rename:[%s] lif name:[%s] not found\n", lifimagename, oldlifname);
   1bdfc:	ed b7       	in	r30, 0x3d	; 61
   1bdfe:	fe b7       	in	r31, 0x3e	; 62
   1be00:	17 83       	std	Z+7, r17	; 0x07
   1be02:	06 83       	std	Z+6, r16	; 0x06
   1be04:	d5 82       	std	Z+5, r13	; 0x05
   1be06:	c4 82       	std	Z+4, r12	; 0x04
   1be08:	8a ea       	ldi	r24, 0xAA	; 170
   1be0a:	93 e3       	ldi	r25, 0x33	; 51
   1be0c:	a0 e0       	ldi	r26, 0x00	; 0
   1be0e:	81 83       	std	Z+1, r24	; 0x01
   1be10:	92 83       	std	Z+2, r25	; 0x02
   1be12:	a3 83       	std	Z+3, r26	; 0x03
   1be14:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1be18:	ce 01       	movw	r24, r28
   1be1a:	0e 94 6c cb 	call	0x196d8	; 0x196d8 <lif_close_volume>
    index = lif_find_file(LIF, oldlifname);
    if(index == -1)
    {
        printf("lif_rename:[%s] lif name:[%s] not found\n", lifimagename, oldlifname);
        lif_closedir(LIF);
        return(0);
   1be1e:	80 e0       	ldi	r24, 0x00	; 0
   1be20:	90 e0       	ldi	r25, 0x00	; 0
   1be22:	28 c0       	rjmp	.+80     	; 0x1be74 <lif_rename_file+0xf2>
    }
    lif_fixname(LIF->DIR.filename, newlifname, 10);
   1be24:	4a e0       	ldi	r20, 0x0A	; 10
   1be26:	50 e0       	ldi	r21, 0x00	; 0
   1be28:	b7 01       	movw	r22, r14
   1be2a:	ce 01       	movw	r24, r28
   1be2c:	81 5b       	subi	r24, 0xB1	; 177
   1be2e:	9f 4f       	sbci	r25, 0xFF	; 255
   1be30:	0e 94 00 c4 	call	0x18800	; 0x18800 <lif_fixname>

// re-Write directory record
    if( !lif_writedirindex(LIF,index))
   1be34:	b5 01       	movw	r22, r10
   1be36:	ce 01       	movw	r24, r28
   1be38:	0e 94 61 cc 	call	0x198c2	; 0x198c2 <lif_writedirindex>
   1be3c:	89 2b       	or	r24, r25
   1be3e:	21 f4       	brne	.+8      	; 0x1be48 <lif_rename_file+0xc6>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1be40:	ce 01       	movw	r24, r28
   1be42:	0e 94 6c cb 	call	0x196d8	; 0x196d8 <lif_close_volume>
   1be46:	14 c0       	rjmp	.+40     	; 0x1be70 <lif_rename_file+0xee>
    if( !lif_writedirindex(LIF,index))
    {
        lif_closedir(LIF);
        return(-1);
    }
    printf("renamed: %10s to %10s\n", oldlifname,newlifname);
   1be48:	ed b7       	in	r30, 0x3d	; 61
   1be4a:	fe b7       	in	r31, 0x3e	; 62
   1be4c:	f7 82       	std	Z+7, r15	; 0x07
   1be4e:	e6 82       	std	Z+6, r14	; 0x06
   1be50:	15 83       	std	Z+5, r17	; 0x05
   1be52:	04 83       	std	Z+4, r16	; 0x04
   1be54:	83 e9       	ldi	r24, 0x93	; 147
   1be56:	93 e3       	ldi	r25, 0x33	; 51
   1be58:	a0 e0       	ldi	r26, 0x00	; 0
   1be5a:	81 83       	std	Z+1, r24	; 0x01
   1be5c:	92 83       	std	Z+2, r25	; 0x02
   1be5e:	a3 83       	std	Z+3, r26	; 0x03
   1be60:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1be64:	ce 01       	movw	r24, r28
   1be66:	0e 94 6c cb 	call	0x196d8	; 0x196d8 <lif_close_volume>
    }
    printf("renamed: %10s to %10s\n", oldlifname,newlifname);

    lif_closedir(LIF);

    return(1);
   1be6a:	81 e0       	ldi	r24, 0x01	; 1
   1be6c:	90 e0       	ldi	r25, 0x00	; 0
   1be6e:	02 c0       	rjmp	.+4      	; 0x1be74 <lif_rename_file+0xf2>

    }

    LIF = lif_open_volume(lifimagename,"rb+");
    if(LIF == NULL)
        return(-1);
   1be70:	8f ef       	ldi	r24, 0xFF	; 255
   1be72:	9f ef       	ldi	r25, 0xFF	; 255
    printf("renamed: %10s to %10s\n", oldlifname,newlifname);

    lif_closedir(LIF);

    return(1);
}
   1be74:	cd b7       	in	r28, 0x3d	; 61
   1be76:	de b7       	in	r29, 0x3e	; 62
   1be78:	27 96       	adiw	r28, 0x07	; 7
   1be7a:	ea e0       	ldi	r30, 0x0A	; 10
   1be7c:	0c 94 c8 e8 	jmp	0x1d190	; 0x1d190 <__epilogue_restores__+0x10>

0001be80 <lif_rename_volume>:
/// @param[in] lifimagename: LIF image name
/// @param[in] volname: new LIF Volume name
/// @return 1 if renamed, 0 if not found, -1 error
MEMSPACE
int lif_rename_volume(char *lifimagename, char *volname)
{
   1be80:	a6 e0       	ldi	r26, 0x06	; 6
   1be82:	b1 e0       	ldi	r27, 0x01	; 1
   1be84:	e6 e4       	ldi	r30, 0x46	; 70
   1be86:	ff ed       	ldi	r31, 0xDF	; 223
   1be88:	0c 94 ae e8 	jmp	0x1d15c	; 0x1d15c <__prologue_saves__+0x14>
   1be8c:	7c 01       	movw	r14, r24
   1be8e:	6b 01       	movw	r12, r22
    lif_t *LIF;
	uint8_t buffer[LIF_SECTOR_SIZE+1];


    if(!*lifimagename)
   1be90:	fc 01       	movw	r30, r24
   1be92:	80 81       	ld	r24, Z
   1be94:	81 11       	cpse	r24, r1
   1be96:	03 c0       	rjmp	.+6      	; 0x1be9e <lif_rename_volume+0x1e>
    {
        printf("lif_rename_file: lifimagename is empty\n");
   1be98:	8b e6       	ldi	r24, 0x6B	; 107
   1be9a:	93 e3       	ldi	r25, 0x33	; 51
   1be9c:	0e c0       	rjmp	.+28     	; 0x1beba <lif_rename_volume+0x3a>
        return(-1);
    }

    if(!*volname)
   1be9e:	fb 01       	movw	r30, r22
   1bea0:	80 81       	ld	r24, Z
   1bea2:	81 11       	cpse	r24, r1
   1bea4:	03 c0       	rjmp	.+6      	; 0x1beac <lif_rename_volume+0x2c>
    {
        printf("lif_rename_file: new Volume name empty\n");
   1bea6:	83 e4       	ldi	r24, 0x43	; 67
   1bea8:	93 e3       	ldi	r25, 0x33	; 51
   1beaa:	07 c0       	rjmp	.+14     	; 0x1beba <lif_rename_volume+0x3a>
        return(-1);
    }

    if(!lif_checkname(volname))
   1beac:	cb 01       	movw	r24, r22
   1beae:	0e 94 c6 c3 	call	0x1878c	; 0x1878c <lif_checkname>
   1beb2:	89 2b       	or	r24, r25
   1beb4:	59 f4       	brne	.+22     	; 0x1becc <lif_rename_volume+0x4c>
    {
        printf("lif_rename_file: new lifname contains bad characters\n");
   1beb6:	8d e0       	ldi	r24, 0x0D	; 13
   1beb8:	93 e3       	ldi	r25, 0x33	; 51
   1beba:	a0 e0       	ldi	r26, 0x00	; 0
   1bebc:	ed b7       	in	r30, 0x3d	; 61
   1bebe:	fe b7       	in	r31, 0x3e	; 62
   1bec0:	81 83       	std	Z+1, r24	; 0x01
   1bec2:	92 83       	std	Z+2, r25	; 0x02
   1bec4:	a3 83       	std	Z+3, r26	; 0x03
   1bec6:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
   1beca:	60 c0       	rjmp	.+192    	; 0x1bf8c <lif_rename_volume+0x10c>
        return(-1);

    }

    LIF = lif_open_volume(lifimagename,"rb+");
   1becc:	66 ef       	ldi	r22, 0xF6	; 246
   1bece:	78 e0       	ldi	r23, 0x08	; 8
   1bed0:	c7 01       	movw	r24, r14
   1bed2:	0e 94 29 d2 	call	0x1a452	; 0x1a452 <lif_open_volume>
   1bed6:	7c 01       	movw	r14, r24
    if(LIF == NULL)
   1bed8:	00 97       	sbiw	r24, 0x00	; 0
   1beda:	09 f4       	brne	.+2      	; 0x1bede <lif_rename_volume+0x5e>
   1bedc:	57 c0       	rjmp	.+174    	; 0x1bf8c <lif_rename_volume+0x10c>
        return(-1);

	// Update volume name
    lif_fixname(LIF->VOL.Label, volname, 6);
   1bede:	46 e0       	ldi	r20, 0x06	; 6
   1bee0:	50 e0       	ldi	r21, 0x00	; 0
   1bee2:	b6 01       	movw	r22, r12
   1bee4:	86 96       	adiw	r24, 0x26	; 38
   1bee6:	0e 94 00 c4 	call	0x18800	; 0x18800 <lif_fixname>

// Validate basic Volume headers
    if( !lif_check_volume(LIF) )
   1beea:	c7 01       	movw	r24, r14
   1beec:	0e 94 d7 c8 	call	0x191ae	; 0x191ae <lif_check_volume>
   1bef0:	89 2b       	or	r24, r25
   1bef2:	81 f4       	brne	.+32     	; 0x1bf14 <lif_rename_volume+0x94>
    {
        if(debuglevel & LIF_DEBUG)
   1bef4:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1bef8:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1befc:	92 ff       	sbrs	r25, 2
   1befe:	3c c0       	rjmp	.+120    	; 0x1bf78 <lif_rename_volume+0xf8>
            printf("lif_rename_volume:[%s] error volume validate failed\n", LIF->name);
   1bf00:	f7 01       	movw	r30, r14
   1bf02:	80 81       	ld	r24, Z
   1bf04:	91 81       	ldd	r25, Z+1	; 0x01
   1bf06:	ed b7       	in	r30, 0x3d	; 61
   1bf08:	fe b7       	in	r31, 0x3e	; 62
   1bf0a:	95 83       	std	Z+5, r25	; 0x05
   1bf0c:	84 83       	std	Z+4, r24	; 0x04
   1bf0e:	88 ed       	ldi	r24, 0xD8	; 216
   1bf10:	92 e3       	ldi	r25, 0x32	; 50
   1bf12:	2c c0       	rjmp	.+88     	; 0x1bf6c <lif_rename_volume+0xec>
        lif_closedir(LIF);
        return(-1);
    }

	// clear sector buffer
    memset(buffer,0,LIF_SECTOR_SIZE);
   1bf14:	9e 01       	movw	r18, r28
   1bf16:	2a 5f       	subi	r18, 0xFA	; 250
   1bf18:	3f 4f       	sbci	r19, 0xFF	; 255
   1bf1a:	69 01       	movw	r12, r18
   1bf1c:	80 e0       	ldi	r24, 0x00	; 0
   1bf1e:	91 e0       	ldi	r25, 0x01	; 1
   1bf20:	f9 01       	movw	r30, r18
   1bf22:	9c 01       	movw	r18, r24
   1bf24:	11 92       	st	Z+, r1
   1bf26:	21 50       	subi	r18, 0x01	; 1
   1bf28:	30 40       	sbci	r19, 0x00	; 0
   1bf2a:	e1 f7       	brne	.-8      	; 0x1bf24 <lif_rename_volume+0xa4>
	// created update volume header sector from LIF structure
	lif_vol2str(LIF,buffer);
   1bf2c:	b6 01       	movw	r22, r12
   1bf2e:	c7 01       	movw	r24, r14
   1bf30:	0e 94 3d c4 	call	0x1887a	; 0x1887a <lif_vol2str>

// Volume header must be it least one sector
    if( lif_write(LIF, buffer, 0, LIF_SECTOR_SIZE) < LIF_SECTOR_SIZE)
   1bf34:	00 e0       	ldi	r16, 0x00	; 0
   1bf36:	11 e0       	ldi	r17, 0x01	; 1
   1bf38:	20 e0       	ldi	r18, 0x00	; 0
   1bf3a:	30 e0       	ldi	r19, 0x00	; 0
   1bf3c:	a9 01       	movw	r20, r18
   1bf3e:	b6 01       	movw	r22, r12
   1bf40:	c7 01       	movw	r24, r14
   1bf42:	0e 94 0f c3 	call	0x1861e	; 0x1861e <lif_write>
   1bf46:	8f 3f       	cpi	r24, 0xFF	; 255
   1bf48:	91 05       	cpc	r25, r1
   1bf4a:	09 f0       	breq	.+2      	; 0x1bf4e <lif_rename_volume+0xce>
   1bf4c:	cc f4       	brge	.+50     	; 0x1bf80 <lif_rename_volume+0x100>
    {
        if(debuglevel & LIF_DEBUG)
   1bf4e:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1bf52:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1bf56:	92 ff       	sbrs	r25, 2
   1bf58:	0f c0       	rjmp	.+30     	; 0x1bf78 <lif_rename_volume+0xf8>
            printf("lif_rename_volume:[%s] error write volume header failed\n", LIF->name);
   1bf5a:	f7 01       	movw	r30, r14
   1bf5c:	80 81       	ld	r24, Z
   1bf5e:	91 81       	ldd	r25, Z+1	; 0x01
   1bf60:	ed b7       	in	r30, 0x3d	; 61
   1bf62:	fe b7       	in	r31, 0x3e	; 62
   1bf64:	95 83       	std	Z+5, r25	; 0x05
   1bf66:	84 83       	std	Z+4, r24	; 0x04
   1bf68:	8f e9       	ldi	r24, 0x9F	; 159
   1bf6a:	92 e3       	ldi	r25, 0x32	; 50
   1bf6c:	a0 e0       	ldi	r26, 0x00	; 0
   1bf6e:	81 83       	std	Z+1, r24	; 0x01
   1bf70:	92 83       	std	Z+2, r25	; 0x02
   1bf72:	a3 83       	std	Z+3, r26	; 0x03
   1bf74:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1bf78:	c7 01       	movw	r24, r14
   1bf7a:	0e 94 6c cb 	call	0x196d8	; 0x196d8 <lif_close_volume>
   1bf7e:	06 c0       	rjmp	.+12     	; 0x1bf8c <lif_rename_volume+0x10c>
            printf("lif_rename_volume:[%s] error write volume header failed\n", LIF->name);
        lif_closedir(LIF);
        return(-1);
    }

    lif_close_volume(LIF);
   1bf80:	c7 01       	movw	r24, r14
   1bf82:	0e 94 6c cb 	call	0x196d8	; 0x196d8 <lif_close_volume>

    return(1);
   1bf86:	81 e0       	ldi	r24, 0x01	; 1
   1bf88:	90 e0       	ldi	r25, 0x00	; 0
   1bf8a:	02 c0       	rjmp	.+4      	; 0x1bf90 <lif_rename_volume+0x110>

    }

    LIF = lif_open_volume(lifimagename,"rb+");
    if(LIF == NULL)
        return(-1);
   1bf8c:	8f ef       	ldi	r24, 0xFF	; 255
   1bf8e:	9f ef       	ldi	r25, 0xFF	; 255
    }

    lif_close_volume(LIF);

    return(1);
}
   1bf90:	ca 5f       	subi	r28, 0xFA	; 250
   1bf92:	de 4f       	sbci	r29, 0xFE	; 254
   1bf94:	e8 e0       	ldi	r30, 0x08	; 8
   1bf96:	0c 94 ca e8 	jmp	0x1d194	; 0x1d194 <__epilogue_restores__+0x14>

0001bf9a <lif_create_image>:
/// @param[in] dirsectors: Number of LIF directory sectors
/// @param[in] sectors: total disk image size in sectors
///@return bytes writting to disk image
MEMSPACE
long lif_create_image(char *lifimagename, char *liflabel, uint32_t dirsectors, uint32_t sectors)
{
   1bf9a:	4f 92       	push	r4
   1bf9c:	5f 92       	push	r5
   1bf9e:	6f 92       	push	r6
   1bfa0:	7f 92       	push	r7
   1bfa2:	af 92       	push	r10
   1bfa4:	bf 92       	push	r11
   1bfa6:	cf 92       	push	r12
   1bfa8:	df 92       	push	r13
   1bfaa:	ef 92       	push	r14
   1bfac:	ff 92       	push	r15
   1bfae:	0f 93       	push	r16
   1bfb0:	1f 93       	push	r17
   1bfb2:	cf 93       	push	r28
   1bfb4:	df 93       	push	r29
   1bfb6:	ad b7       	in	r26, 0x3d	; 61
   1bfb8:	be b7       	in	r27, 0x3e	; 62
   1bfba:	17 97       	sbiw	r26, 0x07	; 7
   1bfbc:	0f b6       	in	r0, 0x3f	; 63
   1bfbe:	f8 94       	cli
   1bfc0:	be bf       	out	0x3e, r27	; 62
   1bfc2:	0f be       	out	0x3f, r0	; 63
   1bfc4:	ad bf       	out	0x3d, r26	; 61
   1bfc6:	27 01       	movw	r4, r14
   1bfc8:	38 01       	movw	r6, r16
    uint32_t dirstart,filestart,filesectors,end;
    lif_t *LIF;

    if(!*lifimagename)
   1bfca:	dc 01       	movw	r26, r24
   1bfcc:	ec 91       	ld	r30, X
   1bfce:	e1 11       	cpse	r30, r1
   1bfd0:	03 c0       	rjmp	.+6      	; 0x1bfd8 <lif_create_image+0x3e>
    {
        printf("lif_create_image: lifimagename is empty\n");
   1bfd2:	86 e7       	ldi	r24, 0x76	; 118
   1bfd4:	92 e3       	ldi	r25, 0x32	; 50
   1bfd6:	16 c0       	rjmp	.+44     	; 0x1c004 <lif_create_image+0x6a>
        return(-1);
    }
    if(!*liflabel)
   1bfd8:	db 01       	movw	r26, r22
   1bfda:	ec 91       	ld	r30, X
   1bfdc:	e1 11       	cpse	r30, r1
   1bfde:	03 c0       	rjmp	.+6      	; 0x1bfe6 <lif_create_image+0x4c>
    {
        printf("lif_create_image: liflabel is empty\n");
   1bfe0:	81 e5       	ldi	r24, 0x51	; 81
   1bfe2:	92 e3       	ldi	r25, 0x32	; 50
   1bfe4:	0f c0       	rjmp	.+30     	; 0x1c004 <lif_create_image+0x6a>
        return(-1);
    }
    if(!dirsectors)
   1bfe6:	21 15       	cp	r18, r1
   1bfe8:	31 05       	cpc	r19, r1
   1bfea:	41 05       	cpc	r20, r1
   1bfec:	51 05       	cpc	r21, r1
   1bfee:	19 f4       	brne	.+6      	; 0x1bff6 <lif_create_image+0x5c>
    {
        printf("lif_create_image: dirsectors is 0\n");
   1bff0:	8e e2       	ldi	r24, 0x2E	; 46
   1bff2:	92 e3       	ldi	r25, 0x32	; 50
   1bff4:	07 c0       	rjmp	.+14     	; 0x1c004 <lif_create_image+0x6a>
        return(-1);
    }
    if(!sectors)
   1bff6:	e1 14       	cp	r14, r1
   1bff8:	f1 04       	cpc	r15, r1
   1bffa:	01 05       	cpc	r16, r1
   1bffc:	11 05       	cpc	r17, r1
   1bffe:	59 f4       	brne	.+22     	; 0x1c016 <lif_create_image+0x7c>
    {
        printf("lif_create_image: sectors is 0\n");
   1c000:	8e e0       	ldi	r24, 0x0E	; 14
   1c002:	92 e3       	ldi	r25, 0x32	; 50
   1c004:	a0 e0       	ldi	r26, 0x00	; 0
   1c006:	ed b7       	in	r30, 0x3d	; 61
   1c008:	fe b7       	in	r31, 0x3e	; 62
   1c00a:	81 83       	std	Z+1, r24	; 0x01
   1c00c:	92 83       	std	Z+2, r25	; 0x02
   1c00e:	a3 83       	std	Z+3, r26	; 0x03
   1c010:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
   1c014:	2b c0       	rjmp	.+86     	; 0x1c06c <lif_create_image+0xd2>
    dirstart = 2;
    filestart = dirstart + dirsectors;
    filesectors = sectors - filestart;
    end = filestart + filesectors;

    LIF = lif_create_volume(lifimagename, liflabel, dirstart, dirsectors, filesectors);
   1c016:	67 01       	movw	r12, r14
   1c018:	78 01       	movw	r14, r16
   1c01a:	f2 e0       	ldi	r31, 0x02	; 2
   1c01c:	cf 1a       	sub	r12, r31
   1c01e:	d1 08       	sbc	r13, r1
   1c020:	e1 08       	sbc	r14, r1
   1c022:	f1 08       	sbc	r15, r1
   1c024:	56 01       	movw	r10, r12
   1c026:	67 01       	movw	r12, r14
   1c028:	a2 1a       	sub	r10, r18
   1c02a:	b3 0a       	sbc	r11, r19
   1c02c:	c4 0a       	sbc	r12, r20
   1c02e:	d5 0a       	sbc	r13, r21
   1c030:	79 01       	movw	r14, r18
   1c032:	8a 01       	movw	r16, r20
   1c034:	22 e0       	ldi	r18, 0x02	; 2
   1c036:	30 e0       	ldi	r19, 0x00	; 0
   1c038:	40 e0       	ldi	r20, 0x00	; 0
   1c03a:	50 e0       	ldi	r21, 0x00	; 0
   1c03c:	0e 94 df cd 	call	0x19bbe	; 0x19bbe <lif_create_volume>
    if(LIF == NULL)
   1c040:	00 97       	sbiw	r24, 0x00	; 0
   1c042:	a1 f0       	breq	.+40     	; 0x1c06c <lif_create_image+0xd2>
        return(-1);
    lif_close_volume(LIF);
   1c044:	0e 94 6c cb 	call	0x196d8	; 0x196d8 <lif_close_volume>

    printf("\tFormatting: wrote %ld sectors\n", (long)end);
   1c048:	82 01       	movw	r16, r4
   1c04a:	d6 2d       	mov	r29, r6
   1c04c:	c7 2d       	mov	r28, r7
   1c04e:	ed b7       	in	r30, 0x3d	; 61
   1c050:	fe b7       	in	r31, 0x3e	; 62
   1c052:	44 82       	std	Z+4, r4	; 0x04
   1c054:	15 83       	std	Z+5, r17	; 0x05
   1c056:	66 82       	std	Z+6, r6	; 0x06
   1c058:	77 82       	std	Z+7, r7	; 0x07
   1c05a:	8e ee       	ldi	r24, 0xEE	; 238
   1c05c:	91 e3       	ldi	r25, 0x31	; 49
   1c05e:	a0 e0       	ldi	r26, 0x00	; 0
   1c060:	81 83       	std	Z+1, r24	; 0x01
   1c062:	92 83       	std	Z+2, r25	; 0x02
   1c064:	a3 83       	std	Z+3, r26	; 0x03
   1c066:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
    return(end);
   1c06a:	04 c0       	rjmp	.+8      	; 0x1c074 <lif_create_image+0xda>
    filesectors = sectors - filestart;
    end = filestart + filesectors;

    LIF = lif_create_volume(lifimagename, liflabel, dirstart, dirsectors, filesectors);
    if(LIF == NULL)
        return(-1);
   1c06c:	0f ef       	ldi	r16, 0xFF	; 255
   1c06e:	1f ef       	ldi	r17, 0xFF	; 255
   1c070:	df ef       	ldi	r29, 0xFF	; 255
   1c072:	cf ef       	ldi	r28, 0xFF	; 255
    lif_close_volume(LIF);

    printf("\tFormatting: wrote %ld sectors\n", (long)end);
    return(end);
}
   1c074:	b8 01       	movw	r22, r16
   1c076:	8d 2f       	mov	r24, r29
   1c078:	9c 2f       	mov	r25, r28
   1c07a:	ad b7       	in	r26, 0x3d	; 61
   1c07c:	be b7       	in	r27, 0x3e	; 62
   1c07e:	17 96       	adiw	r26, 0x07	; 7
   1c080:	0f b6       	in	r0, 0x3f	; 63
   1c082:	f8 94       	cli
   1c084:	be bf       	out	0x3e, r27	; 62
   1c086:	0f be       	out	0x3f, r0	; 63
   1c088:	ad bf       	out	0x3d, r26	; 61
   1c08a:	df 91       	pop	r29
   1c08c:	cf 91       	pop	r28
   1c08e:	1f 91       	pop	r17
   1c090:	0f 91       	pop	r16
   1c092:	ff 90       	pop	r15
   1c094:	ef 90       	pop	r14
   1c096:	df 90       	pop	r13
   1c098:	cf 90       	pop	r12
   1c09a:	bf 90       	pop	r11
   1c09c:	af 90       	pop	r10
   1c09e:	7f 90       	pop	r7
   1c0a0:	6f 90       	pop	r6
   1c0a2:	5f 90       	pop	r5
   1c0a4:	4f 90       	pop	r4
   1c0a6:	08 95       	ret

0001c0a8 <lif_tests>:

/// @brief LIF user tests
/// @return  1 matched token, 0 if not
MEMSPACE
int lif_tests(int argc, char *argv[])
{
   1c0a8:	a5 e0       	ldi	r26, 0x05	; 5
   1c0aa:	b0 e0       	ldi	r27, 0x00	; 0
   1c0ac:	ea e5       	ldi	r30, 0x5A	; 90
   1c0ae:	f0 ee       	ldi	r31, 0xE0	; 224
   1c0b0:	0c 94 aa e8 	jmp	0x1d154	; 0x1d154 <__prologue_saves__+0xc>
        printf("%d:%s\n", i, argv[i]);
    printf("\n");
#endif

// Nothing to do ?
    if(argc < 2)
   1c0b4:	82 30       	cpi	r24, 0x02	; 2
   1c0b6:	91 05       	cpc	r25, r1
   1c0b8:	1c f4       	brge	.+6      	; 0x1c0c0 <lif_tests+0x18>
        return (0);
   1c0ba:	80 e0       	ldi	r24, 0x00	; 0
   1c0bc:	90 e0       	ldi	r25, 0x00	; 0
   1c0be:	a4 c1       	rjmp	.+840    	; 0x1c408 <lif_tests+0x360>

// Argument 1
    ind = 1;
    ptr = argv[ind++];
   1c0c0:	fb 01       	movw	r30, r22
   1c0c2:	e2 80       	ldd	r14, Z+2	; 0x02
   1c0c4:	f3 80       	ldd	r15, Z+3	; 0x03

// Argument 1 missing ?
//        Nothing to do
// argc should really get this
    if(!ptr || !*ptr)
   1c0c6:	e1 14       	cp	r14, r1
   1c0c8:	f1 04       	cpc	r15, r1
   1c0ca:	09 f4       	brne	.+2      	; 0x1c0ce <lif_tests+0x26>
   1c0cc:	9b c1       	rjmp	.+822    	; 0x1c404 <lif_tests+0x35c>
   1c0ce:	f7 01       	movw	r30, r14
   1c0d0:	20 81       	ld	r18, Z
   1c0d2:	22 23       	and	r18, r18
   1c0d4:	09 f4       	brne	.+2      	; 0x1c0d8 <lif_tests+0x30>
   1c0d6:	96 c1       	rjmp	.+812    	; 0x1c404 <lif_tests+0x35c>
   1c0d8:	8b 01       	movw	r16, r22
   1c0da:	6c 01       	movw	r12, r24
        return(1);


	if(MATCHI_LEN(argv[0],"lif"))
   1c0dc:	62 eb       	ldi	r22, 0xB2	; 178
   1c0de:	76 e1       	ldi	r23, 0x16	; 22
   1c0e0:	f8 01       	movw	r30, r16
   1c0e2:	80 81       	ld	r24, Z
   1c0e4:	91 81       	ldd	r25, Z+1	; 0x01
   1c0e6:	0e 94 87 33 	call	0x670e	; 0x670e <MATCHI_LEN>
   1c0ea:	89 2b       	or	r24, r25
   1c0ec:	d1 f0       	breq	.+52     	; 0x1c122 <lif_tests+0x7a>
	{
		if(MATCHI(ptr,"help") || MATCHI(ptr,"-help") || MATCHI(ptr,"-?") )
   1c0ee:	62 e6       	ldi	r22, 0x62	; 98
   1c0f0:	76 e1       	ldi	r23, 0x16	; 22
   1c0f2:	c7 01       	movw	r24, r14
   1c0f4:	0e 94 49 33 	call	0x6692	; 0x6692 <MATCHI>
   1c0f8:	89 2b       	or	r24, r25
   1c0fa:	29 f0       	breq	.+10     	; 0x1c106 <lif_tests+0x5e>
		{
			lif_help(1);
   1c0fc:	81 e0       	ldi	r24, 0x01	; 1
   1c0fe:	90 e0       	ldi	r25, 0x00	; 0
   1c100:	0e 94 ad c1 	call	0x1835a	; 0x1835a <lif_help>
   1c104:	7f c1       	rjmp	.+766    	; 0x1c404 <lif_tests+0x35c>
        return(1);


	if(MATCHI_LEN(argv[0],"lif"))
	{
		if(MATCHI(ptr,"help") || MATCHI(ptr,"-help") || MATCHI(ptr,"-?") )
   1c106:	61 e6       	ldi	r22, 0x61	; 97
   1c108:	76 e1       	ldi	r23, 0x16	; 22
   1c10a:	c7 01       	movw	r24, r14
   1c10c:	0e 94 49 33 	call	0x6692	; 0x6692 <MATCHI>
   1c110:	89 2b       	or	r24, r25
   1c112:	a1 f7       	brne	.-24     	; 0x1c0fc <lif_tests+0x54>
   1c114:	67 e6       	ldi	r22, 0x67	; 103
   1c116:	76 e1       	ldi	r23, 0x16	; 22
   1c118:	c7 01       	movw	r24, r14
   1c11a:	0e 94 49 33 	call	0x6692	; 0x6692 <MATCHI>
   1c11e:	89 2b       	or	r24, r25
   1c120:	69 f7       	brne	.-38     	; 0x1c0fc <lif_tests+0x54>
		}
	}

// Turn one debugging
// in the future we can add tests for specific messages
	debuglevel &= ~0x400;
   1c122:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1c126:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1c12a:	9b 7f       	andi	r25, 0xFB	; 251
   1c12c:	90 93 b7 01 	sts	0x01B7, r25	; 0x8001b7 <debuglevel+0x1>
   1c130:	80 93 b6 01 	sts	0x01B6, r24	; 0x8001b6 <debuglevel>
    if (MATCHARGS(ptr,"-d", (ind + 0) ,argc))
   1c134:	96 01       	movw	r18, r12
   1c136:	42 e0       	ldi	r20, 0x02	; 2
   1c138:	50 e0       	ldi	r21, 0x00	; 0
   1c13a:	6a e6       	ldi	r22, 0x6A	; 106
   1c13c:	76 e1       	ldi	r23, 0x16	; 22
   1c13e:	c7 01       	movw	r24, r14
   1c140:	0e 94 5d 33 	call	0x66ba	; 0x66ba <MATCHARGS>
   1c144:	89 2b       	or	r24, r25
   1c146:	79 f0       	breq	.+30     	; 0x1c166 <lif_tests+0xbe>
    {
        debuglevel |= 0x400;
   1c148:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1c14c:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1c150:	94 60       	ori	r25, 0x04	; 4
   1c152:	90 93 b7 01 	sts	0x01B7, r25	; 0x8001b7 <debuglevel+0x1>
   1c156:	80 93 b6 01 	sts	0x01B6, r24	; 0x8001b6 <debuglevel>
        ptr = argv[ind++];
   1c15a:	f8 01       	movw	r30, r16
   1c15c:	e4 80       	ldd	r14, Z+4	; 0x04
   1c15e:	f5 80       	ldd	r15, Z+5	; 0x05
   1c160:	c3 e0       	ldi	r28, 0x03	; 3
   1c162:	d0 e0       	ldi	r29, 0x00	; 0
   1c164:	02 c0       	rjmp	.+4      	; 0x1c16a <lif_tests+0xc2>
    if(argc < 2)
        return (0);

// Argument 1
    ind = 1;
    ptr = argv[ind++];
   1c166:	c2 e0       	ldi	r28, 0x02	; 2
   1c168:	d0 e0       	ldi	r29, 0x00	; 0
    {
        debuglevel |= 0x400;
        ptr = argv[ind++];
    }

    if (MATCHARGS(ptr,"addbin", (ind + 3) ,argc))
   1c16a:	5e 01       	movw	r10, r28
   1c16c:	f3 e0       	ldi	r31, 0x03	; 3
   1c16e:	af 0e       	add	r10, r31
   1c170:	b1 1c       	adc	r11, r1
   1c172:	96 01       	movw	r18, r12
   1c174:	a5 01       	movw	r20, r10
   1c176:	6d e6       	ldi	r22, 0x6D	; 109
   1c178:	76 e1       	ldi	r23, 0x16	; 22
   1c17a:	c7 01       	movw	r24, r14
   1c17c:	0e 94 5d 33 	call	0x66ba	; 0x66ba <MATCHARGS>
   1c180:	89 2b       	or	r24, r25
   1c182:	61 f0       	breq	.+24     	; 0x1c19c <lif_tests+0xf4>
    {
        lif_add_lif_file(argv[ind],argv[ind+1],argv[ind+2]);
   1c184:	cc 0f       	add	r28, r28
   1c186:	dd 1f       	adc	r29, r29
   1c188:	c0 0f       	add	r28, r16
   1c18a:	d1 1f       	adc	r29, r17
   1c18c:	4c 81       	ldd	r20, Y+4	; 0x04
   1c18e:	5d 81       	ldd	r21, Y+5	; 0x05
   1c190:	6a 81       	ldd	r22, Y+2	; 0x02
   1c192:	7b 81       	ldd	r23, Y+3	; 0x03
   1c194:	88 81       	ld	r24, Y
   1c196:	99 81       	ldd	r25, Y+1	; 0x01
   1c198:	d5 db       	rcall	.-2134   	; 0x1b944 <lif_add_lif_file>
   1c19a:	34 c1       	rjmp	.+616    	; 0x1c404 <lif_tests+0x35c>

        return(1);
    }

    if (MATCHARGS(ptr,"add", (ind + 3) ,argc))
   1c19c:	96 01       	movw	r18, r12
   1c19e:	a5 01       	movw	r20, r10
   1c1a0:	64 e7       	ldi	r22, 0x74	; 116
   1c1a2:	76 e1       	ldi	r23, 0x16	; 22
   1c1a4:	c7 01       	movw	r24, r14
   1c1a6:	0e 94 5d 33 	call	0x66ba	; 0x66ba <MATCHARGS>
   1c1aa:	89 2b       	or	r24, r25
   1c1ac:	69 f0       	breq	.+26     	; 0x1c1c8 <lif_tests+0x120>
    {
        lif_add_ascii_file_as_e010(argv[ind],argv[ind+1],argv[ind+2]);
   1c1ae:	cc 0f       	add	r28, r28
   1c1b0:	dd 1f       	adc	r29, r29
   1c1b2:	c0 0f       	add	r28, r16
   1c1b4:	d1 1f       	adc	r29, r17
   1c1b6:	4c 81       	ldd	r20, Y+4	; 0x04
   1c1b8:	5d 81       	ldd	r21, Y+5	; 0x05
   1c1ba:	6a 81       	ldd	r22, Y+2	; 0x02
   1c1bc:	7b 81       	ldd	r23, Y+3	; 0x03
   1c1be:	88 81       	ld	r24, Y
   1c1c0:	99 81       	ldd	r25, Y+1	; 0x01
   1c1c2:	0e 94 7f d7 	call	0x1aefe	; 0x1aefe <lif_add_ascii_file_as_e010>
   1c1c6:	1e c1       	rjmp	.+572    	; 0x1c404 <lif_tests+0x35c>
        return(1);
    }
    if (MATCHARGS(ptr,"createdisk", (ind + 3) ,argc))
   1c1c8:	96 01       	movw	r18, r12
   1c1ca:	a5 01       	movw	r20, r10
   1c1cc:	68 e7       	ldi	r22, 0x78	; 120
   1c1ce:	76 e1       	ldi	r23, 0x16	; 22
   1c1d0:	c7 01       	movw	r24, r14
   1c1d2:	0e 94 5d 33 	call	0x66ba	; 0x66ba <MATCHARGS>
   1c1d6:	89 2b       	or	r24, r25
   1c1d8:	09 f4       	brne	.+2      	; 0x1c1dc <lif_tests+0x134>
   1c1da:	40 c0       	rjmp	.+128    	; 0x1c25c <lif_tests+0x1b4>
    {
///@brief format LIF image
        long dir,sectors;
        char *name = argv[ind];
   1c1dc:	cc 0f       	add	r28, r28
   1c1de:	dd 1f       	adc	r29, r29
   1c1e0:	c0 0f       	add	r28, r16
   1c1e2:	d1 1f       	adc	r29, r17
   1c1e4:	c8 80       	ld	r12, Y
   1c1e6:	d9 80       	ldd	r13, Y+1	; 0x01
        char *label = argv[ind+1];
   1c1e8:	aa 80       	ldd	r10, Y+2	; 0x02
   1c1ea:	bb 80       	ldd	r11, Y+3	; 0x03
        char *model = argv[ind+2];
   1c1ec:	0c 80       	ldd	r0, Y+4	; 0x04
   1c1ee:	dd 81       	ldd	r29, Y+5	; 0x05
   1c1f0:	c0 2d       	mov	r28, r0
        if( MATCHI_LEN(model,"hp"))
   1c1f2:	63 e8       	ldi	r22, 0x83	; 131
   1c1f4:	76 e1       	ldi	r23, 0x16	; 22
   1c1f6:	ce 01       	movw	r24, r28
   1c1f8:	0e 94 87 33 	call	0x670e	; 0x670e <MATCHI_LEN>
   1c1fc:	89 2b       	or	r24, r25
   1c1fe:	09 f0       	breq	.+2      	; 0x1c202 <lif_tests+0x15a>
            model +=2;
   1c200:	22 96       	adiw	r28, 0x02	; 2
        if(hpdir_find_drive(model,0, 0))
   1c202:	40 e0       	ldi	r20, 0x00	; 0
   1c204:	50 e0       	ldi	r21, 0x00	; 0
   1c206:	60 e0       	ldi	r22, 0x00	; 0
   1c208:	70 e0       	ldi	r23, 0x00	; 0
   1c20a:	ce 01       	movw	r24, r28
   1c20c:	0e 94 f0 a4 	call	0x149e0	; 0x149e0 <hpdir_find_drive>
   1c210:	89 2b       	or	r24, r25
   1c212:	b9 f0       	breq	.+46     	; 0x1c242 <lif_tests+0x19a>
        {
            dir = lif_dir_count(hpdir.BLOCKS);
   1c214:	60 91 24 20 	lds	r22, 0x2024	; 0x802024 <hpdir+0xac>
   1c218:	70 91 25 20 	lds	r23, 0x2025	; 0x802025 <hpdir+0xad>
   1c21c:	80 91 26 20 	lds	r24, 0x2026	; 0x802026 <hpdir+0xae>
   1c220:	90 91 27 20 	lds	r25, 0x2027	; 0x802027 <hpdir+0xaf>
   1c224:	0e 94 d3 a4 	call	0x149a6	; 0x149a6 <lif_dir_count>
   1c228:	9b 01       	movw	r18, r22
   1c22a:	ac 01       	movw	r20, r24
            sectors = hpdir.BLOCKS;
			// NOTE: we could grab the directory size for non 0 entries in the hpdir.ini file - I use a computed value which is also fine
            lif_create_image(name, label, dir, sectors);
   1c22c:	e0 90 24 20 	lds	r14, 0x2024	; 0x802024 <hpdir+0xac>
   1c230:	f0 90 25 20 	lds	r15, 0x2025	; 0x802025 <hpdir+0xad>
   1c234:	00 91 26 20 	lds	r16, 0x2026	; 0x802026 <hpdir+0xae>
   1c238:	10 91 27 20 	lds	r17, 0x2027	; 0x802027 <hpdir+0xaf>
   1c23c:	b5 01       	movw	r22, r10
   1c23e:	c6 01       	movw	r24, r12
   1c240:	2e c0       	rjmp	.+92     	; 0x1c29e <lif_tests+0x1f6>
            return(1);
        }
        printf("Disk: %s not found in hpdir.ini\n", model);
   1c242:	ed b7       	in	r30, 0x3d	; 61
   1c244:	fe b7       	in	r31, 0x3e	; 62
   1c246:	d5 83       	std	Z+5, r29	; 0x05
   1c248:	c4 83       	std	Z+4, r28	; 0x04
   1c24a:	8a e3       	ldi	r24, 0x3A	; 58
   1c24c:	95 e4       	ldi	r25, 0x45	; 69
   1c24e:	a0 e0       	ldi	r26, 0x00	; 0
   1c250:	81 83       	std	Z+1, r24	; 0x01
   1c252:	92 83       	std	Z+2, r25	; 0x02
   1c254:	a3 83       	std	Z+3, r26	; 0x03
   1c256:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
   1c25a:	d4 c0       	rjmp	.+424    	; 0x1c404 <lif_tests+0x35c>
        return(1);
    }
    if (MATCHARGS(ptr,"create", (ind + 4) ,argc))
   1c25c:	96 01       	movw	r18, r12
   1c25e:	ae 01       	movw	r20, r28
   1c260:	4c 5f       	subi	r20, 0xFC	; 252
   1c262:	5f 4f       	sbci	r21, 0xFF	; 255
   1c264:	66 e8       	ldi	r22, 0x86	; 134
   1c266:	76 e1       	ldi	r23, 0x16	; 22
   1c268:	c7 01       	movw	r24, r14
   1c26a:	0e 94 5d 33 	call	0x66ba	; 0x66ba <MATCHARGS>
   1c26e:	89 2b       	or	r24, r25
   1c270:	c1 f0       	breq	.+48     	; 0x1c2a2 <lif_tests+0x1fa>
    {
///@brief format LIF image
        lif_create_image(argv[ind],argv[ind+1], atol(argv[ind+2]), atol(argv[ind+3]) );
   1c272:	cc 0f       	add	r28, r28
   1c274:	dd 1f       	adc	r29, r29
   1c276:	c0 0f       	add	r28, r16
   1c278:	d1 1f       	adc	r29, r17
   1c27a:	8c 81       	ldd	r24, Y+4	; 0x04
   1c27c:	9d 81       	ldd	r25, Y+5	; 0x05
   1c27e:	0e 94 9c 48 	call	0x9138	; 0x9138 <atol>
   1c282:	4b 01       	movw	r8, r22
   1c284:	5c 01       	movw	r10, r24
   1c286:	8e 81       	ldd	r24, Y+6	; 0x06
   1c288:	9f 81       	ldd	r25, Y+7	; 0x07
   1c28a:	0e 94 9c 48 	call	0x9138	; 0x9138 <atol>
   1c28e:	7b 01       	movw	r14, r22
   1c290:	8c 01       	movw	r16, r24
   1c292:	6a 81       	ldd	r22, Y+2	; 0x02
   1c294:	7b 81       	ldd	r23, Y+3	; 0x03
   1c296:	a5 01       	movw	r20, r10
   1c298:	94 01       	movw	r18, r8
   1c29a:	88 81       	ld	r24, Y
   1c29c:	99 81       	ldd	r25, Y+1	; 0x01
   1c29e:	7d de       	rcall	.-774    	; 0x1bf9a <lif_create_image>
   1c2a0:	b1 c0       	rjmp	.+354    	; 0x1c404 <lif_tests+0x35c>
        return(1);
    }
    if (MATCHARGS(ptr,"del", (ind + 2) ,argc))
   1c2a2:	4e 01       	movw	r8, r28
   1c2a4:	f2 e0       	ldi	r31, 0x02	; 2
   1c2a6:	8f 0e       	add	r8, r31
   1c2a8:	91 1c       	adc	r9, r1
   1c2aa:	96 01       	movw	r18, r12
   1c2ac:	a4 01       	movw	r20, r8
   1c2ae:	6d e8       	ldi	r22, 0x8D	; 141
   1c2b0:	76 e1       	ldi	r23, 0x16	; 22
   1c2b2:	c7 01       	movw	r24, r14
   1c2b4:	0e 94 5d 33 	call	0x66ba	; 0x66ba <MATCHARGS>
   1c2b8:	89 2b       	or	r24, r25
   1c2ba:	51 f0       	breq	.+20     	; 0x1c2d0 <lif_tests+0x228>
    {
        lif_del_file(argv[ind],argv[ind+1]);
   1c2bc:	cc 0f       	add	r28, r28
   1c2be:	dd 1f       	adc	r29, r29
   1c2c0:	c0 0f       	add	r28, r16
   1c2c2:	d1 1f       	adc	r29, r17
   1c2c4:	6a 81       	ldd	r22, Y+2	; 0x02
   1c2c6:	7b 81       	ldd	r23, Y+3	; 0x03
   1c2c8:	88 81       	ld	r24, Y
   1c2ca:	99 81       	ldd	r25, Y+1	; 0x01
   1c2cc:	c4 dc       	rcall	.-1656   	; 0x1bc56 <lif_del_file>
   1c2ce:	9a c0       	rjmp	.+308    	; 0x1c404 <lif_tests+0x35c>
        return(1);
    }
    if (MATCHARGS(ptr,"dir", (ind + 1) ,argc))
   1c2d0:	96 01       	movw	r18, r12
   1c2d2:	ae 01       	movw	r20, r28
   1c2d4:	4f 5f       	subi	r20, 0xFF	; 255
   1c2d6:	5f 4f       	sbci	r21, 0xFF	; 255
   1c2d8:	66 ec       	ldi	r22, 0xC6	; 198
   1c2da:	7b e0       	ldi	r23, 0x0B	; 11
   1c2dc:	c7 01       	movw	r24, r14
   1c2de:	0e 94 5d 33 	call	0x66ba	; 0x66ba <MATCHARGS>
   1c2e2:	89 2b       	or	r24, r25
   1c2e4:	49 f0       	breq	.+18     	; 0x1c2f8 <lif_tests+0x250>
    {
        lif_dir(argv[ind]);
   1c2e6:	cc 0f       	add	r28, r28
   1c2e8:	dd 1f       	adc	r29, r29
   1c2ea:	c0 0f       	add	r28, r16
   1c2ec:	d1 1f       	adc	r29, r17
   1c2ee:	88 81       	ld	r24, Y
   1c2f0:	99 81       	ldd	r25, Y+1	; 0x01
   1c2f2:	0e 94 29 d3 	call	0x1a652	; 0x1a652 <lif_dir>
   1c2f6:	86 c0       	rjmp	.+268    	; 0x1c404 <lif_tests+0x35c>
        return(1);
    }
    if (MATCHARGS(ptr,"extractbin", (ind + 3) ,argc))
   1c2f8:	96 01       	movw	r18, r12
   1c2fa:	a5 01       	movw	r20, r10
   1c2fc:	61 e9       	ldi	r22, 0x91	; 145
   1c2fe:	76 e1       	ldi	r23, 0x16	; 22
   1c300:	c7 01       	movw	r24, r14
   1c302:	0e 94 5d 33 	call	0x66ba	; 0x66ba <MATCHARGS>
   1c306:	89 2b       	or	r24, r25
   1c308:	71 f0       	breq	.+28     	; 0x1c326 <lif_tests+0x27e>
    {

        lif_extract_lif_as_lif(argv[ind],argv[ind+1],argv[ind+2]);
   1c30a:	ce 01       	movw	r24, r28
   1c30c:	88 0f       	add	r24, r24
   1c30e:	99 1f       	adc	r25, r25
   1c310:	e8 01       	movw	r28, r16
   1c312:	c8 0f       	add	r28, r24
   1c314:	d9 1f       	adc	r29, r25
   1c316:	4c 81       	ldd	r20, Y+4	; 0x04
   1c318:	5d 81       	ldd	r21, Y+5	; 0x05
   1c31a:	6a 81       	ldd	r22, Y+2	; 0x02
   1c31c:	7b 81       	ldd	r23, Y+3	; 0x03
   1c31e:	88 81       	ld	r24, Y
   1c320:	99 81       	ldd	r25, Y+1	; 0x01
   1c322:	d8 d9       	rcall	.-3152   	; 0x1b6d4 <lif_extract_lif_as_lif>
   1c324:	6f c0       	rjmp	.+222    	; 0x1c404 <lif_tests+0x35c>
        return(1);
    }
    if (MATCHARGS(ptr,"extract", (ind + 3) ,argc))
   1c326:	96 01       	movw	r18, r12
   1c328:	a5 01       	movw	r20, r10
   1c32a:	6c e9       	ldi	r22, 0x9C	; 156
   1c32c:	76 e1       	ldi	r23, 0x16	; 22
   1c32e:	c7 01       	movw	r24, r14
   1c330:	0e 94 5d 33 	call	0x66ba	; 0x66ba <MATCHARGS>
   1c334:	89 2b       	or	r24, r25
   1c336:	79 f0       	breq	.+30     	; 0x1c356 <lif_tests+0x2ae>
    {

        lif_extract_e010_as_ascii(argv[ind],argv[ind+1],argv[ind+2]);
   1c338:	ce 01       	movw	r24, r28
   1c33a:	88 0f       	add	r24, r24
   1c33c:	99 1f       	adc	r25, r25
   1c33e:	e8 01       	movw	r28, r16
   1c340:	c8 0f       	add	r28, r24
   1c342:	d9 1f       	adc	r29, r25
   1c344:	4c 81       	ldd	r20, Y+4	; 0x04
   1c346:	5d 81       	ldd	r21, Y+5	; 0x05
   1c348:	6a 81       	ldd	r22, Y+2	; 0x02
   1c34a:	7b 81       	ldd	r23, Y+3	; 0x03
   1c34c:	88 81       	ld	r24, Y
   1c34e:	99 81       	ldd	r25, Y+1	; 0x01
   1c350:	0e 94 bb d8 	call	0x1b176	; 0x1b176 <lif_extract_e010_as_ascii>
   1c354:	57 c0       	rjmp	.+174    	; 0x1c404 <lif_tests+0x35c>
        return(1);
    }
    if (MATCHARGS(ptr,"rename", (ind + 3) ,argc))
   1c356:	96 01       	movw	r18, r12
   1c358:	a5 01       	movw	r20, r10
   1c35a:	63 ed       	ldi	r22, 0xD3	; 211
   1c35c:	7b e0       	ldi	r23, 0x0B	; 11
   1c35e:	c7 01       	movw	r24, r14
   1c360:	0e 94 5d 33 	call	0x66ba	; 0x66ba <MATCHARGS>
   1c364:	89 2b       	or	r24, r25
   1c366:	71 f0       	breq	.+28     	; 0x1c384 <lif_tests+0x2dc>
    {
        lif_rename_file(argv[ind],argv[ind+1],argv[ind+2]);
   1c368:	ce 01       	movw	r24, r28
   1c36a:	88 0f       	add	r24, r24
   1c36c:	99 1f       	adc	r25, r25
   1c36e:	e8 01       	movw	r28, r16
   1c370:	c8 0f       	add	r28, r24
   1c372:	d9 1f       	adc	r29, r25
   1c374:	4c 81       	ldd	r20, Y+4	; 0x04
   1c376:	5d 81       	ldd	r21, Y+5	; 0x05
   1c378:	6a 81       	ldd	r22, Y+2	; 0x02
   1c37a:	7b 81       	ldd	r23, Y+3	; 0x03
   1c37c:	88 81       	ld	r24, Y
   1c37e:	99 81       	ldd	r25, Y+1	; 0x01
   1c380:	00 dd       	rcall	.-1536   	; 0x1bd82 <lif_rename_file>
   1c382:	40 c0       	rjmp	.+128    	; 0x1c404 <lif_tests+0x35c>
        return(1);
    }

    if (MATCHARGS(ptr,"renamevol", (ind + 2) ,argc))
   1c384:	96 01       	movw	r18, r12
   1c386:	a4 01       	movw	r20, r8
   1c388:	64 ea       	ldi	r22, 0xA4	; 164
   1c38a:	76 e1       	ldi	r23, 0x16	; 22
   1c38c:	c7 01       	movw	r24, r14
   1c38e:	0e 94 5d 33 	call	0x66ba	; 0x66ba <MATCHARGS>
   1c392:	89 2b       	or	r24, r25
   1c394:	61 f0       	breq	.+24     	; 0x1c3ae <lif_tests+0x306>
    {
        lif_rename_volume(argv[ind],argv[ind+1]);
   1c396:	ce 01       	movw	r24, r28
   1c398:	88 0f       	add	r24, r24
   1c39a:	99 1f       	adc	r25, r25
   1c39c:	e8 01       	movw	r28, r16
   1c39e:	c8 0f       	add	r28, r24
   1c3a0:	d9 1f       	adc	r29, r25
   1c3a2:	6a 81       	ldd	r22, Y+2	; 0x02
   1c3a4:	7b 81       	ldd	r23, Y+3	; 0x03
   1c3a6:	88 81       	ld	r24, Y
   1c3a8:	99 81       	ldd	r25, Y+1	; 0x01
   1c3aa:	6a dd       	rcall	.-1324   	; 0x1be80 <lif_rename_volume>
   1c3ac:	2b c0       	rjmp	.+86     	; 0x1c404 <lif_tests+0x35c>
        return(1);
    }

	if(MATCHI_LEN(argv[0],"td02lif"))
   1c3ae:	6e ea       	ldi	r22, 0xAE	; 174
   1c3b0:	76 e1       	ldi	r23, 0x16	; 22
   1c3b2:	f8 01       	movw	r30, r16
   1c3b4:	80 81       	ld	r24, Z
   1c3b6:	91 81       	ldd	r25, Z+1	; 0x01
   1c3b8:	0e 94 87 33 	call	0x670e	; 0x670e <MATCHI_LEN>
   1c3bc:	89 2b       	or	r24, r25
   1c3be:	09 f4       	brne	.+2      	; 0x1c3c2 <lif_tests+0x31a>
   1c3c0:	7c ce       	rjmp	.-776    	; 0x1c0ba <lif_tests+0x12>
	{
		if(MATCHI(ptr,"help") || MATCHI(ptr,"-help") || MATCHI(ptr,"-?") )
   1c3c2:	62 e6       	ldi	r22, 0x62	; 98
   1c3c4:	76 e1       	ldi	r23, 0x16	; 22
   1c3c6:	c7 01       	movw	r24, r14
   1c3c8:	0e 94 49 33 	call	0x6692	; 0x6692 <MATCHI>
   1c3cc:	89 2b       	or	r24, r25
   1c3ce:	59 f0       	breq	.+22     	; 0x1c3e6 <lif_tests+0x33e>
		{
#ifdef TELEDISK
			td0_help(1);
			return(1);
#else
		    printf("td02lif support not enabled\n");
   1c3d0:	8d e1       	ldi	r24, 0x1D	; 29
   1c3d2:	95 e4       	ldi	r25, 0x45	; 69
   1c3d4:	a0 e0       	ldi	r26, 0x00	; 0
   1c3d6:	ed b7       	in	r30, 0x3d	; 61
   1c3d8:	fe b7       	in	r31, 0x3e	; 62
   1c3da:	81 83       	std	Z+1, r24	; 0x01
   1c3dc:	92 83       	std	Z+2, r25	; 0x02
   1c3de:	a3 83       	std	Z+3, r26	; 0x03
   1c3e0:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
   1c3e4:	0f c0       	rjmp	.+30     	; 0x1c404 <lif_tests+0x35c>
        return(1);
    }

	if(MATCHI_LEN(argv[0],"td02lif"))
	{
		if(MATCHI(ptr,"help") || MATCHI(ptr,"-help") || MATCHI(ptr,"-?") )
   1c3e6:	61 e6       	ldi	r22, 0x61	; 97
   1c3e8:	76 e1       	ldi	r23, 0x16	; 22
   1c3ea:	c7 01       	movw	r24, r14
   1c3ec:	0e 94 49 33 	call	0x6692	; 0x6692 <MATCHI>
   1c3f0:	89 2b       	or	r24, r25
   1c3f2:	71 f7       	brne	.-36     	; 0x1c3d0 <lif_tests+0x328>
   1c3f4:	67 e6       	ldi	r22, 0x67	; 103
   1c3f6:	76 e1       	ldi	r23, 0x16	; 22
   1c3f8:	c7 01       	movw	r24, r14
   1c3fa:	0e 94 49 33 	call	0x6692	; 0x6692 <MATCHI>
   1c3fe:	89 2b       	or	r24, r25
   1c400:	39 f7       	brne	.-50     	; 0x1c3d0 <lif_tests+0x328>
   1c402:	5b ce       	rjmp	.-842    	; 0x1c0ba <lif_tests+0x12>

// Argument 1 missing ?
//        Nothing to do
// argc should really get this
    if(!ptr || !*ptr)
        return(1);
   1c404:	81 e0       	ldi	r24, 0x01	; 1
        td02lif(argc,argv);
        return(1);
#endif
    }
    return(0);
}
   1c406:	90 e0       	ldi	r25, 0x00	; 0
   1c408:	cd b7       	in	r28, 0x3d	; 61
   1c40a:	de b7       	in	r29, 0x3e	; 62
   1c40c:	25 96       	adiw	r28, 0x05	; 5
   1c40e:	ec e0       	ldi	r30, 0x0C	; 12
   1c410:	bd c6       	rjmp	.+3450   	; 0x1d18c <__epilogue_restores__+0xc>

0001c412 <lcd_task>:
static int16_t lcd_display_time = 0;

///@brief LCD timer function called at 1000HZ
void lcd_task()
{
	++lcd_display_time;
   1c412:	80 91 ea 19 	lds	r24, 0x19EA	; 0x8019ea <lcd_display_time>
   1c416:	90 91 eb 19 	lds	r25, 0x19EB	; 0x8019eb <lcd_display_time+0x1>
   1c41a:	01 96       	adiw	r24, 0x01	; 1
   1c41c:	90 93 eb 19 	sts	0x19EB, r25	; 0x8019eb <lcd_display_time+0x1>
   1c420:	80 93 ea 19 	sts	0x19EA, r24	; 0x8019ea <lcd_display_time>
   1c424:	08 95       	ret

0001c426 <copyright>:
int8_t debug_input = 0;

///@brief Display Copyright
///@return void
void copyright()
{
   1c426:	00 d0       	rcall	.+0      	; 0x1c428 <copyright+0x2>
   1c428:	00 d0       	rcall	.+0      	; 0x1c42a <copyright+0x4>
   1c42a:	1f 92       	push	r1
    printf("HP85 Disk and Device Emulator with built in LIF utilities\n");
   1c42c:	8b e8       	ldi	r24, 0x8B	; 139
   1c42e:	9c e4       	ldi	r25, 0x4C	; 76
   1c430:	a0 e0       	ldi	r26, 0x00	; 0
   1c432:	ed b7       	in	r30, 0x3d	; 61
   1c434:	fe b7       	in	r31, 0x3e	; 62
   1c436:	81 83       	std	Z+1, r24	; 0x01
   1c438:	92 83       	std	Z+2, r25	; 0x02
   1c43a:	a3 83       	std	Z+3, r26	; 0x03
   1c43c:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
    printf(" (c) 2014-2020 by Mike Gore\n");
   1c440:	8e e6       	ldi	r24, 0x6E	; 110
   1c442:	9c e4       	ldi	r25, 0x4C	; 76
   1c444:	a0 e0       	ldi	r26, 0x00	; 0
   1c446:	ed b7       	in	r30, 0x3d	; 61
   1c448:	fe b7       	in	r31, 0x3e	; 62
   1c44a:	81 83       	std	Z+1, r24	; 0x01
   1c44c:	92 83       	std	Z+2, r25	; 0x02
   1c44e:	a3 83       	std	Z+3, r26	; 0x03
   1c450:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
    printf(" GNU version 3\n");
   1c454:	8e e5       	ldi	r24, 0x5E	; 94
   1c456:	9c e4       	ldi	r25, 0x4C	; 76
   1c458:	a0 e0       	ldi	r26, 0x00	; 0
   1c45a:	ed b7       	in	r30, 0x3d	; 61
   1c45c:	fe b7       	in	r31, 0x3e	; 62
   1c45e:	81 83       	std	Z+1, r24	; 0x01
   1c460:	92 83       	std	Z+2, r25	; 0x02
   1c462:	a3 83       	std	Z+3, r26	; 0x03
   1c464:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
    printf("-> https://github.com/magore/hp85disk\n");
   1c468:	87 e3       	ldi	r24, 0x37	; 55
   1c46a:	9c e4       	ldi	r25, 0x4C	; 76
   1c46c:	a0 e0       	ldi	r26, 0x00	; 0
   1c46e:	ed b7       	in	r30, 0x3d	; 61
   1c470:	fe b7       	in	r31, 0x3e	; 62
   1c472:	81 83       	std	Z+1, r24	; 0x01
   1c474:	92 83       	std	Z+2, r25	; 0x02
   1c476:	a3 83       	std	Z+3, r26	; 0x03
   1c478:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
    printf("   GIT last pushed:   %s\n", GIT_VERSION);
   1c47c:	86 eb       	ldi	r24, 0xB6	; 182
   1c47e:	96 e1       	ldi	r25, 0x16	; 22
   1c480:	ed b7       	in	r30, 0x3d	; 61
   1c482:	fe b7       	in	r31, 0x3e	; 62
   1c484:	95 83       	std	Z+5, r25	; 0x05
   1c486:	84 83       	std	Z+4, r24	; 0x04
   1c488:	8d e1       	ldi	r24, 0x1D	; 29
   1c48a:	9c e4       	ldi	r25, 0x4C	; 76
   1c48c:	a0 e0       	ldi	r26, 0x00	; 0
   1c48e:	81 83       	std	Z+1, r24	; 0x01
   1c490:	92 83       	std	Z+2, r25	; 0x02
   1c492:	a3 83       	std	Z+3, r26	; 0x03
   1c494:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
    printf("   Last updated file: %s\n", LOCAL_MOD);
   1c498:	8a ed       	ldi	r24, 0xDA	; 218
   1c49a:	96 e1       	ldi	r25, 0x16	; 22
   1c49c:	ed b7       	in	r30, 0x3d	; 61
   1c49e:	fe b7       	in	r31, 0x3e	; 62
   1c4a0:	95 83       	std	Z+5, r25	; 0x05
   1c4a2:	84 83       	std	Z+4, r24	; 0x04
   1c4a4:	83 e0       	ldi	r24, 0x03	; 3
   1c4a6:	9c e4       	ldi	r25, 0x4C	; 76
   1c4a8:	a0 e0       	ldi	r26, 0x00	; 0
   1c4aa:	81 83       	std	Z+1, r24	; 0x01
   1c4ac:	92 83       	std	Z+2, r25	; 0x02
   1c4ae:	a3 83       	std	Z+3, r26	; 0x03
   1c4b0:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
    printf("\n");
   1c4b4:	81 e0       	ldi	r24, 0x01	; 1
   1c4b6:	9c e4       	ldi	r25, 0x4C	; 76
   1c4b8:	a0 e0       	ldi	r26, 0x00	; 0
   1c4ba:	ed b7       	in	r30, 0x3d	; 61
   1c4bc:	fe b7       	in	r31, 0x3e	; 62
   1c4be:	81 83       	std	Z+1, r24	; 0x01
   1c4c0:	92 83       	std	Z+2, r25	; 0x02
   1c4c2:	a3 83       	std	Z+3, r26	; 0x03
   1c4c4:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
}
   1c4c8:	0f 90       	pop	r0
   1c4ca:	0f 90       	pop	r0
   1c4cc:	0f 90       	pop	r0
   1c4ce:	0f 90       	pop	r0
   1c4d0:	0f 90       	pop	r0
   1c4d2:	08 95       	ret

0001c4d4 <lcd_time>:
/// - Example output: "Thu Dec  8 21:45:05 EST 2011".
///
/// @return buf string pointer.
MEMSPACE
char *lcd_time(tm_t *t, char *buf, int max)
{
   1c4d4:	a1 e1       	ldi	r26, 0x11	; 17
   1c4d6:	b0 e0       	ldi	r27, 0x00	; 0
   1c4d8:	ef e6       	ldi	r30, 0x6F	; 111
   1c4da:	f2 ee       	ldi	r31, 0xE2	; 226
   1c4dc:	41 c6       	rjmp	.+3202   	; 0x1d160 <__prologue_saves__+0x18>
   1c4de:	ec 01       	movw	r28, r24
   1c4e0:	7b 01       	movw	r14, r22
   1c4e2:	8a 01       	movw	r16, r20
// normaize tm_t before output
    (void) normalize(t,0);
   1c4e4:	60 e0       	ldi	r22, 0x00	; 0
   1c4e6:	70 e0       	ldi	r23, 0x00	; 0
   1c4e8:	0e 94 9b 39 	call	0x7336	; 0x7336 <normalize>
    memset(buf,0,max);
   1c4ec:	a8 01       	movw	r20, r16
   1c4ee:	60 e0       	ldi	r22, 0x00	; 0
   1c4f0:	70 e0       	ldi	r23, 0x00	; 0
   1c4f2:	c7 01       	movw	r24, r14
   1c4f4:	0e 94 9c ec 	call	0x1d938	; 0x1d938 <memset>
    snprintf(buf,max-1,"%s %2d %02d:%02d:%02d",
   1c4f8:	88 85       	ldd	r24, Y+8	; 0x08
   1c4fa:	99 85       	ldd	r25, Y+9	; 0x09
   1c4fc:	0e 94 80 37 	call	0x6f00	; 0x6f00 <tm_mon_to_ascii>
   1c500:	28 81       	ld	r18, Y
   1c502:	39 81       	ldd	r19, Y+1	; 0x01
   1c504:	ed b7       	in	r30, 0x3d	; 61
   1c506:	fe b7       	in	r31, 0x3e	; 62
   1c508:	31 8b       	std	Z+17, r19	; 0x11
   1c50a:	20 8b       	std	Z+16, r18	; 0x10
   1c50c:	2a 81       	ldd	r18, Y+2	; 0x02
   1c50e:	3b 81       	ldd	r19, Y+3	; 0x03
   1c510:	37 87       	std	Z+15, r19	; 0x0f
   1c512:	26 87       	std	Z+14, r18	; 0x0e
   1c514:	2c 81       	ldd	r18, Y+4	; 0x04
   1c516:	3d 81       	ldd	r19, Y+5	; 0x05
   1c518:	35 87       	std	Z+13, r19	; 0x0d
   1c51a:	24 87       	std	Z+12, r18	; 0x0c
   1c51c:	2e 81       	ldd	r18, Y+6	; 0x06
   1c51e:	3f 81       	ldd	r19, Y+7	; 0x07
   1c520:	33 87       	std	Z+11, r19	; 0x0b
   1c522:	22 87       	std	Z+10, r18	; 0x0a
   1c524:	91 87       	std	Z+9, r25	; 0x09
   1c526:	80 87       	std	Z+8, r24	; 0x08
   1c528:	8b ee       	ldi	r24, 0xEB	; 235
   1c52a:	9b e4       	ldi	r25, 0x4B	; 75
   1c52c:	a0 e0       	ldi	r26, 0x00	; 0
   1c52e:	85 83       	std	Z+5, r24	; 0x05
   1c530:	96 83       	std	Z+6, r25	; 0x06
   1c532:	a7 83       	std	Z+7, r26	; 0x07
   1c534:	01 50       	subi	r16, 0x01	; 1
   1c536:	11 09       	sbc	r17, r1
   1c538:	14 83       	std	Z+4, r17	; 0x04
   1c53a:	03 83       	std	Z+3, r16	; 0x03
   1c53c:	f2 82       	std	Z+2, r15	; 0x02
   1c53e:	e1 82       	std	Z+1, r14	; 0x01
   1c540:	0e 94 d4 47 	call	0x8fa8	; 0x8fa8 <snprintf_P>
        (int)t->tm_mday,
        (int)t->tm_hour,
        (int)t->tm_min,
        (int)t->tm_sec);
    return(buf);
}
   1c544:	c7 01       	movw	r24, r14
   1c546:	cd b7       	in	r28, 0x3d	; 61
   1c548:	de b7       	in	r29, 0x3e	; 62
   1c54a:	61 96       	adiw	r28, 0x11	; 17
   1c54c:	e6 e0       	ldi	r30, 0x06	; 6
   1c54e:	24 c6       	rjmp	.+3144   	; 0x1d198 <__epilogue_restores__+0x18>

0001c550 <lcd_backlight>:

///@brief lcd_backlight LCD Backlight settings
/// @param[in] rgb: hex value 0xRRGGBB, RR,GG,BB values are 0 to 255
uint8_t  _backlight[5] = { 0x7c, '+', 0x80, 0x80, 0x80 };	/* Backlight half bright */
uint8_t lcd_backlight(uint32_t rgb)
{
   1c550:	cf 93       	push	r28
   1c552:	00 d0       	rcall	.+0      	; 0x1c554 <lcd_backlight+0x4>
   1c554:	1f 92       	push	r1

	_backlight[2] = 0xff & (rgb >> 16);
   1c556:	80 93 f2 02 	sts	0x02F2, r24	; 0x8002f2 <_backlight+0x2>
	_backlight[3] = 0xff & (rgb >> 8);
   1c55a:	70 93 f3 02 	sts	0x02F3, r23	; 0x8002f3 <_backlight+0x3>
	_backlight[4] = 0xff & (rgb );
   1c55e:	60 93 f4 02 	sts	0x02F4, r22	; 0x8002f4 <_backlight+0x4>

	if(! i2c_fn(0x72, TW_WRITE, _backlight, sizeof(_backlight)) )
   1c562:	25 e0       	ldi	r18, 0x05	; 5
   1c564:	40 ef       	ldi	r20, 0xF0	; 240
   1c566:	52 e0       	ldi	r21, 0x02	; 2
   1c568:	60 e0       	ldi	r22, 0x00	; 0
   1c56a:	82 e7       	ldi	r24, 0x72	; 114
   1c56c:	0e 94 c7 2d 	call	0x5b8e	; 0x5b8e <i2c_fn>
   1c570:	c8 2f       	mov	r28, r24
   1c572:	81 11       	cpse	r24, r1
   1c574:	0d c0       	rjmp	.+26     	; 0x1c590 <lcd_backlight+0x40>
	{
		i2c_display_task_errors();
   1c576:	0e 94 cb 2f 	call	0x5f96	; 0x5f96 <i2c_display_task_errors>
        printf("I2C LCD is NOT attached!\n");
   1c57a:	81 ed       	ldi	r24, 0xD1	; 209
   1c57c:	9b e4       	ldi	r25, 0x4B	; 75
   1c57e:	a0 e0       	ldi	r26, 0x00	; 0
   1c580:	ed b7       	in	r30, 0x3d	; 61
   1c582:	fe b7       	in	r31, 0x3e	; 62
   1c584:	81 83       	std	Z+1, r24	; 0x01
   1c586:	92 83       	std	Z+2, r25	; 0x02
   1c588:	a3 83       	std	Z+3, r26	; 0x03
   1c58a:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
   1c58e:	01 c0       	rjmp	.+2      	; 0x1c592 <lcd_backlight+0x42>
		return(0);
	}
	return(1);
   1c590:	c1 e0       	ldi	r28, 0x01	; 1
}
   1c592:	8c 2f       	mov	r24, r28
   1c594:	0f 90       	pop	r0
   1c596:	0f 90       	pop	r0
   1c598:	0f 90       	pop	r0
   1c59a:	cf 91       	pop	r28
   1c59c:	08 95       	ret

0001c59e <lcd_setup>:
///@brief LCD setup code
/// For a SparkFun SERLCD 2x16 display
/// Initializes the I2C deiplay update task structure 
/// Passes the structures to the interrupt handler
void lcd_setup()
{
   1c59e:	cf 93       	push	r28
   1c5a0:	ad b7       	in	r26, 0x3d	; 61
   1c5a2:	be b7       	in	r27, 0x3e	; 62
   1c5a4:	17 97       	sbiw	r26, 0x07	; 7
   1c5a6:	0f b6       	in	r0, 0x3f	; 63
   1c5a8:	f8 94       	cli
   1c5aa:	be bf       	out	0x3e, r27	; 62
   1c5ac:	0f be       	out	0x3f, r0	; 63
   1c5ae:	ad bf       	out	0x3d, r26	; 61
	int ind = 0;
    uint8_t sreg = SREG;
   1c5b0:	cf b7       	in	r28, 0x3f	; 63

    printf("I2C LCD initialization start\n");
   1c5b2:	83 eb       	ldi	r24, 0xB3	; 179
   1c5b4:	9b e4       	ldi	r25, 0x4B	; 75
   1c5b6:	a0 e0       	ldi	r26, 0x00	; 0
   1c5b8:	ed b7       	in	r30, 0x3d	; 61
   1c5ba:	fe b7       	in	r31, 0x3e	; 62
   1c5bc:	81 83       	std	Z+1, r24	; 0x01
   1c5be:	92 83       	std	Z+2, r25	; 0x02
   1c5c0:	a3 83       	std	Z+3, r26	; 0x03
   1c5c2:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>

	if(set_timers(lcd_task,1) == -1)
   1c5c6:	61 e0       	ldi	r22, 0x01	; 1
   1c5c8:	70 e0       	ldi	r23, 0x00	; 0
   1c5ca:	89 e0       	ldi	r24, 0x09	; 9
   1c5cc:	92 ee       	ldi	r25, 0xE2	; 226
   1c5ce:	0e 94 aa 35 	call	0x6b54	; 0x6b54 <set_timers>
   1c5d2:	01 96       	adiw	r24, 0x01	; 1
   1c5d4:	51 f4       	brne	.+20     	; 0x1c5ea <lcd_setup+0x4c>
        printf("lcd_task init failed\n");
   1c5d6:	8d e9       	ldi	r24, 0x9D	; 157
   1c5d8:	9b e4       	ldi	r25, 0x4B	; 75
   1c5da:	a0 e0       	ldi	r26, 0x00	; 0
   1c5dc:	ed b7       	in	r30, 0x3d	; 61
   1c5de:	fe b7       	in	r31, 0x3e	; 62
   1c5e0:	81 83       	std	Z+1, r24	; 0x01
   1c5e2:	92 83       	std	Z+2, r25	; 0x02
   1c5e4:	a3 83       	std	Z+3, r26	; 0x03
   1c5e6:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>

	i2c_init(100000);
   1c5ea:	60 ea       	ldi	r22, 0xA0	; 160
   1c5ec:	76 e8       	ldi	r23, 0x86	; 134
   1c5ee:	81 e0       	ldi	r24, 0x01	; 1
   1c5f0:	90 e0       	ldi	r25, 0x00	; 0
   1c5f2:	0e 94 ce 2c 	call	0x599c	; 0x599c <i2c_init>

	i2c_task_init();
   1c5f6:	0e 94 8f 2c 	call	0x591e	; 0x591e <i2c_task_init>

	cli();
   1c5fa:	f8 94       	cli

	// Default startup message
    sprintf((char *) _line1, "%-16s", "HP85Disk V2");
   1c5fc:	8e ef       	ldi	r24, 0xFE	; 254
   1c5fe:	96 e1       	ldi	r25, 0x16	; 22
   1c600:	ed b7       	in	r30, 0x3d	; 61
   1c602:	fe b7       	in	r31, 0x3e	; 62
   1c604:	97 83       	std	Z+7, r25	; 0x07
   1c606:	86 83       	std	Z+6, r24	; 0x06
   1c608:	87 e9       	ldi	r24, 0x97	; 151
   1c60a:	9b e4       	ldi	r25, 0x4B	; 75
   1c60c:	a0 e0       	ldi	r26, 0x00	; 0
   1c60e:	83 83       	std	Z+3, r24	; 0x03
   1c610:	94 83       	std	Z+4, r25	; 0x04
   1c612:	a5 83       	std	Z+5, r26	; 0x05
   1c614:	8c e0       	ldi	r24, 0x0C	; 12
   1c616:	93 e0       	ldi	r25, 0x03	; 3
   1c618:	92 83       	std	Z+2, r25	; 0x02
   1c61a:	81 83       	std	Z+1, r24	; 0x01
   1c61c:	0e 94 e8 47 	call	0x8fd0	; 0x8fd0 <sprintf_P>
    sprintf((char *) _line2, "%-16s", "(C)Mike Gore");
   1c620:	8a e0       	ldi	r24, 0x0A	; 10
   1c622:	97 e1       	ldi	r25, 0x17	; 23
   1c624:	ed b7       	in	r30, 0x3d	; 61
   1c626:	fe b7       	in	r31, 0x3e	; 62
   1c628:	97 83       	std	Z+7, r25	; 0x07
   1c62a:	86 83       	std	Z+6, r24	; 0x06
   1c62c:	81 e9       	ldi	r24, 0x91	; 145
   1c62e:	9b e4       	ldi	r25, 0x4B	; 75
   1c630:	a0 e0       	ldi	r26, 0x00	; 0
   1c632:	83 83       	std	Z+3, r24	; 0x03
   1c634:	94 83       	std	Z+4, r25	; 0x04
   1c636:	a5 83       	std	Z+5, r26	; 0x05
   1c638:	85 ef       	ldi	r24, 0xF5	; 245
   1c63a:	92 e0       	ldi	r25, 0x02	; 2
   1c63c:	92 83       	std	Z+2, r25	; 0x02
   1c63e:	81 83       	std	Z+1, r24	; 0x01
   1c640:	0e 94 e8 47 	call	0x8fd0	; 0x8fd0 <sprintf_P>

	i2c_task_op[ind++] = i2c_task_op_add(0x72, TW_WRITE, _cmd1, sizeof(_cmd1));
   1c644:	22 e0       	ldi	r18, 0x02	; 2
   1c646:	41 e2       	ldi	r20, 0x21	; 33
   1c648:	53 e0       	ldi	r21, 0x03	; 3
   1c64a:	60 e0       	ldi	r22, 0x00	; 0
   1c64c:	82 e7       	ldi	r24, 0x72	; 114
   1c64e:	0e 94 a4 2c 	call	0x5948	; 0x5948 <i2c_task_op_add>
   1c652:	90 93 57 17 	sts	0x1757, r25	; 0x801757 <i2c_task_op+0x1>
   1c656:	80 93 56 17 	sts	0x1756, r24	; 0x801756 <i2c_task_op>
	i2c_task_op[ind++] = i2c_task_op_add(0x72, TW_WRITE, _line1, 16);
   1c65a:	20 e1       	ldi	r18, 0x10	; 16
   1c65c:	4c e0       	ldi	r20, 0x0C	; 12
   1c65e:	53 e0       	ldi	r21, 0x03	; 3
   1c660:	60 e0       	ldi	r22, 0x00	; 0
   1c662:	82 e7       	ldi	r24, 0x72	; 114
   1c664:	0e 94 a4 2c 	call	0x5948	; 0x5948 <i2c_task_op_add>
   1c668:	90 93 59 17 	sts	0x1759, r25	; 0x801759 <i2c_task_op+0x3>
   1c66c:	80 93 58 17 	sts	0x1758, r24	; 0x801758 <i2c_task_op+0x2>
	i2c_task_op[ind++] = i2c_task_op_add(0x72, TW_WRITE, _cmd2, sizeof(_cmd2));
   1c670:	22 e0       	ldi	r18, 0x02	; 2
   1c672:	4a e0       	ldi	r20, 0x0A	; 10
   1c674:	53 e0       	ldi	r21, 0x03	; 3
   1c676:	60 e0       	ldi	r22, 0x00	; 0
   1c678:	82 e7       	ldi	r24, 0x72	; 114
   1c67a:	0e 94 a4 2c 	call	0x5948	; 0x5948 <i2c_task_op_add>
   1c67e:	90 93 5b 17 	sts	0x175B, r25	; 0x80175b <i2c_task_op+0x5>
   1c682:	80 93 5a 17 	sts	0x175A, r24	; 0x80175a <i2c_task_op+0x4>
	i2c_task_op[ind++] = i2c_task_op_add(0x72, TW_WRITE, _line2, 16);
   1c686:	20 e1       	ldi	r18, 0x10	; 16
   1c688:	45 ef       	ldi	r20, 0xF5	; 245
   1c68a:	52 e0       	ldi	r21, 0x02	; 2
   1c68c:	60 e0       	ldi	r22, 0x00	; 0
   1c68e:	82 e7       	ldi	r24, 0x72	; 114
   1c690:	0e 94 a4 2c 	call	0x5948	; 0x5948 <i2c_task_op_add>
   1c694:	90 93 5d 17 	sts	0x175D, r25	; 0x80175d <i2c_task_op+0x7>
   1c698:	80 93 5c 17 	sts	0x175C, r24	; 0x80175c <i2c_task_op+0x6>

	SREG = sreg;
   1c69c:	cf bf       	out	0x3f, r28	; 63

    i2c_task_run();
   1c69e:	0e 94 64 2d 	call	0x5ac8	; 0x5ac8 <i2c_task_run>
	// wait long enough for us to see the startup message
    delayms(1000);
   1c6a2:	68 ee       	ldi	r22, 0xE8	; 232
   1c6a4:	73 e0       	ldi	r23, 0x03	; 3
   1c6a6:	80 e0       	ldi	r24, 0x00	; 0
   1c6a8:	90 e0       	ldi	r25, 0x00	; 0
   1c6aa:	0e 94 d2 28 	call	0x51a4	; 0x51a4 <delayms>
	
	// Verify the task finished - it normally takes < 30mS
    if(!i2c_task_done())
   1c6ae:	0e 94 45 2d 	call	0x5a8a	; 0x5a8a <i2c_task_done>
   1c6b2:	81 11       	cpse	r24, r1
   1c6b4:	0c c0       	rjmp	.+24     	; 0x1c6ce <lcd_setup+0x130>
	{
		i2c_display_task_errors();
   1c6b6:	0e 94 cb 2f 	call	0x5f96	; 0x5f96 <i2c_display_task_errors>
        printf("I2C LCD is NOT attached!\n");
   1c6ba:	87 e7       	ldi	r24, 0x77	; 119
   1c6bc:	9b e4       	ldi	r25, 0x4B	; 75
   1c6be:	a0 e0       	ldi	r26, 0x00	; 0
   1c6c0:	ed b7       	in	r30, 0x3d	; 61
   1c6c2:	fe b7       	in	r31, 0x3e	; 62
   1c6c4:	81 83       	std	Z+1, r24	; 0x01
   1c6c6:	92 83       	std	Z+2, r25	; 0x02
   1c6c8:	a3 83       	std	Z+3, r26	; 0x03
   1c6ca:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
	}

    sep();
   1c6ce:	0e 94 0b 33 	call	0x6616	; 0x6616 <sep>
}
   1c6d2:	ad b7       	in	r26, 0x3d	; 61
   1c6d4:	be b7       	in	r27, 0x3e	; 62
   1c6d6:	17 96       	adiw	r26, 0x07	; 7
   1c6d8:	0f b6       	in	r0, 0x3f	; 63
   1c6da:	f8 94       	cli
   1c6dc:	be bf       	out	0x3e, r27	; 62
   1c6de:	0f be       	out	0x3f, r0	; 63
   1c6e0:	ad bf       	out	0x3d, r26	; 61
   1c6e2:	cf 91       	pop	r28
   1c6e4:	08 95       	ret

0001c6e6 <i2c_lcd_task>:


///@brief Update the LCD wile the system is running
/// Display SD card fault status and the current time
void i2c_lcd_task()
{
   1c6e6:	af e2       	ldi	r26, 0x2F	; 47
   1c6e8:	b0 e0       	ldi	r27, 0x00	; 0
   1c6ea:	e8 e7       	ldi	r30, 0x78	; 120
   1c6ec:	f3 ee       	ldi	r31, 0xE3	; 227
   1c6ee:	3b c5       	rjmp	.+2678   	; 0x1d166 <__prologue_saves__+0x1e>
	char buf[32];
	uint8_t sreg=SREG;
   1c6f0:	1f b7       	in	r17, 0x3f	; 63
    ts_t ts;

	cli();
   1c6f2:	f8 94       	cli
	if(!mmc_ins_status())
   1c6f4:	0e 94 ea 6f 	call	0xdfd4	; 0xdfd4 <mmc_ins_status>
   1c6f8:	89 2b       	or	r24, r25
   1c6fa:	49 f4       	brne	.+18     	; 0x1c70e <i2c_lcd_task+0x28>
	{
		sprintf((char *) _line2,"%-16s", "SD Card Fault");
   1c6fc:	87 e1       	ldi	r24, 0x17	; 23
   1c6fe:	97 e1       	ldi	r25, 0x17	; 23
   1c700:	ed b7       	in	r30, 0x3d	; 61
   1c702:	fe b7       	in	r31, 0x3e	; 62
   1c704:	97 83       	std	Z+7, r25	; 0x07
   1c706:	86 83       	std	Z+6, r24	; 0x06
   1c708:	81 e7       	ldi	r24, 0x71	; 113
   1c70a:	9b e4       	ldi	r25, 0x4B	; 75
   1c70c:	17 c0       	rjmp	.+46     	; 0x1c73c <i2c_lcd_task+0x56>
	}
	else
	{
		clock_gettime(0, (ts_t *) &ts);
   1c70e:	be 01       	movw	r22, r28
   1c710:	68 5d       	subi	r22, 0xD8	; 216
   1c712:	7f 4f       	sbci	r23, 0xFF	; 255
   1c714:	80 e0       	ldi	r24, 0x00	; 0
   1c716:	90 e0       	ldi	r25, 0x00	; 0
   1c718:	0e 94 ba 34 	call	0x6974	; 0x6974 <clock_gettime>
		sprintf((char *) _line2, "%-16s", lcd_time(gmtime(&(ts.tv_sec)),buf,sizeof(buf)-1) );
   1c71c:	ce 01       	movw	r24, r28
   1c71e:	88 96       	adiw	r24, 0x28	; 40
   1c720:	0e 94 a4 38 	call	0x7148	; 0x7148 <gmtime>
   1c724:	4f e1       	ldi	r20, 0x1F	; 31
   1c726:	50 e0       	ldi	r21, 0x00	; 0
   1c728:	be 01       	movw	r22, r28
   1c72a:	68 5f       	subi	r22, 0xF8	; 248
   1c72c:	7f 4f       	sbci	r23, 0xFF	; 255
   1c72e:	d2 de       	rcall	.-604    	; 0x1c4d4 <lcd_time>
   1c730:	ed b7       	in	r30, 0x3d	; 61
   1c732:	fe b7       	in	r31, 0x3e	; 62
   1c734:	97 83       	std	Z+7, r25	; 0x07
   1c736:	86 83       	std	Z+6, r24	; 0x06
   1c738:	8b e6       	ldi	r24, 0x6B	; 107
   1c73a:	9b e4       	ldi	r25, 0x4B	; 75
   1c73c:	a0 e0       	ldi	r26, 0x00	; 0
   1c73e:	83 83       	std	Z+3, r24	; 0x03
   1c740:	94 83       	std	Z+4, r25	; 0x04
   1c742:	a5 83       	std	Z+5, r26	; 0x05
   1c744:	85 ef       	ldi	r24, 0xF5	; 245
   1c746:	92 e0       	ldi	r25, 0x02	; 2
   1c748:	92 83       	std	Z+2, r25	; 0x02
   1c74a:	81 83       	std	Z+1, r24	; 0x01
   1c74c:	0e 94 e8 47 	call	0x8fd0	; 0x8fd0 <sprintf_P>
		// sprintf((char *) _line2,"%16ld.%03ld", (long) ts.tv_sec, (long) ts.tv_nsec / 1000000UL);
	}
	SREG=sreg;
   1c750:	1f bf       	out	0x3f, r17	; 63

    i2c_task_run();
   1c752:	0e 94 64 2d 	call	0x5ac8	; 0x5ac8 <i2c_task_run>
}
   1c756:	af 96       	adiw	r28, 0x2f	; 47
   1c758:	e3 e0       	ldi	r30, 0x03	; 3
   1c75a:	21 c5       	rjmp	.+2626   	; 0x1d19e <__epilogue_restores__+0x1e>

0001c75c <gpib_user_task>:
///@brief GPIB callback from gpib_read_byte()
/// This function gets called evry time trough the read loop
/// This task run in the forground - is not an interrupt task
void gpib_user_task()
{
	uint8_t sreg = SREG;
   1c75c:	8f b7       	in	r24, 0x3f	; 63

	cli();
   1c75e:	f8 94       	cli
	if(lcd_display_time > 100) // increments at 1000HZ
   1c760:	20 91 ea 19 	lds	r18, 0x19EA	; 0x8019ea <lcd_display_time>
   1c764:	30 91 eb 19 	lds	r19, 0x19EB	; 0x8019eb <lcd_display_time+0x1>
   1c768:	25 36       	cpi	r18, 0x65	; 101
   1c76a:	31 05       	cpc	r19, r1
   1c76c:	3c f0       	brlt	.+14     	; 0x1c77c <gpib_user_task+0x20>
	{
		lcd_display_time = 0;
   1c76e:	10 92 eb 19 	sts	0x19EB, r1	; 0x8019eb <lcd_display_time+0x1>
   1c772:	10 92 ea 19 	sts	0x19EA, r1	; 0x8019ea <lcd_display_time>
		SREG = sreg;
   1c776:	8f bf       	out	0x3f, r24	; 63
		i2c_lcd_task();
   1c778:	b6 cf       	rjmp	.-148    	; 0x1c6e6 <i2c_lcd_task>
		return;
   1c77a:	08 95       	ret
	}
	SREG = sreg;
   1c77c:	8f bf       	out	0x3f, r24	; 63
   1c77e:	08 95       	ret

0001c780 <help>:
/// @brief  Display the main help menu - calls all other help menus
/// @return  void
/// @see gpib_help()
/// @see fatfs_help()
void help()
{
   1c780:	00 d0       	rcall	.+0      	; 0x1c782 <help+0x2>
   1c782:	1f 92       	push	r1

    copyright();
   1c784:	50 de       	rcall	.-864    	; 0x1c426 <copyright>

	printf("help     - displays this help menu\n");
   1c786:	87 e4       	ldi	r24, 0x47	; 71
   1c788:	9b e4       	ldi	r25, 0x4B	; 75
   1c78a:	a0 e0       	ldi	r26, 0x00	; 0
   1c78c:	ed b7       	in	r30, 0x3d	; 61
   1c78e:	fe b7       	in	r31, 0x3e	; 62
   1c790:	81 83       	std	Z+1, r24	; 0x01
   1c792:	92 83       	std	Z+2, r25	; 0x02
   1c794:	a3 83       	std	Z+3, r26	; 0x03
   1c796:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>

#ifdef LCD_SUPPORT
    printf("backlight 0xRRGGBB - format 0x[00-FF][00-FF][00-FF]\n");
   1c79a:	82 e1       	ldi	r24, 0x12	; 18
   1c79c:	9b e4       	ldi	r25, 0x4B	; 75
   1c79e:	a0 e0       	ldi	r26, 0x00	; 0
   1c7a0:	ed b7       	in	r30, 0x3d	; 61
   1c7a2:	fe b7       	in	r31, 0x3e	; 62
   1c7a4:	81 83       	std	Z+1, r24	; 0x01
   1c7a6:	92 83       	std	Z+2, r25	; 0x02
   1c7a8:	a3 83       	std	Z+3, r26	; 0x03
   1c7aa:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
#endif
    printf("dir       Directory list MSDOS format\n");
   1c7ae:	8b ee       	ldi	r24, 0xEB	; 235
   1c7b0:	9a e4       	ldi	r25, 0x4A	; 74
   1c7b2:	a0 e0       	ldi	r26, 0x00	; 0
   1c7b4:	ed b7       	in	r30, 0x3d	; 61
   1c7b6:	fe b7       	in	r31, 0x3e	; 62
   1c7b8:	81 83       	std	Z+1, r24	; 0x01
   1c7ba:	92 83       	std	Z+2, r25	; 0x02
   1c7bc:	a3 83       	std	Z+3, r26	; 0x03
   1c7be:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>

	drives_help(0);
   1c7c2:	80 e0       	ldi	r24, 0x00	; 0
   1c7c4:	0e 94 08 9d 	call	0x13a10	; 0x13a10 <drives_help>

#ifdef FATFS_TESTS
    fatfs_help(0);
   1c7c8:	80 e0       	ldi	r24, 0x00	; 0
   1c7ca:	90 e0       	ldi	r25, 0x00	; 0
   1c7cc:	0e 94 84 74 	call	0xe908	; 0xe908 <fatfs_help>
#endif
	gpib_help(0);
   1c7d0:	80 e0       	ldi	r24, 0x00	; 0
   1c7d2:	90 e0       	ldi	r25, 0x00	; 0
   1c7d4:	0e 94 e1 92 	call	0x125c2	; 0x125c2 <gpib_help>

#ifdef LIF_SUPPORT
    lif_help(0);
   1c7d8:	80 e0       	ldi	r24, 0x00	; 0
   1c7da:	90 e0       	ldi	r25, 0x00	; 0
   1c7dc:	0e 94 ad c1 	call	0x1835a	; 0x1835a <lif_help>
#endif

#ifdef POSIX_TESTS
    posix_help(0);
   1c7e0:	80 e0       	ldi	r24, 0x00	; 0
   1c7e2:	90 e0       	ldi	r25, 0x00	; 0
   1c7e4:	0e 94 80 7f 	call	0xff00	; 0xff00 <posix_help>
#endif

    printf(
   1c7e8:	8b ea       	ldi	r24, 0xAB	; 171
   1c7ea:	9a e4       	ldi	r25, 0x4A	; 74
   1c7ec:	a0 e0       	ldi	r26, 0x00	; 0
   1c7ee:	ed b7       	in	r30, 0x3d	; 61
   1c7f0:	fe b7       	in	r31, 0x3e	; 62
   1c7f2:	81 83       	std	Z+1, r24	; 0x01
   1c7f4:	92 83       	std	Z+2, r25	; 0x02
   1c7f6:	a3 83       	std	Z+3, r26	; 0x03
   1c7f8:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
        "setdate - set date - prompts for date\n");
#ifdef TELEDISK
    td0_help(0);
#endif

    printf(
   1c7fc:	81 e8       	ldi	r24, 0x81	; 129
   1c7fe:	9a e4       	ldi	r25, 0x4A	; 74
   1c800:	a0 e0       	ldi	r26, 0x00	; 0
   1c802:	ed b7       	in	r30, 0x3d	; 61
   1c804:	fe b7       	in	r31, 0x3e	; 62
   1c806:	81 83       	std	Z+1, r24	; 0x01
   1c808:	92 83       	std	Z+2, r25	; 0x02
   1c80a:	a3 83       	std	Z+3, r26	; 0x03
   1c80c:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
        "time    - display current date and time\n"
		"\n");

/* CPU debugging */
    printf(
   1c810:	89 e3       	ldi	r24, 0x39	; 57
   1c812:	9a e4       	ldi	r25, 0x4A	; 74
   1c814:	a0 e0       	ldi	r26, 0x00	; 0
   1c816:	ed b7       	in	r30, 0x3d	; 61
   1c818:	fe b7       	in	r31, 0x3e	; 62
   1c81a:	81 83       	std	Z+1, r24	; 0x01
   1c81c:	92 83       	std	Z+2, r25	; 0x02
   1c81e:	a3 83       	std	Z+3, r26	; 0x03
   1c820:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
        "mem     - Display free memory\n"
        );
#ifdef PORTIO_TESTS
	portio_help(0);
#endif
	printf("\n");
   1c824:	87 e3       	ldi	r24, 0x37	; 55
   1c826:	9a e4       	ldi	r25, 0x4A	; 74
   1c828:	a0 e0       	ldi	r26, 0x00	; 0
   1c82a:	ed b7       	in	r30, 0x3d	; 61
   1c82c:	fe b7       	in	r31, 0x3e	; 62
   1c82e:	81 83       	std	Z+1, r24	; 0x01
   1c830:	92 83       	std	Z+2, r25	; 0x02
   1c832:	a3 83       	std	Z+3, r26	; 0x03
   1c834:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>

}
   1c838:	0f 90       	pop	r0
   1c83a:	0f 90       	pop	r0
   1c83c:	0f 90       	pop	r0
   1c83e:	08 95       	ret

0001c840 <user_task.part.1>:
/// If a keypress is detected read a line from the uart
/// parse the result and call various user functions.
/// ? will return a list of fuctions and paramters permitted
/// @param[in] gpib - if non-zero run gpib while there are no user commands
/// @return  void
void user_task(uint8_t gpib)
   1c840:	6f 92       	push	r6
   1c842:	7f 92       	push	r7
   1c844:	8f 92       	push	r8
   1c846:	af 92       	push	r10
   1c848:	bf 92       	push	r11
   1c84a:	cf 92       	push	r12
   1c84c:	df 92       	push	r13
   1c84e:	ef 92       	push	r14
   1c850:	ff 92       	push	r15
   1c852:	0f 93       	push	r16
   1c854:	1f 93       	push	r17
   1c856:	cf 93       	push	r28
   1c858:	df 93       	push	r29
   1c85a:	cd b7       	in	r28, 0x3d	; 61
   1c85c:	de b7       	in	r29, 0x3e	; 62
   1c85e:	cb 56       	subi	r28, 0x6B	; 107
   1c860:	d1 40       	sbci	r29, 0x01	; 1
   1c862:	0f b6       	in	r0, 0x3f	; 63
   1c864:	f8 94       	cli
   1c866:	de bf       	out	0x3e, r29	; 62
   1c868:	0f be       	out	0x3f, r0	; 63
   1c86a:	cd bf       	out	0x3d, r28	; 61
        gpib_task();

    if(!kbhit(0))
        return;

    printf("\n>");
   1c86c:	84 e3       	ldi	r24, 0x34	; 52
   1c86e:	9a e4       	ldi	r25, 0x4A	; 74
   1c870:	a0 e0       	ldi	r26, 0x00	; 0
   1c872:	ed b7       	in	r30, 0x3d	; 61
   1c874:	fe b7       	in	r31, 0x3e	; 62
   1c876:	81 83       	std	Z+1, r24	; 0x01
   1c878:	92 83       	std	Z+2, r25	; 0x02
   1c87a:	a3 83       	std	Z+3, r26	; 0x03
   1c87c:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>

	memset(line,0,sizeof(line)-1);
   1c880:	8e 01       	movw	r16, r28
   1c882:	0a 5f       	subi	r16, 0xFA	; 250
   1c884:	1f 4f       	sbci	r17, 0xFF	; 255
   1c886:	8f ef       	ldi	r24, 0xFF	; 255
   1c888:	f8 01       	movw	r30, r16
   1c88a:	11 92       	st	Z+, r1
   1c88c:	8a 95       	dec	r24
   1c88e:	e9 f7       	brne	.-6      	; 0x1c88a <user_task.part.1+0x4a>

    fgets(line,sizeof(line)-2,stdin);
   1c890:	40 91 bf 1c 	lds	r20, 0x1CBF	; 0x801cbf <__iob>
   1c894:	50 91 c0 1c 	lds	r21, 0x1CC0	; 0x801cc0 <__iob+0x1>
   1c898:	6e ef       	ldi	r22, 0xFE	; 254
   1c89a:	70 e0       	ldi	r23, 0x00	; 0
   1c89c:	c8 01       	movw	r24, r16
   1c89e:	0e 94 6c 77 	call	0xeed8	; 0xeed8 <fgets>
    trim_tail(line);
   1c8a2:	c8 01       	movw	r24, r16
   1c8a4:	0e 94 1b 33 	call	0x6636	; 0x6636 <trim_tail>
    argc = split_args(line,argv,50);
   1c8a8:	42 e3       	ldi	r20, 0x32	; 50
   1c8aa:	50 e0       	ldi	r21, 0x00	; 0
   1c8ac:	be 01       	movw	r22, r28
   1c8ae:	6a 5f       	subi	r22, 0xFA	; 250
   1c8b0:	7e 4f       	sbci	r23, 0xFE	; 254
   1c8b2:	c8 01       	movw	r24, r16
   1c8b4:	0e 94 a1 33 	call	0x6742	; 0x6742 <split_args>
   1c8b8:	6c 01       	movw	r12, r24

	if(debug_input)
   1c8ba:	80 91 ec 19 	lds	r24, 0x19EC	; 0x8019ec <debug_input>
   1c8be:	81 11       	cpse	r24, r1
   1c8c0:	0a c0       	rjmp	.+20     	; 0x1c8d6 <user_task.part.1+0x96>
			printf("   [%s]\n", argv[i]);
	}

    ind = 0;
	result = 0;
    ptr = argv[ind++];
   1c8c2:	ca 5f       	subi	r28, 0xFA	; 250
   1c8c4:	de 4f       	sbci	r29, 0xFE	; 254
   1c8c6:	e8 80       	ld	r14, Y
   1c8c8:	f9 80       	ldd	r15, Y+1	; 0x01
   1c8ca:	c6 50       	subi	r28, 0x06	; 6
   1c8cc:	d1 40       	sbci	r29, 0x01	; 1

    if(!ptr || argc < 1)
   1c8ce:	e1 14       	cp	r14, r1
   1c8d0:	f1 04       	cpc	r15, r1
   1c8d2:	51 f5       	brne	.+84     	; 0x1c928 <user_task.part.1+0xe8>
   1c8d4:	8b c0       	rjmp	.+278    	; 0x1c9ec <user_task.part.1+0x1ac>
    trim_tail(line);
    argc = split_args(line,argv,50);

	if(debug_input)
	{
        printf("Argument count = %d\n", argc);
   1c8d6:	ed b7       	in	r30, 0x3d	; 61
   1c8d8:	fe b7       	in	r31, 0x3e	; 62
   1c8da:	d5 82       	std	Z+5, r13	; 0x05
   1c8dc:	c4 82       	std	Z+4, r12	; 0x04
   1c8de:	8f e1       	ldi	r24, 0x1F	; 31
   1c8e0:	9a e4       	ldi	r25, 0x4A	; 74
   1c8e2:	a0 e0       	ldi	r26, 0x00	; 0
   1c8e4:	81 83       	std	Z+1, r24	; 0x01
   1c8e6:	92 83       	std	Z+2, r25	; 0x02
   1c8e8:	a3 83       	std	Z+3, r26	; 0x03
   1c8ea:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
   1c8ee:	ce 01       	movw	r24, r28
   1c8f0:	8a 5f       	subi	r24, 0xFA	; 250
   1c8f2:	9e 4f       	sbci	r25, 0xFE	; 254
   1c8f4:	7c 01       	movw	r14, r24
		for(i=0;i<argc;++i)
   1c8f6:	00 e0       	ldi	r16, 0x00	; 0
   1c8f8:	10 e0       	ldi	r17, 0x00	; 0
			printf("   [%s]\n", argv[i]);
   1c8fa:	86 e1       	ldi	r24, 0x16	; 22
   1c8fc:	9a e4       	ldi	r25, 0x4A	; 74
   1c8fe:	3c 01       	movw	r6, r24
   1c900:	81 2c       	mov	r8, r1
    argc = split_args(line,argv,50);

	if(debug_input)
	{
        printf("Argument count = %d\n", argc);
		for(i=0;i<argc;++i)
   1c902:	0c 15       	cp	r16, r12
   1c904:	1d 05       	cpc	r17, r13
   1c906:	ec f6       	brge	.-70     	; 0x1c8c2 <user_task.part.1+0x82>
			printf("   [%s]\n", argv[i]);
   1c908:	f7 01       	movw	r30, r14
   1c90a:	81 91       	ld	r24, Z+
   1c90c:	91 91       	ld	r25, Z+
   1c90e:	7f 01       	movw	r14, r30
   1c910:	ed b7       	in	r30, 0x3d	; 61
   1c912:	fe b7       	in	r31, 0x3e	; 62
   1c914:	95 83       	std	Z+5, r25	; 0x05
   1c916:	84 83       	std	Z+4, r24	; 0x04
   1c918:	61 82       	std	Z+1, r6	; 0x01
   1c91a:	72 82       	std	Z+2, r7	; 0x02
   1c91c:	83 82       	std	Z+3, r8	; 0x03
   1c91e:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
    argc = split_args(line,argv,50);

	if(debug_input)
	{
        printf("Argument count = %d\n", argc);
		for(i=0;i<argc;++i)
   1c922:	0f 5f       	subi	r16, 0xFF	; 255
   1c924:	1f 4f       	sbci	r17, 0xFF	; 255
   1c926:	ed cf       	rjmp	.-38     	; 0x1c902 <user_task.part.1+0xc2>

    ind = 0;
	result = 0;
    ptr = argv[ind++];

    if(!ptr || argc < 1)
   1c928:	1c 14       	cp	r1, r12
   1c92a:	1d 04       	cpc	r1, r13
   1c92c:	0c f0       	brlt	.+2      	; 0x1c930 <user_task.part.1+0xf0>
   1c92e:	5e c0       	rjmp	.+188    	; 0x1c9ec <user_task.part.1+0x1ac>
    {
        result = 1;
    }

#ifdef LCD_SUPPORT
    else if (MATCHI(ptr,"backlight") )
   1c930:	6c e2       	ldi	r22, 0x2C	; 44
   1c932:	77 e1       	ldi	r23, 0x17	; 23
   1c934:	c7 01       	movw	r24, r14
   1c936:	0e 94 49 33 	call	0x6692	; 0x6692 <MATCHI>
   1c93a:	89 2b       	or	r24, r25
   1c93c:	f9 f0       	breq	.+62     	; 0x1c97c <user_task.part.1+0x13c>
    {
		uint32_t rgb;
        ptr = argv[ind];
   1c93e:	c8 5f       	subi	r28, 0xF8	; 248
   1c940:	de 4f       	sbci	r29, 0xFE	; 254
   1c942:	e8 80       	ld	r14, Y
   1c944:	f9 80       	ldd	r15, Y+1	; 0x01
   1c946:	c8 50       	subi	r28, 0x08	; 8
   1c948:	d1 40       	sbci	r29, 0x01	; 1
        if(*ptr == '=')
   1c94a:	f7 01       	movw	r30, r14
   1c94c:	80 81       	ld	r24, Z
   1c94e:	8d 33       	cpi	r24, 0x3D	; 61
   1c950:	19 f4       	brne	.+6      	; 0x1c958 <user_task.part.1+0x118>
            ++ind;
   1c952:	82 e0       	ldi	r24, 0x02	; 2
   1c954:	90 e0       	ldi	r25, 0x00	; 0
   1c956:	02 c0       	rjmp	.+4      	; 0x1c95c <user_task.part.1+0x11c>
			printf("   [%s]\n", argv[i]);
	}

    ind = 0;
	result = 0;
    ptr = argv[ind++];
   1c958:	81 e0       	ldi	r24, 0x01	; 1
   1c95a:	90 e0       	ldi	r25, 0x00	; 0
    {
		uint32_t rgb;
        ptr = argv[ind];
        if(*ptr == '=')
            ++ind;
        rgb = get_value(argv[ind]);
   1c95c:	88 0f       	add	r24, r24
   1c95e:	99 1f       	adc	r25, r25
   1c960:	e6 e0       	ldi	r30, 0x06	; 6
   1c962:	f1 e0       	ldi	r31, 0x01	; 1
   1c964:	ec 0f       	add	r30, r28
   1c966:	fd 1f       	adc	r31, r29
   1c968:	e8 0f       	add	r30, r24
   1c96a:	f9 1f       	adc	r31, r25
   1c96c:	80 81       	ld	r24, Z
   1c96e:	91 81       	ldd	r25, Z+1	; 0x01
   1c970:	0e 94 40 34 	call	0x6880	; 0x6880 <get_value>
		result = lcd_backlight(rgb);
   1c974:	ed dd       	rcall	.-1062   	; 0x1c550 <lcd_backlight>
   1c976:	08 2f       	mov	r16, r24
   1c978:	10 e0       	ldi	r17, 0x00	; 0
   1c97a:	3a c0       	rjmp	.+116    	; 0x1c9f0 <user_task.part.1+0x1b0>
    }
#endif

    else if ( MATCHI(ptr,"reset") )
   1c97c:	67 ea       	ldi	r22, 0xA7	; 167
   1c97e:	7d e0       	ldi	r23, 0x0D	; 13
   1c980:	c7 01       	movw	r24, r14
   1c982:	0e 94 49 33 	call	0x6692	; 0x6692 <MATCHI>
   1c986:	89 2b       	or	r24, r25
   1c988:	51 f0       	breq	.+20     	; 0x1c99e <user_task.part.1+0x15e>
    {
        cli();
   1c98a:	f8 94       	cli
        uart_rx_flush(0);
   1c98c:	80 e0       	ldi	r24, 0x00	; 0
   1c98e:	0e 94 1a 29 	call	0x5234	; 0x5234 <uart_rx_flush>
        cli();
   1c992:	f8 94       	cli
        MCUSR = (1 << EXTRF);
   1c994:	82 e0       	ldi	r24, 0x02	; 2
   1c996:	84 bf       	out	0x34, r24	; 52
        RESET();
   1c998:	e0 e0       	ldi	r30, 0x00	; 0
   1c99a:	fc ef       	ldi	r31, 0xFC	; 252
   1c99c:	09 95       	icall
		// should not return!
        result = 1;
    }
    else if ( MATCHI(ptr,"setdate" ) )
   1c99e:	66 e3       	ldi	r22, 0x36	; 54
   1c9a0:	77 e1       	ldi	r23, 0x17	; 23
   1c9a2:	c7 01       	movw	r24, r14
   1c9a4:	0e 94 49 33 	call	0x6692	; 0x6692 <MATCHI>
   1c9a8:	89 2b       	or	r24, r25
   1c9aa:	19 f0       	breq	.+6      	; 0x1c9b2 <user_task.part.1+0x172>
    {
        setdate();
   1c9ac:	0e 94 84 3c 	call	0x7908	; 0x7908 <setdate>
   1c9b0:	07 c0       	rjmp	.+14     	; 0x1c9c0 <user_task.part.1+0x180>
        display_clock();
        result = 1;
    }
    else if ( MATCHI(ptr,"time") )
   1c9b2:	6e e3       	ldi	r22, 0x3E	; 62
   1c9b4:	77 e1       	ldi	r23, 0x17	; 23
   1c9b6:	c7 01       	movw	r24, r14
   1c9b8:	0e 94 49 33 	call	0x6692	; 0x6692 <MATCHI>
   1c9bc:	89 2b       	or	r24, r25
   1c9be:	19 f0       	breq	.+6      	; 0x1c9c6 <user_task.part.1+0x186>
    {
        display_clock();
   1c9c0:	0e 94 a0 3e 	call	0x7d40	; 0x7d40 <display_clock>
   1c9c4:	13 c0       	rjmp	.+38     	; 0x1c9ec <user_task.part.1+0x1ac>
        result = 1;
    }
    else if ( MATCHI(ptr,"help") || MATCHI(ptr,"?") )
   1c9c6:	62 e6       	ldi	r22, 0x62	; 98
   1c9c8:	76 e1       	ldi	r23, 0x16	; 22
   1c9ca:	c7 01       	movw	r24, r14
   1c9cc:	0e 94 49 33 	call	0x6692	; 0x6692 <MATCHI>
   1c9d0:	89 2b       	or	r24, r25
    {
        help();
   1c9d2:	11 f0       	breq	.+4      	; 0x1c9d8 <user_task.part.1+0x198>
   1c9d4:	d5 de       	rcall	.-598    	; 0x1c780 <help>
   1c9d6:	0a c0       	rjmp	.+20     	; 0x1c9ec <user_task.part.1+0x1ac>
    else if ( MATCHI(ptr,"time") )
    {
        display_clock();
        result = 1;
    }
    else if ( MATCHI(ptr,"help") || MATCHI(ptr,"?") )
   1c9d8:	68 e6       	ldi	r22, 0x68	; 104
   1c9da:	76 e1       	ldi	r23, 0x16	; 22
   1c9dc:	c7 01       	movw	r24, r14
   1c9de:	0e 94 49 33 	call	0x6692	; 0x6692 <MATCHI>
   1c9e2:	89 2b       	or	r24, r25
   1c9e4:	b9 f7       	brne	.-18     	; 0x1c9d4 <user_task.part.1+0x194>
		for(i=0;i<argc;++i)
			printf("   [%s]\n", argv[i]);
	}

    ind = 0;
	result = 0;
   1c9e6:	00 e0       	ldi	r16, 0x00	; 0
   1c9e8:	10 e0       	ldi	r17, 0x00	; 0
   1c9ea:	02 c0       	rjmp	.+4      	; 0x1c9f0 <user_task.part.1+0x1b0>
    ptr = argv[ind++];

    if(!ptr || argc < 1)
    {
        result = 1;
   1c9ec:	01 e0       	ldi	r16, 0x01	; 1
   1c9ee:	10 e0       	ldi	r17, 0x00	; 0
    {
        help();
        result = 1;
    }

    if (MATCHI(ptr,"dir") )
   1c9f0:	66 ec       	ldi	r22, 0xC6	; 198
   1c9f2:	7b e0       	ldi	r23, 0x0B	; 11
   1c9f4:	c7 01       	movw	r24, r14
   1c9f6:	0e 94 49 33 	call	0x6692	; 0x6692 <MATCHI>
   1c9fa:	89 2b       	or	r24, r25
   1c9fc:	51 f1       	breq	.+84     	; 0x1ca52 <user_task.part.1+0x212>
   1c9fe:	86 e0       	ldi	r24, 0x06	; 6
   1ca00:	68 2e       	mov	r6, r24
   1ca02:	77 24       	eor	r7, r7
   1ca04:	73 94       	inc	r7
   1ca06:	6c 0e       	add	r6, r28
   1ca08:	7d 1e       	adc	r7, r29
   1ca0a:	f2 e0       	ldi	r31, 0x02	; 2
   1ca0c:	6f 0e       	add	r6, r31
   1ca0e:	71 1c       	adc	r7, r1
   1ca10:	aa 24       	eor	r10, r10
   1ca12:	a3 94       	inc	r10
   1ca14:	b1 2c       	mov	r11, r1
   1ca16:	01 e0       	ldi	r16, 0x01	; 1
   1ca18:	10 e0       	ldi	r17, 0x00	; 0
    {
        int i;
        int args = 0;
        result = 1;
        for(i=1;i<argc;++i)
   1ca1a:	ac 14       	cp	r10, r12
   1ca1c:	bd 04       	cpc	r11, r13
   1ca1e:	74 f4       	brge	.+28     	; 0x1ca3c <user_task.part.1+0x1fc>
        {
            if(fatfs_ls(argv[i]) == 0)
   1ca20:	f3 01       	movw	r30, r6
   1ca22:	81 91       	ld	r24, Z+
   1ca24:	91 91       	ld	r25, Z+
   1ca26:	3f 01       	movw	r6, r30
   1ca28:	0e 94 99 74 	call	0xe932	; 0xe932 <fatfs_ls>
   1ca2c:	89 2b       	or	r24, r25
   1ca2e:	11 f4       	brne	.+4      	; 0x1ca34 <user_task.part.1+0x1f4>
				result = -1;
   1ca30:	0f ef       	ldi	r16, 0xFF	; 255
   1ca32:	1f ef       	ldi	r17, 0xFF	; 255
    if (MATCHI(ptr,"dir") )
    {
        int i;
        int args = 0;
        result = 1;
        for(i=1;i<argc;++i)
   1ca34:	ff ef       	ldi	r31, 0xFF	; 255
   1ca36:	af 1a       	sub	r10, r31
   1ca38:	bf 0a       	sbc	r11, r31
   1ca3a:	ef cf       	rjmp	.-34     	; 0x1ca1a <user_task.part.1+0x1da>
        {
            if(fatfs_ls(argv[i]) == 0)
				result = -1;
            ++args;
        }
        if(!args)
   1ca3c:	aa 94       	dec	r10
   1ca3e:	ab 28       	or	r10, r11
   1ca40:	41 f4       	brne	.+16     	; 0x1ca52 <user_task.part.1+0x212>
        {
            if(fatfs_ls("") == 0)
   1ca42:	8e e0       	ldi	r24, 0x0E	; 14
   1ca44:	9c e0       	ldi	r25, 0x0C	; 12
   1ca46:	0e 94 99 74 	call	0xe932	; 0xe932 <fatfs_ls>
   1ca4a:	89 2b       	or	r24, r25
   1ca4c:	11 f4       	brne	.+4      	; 0x1ca52 <user_task.part.1+0x212>
				result = -1;
   1ca4e:	0f ef       	ldi	r16, 0xFF	; 255
   1ca50:	1f ef       	ldi	r17, 0xFF	; 255
    }



#ifdef POSIX_TESTS
    if( (ret = posix_tests(argc,argv)) )
   1ca52:	be 01       	movw	r22, r28
   1ca54:	6a 5f       	subi	r22, 0xFA	; 250
   1ca56:	7e 4f       	sbci	r23, 0xFE	; 254
   1ca58:	c6 01       	movw	r24, r12
   1ca5a:	0e 94 e7 82 	call	0x105ce	; 0x105ce <posix_tests>
   1ca5e:	00 97       	sbiw	r24, 0x00	; 0
   1ca60:	39 f0       	breq	.+14     	; 0x1ca70 <user_task.part.1+0x230>
	{
		if(ret < 0)
   1ca62:	97 fd       	sbrc	r25, 7
   1ca64:	03 c0       	rjmp	.+6      	; 0x1ca6c <user_task.part.1+0x22c>
			result = -1;
		else
			result = 1;
   1ca66:	01 e0       	ldi	r16, 0x01	; 1
   1ca68:	10 e0       	ldi	r17, 0x00	; 0
   1ca6a:	02 c0       	rjmp	.+4      	; 0x1ca70 <user_task.part.1+0x230>

#ifdef POSIX_TESTS
    if( (ret = posix_tests(argc,argv)) )
	{
		if(ret < 0)
			result = -1;
   1ca6c:	0f ef       	ldi	r16, 0xFF	; 255
   1ca6e:	1f ef       	ldi	r17, 0xFF	; 255
		else
			result = 1;
	}
#endif
    if( (ret = drives_tests(argc,argv)) )
   1ca70:	be 01       	movw	r22, r28
   1ca72:	6a 5f       	subi	r22, 0xFA	; 250
   1ca74:	7e 4f       	sbci	r23, 0xFE	; 254
   1ca76:	c6 01       	movw	r24, r12
   1ca78:	0e 94 d4 a3 	call	0x147a8	; 0x147a8 <drives_tests>
   1ca7c:	00 97       	sbiw	r24, 0x00	; 0
   1ca7e:	39 f0       	breq	.+14     	; 0x1ca8e <user_task.part.1+0x24e>
	{
		if(ret < 0)
   1ca80:	97 fd       	sbrc	r25, 7
   1ca82:	03 c0       	rjmp	.+6      	; 0x1ca8a <user_task.part.1+0x24a>
			result = -1;
		else
			result = 1;
   1ca84:	01 e0       	ldi	r16, 0x01	; 1
   1ca86:	10 e0       	ldi	r17, 0x00	; 0
   1ca88:	02 c0       	rjmp	.+4      	; 0x1ca8e <user_task.part.1+0x24e>
	}
#endif
    if( (ret = drives_tests(argc,argv)) )
	{
		if(ret < 0)
			result = -1;
   1ca8a:	0f ef       	ldi	r16, 0xFF	; 255
   1ca8c:	1f ef       	ldi	r17, 0xFF	; 255
		else
			result = 1;
	}

#ifdef FATFS_TESTS
    if( (ret = fatfs_tests(argc,argv) ))
   1ca8e:	be 01       	movw	r22, r28
   1ca90:	6a 5f       	subi	r22, 0xFA	; 250
   1ca92:	7e 4f       	sbci	r23, 0xFE	; 254
   1ca94:	c6 01       	movw	r24, r12
   1ca96:	0e 94 6c 75 	call	0xead8	; 0xead8 <fatfs_tests>
   1ca9a:	00 97       	sbiw	r24, 0x00	; 0
   1ca9c:	39 f0       	breq	.+14     	; 0x1caac <user_task.part.1+0x26c>
	{
		if(ret < 0)
   1ca9e:	97 fd       	sbrc	r25, 7
   1caa0:	03 c0       	rjmp	.+6      	; 0x1caa8 <user_task.part.1+0x268>
			result = -1;
		else
			result = 1;
   1caa2:	01 e0       	ldi	r16, 0x01	; 1
   1caa4:	10 e0       	ldi	r17, 0x00	; 0
   1caa6:	02 c0       	rjmp	.+4      	; 0x1caac <user_task.part.1+0x26c>

#ifdef FATFS_TESTS
    if( (ret = fatfs_tests(argc,argv) ))
	{
		if(ret < 0)
			result = -1;
   1caa8:	0f ef       	ldi	r16, 0xFF	; 255
   1caaa:	1f ef       	ldi	r17, 0xFF	; 255
		else
			result = 1;
	}
#endif
	if( (ret = gpib_tests(argc,argv)) )
   1caac:	be 01       	movw	r22, r28
   1caae:	6a 5f       	subi	r22, 0xFA	; 250
   1cab0:	7e 4f       	sbci	r23, 0xFE	; 254
   1cab2:	c6 01       	movw	r24, r12
   1cab4:	0e 94 02 93 	call	0x12604	; 0x12604 <gpib_tests>
   1cab8:	00 97       	sbiw	r24, 0x00	; 0
   1caba:	49 f0       	breq	.+18     	; 0x1cace <user_task.part.1+0x28e>
    {
		if(ret < 0)
   1cabc:	97 fd       	sbrc	r25, 7
   1cabe:	03 c0       	rjmp	.+6      	; 0x1cac6 <user_task.part.1+0x286>
			result = -1;
		else
			result = 1;
   1cac0:	01 e0       	ldi	r16, 0x01	; 1
   1cac2:	10 e0       	ldi	r17, 0x00	; 0
   1cac4:	02 c0       	rjmp	.+4      	; 0x1caca <user_task.part.1+0x28a>
	}
#endif
	if( (ret = gpib_tests(argc,argv)) )
    {
		if(ret < 0)
			result = -1;
   1cac6:	0f ef       	ldi	r16, 0xFF	; 255
   1cac8:	1f ef       	ldi	r17, 0xFF	; 255
		else
			result = 1;
// Restore GPIB BUS states
        gpib_init_devices();
   1caca:	0e 94 16 8e 	call	0x11c2c	; 0x11c2c <gpib_init_devices>
    }

#ifdef LIF_SUPPORT
    if( (ret = lif_tests(argc,argv)) )
   1cace:	be 01       	movw	r22, r28
   1cad0:	6a 5f       	subi	r22, 0xFA	; 250
   1cad2:	7e 4f       	sbci	r23, 0xFE	; 254
   1cad4:	c6 01       	movw	r24, r12
   1cad6:	e8 da       	rcall	.-2608   	; 0x1c0a8 <lif_tests>
   1cad8:	00 97       	sbiw	r24, 0x00	; 0
   1cada:	39 f0       	breq	.+14     	; 0x1caea <user_task.part.1+0x2aa>
	{
		if(ret < 0)
   1cadc:	97 fd       	sbrc	r25, 7
   1cade:	03 c0       	rjmp	.+6      	; 0x1cae6 <user_task.part.1+0x2a6>
			result = -1;
		else
			result = 1;
   1cae0:	01 e0       	ldi	r16, 0x01	; 1
   1cae2:	10 e0       	ldi	r17, 0x00	; 0
   1cae4:	02 c0       	rjmp	.+4      	; 0x1caea <user_task.part.1+0x2aa>

#ifdef LIF_SUPPORT
    if( (ret = lif_tests(argc,argv)) )
	{
		if(ret < 0)
			result = -1;
   1cae6:	0f ef       	ldi	r16, 0xFF	; 255
   1cae8:	1f ef       	ldi	r17, 0xFF	; 255
			result = 1;
	}
#endif

/* CPU related tests */
    if (MATCHI(ptr,"input") )
   1caea:	63 e4       	ldi	r22, 0x43	; 67
   1caec:	77 e1       	ldi	r23, 0x17	; 23
   1caee:	c7 01       	movw	r24, r14
   1caf0:	0e 94 49 33 	call	0x6692	; 0x6692 <MATCHI>
   1caf4:	89 2b       	or	r24, r25
   1caf6:	d9 f0       	breq	.+54     	; 0x1cb2e <user_task.part.1+0x2ee>
    {
        debug_input = !debug_input;
   1caf8:	80 91 ec 19 	lds	r24, 0x19EC	; 0x8019ec <debug_input>
   1cafc:	91 e0       	ldi	r25, 0x01	; 1
   1cafe:	81 11       	cpse	r24, r1
   1cb00:	90 e0       	ldi	r25, 0x00	; 0
   1cb02:	90 93 ec 19 	sts	0x19EC, r25	; 0x8019ec <debug_input>
		printf("Input debugging: %s\n", debug_input ? "ON" : "OFF");
   1cb06:	88 23       	and	r24, r24
   1cb08:	19 f0       	breq	.+6      	; 0x1cb10 <user_task.part.1+0x2d0>
   1cb0a:	88 e2       	ldi	r24, 0x28	; 40
   1cb0c:	97 e1       	ldi	r25, 0x17	; 23
   1cb0e:	02 c0       	rjmp	.+4      	; 0x1cb14 <user_task.part.1+0x2d4>
   1cb10:	85 e2       	ldi	r24, 0x25	; 37
   1cb12:	97 e1       	ldi	r25, 0x17	; 23
   1cb14:	ed b7       	in	r30, 0x3d	; 61
   1cb16:	fe b7       	in	r31, 0x3e	; 62
   1cb18:	95 83       	std	Z+5, r25	; 0x05
   1cb1a:	84 83       	std	Z+4, r24	; 0x04
   1cb1c:	81 e0       	ldi	r24, 0x01	; 1
   1cb1e:	9a e4       	ldi	r25, 0x4A	; 74
   1cb20:	a0 e0       	ldi	r26, 0x00	; 0
   1cb22:	81 83       	std	Z+1, r24	; 0x01
   1cb24:	92 83       	std	Z+2, r25	; 0x02
   1cb26:	a3 83       	std	Z+3, r26	; 0x03
   1cb28:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
   1cb2c:	46 c0       	rjmp	.+140    	; 0x1cbba <user_task.part.1+0x37a>
        result = 1;
    }
    else if ( MATCH(ptr,"mem") )
   1cb2e:	69 e4       	ldi	r22, 0x49	; 73
   1cb30:	77 e1       	ldi	r23, 0x17	; 23
   1cb32:	c7 01       	movw	r24, r14
   1cb34:	0e 94 35 33 	call	0x666a	; 0x666a <MATCH>
   1cb38:	89 2b       	or	r24, r25
   1cb3a:	19 f0       	breq	.+6      	; 0x1cb42 <user_task.part.1+0x302>
    {
        PrintFree();
   1cb3c:	0e 94 ac 27 	call	0x4f58	; 0x4f58 <PrintFree>
   1cb40:	3c c0       	rjmp	.+120    	; 0x1cbba <user_task.part.1+0x37a>
			result = 1;
	}
#endif
/* CPU related tests */

    if(result == 1)
   1cb42:	01 30       	cpi	r16, 0x01	; 1
   1cb44:	11 05       	cpc	r17, r1
   1cb46:	c9 f1       	breq	.+114    	; 0x1cbba <user_task.part.1+0x37a>
        printf("OK\n");
	else if(result == -1)
   1cb48:	0f 3f       	cpi	r16, 0xFF	; 255
   1cb4a:	1f 4f       	sbci	r17, 0xFF	; 255
   1cb4c:	19 f4       	brne	.+6      	; 0x1cb54 <user_task.part.1+0x314>
        printf("Command FAILED\n");
   1cb4e:	8d ee       	ldi	r24, 0xED	; 237
   1cb50:	99 e4       	ldi	r25, 0x49	; 73
   1cb52:	35 c0       	rjmp	.+106    	; 0x1cbbe <user_task.part.1+0x37e>
    else
	{
        printf("Invalid Command\n");
   1cb54:	8c ed       	ldi	r24, 0xDC	; 220
   1cb56:	99 e4       	ldi	r25, 0x49	; 73
   1cb58:	a0 e0       	ldi	r26, 0x00	; 0
   1cb5a:	ed b7       	in	r30, 0x3d	; 61
   1cb5c:	fe b7       	in	r31, 0x3e	; 62
   1cb5e:	81 83       	std	Z+1, r24	; 0x01
   1cb60:	92 83       	std	Z+2, r25	; 0x02
   1cb62:	a3 83       	std	Z+3, r26	; 0x03
   1cb64:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
        printf("    Argument count = %d\n", argc);
   1cb68:	ed b7       	in	r30, 0x3d	; 61
   1cb6a:	fe b7       	in	r31, 0x3e	; 62
   1cb6c:	d5 82       	std	Z+5, r13	; 0x05
   1cb6e:	c4 82       	std	Z+4, r12	; 0x04
   1cb70:	83 ec       	ldi	r24, 0xC3	; 195
   1cb72:	99 e4       	ldi	r25, 0x49	; 73
   1cb74:	a0 e0       	ldi	r26, 0x00	; 0
   1cb76:	81 83       	std	Z+1, r24	; 0x01
   1cb78:	92 83       	std	Z+2, r25	; 0x02
   1cb7a:	a3 83       	std	Z+3, r26	; 0x03
   1cb7c:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
   1cb80:	8e 01       	movw	r16, r28
   1cb82:	0a 5f       	subi	r16, 0xFA	; 250
   1cb84:	1e 4f       	sbci	r17, 0xFE	; 254
		for(i=0;i<argc;++i)
   1cb86:	e1 2c       	mov	r14, r1
   1cb88:	f1 2c       	mov	r15, r1
			printf("       [%s]\n", argv[i]);
   1cb8a:	86 eb       	ldi	r24, 0xB6	; 182
   1cb8c:	99 e4       	ldi	r25, 0x49	; 73
   1cb8e:	3c 01       	movw	r6, r24
   1cb90:	81 2c       	mov	r8, r1
        printf("Command FAILED\n");
    else
	{
        printf("Invalid Command\n");
        printf("    Argument count = %d\n", argc);
		for(i=0;i<argc;++i)
   1cb92:	ec 14       	cp	r14, r12
   1cb94:	fd 04       	cpc	r15, r13
   1cb96:	dc f4       	brge	.+54     	; 0x1cbce <user_task.part.1+0x38e>
			printf("       [%s]\n", argv[i]);
   1cb98:	f8 01       	movw	r30, r16
   1cb9a:	81 91       	ld	r24, Z+
   1cb9c:	91 91       	ld	r25, Z+
   1cb9e:	8f 01       	movw	r16, r30
   1cba0:	ed b7       	in	r30, 0x3d	; 61
   1cba2:	fe b7       	in	r31, 0x3e	; 62
   1cba4:	95 83       	std	Z+5, r25	; 0x05
   1cba6:	84 83       	std	Z+4, r24	; 0x04
   1cba8:	61 82       	std	Z+1, r6	; 0x01
   1cbaa:	72 82       	std	Z+2, r7	; 0x02
   1cbac:	83 82       	std	Z+3, r8	; 0x03
   1cbae:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
        printf("Command FAILED\n");
    else
	{
        printf("Invalid Command\n");
        printf("    Argument count = %d\n", argc);
		for(i=0;i<argc;++i)
   1cbb2:	ff ef       	ldi	r31, 0xFF	; 255
   1cbb4:	ef 1a       	sub	r14, r31
   1cbb6:	ff 0a       	sbc	r15, r31
   1cbb8:	ec cf       	rjmp	.-40     	; 0x1cb92 <user_task.part.1+0x352>
	}
#endif
/* CPU related tests */

    if(result == 1)
        printf("OK\n");
   1cbba:	8d ef       	ldi	r24, 0xFD	; 253
   1cbbc:	99 e4       	ldi	r25, 0x49	; 73
   1cbbe:	a0 e0       	ldi	r26, 0x00	; 0
   1cbc0:	ed b7       	in	r30, 0x3d	; 61
   1cbc2:	fe b7       	in	r31, 0x3e	; 62
   1cbc4:	81 83       	std	Z+1, r24	; 0x01
   1cbc6:	92 83       	std	Z+2, r25	; 0x02
   1cbc8:	a3 83       	std	Z+3, r26	; 0x03
   1cbca:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
        printf("Invalid Command\n");
        printf("    Argument count = %d\n", argc);
		for(i=0;i<argc;++i)
			printf("       [%s]\n", argv[i]);
	}
}
   1cbce:	c5 59       	subi	r28, 0x95	; 149
   1cbd0:	de 4f       	sbci	r29, 0xFE	; 254
   1cbd2:	0f b6       	in	r0, 0x3f	; 63
   1cbd4:	f8 94       	cli
   1cbd6:	de bf       	out	0x3e, r29	; 62
   1cbd8:	0f be       	out	0x3f, r0	; 63
   1cbda:	cd bf       	out	0x3d, r28	; 61
   1cbdc:	df 91       	pop	r29
   1cbde:	cf 91       	pop	r28
   1cbe0:	1f 91       	pop	r17
   1cbe2:	0f 91       	pop	r16
   1cbe4:	ff 90       	pop	r15
   1cbe6:	ef 90       	pop	r14
   1cbe8:	df 90       	pop	r13
   1cbea:	cf 90       	pop	r12
   1cbec:	bf 90       	pop	r11
   1cbee:	af 90       	pop	r10
   1cbf0:	8f 90       	pop	r8
   1cbf2:	7f 90       	pop	r7
   1cbf4:	6f 90       	pop	r6
   1cbf6:	08 95       	ret

0001cbf8 <user_task>:
	int ret;
    char *argv[51];
    char line[256];


    if(gpib)
   1cbf8:	81 11       	cpse	r24, r1
        gpib_task();
   1cbfa:	0e 94 81 92 	call	0x12502	; 0x12502 <gpib_task>

    if(!kbhit(0))
   1cbfe:	80 e0       	ldi	r24, 0x00	; 0
   1cc00:	0e 94 5a 2a 	call	0x54b4	; 0x54b4 <uart_rx_count>
   1cc04:	89 2b       	or	r24, r25
   1cc06:	09 f0       	breq	.+2      	; 0x1cc0a <user_task+0x12>
   1cc08:	1b ce       	rjmp	.-970    	; 0x1c840 <user_task.part.1>
   1cc0a:	08 95       	ret

0001cc0c <update_drive_counts>:
	}
}

#ifdef LCD_SUPPORT
void update_drive_counts()
{
   1cc0c:	a9 e2       	ldi	r26, 0x29	; 41
   1cc0e:	b0 e0       	ldi	r27, 0x00	; 0
   1cc10:	eb e0       	ldi	r30, 0x0B	; 11
   1cc12:	f6 ee       	ldi	r31, 0xE6	; 230
   1cc14:	a7 c2       	rjmp	.+1358   	; 0x1d164 <__prologue_saves__+0x1c>
	char tmp[32];

    sprintf((char *) tmp, "SS80=%d AMIGO=%d",
   1cc16:	83 e0       	ldi	r24, 0x03	; 3
   1cc18:	0e 94 ee 97 	call	0x12fdc	; 0x12fdc <count_drive_types>
   1cc1c:	18 2f       	mov	r17, r24
   1cc1e:	81 e0       	ldi	r24, 0x01	; 1
   1cc20:	0e 94 ee 97 	call	0x12fdc	; 0x12fdc <count_drive_types>
   1cc24:	08 2e       	mov	r0, r24
   1cc26:	00 0c       	add	r0, r0
   1cc28:	99 0b       	sbc	r25, r25
   1cc2a:	ed b7       	in	r30, 0x3d	; 61
   1cc2c:	fe b7       	in	r31, 0x3e	; 62
   1cc2e:	91 87       	std	Z+9, r25	; 0x09
   1cc30:	80 87       	std	Z+8, r24	; 0x08
   1cc32:	81 2f       	mov	r24, r17
   1cc34:	11 0f       	add	r17, r17
   1cc36:	99 0b       	sbc	r25, r25
   1cc38:	97 83       	std	Z+7, r25	; 0x07
   1cc3a:	86 83       	std	Z+6, r24	; 0x06
   1cc3c:	85 ea       	ldi	r24, 0xA5	; 165
   1cc3e:	99 e4       	ldi	r25, 0x49	; 73
   1cc40:	a0 e0       	ldi	r26, 0x00	; 0
   1cc42:	83 83       	std	Z+3, r24	; 0x03
   1cc44:	94 83       	std	Z+4, r25	; 0x04
   1cc46:	a5 83       	std	Z+5, r26	; 0x05
   1cc48:	8e 01       	movw	r16, r28
   1cc4a:	06 5f       	subi	r16, 0xF6	; 246
   1cc4c:	1f 4f       	sbci	r17, 0xFF	; 255
   1cc4e:	12 83       	std	Z+2, r17	; 0x02
   1cc50:	01 83       	std	Z+1, r16	; 0x01
   1cc52:	0e 94 e8 47 	call	0x8fd0	; 0x8fd0 <sprintf_P>
        (int) count_drive_types(SS80_TYPE),
        (int) count_drive_types(AMIGO_TYPE) );
	sprintf((char *) _line1, "%-16s", tmp);
   1cc56:	ed b7       	in	r30, 0x3d	; 61
   1cc58:	fe b7       	in	r31, 0x3e	; 62
   1cc5a:	17 83       	std	Z+7, r17	; 0x07
   1cc5c:	06 83       	std	Z+6, r16	; 0x06
   1cc5e:	8f e9       	ldi	r24, 0x9F	; 159
   1cc60:	99 e4       	ldi	r25, 0x49	; 73
   1cc62:	a0 e0       	ldi	r26, 0x00	; 0
   1cc64:	83 83       	std	Z+3, r24	; 0x03
   1cc66:	94 83       	std	Z+4, r25	; 0x04
   1cc68:	a5 83       	std	Z+5, r26	; 0x05
   1cc6a:	8c e0       	ldi	r24, 0x0C	; 12
   1cc6c:	93 e0       	ldi	r25, 0x03	; 3
   1cc6e:	92 83       	std	Z+2, r25	; 0x02
   1cc70:	81 83       	std	Z+1, r24	; 0x01
   1cc72:	0e 94 e8 47 	call	0x8fd0	; 0x8fd0 <sprintf_P>
}
   1cc76:	a9 96       	adiw	r28, 0x29	; 41
   1cc78:	e4 e0       	ldi	r30, 0x04	; 4
   1cc7a:	90 c2       	rjmp	.+1312   	; 0x1d19c <__epilogue_restores__+0x1c>

0001cc7c <main>:
#endif

/// @brief  main() for gpib project
/// @return  should never return!
int main(void)
{
   1cc7c:	cf 93       	push	r28
   1cc7e:	df 93       	push	r29
   1cc80:	cd b7       	in	r28, 0x3d	; 61
   1cc82:	de b7       	in	r29, 0x3e	; 62
   1cc84:	63 97       	sbiw	r28, 0x13	; 19
   1cc86:	0f b6       	in	r0, 0x3f	; 63
   1cc88:	f8 94       	cli
   1cc8a:	de bf       	out	0x3e, r29	; 62
   1cc8c:	0f be       	out	0x3f, r0	; 63
   1cc8e:	cd bf       	out	0x3d, r28	; 61
    ts_t ts;
    uint32_t actual,baud;

	clear_error();		// Clear error state
   1cc90:	0e 94 79 27 	call	0x4ef2	; 0x4ef2 <clear_error>

	GPIO_PIN_LOW(LED1);	// Activity status
   1cc94:	46 98       	cbi	0x08, 6	; 8
   1cc96:	3e 9a       	sbi	0x07, 6	; 7

///@ initialize bus state as soon as practical
    gpib_bus_init();
   1cc98:	0e 94 c1 86 	call	0x10d82	; 0x10d82 <gpib_bus_init>
// BAUD setting moved to Makefile
    baud = BAUD;

///@ Initialize UART early
/// Returns actual BAUD rate - possible with hardware - may differ slightly
    actual = uart_init(0, baud);                  // Serial Port Initialize
   1cc9c:	40 e0       	ldi	r20, 0x00	; 0
   1cc9e:	52 ec       	ldi	r21, 0xC2	; 194
   1cca0:	61 e0       	ldi	r22, 0x01	; 1
   1cca2:	70 e0       	ldi	r23, 0x00	; 0
   1cca4:	80 e0       	ldi	r24, 0x00	; 0
   1cca6:	0e 94 c5 29 	call	0x538a	; 0x538a <uart_init>
   1ccaa:	6b 01       	movw	r12, r22
   1ccac:	7c 01       	movw	r14, r24

///@brief Power up delay
    delayms(200);
   1ccae:	68 ec       	ldi	r22, 0xC8	; 200
   1ccb0:	70 e0       	ldi	r23, 0x00	; 0
   1ccb2:	80 e0       	ldi	r24, 0x00	; 0
   1ccb4:	90 e0       	ldi	r25, 0x00	; 0
   1ccb6:	0e 94 d2 28 	call	0x51a4	; 0x51a4 <delayms>

    sep();
   1ccba:	0e 94 0b 33 	call	0x6616	; 0x6616 <sep>
    printf("Start\n");
   1ccbe:	88 e9       	ldi	r24, 0x98	; 152
   1ccc0:	99 e4       	ldi	r25, 0x49	; 73
   1ccc2:	a0 e0       	ldi	r26, 0x00	; 0
   1ccc4:	ed b7       	in	r30, 0x3d	; 61
   1ccc6:	fe b7       	in	r31, 0x3e	; 62
   1ccc8:	81 83       	std	Z+1, r24	; 0x01
   1ccca:	92 83       	std	Z+2, r25	; 0x02
   1cccc:	a3 83       	std	Z+3, r26	; 0x03
   1ccce:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
    printf("CPU Clock = %lu\n", F_CPU);
   1ccd2:	80 e0       	ldi	r24, 0x00	; 0
   1ccd4:	9d e2       	ldi	r25, 0x2D	; 45
   1ccd6:	a1 e3       	ldi	r26, 0x31	; 49
   1ccd8:	b1 e0       	ldi	r27, 0x01	; 1
   1ccda:	ed b7       	in	r30, 0x3d	; 61
   1ccdc:	fe b7       	in	r31, 0x3e	; 62
   1ccde:	84 83       	std	Z+4, r24	; 0x04
   1cce0:	95 83       	std	Z+5, r25	; 0x05
   1cce2:	a6 83       	std	Z+6, r26	; 0x06
   1cce4:	b7 83       	std	Z+7, r27	; 0x07
   1cce6:	87 e8       	ldi	r24, 0x87	; 135
   1cce8:	99 e4       	ldi	r25, 0x49	; 73
   1ccea:	a0 e0       	ldi	r26, 0x00	; 0
   1ccec:	81 83       	std	Z+1, r24	; 0x01
   1ccee:	92 83       	std	Z+2, r25	; 0x02
   1ccf0:	a3 83       	std	Z+3, r26	; 0x03
   1ccf2:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
    printf("Requested Baud Rate: %ld, Actual: %ld\n", (long)baud, (long)actual);
   1ccf6:	ed b7       	in	r30, 0x3d	; 61
   1ccf8:	fe b7       	in	r31, 0x3e	; 62
   1ccfa:	c0 86       	std	Z+8, r12	; 0x08
   1ccfc:	d1 86       	std	Z+9, r13	; 0x09
   1ccfe:	e2 86       	std	Z+10, r14	; 0x0a
   1cd00:	f3 86       	std	Z+11, r15	; 0x0b
   1cd02:	80 e0       	ldi	r24, 0x00	; 0
   1cd04:	92 ec       	ldi	r25, 0xC2	; 194
   1cd06:	a1 e0       	ldi	r26, 0x01	; 1
   1cd08:	b0 e0       	ldi	r27, 0x00	; 0
   1cd0a:	84 83       	std	Z+4, r24	; 0x04
   1cd0c:	95 83       	std	Z+5, r25	; 0x05
   1cd0e:	a6 83       	std	Z+6, r26	; 0x06
   1cd10:	b7 83       	std	Z+7, r27	; 0x07
   1cd12:	80 e6       	ldi	r24, 0x60	; 96
   1cd14:	99 e4       	ldi	r25, 0x49	; 73
   1cd16:	a0 e0       	ldi	r26, 0x00	; 0
   1cd18:	81 83       	std	Z+1, r24	; 0x01
   1cd1a:	92 83       	std	Z+2, r25	; 0x02
   1cd1c:	a3 83       	std	Z+3, r26	; 0x03
   1cd1e:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>

    init_timers();
   1cd22:	0e 94 f1 36 	call	0x6de2	; 0x6de2 <init_timers>

    sep();
   1cd26:	0e 94 0b 33 	call	0x6616	; 0x6616 <sep>
    printf("HP85 Disk and Device Emulator\n");
   1cd2a:	81 e4       	ldi	r24, 0x41	; 65
   1cd2c:	99 e4       	ldi	r25, 0x49	; 73
   1cd2e:	a0 e0       	ldi	r26, 0x00	; 0
   1cd30:	ed b7       	in	r30, 0x3d	; 61
   1cd32:	fe b7       	in	r31, 0x3e	; 62
   1cd34:	81 83       	std	Z+1, r24	; 0x01
   1cd36:	92 83       	std	Z+2, r25	; 0x02
   1cd38:	a3 83       	std	Z+3, r26	; 0x03
   1cd3a:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
    printf(" (C) 2014-2020 by Mike Gore\n");
   1cd3e:	84 e2       	ldi	r24, 0x24	; 36
   1cd40:	99 e4       	ldi	r25, 0x49	; 73
   1cd42:	a0 e0       	ldi	r26, 0x00	; 0
   1cd44:	ed b7       	in	r30, 0x3d	; 61
   1cd46:	fe b7       	in	r31, 0x3e	; 62
   1cd48:	81 83       	std	Z+1, r24	; 0x01
   1cd4a:	92 83       	std	Z+2, r25	; 0x02
   1cd4c:	a3 83       	std	Z+3, r26	; 0x03
   1cd4e:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
    printf(" GNU version 3\n");
   1cd52:	84 e1       	ldi	r24, 0x14	; 20
   1cd54:	99 e4       	ldi	r25, 0x49	; 73
   1cd56:	a0 e0       	ldi	r26, 0x00	; 0
   1cd58:	ed b7       	in	r30, 0x3d	; 61
   1cd5a:	fe b7       	in	r31, 0x3e	; 62
   1cd5c:	81 83       	std	Z+1, r24	; 0x01
   1cd5e:	92 83       	std	Z+2, r25	; 0x02
   1cd60:	a3 83       	std	Z+3, r26	; 0x03
   1cd62:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
    printf("-> https://github.com/magore/hp85disk\n");
   1cd66:	8d ee       	ldi	r24, 0xED	; 237
   1cd68:	98 e4       	ldi	r25, 0x48	; 72
   1cd6a:	a0 e0       	ldi	r26, 0x00	; 0
   1cd6c:	ed b7       	in	r30, 0x3d	; 61
   1cd6e:	fe b7       	in	r31, 0x3e	; 62
   1cd70:	81 83       	std	Z+1, r24	; 0x01
   1cd72:	92 83       	std	Z+2, r25	; 0x02
   1cd74:	a3 83       	std	Z+3, r26	; 0x03
   1cd76:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
    printf("   GIT last pushed:   %s\n", GIT_VERSION);
   1cd7a:	86 eb       	ldi	r24, 0xB6	; 182
   1cd7c:	96 e1       	ldi	r25, 0x16	; 22
   1cd7e:	ed b7       	in	r30, 0x3d	; 61
   1cd80:	fe b7       	in	r31, 0x3e	; 62
   1cd82:	95 83       	std	Z+5, r25	; 0x05
   1cd84:	84 83       	std	Z+4, r24	; 0x04
   1cd86:	83 ed       	ldi	r24, 0xD3	; 211
   1cd88:	98 e4       	ldi	r25, 0x48	; 72
   1cd8a:	a0 e0       	ldi	r26, 0x00	; 0
   1cd8c:	81 83       	std	Z+1, r24	; 0x01
   1cd8e:	92 83       	std	Z+2, r25	; 0x02
   1cd90:	a3 83       	std	Z+3, r26	; 0x03
   1cd92:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
    printf("   Last updated file: %s\n", LOCAL_MOD);
   1cd96:	8a ed       	ldi	r24, 0xDA	; 218
   1cd98:	96 e1       	ldi	r25, 0x16	; 22
   1cd9a:	ed b7       	in	r30, 0x3d	; 61
   1cd9c:	fe b7       	in	r31, 0x3e	; 62
   1cd9e:	95 83       	std	Z+5, r25	; 0x05
   1cda0:	84 83       	std	Z+4, r24	; 0x04
   1cda2:	89 eb       	ldi	r24, 0xB9	; 185
   1cda4:	98 e4       	ldi	r25, 0x48	; 72
   1cda6:	a0 e0       	ldi	r26, 0x00	; 0
   1cda8:	81 83       	std	Z+1, r24	; 0x01
   1cdaa:	92 83       	std	Z+2, r25	; 0x02
   1cdac:	a3 83       	std	Z+3, r26	; 0x03
   1cdae:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>

    sep();
   1cdb2:	0e 94 0b 33 	call	0x6616	; 0x6616 <sep>
    PrintFree();
   1cdb6:	0e 94 ac 27 	call	0x4f58	; 0x4f58 <PrintFree>

    sep();
   1cdba:	0e 94 0b 33 	call	0x6616	; 0x6616 <sep>
    // delayms(200);                                 ///@brief Power up delay

///@ initialize SPI bus
    printf("Initializing SPI bus\n");
   1cdbe:	83 ea       	ldi	r24, 0xA3	; 163
   1cdc0:	98 e4       	ldi	r25, 0x48	; 72
   1cdc2:	a0 e0       	ldi	r26, 0x00	; 0
   1cdc4:	ed b7       	in	r30, 0x3d	; 61
   1cdc6:	fe b7       	in	r31, 0x3e	; 62
   1cdc8:	81 83       	std	Z+1, r24	; 0x01
   1cdca:	92 83       	std	Z+2, r25	; 0x02
   1cdcc:	a3 83       	std	Z+3, r26	; 0x03
   1cdce:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
    spi_init(MMC_SLOW,GPIO_B3);
   1cdd2:	4b e0       	ldi	r20, 0x0B	; 11
   1cdd4:	50 e0       	ldi	r21, 0x00	; 0
   1cdd6:	60 e2       	ldi	r22, 0x20	; 32
   1cdd8:	71 ea       	ldi	r23, 0xA1	; 161
   1cdda:	87 e0       	ldi	r24, 0x07	; 7
   1cddc:	90 e0       	ldi	r25, 0x00	; 0
   1cdde:	0e 94 fb 26 	call	0x4df6	; 0x4df6 <spi_init>

///@ initialize I2C bus
    printf("Initializing I2C bus\n");
   1cde2:	8d e8       	ldi	r24, 0x8D	; 141
   1cde4:	98 e4       	ldi	r25, 0x48	; 72
   1cde6:	a0 e0       	ldi	r26, 0x00	; 0
   1cde8:	ed b7       	in	r30, 0x3d	; 61
   1cdea:	fe b7       	in	r31, 0x3e	; 62
   1cdec:	81 83       	std	Z+1, r24	; 0x01
   1cdee:	92 83       	std	Z+2, r25	; 0x02
   1cdf0:	a3 83       	std	Z+3, r26	; 0x03
   1cdf2:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
	i2c_init(100000);
   1cdf6:	60 ea       	ldi	r22, 0xA0	; 160
   1cdf8:	76 e8       	ldi	r23, 0x86	; 134
   1cdfa:	81 e0       	ldi	r24, 0x01	; 1
   1cdfc:	90 e0       	ldi	r25, 0x00	; 0
   1cdfe:	0e 94 ce 2c 	call	0x599c	; 0x599c <i2c_init>
    sep();
   1ce02:	0e 94 0b 33 	call	0x6616	; 0x6616 <sep>

///@ initialize clock by RTC if we have it
    printf("Initializing RTC\n");
   1ce06:	8b e7       	ldi	r24, 0x7B	; 123
   1ce08:	98 e4       	ldi	r25, 0x48	; 72
   1ce0a:	a0 e0       	ldi	r26, 0x00	; 0
   1ce0c:	ed b7       	in	r30, 0x3d	; 61
   1ce0e:	fe b7       	in	r31, 0x3e	; 62
   1ce10:	81 83       	std	Z+1, r24	; 0x01
   1ce12:	92 83       	std	Z+2, r25	; 0x02
   1ce14:	a3 83       	std	Z+3, r26	; 0x03
   1ce16:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
    clock_clear();
   1ce1a:	0e 94 ae 36 	call	0x6d5c	; 0x6d5c <clock_clear>
    printf("Clock cleared\n");
   1ce1e:	8c e6       	ldi	r24, 0x6C	; 108
   1ce20:	98 e4       	ldi	r25, 0x48	; 72
   1ce22:	a0 e0       	ldi	r26, 0x00	; 0
   1ce24:	ed b7       	in	r30, 0x3d	; 61
   1ce26:	fe b7       	in	r31, 0x3e	; 62
   1ce28:	81 83       	std	Z+1, r24	; 0x01
   1ce2a:	92 83       	std	Z+2, r25	; 0x02
   1ce2c:	a3 83       	std	Z+3, r26	; 0x03
   1ce2e:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
    clock_getres(0, (ts_t *) &ts);
   1ce32:	be 01       	movw	r22, r28
   1ce34:	64 5f       	subi	r22, 0xF4	; 244
   1ce36:	7f 4f       	sbci	r23, 0xFF	; 255
   1ce38:	80 e0       	ldi	r24, 0x00	; 0
   1ce3a:	90 e0       	ldi	r25, 0x00	; 0
   1ce3c:	0e 94 4e 37 	call	0x6e9c	; 0x6e9c <clock_getres>
    printf("System Task Interrupt Rate: %ld Nano Seconds\n", (long) ts.tv_nsec);
   1ce40:	88 89       	ldd	r24, Y+16	; 0x10
   1ce42:	99 89       	ldd	r25, Y+17	; 0x11
   1ce44:	aa 89       	ldd	r26, Y+18	; 0x12
   1ce46:	bb 89       	ldd	r27, Y+19	; 0x13
   1ce48:	ed b7       	in	r30, 0x3d	; 61
   1ce4a:	fe b7       	in	r31, 0x3e	; 62
   1ce4c:	84 83       	std	Z+4, r24	; 0x04
   1ce4e:	95 83       	std	Z+5, r25	; 0x05
   1ce50:	a6 83       	std	Z+6, r26	; 0x06
   1ce52:	b7 83       	std	Z+7, r27	; 0x07
   1ce54:	8e e3       	ldi	r24, 0x3E	; 62
   1ce56:	98 e4       	ldi	r25, 0x48	; 72
   1ce58:	a0 e0       	ldi	r26, 0x00	; 0
   1ce5a:	81 83       	std	Z+1, r24	; 0x01
   1ce5c:	92 83       	std	Z+2, r25	; 0x02
   1ce5e:	a3 83       	std	Z+3, r26	; 0x03
   1ce60:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>

// Timezone offset we just use local time
    initialize_clock(0);
   1ce64:	80 e0       	ldi	r24, 0x00	; 0
   1ce66:	90 e0       	ldi	r25, 0x00	; 0
   1ce68:	0e 94 29 3e 	call	0x7c52	; 0x7c52 <initialize_clock>
    display_clock();
   1ce6c:	0e 94 a0 3e 	call	0x7d40	; 0x7d40 <display_clock>
    sep();
   1ce70:	0e 94 0b 33 	call	0x6616	; 0x6616 <sep>

///@ initialize Optional I2C LCD
#ifdef LCD_SUPPORT
	lcd_setup();
   1ce74:	94 db       	rcall	.-2264   	; 0x1c59e <lcd_setup>
#endif

///@ initialize MMC bus
    printf("MMC initializing start\n");
   1ce76:	86 e2       	ldi	r24, 0x26	; 38
   1ce78:	98 e4       	ldi	r25, 0x48	; 72
   1ce7a:	a0 e0       	ldi	r26, 0x00	; 0
   1ce7c:	ed b7       	in	r30, 0x3d	; 61
   1ce7e:	fe b7       	in	r31, 0x3e	; 62
   1ce80:	81 83       	std	Z+1, r24	; 0x01
   1ce82:	92 83       	std	Z+2, r25	; 0x02
   1ce84:	a3 83       	std	Z+3, r26	; 0x03
   1ce86:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
    if ( !mmc_init(1) )
   1ce8a:	81 e0       	ldi	r24, 0x01	; 1
   1ce8c:	90 e0       	ldi	r25, 0x00	; 0
   1ce8e:	0e 94 1b 70 	call	0xe036	; 0xe036 <mmc_init>
   1ce92:	89 2b       	or	r24, r25
   1ce94:	51 f4       	brne	.+20     	; 0x1ceaa <main+0x22e>
		printf("MMC initialized\n");
   1ce96:	85 e1       	ldi	r24, 0x15	; 21
   1ce98:	98 e4       	ldi	r25, 0x48	; 72
   1ce9a:	a0 e0       	ldi	r26, 0x00	; 0
   1ce9c:	ed b7       	in	r30, 0x3d	; 61
   1ce9e:	fe b7       	in	r31, 0x3e	; 62
   1cea0:	81 83       	std	Z+1, r24	; 0x01
   1cea2:	92 83       	std	Z+2, r25	; 0x02
   1cea4:	a3 83       	std	Z+3, r26	; 0x03
   1cea6:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
    sep();
   1ceaa:	0e 94 0b 33 	call	0x6616	; 0x6616 <sep>

///@ initialize bus state as soon as practical
    gpib_bus_init();
   1ceae:	0e 94 c1 86 	call	0x10d82	; 0x10d82 <gpib_bus_init>
    printf("GPIB bus initialized\n");
   1ceb2:	8f ef       	ldi	r24, 0xFF	; 255
   1ceb4:	97 e4       	ldi	r25, 0x47	; 71
   1ceb6:	a0 e0       	ldi	r26, 0x00	; 0
   1ceb8:	ed b7       	in	r30, 0x3d	; 61
   1ceba:	fe b7       	in	r31, 0x3e	; 62
   1cebc:	81 83       	std	Z+1, r24	; 0x01
   1cebe:	92 83       	std	Z+2, r25	; 0x02
   1cec0:	a3 83       	std	Z+3, r26	; 0x03
   1cec2:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>

///@ initialize Printer Capture
    printer_init();
   1cec6:	0e 94 29 bf 	call	0x17e52	; 0x17e52 <printer_init>
    printf("Printer initialized\n");
   1ceca:	8a ee       	ldi	r24, 0xEA	; 234
   1cecc:	97 e4       	ldi	r25, 0x47	; 71
   1cece:	a0 e0       	ldi	r26, 0x00	; 0
   1ced0:	ed b7       	in	r30, 0x3d	; 61
   1ced2:	fe b7       	in	r31, 0x3e	; 62
   1ced4:	81 83       	std	Z+1, r24	; 0x01
   1ced6:	92 83       	std	Z+2, r25	; 0x02
   1ced8:	a3 83       	std	Z+3, r26	; 0x03
   1ceda:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>

///@ initialize GPIB timer tasks
    printf("GPIB Timer Setup\n");
   1cede:	88 ed       	ldi	r24, 0xD8	; 216
   1cee0:	97 e4       	ldi	r25, 0x47	; 71
   1cee2:	a0 e0       	ldi	r26, 0x00	; 0
   1cee4:	ed b7       	in	r30, 0x3d	; 61
   1cee6:	fe b7       	in	r31, 0x3e	; 62
   1cee8:	81 83       	std	Z+1, r24	; 0x01
   1ceea:	92 83       	std	Z+2, r25	; 0x02
   1ceec:	a3 83       	std	Z+3, r26	; 0x03
   1ceee:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
    gpib_timer_init();
   1cef2:	0e 94 d5 84 	call	0x109aa	; 0x109aa <gpib_timer_init>
    printf("GPIB Timer initialized\n");
   1cef6:	80 ec       	ldi	r24, 0xC0	; 192
   1cef8:	97 e4       	ldi	r25, 0x47	; 71
   1cefa:	a0 e0       	ldi	r26, 0x00	; 0
   1cefc:	ed b7       	in	r30, 0x3d	; 61
   1cefe:	fe b7       	in	r31, 0x3e	; 62
   1cf00:	81 83       	std	Z+1, r24	; 0x01
   1cf02:	92 83       	std	Z+2, r25	; 0x02
   1cf04:	a3 83       	std	Z+3, r26	; 0x03
   1cf06:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>

///@brief Process hp85disk emulator config file
    gpib_file_init();
   1cf0a:	0e 94 39 8d 	call	0x11a72	; 0x11a72 <gpib_file_init>
    printf("GPIB File init done\n");
   1cf0e:	8b ea       	ldi	r24, 0xAB	; 171
   1cf10:	97 e4       	ldi	r25, 0x47	; 71
   1cf12:	a0 e0       	ldi	r26, 0x00	; 0
   1cf14:	ed b7       	in	r30, 0x3d	; 61
   1cf16:	fe b7       	in	r31, 0x3e	; 62
   1cf18:	81 83       	std	Z+1, r24	; 0x01
   1cf1a:	92 83       	std	Z+2, r25	; 0x02
   1cf1c:	a3 83       	std	Z+3, r26	; 0x03
   1cf1e:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>

///@brief GPIB talking/listening state variables
///Must be done AFTER gpib_file_init() so we have a valid configuration
    gpib_state_init();
   1cf22:	0e 94 29 87 	call	0x10e52	; 0x10e52 <gpib_state_init>
    printf("GPIB State init done\n");
   1cf26:	85 e9       	ldi	r24, 0x95	; 149
   1cf28:	97 e4       	ldi	r25, 0x47	; 71
   1cf2a:	a0 e0       	ldi	r26, 0x00	; 0
   1cf2c:	ed b7       	in	r30, 0x3d	; 61
   1cf2e:	fe b7       	in	r31, 0x3e	; 62
   1cf30:	81 83       	std	Z+1, r24	; 0x01
   1cf32:	92 83       	std	Z+2, r25	; 0x02
   1cf34:	a3 83       	std	Z+3, r26	; 0x03
   1cf36:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
    sep();
   1cf3a:	0e 94 0b 33 	call	0x6616	; 0x6616 <sep>

///@brief Display Address Summary
    display_Addresses(0);
   1cf3e:	80 e0       	ldi	r24, 0x00	; 0
   1cf40:	90 e0       	ldi	r25, 0x00	; 0
   1cf42:	0e 94 7f 94 	call	0x128fe	; 0x128fe <display_Addresses>
    sep();
   1cf46:	0e 94 0b 33 	call	0x6616	; 0x6616 <sep>

///@brief Display debug level
    printf("debuglevel   = %04xH\n",(int)debuglevel);
   1cf4a:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1cf4e:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1cf52:	ed b7       	in	r30, 0x3d	; 61
   1cf54:	fe b7       	in	r31, 0x3e	; 62
   1cf56:	95 83       	std	Z+5, r25	; 0x05
   1cf58:	84 83       	std	Z+4, r24	; 0x04
   1cf5a:	8f e7       	ldi	r24, 0x7F	; 127
   1cf5c:	97 e4       	ldi	r25, 0x47	; 71
   1cf5e:	a0 e0       	ldi	r26, 0x00	; 0
   1cf60:	81 83       	std	Z+1, r24	; 0x01
   1cf62:	92 83       	std	Z+2, r25	; 0x02
   1cf64:	a3 83       	std	Z+3, r26	; 0x03
   1cf66:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
    sep();
   1cf6a:	0e 94 0b 33 	call	0x6616	; 0x6616 <sep>

///@brief Format any drives that do not yet exist
    format_drives();
   1cf6e:	0e 94 8d 9b 	call	0x1371a	; 0x1371a <format_drives>

#ifdef LCD_SUPPORT
	update_drive_counts();
   1cf72:	4c de       	rcall	.-872    	; 0x1cc0c <update_drive_counts>
	sprintf((char *) _line2, "%-16s", "(C)Mike Gore");
   1cf74:	8a e0       	ldi	r24, 0x0A	; 10
   1cf76:	97 e1       	ldi	r25, 0x17	; 23
   1cf78:	ed b7       	in	r30, 0x3d	; 61
   1cf7a:	fe b7       	in	r31, 0x3e	; 62
   1cf7c:	97 83       	std	Z+7, r25	; 0x07
   1cf7e:	86 83       	std	Z+6, r24	; 0x06
   1cf80:	89 e7       	ldi	r24, 0x79	; 121
   1cf82:	97 e4       	ldi	r25, 0x47	; 71
   1cf84:	a0 e0       	ldi	r26, 0x00	; 0
   1cf86:	83 83       	std	Z+3, r24	; 0x03
   1cf88:	94 83       	std	Z+4, r25	; 0x04
   1cf8a:	a5 83       	std	Z+5, r26	; 0x05
   1cf8c:	85 ef       	ldi	r24, 0xF5	; 245
   1cf8e:	92 e0       	ldi	r25, 0x02	; 2
   1cf90:	92 83       	std	Z+2, r25	; 0x02
   1cf92:	81 83       	std	Z+1, r24	; 0x01
   1cf94:	0e 94 e8 47 	call	0x8fd0	; 0x8fd0 <sprintf_P>

	i2c_task_run();
   1cf98:	0e 94 64 2d 	call	0x5ac8	; 0x5ac8 <i2c_task_run>
	delayms(1000);
   1cf9c:	68 ee       	ldi	r22, 0xE8	; 232
   1cf9e:	73 e0       	ldi	r23, 0x03	; 3
   1cfa0:	80 e0       	ldi	r24, 0x00	; 0
   1cfa2:	90 e0       	ldi	r25, 0x00	; 0
   1cfa4:	0e 94 d2 28 	call	0x51a4	; 0x51a4 <delayms>
    if(!i2c_task.done || i2c_task.error )
   1cfa8:	80 91 78 17 	lds	r24, 0x1778	; 0x801778 <i2c_task+0x2>
   1cfac:	88 23       	and	r24, r24
   1cfae:	21 f0       	breq	.+8      	; 0x1cfb8 <main+0x33c>
   1cfb0:	80 91 79 17 	lds	r24, 0x1779	; 0x801779 <i2c_task+0x3>
   1cfb4:	88 23       	and	r24, r24
   1cfb6:	61 f0       	breq	.+24     	; 0x1cfd0 <main+0x354>
	{
		i2c_display_task_errors();
   1cfb8:	0e 94 cb 2f 	call	0x5f96	; 0x5f96 <i2c_display_task_errors>
		printf("I2C LCD is NOT attached!\n");
   1cfbc:	8f e5       	ldi	r24, 0x5F	; 95
   1cfbe:	97 e4       	ldi	r25, 0x47	; 71
   1cfc0:	a0 e0       	ldi	r26, 0x00	; 0
   1cfc2:	ed b7       	in	r30, 0x3d	; 61
   1cfc4:	fe b7       	in	r31, 0x3e	; 62
   1cfc6:	81 83       	std	Z+1, r24	; 0x01
   1cfc8:	92 83       	std	Z+2, r25	; 0x02
   1cfca:	a3 83       	std	Z+3, r26	; 0x03
   1cfcc:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
	}
#endif

///@brief Start main GPIB state machine
    printf("Starting GPIB TASK\n");
   1cfd0:	8b e4       	ldi	r24, 0x4B	; 75
   1cfd2:	97 e4       	ldi	r25, 0x47	; 71
   1cfd4:	a0 e0       	ldi	r26, 0x00	; 0
   1cfd6:	ed b7       	in	r30, 0x3d	; 61
   1cfd8:	fe b7       	in	r31, 0x3e	; 62
   1cfda:	81 83       	std	Z+1, r24	; 0x01
   1cfdc:	92 83       	std	Z+2, r25	; 0x02
   1cfde:	a3 83       	std	Z+3, r26	; 0x03
   1cfe0:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <printf_P>
///@brief Keep the task running 
/// task does not exit unless a keypress occurs
/// When it restarts ALL GPIB states are reset 
    while ( 1)
    {
        user_task(1);
   1cfe4:	81 e0       	ldi	r24, 0x01	; 1
   1cfe6:	08 de       	rcall	.-1008   	; 0x1cbf8 <user_task>
   1cfe8:	fd cf       	rjmp	.-6      	; 0x1cfe4 <main+0x368>

0001cfea <__mulsi3>:
   1cfea:	db 01       	movw	r26, r22
   1cfec:	8f 93       	push	r24
   1cfee:	9f 93       	push	r25
   1cff0:	8b d0       	rcall	.+278    	; 0x1d108 <__muluhisi3>
   1cff2:	bf 91       	pop	r27
   1cff4:	af 91       	pop	r26
   1cff6:	a2 9f       	mul	r26, r18
   1cff8:	80 0d       	add	r24, r0
   1cffa:	91 1d       	adc	r25, r1
   1cffc:	a3 9f       	mul	r26, r19
   1cffe:	90 0d       	add	r25, r0
   1d000:	b2 9f       	mul	r27, r18
   1d002:	90 0d       	add	r25, r0
   1d004:	11 24       	eor	r1, r1
   1d006:	08 95       	ret

0001d008 <__udivmodqi4>:
   1d008:	99 1b       	sub	r25, r25
   1d00a:	79 e0       	ldi	r23, 0x09	; 9
   1d00c:	04 c0       	rjmp	.+8      	; 0x1d016 <__udivmodqi4_ep>

0001d00e <__udivmodqi4_loop>:
   1d00e:	99 1f       	adc	r25, r25
   1d010:	96 17       	cp	r25, r22
   1d012:	08 f0       	brcs	.+2      	; 0x1d016 <__udivmodqi4_ep>
   1d014:	96 1b       	sub	r25, r22

0001d016 <__udivmodqi4_ep>:
   1d016:	88 1f       	adc	r24, r24
   1d018:	7a 95       	dec	r23
   1d01a:	c9 f7       	brne	.-14     	; 0x1d00e <__udivmodqi4_loop>
   1d01c:	80 95       	com	r24
   1d01e:	08 95       	ret

0001d020 <__udivmodhi4>:
   1d020:	aa 1b       	sub	r26, r26
   1d022:	bb 1b       	sub	r27, r27
   1d024:	51 e1       	ldi	r21, 0x11	; 17
   1d026:	07 c0       	rjmp	.+14     	; 0x1d036 <__udivmodhi4_ep>

0001d028 <__udivmodhi4_loop>:
   1d028:	aa 1f       	adc	r26, r26
   1d02a:	bb 1f       	adc	r27, r27
   1d02c:	a6 17       	cp	r26, r22
   1d02e:	b7 07       	cpc	r27, r23
   1d030:	10 f0       	brcs	.+4      	; 0x1d036 <__udivmodhi4_ep>
   1d032:	a6 1b       	sub	r26, r22
   1d034:	b7 0b       	sbc	r27, r23

0001d036 <__udivmodhi4_ep>:
   1d036:	88 1f       	adc	r24, r24
   1d038:	99 1f       	adc	r25, r25
   1d03a:	5a 95       	dec	r21
   1d03c:	a9 f7       	brne	.-22     	; 0x1d028 <__udivmodhi4_loop>
   1d03e:	80 95       	com	r24
   1d040:	90 95       	com	r25
   1d042:	bc 01       	movw	r22, r24
   1d044:	cd 01       	movw	r24, r26
   1d046:	08 95       	ret

0001d048 <__divmodhi4>:
   1d048:	97 fb       	bst	r25, 7
   1d04a:	07 2e       	mov	r0, r23
   1d04c:	16 f4       	brtc	.+4      	; 0x1d052 <__divmodhi4+0xa>
   1d04e:	00 94       	com	r0
   1d050:	06 d0       	rcall	.+12     	; 0x1d05e <__divmodhi4_neg1>
   1d052:	77 fd       	sbrc	r23, 7
   1d054:	08 d0       	rcall	.+16     	; 0x1d066 <__divmodhi4_neg2>
   1d056:	e4 df       	rcall	.-56     	; 0x1d020 <__udivmodhi4>
   1d058:	07 fc       	sbrc	r0, 7
   1d05a:	05 d0       	rcall	.+10     	; 0x1d066 <__divmodhi4_neg2>
   1d05c:	3e f4       	brtc	.+14     	; 0x1d06c <__divmodhi4_exit>

0001d05e <__divmodhi4_neg1>:
   1d05e:	90 95       	com	r25
   1d060:	81 95       	neg	r24
   1d062:	9f 4f       	sbci	r25, 0xFF	; 255
   1d064:	08 95       	ret

0001d066 <__divmodhi4_neg2>:
   1d066:	70 95       	com	r23
   1d068:	61 95       	neg	r22
   1d06a:	7f 4f       	sbci	r23, 0xFF	; 255

0001d06c <__divmodhi4_exit>:
   1d06c:	08 95       	ret

0001d06e <__udivmodsi4>:
   1d06e:	a1 e2       	ldi	r26, 0x21	; 33
   1d070:	1a 2e       	mov	r1, r26
   1d072:	aa 1b       	sub	r26, r26
   1d074:	bb 1b       	sub	r27, r27
   1d076:	fd 01       	movw	r30, r26
   1d078:	0d c0       	rjmp	.+26     	; 0x1d094 <__udivmodsi4_ep>

0001d07a <__udivmodsi4_loop>:
   1d07a:	aa 1f       	adc	r26, r26
   1d07c:	bb 1f       	adc	r27, r27
   1d07e:	ee 1f       	adc	r30, r30
   1d080:	ff 1f       	adc	r31, r31
   1d082:	a2 17       	cp	r26, r18
   1d084:	b3 07       	cpc	r27, r19
   1d086:	e4 07       	cpc	r30, r20
   1d088:	f5 07       	cpc	r31, r21
   1d08a:	20 f0       	brcs	.+8      	; 0x1d094 <__udivmodsi4_ep>
   1d08c:	a2 1b       	sub	r26, r18
   1d08e:	b3 0b       	sbc	r27, r19
   1d090:	e4 0b       	sbc	r30, r20
   1d092:	f5 0b       	sbc	r31, r21

0001d094 <__udivmodsi4_ep>:
   1d094:	66 1f       	adc	r22, r22
   1d096:	77 1f       	adc	r23, r23
   1d098:	88 1f       	adc	r24, r24
   1d09a:	99 1f       	adc	r25, r25
   1d09c:	1a 94       	dec	r1
   1d09e:	69 f7       	brne	.-38     	; 0x1d07a <__udivmodsi4_loop>
   1d0a0:	60 95       	com	r22
   1d0a2:	70 95       	com	r23
   1d0a4:	80 95       	com	r24
   1d0a6:	90 95       	com	r25
   1d0a8:	9b 01       	movw	r18, r22
   1d0aa:	ac 01       	movw	r20, r24
   1d0ac:	bd 01       	movw	r22, r26
   1d0ae:	cf 01       	movw	r24, r30
   1d0b0:	08 95       	ret

0001d0b2 <__divmodsi4>:
   1d0b2:	05 2e       	mov	r0, r21
   1d0b4:	97 fb       	bst	r25, 7
   1d0b6:	16 f4       	brtc	.+4      	; 0x1d0bc <__divmodsi4+0xa>
   1d0b8:	00 94       	com	r0
   1d0ba:	0f d0       	rcall	.+30     	; 0x1d0da <__negsi2>
   1d0bc:	57 fd       	sbrc	r21, 7
   1d0be:	05 d0       	rcall	.+10     	; 0x1d0ca <__divmodsi4_neg2>
   1d0c0:	d6 df       	rcall	.-84     	; 0x1d06e <__udivmodsi4>
   1d0c2:	07 fc       	sbrc	r0, 7
   1d0c4:	02 d0       	rcall	.+4      	; 0x1d0ca <__divmodsi4_neg2>
   1d0c6:	46 f4       	brtc	.+16     	; 0x1d0d8 <__divmodsi4_exit>
   1d0c8:	08 c0       	rjmp	.+16     	; 0x1d0da <__negsi2>

0001d0ca <__divmodsi4_neg2>:
   1d0ca:	50 95       	com	r21
   1d0cc:	40 95       	com	r20
   1d0ce:	30 95       	com	r19
   1d0d0:	21 95       	neg	r18
   1d0d2:	3f 4f       	sbci	r19, 0xFF	; 255
   1d0d4:	4f 4f       	sbci	r20, 0xFF	; 255
   1d0d6:	5f 4f       	sbci	r21, 0xFF	; 255

0001d0d8 <__divmodsi4_exit>:
   1d0d8:	08 95       	ret

0001d0da <__negsi2>:
   1d0da:	90 95       	com	r25
   1d0dc:	80 95       	com	r24
   1d0de:	70 95       	com	r23
   1d0e0:	61 95       	neg	r22
   1d0e2:	7f 4f       	sbci	r23, 0xFF	; 255
   1d0e4:	8f 4f       	sbci	r24, 0xFF	; 255
   1d0e6:	9f 4f       	sbci	r25, 0xFF	; 255
   1d0e8:	08 95       	ret

0001d0ea <__tablejump2__>:
   1d0ea:	ee 0f       	add	r30, r30
   1d0ec:	ff 1f       	adc	r31, r31
   1d0ee:	00 24       	eor	r0, r0
   1d0f0:	00 1c       	adc	r0, r0
   1d0f2:	0b be       	out	0x3b, r0	; 59
   1d0f4:	07 90       	elpm	r0, Z+
   1d0f6:	f6 91       	elpm	r31, Z
   1d0f8:	e0 2d       	mov	r30, r0
   1d0fa:	09 94       	ijmp

0001d0fc <__usmulhisi3>:
   1d0fc:	6f d0       	rcall	.+222    	; 0x1d1dc <__umulhisi3>

0001d0fe <__usmulhisi3_tail>:
   1d0fe:	b7 ff       	sbrs	r27, 7
   1d100:	08 95       	ret
   1d102:	82 1b       	sub	r24, r18
   1d104:	93 0b       	sbc	r25, r19
   1d106:	08 95       	ret

0001d108 <__muluhisi3>:
   1d108:	69 d0       	rcall	.+210    	; 0x1d1dc <__umulhisi3>
   1d10a:	a5 9f       	mul	r26, r21
   1d10c:	90 0d       	add	r25, r0
   1d10e:	b4 9f       	mul	r27, r20
   1d110:	90 0d       	add	r25, r0
   1d112:	a4 9f       	mul	r26, r20
   1d114:	80 0d       	add	r24, r0
   1d116:	91 1d       	adc	r25, r1
   1d118:	11 24       	eor	r1, r1
   1d11a:	08 95       	ret

0001d11c <__mulshisi3>:
   1d11c:	b7 ff       	sbrs	r27, 7
   1d11e:	f4 cf       	rjmp	.-24     	; 0x1d108 <__muluhisi3>

0001d120 <__mulohisi3>:
   1d120:	f3 df       	rcall	.-26     	; 0x1d108 <__muluhisi3>
   1d122:	82 1b       	sub	r24, r18
   1d124:	93 0b       	sbc	r25, r19
   1d126:	08 95       	ret

0001d128 <__negdi2>:
   1d128:	60 95       	com	r22
   1d12a:	70 95       	com	r23
   1d12c:	80 95       	com	r24
   1d12e:	90 95       	com	r25
   1d130:	30 95       	com	r19
   1d132:	40 95       	com	r20
   1d134:	50 95       	com	r21
   1d136:	21 95       	neg	r18
   1d138:	3f 4f       	sbci	r19, 0xFF	; 255
   1d13a:	4f 4f       	sbci	r20, 0xFF	; 255
   1d13c:	5f 4f       	sbci	r21, 0xFF	; 255
   1d13e:	6f 4f       	sbci	r22, 0xFF	; 255
   1d140:	7f 4f       	sbci	r23, 0xFF	; 255
   1d142:	8f 4f       	sbci	r24, 0xFF	; 255
   1d144:	9f 4f       	sbci	r25, 0xFF	; 255
   1d146:	08 95       	ret

0001d148 <__prologue_saves__>:
   1d148:	2f 92       	push	r2
   1d14a:	3f 92       	push	r3
   1d14c:	4f 92       	push	r4
   1d14e:	5f 92       	push	r5
   1d150:	6f 92       	push	r6
   1d152:	7f 92       	push	r7
   1d154:	8f 92       	push	r8
   1d156:	9f 92       	push	r9
   1d158:	af 92       	push	r10
   1d15a:	bf 92       	push	r11
   1d15c:	cf 92       	push	r12
   1d15e:	df 92       	push	r13
   1d160:	ef 92       	push	r14
   1d162:	ff 92       	push	r15
   1d164:	0f 93       	push	r16
   1d166:	1f 93       	push	r17
   1d168:	cf 93       	push	r28
   1d16a:	df 93       	push	r29
   1d16c:	cd b7       	in	r28, 0x3d	; 61
   1d16e:	de b7       	in	r29, 0x3e	; 62
   1d170:	ca 1b       	sub	r28, r26
   1d172:	db 0b       	sbc	r29, r27
   1d174:	0f b6       	in	r0, 0x3f	; 63
   1d176:	f8 94       	cli
   1d178:	de bf       	out	0x3e, r29	; 62
   1d17a:	0f be       	out	0x3f, r0	; 63
   1d17c:	cd bf       	out	0x3d, r28	; 61
   1d17e:	09 94       	ijmp

0001d180 <__epilogue_restores__>:
   1d180:	2a 88       	ldd	r2, Y+18	; 0x12
   1d182:	39 88       	ldd	r3, Y+17	; 0x11
   1d184:	48 88       	ldd	r4, Y+16	; 0x10
   1d186:	5f 84       	ldd	r5, Y+15	; 0x0f
   1d188:	6e 84       	ldd	r6, Y+14	; 0x0e
   1d18a:	7d 84       	ldd	r7, Y+13	; 0x0d
   1d18c:	8c 84       	ldd	r8, Y+12	; 0x0c
   1d18e:	9b 84       	ldd	r9, Y+11	; 0x0b
   1d190:	aa 84       	ldd	r10, Y+10	; 0x0a
   1d192:	b9 84       	ldd	r11, Y+9	; 0x09
   1d194:	c8 84       	ldd	r12, Y+8	; 0x08
   1d196:	df 80       	ldd	r13, Y+7	; 0x07
   1d198:	ee 80       	ldd	r14, Y+6	; 0x06
   1d19a:	fd 80       	ldd	r15, Y+5	; 0x05
   1d19c:	0c 81       	ldd	r16, Y+4	; 0x04
   1d19e:	1b 81       	ldd	r17, Y+3	; 0x03
   1d1a0:	aa 81       	ldd	r26, Y+2	; 0x02
   1d1a2:	b9 81       	ldd	r27, Y+1	; 0x01
   1d1a4:	ce 0f       	add	r28, r30
   1d1a6:	d1 1d       	adc	r29, r1
   1d1a8:	0f b6       	in	r0, 0x3f	; 63
   1d1aa:	f8 94       	cli
   1d1ac:	de bf       	out	0x3e, r29	; 62
   1d1ae:	0f be       	out	0x3f, r0	; 63
   1d1b0:	cd bf       	out	0x3d, r28	; 61
   1d1b2:	ed 01       	movw	r28, r26
   1d1b4:	08 95       	ret

0001d1b6 <__xload_1>:
   1d1b6:	57 fd       	sbrc	r21, 7
   1d1b8:	03 c0       	rjmp	.+6      	; 0x1d1c0 <__xload_1+0xa>
   1d1ba:	5b bf       	out	0x3b, r21	; 59
   1d1bc:	67 91       	elpm	r22, Z+
   1d1be:	08 95       	ret
   1d1c0:	60 81       	ld	r22, Z
   1d1c2:	08 95       	ret

0001d1c4 <__cmpdi2_s8>:
   1d1c4:	00 24       	eor	r0, r0
   1d1c6:	a7 fd       	sbrc	r26, 7
   1d1c8:	00 94       	com	r0
   1d1ca:	2a 17       	cp	r18, r26
   1d1cc:	30 05       	cpc	r19, r0
   1d1ce:	40 05       	cpc	r20, r0
   1d1d0:	50 05       	cpc	r21, r0
   1d1d2:	60 05       	cpc	r22, r0
   1d1d4:	70 05       	cpc	r23, r0
   1d1d6:	80 05       	cpc	r24, r0
   1d1d8:	90 05       	cpc	r25, r0
   1d1da:	08 95       	ret

0001d1dc <__umulhisi3>:
   1d1dc:	a2 9f       	mul	r26, r18
   1d1de:	b0 01       	movw	r22, r0
   1d1e0:	b3 9f       	mul	r27, r19
   1d1e2:	c0 01       	movw	r24, r0
   1d1e4:	a3 9f       	mul	r26, r19
   1d1e6:	70 0d       	add	r23, r0
   1d1e8:	81 1d       	adc	r24, r1
   1d1ea:	11 24       	eor	r1, r1
   1d1ec:	91 1d       	adc	r25, r1
   1d1ee:	b2 9f       	mul	r27, r18
   1d1f0:	70 0d       	add	r23, r0
   1d1f2:	81 1d       	adc	r24, r1
   1d1f4:	11 24       	eor	r1, r1
   1d1f6:	91 1d       	adc	r25, r1
   1d1f8:	08 95       	ret

0001d1fa <__subsf3>:
   1d1fa:	50 58       	subi	r21, 0x80	; 128

0001d1fc <__addsf3>:
   1d1fc:	bb 27       	eor	r27, r27
   1d1fe:	aa 27       	eor	r26, r26
   1d200:	0e d0       	rcall	.+28     	; 0x1d21e <__addsf3x>
   1d202:	75 c1       	rjmp	.+746    	; 0x1d4ee <__fp_round>
   1d204:	66 d1       	rcall	.+716    	; 0x1d4d2 <__fp_pscA>
   1d206:	30 f0       	brcs	.+12     	; 0x1d214 <__addsf3+0x18>
   1d208:	6b d1       	rcall	.+726    	; 0x1d4e0 <__fp_pscB>
   1d20a:	20 f0       	brcs	.+8      	; 0x1d214 <__addsf3+0x18>
   1d20c:	31 f4       	brne	.+12     	; 0x1d21a <__addsf3+0x1e>
   1d20e:	9f 3f       	cpi	r25, 0xFF	; 255
   1d210:	11 f4       	brne	.+4      	; 0x1d216 <__addsf3+0x1a>
   1d212:	1e f4       	brtc	.+6      	; 0x1d21a <__addsf3+0x1e>
   1d214:	5b c1       	rjmp	.+694    	; 0x1d4cc <__fp_nan>
   1d216:	0e f4       	brtc	.+2      	; 0x1d21a <__addsf3+0x1e>
   1d218:	e0 95       	com	r30
   1d21a:	e7 fb       	bst	r30, 7
   1d21c:	51 c1       	rjmp	.+674    	; 0x1d4c0 <__fp_inf>

0001d21e <__addsf3x>:
   1d21e:	e9 2f       	mov	r30, r25
   1d220:	77 d1       	rcall	.+750    	; 0x1d510 <__fp_split3>
   1d222:	80 f3       	brcs	.-32     	; 0x1d204 <__addsf3+0x8>
   1d224:	ba 17       	cp	r27, r26
   1d226:	62 07       	cpc	r22, r18
   1d228:	73 07       	cpc	r23, r19
   1d22a:	84 07       	cpc	r24, r20
   1d22c:	95 07       	cpc	r25, r21
   1d22e:	18 f0       	brcs	.+6      	; 0x1d236 <__addsf3x+0x18>
   1d230:	71 f4       	brne	.+28     	; 0x1d24e <__addsf3x+0x30>
   1d232:	9e f5       	brtc	.+102    	; 0x1d29a <__addsf3x+0x7c>
   1d234:	8f c1       	rjmp	.+798    	; 0x1d554 <__fp_zero>
   1d236:	0e f4       	brtc	.+2      	; 0x1d23a <__addsf3x+0x1c>
   1d238:	e0 95       	com	r30
   1d23a:	0b 2e       	mov	r0, r27
   1d23c:	ba 2f       	mov	r27, r26
   1d23e:	a0 2d       	mov	r26, r0
   1d240:	0b 01       	movw	r0, r22
   1d242:	b9 01       	movw	r22, r18
   1d244:	90 01       	movw	r18, r0
   1d246:	0c 01       	movw	r0, r24
   1d248:	ca 01       	movw	r24, r20
   1d24a:	a0 01       	movw	r20, r0
   1d24c:	11 24       	eor	r1, r1
   1d24e:	ff 27       	eor	r31, r31
   1d250:	59 1b       	sub	r21, r25
   1d252:	99 f0       	breq	.+38     	; 0x1d27a <__addsf3x+0x5c>
   1d254:	59 3f       	cpi	r21, 0xF9	; 249
   1d256:	50 f4       	brcc	.+20     	; 0x1d26c <__addsf3x+0x4e>
   1d258:	50 3e       	cpi	r21, 0xE0	; 224
   1d25a:	68 f1       	brcs	.+90     	; 0x1d2b6 <__addsf3x+0x98>
   1d25c:	1a 16       	cp	r1, r26
   1d25e:	f0 40       	sbci	r31, 0x00	; 0
   1d260:	a2 2f       	mov	r26, r18
   1d262:	23 2f       	mov	r18, r19
   1d264:	34 2f       	mov	r19, r20
   1d266:	44 27       	eor	r20, r20
   1d268:	58 5f       	subi	r21, 0xF8	; 248
   1d26a:	f3 cf       	rjmp	.-26     	; 0x1d252 <__addsf3x+0x34>
   1d26c:	46 95       	lsr	r20
   1d26e:	37 95       	ror	r19
   1d270:	27 95       	ror	r18
   1d272:	a7 95       	ror	r26
   1d274:	f0 40       	sbci	r31, 0x00	; 0
   1d276:	53 95       	inc	r21
   1d278:	c9 f7       	brne	.-14     	; 0x1d26c <__addsf3x+0x4e>
   1d27a:	7e f4       	brtc	.+30     	; 0x1d29a <__addsf3x+0x7c>
   1d27c:	1f 16       	cp	r1, r31
   1d27e:	ba 0b       	sbc	r27, r26
   1d280:	62 0b       	sbc	r22, r18
   1d282:	73 0b       	sbc	r23, r19
   1d284:	84 0b       	sbc	r24, r20
   1d286:	ba f0       	brmi	.+46     	; 0x1d2b6 <__addsf3x+0x98>
   1d288:	91 50       	subi	r25, 0x01	; 1
   1d28a:	a1 f0       	breq	.+40     	; 0x1d2b4 <__addsf3x+0x96>
   1d28c:	ff 0f       	add	r31, r31
   1d28e:	bb 1f       	adc	r27, r27
   1d290:	66 1f       	adc	r22, r22
   1d292:	77 1f       	adc	r23, r23
   1d294:	88 1f       	adc	r24, r24
   1d296:	c2 f7       	brpl	.-16     	; 0x1d288 <__addsf3x+0x6a>
   1d298:	0e c0       	rjmp	.+28     	; 0x1d2b6 <__addsf3x+0x98>
   1d29a:	ba 0f       	add	r27, r26
   1d29c:	62 1f       	adc	r22, r18
   1d29e:	73 1f       	adc	r23, r19
   1d2a0:	84 1f       	adc	r24, r20
   1d2a2:	48 f4       	brcc	.+18     	; 0x1d2b6 <__addsf3x+0x98>
   1d2a4:	87 95       	ror	r24
   1d2a6:	77 95       	ror	r23
   1d2a8:	67 95       	ror	r22
   1d2aa:	b7 95       	ror	r27
   1d2ac:	f7 95       	ror	r31
   1d2ae:	9e 3f       	cpi	r25, 0xFE	; 254
   1d2b0:	08 f0       	brcs	.+2      	; 0x1d2b4 <__addsf3x+0x96>
   1d2b2:	b3 cf       	rjmp	.-154    	; 0x1d21a <__addsf3+0x1e>
   1d2b4:	93 95       	inc	r25
   1d2b6:	88 0f       	add	r24, r24
   1d2b8:	08 f0       	brcs	.+2      	; 0x1d2bc <__addsf3x+0x9e>
   1d2ba:	99 27       	eor	r25, r25
   1d2bc:	ee 0f       	add	r30, r30
   1d2be:	97 95       	ror	r25
   1d2c0:	87 95       	ror	r24
   1d2c2:	08 95       	ret

0001d2c4 <__cmpsf2>:
   1d2c4:	d9 d0       	rcall	.+434    	; 0x1d478 <__fp_cmp>
   1d2c6:	08 f4       	brcc	.+2      	; 0x1d2ca <__cmpsf2+0x6>
   1d2c8:	81 e0       	ldi	r24, 0x01	; 1
   1d2ca:	08 95       	ret

0001d2cc <__divsf3>:
   1d2cc:	0c d0       	rcall	.+24     	; 0x1d2e6 <__divsf3x>
   1d2ce:	0f c1       	rjmp	.+542    	; 0x1d4ee <__fp_round>
   1d2d0:	07 d1       	rcall	.+526    	; 0x1d4e0 <__fp_pscB>
   1d2d2:	40 f0       	brcs	.+16     	; 0x1d2e4 <__divsf3+0x18>
   1d2d4:	fe d0       	rcall	.+508    	; 0x1d4d2 <__fp_pscA>
   1d2d6:	30 f0       	brcs	.+12     	; 0x1d2e4 <__divsf3+0x18>
   1d2d8:	21 f4       	brne	.+8      	; 0x1d2e2 <__divsf3+0x16>
   1d2da:	5f 3f       	cpi	r21, 0xFF	; 255
   1d2dc:	19 f0       	breq	.+6      	; 0x1d2e4 <__divsf3+0x18>
   1d2de:	f0 c0       	rjmp	.+480    	; 0x1d4c0 <__fp_inf>
   1d2e0:	51 11       	cpse	r21, r1
   1d2e2:	39 c1       	rjmp	.+626    	; 0x1d556 <__fp_szero>
   1d2e4:	f3 c0       	rjmp	.+486    	; 0x1d4cc <__fp_nan>

0001d2e6 <__divsf3x>:
   1d2e6:	14 d1       	rcall	.+552    	; 0x1d510 <__fp_split3>
   1d2e8:	98 f3       	brcs	.-26     	; 0x1d2d0 <__divsf3+0x4>

0001d2ea <__divsf3_pse>:
   1d2ea:	99 23       	and	r25, r25
   1d2ec:	c9 f3       	breq	.-14     	; 0x1d2e0 <__divsf3+0x14>
   1d2ee:	55 23       	and	r21, r21
   1d2f0:	b1 f3       	breq	.-20     	; 0x1d2de <__divsf3+0x12>
   1d2f2:	95 1b       	sub	r25, r21
   1d2f4:	55 0b       	sbc	r21, r21
   1d2f6:	bb 27       	eor	r27, r27
   1d2f8:	aa 27       	eor	r26, r26
   1d2fa:	62 17       	cp	r22, r18
   1d2fc:	73 07       	cpc	r23, r19
   1d2fe:	84 07       	cpc	r24, r20
   1d300:	38 f0       	brcs	.+14     	; 0x1d310 <__divsf3_pse+0x26>
   1d302:	9f 5f       	subi	r25, 0xFF	; 255
   1d304:	5f 4f       	sbci	r21, 0xFF	; 255
   1d306:	22 0f       	add	r18, r18
   1d308:	33 1f       	adc	r19, r19
   1d30a:	44 1f       	adc	r20, r20
   1d30c:	aa 1f       	adc	r26, r26
   1d30e:	a9 f3       	breq	.-22     	; 0x1d2fa <__divsf3_pse+0x10>
   1d310:	33 d0       	rcall	.+102    	; 0x1d378 <__divsf3_pse+0x8e>
   1d312:	0e 2e       	mov	r0, r30
   1d314:	3a f0       	brmi	.+14     	; 0x1d324 <__divsf3_pse+0x3a>
   1d316:	e0 e8       	ldi	r30, 0x80	; 128
   1d318:	30 d0       	rcall	.+96     	; 0x1d37a <__divsf3_pse+0x90>
   1d31a:	91 50       	subi	r25, 0x01	; 1
   1d31c:	50 40       	sbci	r21, 0x00	; 0
   1d31e:	e6 95       	lsr	r30
   1d320:	00 1c       	adc	r0, r0
   1d322:	ca f7       	brpl	.-14     	; 0x1d316 <__divsf3_pse+0x2c>
   1d324:	29 d0       	rcall	.+82     	; 0x1d378 <__divsf3_pse+0x8e>
   1d326:	fe 2f       	mov	r31, r30
   1d328:	27 d0       	rcall	.+78     	; 0x1d378 <__divsf3_pse+0x8e>
   1d32a:	66 0f       	add	r22, r22
   1d32c:	77 1f       	adc	r23, r23
   1d32e:	88 1f       	adc	r24, r24
   1d330:	bb 1f       	adc	r27, r27
   1d332:	26 17       	cp	r18, r22
   1d334:	37 07       	cpc	r19, r23
   1d336:	48 07       	cpc	r20, r24
   1d338:	ab 07       	cpc	r26, r27
   1d33a:	b0 e8       	ldi	r27, 0x80	; 128
   1d33c:	09 f0       	breq	.+2      	; 0x1d340 <__divsf3_pse+0x56>
   1d33e:	bb 0b       	sbc	r27, r27
   1d340:	80 2d       	mov	r24, r0
   1d342:	bf 01       	movw	r22, r30
   1d344:	ff 27       	eor	r31, r31
   1d346:	93 58       	subi	r25, 0x83	; 131
   1d348:	5f 4f       	sbci	r21, 0xFF	; 255
   1d34a:	2a f0       	brmi	.+10     	; 0x1d356 <__divsf3_pse+0x6c>
   1d34c:	9e 3f       	cpi	r25, 0xFE	; 254
   1d34e:	51 05       	cpc	r21, r1
   1d350:	68 f0       	brcs	.+26     	; 0x1d36c <__divsf3_pse+0x82>
   1d352:	b6 c0       	rjmp	.+364    	; 0x1d4c0 <__fp_inf>
   1d354:	00 c1       	rjmp	.+512    	; 0x1d556 <__fp_szero>
   1d356:	5f 3f       	cpi	r21, 0xFF	; 255
   1d358:	ec f3       	brlt	.-6      	; 0x1d354 <__divsf3_pse+0x6a>
   1d35a:	98 3e       	cpi	r25, 0xE8	; 232
   1d35c:	dc f3       	brlt	.-10     	; 0x1d354 <__divsf3_pse+0x6a>
   1d35e:	86 95       	lsr	r24
   1d360:	77 95       	ror	r23
   1d362:	67 95       	ror	r22
   1d364:	b7 95       	ror	r27
   1d366:	f7 95       	ror	r31
   1d368:	9f 5f       	subi	r25, 0xFF	; 255
   1d36a:	c9 f7       	brne	.-14     	; 0x1d35e <__divsf3_pse+0x74>
   1d36c:	88 0f       	add	r24, r24
   1d36e:	91 1d       	adc	r25, r1
   1d370:	96 95       	lsr	r25
   1d372:	87 95       	ror	r24
   1d374:	97 f9       	bld	r25, 7
   1d376:	08 95       	ret
   1d378:	e1 e0       	ldi	r30, 0x01	; 1
   1d37a:	66 0f       	add	r22, r22
   1d37c:	77 1f       	adc	r23, r23
   1d37e:	88 1f       	adc	r24, r24
   1d380:	bb 1f       	adc	r27, r27
   1d382:	62 17       	cp	r22, r18
   1d384:	73 07       	cpc	r23, r19
   1d386:	84 07       	cpc	r24, r20
   1d388:	ba 07       	cpc	r27, r26
   1d38a:	20 f0       	brcs	.+8      	; 0x1d394 <__divsf3_pse+0xaa>
   1d38c:	62 1b       	sub	r22, r18
   1d38e:	73 0b       	sbc	r23, r19
   1d390:	84 0b       	sbc	r24, r20
   1d392:	ba 0b       	sbc	r27, r26
   1d394:	ee 1f       	adc	r30, r30
   1d396:	88 f7       	brcc	.-30     	; 0x1d37a <__divsf3_pse+0x90>
   1d398:	e0 95       	com	r30
   1d39a:	08 95       	ret

0001d39c <__fixsfsi>:
   1d39c:	04 d0       	rcall	.+8      	; 0x1d3a6 <__fixunssfsi>
   1d39e:	68 94       	set
   1d3a0:	b1 11       	cpse	r27, r1
   1d3a2:	d9 c0       	rjmp	.+434    	; 0x1d556 <__fp_szero>
   1d3a4:	08 95       	ret

0001d3a6 <__fixunssfsi>:
   1d3a6:	bc d0       	rcall	.+376    	; 0x1d520 <__fp_splitA>
   1d3a8:	88 f0       	brcs	.+34     	; 0x1d3cc <__fixunssfsi+0x26>
   1d3aa:	9f 57       	subi	r25, 0x7F	; 127
   1d3ac:	90 f0       	brcs	.+36     	; 0x1d3d2 <__fixunssfsi+0x2c>
   1d3ae:	b9 2f       	mov	r27, r25
   1d3b0:	99 27       	eor	r25, r25
   1d3b2:	b7 51       	subi	r27, 0x17	; 23
   1d3b4:	a0 f0       	brcs	.+40     	; 0x1d3de <__fixunssfsi+0x38>
   1d3b6:	d1 f0       	breq	.+52     	; 0x1d3ec <__fixunssfsi+0x46>
   1d3b8:	66 0f       	add	r22, r22
   1d3ba:	77 1f       	adc	r23, r23
   1d3bc:	88 1f       	adc	r24, r24
   1d3be:	99 1f       	adc	r25, r25
   1d3c0:	1a f0       	brmi	.+6      	; 0x1d3c8 <__fixunssfsi+0x22>
   1d3c2:	ba 95       	dec	r27
   1d3c4:	c9 f7       	brne	.-14     	; 0x1d3b8 <__fixunssfsi+0x12>
   1d3c6:	12 c0       	rjmp	.+36     	; 0x1d3ec <__fixunssfsi+0x46>
   1d3c8:	b1 30       	cpi	r27, 0x01	; 1
   1d3ca:	81 f0       	breq	.+32     	; 0x1d3ec <__fixunssfsi+0x46>
   1d3cc:	c3 d0       	rcall	.+390    	; 0x1d554 <__fp_zero>
   1d3ce:	b1 e0       	ldi	r27, 0x01	; 1
   1d3d0:	08 95       	ret
   1d3d2:	c0 c0       	rjmp	.+384    	; 0x1d554 <__fp_zero>
   1d3d4:	67 2f       	mov	r22, r23
   1d3d6:	78 2f       	mov	r23, r24
   1d3d8:	88 27       	eor	r24, r24
   1d3da:	b8 5f       	subi	r27, 0xF8	; 248
   1d3dc:	39 f0       	breq	.+14     	; 0x1d3ec <__fixunssfsi+0x46>
   1d3de:	b9 3f       	cpi	r27, 0xF9	; 249
   1d3e0:	cc f3       	brlt	.-14     	; 0x1d3d4 <__fixunssfsi+0x2e>
   1d3e2:	86 95       	lsr	r24
   1d3e4:	77 95       	ror	r23
   1d3e6:	67 95       	ror	r22
   1d3e8:	b3 95       	inc	r27
   1d3ea:	d9 f7       	brne	.-10     	; 0x1d3e2 <__fixunssfsi+0x3c>
   1d3ec:	3e f4       	brtc	.+14     	; 0x1d3fc <__fixunssfsi+0x56>
   1d3ee:	90 95       	com	r25
   1d3f0:	80 95       	com	r24
   1d3f2:	70 95       	com	r23
   1d3f4:	61 95       	neg	r22
   1d3f6:	7f 4f       	sbci	r23, 0xFF	; 255
   1d3f8:	8f 4f       	sbci	r24, 0xFF	; 255
   1d3fa:	9f 4f       	sbci	r25, 0xFF	; 255
   1d3fc:	08 95       	ret

0001d3fe <__floatunsisf>:
   1d3fe:	e8 94       	clt
   1d400:	09 c0       	rjmp	.+18     	; 0x1d414 <__floatsisf+0x12>

0001d402 <__floatsisf>:
   1d402:	97 fb       	bst	r25, 7
   1d404:	3e f4       	brtc	.+14     	; 0x1d414 <__floatsisf+0x12>
   1d406:	90 95       	com	r25
   1d408:	80 95       	com	r24
   1d40a:	70 95       	com	r23
   1d40c:	61 95       	neg	r22
   1d40e:	7f 4f       	sbci	r23, 0xFF	; 255
   1d410:	8f 4f       	sbci	r24, 0xFF	; 255
   1d412:	9f 4f       	sbci	r25, 0xFF	; 255
   1d414:	99 23       	and	r25, r25
   1d416:	a9 f0       	breq	.+42     	; 0x1d442 <__floatsisf+0x40>
   1d418:	f9 2f       	mov	r31, r25
   1d41a:	96 e9       	ldi	r25, 0x96	; 150
   1d41c:	bb 27       	eor	r27, r27
   1d41e:	93 95       	inc	r25
   1d420:	f6 95       	lsr	r31
   1d422:	87 95       	ror	r24
   1d424:	77 95       	ror	r23
   1d426:	67 95       	ror	r22
   1d428:	b7 95       	ror	r27
   1d42a:	f1 11       	cpse	r31, r1
   1d42c:	f8 cf       	rjmp	.-16     	; 0x1d41e <__floatsisf+0x1c>
   1d42e:	fa f4       	brpl	.+62     	; 0x1d46e <__floatsisf+0x6c>
   1d430:	bb 0f       	add	r27, r27
   1d432:	11 f4       	brne	.+4      	; 0x1d438 <__floatsisf+0x36>
   1d434:	60 ff       	sbrs	r22, 0
   1d436:	1b c0       	rjmp	.+54     	; 0x1d46e <__floatsisf+0x6c>
   1d438:	6f 5f       	subi	r22, 0xFF	; 255
   1d43a:	7f 4f       	sbci	r23, 0xFF	; 255
   1d43c:	8f 4f       	sbci	r24, 0xFF	; 255
   1d43e:	9f 4f       	sbci	r25, 0xFF	; 255
   1d440:	16 c0       	rjmp	.+44     	; 0x1d46e <__floatsisf+0x6c>
   1d442:	88 23       	and	r24, r24
   1d444:	11 f0       	breq	.+4      	; 0x1d44a <__floatsisf+0x48>
   1d446:	96 e9       	ldi	r25, 0x96	; 150
   1d448:	11 c0       	rjmp	.+34     	; 0x1d46c <__floatsisf+0x6a>
   1d44a:	77 23       	and	r23, r23
   1d44c:	21 f0       	breq	.+8      	; 0x1d456 <__floatsisf+0x54>
   1d44e:	9e e8       	ldi	r25, 0x8E	; 142
   1d450:	87 2f       	mov	r24, r23
   1d452:	76 2f       	mov	r23, r22
   1d454:	05 c0       	rjmp	.+10     	; 0x1d460 <__floatsisf+0x5e>
   1d456:	66 23       	and	r22, r22
   1d458:	71 f0       	breq	.+28     	; 0x1d476 <__floatsisf+0x74>
   1d45a:	96 e8       	ldi	r25, 0x86	; 134
   1d45c:	86 2f       	mov	r24, r22
   1d45e:	70 e0       	ldi	r23, 0x00	; 0
   1d460:	60 e0       	ldi	r22, 0x00	; 0
   1d462:	2a f0       	brmi	.+10     	; 0x1d46e <__floatsisf+0x6c>
   1d464:	9a 95       	dec	r25
   1d466:	66 0f       	add	r22, r22
   1d468:	77 1f       	adc	r23, r23
   1d46a:	88 1f       	adc	r24, r24
   1d46c:	da f7       	brpl	.-10     	; 0x1d464 <__floatsisf+0x62>
   1d46e:	88 0f       	add	r24, r24
   1d470:	96 95       	lsr	r25
   1d472:	87 95       	ror	r24
   1d474:	97 f9       	bld	r25, 7
   1d476:	08 95       	ret

0001d478 <__fp_cmp>:
   1d478:	99 0f       	add	r25, r25
   1d47a:	00 08       	sbc	r0, r0
   1d47c:	55 0f       	add	r21, r21
   1d47e:	aa 0b       	sbc	r26, r26
   1d480:	e0 e8       	ldi	r30, 0x80	; 128
   1d482:	fe ef       	ldi	r31, 0xFE	; 254
   1d484:	16 16       	cp	r1, r22
   1d486:	17 06       	cpc	r1, r23
   1d488:	e8 07       	cpc	r30, r24
   1d48a:	f9 07       	cpc	r31, r25
   1d48c:	c0 f0       	brcs	.+48     	; 0x1d4be <__fp_cmp+0x46>
   1d48e:	12 16       	cp	r1, r18
   1d490:	13 06       	cpc	r1, r19
   1d492:	e4 07       	cpc	r30, r20
   1d494:	f5 07       	cpc	r31, r21
   1d496:	98 f0       	brcs	.+38     	; 0x1d4be <__fp_cmp+0x46>
   1d498:	62 1b       	sub	r22, r18
   1d49a:	73 0b       	sbc	r23, r19
   1d49c:	84 0b       	sbc	r24, r20
   1d49e:	95 0b       	sbc	r25, r21
   1d4a0:	39 f4       	brne	.+14     	; 0x1d4b0 <__fp_cmp+0x38>
   1d4a2:	0a 26       	eor	r0, r26
   1d4a4:	61 f0       	breq	.+24     	; 0x1d4be <__fp_cmp+0x46>
   1d4a6:	23 2b       	or	r18, r19
   1d4a8:	24 2b       	or	r18, r20
   1d4aa:	25 2b       	or	r18, r21
   1d4ac:	21 f4       	brne	.+8      	; 0x1d4b6 <__fp_cmp+0x3e>
   1d4ae:	08 95       	ret
   1d4b0:	0a 26       	eor	r0, r26
   1d4b2:	09 f4       	brne	.+2      	; 0x1d4b6 <__fp_cmp+0x3e>
   1d4b4:	a1 40       	sbci	r26, 0x01	; 1
   1d4b6:	a6 95       	lsr	r26
   1d4b8:	8f ef       	ldi	r24, 0xFF	; 255
   1d4ba:	81 1d       	adc	r24, r1
   1d4bc:	81 1d       	adc	r24, r1
   1d4be:	08 95       	ret

0001d4c0 <__fp_inf>:
   1d4c0:	97 f9       	bld	r25, 7
   1d4c2:	9f 67       	ori	r25, 0x7F	; 127
   1d4c4:	80 e8       	ldi	r24, 0x80	; 128
   1d4c6:	70 e0       	ldi	r23, 0x00	; 0
   1d4c8:	60 e0       	ldi	r22, 0x00	; 0
   1d4ca:	08 95       	ret

0001d4cc <__fp_nan>:
   1d4cc:	9f ef       	ldi	r25, 0xFF	; 255
   1d4ce:	80 ec       	ldi	r24, 0xC0	; 192
   1d4d0:	08 95       	ret

0001d4d2 <__fp_pscA>:
   1d4d2:	00 24       	eor	r0, r0
   1d4d4:	0a 94       	dec	r0
   1d4d6:	16 16       	cp	r1, r22
   1d4d8:	17 06       	cpc	r1, r23
   1d4da:	18 06       	cpc	r1, r24
   1d4dc:	09 06       	cpc	r0, r25
   1d4de:	08 95       	ret

0001d4e0 <__fp_pscB>:
   1d4e0:	00 24       	eor	r0, r0
   1d4e2:	0a 94       	dec	r0
   1d4e4:	12 16       	cp	r1, r18
   1d4e6:	13 06       	cpc	r1, r19
   1d4e8:	14 06       	cpc	r1, r20
   1d4ea:	05 06       	cpc	r0, r21
   1d4ec:	08 95       	ret

0001d4ee <__fp_round>:
   1d4ee:	09 2e       	mov	r0, r25
   1d4f0:	03 94       	inc	r0
   1d4f2:	00 0c       	add	r0, r0
   1d4f4:	11 f4       	brne	.+4      	; 0x1d4fa <__fp_round+0xc>
   1d4f6:	88 23       	and	r24, r24
   1d4f8:	52 f0       	brmi	.+20     	; 0x1d50e <__fp_round+0x20>
   1d4fa:	bb 0f       	add	r27, r27
   1d4fc:	40 f4       	brcc	.+16     	; 0x1d50e <__fp_round+0x20>
   1d4fe:	bf 2b       	or	r27, r31
   1d500:	11 f4       	brne	.+4      	; 0x1d506 <__fp_round+0x18>
   1d502:	60 ff       	sbrs	r22, 0
   1d504:	04 c0       	rjmp	.+8      	; 0x1d50e <__fp_round+0x20>
   1d506:	6f 5f       	subi	r22, 0xFF	; 255
   1d508:	7f 4f       	sbci	r23, 0xFF	; 255
   1d50a:	8f 4f       	sbci	r24, 0xFF	; 255
   1d50c:	9f 4f       	sbci	r25, 0xFF	; 255
   1d50e:	08 95       	ret

0001d510 <__fp_split3>:
   1d510:	57 fd       	sbrc	r21, 7
   1d512:	90 58       	subi	r25, 0x80	; 128
   1d514:	44 0f       	add	r20, r20
   1d516:	55 1f       	adc	r21, r21
   1d518:	59 f0       	breq	.+22     	; 0x1d530 <__fp_splitA+0x10>
   1d51a:	5f 3f       	cpi	r21, 0xFF	; 255
   1d51c:	71 f0       	breq	.+28     	; 0x1d53a <__fp_splitA+0x1a>
   1d51e:	47 95       	ror	r20

0001d520 <__fp_splitA>:
   1d520:	88 0f       	add	r24, r24
   1d522:	97 fb       	bst	r25, 7
   1d524:	99 1f       	adc	r25, r25
   1d526:	61 f0       	breq	.+24     	; 0x1d540 <__fp_splitA+0x20>
   1d528:	9f 3f       	cpi	r25, 0xFF	; 255
   1d52a:	79 f0       	breq	.+30     	; 0x1d54a <__fp_splitA+0x2a>
   1d52c:	87 95       	ror	r24
   1d52e:	08 95       	ret
   1d530:	12 16       	cp	r1, r18
   1d532:	13 06       	cpc	r1, r19
   1d534:	14 06       	cpc	r1, r20
   1d536:	55 1f       	adc	r21, r21
   1d538:	f2 cf       	rjmp	.-28     	; 0x1d51e <__fp_split3+0xe>
   1d53a:	46 95       	lsr	r20
   1d53c:	f1 df       	rcall	.-30     	; 0x1d520 <__fp_splitA>
   1d53e:	08 c0       	rjmp	.+16     	; 0x1d550 <__fp_splitA+0x30>
   1d540:	16 16       	cp	r1, r22
   1d542:	17 06       	cpc	r1, r23
   1d544:	18 06       	cpc	r1, r24
   1d546:	99 1f       	adc	r25, r25
   1d548:	f1 cf       	rjmp	.-30     	; 0x1d52c <__fp_splitA+0xc>
   1d54a:	86 95       	lsr	r24
   1d54c:	71 05       	cpc	r23, r1
   1d54e:	61 05       	cpc	r22, r1
   1d550:	08 94       	sec
   1d552:	08 95       	ret

0001d554 <__fp_zero>:
   1d554:	e8 94       	clt

0001d556 <__fp_szero>:
   1d556:	bb 27       	eor	r27, r27
   1d558:	66 27       	eor	r22, r22
   1d55a:	77 27       	eor	r23, r23
   1d55c:	cb 01       	movw	r24, r22
   1d55e:	97 f9       	bld	r25, 7
   1d560:	08 95       	ret

0001d562 <__gesf2>:
   1d562:	8a df       	rcall	.-236    	; 0x1d478 <__fp_cmp>
   1d564:	08 f4       	brcc	.+2      	; 0x1d568 <__gesf2+0x6>
   1d566:	8f ef       	ldi	r24, 0xFF	; 255
   1d568:	08 95       	ret

0001d56a <__mulsf3>:
   1d56a:	0b d0       	rcall	.+22     	; 0x1d582 <__mulsf3x>
   1d56c:	c0 cf       	rjmp	.-128    	; 0x1d4ee <__fp_round>
   1d56e:	b1 df       	rcall	.-158    	; 0x1d4d2 <__fp_pscA>
   1d570:	28 f0       	brcs	.+10     	; 0x1d57c <__mulsf3+0x12>
   1d572:	b6 df       	rcall	.-148    	; 0x1d4e0 <__fp_pscB>
   1d574:	18 f0       	brcs	.+6      	; 0x1d57c <__mulsf3+0x12>
   1d576:	95 23       	and	r25, r21
   1d578:	09 f0       	breq	.+2      	; 0x1d57c <__mulsf3+0x12>
   1d57a:	a2 cf       	rjmp	.-188    	; 0x1d4c0 <__fp_inf>
   1d57c:	a7 cf       	rjmp	.-178    	; 0x1d4cc <__fp_nan>
   1d57e:	11 24       	eor	r1, r1
   1d580:	ea cf       	rjmp	.-44     	; 0x1d556 <__fp_szero>

0001d582 <__mulsf3x>:
   1d582:	c6 df       	rcall	.-116    	; 0x1d510 <__fp_split3>
   1d584:	a0 f3       	brcs	.-24     	; 0x1d56e <__mulsf3+0x4>

0001d586 <__mulsf3_pse>:
   1d586:	95 9f       	mul	r25, r21
   1d588:	d1 f3       	breq	.-12     	; 0x1d57e <__mulsf3+0x14>
   1d58a:	95 0f       	add	r25, r21
   1d58c:	50 e0       	ldi	r21, 0x00	; 0
   1d58e:	55 1f       	adc	r21, r21
   1d590:	62 9f       	mul	r22, r18
   1d592:	f0 01       	movw	r30, r0
   1d594:	72 9f       	mul	r23, r18
   1d596:	bb 27       	eor	r27, r27
   1d598:	f0 0d       	add	r31, r0
   1d59a:	b1 1d       	adc	r27, r1
   1d59c:	63 9f       	mul	r22, r19
   1d59e:	aa 27       	eor	r26, r26
   1d5a0:	f0 0d       	add	r31, r0
   1d5a2:	b1 1d       	adc	r27, r1
   1d5a4:	aa 1f       	adc	r26, r26
   1d5a6:	64 9f       	mul	r22, r20
   1d5a8:	66 27       	eor	r22, r22
   1d5aa:	b0 0d       	add	r27, r0
   1d5ac:	a1 1d       	adc	r26, r1
   1d5ae:	66 1f       	adc	r22, r22
   1d5b0:	82 9f       	mul	r24, r18
   1d5b2:	22 27       	eor	r18, r18
   1d5b4:	b0 0d       	add	r27, r0
   1d5b6:	a1 1d       	adc	r26, r1
   1d5b8:	62 1f       	adc	r22, r18
   1d5ba:	73 9f       	mul	r23, r19
   1d5bc:	b0 0d       	add	r27, r0
   1d5be:	a1 1d       	adc	r26, r1
   1d5c0:	62 1f       	adc	r22, r18
   1d5c2:	83 9f       	mul	r24, r19
   1d5c4:	a0 0d       	add	r26, r0
   1d5c6:	61 1d       	adc	r22, r1
   1d5c8:	22 1f       	adc	r18, r18
   1d5ca:	74 9f       	mul	r23, r20
   1d5cc:	33 27       	eor	r19, r19
   1d5ce:	a0 0d       	add	r26, r0
   1d5d0:	61 1d       	adc	r22, r1
   1d5d2:	23 1f       	adc	r18, r19
   1d5d4:	84 9f       	mul	r24, r20
   1d5d6:	60 0d       	add	r22, r0
   1d5d8:	21 1d       	adc	r18, r1
   1d5da:	82 2f       	mov	r24, r18
   1d5dc:	76 2f       	mov	r23, r22
   1d5de:	6a 2f       	mov	r22, r26
   1d5e0:	11 24       	eor	r1, r1
   1d5e2:	9f 57       	subi	r25, 0x7F	; 127
   1d5e4:	50 40       	sbci	r21, 0x00	; 0
   1d5e6:	8a f0       	brmi	.+34     	; 0x1d60a <__mulsf3_pse+0x84>
   1d5e8:	e1 f0       	breq	.+56     	; 0x1d622 <__mulsf3_pse+0x9c>
   1d5ea:	88 23       	and	r24, r24
   1d5ec:	4a f0       	brmi	.+18     	; 0x1d600 <__mulsf3_pse+0x7a>
   1d5ee:	ee 0f       	add	r30, r30
   1d5f0:	ff 1f       	adc	r31, r31
   1d5f2:	bb 1f       	adc	r27, r27
   1d5f4:	66 1f       	adc	r22, r22
   1d5f6:	77 1f       	adc	r23, r23
   1d5f8:	88 1f       	adc	r24, r24
   1d5fa:	91 50       	subi	r25, 0x01	; 1
   1d5fc:	50 40       	sbci	r21, 0x00	; 0
   1d5fe:	a9 f7       	brne	.-22     	; 0x1d5ea <__mulsf3_pse+0x64>
   1d600:	9e 3f       	cpi	r25, 0xFE	; 254
   1d602:	51 05       	cpc	r21, r1
   1d604:	70 f0       	brcs	.+28     	; 0x1d622 <__mulsf3_pse+0x9c>
   1d606:	5c cf       	rjmp	.-328    	; 0x1d4c0 <__fp_inf>
   1d608:	a6 cf       	rjmp	.-180    	; 0x1d556 <__fp_szero>
   1d60a:	5f 3f       	cpi	r21, 0xFF	; 255
   1d60c:	ec f3       	brlt	.-6      	; 0x1d608 <__mulsf3_pse+0x82>
   1d60e:	98 3e       	cpi	r25, 0xE8	; 232
   1d610:	dc f3       	brlt	.-10     	; 0x1d608 <__mulsf3_pse+0x82>
   1d612:	86 95       	lsr	r24
   1d614:	77 95       	ror	r23
   1d616:	67 95       	ror	r22
   1d618:	b7 95       	ror	r27
   1d61a:	f7 95       	ror	r31
   1d61c:	e7 95       	ror	r30
   1d61e:	9f 5f       	subi	r25, 0xFF	; 255
   1d620:	c1 f7       	brne	.-16     	; 0x1d612 <__mulsf3_pse+0x8c>
   1d622:	fe 2b       	or	r31, r30
   1d624:	88 0f       	add	r24, r24
   1d626:	91 1d       	adc	r25, r1
   1d628:	96 95       	lsr	r25
   1d62a:	87 95       	ror	r24
   1d62c:	97 f9       	bld	r25, 7
   1d62e:	08 95       	ret

0001d630 <round>:
   1d630:	77 df       	rcall	.-274    	; 0x1d520 <__fp_splitA>
   1d632:	e0 f0       	brcs	.+56     	; 0x1d66c <round+0x3c>
   1d634:	9e 37       	cpi	r25, 0x7E	; 126
   1d636:	d8 f0       	brcs	.+54     	; 0x1d66e <round+0x3e>
   1d638:	96 39       	cpi	r25, 0x96	; 150
   1d63a:	b8 f4       	brcc	.+46     	; 0x1d66a <round+0x3a>
   1d63c:	9e 38       	cpi	r25, 0x8E	; 142
   1d63e:	48 f4       	brcc	.+18     	; 0x1d652 <round+0x22>
   1d640:	67 2f       	mov	r22, r23
   1d642:	78 2f       	mov	r23, r24
   1d644:	88 27       	eor	r24, r24
   1d646:	98 5f       	subi	r25, 0xF8	; 248
   1d648:	f9 cf       	rjmp	.-14     	; 0x1d63c <round+0xc>
   1d64a:	86 95       	lsr	r24
   1d64c:	77 95       	ror	r23
   1d64e:	67 95       	ror	r22
   1d650:	93 95       	inc	r25
   1d652:	95 39       	cpi	r25, 0x95	; 149
   1d654:	d0 f3       	brcs	.-12     	; 0x1d64a <round+0x1a>
   1d656:	b6 2f       	mov	r27, r22
   1d658:	b1 70       	andi	r27, 0x01	; 1
   1d65a:	6b 0f       	add	r22, r27
   1d65c:	71 1d       	adc	r23, r1
   1d65e:	81 1d       	adc	r24, r1
   1d660:	20 f4       	brcc	.+8      	; 0x1d66a <round+0x3a>
   1d662:	87 95       	ror	r24
   1d664:	77 95       	ror	r23
   1d666:	67 95       	ror	r22
   1d668:	93 95       	inc	r25
   1d66a:	02 c0       	rjmp	.+4      	; 0x1d670 <__fp_mintl>
   1d66c:	1c c0       	rjmp	.+56     	; 0x1d6a6 <__fp_mpack>
   1d66e:	73 cf       	rjmp	.-282    	; 0x1d556 <__fp_szero>

0001d670 <__fp_mintl>:
   1d670:	88 23       	and	r24, r24
   1d672:	71 f4       	brne	.+28     	; 0x1d690 <__fp_mintl+0x20>
   1d674:	77 23       	and	r23, r23
   1d676:	21 f0       	breq	.+8      	; 0x1d680 <__fp_mintl+0x10>
   1d678:	98 50       	subi	r25, 0x08	; 8
   1d67a:	87 2b       	or	r24, r23
   1d67c:	76 2f       	mov	r23, r22
   1d67e:	07 c0       	rjmp	.+14     	; 0x1d68e <__fp_mintl+0x1e>
   1d680:	66 23       	and	r22, r22
   1d682:	11 f4       	brne	.+4      	; 0x1d688 <__fp_mintl+0x18>
   1d684:	99 27       	eor	r25, r25
   1d686:	0d c0       	rjmp	.+26     	; 0x1d6a2 <__fp_mintl+0x32>
   1d688:	90 51       	subi	r25, 0x10	; 16
   1d68a:	86 2b       	or	r24, r22
   1d68c:	70 e0       	ldi	r23, 0x00	; 0
   1d68e:	60 e0       	ldi	r22, 0x00	; 0
   1d690:	2a f0       	brmi	.+10     	; 0x1d69c <__fp_mintl+0x2c>
   1d692:	9a 95       	dec	r25
   1d694:	66 0f       	add	r22, r22
   1d696:	77 1f       	adc	r23, r23
   1d698:	88 1f       	adc	r24, r24
   1d69a:	da f7       	brpl	.-10     	; 0x1d692 <__fp_mintl+0x22>
   1d69c:	88 0f       	add	r24, r24
   1d69e:	96 95       	lsr	r25
   1d6a0:	87 95       	ror	r24
   1d6a2:	97 f9       	bld	r25, 7
   1d6a4:	08 95       	ret

0001d6a6 <__fp_mpack>:
   1d6a6:	9f 3f       	cpi	r25, 0xFF	; 255
   1d6a8:	31 f0       	breq	.+12     	; 0x1d6b6 <__fp_mpack_finite+0xc>

0001d6aa <__fp_mpack_finite>:
   1d6aa:	91 50       	subi	r25, 0x01	; 1
   1d6ac:	20 f4       	brcc	.+8      	; 0x1d6b6 <__fp_mpack_finite+0xc>
   1d6ae:	87 95       	ror	r24
   1d6b0:	77 95       	ror	r23
   1d6b2:	67 95       	ror	r22
   1d6b4:	b7 95       	ror	r27
   1d6b6:	88 0f       	add	r24, r24
   1d6b8:	91 1d       	adc	r25, r1
   1d6ba:	96 95       	lsr	r25
   1d6bc:	87 95       	ror	r24
   1d6be:	97 f9       	bld	r25, 7
   1d6c0:	08 95       	ret

0001d6c2 <calloc>:
   1d6c2:	0f 93       	push	r16
   1d6c4:	1f 93       	push	r17
   1d6c6:	cf 93       	push	r28
   1d6c8:	df 93       	push	r29
   1d6ca:	86 9f       	mul	r24, r22
   1d6cc:	80 01       	movw	r16, r0
   1d6ce:	87 9f       	mul	r24, r23
   1d6d0:	10 0d       	add	r17, r0
   1d6d2:	96 9f       	mul	r25, r22
   1d6d4:	10 0d       	add	r17, r0
   1d6d6:	11 24       	eor	r1, r1
   1d6d8:	c8 01       	movw	r24, r16
   1d6da:	0d d0       	rcall	.+26     	; 0x1d6f6 <malloc>
   1d6dc:	ec 01       	movw	r28, r24
   1d6de:	00 97       	sbiw	r24, 0x00	; 0
   1d6e0:	21 f0       	breq	.+8      	; 0x1d6ea <calloc+0x28>
   1d6e2:	a8 01       	movw	r20, r16
   1d6e4:	60 e0       	ldi	r22, 0x00	; 0
   1d6e6:	70 e0       	ldi	r23, 0x00	; 0
   1d6e8:	27 d1       	rcall	.+590    	; 0x1d938 <memset>
   1d6ea:	ce 01       	movw	r24, r28
   1d6ec:	df 91       	pop	r29
   1d6ee:	cf 91       	pop	r28
   1d6f0:	1f 91       	pop	r17
   1d6f2:	0f 91       	pop	r16
   1d6f4:	08 95       	ret

0001d6f6 <malloc>:
   1d6f6:	0f 93       	push	r16
   1d6f8:	1f 93       	push	r17
   1d6fa:	cf 93       	push	r28
   1d6fc:	df 93       	push	r29
   1d6fe:	82 30       	cpi	r24, 0x02	; 2
   1d700:	91 05       	cpc	r25, r1
   1d702:	10 f4       	brcc	.+4      	; 0x1d708 <malloc+0x12>
   1d704:	82 e0       	ldi	r24, 0x02	; 2
   1d706:	90 e0       	ldi	r25, 0x00	; 0
   1d708:	e0 91 2e 20 	lds	r30, 0x202E	; 0x80202e <__flp>
   1d70c:	f0 91 2f 20 	lds	r31, 0x202F	; 0x80202f <__flp+0x1>
   1d710:	20 e0       	ldi	r18, 0x00	; 0
   1d712:	30 e0       	ldi	r19, 0x00	; 0
   1d714:	a0 e0       	ldi	r26, 0x00	; 0
   1d716:	b0 e0       	ldi	r27, 0x00	; 0
   1d718:	30 97       	sbiw	r30, 0x00	; 0
   1d71a:	19 f1       	breq	.+70     	; 0x1d762 <malloc+0x6c>
   1d71c:	40 81       	ld	r20, Z
   1d71e:	51 81       	ldd	r21, Z+1	; 0x01
   1d720:	02 81       	ldd	r16, Z+2	; 0x02
   1d722:	13 81       	ldd	r17, Z+3	; 0x03
   1d724:	48 17       	cp	r20, r24
   1d726:	59 07       	cpc	r21, r25
   1d728:	c8 f0       	brcs	.+50     	; 0x1d75c <malloc+0x66>
   1d72a:	84 17       	cp	r24, r20
   1d72c:	95 07       	cpc	r25, r21
   1d72e:	69 f4       	brne	.+26     	; 0x1d74a <malloc+0x54>
   1d730:	10 97       	sbiw	r26, 0x00	; 0
   1d732:	31 f0       	breq	.+12     	; 0x1d740 <malloc+0x4a>
   1d734:	12 96       	adiw	r26, 0x02	; 2
   1d736:	0c 93       	st	X, r16
   1d738:	12 97       	sbiw	r26, 0x02	; 2
   1d73a:	13 96       	adiw	r26, 0x03	; 3
   1d73c:	1c 93       	st	X, r17
   1d73e:	27 c0       	rjmp	.+78     	; 0x1d78e <malloc+0x98>
   1d740:	00 93 2e 20 	sts	0x202E, r16	; 0x80202e <__flp>
   1d744:	10 93 2f 20 	sts	0x202F, r17	; 0x80202f <__flp+0x1>
   1d748:	22 c0       	rjmp	.+68     	; 0x1d78e <malloc+0x98>
   1d74a:	21 15       	cp	r18, r1
   1d74c:	31 05       	cpc	r19, r1
   1d74e:	19 f0       	breq	.+6      	; 0x1d756 <malloc+0x60>
   1d750:	42 17       	cp	r20, r18
   1d752:	53 07       	cpc	r21, r19
   1d754:	18 f4       	brcc	.+6      	; 0x1d75c <malloc+0x66>
   1d756:	9a 01       	movw	r18, r20
   1d758:	bd 01       	movw	r22, r26
   1d75a:	ef 01       	movw	r28, r30
   1d75c:	df 01       	movw	r26, r30
   1d75e:	f8 01       	movw	r30, r16
   1d760:	db cf       	rjmp	.-74     	; 0x1d718 <malloc+0x22>
   1d762:	21 15       	cp	r18, r1
   1d764:	31 05       	cpc	r19, r1
   1d766:	f9 f0       	breq	.+62     	; 0x1d7a6 <malloc+0xb0>
   1d768:	28 1b       	sub	r18, r24
   1d76a:	39 0b       	sbc	r19, r25
   1d76c:	24 30       	cpi	r18, 0x04	; 4
   1d76e:	31 05       	cpc	r19, r1
   1d770:	80 f4       	brcc	.+32     	; 0x1d792 <malloc+0x9c>
   1d772:	8a 81       	ldd	r24, Y+2	; 0x02
   1d774:	9b 81       	ldd	r25, Y+3	; 0x03
   1d776:	61 15       	cp	r22, r1
   1d778:	71 05       	cpc	r23, r1
   1d77a:	21 f0       	breq	.+8      	; 0x1d784 <malloc+0x8e>
   1d77c:	fb 01       	movw	r30, r22
   1d77e:	93 83       	std	Z+3, r25	; 0x03
   1d780:	82 83       	std	Z+2, r24	; 0x02
   1d782:	04 c0       	rjmp	.+8      	; 0x1d78c <malloc+0x96>
   1d784:	90 93 2f 20 	sts	0x202F, r25	; 0x80202f <__flp+0x1>
   1d788:	80 93 2e 20 	sts	0x202E, r24	; 0x80202e <__flp>
   1d78c:	fe 01       	movw	r30, r28
   1d78e:	32 96       	adiw	r30, 0x02	; 2
   1d790:	44 c0       	rjmp	.+136    	; 0x1d81a <malloc+0x124>
   1d792:	fe 01       	movw	r30, r28
   1d794:	e2 0f       	add	r30, r18
   1d796:	f3 1f       	adc	r31, r19
   1d798:	81 93       	st	Z+, r24
   1d79a:	91 93       	st	Z+, r25
   1d79c:	22 50       	subi	r18, 0x02	; 2
   1d79e:	31 09       	sbc	r19, r1
   1d7a0:	39 83       	std	Y+1, r19	; 0x01
   1d7a2:	28 83       	st	Y, r18
   1d7a4:	3a c0       	rjmp	.+116    	; 0x1d81a <malloc+0x124>
   1d7a6:	20 91 2c 20 	lds	r18, 0x202C	; 0x80202c <__brkval>
   1d7aa:	30 91 2d 20 	lds	r19, 0x202D	; 0x80202d <__brkval+0x1>
   1d7ae:	23 2b       	or	r18, r19
   1d7b0:	41 f4       	brne	.+16     	; 0x1d7c2 <malloc+0xcc>
   1d7b2:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
   1d7b6:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
   1d7ba:	30 93 2d 20 	sts	0x202D, r19	; 0x80202d <__brkval+0x1>
   1d7be:	20 93 2c 20 	sts	0x202C, r18	; 0x80202c <__brkval>
   1d7c2:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
   1d7c6:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
   1d7ca:	21 15       	cp	r18, r1
   1d7cc:	31 05       	cpc	r19, r1
   1d7ce:	41 f4       	brne	.+16     	; 0x1d7e0 <malloc+0xea>
   1d7d0:	2d b7       	in	r18, 0x3d	; 61
   1d7d2:	3e b7       	in	r19, 0x3e	; 62
   1d7d4:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
   1d7d8:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
   1d7dc:	24 1b       	sub	r18, r20
   1d7de:	35 0b       	sbc	r19, r21
   1d7e0:	e0 91 2c 20 	lds	r30, 0x202C	; 0x80202c <__brkval>
   1d7e4:	f0 91 2d 20 	lds	r31, 0x202D	; 0x80202d <__brkval+0x1>
   1d7e8:	e2 17       	cp	r30, r18
   1d7ea:	f3 07       	cpc	r31, r19
   1d7ec:	a0 f4       	brcc	.+40     	; 0x1d816 <malloc+0x120>
   1d7ee:	2e 1b       	sub	r18, r30
   1d7f0:	3f 0b       	sbc	r19, r31
   1d7f2:	28 17       	cp	r18, r24
   1d7f4:	39 07       	cpc	r19, r25
   1d7f6:	78 f0       	brcs	.+30     	; 0x1d816 <malloc+0x120>
   1d7f8:	ac 01       	movw	r20, r24
   1d7fa:	4e 5f       	subi	r20, 0xFE	; 254
   1d7fc:	5f 4f       	sbci	r21, 0xFF	; 255
   1d7fe:	24 17       	cp	r18, r20
   1d800:	35 07       	cpc	r19, r21
   1d802:	48 f0       	brcs	.+18     	; 0x1d816 <malloc+0x120>
   1d804:	4e 0f       	add	r20, r30
   1d806:	5f 1f       	adc	r21, r31
   1d808:	50 93 2d 20 	sts	0x202D, r21	; 0x80202d <__brkval+0x1>
   1d80c:	40 93 2c 20 	sts	0x202C, r20	; 0x80202c <__brkval>
   1d810:	81 93       	st	Z+, r24
   1d812:	91 93       	st	Z+, r25
   1d814:	02 c0       	rjmp	.+4      	; 0x1d81a <malloc+0x124>
   1d816:	e0 e0       	ldi	r30, 0x00	; 0
   1d818:	f0 e0       	ldi	r31, 0x00	; 0
   1d81a:	cf 01       	movw	r24, r30
   1d81c:	df 91       	pop	r29
   1d81e:	cf 91       	pop	r28
   1d820:	1f 91       	pop	r17
   1d822:	0f 91       	pop	r16
   1d824:	08 95       	ret

0001d826 <free>:
   1d826:	cf 93       	push	r28
   1d828:	df 93       	push	r29
   1d82a:	00 97       	sbiw	r24, 0x00	; 0
   1d82c:	09 f4       	brne	.+2      	; 0x1d830 <free+0xa>
   1d82e:	81 c0       	rjmp	.+258    	; 0x1d932 <free+0x10c>
   1d830:	fc 01       	movw	r30, r24
   1d832:	32 97       	sbiw	r30, 0x02	; 2
   1d834:	13 82       	std	Z+3, r1	; 0x03
   1d836:	12 82       	std	Z+2, r1	; 0x02
   1d838:	a0 91 2e 20 	lds	r26, 0x202E	; 0x80202e <__flp>
   1d83c:	b0 91 2f 20 	lds	r27, 0x202F	; 0x80202f <__flp+0x1>
   1d840:	10 97       	sbiw	r26, 0x00	; 0
   1d842:	81 f4       	brne	.+32     	; 0x1d864 <free+0x3e>
   1d844:	20 81       	ld	r18, Z
   1d846:	31 81       	ldd	r19, Z+1	; 0x01
   1d848:	82 0f       	add	r24, r18
   1d84a:	93 1f       	adc	r25, r19
   1d84c:	20 91 2c 20 	lds	r18, 0x202C	; 0x80202c <__brkval>
   1d850:	30 91 2d 20 	lds	r19, 0x202D	; 0x80202d <__brkval+0x1>
   1d854:	28 17       	cp	r18, r24
   1d856:	39 07       	cpc	r19, r25
   1d858:	51 f5       	brne	.+84     	; 0x1d8ae <free+0x88>
   1d85a:	f0 93 2d 20 	sts	0x202D, r31	; 0x80202d <__brkval+0x1>
   1d85e:	e0 93 2c 20 	sts	0x202C, r30	; 0x80202c <__brkval>
   1d862:	67 c0       	rjmp	.+206    	; 0x1d932 <free+0x10c>
   1d864:	ed 01       	movw	r28, r26
   1d866:	20 e0       	ldi	r18, 0x00	; 0
   1d868:	30 e0       	ldi	r19, 0x00	; 0
   1d86a:	ce 17       	cp	r28, r30
   1d86c:	df 07       	cpc	r29, r31
   1d86e:	40 f4       	brcc	.+16     	; 0x1d880 <free+0x5a>
   1d870:	4a 81       	ldd	r20, Y+2	; 0x02
   1d872:	5b 81       	ldd	r21, Y+3	; 0x03
   1d874:	9e 01       	movw	r18, r28
   1d876:	41 15       	cp	r20, r1
   1d878:	51 05       	cpc	r21, r1
   1d87a:	f1 f0       	breq	.+60     	; 0x1d8b8 <free+0x92>
   1d87c:	ea 01       	movw	r28, r20
   1d87e:	f5 cf       	rjmp	.-22     	; 0x1d86a <free+0x44>
   1d880:	d3 83       	std	Z+3, r29	; 0x03
   1d882:	c2 83       	std	Z+2, r28	; 0x02
   1d884:	40 81       	ld	r20, Z
   1d886:	51 81       	ldd	r21, Z+1	; 0x01
   1d888:	84 0f       	add	r24, r20
   1d88a:	95 1f       	adc	r25, r21
   1d88c:	c8 17       	cp	r28, r24
   1d88e:	d9 07       	cpc	r29, r25
   1d890:	59 f4       	brne	.+22     	; 0x1d8a8 <free+0x82>
   1d892:	88 81       	ld	r24, Y
   1d894:	99 81       	ldd	r25, Y+1	; 0x01
   1d896:	84 0f       	add	r24, r20
   1d898:	95 1f       	adc	r25, r21
   1d89a:	02 96       	adiw	r24, 0x02	; 2
   1d89c:	91 83       	std	Z+1, r25	; 0x01
   1d89e:	80 83       	st	Z, r24
   1d8a0:	8a 81       	ldd	r24, Y+2	; 0x02
   1d8a2:	9b 81       	ldd	r25, Y+3	; 0x03
   1d8a4:	93 83       	std	Z+3, r25	; 0x03
   1d8a6:	82 83       	std	Z+2, r24	; 0x02
   1d8a8:	21 15       	cp	r18, r1
   1d8aa:	31 05       	cpc	r19, r1
   1d8ac:	29 f4       	brne	.+10     	; 0x1d8b8 <free+0x92>
   1d8ae:	f0 93 2f 20 	sts	0x202F, r31	; 0x80202f <__flp+0x1>
   1d8b2:	e0 93 2e 20 	sts	0x202E, r30	; 0x80202e <__flp>
   1d8b6:	3d c0       	rjmp	.+122    	; 0x1d932 <free+0x10c>
   1d8b8:	e9 01       	movw	r28, r18
   1d8ba:	fb 83       	std	Y+3, r31	; 0x03
   1d8bc:	ea 83       	std	Y+2, r30	; 0x02
   1d8be:	49 91       	ld	r20, Y+
   1d8c0:	59 91       	ld	r21, Y+
   1d8c2:	c4 0f       	add	r28, r20
   1d8c4:	d5 1f       	adc	r29, r21
   1d8c6:	ec 17       	cp	r30, r28
   1d8c8:	fd 07       	cpc	r31, r29
   1d8ca:	61 f4       	brne	.+24     	; 0x1d8e4 <free+0xbe>
   1d8cc:	80 81       	ld	r24, Z
   1d8ce:	91 81       	ldd	r25, Z+1	; 0x01
   1d8d0:	84 0f       	add	r24, r20
   1d8d2:	95 1f       	adc	r25, r21
   1d8d4:	02 96       	adiw	r24, 0x02	; 2
   1d8d6:	e9 01       	movw	r28, r18
   1d8d8:	99 83       	std	Y+1, r25	; 0x01
   1d8da:	88 83       	st	Y, r24
   1d8dc:	82 81       	ldd	r24, Z+2	; 0x02
   1d8de:	93 81       	ldd	r25, Z+3	; 0x03
   1d8e0:	9b 83       	std	Y+3, r25	; 0x03
   1d8e2:	8a 83       	std	Y+2, r24	; 0x02
   1d8e4:	e0 e0       	ldi	r30, 0x00	; 0
   1d8e6:	f0 e0       	ldi	r31, 0x00	; 0
   1d8e8:	12 96       	adiw	r26, 0x02	; 2
   1d8ea:	8d 91       	ld	r24, X+
   1d8ec:	9c 91       	ld	r25, X
   1d8ee:	13 97       	sbiw	r26, 0x03	; 3
   1d8f0:	00 97       	sbiw	r24, 0x00	; 0
   1d8f2:	19 f0       	breq	.+6      	; 0x1d8fa <free+0xd4>
   1d8f4:	fd 01       	movw	r30, r26
   1d8f6:	dc 01       	movw	r26, r24
   1d8f8:	f7 cf       	rjmp	.-18     	; 0x1d8e8 <free+0xc2>
   1d8fa:	8d 91       	ld	r24, X+
   1d8fc:	9c 91       	ld	r25, X
   1d8fe:	11 97       	sbiw	r26, 0x01	; 1
   1d900:	9d 01       	movw	r18, r26
   1d902:	2e 5f       	subi	r18, 0xFE	; 254
   1d904:	3f 4f       	sbci	r19, 0xFF	; 255
   1d906:	82 0f       	add	r24, r18
   1d908:	93 1f       	adc	r25, r19
   1d90a:	20 91 2c 20 	lds	r18, 0x202C	; 0x80202c <__brkval>
   1d90e:	30 91 2d 20 	lds	r19, 0x202D	; 0x80202d <__brkval+0x1>
   1d912:	28 17       	cp	r18, r24
   1d914:	39 07       	cpc	r19, r25
   1d916:	69 f4       	brne	.+26     	; 0x1d932 <free+0x10c>
   1d918:	30 97       	sbiw	r30, 0x00	; 0
   1d91a:	29 f4       	brne	.+10     	; 0x1d926 <free+0x100>
   1d91c:	10 92 2f 20 	sts	0x202F, r1	; 0x80202f <__flp+0x1>
   1d920:	10 92 2e 20 	sts	0x202E, r1	; 0x80202e <__flp>
   1d924:	02 c0       	rjmp	.+4      	; 0x1d92a <free+0x104>
   1d926:	13 82       	std	Z+3, r1	; 0x03
   1d928:	12 82       	std	Z+2, r1	; 0x02
   1d92a:	b0 93 2d 20 	sts	0x202D, r27	; 0x80202d <__brkval+0x1>
   1d92e:	a0 93 2c 20 	sts	0x202C, r26	; 0x80202c <__brkval>
   1d932:	df 91       	pop	r29
   1d934:	cf 91       	pop	r28
   1d936:	08 95       	ret

0001d938 <memset>:
   1d938:	dc 01       	movw	r26, r24
   1d93a:	01 c0       	rjmp	.+2      	; 0x1d93e <memset+0x6>
   1d93c:	6d 93       	st	X+, r22
   1d93e:	41 50       	subi	r20, 0x01	; 1
   1d940:	50 40       	sbci	r21, 0x00	; 0
   1d942:	e0 f7       	brcc	.-8      	; 0x1d93c <memset+0x4>
   1d944:	08 95       	ret

0001d946 <_exit>:
   1d946:	f8 94       	cli

0001d948 <__stop_program>:
   1d948:	ff cf       	rjmp	.-2      	; 0x1d948 <__stop_program>
